{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { isMacintosh } from '../../../../base/common/platform.js';\nimport './dnd.css';\nimport { registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { ModelDecorationOptions } from '../../../common/model/textModel.js';\nimport { DragAndDropCommand } from './dragAndDropCommand.js';\n\nfunction hasTriggerModifier(e) {\n  if (isMacintosh) {\n    return e.altKey;\n  } else {\n    return e.ctrlKey;\n  }\n}\n\nexport class DragAndDropController extends Disposable {\n  constructor(editor) {\n    super();\n    this._editor = editor;\n\n    this._register(this._editor.onMouseDown(e => this._onEditorMouseDown(e)));\n\n    this._register(this._editor.onMouseUp(e => this._onEditorMouseUp(e)));\n\n    this._register(this._editor.onMouseDrag(e => this._onEditorMouseDrag(e)));\n\n    this._register(this._editor.onMouseDrop(e => this._onEditorMouseDrop(e)));\n\n    this._register(this._editor.onMouseDropCanceled(() => this._onEditorMouseDropCanceled()));\n\n    this._register(this._editor.onKeyDown(e => this.onEditorKeyDown(e)));\n\n    this._register(this._editor.onKeyUp(e => this.onEditorKeyUp(e)));\n\n    this._register(this._editor.onDidBlurEditorWidget(() => this.onEditorBlur()));\n\n    this._register(this._editor.onDidBlurEditorText(() => this.onEditorBlur()));\n\n    this._dndDecorationIds = [];\n    this._mouseDown = false;\n    this._modifierPressed = false;\n    this._dragSelection = null;\n  }\n\n  onEditorBlur() {\n    this._removeDecoration();\n\n    this._dragSelection = null;\n    this._mouseDown = false;\n    this._modifierPressed = false;\n  }\n\n  onEditorKeyDown(e) {\n    if (!this._editor.getOption(31\n    /* dragAndDrop */\n    ) || this._editor.getOption(18\n    /* columnSelection */\n    )) {\n      return;\n    }\n\n    if (hasTriggerModifier(e)) {\n      this._modifierPressed = true;\n    }\n\n    if (this._mouseDown && hasTriggerModifier(e)) {\n      this._editor.updateOptions({\n        mouseStyle: 'copy'\n      });\n    }\n  }\n\n  onEditorKeyUp(e) {\n    if (!this._editor.getOption(31\n    /* dragAndDrop */\n    ) || this._editor.getOption(18\n    /* columnSelection */\n    )) {\n      return;\n    }\n\n    if (hasTriggerModifier(e)) {\n      this._modifierPressed = false;\n    }\n\n    if (this._mouseDown && e.keyCode === DragAndDropController.TRIGGER_KEY_VALUE) {\n      this._editor.updateOptions({\n        mouseStyle: 'default'\n      });\n    }\n  }\n\n  _onEditorMouseDown(mouseEvent) {\n    this._mouseDown = true;\n  }\n\n  _onEditorMouseUp(mouseEvent) {\n    this._mouseDown = false; // Whenever users release the mouse, the drag and drop operation should finish and the cursor should revert to text.\n\n    this._editor.updateOptions({\n      mouseStyle: 'text'\n    });\n  }\n\n  _onEditorMouseDrag(mouseEvent) {\n    let target = mouseEvent.target;\n\n    if (this._dragSelection === null) {\n      const selections = this._editor.getSelections() || [];\n      let possibleSelections = selections.filter(selection => target.position && selection.containsPosition(target.position));\n\n      if (possibleSelections.length === 1) {\n        this._dragSelection = possibleSelections[0];\n      } else {\n        return;\n      }\n    }\n\n    if (hasTriggerModifier(mouseEvent.event)) {\n      this._editor.updateOptions({\n        mouseStyle: 'copy'\n      });\n    } else {\n      this._editor.updateOptions({\n        mouseStyle: 'default'\n      });\n    }\n\n    if (target.position) {\n      if (this._dragSelection.containsPosition(target.position)) {\n        this._removeDecoration();\n      } else {\n        this.showAt(target.position);\n      }\n    }\n  }\n\n  _onEditorMouseDropCanceled() {\n    this._editor.updateOptions({\n      mouseStyle: 'text'\n    });\n\n    this._removeDecoration();\n\n    this._dragSelection = null;\n    this._mouseDown = false;\n  }\n\n  _onEditorMouseDrop(mouseEvent) {\n    if (mouseEvent.target && (this._hitContent(mouseEvent.target) || this._hitMargin(mouseEvent.target)) && mouseEvent.target.position) {\n      let newCursorPosition = new Position(mouseEvent.target.position.lineNumber, mouseEvent.target.position.column);\n\n      if (this._dragSelection === null) {\n        let newSelections = null;\n\n        if (mouseEvent.event.shiftKey) {\n          let primarySelection = this._editor.getSelection();\n\n          if (primarySelection) {\n            const {\n              selectionStartLineNumber,\n              selectionStartColumn\n            } = primarySelection;\n            newSelections = [new Selection(selectionStartLineNumber, selectionStartColumn, newCursorPosition.lineNumber, newCursorPosition.column)];\n          }\n        } else {\n          newSelections = (this._editor.getSelections() || []).map(selection => {\n            if (selection.containsPosition(newCursorPosition)) {\n              return new Selection(newCursorPosition.lineNumber, newCursorPosition.column, newCursorPosition.lineNumber, newCursorPosition.column);\n            } else {\n              return selection;\n            }\n          });\n        } // Use `mouse` as the source instead of `api` and setting the reason to explicit (to behave like any other mouse operation).\n\n\n        this._editor.setSelections(newSelections || [], 'mouse', 3\n        /* Explicit */\n        );\n      } else if (!this._dragSelection.containsPosition(newCursorPosition) || (hasTriggerModifier(mouseEvent.event) || this._modifierPressed) && (this._dragSelection.getEndPosition().equals(newCursorPosition) || this._dragSelection.getStartPosition().equals(newCursorPosition)) // we allow users to paste content beside the selection\n      ) {\n        this._editor.pushUndoStop();\n\n        this._editor.executeCommand(DragAndDropController.ID, new DragAndDropCommand(this._dragSelection, newCursorPosition, hasTriggerModifier(mouseEvent.event) || this._modifierPressed));\n\n        this._editor.pushUndoStop();\n      }\n    }\n\n    this._editor.updateOptions({\n      mouseStyle: 'text'\n    });\n\n    this._removeDecoration();\n\n    this._dragSelection = null;\n    this._mouseDown = false;\n  }\n\n  showAt(position) {\n    let newDecorations = [{\n      range: new Range(position.lineNumber, position.column, position.lineNumber, position.column),\n      options: DragAndDropController._DECORATION_OPTIONS\n    }];\n    this._dndDecorationIds = this._editor.deltaDecorations(this._dndDecorationIds, newDecorations);\n\n    this._editor.revealPosition(position, 1\n    /* Immediate */\n    );\n  }\n\n  _removeDecoration() {\n    this._dndDecorationIds = this._editor.deltaDecorations(this._dndDecorationIds, []);\n  }\n\n  _hitContent(target) {\n    return target.type === 6\n    /* CONTENT_TEXT */\n    || target.type === 7\n    /* CONTENT_EMPTY */\n    ;\n  }\n\n  _hitMargin(target) {\n    return target.type === 2\n    /* GUTTER_GLYPH_MARGIN */\n    || target.type === 3\n    /* GUTTER_LINE_NUMBERS */\n    || target.type === 4\n    /* GUTTER_LINE_DECORATIONS */\n    ;\n  }\n\n  dispose() {\n    this._removeDecoration();\n\n    this._dragSelection = null;\n    this._mouseDown = false;\n    this._modifierPressed = false;\n    super.dispose();\n  }\n\n}\nDragAndDropController.ID = 'editor.contrib.dragAndDrop';\nDragAndDropController.TRIGGER_KEY_VALUE = isMacintosh ? 6\n/* Alt */\n: 5\n/* Ctrl */\n;\nDragAndDropController._DECORATION_OPTIONS = ModelDecorationOptions.register({\n  description: 'dnd-target',\n  className: 'dnd-target'\n});\nregisterEditorContribution(DragAndDropController.ID, DragAndDropController);","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/contrib/dnd/browser/dnd.js"],"names":["Disposable","isMacintosh","registerEditorContribution","Position","Range","Selection","ModelDecorationOptions","DragAndDropCommand","hasTriggerModifier","e","altKey","ctrlKey","DragAndDropController","constructor","editor","_editor","_register","onMouseDown","_onEditorMouseDown","onMouseUp","_onEditorMouseUp","onMouseDrag","_onEditorMouseDrag","onMouseDrop","_onEditorMouseDrop","onMouseDropCanceled","_onEditorMouseDropCanceled","onKeyDown","onEditorKeyDown","onKeyUp","onEditorKeyUp","onDidBlurEditorWidget","onEditorBlur","onDidBlurEditorText","_dndDecorationIds","_mouseDown","_modifierPressed","_dragSelection","_removeDecoration","getOption","updateOptions","mouseStyle","keyCode","TRIGGER_KEY_VALUE","mouseEvent","target","selections","getSelections","possibleSelections","filter","selection","position","containsPosition","length","event","showAt","_hitContent","_hitMargin","newCursorPosition","lineNumber","column","newSelections","shiftKey","primarySelection","getSelection","selectionStartLineNumber","selectionStartColumn","map","setSelections","getEndPosition","equals","getStartPosition","pushUndoStop","executeCommand","ID","newDecorations","range","options","_DECORATION_OPTIONS","deltaDecorations","revealPosition","type","dispose","register","description","className"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { isMacintosh } from '../../../../base/common/platform.js';\nimport './dnd.css';\nimport { registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { ModelDecorationOptions } from '../../../common/model/textModel.js';\nimport { DragAndDropCommand } from './dragAndDropCommand.js';\nfunction hasTriggerModifier(e) {\n    if (isMacintosh) {\n        return e.altKey;\n    }\n    else {\n        return e.ctrlKey;\n    }\n}\nexport class DragAndDropController extends Disposable {\n    constructor(editor) {\n        super();\n        this._editor = editor;\n        this._register(this._editor.onMouseDown((e) => this._onEditorMouseDown(e)));\n        this._register(this._editor.onMouseUp((e) => this._onEditorMouseUp(e)));\n        this._register(this._editor.onMouseDrag((e) => this._onEditorMouseDrag(e)));\n        this._register(this._editor.onMouseDrop((e) => this._onEditorMouseDrop(e)));\n        this._register(this._editor.onMouseDropCanceled(() => this._onEditorMouseDropCanceled()));\n        this._register(this._editor.onKeyDown((e) => this.onEditorKeyDown(e)));\n        this._register(this._editor.onKeyUp((e) => this.onEditorKeyUp(e)));\n        this._register(this._editor.onDidBlurEditorWidget(() => this.onEditorBlur()));\n        this._register(this._editor.onDidBlurEditorText(() => this.onEditorBlur()));\n        this._dndDecorationIds = [];\n        this._mouseDown = false;\n        this._modifierPressed = false;\n        this._dragSelection = null;\n    }\n    onEditorBlur() {\n        this._removeDecoration();\n        this._dragSelection = null;\n        this._mouseDown = false;\n        this._modifierPressed = false;\n    }\n    onEditorKeyDown(e) {\n        if (!this._editor.getOption(31 /* dragAndDrop */) || this._editor.getOption(18 /* columnSelection */)) {\n            return;\n        }\n        if (hasTriggerModifier(e)) {\n            this._modifierPressed = true;\n        }\n        if (this._mouseDown && hasTriggerModifier(e)) {\n            this._editor.updateOptions({\n                mouseStyle: 'copy'\n            });\n        }\n    }\n    onEditorKeyUp(e) {\n        if (!this._editor.getOption(31 /* dragAndDrop */) || this._editor.getOption(18 /* columnSelection */)) {\n            return;\n        }\n        if (hasTriggerModifier(e)) {\n            this._modifierPressed = false;\n        }\n        if (this._mouseDown && e.keyCode === DragAndDropController.TRIGGER_KEY_VALUE) {\n            this._editor.updateOptions({\n                mouseStyle: 'default'\n            });\n        }\n    }\n    _onEditorMouseDown(mouseEvent) {\n        this._mouseDown = true;\n    }\n    _onEditorMouseUp(mouseEvent) {\n        this._mouseDown = false;\n        // Whenever users release the mouse, the drag and drop operation should finish and the cursor should revert to text.\n        this._editor.updateOptions({\n            mouseStyle: 'text'\n        });\n    }\n    _onEditorMouseDrag(mouseEvent) {\n        let target = mouseEvent.target;\n        if (this._dragSelection === null) {\n            const selections = this._editor.getSelections() || [];\n            let possibleSelections = selections.filter(selection => target.position && selection.containsPosition(target.position));\n            if (possibleSelections.length === 1) {\n                this._dragSelection = possibleSelections[0];\n            }\n            else {\n                return;\n            }\n        }\n        if (hasTriggerModifier(mouseEvent.event)) {\n            this._editor.updateOptions({\n                mouseStyle: 'copy'\n            });\n        }\n        else {\n            this._editor.updateOptions({\n                mouseStyle: 'default'\n            });\n        }\n        if (target.position) {\n            if (this._dragSelection.containsPosition(target.position)) {\n                this._removeDecoration();\n            }\n            else {\n                this.showAt(target.position);\n            }\n        }\n    }\n    _onEditorMouseDropCanceled() {\n        this._editor.updateOptions({\n            mouseStyle: 'text'\n        });\n        this._removeDecoration();\n        this._dragSelection = null;\n        this._mouseDown = false;\n    }\n    _onEditorMouseDrop(mouseEvent) {\n        if (mouseEvent.target && (this._hitContent(mouseEvent.target) || this._hitMargin(mouseEvent.target)) && mouseEvent.target.position) {\n            let newCursorPosition = new Position(mouseEvent.target.position.lineNumber, mouseEvent.target.position.column);\n            if (this._dragSelection === null) {\n                let newSelections = null;\n                if (mouseEvent.event.shiftKey) {\n                    let primarySelection = this._editor.getSelection();\n                    if (primarySelection) {\n                        const { selectionStartLineNumber, selectionStartColumn } = primarySelection;\n                        newSelections = [new Selection(selectionStartLineNumber, selectionStartColumn, newCursorPosition.lineNumber, newCursorPosition.column)];\n                    }\n                }\n                else {\n                    newSelections = (this._editor.getSelections() || []).map(selection => {\n                        if (selection.containsPosition(newCursorPosition)) {\n                            return new Selection(newCursorPosition.lineNumber, newCursorPosition.column, newCursorPosition.lineNumber, newCursorPosition.column);\n                        }\n                        else {\n                            return selection;\n                        }\n                    });\n                }\n                // Use `mouse` as the source instead of `api` and setting the reason to explicit (to behave like any other mouse operation).\n                this._editor.setSelections(newSelections || [], 'mouse', 3 /* Explicit */);\n            }\n            else if (!this._dragSelection.containsPosition(newCursorPosition) ||\n                ((hasTriggerModifier(mouseEvent.event) ||\n                    this._modifierPressed) && (this._dragSelection.getEndPosition().equals(newCursorPosition) || this._dragSelection.getStartPosition().equals(newCursorPosition)) // we allow users to paste content beside the selection\n                )) {\n                this._editor.pushUndoStop();\n                this._editor.executeCommand(DragAndDropController.ID, new DragAndDropCommand(this._dragSelection, newCursorPosition, hasTriggerModifier(mouseEvent.event) || this._modifierPressed));\n                this._editor.pushUndoStop();\n            }\n        }\n        this._editor.updateOptions({\n            mouseStyle: 'text'\n        });\n        this._removeDecoration();\n        this._dragSelection = null;\n        this._mouseDown = false;\n    }\n    showAt(position) {\n        let newDecorations = [{\n                range: new Range(position.lineNumber, position.column, position.lineNumber, position.column),\n                options: DragAndDropController._DECORATION_OPTIONS\n            }];\n        this._dndDecorationIds = this._editor.deltaDecorations(this._dndDecorationIds, newDecorations);\n        this._editor.revealPosition(position, 1 /* Immediate */);\n    }\n    _removeDecoration() {\n        this._dndDecorationIds = this._editor.deltaDecorations(this._dndDecorationIds, []);\n    }\n    _hitContent(target) {\n        return target.type === 6 /* CONTENT_TEXT */ ||\n            target.type === 7 /* CONTENT_EMPTY */;\n    }\n    _hitMargin(target) {\n        return target.type === 2 /* GUTTER_GLYPH_MARGIN */ ||\n            target.type === 3 /* GUTTER_LINE_NUMBERS */ ||\n            target.type === 4 /* GUTTER_LINE_DECORATIONS */;\n    }\n    dispose() {\n        this._removeDecoration();\n        this._dragSelection = null;\n        this._mouseDown = false;\n        this._modifierPressed = false;\n        super.dispose();\n    }\n}\nDragAndDropController.ID = 'editor.contrib.dragAndDrop';\nDragAndDropController.TRIGGER_KEY_VALUE = isMacintosh ? 6 /* Alt */ : 5 /* Ctrl */;\nDragAndDropController._DECORATION_OPTIONS = ModelDecorationOptions.register({\n    description: 'dnd-target',\n    className: 'dnd-target'\n});\nregisterEditorContribution(DragAndDropController.ID, DragAndDropController);\n"]},"metadata":{},"sourceType":"module"}