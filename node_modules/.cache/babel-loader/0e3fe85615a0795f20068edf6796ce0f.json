{"ast":null,"code":"var urlParse = require('url').parse;\n\nvar ClientConstants = require('./protocol/constants/client');\n\nvar Charsets = require('./protocol/constants/charsets');\n\nvar SSLProfiles = null;\nmodule.exports = ConnectionConfig;\n\nfunction ConnectionConfig(options) {\n  if (typeof options === 'string') {\n    options = ConnectionConfig.parseUrl(options);\n  }\n\n  this.host = options.host || 'localhost';\n  this.port = options.port || 3306;\n  this.localAddress = options.localAddress;\n  this.socketPath = options.socketPath;\n  this.user = options.user || undefined;\n  this.password = options.password || undefined;\n  this.database = options.database;\n  this.connectTimeout = options.connectTimeout === undefined ? 10 * 1000 : options.connectTimeout;\n  this.insecureAuth = options.insecureAuth || false;\n  this.supportBigNumbers = options.supportBigNumbers || false;\n  this.bigNumberStrings = options.bigNumberStrings || false;\n  this.dateStrings = options.dateStrings || false;\n  this.debug = options.debug;\n  this.trace = options.trace !== false;\n  this.stringifyObjects = options.stringifyObjects || false;\n  this.timezone = options.timezone || 'local';\n  this.flags = options.flags || '';\n  this.queryFormat = options.queryFormat;\n  this.pool = options.pool || undefined;\n  this.ssl = typeof options.ssl === 'string' ? ConnectionConfig.getSSLProfile(options.ssl) : options.ssl || false;\n  this.localInfile = options.localInfile === undefined ? true : options.localInfile;\n  this.multipleStatements = options.multipleStatements || false;\n  this.typeCast = options.typeCast === undefined ? true : options.typeCast;\n\n  if (this.timezone[0] === ' ') {\n    // \"+\" is a url encoded char for space so it\n    // gets translated to space when giving a\n    // connection string..\n    this.timezone = '+' + this.timezone.substr(1);\n  }\n\n  if (this.ssl) {\n    // Default rejectUnauthorized to true\n    this.ssl.rejectUnauthorized = this.ssl.rejectUnauthorized !== false;\n  }\n\n  this.maxPacketSize = 0;\n  this.charsetNumber = options.charset ? ConnectionConfig.getCharsetNumber(options.charset) : options.charsetNumber || Charsets.UTF8_GENERAL_CI; // Set the client flags\n\n  var defaultFlags = ConnectionConfig.getDefaultFlags(options);\n  this.clientFlags = ConnectionConfig.mergeFlags(defaultFlags, options.flags);\n}\n\nConnectionConfig.mergeFlags = function mergeFlags(defaultFlags, userFlags) {\n  var allFlags = ConnectionConfig.parseFlagList(defaultFlags);\n  var newFlags = ConnectionConfig.parseFlagList(userFlags); // Merge the new flags\n\n  for (var flag in newFlags) {\n    if (allFlags[flag] !== false) {\n      allFlags[flag] = newFlags[flag];\n    }\n  } // Build flags\n\n\n  var flags = 0x0;\n\n  for (var flag in allFlags) {\n    if (allFlags[flag]) {\n      // TODO: Throw here on some future release\n      flags |= ClientConstants['CLIENT_' + flag] || 0x0;\n    }\n  }\n\n  return flags;\n};\n\nConnectionConfig.getCharsetNumber = function getCharsetNumber(charset) {\n  var num = Charsets[charset.toUpperCase()];\n\n  if (num === undefined) {\n    throw new TypeError('Unknown charset \\'' + charset + '\\'');\n  }\n\n  return num;\n};\n\nConnectionConfig.getDefaultFlags = function getDefaultFlags(options) {\n  var defaultFlags = ['-COMPRESS', // Compression protocol *NOT* supported\n  '-CONNECT_ATTRS', // Does *NOT* send connection attributes in Protocol::HandshakeResponse41\n  '+CONNECT_WITH_DB', // One can specify db on connect in Handshake Response Packet\n  '+FOUND_ROWS', // Send found rows instead of affected rows\n  '+IGNORE_SIGPIPE', // Don't issue SIGPIPE if network failures\n  '+IGNORE_SPACE', // Let the parser ignore spaces before '('\n  '+LOCAL_FILES', // Can use LOAD DATA LOCAL\n  '+LONG_FLAG', // Longer flags in Protocol::ColumnDefinition320\n  '+LONG_PASSWORD', // Use the improved version of Old Password Authentication\n  '+MULTI_RESULTS', // Can handle multiple resultsets for COM_QUERY\n  '+ODBC', // Special handling of ODBC behaviour\n  '-PLUGIN_AUTH', // Does *NOT* support auth plugins\n  '+PROTOCOL_41', // Uses the 4.1 protocol\n  '+PS_MULTI_RESULTS', // Can handle multiple resultsets for COM_STMT_EXECUTE\n  '+RESERVED', // Unused\n  '+SECURE_CONNECTION', // Supports Authentication::Native41\n  '+TRANSACTIONS' // Expects status flags\n  ];\n\n  if (options && options.localInfile !== undefined && !options.localInfile) {\n    // Disable LOCAL modifier for LOAD DATA INFILE\n    defaultFlags.push('-LOCAL_FILES');\n  }\n\n  if (options && options.multipleStatements) {\n    // May send multiple statements per COM_QUERY and COM_STMT_PREPARE\n    defaultFlags.push('+MULTI_STATEMENTS');\n  }\n\n  return defaultFlags;\n};\n\nConnectionConfig.getSSLProfile = function getSSLProfile(name) {\n  if (!SSLProfiles) {\n    SSLProfiles = require('./protocol/constants/ssl_profiles');\n  }\n\n  var ssl = SSLProfiles[name];\n\n  if (ssl === undefined) {\n    throw new TypeError('Unknown SSL profile \\'' + name + '\\'');\n  }\n\n  return ssl;\n};\n\nConnectionConfig.parseFlagList = function parseFlagList(flagList) {\n  var allFlags = Object.create(null);\n\n  if (!flagList) {\n    return allFlags;\n  }\n\n  var flags = !Array.isArray(flagList) ? String(flagList || '').toUpperCase().split(/\\s*,+\\s*/) : flagList;\n\n  for (var i = 0; i < flags.length; i++) {\n    var flag = flags[i];\n    var offset = 1;\n    var state = flag[0];\n\n    if (state === undefined) {\n      // TODO: throw here on some future release\n      continue;\n    }\n\n    if (state !== '-' && state !== '+') {\n      offset = 0;\n      state = '+';\n    }\n\n    allFlags[flag.substr(offset)] = state === '+';\n  }\n\n  return allFlags;\n};\n\nConnectionConfig.parseUrl = function (url) {\n  url = urlParse(url, true);\n  var options = {\n    host: url.hostname,\n    port: url.port,\n    database: url.pathname.substr(1)\n  };\n\n  if (url.auth) {\n    var auth = url.auth.split(':');\n    options.user = auth.shift();\n    options.password = auth.join(':');\n  }\n\n  if (url.query) {\n    for (var key in url.query) {\n      var value = url.query[key];\n\n      try {\n        // Try to parse this as a JSON expression first\n        options[key] = JSON.parse(value);\n      } catch (err) {\n        // Otherwise assume it is a plain string\n        options[key] = value;\n      }\n    }\n  }\n\n  return options;\n};","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/mysql/lib/ConnectionConfig.js"],"names":["urlParse","require","parse","ClientConstants","Charsets","SSLProfiles","module","exports","ConnectionConfig","options","parseUrl","host","port","localAddress","socketPath","user","undefined","password","database","connectTimeout","insecureAuth","supportBigNumbers","bigNumberStrings","dateStrings","debug","trace","stringifyObjects","timezone","flags","queryFormat","pool","ssl","getSSLProfile","localInfile","multipleStatements","typeCast","substr","rejectUnauthorized","maxPacketSize","charsetNumber","charset","getCharsetNumber","UTF8_GENERAL_CI","defaultFlags","getDefaultFlags","clientFlags","mergeFlags","userFlags","allFlags","parseFlagList","newFlags","flag","num","toUpperCase","TypeError","push","name","flagList","Object","create","Array","isArray","String","split","i","length","offset","state","url","hostname","pathname","auth","shift","join","query","key","value","JSON","err"],"mappings":"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","sourcesContent":["var urlParse        = require('url').parse;\nvar ClientConstants = require('./protocol/constants/client');\nvar Charsets        = require('./protocol/constants/charsets');\nvar SSLProfiles     = null;\n\nmodule.exports = ConnectionConfig;\nfunction ConnectionConfig(options) {\n  if (typeof options === 'string') {\n    options = ConnectionConfig.parseUrl(options);\n  }\n\n  this.host               = options.host || 'localhost';\n  this.port               = options.port || 3306;\n  this.localAddress       = options.localAddress;\n  this.socketPath         = options.socketPath;\n  this.user               = options.user || undefined;\n  this.password           = options.password || undefined;\n  this.database           = options.database;\n  this.connectTimeout     = (options.connectTimeout === undefined)\n    ? (10 * 1000)\n    : options.connectTimeout;\n  this.insecureAuth       = options.insecureAuth || false;\n  this.supportBigNumbers  = options.supportBigNumbers || false;\n  this.bigNumberStrings   = options.bigNumberStrings || false;\n  this.dateStrings        = options.dateStrings || false;\n  this.debug              = options.debug;\n  this.trace              = options.trace !== false;\n  this.stringifyObjects   = options.stringifyObjects || false;\n  this.timezone           = options.timezone || 'local';\n  this.flags              = options.flags || '';\n  this.queryFormat        = options.queryFormat;\n  this.pool               = options.pool || undefined;\n  this.ssl                = (typeof options.ssl === 'string')\n    ? ConnectionConfig.getSSLProfile(options.ssl)\n    : (options.ssl || false);\n  this.localInfile        = (options.localInfile === undefined)\n    ? true\n    : options.localInfile;\n  this.multipleStatements = options.multipleStatements || false;\n  this.typeCast           = (options.typeCast === undefined)\n    ? true\n    : options.typeCast;\n\n  if (this.timezone[0] === ' ') {\n    // \"+\" is a url encoded char for space so it\n    // gets translated to space when giving a\n    // connection string..\n    this.timezone = '+' + this.timezone.substr(1);\n  }\n\n  if (this.ssl) {\n    // Default rejectUnauthorized to true\n    this.ssl.rejectUnauthorized = this.ssl.rejectUnauthorized !== false;\n  }\n\n  this.maxPacketSize = 0;\n  this.charsetNumber = (options.charset)\n    ? ConnectionConfig.getCharsetNumber(options.charset)\n    : options.charsetNumber || Charsets.UTF8_GENERAL_CI;\n\n  // Set the client flags\n  var defaultFlags = ConnectionConfig.getDefaultFlags(options);\n  this.clientFlags = ConnectionConfig.mergeFlags(defaultFlags, options.flags);\n}\n\nConnectionConfig.mergeFlags = function mergeFlags(defaultFlags, userFlags) {\n  var allFlags = ConnectionConfig.parseFlagList(defaultFlags);\n  var newFlags = ConnectionConfig.parseFlagList(userFlags);\n\n  // Merge the new flags\n  for (var flag in newFlags) {\n    if (allFlags[flag] !== false) {\n      allFlags[flag] = newFlags[flag];\n    }\n  }\n\n  // Build flags\n  var flags = 0x0;\n  for (var flag in allFlags) {\n    if (allFlags[flag]) {\n      // TODO: Throw here on some future release\n      flags |= ClientConstants['CLIENT_' + flag] || 0x0;\n    }\n  }\n\n  return flags;\n};\n\nConnectionConfig.getCharsetNumber = function getCharsetNumber(charset) {\n  var num = Charsets[charset.toUpperCase()];\n\n  if (num === undefined) {\n    throw new TypeError('Unknown charset \\'' + charset + '\\'');\n  }\n\n  return num;\n};\n\nConnectionConfig.getDefaultFlags = function getDefaultFlags(options) {\n  var defaultFlags = [\n    '-COMPRESS',          // Compression protocol *NOT* supported\n    '-CONNECT_ATTRS',     // Does *NOT* send connection attributes in Protocol::HandshakeResponse41\n    '+CONNECT_WITH_DB',   // One can specify db on connect in Handshake Response Packet\n    '+FOUND_ROWS',        // Send found rows instead of affected rows\n    '+IGNORE_SIGPIPE',    // Don't issue SIGPIPE if network failures\n    '+IGNORE_SPACE',      // Let the parser ignore spaces before '('\n    '+LOCAL_FILES',       // Can use LOAD DATA LOCAL\n    '+LONG_FLAG',         // Longer flags in Protocol::ColumnDefinition320\n    '+LONG_PASSWORD',     // Use the improved version of Old Password Authentication\n    '+MULTI_RESULTS',     // Can handle multiple resultsets for COM_QUERY\n    '+ODBC',              // Special handling of ODBC behaviour\n    '-PLUGIN_AUTH',       // Does *NOT* support auth plugins\n    '+PROTOCOL_41',       // Uses the 4.1 protocol\n    '+PS_MULTI_RESULTS',  // Can handle multiple resultsets for COM_STMT_EXECUTE\n    '+RESERVED',          // Unused\n    '+SECURE_CONNECTION', // Supports Authentication::Native41\n    '+TRANSACTIONS'       // Expects status flags\n  ];\n\n  if (options && options.localInfile !== undefined && !options.localInfile) {\n    // Disable LOCAL modifier for LOAD DATA INFILE\n    defaultFlags.push('-LOCAL_FILES');\n  }\n\n  if (options && options.multipleStatements) {\n    // May send multiple statements per COM_QUERY and COM_STMT_PREPARE\n    defaultFlags.push('+MULTI_STATEMENTS');\n  }\n\n  return defaultFlags;\n};\n\nConnectionConfig.getSSLProfile = function getSSLProfile(name) {\n  if (!SSLProfiles) {\n    SSLProfiles = require('./protocol/constants/ssl_profiles');\n  }\n\n  var ssl = SSLProfiles[name];\n\n  if (ssl === undefined) {\n    throw new TypeError('Unknown SSL profile \\'' + name + '\\'');\n  }\n\n  return ssl;\n};\n\nConnectionConfig.parseFlagList = function parseFlagList(flagList) {\n  var allFlags = Object.create(null);\n\n  if (!flagList) {\n    return allFlags;\n  }\n\n  var flags = !Array.isArray(flagList)\n    ? String(flagList || '').toUpperCase().split(/\\s*,+\\s*/)\n    : flagList;\n\n  for (var i = 0; i < flags.length; i++) {\n    var flag   = flags[i];\n    var offset = 1;\n    var state  = flag[0];\n\n    if (state === undefined) {\n      // TODO: throw here on some future release\n      continue;\n    }\n\n    if (state !== '-' && state !== '+') {\n      offset = 0;\n      state  = '+';\n    }\n\n    allFlags[flag.substr(offset)] = state === '+';\n  }\n\n  return allFlags;\n};\n\nConnectionConfig.parseUrl = function(url) {\n  url = urlParse(url, true);\n\n  var options = {\n    host     : url.hostname,\n    port     : url.port,\n    database : url.pathname.substr(1)\n  };\n\n  if (url.auth) {\n    var auth = url.auth.split(':');\n    options.user     = auth.shift();\n    options.password = auth.join(':');\n  }\n\n  if (url.query) {\n    for (var key in url.query) {\n      var value = url.query[key];\n\n      try {\n        // Try to parse this as a JSON expression first\n        options[key] = JSON.parse(value);\n      } catch (err) {\n        // Otherwise assume it is a plain string\n        options[key] = value;\n      }\n    }\n  }\n\n  return options;\n};\n"]},"metadata":{},"sourceType":"script"}