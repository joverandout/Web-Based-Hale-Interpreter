{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nexport class CopyLinesCommand {\n  constructor(selection, isCopyingDown, noop) {\n    this._selection = selection;\n    this._isCopyingDown = isCopyingDown;\n    this._noop = noop || false;\n    this._selectionDirection = 0\n    /* LTR */\n    ;\n    this._selectionId = null;\n    this._startLineNumberDelta = 0;\n    this._endLineNumberDelta = 0;\n  }\n\n  getEditOperations(model, builder) {\n    let s = this._selection;\n    this._startLineNumberDelta = 0;\n    this._endLineNumberDelta = 0;\n\n    if (s.startLineNumber < s.endLineNumber && s.endColumn === 1) {\n      this._endLineNumberDelta = 1;\n      s = s.setEndPosition(s.endLineNumber - 1, model.getLineMaxColumn(s.endLineNumber - 1));\n    }\n\n    let sourceLines = [];\n\n    for (let i = s.startLineNumber; i <= s.endLineNumber; i++) {\n      sourceLines.push(model.getLineContent(i));\n    }\n\n    const sourceText = sourceLines.join('\\n');\n\n    if (sourceText === '') {\n      // Duplicating empty line\n      if (this._isCopyingDown) {\n        this._startLineNumberDelta++;\n        this._endLineNumberDelta++;\n      }\n    }\n\n    if (this._noop) {\n      builder.addEditOperation(new Range(s.endLineNumber, model.getLineMaxColumn(s.endLineNumber), s.endLineNumber + 1, 1), s.endLineNumber === model.getLineCount() ? '' : '\\n');\n    } else {\n      if (!this._isCopyingDown) {\n        builder.addEditOperation(new Range(s.endLineNumber, model.getLineMaxColumn(s.endLineNumber), s.endLineNumber, model.getLineMaxColumn(s.endLineNumber)), '\\n' + sourceText);\n      } else {\n        builder.addEditOperation(new Range(s.startLineNumber, 1, s.startLineNumber, 1), sourceText + '\\n');\n      }\n    }\n\n    this._selectionId = builder.trackSelection(s);\n    this._selectionDirection = this._selection.getDirection();\n  }\n\n  computeCursorState(model, helper) {\n    let result = helper.getTrackedSelection(this._selectionId);\n\n    if (this._startLineNumberDelta !== 0 || this._endLineNumberDelta !== 0) {\n      let startLineNumber = result.startLineNumber;\n      let startColumn = result.startColumn;\n      let endLineNumber = result.endLineNumber;\n      let endColumn = result.endColumn;\n\n      if (this._startLineNumberDelta !== 0) {\n        startLineNumber = startLineNumber + this._startLineNumberDelta;\n        startColumn = 1;\n      }\n\n      if (this._endLineNumberDelta !== 0) {\n        endLineNumber = endLineNumber + this._endLineNumberDelta;\n        endColumn = 1;\n      }\n\n      result = Selection.createWithDirection(startLineNumber, startColumn, endLineNumber, endColumn, this._selectionDirection);\n    }\n\n    return result;\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/contrib/linesOperations/browser/copyLinesCommand.js"],"names":["Range","Selection","CopyLinesCommand","constructor","selection","isCopyingDown","noop","_selection","_isCopyingDown","_noop","_selectionDirection","_selectionId","_startLineNumberDelta","_endLineNumberDelta","getEditOperations","model","builder","s","startLineNumber","endLineNumber","endColumn","setEndPosition","getLineMaxColumn","sourceLines","i","push","getLineContent","sourceText","join","addEditOperation","getLineCount","trackSelection","getDirection","computeCursorState","helper","result","getTrackedSelection","startColumn","createWithDirection"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nexport class CopyLinesCommand {\n    constructor(selection, isCopyingDown, noop) {\n        this._selection = selection;\n        this._isCopyingDown = isCopyingDown;\n        this._noop = noop || false;\n        this._selectionDirection = 0 /* LTR */;\n        this._selectionId = null;\n        this._startLineNumberDelta = 0;\n        this._endLineNumberDelta = 0;\n    }\n    getEditOperations(model, builder) {\n        let s = this._selection;\n        this._startLineNumberDelta = 0;\n        this._endLineNumberDelta = 0;\n        if (s.startLineNumber < s.endLineNumber && s.endColumn === 1) {\n            this._endLineNumberDelta = 1;\n            s = s.setEndPosition(s.endLineNumber - 1, model.getLineMaxColumn(s.endLineNumber - 1));\n        }\n        let sourceLines = [];\n        for (let i = s.startLineNumber; i <= s.endLineNumber; i++) {\n            sourceLines.push(model.getLineContent(i));\n        }\n        const sourceText = sourceLines.join('\\n');\n        if (sourceText === '') {\n            // Duplicating empty line\n            if (this._isCopyingDown) {\n                this._startLineNumberDelta++;\n                this._endLineNumberDelta++;\n            }\n        }\n        if (this._noop) {\n            builder.addEditOperation(new Range(s.endLineNumber, model.getLineMaxColumn(s.endLineNumber), s.endLineNumber + 1, 1), s.endLineNumber === model.getLineCount() ? '' : '\\n');\n        }\n        else {\n            if (!this._isCopyingDown) {\n                builder.addEditOperation(new Range(s.endLineNumber, model.getLineMaxColumn(s.endLineNumber), s.endLineNumber, model.getLineMaxColumn(s.endLineNumber)), '\\n' + sourceText);\n            }\n            else {\n                builder.addEditOperation(new Range(s.startLineNumber, 1, s.startLineNumber, 1), sourceText + '\\n');\n            }\n        }\n        this._selectionId = builder.trackSelection(s);\n        this._selectionDirection = this._selection.getDirection();\n    }\n    computeCursorState(model, helper) {\n        let result = helper.getTrackedSelection(this._selectionId);\n        if (this._startLineNumberDelta !== 0 || this._endLineNumberDelta !== 0) {\n            let startLineNumber = result.startLineNumber;\n            let startColumn = result.startColumn;\n            let endLineNumber = result.endLineNumber;\n            let endColumn = result.endColumn;\n            if (this._startLineNumberDelta !== 0) {\n                startLineNumber = startLineNumber + this._startLineNumberDelta;\n                startColumn = 1;\n            }\n            if (this._endLineNumberDelta !== 0) {\n                endLineNumber = endLineNumber + this._endLineNumberDelta;\n                endColumn = 1;\n            }\n            result = Selection.createWithDirection(startLineNumber, startColumn, endLineNumber, endColumn, this._selectionDirection);\n        }\n        return result;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}