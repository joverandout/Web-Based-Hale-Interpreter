{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../../base/common/event.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { Range } from '../../../common/core/range.js';\nexport class GhostText {\n  constructor(lineNumber, parts, additionalReservedLineCount = 0) {\n    this.lineNumber = lineNumber;\n    this.parts = parts;\n    this.additionalReservedLineCount = additionalReservedLineCount;\n  }\n\n  renderForScreenReader(lineText) {\n    if (this.parts.length === 0) {\n      return '';\n    }\n\n    const lastPart = this.parts[this.parts.length - 1];\n    const cappedLineText = lineText.substr(0, lastPart.column - 1);\n    const text = applyEdits(cappedLineText, this.parts.map(p => ({\n      range: {\n        startLineNumber: 1,\n        endLineNumber: 1,\n        startColumn: p.column,\n        endColumn: p.column\n      },\n      text: p.lines.join('\\n')\n    })));\n    return text.substring(this.parts[0].column - 1);\n  }\n\n}\n\nclass PositionOffsetTransformer {\n  constructor(text) {\n    this.lineStartOffsetByLineIdx = [];\n    this.lineStartOffsetByLineIdx.push(0);\n\n    for (let i = 0; i < text.length; i++) {\n      if (text.charAt(i) === '\\n') {\n        this.lineStartOffsetByLineIdx.push(i + 1);\n      }\n    }\n  }\n\n  getOffset(position) {\n    return this.lineStartOffsetByLineIdx[position.lineNumber - 1] + position.column - 1;\n  }\n\n}\n\nfunction applyEdits(text, edits) {\n  const transformer = new PositionOffsetTransformer(text);\n  const offsetEdits = edits.map(e => {\n    const range = Range.lift(e.range);\n    return {\n      startOffset: transformer.getOffset(range.getStartPosition()),\n      endOffset: transformer.getOffset(range.getEndPosition()),\n      text: e.text\n    };\n  });\n  offsetEdits.sort((a, b) => b.startOffset - a.startOffset);\n\n  for (const edit of offsetEdits) {\n    text = text.substring(0, edit.startOffset) + edit.text + text.substring(edit.endOffset);\n  }\n\n  return text;\n}\n\nexport class GhostTextPart {\n  constructor(column, lines,\n  /**\n   * Indicates if this part is a preview of an inline suggestion when a suggestion is previewed.\n  */\n  preview) {\n    this.column = column;\n    this.lines = lines;\n    this.preview = preview;\n  }\n\n}\nexport class BaseGhostTextWidgetModel extends Disposable {\n  constructor(editor) {\n    super();\n    this.editor = editor;\n    this._expanded = undefined;\n    this.onDidChangeEmitter = new Emitter();\n    this.onDidChange = this.onDidChangeEmitter.event;\n\n    this._register(editor.onDidChangeConfiguration(e => {\n      if (e.hasChanged(106\n      /* suggest */\n      ) && this._expanded === undefined) {\n        this.onDidChangeEmitter.fire();\n      }\n    }));\n  }\n\n  setExpanded(expanded) {\n    this._expanded = true;\n    this.onDidChangeEmitter.fire();\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/contrib/inlineCompletions/browser/ghostText.js"],"names":["Emitter","Disposable","Range","GhostText","constructor","lineNumber","parts","additionalReservedLineCount","renderForScreenReader","lineText","length","lastPart","cappedLineText","substr","column","text","applyEdits","map","p","range","startLineNumber","endLineNumber","startColumn","endColumn","lines","join","substring","PositionOffsetTransformer","lineStartOffsetByLineIdx","push","i","charAt","getOffset","position","edits","transformer","offsetEdits","e","lift","startOffset","getStartPosition","endOffset","getEndPosition","sort","a","b","edit","GhostTextPart","preview","BaseGhostTextWidgetModel","editor","_expanded","undefined","onDidChangeEmitter","onDidChange","event","_register","onDidChangeConfiguration","hasChanged","fire","setExpanded","expanded"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../../base/common/event.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { Range } from '../../../common/core/range.js';\nexport class GhostText {\n    constructor(lineNumber, parts, additionalReservedLineCount = 0) {\n        this.lineNumber = lineNumber;\n        this.parts = parts;\n        this.additionalReservedLineCount = additionalReservedLineCount;\n    }\n    renderForScreenReader(lineText) {\n        if (this.parts.length === 0) {\n            return '';\n        }\n        const lastPart = this.parts[this.parts.length - 1];\n        const cappedLineText = lineText.substr(0, lastPart.column - 1);\n        const text = applyEdits(cappedLineText, this.parts.map(p => ({\n            range: { startLineNumber: 1, endLineNumber: 1, startColumn: p.column, endColumn: p.column },\n            text: p.lines.join('\\n')\n        })));\n        return text.substring(this.parts[0].column - 1);\n    }\n}\nclass PositionOffsetTransformer {\n    constructor(text) {\n        this.lineStartOffsetByLineIdx = [];\n        this.lineStartOffsetByLineIdx.push(0);\n        for (let i = 0; i < text.length; i++) {\n            if (text.charAt(i) === '\\n') {\n                this.lineStartOffsetByLineIdx.push(i + 1);\n            }\n        }\n    }\n    getOffset(position) {\n        return this.lineStartOffsetByLineIdx[position.lineNumber - 1] + position.column - 1;\n    }\n}\nfunction applyEdits(text, edits) {\n    const transformer = new PositionOffsetTransformer(text);\n    const offsetEdits = edits.map(e => {\n        const range = Range.lift(e.range);\n        return ({\n            startOffset: transformer.getOffset(range.getStartPosition()),\n            endOffset: transformer.getOffset(range.getEndPosition()),\n            text: e.text\n        });\n    });\n    offsetEdits.sort((a, b) => b.startOffset - a.startOffset);\n    for (const edit of offsetEdits) {\n        text = text.substring(0, edit.startOffset) + edit.text + text.substring(edit.endOffset);\n    }\n    return text;\n}\nexport class GhostTextPart {\n    constructor(column, lines, \n    /**\n     * Indicates if this part is a preview of an inline suggestion when a suggestion is previewed.\n    */\n    preview) {\n        this.column = column;\n        this.lines = lines;\n        this.preview = preview;\n    }\n}\nexport class BaseGhostTextWidgetModel extends Disposable {\n    constructor(editor) {\n        super();\n        this.editor = editor;\n        this._expanded = undefined;\n        this.onDidChangeEmitter = new Emitter();\n        this.onDidChange = this.onDidChangeEmitter.event;\n        this._register(editor.onDidChangeConfiguration((e) => {\n            if (e.hasChanged(106 /* suggest */) && this._expanded === undefined) {\n                this.onDidChangeEmitter.fire();\n            }\n        }));\n    }\n    setExpanded(expanded) {\n        this._expanded = true;\n        this.onDidChangeEmitter.fire();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}