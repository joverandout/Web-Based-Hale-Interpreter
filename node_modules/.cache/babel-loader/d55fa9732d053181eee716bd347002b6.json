{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/**\n * A position in the editor.\n */\nexport class Position {\n  constructor(lineNumber, column) {\n    this.lineNumber = lineNumber;\n    this.column = column;\n  }\n  /**\n   * Create a new position from this position.\n   *\n   * @param newLineNumber new line number\n   * @param newColumn new column\n   */\n\n\n  with(newLineNumber = this.lineNumber, newColumn = this.column) {\n    if (newLineNumber === this.lineNumber && newColumn === this.column) {\n      return this;\n    } else {\n      return new Position(newLineNumber, newColumn);\n    }\n  }\n  /**\n   * Derive a new position from this position.\n   *\n   * @param deltaLineNumber line number delta\n   * @param deltaColumn column delta\n   */\n\n\n  delta(deltaLineNumber = 0, deltaColumn = 0) {\n    return this.with(this.lineNumber + deltaLineNumber, this.column + deltaColumn);\n  }\n  /**\n   * Test if this position equals other position\n   */\n\n\n  equals(other) {\n    return Position.equals(this, other);\n  }\n  /**\n   * Test if position `a` equals position `b`\n   */\n\n\n  static equals(a, b) {\n    if (!a && !b) {\n      return true;\n    }\n\n    return !!a && !!b && a.lineNumber === b.lineNumber && a.column === b.column;\n  }\n  /**\n   * Test if this position is before other position.\n   * If the two positions are equal, the result will be false.\n   */\n\n\n  isBefore(other) {\n    return Position.isBefore(this, other);\n  }\n  /**\n   * Test if position `a` is before position `b`.\n   * If the two positions are equal, the result will be false.\n   */\n\n\n  static isBefore(a, b) {\n    if (a.lineNumber < b.lineNumber) {\n      return true;\n    }\n\n    if (b.lineNumber < a.lineNumber) {\n      return false;\n    }\n\n    return a.column < b.column;\n  }\n  /**\n   * Test if this position is before other position.\n   * If the two positions are equal, the result will be true.\n   */\n\n\n  isBeforeOrEqual(other) {\n    return Position.isBeforeOrEqual(this, other);\n  }\n  /**\n   * Test if position `a` is before position `b`.\n   * If the two positions are equal, the result will be true.\n   */\n\n\n  static isBeforeOrEqual(a, b) {\n    if (a.lineNumber < b.lineNumber) {\n      return true;\n    }\n\n    if (b.lineNumber < a.lineNumber) {\n      return false;\n    }\n\n    return a.column <= b.column;\n  }\n  /**\n   * A function that compares positions, useful for sorting\n   */\n\n\n  static compare(a, b) {\n    const aLineNumber = a.lineNumber | 0;\n    const bLineNumber = b.lineNumber | 0;\n\n    if (aLineNumber === bLineNumber) {\n      const aColumn = a.column | 0;\n      const bColumn = b.column | 0;\n      return aColumn - bColumn;\n    }\n\n    return aLineNumber - bLineNumber;\n  }\n  /**\n   * Clone this position.\n   */\n\n\n  clone() {\n    return new Position(this.lineNumber, this.column);\n  }\n  /**\n   * Convert to a human-readable representation.\n   */\n\n\n  toString() {\n    return '(' + this.lineNumber + ',' + this.column + ')';\n  } // ---\n\n  /**\n   * Create a `Position` from an `IPosition`.\n   */\n\n\n  static lift(pos) {\n    return new Position(pos.lineNumber, pos.column);\n  }\n  /**\n   * Test if `obj` is an `IPosition`.\n   */\n\n\n  static isIPosition(obj) {\n    return obj && typeof obj.lineNumber === 'number' && typeof obj.column === 'number';\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/common/core/position.js"],"names":["Position","constructor","lineNumber","column","with","newLineNumber","newColumn","delta","deltaLineNumber","deltaColumn","equals","other","a","b","isBefore","isBeforeOrEqual","compare","aLineNumber","bLineNumber","aColumn","bColumn","clone","toString","lift","pos","isIPosition","obj"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * A position in the editor.\n */\nexport class Position {\n    constructor(lineNumber, column) {\n        this.lineNumber = lineNumber;\n        this.column = column;\n    }\n    /**\n     * Create a new position from this position.\n     *\n     * @param newLineNumber new line number\n     * @param newColumn new column\n     */\n    with(newLineNumber = this.lineNumber, newColumn = this.column) {\n        if (newLineNumber === this.lineNumber && newColumn === this.column) {\n            return this;\n        }\n        else {\n            return new Position(newLineNumber, newColumn);\n        }\n    }\n    /**\n     * Derive a new position from this position.\n     *\n     * @param deltaLineNumber line number delta\n     * @param deltaColumn column delta\n     */\n    delta(deltaLineNumber = 0, deltaColumn = 0) {\n        return this.with(this.lineNumber + deltaLineNumber, this.column + deltaColumn);\n    }\n    /**\n     * Test if this position equals other position\n     */\n    equals(other) {\n        return Position.equals(this, other);\n    }\n    /**\n     * Test if position `a` equals position `b`\n     */\n    static equals(a, b) {\n        if (!a && !b) {\n            return true;\n        }\n        return (!!a &&\n            !!b &&\n            a.lineNumber === b.lineNumber &&\n            a.column === b.column);\n    }\n    /**\n     * Test if this position is before other position.\n     * If the two positions are equal, the result will be false.\n     */\n    isBefore(other) {\n        return Position.isBefore(this, other);\n    }\n    /**\n     * Test if position `a` is before position `b`.\n     * If the two positions are equal, the result will be false.\n     */\n    static isBefore(a, b) {\n        if (a.lineNumber < b.lineNumber) {\n            return true;\n        }\n        if (b.lineNumber < a.lineNumber) {\n            return false;\n        }\n        return a.column < b.column;\n    }\n    /**\n     * Test if this position is before other position.\n     * If the two positions are equal, the result will be true.\n     */\n    isBeforeOrEqual(other) {\n        return Position.isBeforeOrEqual(this, other);\n    }\n    /**\n     * Test if position `a` is before position `b`.\n     * If the two positions are equal, the result will be true.\n     */\n    static isBeforeOrEqual(a, b) {\n        if (a.lineNumber < b.lineNumber) {\n            return true;\n        }\n        if (b.lineNumber < a.lineNumber) {\n            return false;\n        }\n        return a.column <= b.column;\n    }\n    /**\n     * A function that compares positions, useful for sorting\n     */\n    static compare(a, b) {\n        const aLineNumber = a.lineNumber | 0;\n        const bLineNumber = b.lineNumber | 0;\n        if (aLineNumber === bLineNumber) {\n            const aColumn = a.column | 0;\n            const bColumn = b.column | 0;\n            return aColumn - bColumn;\n        }\n        return aLineNumber - bLineNumber;\n    }\n    /**\n     * Clone this position.\n     */\n    clone() {\n        return new Position(this.lineNumber, this.column);\n    }\n    /**\n     * Convert to a human-readable representation.\n     */\n    toString() {\n        return '(' + this.lineNumber + ',' + this.column + ')';\n    }\n    // ---\n    /**\n     * Create a `Position` from an `IPosition`.\n     */\n    static lift(pos) {\n        return new Position(pos.lineNumber, pos.column);\n    }\n    /**\n     * Test if `obj` is an `IPosition`.\n     */\n    static isIPosition(obj) {\n        return (obj\n            && (typeof obj.lineNumber === 'number')\n            && (typeof obj.column === 'number'));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}