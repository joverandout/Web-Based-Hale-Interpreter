{"ast":null,"code":"/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n// src/basic-languages/cpp/cpp.ts\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"]],\n  autoClosingPairs: [{\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: \"'\",\n    close: \"'\",\n    notIn: [\"string\", \"comment\"]\n  }, {\n    open: '\"',\n    close: '\"',\n    notIn: [\"string\"]\n  }],\n  surroundingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*#pragma\\\\s+region\\\\b\"),\n      end: new RegExp(\"^\\\\s*#pragma\\\\s+endregion\\\\b\")\n    }\n  }\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".cpp\",\n  brackets: [{\n    token: \"delimiter.curly\",\n    open: \"{\",\n    close: \"}\"\n  }, {\n    token: \"delimiter.parenthesis\",\n    open: \"(\",\n    close: \")\"\n  }, {\n    token: \"delimiter.square\",\n    open: \"[\",\n    close: \"]\"\n  }, {\n    token: \"delimiter.angle\",\n    open: \"<\",\n    close: \">\"\n  }],\n  keywords: [\"abstract\", \"amp\", \"array\", \"auto\", \"bool\", \"break\", \"case\", \"catch\", \"char\", \"class\", \"const\", \"constexpr\", \"const_cast\", \"continue\", \"cpu\", \"decltype\", \"default\", \"delegate\", \"delete\", \"do\", \"double\", \"dynamic_cast\", \"each\", \"else\", \"enum\", \"event\", \"explicit\", \"export\", \"extern\", \"false\", \"final\", \"finally\", \"float\", \"for\", \"friend\", \"gcnew\", \"generic\", \"goto\", \"if\", \"in\", \"initonly\", \"inline\", \"int\", \"interface\", \"interior_ptr\", \"internal\", \"literal\", \"long\", \"mutable\", \"namespace\", \"new\", \"noexcept\", \"nullptr\", \"__nullptr\", \"operator\", \"override\", \"partial\", \"pascal\", \"pin_ptr\", \"private\", \"property\", \"protected\", \"public\", \"ref\", \"register\", \"reinterpret_cast\", \"restrict\", \"return\", \"safe_cast\", \"sealed\", \"short\", \"signed\", \"sizeof\", \"static\", \"static_assert\", \"static_cast\", \"struct\", \"switch\", \"template\", \"this\", \"thread_local\", \"throw\", \"tile_static\", \"true\", \"try\", \"typedef\", \"typeid\", \"typename\", \"union\", \"unsigned\", \"using\", \"virtual\", \"void\", \"volatile\", \"wchar_t\", \"where\", \"while\", \"_asm\", \"_based\", \"_cdecl\", \"_declspec\", \"_fastcall\", \"_if_exists\", \"_if_not_exists\", \"_inline\", \"_multiple_inheritance\", \"_pascal\", \"_single_inheritance\", \"_stdcall\", \"_virtual_inheritance\", \"_w64\", \"__abstract\", \"__alignof\", \"__asm\", \"__assume\", \"__based\", \"__box\", \"__builtin_alignof\", \"__cdecl\", \"__clrcall\", \"__declspec\", \"__delegate\", \"__event\", \"__except\", \"__fastcall\", \"__finally\", \"__forceinline\", \"__gc\", \"__hook\", \"__identifier\", \"__if_exists\", \"__if_not_exists\", \"__inline\", \"__int128\", \"__int16\", \"__int32\", \"__int64\", \"__int8\", \"__interface\", \"__leave\", \"__m128\", \"__m128d\", \"__m128i\", \"__m256\", \"__m256d\", \"__m256i\", \"__m64\", \"__multiple_inheritance\", \"__newslot\", \"__nogc\", \"__noop\", \"__nounwind\", \"__novtordisp\", \"__pascal\", \"__pin\", \"__pragma\", \"__property\", \"__ptr32\", \"__ptr64\", \"__raise\", \"__restrict\", \"__resume\", \"__sealed\", \"__single_inheritance\", \"__stdcall\", \"__super\", \"__thiscall\", \"__try\", \"__try_cast\", \"__typeof\", \"__unaligned\", \"__unhook\", \"__uuidof\", \"__value\", \"__virtual_inheritance\", \"__w64\", \"__wchar_t\"],\n  operators: [\"=\", \">\", \"<\", \"!\", \"~\", \"?\", \":\", \"==\", \"<=\", \">=\", \"!=\", \"&&\", \"||\", \"++\", \"--\", \"+\", \"-\", \"*\", \"/\", \"&\", \"|\", \"^\", \"%\", \"<<\", \">>\", \">>>\", \"+=\", \"-=\", \"*=\", \"/=\", \"&=\", \"|=\", \"^=\", \"%=\", \"<<=\", \">>=\", \">>>=\"],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  integersuffix: /([uU](ll|LL|l|L)|(ll|LL|l|L)?[uU]?)/,\n  floatsuffix: /[fFlL]?/,\n  encoding: /u|u8|U|L/,\n  tokenizer: {\n    root: [[/@encoding?R\\\"(?:([^ ()\\\\\\t]*))\\(/, {\n      token: \"string.raw.begin\",\n      next: \"@raw.$1\"\n    }], [/[a-zA-Z_]\\w*/, {\n      cases: {\n        \"@keywords\": {\n          token: \"keyword.$0\"\n        },\n        \"@default\": \"identifier\"\n      }\n    }], [/^\\s*#\\s*include/, {\n      token: \"keyword.directive.include\",\n      next: \"@include\"\n    }], [/^\\s*#\\s*\\w+/, \"keyword.directive\"], {\n      include: \"@whitespace\"\n    }, [/\\[\\s*\\[/, {\n      token: \"annotation\",\n      next: \"@annotation\"\n    }], [/[{}()\\[\\]]/, \"@brackets\"], [/[<>](?!@symbols)/, \"@brackets\"], [/@symbols/, {\n      cases: {\n        \"@operators\": \"delimiter\",\n        \"@default\": \"\"\n      }\n    }], [/\\d*\\d+[eE]([\\-+]?\\d+)?(@floatsuffix)/, \"number.float\"], [/\\d*\\.\\d+([eE][\\-+]?\\d+)?(@floatsuffix)/, \"number.float\"], [/0[xX][0-9a-fA-F']*[0-9a-fA-F](@integersuffix)/, \"number.hex\"], [/0[0-7']*[0-7](@integersuffix)/, \"number.octal\"], [/0[bB][0-1']*[0-1](@integersuffix)/, \"number.binary\"], [/\\d[\\d']*\\d(@integersuffix)/, \"number\"], [/\\d(@integersuffix)/, \"number\"], [/[;,.]/, \"delimiter\"], [/\"([^\"\\\\]|\\\\.)*$/, \"string.invalid\"], [/\"/, \"string\", \"@string\"], [/'[^\\\\']'/, \"string\"], [/(')(@escapes)(')/, [\"string\", \"string.escape\", \"string\"]], [/'/, \"string.invalid\"]],\n    whitespace: [[/[ \\t\\r\\n]+/, \"\"], [/\\/\\*\\*(?!\\/)/, \"comment.doc\", \"@doccomment\"], [/\\/\\*/, \"comment\", \"@comment\"], [/\\/\\/.*\\\\$/, \"comment\", \"@linecomment\"], [/\\/\\/.*$/, \"comment\"]],\n    comment: [[/[^\\/*]+/, \"comment\"], [/\\*\\//, \"comment\", \"@pop\"], [/[\\/*]/, \"comment\"]],\n    linecomment: [[/.*[^\\\\]$/, \"comment\", \"@pop\"], [/[^]+/, \"comment\"]],\n    doccomment: [[/[^\\/*]+/, \"comment.doc\"], [/\\*\\//, \"comment.doc\", \"@pop\"], [/[\\/*]/, \"comment.doc\"]],\n    string: [[/[^\\\\\"]+/, \"string\"], [/@escapes/, \"string.escape\"], [/\\\\./, \"string.escape.invalid\"], [/\"/, \"string\", \"@pop\"]],\n    raw: [[/(.*)(\\))(?:([^ ()\\\\\\t\"]*))(\\\")/, {\n      cases: {\n        \"$3==$S2\": [\"string.raw\", \"string.raw.end\", \"string.raw.end\", {\n          token: \"string.raw.end\",\n          next: \"@pop\"\n        }],\n        \"@default\": [\"string.raw\", \"string.raw\", \"string.raw\", \"string.raw\"]\n      }\n    }], [/.*/, \"string.raw\"]],\n    annotation: [{\n      include: \"@whitespace\"\n    }, [/using|alignas/, \"keyword\"], [/[a-zA-Z0-9_]+/, \"annotation\"], [/[,:]/, \"delimiter\"], [/[()]/, \"@brackets\"], [/\\]\\s*\\]/, {\n      token: \"annotation\",\n      next: \"@pop\"\n    }]],\n    include: [[/(\\s*)(<)([^<>]*)(>)/, [\"\", \"keyword.directive.include.begin\", \"string.include.identifier\", {\n      token: \"keyword.directive.include.end\",\n      next: \"@pop\"\n    }]], [/(\\s*)(\")([^\"]*)(\")/, [\"\", \"keyword.directive.include.begin\", \"string.include.identifier\", {\n      token: \"keyword.directive.include.end\",\n      next: \"@pop\"\n    }]]]\n  }\n};\nexport { conf, language };","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/basic-languages/cpp/cpp.js"],"names":["conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","folding","markers","start","RegExp","end","language","defaultToken","tokenPostfix","token","keywords","operators","symbols","escapes","integersuffix","floatsuffix","encoding","tokenizer","root","next","cases","include","whitespace","comment","linecomment","doccomment","string","raw","annotation"],"mappings":"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","sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/cpp/cpp.ts\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"]\n  ],\n  autoClosingPairs: [\n    { open: \"[\", close: \"]\" },\n    { open: \"{\", close: \"}\" },\n    { open: \"(\", close: \")\" },\n    { open: \"'\", close: \"'\", notIn: [\"string\", \"comment\"] },\n    { open: '\"', close: '\"', notIn: [\"string\"] }\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" }\n  ],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*#pragma\\\\s+region\\\\b\"),\n      end: new RegExp(\"^\\\\s*#pragma\\\\s+endregion\\\\b\")\n    }\n  }\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".cpp\",\n  brackets: [\n    { token: \"delimiter.curly\", open: \"{\", close: \"}\" },\n    { token: \"delimiter.parenthesis\", open: \"(\", close: \")\" },\n    { token: \"delimiter.square\", open: \"[\", close: \"]\" },\n    { token: \"delimiter.angle\", open: \"<\", close: \">\" }\n  ],\n  keywords: [\n    \"abstract\",\n    \"amp\",\n    \"array\",\n    \"auto\",\n    \"bool\",\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"char\",\n    \"class\",\n    \"const\",\n    \"constexpr\",\n    \"const_cast\",\n    \"continue\",\n    \"cpu\",\n    \"decltype\",\n    \"default\",\n    \"delegate\",\n    \"delete\",\n    \"do\",\n    \"double\",\n    \"dynamic_cast\",\n    \"each\",\n    \"else\",\n    \"enum\",\n    \"event\",\n    \"explicit\",\n    \"export\",\n    \"extern\",\n    \"false\",\n    \"final\",\n    \"finally\",\n    \"float\",\n    \"for\",\n    \"friend\",\n    \"gcnew\",\n    \"generic\",\n    \"goto\",\n    \"if\",\n    \"in\",\n    \"initonly\",\n    \"inline\",\n    \"int\",\n    \"interface\",\n    \"interior_ptr\",\n    \"internal\",\n    \"literal\",\n    \"long\",\n    \"mutable\",\n    \"namespace\",\n    \"new\",\n    \"noexcept\",\n    \"nullptr\",\n    \"__nullptr\",\n    \"operator\",\n    \"override\",\n    \"partial\",\n    \"pascal\",\n    \"pin_ptr\",\n    \"private\",\n    \"property\",\n    \"protected\",\n    \"public\",\n    \"ref\",\n    \"register\",\n    \"reinterpret_cast\",\n    \"restrict\",\n    \"return\",\n    \"safe_cast\",\n    \"sealed\",\n    \"short\",\n    \"signed\",\n    \"sizeof\",\n    \"static\",\n    \"static_assert\",\n    \"static_cast\",\n    \"struct\",\n    \"switch\",\n    \"template\",\n    \"this\",\n    \"thread_local\",\n    \"throw\",\n    \"tile_static\",\n    \"true\",\n    \"try\",\n    \"typedef\",\n    \"typeid\",\n    \"typename\",\n    \"union\",\n    \"unsigned\",\n    \"using\",\n    \"virtual\",\n    \"void\",\n    \"volatile\",\n    \"wchar_t\",\n    \"where\",\n    \"while\",\n    \"_asm\",\n    \"_based\",\n    \"_cdecl\",\n    \"_declspec\",\n    \"_fastcall\",\n    \"_if_exists\",\n    \"_if_not_exists\",\n    \"_inline\",\n    \"_multiple_inheritance\",\n    \"_pascal\",\n    \"_single_inheritance\",\n    \"_stdcall\",\n    \"_virtual_inheritance\",\n    \"_w64\",\n    \"__abstract\",\n    \"__alignof\",\n    \"__asm\",\n    \"__assume\",\n    \"__based\",\n    \"__box\",\n    \"__builtin_alignof\",\n    \"__cdecl\",\n    \"__clrcall\",\n    \"__declspec\",\n    \"__delegate\",\n    \"__event\",\n    \"__except\",\n    \"__fastcall\",\n    \"__finally\",\n    \"__forceinline\",\n    \"__gc\",\n    \"__hook\",\n    \"__identifier\",\n    \"__if_exists\",\n    \"__if_not_exists\",\n    \"__inline\",\n    \"__int128\",\n    \"__int16\",\n    \"__int32\",\n    \"__int64\",\n    \"__int8\",\n    \"__interface\",\n    \"__leave\",\n    \"__m128\",\n    \"__m128d\",\n    \"__m128i\",\n    \"__m256\",\n    \"__m256d\",\n    \"__m256i\",\n    \"__m64\",\n    \"__multiple_inheritance\",\n    \"__newslot\",\n    \"__nogc\",\n    \"__noop\",\n    \"__nounwind\",\n    \"__novtordisp\",\n    \"__pascal\",\n    \"__pin\",\n    \"__pragma\",\n    \"__property\",\n    \"__ptr32\",\n    \"__ptr64\",\n    \"__raise\",\n    \"__restrict\",\n    \"__resume\",\n    \"__sealed\",\n    \"__single_inheritance\",\n    \"__stdcall\",\n    \"__super\",\n    \"__thiscall\",\n    \"__try\",\n    \"__try_cast\",\n    \"__typeof\",\n    \"__unaligned\",\n    \"__unhook\",\n    \"__uuidof\",\n    \"__value\",\n    \"__virtual_inheritance\",\n    \"__w64\",\n    \"__wchar_t\"\n  ],\n  operators: [\n    \"=\",\n    \">\",\n    \"<\",\n    \"!\",\n    \"~\",\n    \"?\",\n    \":\",\n    \"==\",\n    \"<=\",\n    \">=\",\n    \"!=\",\n    \"&&\",\n    \"||\",\n    \"++\",\n    \"--\",\n    \"+\",\n    \"-\",\n    \"*\",\n    \"/\",\n    \"&\",\n    \"|\",\n    \"^\",\n    \"%\",\n    \"<<\",\n    \">>\",\n    \">>>\",\n    \"+=\",\n    \"-=\",\n    \"*=\",\n    \"/=\",\n    \"&=\",\n    \"|=\",\n    \"^=\",\n    \"%=\",\n    \"<<=\",\n    \">>=\",\n    \">>>=\"\n  ],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  integersuffix: /([uU](ll|LL|l|L)|(ll|LL|l|L)?[uU]?)/,\n  floatsuffix: /[fFlL]?/,\n  encoding: /u|u8|U|L/,\n  tokenizer: {\n    root: [\n      [/@encoding?R\\\"(?:([^ ()\\\\\\t]*))\\(/, { token: \"string.raw.begin\", next: \"@raw.$1\" }],\n      [\n        /[a-zA-Z_]\\w*/,\n        {\n          cases: {\n            \"@keywords\": { token: \"keyword.$0\" },\n            \"@default\": \"identifier\"\n          }\n        }\n      ],\n      [/^\\s*#\\s*include/, { token: \"keyword.directive.include\", next: \"@include\" }],\n      [/^\\s*#\\s*\\w+/, \"keyword.directive\"],\n      { include: \"@whitespace\" },\n      [/\\[\\s*\\[/, { token: \"annotation\", next: \"@annotation\" }],\n      [/[{}()\\[\\]]/, \"@brackets\"],\n      [/[<>](?!@symbols)/, \"@brackets\"],\n      [\n        /@symbols/,\n        {\n          cases: {\n            \"@operators\": \"delimiter\",\n            \"@default\": \"\"\n          }\n        }\n      ],\n      [/\\d*\\d+[eE]([\\-+]?\\d+)?(@floatsuffix)/, \"number.float\"],\n      [/\\d*\\.\\d+([eE][\\-+]?\\d+)?(@floatsuffix)/, \"number.float\"],\n      [/0[xX][0-9a-fA-F']*[0-9a-fA-F](@integersuffix)/, \"number.hex\"],\n      [/0[0-7']*[0-7](@integersuffix)/, \"number.octal\"],\n      [/0[bB][0-1']*[0-1](@integersuffix)/, \"number.binary\"],\n      [/\\d[\\d']*\\d(@integersuffix)/, \"number\"],\n      [/\\d(@integersuffix)/, \"number\"],\n      [/[;,.]/, \"delimiter\"],\n      [/\"([^\"\\\\]|\\\\.)*$/, \"string.invalid\"],\n      [/\"/, \"string\", \"@string\"],\n      [/'[^\\\\']'/, \"string\"],\n      [/(')(@escapes)(')/, [\"string\", \"string.escape\", \"string\"]],\n      [/'/, \"string.invalid\"]\n    ],\n    whitespace: [\n      [/[ \\t\\r\\n]+/, \"\"],\n      [/\\/\\*\\*(?!\\/)/, \"comment.doc\", \"@doccomment\"],\n      [/\\/\\*/, \"comment\", \"@comment\"],\n      [/\\/\\/.*\\\\$/, \"comment\", \"@linecomment\"],\n      [/\\/\\/.*$/, \"comment\"]\n    ],\n    comment: [\n      [/[^\\/*]+/, \"comment\"],\n      [/\\*\\//, \"comment\", \"@pop\"],\n      [/[\\/*]/, \"comment\"]\n    ],\n    linecomment: [\n      [/.*[^\\\\]$/, \"comment\", \"@pop\"],\n      [/[^]+/, \"comment\"]\n    ],\n    doccomment: [\n      [/[^\\/*]+/, \"comment.doc\"],\n      [/\\*\\//, \"comment.doc\", \"@pop\"],\n      [/[\\/*]/, \"comment.doc\"]\n    ],\n    string: [\n      [/[^\\\\\"]+/, \"string\"],\n      [/@escapes/, \"string.escape\"],\n      [/\\\\./, \"string.escape.invalid\"],\n      [/\"/, \"string\", \"@pop\"]\n    ],\n    raw: [\n      [\n        /(.*)(\\))(?:([^ ()\\\\\\t\"]*))(\\\")/,\n        {\n          cases: {\n            \"$3==$S2\": [\n              \"string.raw\",\n              \"string.raw.end\",\n              \"string.raw.end\",\n              { token: \"string.raw.end\", next: \"@pop\" }\n            ],\n            \"@default\": [\"string.raw\", \"string.raw\", \"string.raw\", \"string.raw\"]\n          }\n        }\n      ],\n      [/.*/, \"string.raw\"]\n    ],\n    annotation: [\n      { include: \"@whitespace\" },\n      [/using|alignas/, \"keyword\"],\n      [/[a-zA-Z0-9_]+/, \"annotation\"],\n      [/[,:]/, \"delimiter\"],\n      [/[()]/, \"@brackets\"],\n      [/\\]\\s*\\]/, { token: \"annotation\", next: \"@pop\" }]\n    ],\n    include: [\n      [\n        /(\\s*)(<)([^<>]*)(>)/,\n        [\n          \"\",\n          \"keyword.directive.include.begin\",\n          \"string.include.identifier\",\n          { token: \"keyword.directive.include.end\", next: \"@pop\" }\n        ]\n      ],\n      [\n        /(\\s*)(\")([^\"]*)(\")/,\n        [\n          \"\",\n          \"keyword.directive.include.begin\",\n          \"string.include.identifier\",\n          { token: \"keyword.directive.include.end\", next: \"@pop\" }\n        ]\n      ]\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"]},"metadata":{},"sourceType":"module"}