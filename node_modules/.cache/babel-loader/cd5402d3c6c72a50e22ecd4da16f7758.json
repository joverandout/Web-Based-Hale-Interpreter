{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nimport * as dom from '../../../../base/browser/dom.js';\nimport { HoverAction, HoverWidget } from '../../../../base/browser/ui/hover/hoverWidget.js';\nimport { coalesce } from '../../../../base/common/arrays.js';\nimport { Disposable, DisposableStore, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { ModelDecorationOptions } from '../../../common/model/textModel.js';\nimport { TokenizationRegistry } from '../../../common/languages.js';\nimport { ColorHoverParticipant } from './colorHoverParticipant.js';\nimport { HoverOperation } from './hoverOperation.js';\nimport { HoverRangeAnchor } from './hoverTypes.js';\nimport { MarkdownHoverParticipant } from './markdownHoverParticipant.js';\nimport { MarkerHoverParticipant } from './markerHoverParticipant.js';\nimport { InlineCompletionsHoverParticipant } from '../../inlineCompletions/browser/inlineCompletionsHoverParticipant.js';\nimport { IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding.js';\nimport { Context as SuggestContext } from '../../suggest/browser/suggest.js';\nimport { UnicodeHighlighterHoverParticipant } from '../../unicodeHighlighter/browser/unicodeHighlighter.js';\nimport { AsyncIterableObject } from '../../../../base/common/async.js';\nimport { InlayHintsHover } from '../../inlayHints/browser/inlayHintsHover.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { Emitter } from '../../../../base/common/event.js';\nconst $ = dom.$;\nlet ContentHoverController = class ContentHoverController extends Disposable {\n  constructor(_editor, _instantiationService, _keybindingService) {\n    super();\n    this._editor = _editor;\n    this._instantiationService = _instantiationService;\n    this._keybindingService = _keybindingService;\n    this._participants = [this._instantiationService.createInstance(ColorHoverParticipant, this._editor), this._instantiationService.createInstance(MarkdownHoverParticipant, this._editor), this._instantiationService.createInstance(InlineCompletionsHoverParticipant, this._editor), this._instantiationService.createInstance(UnicodeHighlighterHoverParticipant, this._editor), this._instantiationService.createInstance(MarkerHoverParticipant, this._editor), this._instantiationService.createInstance(InlayHintsHover, this._editor)];\n    this._widget = this._register(this._instantiationService.createInstance(ContentHoverWidget, this._editor));\n    this._decorationsChangerListener = this._register(new EditorDecorationsChangerListener(this._editor));\n    this._computer = new ContentHoverComputer(this._editor, this._participants);\n    this._hoverOperation = this._register(new HoverOperation(this._editor, this._computer));\n    this._messages = [];\n    this._messagesAreComplete = false;\n\n    this._register(this._hoverOperation.onResult(result => {\n      this._withResult(result.value, result.isComplete, result.hasLoadingMessage);\n    }));\n\n    this._register(this._decorationsChangerListener.onDidChangeModelDecorations(() => this._onModelDecorationsChanged()));\n\n    this._register(dom.addStandardDisposableListener(this._widget.getDomNode(), 'keydown', e => {\n      if (e.equals(9\n      /* Escape */\n      )) {\n        this.hide();\n      }\n    }));\n\n    this._register(TokenizationRegistry.onDidChange(() => {\n      if (this._widget.position && this._computer.anchor && this._messages.length > 0) {\n        this._widget.clear();\n\n        this._renderMessages(this._computer.anchor, this._messages);\n      }\n    }));\n  }\n\n  _onModelDecorationsChanged() {\n    if (this._widget.position) {\n      // The decorations have changed and the hover is visible,\n      // we need to recompute the displayed text\n      this._hoverOperation.cancel();\n\n      if (!this._widget.colorPicker) {\n        // TODO@Michel ensure that displayed text for other decorations is computed even if color picker is in place\n        this._hoverOperation.start(0\n        /* Delayed */\n        );\n      }\n    }\n  }\n\n  maybeShowAt(mouseEvent) {\n    const anchorCandidates = [];\n\n    for (const participant of this._participants) {\n      if (participant.suggestHoverAnchor) {\n        const anchor = participant.suggestHoverAnchor(mouseEvent);\n\n        if (anchor) {\n          anchorCandidates.push(anchor);\n        }\n      }\n    }\n\n    const target = mouseEvent.target;\n\n    if (target.type === 6\n    /* CONTENT_TEXT */\n    ) {\n      anchorCandidates.push(new HoverRangeAnchor(0, target.range));\n    }\n\n    if (target.type === 7\n    /* CONTENT_EMPTY */\n    ) {\n      const epsilon = this._editor.getOption(44\n      /* fontInfo */\n      ).typicalHalfwidthCharacterWidth / 2;\n\n      if (!target.detail.isAfterLines && typeof target.detail.horizontalDistanceToText === 'number' && target.detail.horizontalDistanceToText < epsilon) {\n        // Let hover kick in even when the mouse is technically in the empty area after a line, given the distance is small enough\n        anchorCandidates.push(new HoverRangeAnchor(0, target.range));\n      }\n    }\n\n    if (anchorCandidates.length === 0) {\n      return false;\n    }\n\n    anchorCandidates.sort((a, b) => b.priority - a.priority);\n\n    this._startShowingAt(anchorCandidates[0], 0\n    /* Delayed */\n    , false);\n\n    return true;\n  }\n\n  startShowingAtRange(range, mode, focus) {\n    this._startShowingAt(new HoverRangeAnchor(0, range), mode, focus);\n  }\n\n  _startShowingAt(anchor, mode, focus) {\n    if (this._computer.anchor && this._computer.anchor.equals(anchor)) {\n      // We have to show the widget at the exact same range as before, so no work is needed\n      return;\n    }\n\n    this._hoverOperation.cancel();\n\n    if (this._widget.position) {\n      // The range might have changed, but the hover is visible\n      // Instead of hiding it completely, filter out messages that are still in the new range and\n      // kick off a new computation\n      if (!this._computer.anchor || !anchor.canAdoptVisibleHover(this._computer.anchor, this._widget.position)) {\n        this.hide();\n      } else {\n        const filteredMessages = this._messages.filter(m => m.isValidForHoverAnchor(anchor));\n\n        if (filteredMessages.length === 0) {\n          this.hide();\n        } else if (filteredMessages.length === this._messages.length && this._messagesAreComplete) {\n          // no change\n          return;\n        } else {\n          this._renderMessages(anchor, filteredMessages);\n        }\n      }\n    }\n\n    this._computer.anchor = anchor;\n    this._computer.shouldFocus = focus;\n\n    this._hoverOperation.start(mode);\n  }\n\n  hide() {\n    this._computer.anchor = null;\n\n    this._hoverOperation.cancel();\n\n    this._widget.hide();\n  }\n\n  isColorPickerVisible() {\n    return !!this._widget.colorPicker;\n  }\n\n  _addLoadingMessage(result) {\n    if (this._computer.anchor) {\n      for (const participant of this._participants) {\n        if (participant.createLoadingMessage) {\n          const loadingMessage = participant.createLoadingMessage(this._computer.anchor);\n\n          if (loadingMessage) {\n            return result.slice(0).concat([loadingMessage]);\n          }\n        }\n      }\n    }\n\n    return result;\n  }\n\n  _withResult(result, isComplete, hasLoadingMessage) {\n    this._messages = hasLoadingMessage ? this._addLoadingMessage(result) : result;\n    this._messagesAreComplete = isComplete;\n\n    if (this._computer.anchor && this._messages.length > 0) {\n      this._renderMessages(this._computer.anchor, this._messages);\n    } else if (isComplete) {\n      this.hide();\n    }\n  }\n\n  _renderMessages(anchor, messages) {\n    // update column from which to show\n    let renderColumn = 1073741824\n    /* MAX_SAFE_SMALL_INTEGER */\n    ;\n    let highlightRange = messages[0].range;\n    let forceShowAtRange = null;\n\n    for (const msg of messages) {\n      renderColumn = Math.min(renderColumn, msg.range.startColumn);\n      highlightRange = Range.plusRange(highlightRange, msg.range);\n\n      if (msg.forceShowAtRange) {\n        forceShowAtRange = msg.range;\n      }\n    }\n\n    const disposables = new DisposableStore();\n    const statusBar = disposables.add(new EditorHoverStatusBar(this._keybindingService));\n    const fragment = document.createDocumentFragment();\n    let colorPicker = null;\n    const context = {\n      fragment,\n      statusBar,\n      setColorPicker: widget => colorPicker = widget,\n      onContentsChanged: () => this._widget.onContentsChanged(),\n      hide: () => this.hide()\n    };\n\n    for (const participant of this._participants) {\n      const hoverParts = messages.filter(msg => msg.owner === participant);\n\n      if (hoverParts.length > 0) {\n        disposables.add(participant.renderHoverParts(context, hoverParts));\n      }\n    }\n\n    if (statusBar.hasContent) {\n      fragment.appendChild(statusBar.hoverElement);\n    }\n\n    if (fragment.hasChildNodes()) {\n      if (highlightRange) {\n        const highlightDecorations = this._decorationsChangerListener.deltaDecorations([], [{\n          range: highlightRange,\n          options: ContentHoverController._DECORATION_OPTIONS\n        }]);\n\n        disposables.add(toDisposable(() => {\n          this._decorationsChangerListener.deltaDecorations(highlightDecorations, []);\n        }));\n      }\n\n      this._widget.showAt(fragment, new ContentHoverVisibleData(colorPicker, forceShowAtRange ? forceShowAtRange.getStartPosition() : new Position(anchor.range.startLineNumber, renderColumn), forceShowAtRange ? forceShowAtRange : highlightRange, this._editor.getOption(53\n      /* hover */\n      ).above, this._computer.shouldFocus, disposables));\n    } else {\n      disposables.dispose();\n    }\n  }\n\n};\nContentHoverController._DECORATION_OPTIONS = ModelDecorationOptions.register({\n  description: 'content-hover-highlight',\n  className: 'hoverHighlight'\n});\nContentHoverController = __decorate([__param(1, IInstantiationService), __param(2, IKeybindingService)], ContentHoverController);\nexport { ContentHoverController };\n/**\n * Allows listening to `ICodeEditor.onDidChangeModelDecorations` and ignores the change caused by itself.\n */\n\nclass EditorDecorationsChangerListener extends Disposable {\n  constructor(_editor) {\n    super();\n    this._editor = _editor;\n    this._onDidChangeModelDecorations = this._register(new Emitter());\n    this.onDidChangeModelDecorations = this._onDidChangeModelDecorations.event;\n    this._isChangingDecorations = false;\n\n    this._register(this._editor.onDidChangeModelDecorations(e => {\n      if (this._isChangingDecorations) {\n        return;\n      }\n\n      this._onDidChangeModelDecorations.fire(e);\n    }));\n  }\n\n  deltaDecorations(oldDecorations, newDecorations) {\n    try {\n      this._isChangingDecorations = true;\n      return this._editor.deltaDecorations(oldDecorations, newDecorations);\n    } finally {\n      this._isChangingDecorations = false;\n    }\n  }\n\n}\n\nclass ContentHoverVisibleData {\n  constructor(colorPicker, showAtPosition, showAtRange, preferAbove, stoleFocus, disposables) {\n    this.colorPicker = colorPicker;\n    this.showAtPosition = showAtPosition;\n    this.showAtRange = showAtRange;\n    this.preferAbove = preferAbove;\n    this.stoleFocus = stoleFocus;\n    this.disposables = disposables;\n  }\n\n}\n\nlet ContentHoverWidget = class ContentHoverWidget extends Disposable {\n  constructor(_editor, _contextKeyService) {\n    super();\n    this._editor = _editor;\n    this._contextKeyService = _contextKeyService;\n    this.allowEditorOverflow = true;\n    this._hoverVisibleKey = EditorContextKeys.hoverVisible.bindTo(this._contextKeyService);\n    this._hover = this._register(new HoverWidget());\n    this._visibleData = null;\n\n    this._register(this._editor.onDidLayoutChange(() => this._layout()));\n\n    this._register(this._editor.onDidChangeConfiguration(e => {\n      if (e.hasChanged(44\n      /* fontInfo */\n      )) {\n        this._updateFont();\n      }\n    }));\n\n    this._setVisibleData(null);\n\n    this._layout();\n\n    this._editor.addContentWidget(this);\n  }\n  /**\n   * Returns `null` if the hover is not visible.\n   */\n\n\n  get position() {\n    var _a, _b;\n\n    return (_b = (_a = this._visibleData) === null || _a === void 0 ? void 0 : _a.showAtPosition) !== null && _b !== void 0 ? _b : null;\n  }\n  /**\n   * Returns `null` if the color picker is not visible.\n   */\n\n\n  get colorPicker() {\n    var _a, _b;\n\n    return (_b = (_a = this._visibleData) === null || _a === void 0 ? void 0 : _a.colorPicker) !== null && _b !== void 0 ? _b : null;\n  }\n\n  dispose() {\n    this._editor.removeContentWidget(this);\n\n    if (this._visibleData) {\n      this._visibleData.disposables.dispose();\n    }\n\n    super.dispose();\n  }\n\n  getId() {\n    return ContentHoverWidget.ID;\n  }\n\n  getDomNode() {\n    return this._hover.containerDomNode;\n  }\n\n  getPosition() {\n    if (!this._visibleData) {\n      return null;\n    }\n\n    let preferAbove = this._visibleData.preferAbove;\n\n    if (!preferAbove && this._contextKeyService.getContextKeyValue(SuggestContext.Visible.key)) {\n      // Prefer rendering above if the suggest widget is visible\n      preferAbove = true;\n    }\n\n    return {\n      position: this._visibleData.showAtPosition,\n      range: this._visibleData.showAtRange,\n      preference: preferAbove ? [1\n      /* ABOVE */\n      , 2\n      /* BELOW */\n      ] : [2\n      /* BELOW */\n      , 1\n      /* ABOVE */\n      ]\n    };\n  }\n\n  _setVisibleData(visibleData) {\n    if (this._visibleData) {\n      this._visibleData.disposables.dispose();\n    }\n\n    this._visibleData = visibleData;\n\n    this._hoverVisibleKey.set(!!this._visibleData);\n\n    this._hover.containerDomNode.classList.toggle('hidden', !this._visibleData);\n  }\n\n  _layout() {\n    const height = Math.max(this._editor.getLayoutInfo().height / 4, 250);\n\n    const {\n      fontSize,\n      lineHeight\n    } = this._editor.getOption(44\n    /* fontInfo */\n    );\n\n    this._hover.contentsDomNode.style.fontSize = `${fontSize}px`;\n    this._hover.contentsDomNode.style.lineHeight = `${lineHeight / fontSize}`;\n    this._hover.contentsDomNode.style.maxHeight = `${height}px`;\n    this._hover.contentsDomNode.style.maxWidth = `${Math.max(this._editor.getLayoutInfo().width * 0.66, 500)}px`;\n  }\n\n  _updateFont() {\n    const codeClasses = Array.prototype.slice.call(this._hover.contentsDomNode.getElementsByClassName('code'));\n    codeClasses.forEach(node => this._editor.applyFontInfo(node));\n  }\n\n  showAt(node, visibleData) {\n    this._setVisibleData(visibleData);\n\n    this._hover.contentsDomNode.textContent = '';\n\n    this._hover.contentsDomNode.appendChild(node);\n\n    this._hover.contentsDomNode.style.paddingBottom = '';\n\n    this._updateFont();\n\n    this._editor.layoutContentWidget(this);\n\n    this.onContentsChanged(); // Simply force a synchronous render on the editor\n    // such that the widget does not really render with left = '0px'\n\n    this._editor.render(); // See https://github.com/microsoft/vscode/issues/140339\n    // TODO: Doing a second layout of the hover after force rendering the editor\n\n\n    this._editor.layoutContentWidget(this);\n\n    this.onContentsChanged();\n\n    if (visibleData.stoleFocus) {\n      this._hover.containerDomNode.focus();\n    }\n\n    if (visibleData.colorPicker) {\n      visibleData.colorPicker.layout();\n    }\n  }\n\n  hide() {\n    if (this._visibleData) {\n      const stoleFocus = this._visibleData.stoleFocus;\n\n      this._setVisibleData(null);\n\n      this._editor.layoutContentWidget(this);\n\n      if (stoleFocus) {\n        this._editor.focus();\n      }\n    }\n  }\n\n  onContentsChanged() {\n    this._hover.onContentsChanged();\n\n    const scrollDimensions = this._hover.scrollbar.getScrollDimensions();\n\n    const hasHorizontalScrollbar = scrollDimensions.scrollWidth > scrollDimensions.width;\n\n    if (hasHorizontalScrollbar) {\n      // There is just a horizontal scrollbar\n      const extraBottomPadding = `${this._hover.scrollbar.options.horizontalScrollbarSize}px`;\n\n      if (this._hover.contentsDomNode.style.paddingBottom !== extraBottomPadding) {\n        this._hover.contentsDomNode.style.paddingBottom = extraBottomPadding;\n\n        this._editor.layoutContentWidget(this);\n\n        this._hover.onContentsChanged();\n      }\n    }\n  }\n\n  clear() {\n    this._hover.contentsDomNode.textContent = '';\n  }\n\n};\nContentHoverWidget.ID = 'editor.contrib.contentHoverWidget';\nContentHoverWidget = __decorate([__param(1, IContextKeyService)], ContentHoverWidget);\nexport { ContentHoverWidget };\nlet EditorHoverStatusBar = class EditorHoverStatusBar extends Disposable {\n  constructor(_keybindingService) {\n    super();\n    this._keybindingService = _keybindingService;\n    this._hasContent = false;\n    this.hoverElement = $('div.hover-row.status-bar');\n    this.actionsElement = dom.append(this.hoverElement, $('div.actions'));\n  }\n\n  get hasContent() {\n    return this._hasContent;\n  }\n\n  addAction(actionOptions) {\n    const keybinding = this._keybindingService.lookupKeybinding(actionOptions.commandId);\n\n    const keybindingLabel = keybinding ? keybinding.getLabel() : null;\n    this._hasContent = true;\n    return this._register(HoverAction.render(this.actionsElement, actionOptions, keybindingLabel));\n  }\n\n  append(element) {\n    const result = dom.append(this.actionsElement, element);\n    this._hasContent = true;\n    return result;\n  }\n\n};\nEditorHoverStatusBar = __decorate([__param(0, IKeybindingService)], EditorHoverStatusBar);\n\nclass ContentHoverComputer {\n  constructor(_editor, _participants) {\n    this._editor = _editor;\n    this._participants = _participants;\n    this._anchor = null;\n    this._shouldFocus = false;\n  }\n\n  get anchor() {\n    return this._anchor;\n  }\n\n  set anchor(value) {\n    this._anchor = value;\n  }\n\n  get shouldFocus() {\n    return this._shouldFocus;\n  }\n\n  set shouldFocus(value) {\n    this._shouldFocus = value;\n  }\n\n  static _getLineDecorations(editor, anchor) {\n    if (anchor.type !== 1\n    /* Range */\n    ) {\n      return [];\n    }\n\n    const model = editor.getModel();\n    const lineNumber = anchor.range.startLineNumber;\n    const maxColumn = model.getLineMaxColumn(lineNumber);\n    return editor.getLineDecorations(lineNumber).filter(d => {\n      if (d.options.isWholeLine) {\n        return true;\n      }\n\n      const startColumn = d.range.startLineNumber === lineNumber ? d.range.startColumn : 1;\n      const endColumn = d.range.endLineNumber === lineNumber ? d.range.endColumn : maxColumn;\n\n      if (d.options.showIfCollapsed) {\n        // Relax check around `showIfCollapsed` decorations to also include +/- 1 character\n        if (startColumn > anchor.range.startColumn + 1 || anchor.range.endColumn - 1 > endColumn) {\n          return false;\n        }\n      } else {\n        if (startColumn > anchor.range.startColumn || anchor.range.endColumn > endColumn) {\n          return false;\n        }\n      }\n\n      return true;\n    });\n  }\n\n  computeAsync(token) {\n    const anchor = this._anchor;\n\n    if (!this._editor.hasModel() || !anchor) {\n      return AsyncIterableObject.EMPTY;\n    }\n\n    const lineDecorations = ContentHoverComputer._getLineDecorations(this._editor, anchor);\n\n    return AsyncIterableObject.merge(this._participants.map(participant => {\n      if (!participant.computeAsync) {\n        return AsyncIterableObject.EMPTY;\n      }\n\n      return participant.computeAsync(anchor, lineDecorations, token);\n    }));\n  }\n\n  computeSync() {\n    if (!this._editor.hasModel() || !this._anchor) {\n      return [];\n    }\n\n    const lineDecorations = ContentHoverComputer._getLineDecorations(this._editor, this._anchor);\n\n    let result = [];\n\n    for (const participant of this._participants) {\n      result = result.concat(participant.computeSync(this._anchor, lineDecorations));\n    }\n\n    return coalesce(result);\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/contrib/hover/browser/contentHover.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","dom","HoverAction","HoverWidget","coalesce","Disposable","DisposableStore","toDisposable","Position","Range","ModelDecorationOptions","TokenizationRegistry","ColorHoverParticipant","HoverOperation","HoverRangeAnchor","MarkdownHoverParticipant","MarkerHoverParticipant","InlineCompletionsHoverParticipant","IContextKeyService","IInstantiationService","IKeybindingService","Context","SuggestContext","UnicodeHighlighterHoverParticipant","AsyncIterableObject","InlayHintsHover","EditorContextKeys","Emitter","$","ContentHoverController","constructor","_editor","_instantiationService","_keybindingService","_participants","createInstance","_widget","_register","ContentHoverWidget","_decorationsChangerListener","EditorDecorationsChangerListener","_computer","ContentHoverComputer","_hoverOperation","_messages","_messagesAreComplete","onResult","result","_withResult","value","isComplete","hasLoadingMessage","onDidChangeModelDecorations","_onModelDecorationsChanged","addStandardDisposableListener","getDomNode","e","equals","hide","onDidChange","position","anchor","clear","_renderMessages","cancel","colorPicker","start","maybeShowAt","mouseEvent","anchorCandidates","participant","suggestHoverAnchor","push","type","range","epsilon","getOption","typicalHalfwidthCharacterWidth","detail","isAfterLines","horizontalDistanceToText","sort","a","b","priority","_startShowingAt","startShowingAtRange","mode","focus","canAdoptVisibleHover","filteredMessages","filter","m","isValidForHoverAnchor","shouldFocus","isColorPickerVisible","_addLoadingMessage","createLoadingMessage","loadingMessage","slice","concat","messages","renderColumn","highlightRange","forceShowAtRange","msg","Math","min","startColumn","plusRange","disposables","statusBar","add","EditorHoverStatusBar","fragment","document","createDocumentFragment","context","setColorPicker","widget","onContentsChanged","hoverParts","owner","renderHoverParts","hasContent","appendChild","hoverElement","hasChildNodes","highlightDecorations","deltaDecorations","options","_DECORATION_OPTIONS","showAt","ContentHoverVisibleData","getStartPosition","startLineNumber","above","dispose","register","description","className","_onDidChangeModelDecorations","event","_isChangingDecorations","fire","oldDecorations","newDecorations","showAtPosition","showAtRange","preferAbove","stoleFocus","_contextKeyService","allowEditorOverflow","_hoverVisibleKey","hoverVisible","bindTo","_hover","_visibleData","onDidLayoutChange","_layout","onDidChangeConfiguration","hasChanged","_updateFont","_setVisibleData","addContentWidget","_a","_b","removeContentWidget","getId","ID","containerDomNode","getPosition","getContextKeyValue","Visible","preference","visibleData","set","classList","toggle","height","max","getLayoutInfo","fontSize","lineHeight","contentsDomNode","style","maxHeight","maxWidth","width","codeClasses","Array","prototype","call","getElementsByClassName","forEach","node","applyFontInfo","textContent","paddingBottom","layoutContentWidget","render","layout","scrollDimensions","scrollbar","getScrollDimensions","hasHorizontalScrollbar","scrollWidth","extraBottomPadding","horizontalScrollbarSize","_hasContent","actionsElement","append","addAction","actionOptions","keybinding","lookupKeybinding","commandId","keybindingLabel","getLabel","element","_anchor","_shouldFocus","_getLineDecorations","editor","model","getModel","lineNumber","maxColumn","getLineMaxColumn","getLineDecorations","isWholeLine","endColumn","endLineNumber","showIfCollapsed","computeAsync","token","hasModel","EMPTY","lineDecorations","merge","map","computeSync"],"mappings":"AAAA;AACA;AACA;AACA;AACA,IAAIA,UAAU,GAAI,QAAQ,KAAKA,UAAd,IAA6B,UAAUC,UAAV,EAAsBC,MAAtB,EAA8BC,GAA9B,EAAmCC,IAAnC,EAAyC;AACnF,MAAIC,CAAC,GAAGC,SAAS,CAACC,MAAlB;AAAA,MAA0BC,CAAC,GAAGH,CAAC,GAAG,CAAJ,GAAQH,MAAR,GAAiBE,IAAI,KAAK,IAAT,GAAgBA,IAAI,GAAGK,MAAM,CAACC,wBAAP,CAAgCR,MAAhC,EAAwCC,GAAxC,CAAvB,GAAsEC,IAArH;AAAA,MAA2HO,CAA3H;AACA,MAAI,OAAOC,OAAP,KAAmB,QAAnB,IAA+B,OAAOA,OAAO,CAACC,QAAf,KAA4B,UAA/D,EAA2EL,CAAC,GAAGI,OAAO,CAACC,QAAR,CAAiBZ,UAAjB,EAA6BC,MAA7B,EAAqCC,GAArC,EAA0CC,IAA1C,CAAJ,CAA3E,KACK,KAAK,IAAIU,CAAC,GAAGb,UAAU,CAACM,MAAX,GAAoB,CAAjC,EAAoCO,CAAC,IAAI,CAAzC,EAA4CA,CAAC,EAA7C,EAAiD,IAAIH,CAAC,GAAGV,UAAU,CAACa,CAAD,CAAlB,EAAuBN,CAAC,GAAG,CAACH,CAAC,GAAG,CAAJ,GAAQM,CAAC,CAACH,CAAD,CAAT,GAAeH,CAAC,GAAG,CAAJ,GAAQM,CAAC,CAACT,MAAD,EAASC,GAAT,EAAcK,CAAd,CAAT,GAA4BG,CAAC,CAACT,MAAD,EAASC,GAAT,CAA7C,KAA+DK,CAAnE;AAC7E,SAAOH,CAAC,GAAG,CAAJ,IAASG,CAAT,IAAcC,MAAM,CAACM,cAAP,CAAsBb,MAAtB,EAA8BC,GAA9B,EAAmCK,CAAnC,CAAd,EAAqDA,CAA5D;AACH,CALD;;AAMA,IAAIQ,OAAO,GAAI,QAAQ,KAAKA,OAAd,IAA0B,UAAUC,UAAV,EAAsBC,SAAtB,EAAiC;AACrE,SAAO,UAAUhB,MAAV,EAAkBC,GAAlB,EAAuB;AAAEe,IAAAA,SAAS,CAAChB,MAAD,EAASC,GAAT,EAAcc,UAAd,CAAT;AAAqC,GAArE;AACH,CAFD;;AAGA,OAAO,KAAKE,GAAZ,MAAqB,iCAArB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,kDAAzC;AACA,SAASC,QAAT,QAAyB,mCAAzB;AACA,SAASC,UAAT,EAAqBC,eAArB,EAAsCC,YAAtC,QAA0D,sCAA1D;AACA,SAASC,QAAT,QAAyB,kCAAzB;AACA,SAASC,KAAT,QAAsB,+BAAtB;AACA,SAASC,sBAAT,QAAuC,oCAAvC;AACA,SAASC,oBAAT,QAAqC,8BAArC;AACA,SAASC,qBAAT,QAAsC,4BAAtC;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,SAASC,gBAAT,QAAiC,iBAAjC;AACA,SAASC,wBAAT,QAAyC,+BAAzC;AACA,SAASC,sBAAT,QAAuC,6BAAvC;AACA,SAASC,iCAAT,QAAkD,sEAAlD;AACA,SAASC,kBAAT,QAAmC,sDAAnC;AACA,SAASC,qBAAT,QAAsC,4DAAtC;AACA,SAASC,kBAAT,QAAmC,sDAAnC;AACA,SAASC,OAAO,IAAIC,cAApB,QAA0C,kCAA1C;AACA,SAASC,kCAAT,QAAmD,wDAAnD;AACA,SAASC,mBAAT,QAAoC,kCAApC;AACA,SAASC,eAAT,QAAgC,6CAAhC;AACA,SAASC,iBAAT,QAAkC,sCAAlC;AACA,SAASC,OAAT,QAAwB,kCAAxB;AACA,MAAMC,CAAC,GAAG3B,GAAG,CAAC2B,CAAd;AACA,IAAIC,sBAAsB,GAAG,MAAMA,sBAAN,SAAqCxB,UAArC,CAAgD;AACzEyB,EAAAA,WAAW,CAACC,OAAD,EAAUC,qBAAV,EAAiCC,kBAAjC,EAAqD;AAC5D;AACA,SAAKF,OAAL,GAAeA,OAAf;AACA,SAAKC,qBAAL,GAA6BA,qBAA7B;AACA,SAAKC,kBAAL,GAA0BA,kBAA1B;AACA,SAAKC,aAAL,GAAqB,CACjB,KAAKF,qBAAL,CAA2BG,cAA3B,CAA0CvB,qBAA1C,EAAiE,KAAKmB,OAAtE,CADiB,EAEjB,KAAKC,qBAAL,CAA2BG,cAA3B,CAA0CpB,wBAA1C,EAAoE,KAAKgB,OAAzE,CAFiB,EAGjB,KAAKC,qBAAL,CAA2BG,cAA3B,CAA0ClB,iCAA1C,EAA6E,KAAKc,OAAlF,CAHiB,EAIjB,KAAKC,qBAAL,CAA2BG,cAA3B,CAA0CZ,kCAA1C,EAA8E,KAAKQ,OAAnF,CAJiB,EAKjB,KAAKC,qBAAL,CAA2BG,cAA3B,CAA0CnB,sBAA1C,EAAkE,KAAKe,OAAvE,CALiB,EAMjB,KAAKC,qBAAL,CAA2BG,cAA3B,CAA0CV,eAA1C,EAA2D,KAAKM,OAAhE,CANiB,CAArB;AAQA,SAAKK,OAAL,GAAe,KAAKC,SAAL,CAAe,KAAKL,qBAAL,CAA2BG,cAA3B,CAA0CG,kBAA1C,EAA8D,KAAKP,OAAnE,CAAf,CAAf;AACA,SAAKQ,2BAAL,GAAmC,KAAKF,SAAL,CAAe,IAAIG,gCAAJ,CAAqC,KAAKT,OAA1C,CAAf,CAAnC;AACA,SAAKU,SAAL,GAAiB,IAAIC,oBAAJ,CAAyB,KAAKX,OAA9B,EAAuC,KAAKG,aAA5C,CAAjB;AACA,SAAKS,eAAL,GAAuB,KAAKN,SAAL,CAAe,IAAIxB,cAAJ,CAAmB,KAAKkB,OAAxB,EAAiC,KAAKU,SAAtC,CAAf,CAAvB;AACA,SAAKG,SAAL,GAAiB,EAAjB;AACA,SAAKC,oBAAL,GAA4B,KAA5B;;AACA,SAAKR,SAAL,CAAe,KAAKM,eAAL,CAAqBG,QAArB,CAA+BC,MAAD,IAAY;AACrD,WAAKC,WAAL,CAAiBD,MAAM,CAACE,KAAxB,EAA+BF,MAAM,CAACG,UAAtC,EAAkDH,MAAM,CAACI,iBAAzD;AACH,KAFc,CAAf;;AAGA,SAAKd,SAAL,CAAe,KAAKE,2BAAL,CAAiCa,2BAAjC,CAA6D,MAAM,KAAKC,0BAAL,EAAnE,CAAf;;AACA,SAAKhB,SAAL,CAAepC,GAAG,CAACqD,6BAAJ,CAAkC,KAAKlB,OAAL,CAAamB,UAAb,EAAlC,EAA6D,SAA7D,EAAyEC,CAAD,IAAO;AAC1F,UAAIA,CAAC,CAACC,MAAF,CAAS;AAAE;AAAX,OAAJ,EAA8B;AAC1B,aAAKC,IAAL;AACH;AACJ,KAJc,CAAf;;AAKA,SAAKrB,SAAL,CAAe1B,oBAAoB,CAACgD,WAArB,CAAiC,MAAM;AAClD,UAAI,KAAKvB,OAAL,CAAawB,QAAb,IAAyB,KAAKnB,SAAL,CAAeoB,MAAxC,IAAkD,KAAKjB,SAAL,CAAevD,MAAf,GAAwB,CAA9E,EAAiF;AAC7E,aAAK+C,OAAL,CAAa0B,KAAb;;AACA,aAAKC,eAAL,CAAqB,KAAKtB,SAAL,CAAeoB,MAApC,EAA4C,KAAKjB,SAAjD;AACH;AACJ,KALc,CAAf;AAMH;;AACDS,EAAAA,0BAA0B,GAAG;AACzB,QAAI,KAAKjB,OAAL,CAAawB,QAAjB,EAA2B;AACvB;AACA;AACA,WAAKjB,eAAL,CAAqBqB,MAArB;;AACA,UAAI,CAAC,KAAK5B,OAAL,CAAa6B,WAAlB,EAA+B;AAAE;AAC7B,aAAKtB,eAAL,CAAqBuB,KAArB,CAA2B;AAAE;AAA7B;AACH;AACJ;AACJ;;AACDC,EAAAA,WAAW,CAACC,UAAD,EAAa;AACpB,UAAMC,gBAAgB,GAAG,EAAzB;;AACA,SAAK,MAAMC,WAAX,IAA0B,KAAKpC,aAA/B,EAA8C;AAC1C,UAAIoC,WAAW,CAACC,kBAAhB,EAAoC;AAChC,cAAMV,MAAM,GAAGS,WAAW,CAACC,kBAAZ,CAA+BH,UAA/B,CAAf;;AACA,YAAIP,MAAJ,EAAY;AACRQ,UAAAA,gBAAgB,CAACG,IAAjB,CAAsBX,MAAtB;AACH;AACJ;AACJ;;AACD,UAAM7E,MAAM,GAAGoF,UAAU,CAACpF,MAA1B;;AACA,QAAIA,MAAM,CAACyF,IAAP,KAAgB;AAAE;AAAtB,MAA0C;AACtCJ,MAAAA,gBAAgB,CAACG,IAAjB,CAAsB,IAAI1D,gBAAJ,CAAqB,CAArB,EAAwB9B,MAAM,CAAC0F,KAA/B,CAAtB;AACH;;AACD,QAAI1F,MAAM,CAACyF,IAAP,KAAgB;AAAE;AAAtB,MAA2C;AACvC,YAAME,OAAO,GAAG,KAAK5C,OAAL,CAAa6C,SAAb,CAAuB;AAAG;AAA1B,QAA0CC,8BAA1C,GAA2E,CAA3F;;AACA,UAAI,CAAC7F,MAAM,CAAC8F,MAAP,CAAcC,YAAf,IAA+B,OAAO/F,MAAM,CAAC8F,MAAP,CAAcE,wBAArB,KAAkD,QAAjF,IAA6FhG,MAAM,CAAC8F,MAAP,CAAcE,wBAAd,GAAyCL,OAA1I,EAAmJ;AAC/I;AACAN,QAAAA,gBAAgB,CAACG,IAAjB,CAAsB,IAAI1D,gBAAJ,CAAqB,CAArB,EAAwB9B,MAAM,CAAC0F,KAA/B,CAAtB;AACH;AACJ;;AACD,QAAIL,gBAAgB,CAAChF,MAAjB,KAA4B,CAAhC,EAAmC;AAC/B,aAAO,KAAP;AACH;;AACDgF,IAAAA,gBAAgB,CAACY,IAAjB,CAAsB,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACC,QAAF,GAAaF,CAAC,CAACE,QAA/C;;AACA,SAAKC,eAAL,CAAqBhB,gBAAgB,CAAC,CAAD,CAArC,EAA0C;AAAE;AAA5C,MAA2D,KAA3D;;AACA,WAAO,IAAP;AACH;;AACDiB,EAAAA,mBAAmB,CAACZ,KAAD,EAAQa,IAAR,EAAcC,KAAd,EAAqB;AACpC,SAAKH,eAAL,CAAqB,IAAIvE,gBAAJ,CAAqB,CAArB,EAAwB4D,KAAxB,CAArB,EAAqDa,IAArD,EAA2DC,KAA3D;AACH;;AACDH,EAAAA,eAAe,CAACxB,MAAD,EAAS0B,IAAT,EAAeC,KAAf,EAAsB;AACjC,QAAI,KAAK/C,SAAL,CAAeoB,MAAf,IAAyB,KAAKpB,SAAL,CAAeoB,MAAf,CAAsBJ,MAAtB,CAA6BI,MAA7B,CAA7B,EAAmE;AAC/D;AACA;AACH;;AACD,SAAKlB,eAAL,CAAqBqB,MAArB;;AACA,QAAI,KAAK5B,OAAL,CAAawB,QAAjB,EAA2B;AACvB;AACA;AACA;AACA,UAAI,CAAC,KAAKnB,SAAL,CAAeoB,MAAhB,IAA0B,CAACA,MAAM,CAAC4B,oBAAP,CAA4B,KAAKhD,SAAL,CAAeoB,MAA3C,EAAmD,KAAKzB,OAAL,CAAawB,QAAhE,CAA/B,EAA0G;AACtG,aAAKF,IAAL;AACH,OAFD,MAGK;AACD,cAAMgC,gBAAgB,GAAG,KAAK9C,SAAL,CAAe+C,MAAf,CAAuBC,CAAD,IAAOA,CAAC,CAACC,qBAAF,CAAwBhC,MAAxB,CAA7B,CAAzB;;AACA,YAAI6B,gBAAgB,CAACrG,MAAjB,KAA4B,CAAhC,EAAmC;AAC/B,eAAKqE,IAAL;AACH,SAFD,MAGK,IAAIgC,gBAAgB,CAACrG,MAAjB,KAA4B,KAAKuD,SAAL,CAAevD,MAA3C,IAAqD,KAAKwD,oBAA9D,EAAoF;AACrF;AACA;AACH,SAHI,MAIA;AACD,eAAKkB,eAAL,CAAqBF,MAArB,EAA6B6B,gBAA7B;AACH;AACJ;AACJ;;AACD,SAAKjD,SAAL,CAAeoB,MAAf,GAAwBA,MAAxB;AACA,SAAKpB,SAAL,CAAeqD,WAAf,GAA6BN,KAA7B;;AACA,SAAK7C,eAAL,CAAqBuB,KAArB,CAA2BqB,IAA3B;AACH;;AACD7B,EAAAA,IAAI,GAAG;AACH,SAAKjB,SAAL,CAAeoB,MAAf,GAAwB,IAAxB;;AACA,SAAKlB,eAAL,CAAqBqB,MAArB;;AACA,SAAK5B,OAAL,CAAasB,IAAb;AACH;;AACDqC,EAAAA,oBAAoB,GAAG;AACnB,WAAO,CAAC,CAAC,KAAK3D,OAAL,CAAa6B,WAAtB;AACH;;AACD+B,EAAAA,kBAAkB,CAACjD,MAAD,EAAS;AACvB,QAAI,KAAKN,SAAL,CAAeoB,MAAnB,EAA2B;AACvB,WAAK,MAAMS,WAAX,IAA0B,KAAKpC,aAA/B,EAA8C;AAC1C,YAAIoC,WAAW,CAAC2B,oBAAhB,EAAsC;AAClC,gBAAMC,cAAc,GAAG5B,WAAW,CAAC2B,oBAAZ,CAAiC,KAAKxD,SAAL,CAAeoB,MAAhD,CAAvB;;AACA,cAAIqC,cAAJ,EAAoB;AAChB,mBAAOnD,MAAM,CAACoD,KAAP,CAAa,CAAb,EAAgBC,MAAhB,CAAuB,CAACF,cAAD,CAAvB,CAAP;AACH;AACJ;AACJ;AACJ;;AACD,WAAOnD,MAAP;AACH;;AACDC,EAAAA,WAAW,CAACD,MAAD,EAASG,UAAT,EAAqBC,iBAArB,EAAwC;AAC/C,SAAKP,SAAL,GAAkBO,iBAAiB,GAAG,KAAK6C,kBAAL,CAAwBjD,MAAxB,CAAH,GAAqCA,MAAxE;AACA,SAAKF,oBAAL,GAA4BK,UAA5B;;AACA,QAAI,KAAKT,SAAL,CAAeoB,MAAf,IAAyB,KAAKjB,SAAL,CAAevD,MAAf,GAAwB,CAArD,EAAwD;AACpD,WAAK0E,eAAL,CAAqB,KAAKtB,SAAL,CAAeoB,MAApC,EAA4C,KAAKjB,SAAjD;AACH,KAFD,MAGK,IAAIM,UAAJ,EAAgB;AACjB,WAAKQ,IAAL;AACH;AACJ;;AACDK,EAAAA,eAAe,CAACF,MAAD,EAASwC,QAAT,EAAmB;AAC9B;AACA,QAAIC,YAAY,GAAG;AAAW;AAA9B;AACA,QAAIC,cAAc,GAAGF,QAAQ,CAAC,CAAD,CAAR,CAAY3B,KAAjC;AACA,QAAI8B,gBAAgB,GAAG,IAAvB;;AACA,SAAK,MAAMC,GAAX,IAAkBJ,QAAlB,EAA4B;AACxBC,MAAAA,YAAY,GAAGI,IAAI,CAACC,GAAL,CAASL,YAAT,EAAuBG,GAAG,CAAC/B,KAAJ,CAAUkC,WAAjC,CAAf;AACAL,MAAAA,cAAc,GAAG9F,KAAK,CAACoG,SAAN,CAAgBN,cAAhB,EAAgCE,GAAG,CAAC/B,KAApC,CAAjB;;AACA,UAAI+B,GAAG,CAACD,gBAAR,EAA0B;AACtBA,QAAAA,gBAAgB,GAAGC,GAAG,CAAC/B,KAAvB;AACH;AACJ;;AACD,UAAMoC,WAAW,GAAG,IAAIxG,eAAJ,EAApB;AACA,UAAMyG,SAAS,GAAGD,WAAW,CAACE,GAAZ,CAAgB,IAAIC,oBAAJ,CAAyB,KAAKhF,kBAA9B,CAAhB,CAAlB;AACA,UAAMiF,QAAQ,GAAGC,QAAQ,CAACC,sBAAT,EAAjB;AACA,QAAInD,WAAW,GAAG,IAAlB;AACA,UAAMoD,OAAO,GAAG;AACZH,MAAAA,QADY;AAEZH,MAAAA,SAFY;AAGZO,MAAAA,cAAc,EAAGC,MAAD,IAAYtD,WAAW,GAAGsD,MAH9B;AAIZC,MAAAA,iBAAiB,EAAE,MAAM,KAAKpF,OAAL,CAAaoF,iBAAb,EAJb;AAKZ9D,MAAAA,IAAI,EAAE,MAAM,KAAKA,IAAL;AALA,KAAhB;;AAOA,SAAK,MAAMY,WAAX,IAA0B,KAAKpC,aAA/B,EAA8C;AAC1C,YAAMuF,UAAU,GAAGpB,QAAQ,CAACV,MAAT,CAAgBc,GAAG,IAAIA,GAAG,CAACiB,KAAJ,KAAcpD,WAArC,CAAnB;;AACA,UAAImD,UAAU,CAACpI,MAAX,GAAoB,CAAxB,EAA2B;AACvByH,QAAAA,WAAW,CAACE,GAAZ,CAAgB1C,WAAW,CAACqD,gBAAZ,CAA6BN,OAA7B,EAAsCI,UAAtC,CAAhB;AACH;AACJ;;AACD,QAAIV,SAAS,CAACa,UAAd,EAA0B;AACtBV,MAAAA,QAAQ,CAACW,WAAT,CAAqBd,SAAS,CAACe,YAA/B;AACH;;AACD,QAAIZ,QAAQ,CAACa,aAAT,EAAJ,EAA8B;AAC1B,UAAIxB,cAAJ,EAAoB;AAChB,cAAMyB,oBAAoB,GAAG,KAAKzF,2BAAL,CAAiC0F,gBAAjC,CAAkD,EAAlD,EAAsD,CAAC;AAC5EvD,UAAAA,KAAK,EAAE6B,cADqE;AAE5E2B,UAAAA,OAAO,EAAErG,sBAAsB,CAACsG;AAF4C,SAAD,CAAtD,CAA7B;;AAIArB,QAAAA,WAAW,CAACE,GAAZ,CAAgBzG,YAAY,CAAC,MAAM;AAC/B,eAAKgC,2BAAL,CAAiC0F,gBAAjC,CAAkDD,oBAAlD,EAAwE,EAAxE;AACH,SAF2B,CAA5B;AAGH;;AACD,WAAK5F,OAAL,CAAagG,MAAb,CAAoBlB,QAApB,EAA8B,IAAImB,uBAAJ,CAA4BpE,WAA5B,EAAyCuC,gBAAgB,GAAGA,gBAAgB,CAAC8B,gBAAjB,EAAH,GAAyC,IAAI9H,QAAJ,CAAaqD,MAAM,CAACa,KAAP,CAAa6D,eAA1B,EAA2CjC,YAA3C,CAAlG,EAA4JE,gBAAgB,GAAGA,gBAAH,GAAsBD,cAAlM,EAAkN,KAAKxE,OAAL,CAAa6C,SAAb,CAAuB;AAAG;AAA1B,QAAuC4D,KAAzP,EAAgQ,KAAK/F,SAAL,CAAeqD,WAA/Q,EAA4RgB,WAA5R,CAA9B;AACH,KAXD,MAYK;AACDA,MAAAA,WAAW,CAAC2B,OAAZ;AACH;AACJ;;AA1LwE,CAA7E;AA4LA5G,sBAAsB,CAACsG,mBAAvB,GAA6CzH,sBAAsB,CAACgI,QAAvB,CAAgC;AACzEC,EAAAA,WAAW,EAAE,yBAD4D;AAEzEC,EAAAA,SAAS,EAAE;AAF8D,CAAhC,CAA7C;AAIA/G,sBAAsB,GAAG/C,UAAU,CAAC,CAChCgB,OAAO,CAAC,CAAD,EAAIqB,qBAAJ,CADyB,EAEhCrB,OAAO,CAAC,CAAD,EAAIsB,kBAAJ,CAFyB,CAAD,EAGhCS,sBAHgC,CAAnC;AAIA,SAASA,sBAAT;AACA;AACA;AACA;;AACA,MAAMW,gCAAN,SAA+CnC,UAA/C,CAA0D;AACtDyB,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjB;AACA,SAAKA,OAAL,GAAeA,OAAf;AACA,SAAK8G,4BAAL,GAAoC,KAAKxG,SAAL,CAAe,IAAIV,OAAJ,EAAf,CAApC;AACA,SAAKyB,2BAAL,GAAmC,KAAKyF,4BAAL,CAAkCC,KAArE;AACA,SAAKC,sBAAL,GAA8B,KAA9B;;AACA,SAAK1G,SAAL,CAAe,KAAKN,OAAL,CAAaqB,2BAAb,CAA0CI,CAAD,IAAO;AAC3D,UAAI,KAAKuF,sBAAT,EAAiC;AAC7B;AACH;;AACD,WAAKF,4BAAL,CAAkCG,IAAlC,CAAuCxF,CAAvC;AACH,KALc,CAAf;AAMH;;AACDyE,EAAAA,gBAAgB,CAACgB,cAAD,EAAiBC,cAAjB,EAAiC;AAC7C,QAAI;AACA,WAAKH,sBAAL,GAA8B,IAA9B;AACA,aAAO,KAAKhH,OAAL,CAAakG,gBAAb,CAA8BgB,cAA9B,EAA8CC,cAA9C,CAAP;AACH,KAHD,SAIQ;AACJ,WAAKH,sBAAL,GAA8B,KAA9B;AACH;AACJ;;AAtBqD;;AAwB1D,MAAMV,uBAAN,CAA8B;AAC1BvG,EAAAA,WAAW,CAACmC,WAAD,EAAckF,cAAd,EAA8BC,WAA9B,EAA2CC,WAA3C,EAAwDC,UAAxD,EAAoExC,WAApE,EAAiF;AACxF,SAAK7C,WAAL,GAAmBA,WAAnB;AACA,SAAKkF,cAAL,GAAsBA,cAAtB;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKxC,WAAL,GAAmBA,WAAnB;AACH;;AARyB;;AAU9B,IAAIxE,kBAAkB,GAAG,MAAMA,kBAAN,SAAiCjC,UAAjC,CAA4C;AACjEyB,EAAAA,WAAW,CAACC,OAAD,EAAUwH,kBAAV,EAA8B;AACrC;AACA,SAAKxH,OAAL,GAAeA,OAAf;AACA,SAAKwH,kBAAL,GAA0BA,kBAA1B;AACA,SAAKC,mBAAL,GAA2B,IAA3B;AACA,SAAKC,gBAAL,GAAwB/H,iBAAiB,CAACgI,YAAlB,CAA+BC,MAA/B,CAAsC,KAAKJ,kBAA3C,CAAxB;AACA,SAAKK,MAAL,GAAc,KAAKvH,SAAL,CAAe,IAAIlC,WAAJ,EAAf,CAAd;AACA,SAAK0J,YAAL,GAAoB,IAApB;;AACA,SAAKxH,SAAL,CAAe,KAAKN,OAAL,CAAa+H,iBAAb,CAA+B,MAAM,KAAKC,OAAL,EAArC,CAAf;;AACA,SAAK1H,SAAL,CAAe,KAAKN,OAAL,CAAaiI,wBAAb,CAAuCxG,CAAD,IAAO;AACxD,UAAIA,CAAC,CAACyG,UAAF,CAAa;AAAG;AAAhB,OAAJ,EAAqC;AACjC,aAAKC,WAAL;AACH;AACJ,KAJc,CAAf;;AAKA,SAAKC,eAAL,CAAqB,IAArB;;AACA,SAAKJ,OAAL;;AACA,SAAKhI,OAAL,CAAaqI,gBAAb,CAA8B,IAA9B;AACH;AACD;AACJ;AACA;;;AACgB,MAARxG,QAAQ,GAAG;AACX,QAAIyG,EAAJ,EAAQC,EAAR;;AACA,WAAO,CAACA,EAAE,GAAG,CAACD,EAAE,GAAG,KAAKR,YAAX,MAA6B,IAA7B,IAAqCQ,EAAE,KAAK,KAAK,CAAjD,GAAqD,KAAK,CAA1D,GAA8DA,EAAE,CAAClB,cAAvE,MAA2F,IAA3F,IAAmGmB,EAAE,KAAK,KAAK,CAA/G,GAAmHA,EAAnH,GAAwH,IAA/H;AACH;AACD;AACJ;AACA;;;AACmB,MAAXrG,WAAW,GAAG;AACd,QAAIoG,EAAJ,EAAQC,EAAR;;AACA,WAAO,CAACA,EAAE,GAAG,CAACD,EAAE,GAAG,KAAKR,YAAX,MAA6B,IAA7B,IAAqCQ,EAAE,KAAK,KAAK,CAAjD,GAAqD,KAAK,CAA1D,GAA8DA,EAAE,CAACpG,WAAvE,MAAwF,IAAxF,IAAgGqG,EAAE,KAAK,KAAK,CAA5G,GAAgHA,EAAhH,GAAqH,IAA5H;AACH;;AACD7B,EAAAA,OAAO,GAAG;AACN,SAAK1G,OAAL,CAAawI,mBAAb,CAAiC,IAAjC;;AACA,QAAI,KAAKV,YAAT,EAAuB;AACnB,WAAKA,YAAL,CAAkB/C,WAAlB,CAA8B2B,OAA9B;AACH;;AACD,UAAMA,OAAN;AACH;;AACD+B,EAAAA,KAAK,GAAG;AACJ,WAAOlI,kBAAkB,CAACmI,EAA1B;AACH;;AACDlH,EAAAA,UAAU,GAAG;AACT,WAAO,KAAKqG,MAAL,CAAYc,gBAAnB;AACH;;AACDC,EAAAA,WAAW,GAAG;AACV,QAAI,CAAC,KAAKd,YAAV,EAAwB;AACpB,aAAO,IAAP;AACH;;AACD,QAAIR,WAAW,GAAG,KAAKQ,YAAL,CAAkBR,WAApC;;AACA,QAAI,CAACA,WAAD,IAAgB,KAAKE,kBAAL,CAAwBqB,kBAAxB,CAA2CtJ,cAAc,CAACuJ,OAAf,CAAuB5L,GAAlE,CAApB,EAA4F;AACxF;AACAoK,MAAAA,WAAW,GAAG,IAAd;AACH;;AACD,WAAO;AACHzF,MAAAA,QAAQ,EAAE,KAAKiG,YAAL,CAAkBV,cADzB;AAEHzE,MAAAA,KAAK,EAAE,KAAKmF,YAAL,CAAkBT,WAFtB;AAGH0B,MAAAA,UAAU,EAAGzB,WAAW,GAClB,CAAC;AAAE;AAAH,QAAgB;AAAE;AAAlB,OADkB,GAElB,CAAC;AAAE;AAAH,QAAgB;AAAE;AAAlB;AALH,KAAP;AAOH;;AACDc,EAAAA,eAAe,CAACY,WAAD,EAAc;AACzB,QAAI,KAAKlB,YAAT,EAAuB;AACnB,WAAKA,YAAL,CAAkB/C,WAAlB,CAA8B2B,OAA9B;AACH;;AACD,SAAKoB,YAAL,GAAoBkB,WAApB;;AACA,SAAKtB,gBAAL,CAAsBuB,GAAtB,CAA0B,CAAC,CAAC,KAAKnB,YAAjC;;AACA,SAAKD,MAAL,CAAYc,gBAAZ,CAA6BO,SAA7B,CAAuCC,MAAvC,CAA8C,QAA9C,EAAwD,CAAC,KAAKrB,YAA9D;AACH;;AACDE,EAAAA,OAAO,GAAG;AACN,UAAMoB,MAAM,GAAGzE,IAAI,CAAC0E,GAAL,CAAS,KAAKrJ,OAAL,CAAasJ,aAAb,GAA6BF,MAA7B,GAAsC,CAA/C,EAAkD,GAAlD,CAAf;;AACA,UAAM;AAAEG,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAA2B,KAAKxJ,OAAL,CAAa6C,SAAb,CAAuB;AAAG;AAA1B,KAAjC;;AACA,SAAKgF,MAAL,CAAY4B,eAAZ,CAA4BC,KAA5B,CAAkCH,QAAlC,GAA8C,GAAEA,QAAS,IAAzD;AACA,SAAK1B,MAAL,CAAY4B,eAAZ,CAA4BC,KAA5B,CAAkCF,UAAlC,GAAgD,GAAEA,UAAU,GAAGD,QAAS,EAAxE;AACA,SAAK1B,MAAL,CAAY4B,eAAZ,CAA4BC,KAA5B,CAAkCC,SAAlC,GAA+C,GAAEP,MAAO,IAAxD;AACA,SAAKvB,MAAL,CAAY4B,eAAZ,CAA4BC,KAA5B,CAAkCE,QAAlC,GAA8C,GAAEjF,IAAI,CAAC0E,GAAL,CAAS,KAAKrJ,OAAL,CAAasJ,aAAb,GAA6BO,KAA7B,GAAqC,IAA9C,EAAoD,GAApD,CAAyD,IAAzG;AACH;;AACD1B,EAAAA,WAAW,GAAG;AACV,UAAM2B,WAAW,GAAGC,KAAK,CAACC,SAAN,CAAgB5F,KAAhB,CAAsB6F,IAAtB,CAA2B,KAAKpC,MAAL,CAAY4B,eAAZ,CAA4BS,sBAA5B,CAAmD,MAAnD,CAA3B,CAApB;AACAJ,IAAAA,WAAW,CAACK,OAAZ,CAAoBC,IAAI,IAAI,KAAKpK,OAAL,CAAaqK,aAAb,CAA2BD,IAA3B,CAA5B;AACH;;AACD/D,EAAAA,MAAM,CAAC+D,IAAD,EAAOpB,WAAP,EAAoB;AACtB,SAAKZ,eAAL,CAAqBY,WAArB;;AACA,SAAKnB,MAAL,CAAY4B,eAAZ,CAA4Ba,WAA5B,GAA0C,EAA1C;;AACA,SAAKzC,MAAL,CAAY4B,eAAZ,CAA4B3D,WAA5B,CAAwCsE,IAAxC;;AACA,SAAKvC,MAAL,CAAY4B,eAAZ,CAA4BC,KAA5B,CAAkCa,aAAlC,GAAkD,EAAlD;;AACA,SAAKpC,WAAL;;AACA,SAAKnI,OAAL,CAAawK,mBAAb,CAAiC,IAAjC;;AACA,SAAK/E,iBAAL,GAPsB,CAQtB;AACA;;AACA,SAAKzF,OAAL,CAAayK,MAAb,GAVsB,CAWtB;AACA;;;AACA,SAAKzK,OAAL,CAAawK,mBAAb,CAAiC,IAAjC;;AACA,SAAK/E,iBAAL;;AACA,QAAIuD,WAAW,CAACzB,UAAhB,EAA4B;AACxB,WAAKM,MAAL,CAAYc,gBAAZ,CAA6BlF,KAA7B;AACH;;AACD,QAAIuF,WAAW,CAAC9G,WAAhB,EAA6B;AACzB8G,MAAAA,WAAW,CAAC9G,WAAZ,CAAwBwI,MAAxB;AACH;AACJ;;AACD/I,EAAAA,IAAI,GAAG;AACH,QAAI,KAAKmG,YAAT,EAAuB;AACnB,YAAMP,UAAU,GAAG,KAAKO,YAAL,CAAkBP,UAArC;;AACA,WAAKa,eAAL,CAAqB,IAArB;;AACA,WAAKpI,OAAL,CAAawK,mBAAb,CAAiC,IAAjC;;AACA,UAAIjD,UAAJ,EAAgB;AACZ,aAAKvH,OAAL,CAAayD,KAAb;AACH;AACJ;AACJ;;AACDgC,EAAAA,iBAAiB,GAAG;AAChB,SAAKoC,MAAL,CAAYpC,iBAAZ;;AACA,UAAMkF,gBAAgB,GAAG,KAAK9C,MAAL,CAAY+C,SAAZ,CAAsBC,mBAAtB,EAAzB;;AACA,UAAMC,sBAAsB,GAAIH,gBAAgB,CAACI,WAAjB,GAA+BJ,gBAAgB,CAACd,KAAhF;;AACA,QAAIiB,sBAAJ,EAA4B;AACxB;AACA,YAAME,kBAAkB,GAAI,GAAE,KAAKnD,MAAL,CAAY+C,SAAZ,CAAsBzE,OAAtB,CAA8B8E,uBAAwB,IAApF;;AACA,UAAI,KAAKpD,MAAL,CAAY4B,eAAZ,CAA4BC,KAA5B,CAAkCa,aAAlC,KAAoDS,kBAAxD,EAA4E;AACxE,aAAKnD,MAAL,CAAY4B,eAAZ,CAA4BC,KAA5B,CAAkCa,aAAlC,GAAkDS,kBAAlD;;AACA,aAAKhL,OAAL,CAAawK,mBAAb,CAAiC,IAAjC;;AACA,aAAK3C,MAAL,CAAYpC,iBAAZ;AACH;AACJ;AACJ;;AACD1D,EAAAA,KAAK,GAAG;AACJ,SAAK8F,MAAL,CAAY4B,eAAZ,CAA4Ba,WAA5B,GAA0C,EAA1C;AACH;;AAnIgE,CAArE;AAqIA/J,kBAAkB,CAACmI,EAAnB,GAAwB,mCAAxB;AACAnI,kBAAkB,GAAGxD,UAAU,CAAC,CAC5BgB,OAAO,CAAC,CAAD,EAAIoB,kBAAJ,CADqB,CAAD,EAE5BoB,kBAF4B,CAA/B;AAGA,SAASA,kBAAT;AACA,IAAI2E,oBAAoB,GAAG,MAAMA,oBAAN,SAAmC5G,UAAnC,CAA8C;AACrEyB,EAAAA,WAAW,CAACG,kBAAD,EAAqB;AAC5B;AACA,SAAKA,kBAAL,GAA0BA,kBAA1B;AACA,SAAKgL,WAAL,GAAmB,KAAnB;AACA,SAAKnF,YAAL,GAAoBlG,CAAC,CAAC,0BAAD,CAArB;AACA,SAAKsL,cAAL,GAAsBjN,GAAG,CAACkN,MAAJ,CAAW,KAAKrF,YAAhB,EAA8BlG,CAAC,CAAC,aAAD,CAA/B,CAAtB;AACH;;AACa,MAAVgG,UAAU,GAAG;AACb,WAAO,KAAKqF,WAAZ;AACH;;AACDG,EAAAA,SAAS,CAACC,aAAD,EAAgB;AACrB,UAAMC,UAAU,GAAG,KAAKrL,kBAAL,CAAwBsL,gBAAxB,CAAyCF,aAAa,CAACG,SAAvD,CAAnB;;AACA,UAAMC,eAAe,GAAGH,UAAU,GAAGA,UAAU,CAACI,QAAX,EAAH,GAA2B,IAA7D;AACA,SAAKT,WAAL,GAAmB,IAAnB;AACA,WAAO,KAAK5K,SAAL,CAAenC,WAAW,CAACsM,MAAZ,CAAmB,KAAKU,cAAxB,EAAwCG,aAAxC,EAAuDI,eAAvD,CAAf,CAAP;AACH;;AACDN,EAAAA,MAAM,CAACQ,OAAD,EAAU;AACZ,UAAM5K,MAAM,GAAG9C,GAAG,CAACkN,MAAJ,CAAW,KAAKD,cAAhB,EAAgCS,OAAhC,CAAf;AACA,SAAKV,WAAL,GAAmB,IAAnB;AACA,WAAOlK,MAAP;AACH;;AArBoE,CAAzE;AAuBAkE,oBAAoB,GAAGnI,UAAU,CAAC,CAC9BgB,OAAO,CAAC,CAAD,EAAIsB,kBAAJ,CADuB,CAAD,EAE9B6F,oBAF8B,CAAjC;;AAGA,MAAMvE,oBAAN,CAA2B;AACvBZ,EAAAA,WAAW,CAACC,OAAD,EAAUG,aAAV,EAAyB;AAChC,SAAKH,OAAL,GAAeA,OAAf;AACA,SAAKG,aAAL,GAAqBA,aAArB;AACA,SAAK0L,OAAL,GAAe,IAAf;AACA,SAAKC,YAAL,GAAoB,KAApB;AACH;;AACS,MAANhK,MAAM,GAAG;AAAE,WAAO,KAAK+J,OAAZ;AAAsB;;AAC3B,MAAN/J,MAAM,CAACZ,KAAD,EAAQ;AAAE,SAAK2K,OAAL,GAAe3K,KAAf;AAAuB;;AAC5B,MAAX6C,WAAW,GAAG;AAAE,WAAO,KAAK+H,YAAZ;AAA2B;;AAChC,MAAX/H,WAAW,CAAC7C,KAAD,EAAQ;AAAE,SAAK4K,YAAL,GAAoB5K,KAApB;AAA4B;;AAC3B,SAAnB6K,mBAAmB,CAACC,MAAD,EAASlK,MAAT,EAAiB;AACvC,QAAIA,MAAM,CAACY,IAAP,KAAgB;AAAE;AAAtB,MAAmC;AAC/B,aAAO,EAAP;AACH;;AACD,UAAMuJ,KAAK,GAAGD,MAAM,CAACE,QAAP,EAAd;AACA,UAAMC,UAAU,GAAGrK,MAAM,CAACa,KAAP,CAAa6D,eAAhC;AACA,UAAM4F,SAAS,GAAGH,KAAK,CAACI,gBAAN,CAAuBF,UAAvB,CAAlB;AACA,WAAOH,MAAM,CAACM,kBAAP,CAA0BH,UAA1B,EAAsCvI,MAAtC,CAA8ClG,CAAD,IAAO;AACvD,UAAIA,CAAC,CAACyI,OAAF,CAAUoG,WAAd,EAA2B;AACvB,eAAO,IAAP;AACH;;AACD,YAAM1H,WAAW,GAAInH,CAAC,CAACiF,KAAF,CAAQ6D,eAAR,KAA4B2F,UAA7B,GAA2CzO,CAAC,CAACiF,KAAF,CAAQkC,WAAnD,GAAiE,CAArF;AACA,YAAM2H,SAAS,GAAI9O,CAAC,CAACiF,KAAF,CAAQ8J,aAAR,KAA0BN,UAA3B,GAAyCzO,CAAC,CAACiF,KAAF,CAAQ6J,SAAjD,GAA6DJ,SAA/E;;AACA,UAAI1O,CAAC,CAACyI,OAAF,CAAUuG,eAAd,EAA+B;AAC3B;AACA,YAAI7H,WAAW,GAAG/C,MAAM,CAACa,KAAP,CAAakC,WAAb,GAA2B,CAAzC,IAA8C/C,MAAM,CAACa,KAAP,CAAa6J,SAAb,GAAyB,CAAzB,GAA6BA,SAA/E,EAA0F;AACtF,iBAAO,KAAP;AACH;AACJ,OALD,MAMK;AACD,YAAI3H,WAAW,GAAG/C,MAAM,CAACa,KAAP,CAAakC,WAA3B,IAA0C/C,MAAM,CAACa,KAAP,CAAa6J,SAAb,GAAyBA,SAAvE,EAAkF;AAC9E,iBAAO,KAAP;AACH;AACJ;;AACD,aAAO,IAAP;AACH,KAlBM,CAAP;AAmBH;;AACDG,EAAAA,YAAY,CAACC,KAAD,EAAQ;AAChB,UAAM9K,MAAM,GAAG,KAAK+J,OAApB;;AACA,QAAI,CAAC,KAAK7L,OAAL,CAAa6M,QAAb,EAAD,IAA4B,CAAC/K,MAAjC,EAAyC;AACrC,aAAOrC,mBAAmB,CAACqN,KAA3B;AACH;;AACD,UAAMC,eAAe,GAAGpM,oBAAoB,CAACoL,mBAArB,CAAyC,KAAK/L,OAA9C,EAAuD8B,MAAvD,CAAxB;;AACA,WAAOrC,mBAAmB,CAACuN,KAApB,CAA0B,KAAK7M,aAAL,CAAmB8M,GAAnB,CAAwB1K,WAAD,IAAiB;AACrE,UAAI,CAACA,WAAW,CAACoK,YAAjB,EAA+B;AAC3B,eAAOlN,mBAAmB,CAACqN,KAA3B;AACH;;AACD,aAAOvK,WAAW,CAACoK,YAAZ,CAAyB7K,MAAzB,EAAiCiL,eAAjC,EAAkDH,KAAlD,CAAP;AACH,KALgC,CAA1B,CAAP;AAMH;;AACDM,EAAAA,WAAW,GAAG;AACV,QAAI,CAAC,KAAKlN,OAAL,CAAa6M,QAAb,EAAD,IAA4B,CAAC,KAAKhB,OAAtC,EAA+C;AAC3C,aAAO,EAAP;AACH;;AACD,UAAMkB,eAAe,GAAGpM,oBAAoB,CAACoL,mBAArB,CAAyC,KAAK/L,OAA9C,EAAuD,KAAK6L,OAA5D,CAAxB;;AACA,QAAI7K,MAAM,GAAG,EAAb;;AACA,SAAK,MAAMuB,WAAX,IAA0B,KAAKpC,aAA/B,EAA8C;AAC1Ca,MAAAA,MAAM,GAAGA,MAAM,CAACqD,MAAP,CAAc9B,WAAW,CAAC2K,WAAZ,CAAwB,KAAKrB,OAA7B,EAAsCkB,eAAtC,CAAd,CAAT;AACH;;AACD,WAAO1O,QAAQ,CAAC2C,MAAD,CAAf;AACH;;AA7DsB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport * as dom from '../../../../base/browser/dom.js';\nimport { HoverAction, HoverWidget } from '../../../../base/browser/ui/hover/hoverWidget.js';\nimport { coalesce } from '../../../../base/common/arrays.js';\nimport { Disposable, DisposableStore, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { ModelDecorationOptions } from '../../../common/model/textModel.js';\nimport { TokenizationRegistry } from '../../../common/languages.js';\nimport { ColorHoverParticipant } from './colorHoverParticipant.js';\nimport { HoverOperation } from './hoverOperation.js';\nimport { HoverRangeAnchor } from './hoverTypes.js';\nimport { MarkdownHoverParticipant } from './markdownHoverParticipant.js';\nimport { MarkerHoverParticipant } from './markerHoverParticipant.js';\nimport { InlineCompletionsHoverParticipant } from '../../inlineCompletions/browser/inlineCompletionsHoverParticipant.js';\nimport { IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding.js';\nimport { Context as SuggestContext } from '../../suggest/browser/suggest.js';\nimport { UnicodeHighlighterHoverParticipant } from '../../unicodeHighlighter/browser/unicodeHighlighter.js';\nimport { AsyncIterableObject } from '../../../../base/common/async.js';\nimport { InlayHintsHover } from '../../inlayHints/browser/inlayHintsHover.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { Emitter } from '../../../../base/common/event.js';\nconst $ = dom.$;\nlet ContentHoverController = class ContentHoverController extends Disposable {\n    constructor(_editor, _instantiationService, _keybindingService) {\n        super();\n        this._editor = _editor;\n        this._instantiationService = _instantiationService;\n        this._keybindingService = _keybindingService;\n        this._participants = [\n            this._instantiationService.createInstance(ColorHoverParticipant, this._editor),\n            this._instantiationService.createInstance(MarkdownHoverParticipant, this._editor),\n            this._instantiationService.createInstance(InlineCompletionsHoverParticipant, this._editor),\n            this._instantiationService.createInstance(UnicodeHighlighterHoverParticipant, this._editor),\n            this._instantiationService.createInstance(MarkerHoverParticipant, this._editor),\n            this._instantiationService.createInstance(InlayHintsHover, this._editor),\n        ];\n        this._widget = this._register(this._instantiationService.createInstance(ContentHoverWidget, this._editor));\n        this._decorationsChangerListener = this._register(new EditorDecorationsChangerListener(this._editor));\n        this._computer = new ContentHoverComputer(this._editor, this._participants);\n        this._hoverOperation = this._register(new HoverOperation(this._editor, this._computer));\n        this._messages = [];\n        this._messagesAreComplete = false;\n        this._register(this._hoverOperation.onResult((result) => {\n            this._withResult(result.value, result.isComplete, result.hasLoadingMessage);\n        }));\n        this._register(this._decorationsChangerListener.onDidChangeModelDecorations(() => this._onModelDecorationsChanged()));\n        this._register(dom.addStandardDisposableListener(this._widget.getDomNode(), 'keydown', (e) => {\n            if (e.equals(9 /* Escape */)) {\n                this.hide();\n            }\n        }));\n        this._register(TokenizationRegistry.onDidChange(() => {\n            if (this._widget.position && this._computer.anchor && this._messages.length > 0) {\n                this._widget.clear();\n                this._renderMessages(this._computer.anchor, this._messages);\n            }\n        }));\n    }\n    _onModelDecorationsChanged() {\n        if (this._widget.position) {\n            // The decorations have changed and the hover is visible,\n            // we need to recompute the displayed text\n            this._hoverOperation.cancel();\n            if (!this._widget.colorPicker) { // TODO@Michel ensure that displayed text for other decorations is computed even if color picker is in place\n                this._hoverOperation.start(0 /* Delayed */);\n            }\n        }\n    }\n    maybeShowAt(mouseEvent) {\n        const anchorCandidates = [];\n        for (const participant of this._participants) {\n            if (participant.suggestHoverAnchor) {\n                const anchor = participant.suggestHoverAnchor(mouseEvent);\n                if (anchor) {\n                    anchorCandidates.push(anchor);\n                }\n            }\n        }\n        const target = mouseEvent.target;\n        if (target.type === 6 /* CONTENT_TEXT */) {\n            anchorCandidates.push(new HoverRangeAnchor(0, target.range));\n        }\n        if (target.type === 7 /* CONTENT_EMPTY */) {\n            const epsilon = this._editor.getOption(44 /* fontInfo */).typicalHalfwidthCharacterWidth / 2;\n            if (!target.detail.isAfterLines && typeof target.detail.horizontalDistanceToText === 'number' && target.detail.horizontalDistanceToText < epsilon) {\n                // Let hover kick in even when the mouse is technically in the empty area after a line, given the distance is small enough\n                anchorCandidates.push(new HoverRangeAnchor(0, target.range));\n            }\n        }\n        if (anchorCandidates.length === 0) {\n            return false;\n        }\n        anchorCandidates.sort((a, b) => b.priority - a.priority);\n        this._startShowingAt(anchorCandidates[0], 0 /* Delayed */, false);\n        return true;\n    }\n    startShowingAtRange(range, mode, focus) {\n        this._startShowingAt(new HoverRangeAnchor(0, range), mode, focus);\n    }\n    _startShowingAt(anchor, mode, focus) {\n        if (this._computer.anchor && this._computer.anchor.equals(anchor)) {\n            // We have to show the widget at the exact same range as before, so no work is needed\n            return;\n        }\n        this._hoverOperation.cancel();\n        if (this._widget.position) {\n            // The range might have changed, but the hover is visible\n            // Instead of hiding it completely, filter out messages that are still in the new range and\n            // kick off a new computation\n            if (!this._computer.anchor || !anchor.canAdoptVisibleHover(this._computer.anchor, this._widget.position)) {\n                this.hide();\n            }\n            else {\n                const filteredMessages = this._messages.filter((m) => m.isValidForHoverAnchor(anchor));\n                if (filteredMessages.length === 0) {\n                    this.hide();\n                }\n                else if (filteredMessages.length === this._messages.length && this._messagesAreComplete) {\n                    // no change\n                    return;\n                }\n                else {\n                    this._renderMessages(anchor, filteredMessages);\n                }\n            }\n        }\n        this._computer.anchor = anchor;\n        this._computer.shouldFocus = focus;\n        this._hoverOperation.start(mode);\n    }\n    hide() {\n        this._computer.anchor = null;\n        this._hoverOperation.cancel();\n        this._widget.hide();\n    }\n    isColorPickerVisible() {\n        return !!this._widget.colorPicker;\n    }\n    _addLoadingMessage(result) {\n        if (this._computer.anchor) {\n            for (const participant of this._participants) {\n                if (participant.createLoadingMessage) {\n                    const loadingMessage = participant.createLoadingMessage(this._computer.anchor);\n                    if (loadingMessage) {\n                        return result.slice(0).concat([loadingMessage]);\n                    }\n                }\n            }\n        }\n        return result;\n    }\n    _withResult(result, isComplete, hasLoadingMessage) {\n        this._messages = (hasLoadingMessage ? this._addLoadingMessage(result) : result);\n        this._messagesAreComplete = isComplete;\n        if (this._computer.anchor && this._messages.length > 0) {\n            this._renderMessages(this._computer.anchor, this._messages);\n        }\n        else if (isComplete) {\n            this.hide();\n        }\n    }\n    _renderMessages(anchor, messages) {\n        // update column from which to show\n        let renderColumn = 1073741824 /* MAX_SAFE_SMALL_INTEGER */;\n        let highlightRange = messages[0].range;\n        let forceShowAtRange = null;\n        for (const msg of messages) {\n            renderColumn = Math.min(renderColumn, msg.range.startColumn);\n            highlightRange = Range.plusRange(highlightRange, msg.range);\n            if (msg.forceShowAtRange) {\n                forceShowAtRange = msg.range;\n            }\n        }\n        const disposables = new DisposableStore();\n        const statusBar = disposables.add(new EditorHoverStatusBar(this._keybindingService));\n        const fragment = document.createDocumentFragment();\n        let colorPicker = null;\n        const context = {\n            fragment,\n            statusBar,\n            setColorPicker: (widget) => colorPicker = widget,\n            onContentsChanged: () => this._widget.onContentsChanged(),\n            hide: () => this.hide()\n        };\n        for (const participant of this._participants) {\n            const hoverParts = messages.filter(msg => msg.owner === participant);\n            if (hoverParts.length > 0) {\n                disposables.add(participant.renderHoverParts(context, hoverParts));\n            }\n        }\n        if (statusBar.hasContent) {\n            fragment.appendChild(statusBar.hoverElement);\n        }\n        if (fragment.hasChildNodes()) {\n            if (highlightRange) {\n                const highlightDecorations = this._decorationsChangerListener.deltaDecorations([], [{\n                        range: highlightRange,\n                        options: ContentHoverController._DECORATION_OPTIONS\n                    }]);\n                disposables.add(toDisposable(() => {\n                    this._decorationsChangerListener.deltaDecorations(highlightDecorations, []);\n                }));\n            }\n            this._widget.showAt(fragment, new ContentHoverVisibleData(colorPicker, forceShowAtRange ? forceShowAtRange.getStartPosition() : new Position(anchor.range.startLineNumber, renderColumn), forceShowAtRange ? forceShowAtRange : highlightRange, this._editor.getOption(53 /* hover */).above, this._computer.shouldFocus, disposables));\n        }\n        else {\n            disposables.dispose();\n        }\n    }\n};\nContentHoverController._DECORATION_OPTIONS = ModelDecorationOptions.register({\n    description: 'content-hover-highlight',\n    className: 'hoverHighlight'\n});\nContentHoverController = __decorate([\n    __param(1, IInstantiationService),\n    __param(2, IKeybindingService)\n], ContentHoverController);\nexport { ContentHoverController };\n/**\n * Allows listening to `ICodeEditor.onDidChangeModelDecorations` and ignores the change caused by itself.\n */\nclass EditorDecorationsChangerListener extends Disposable {\n    constructor(_editor) {\n        super();\n        this._editor = _editor;\n        this._onDidChangeModelDecorations = this._register(new Emitter());\n        this.onDidChangeModelDecorations = this._onDidChangeModelDecorations.event;\n        this._isChangingDecorations = false;\n        this._register(this._editor.onDidChangeModelDecorations((e) => {\n            if (this._isChangingDecorations) {\n                return;\n            }\n            this._onDidChangeModelDecorations.fire(e);\n        }));\n    }\n    deltaDecorations(oldDecorations, newDecorations) {\n        try {\n            this._isChangingDecorations = true;\n            return this._editor.deltaDecorations(oldDecorations, newDecorations);\n        }\n        finally {\n            this._isChangingDecorations = false;\n        }\n    }\n}\nclass ContentHoverVisibleData {\n    constructor(colorPicker, showAtPosition, showAtRange, preferAbove, stoleFocus, disposables) {\n        this.colorPicker = colorPicker;\n        this.showAtPosition = showAtPosition;\n        this.showAtRange = showAtRange;\n        this.preferAbove = preferAbove;\n        this.stoleFocus = stoleFocus;\n        this.disposables = disposables;\n    }\n}\nlet ContentHoverWidget = class ContentHoverWidget extends Disposable {\n    constructor(_editor, _contextKeyService) {\n        super();\n        this._editor = _editor;\n        this._contextKeyService = _contextKeyService;\n        this.allowEditorOverflow = true;\n        this._hoverVisibleKey = EditorContextKeys.hoverVisible.bindTo(this._contextKeyService);\n        this._hover = this._register(new HoverWidget());\n        this._visibleData = null;\n        this._register(this._editor.onDidLayoutChange(() => this._layout()));\n        this._register(this._editor.onDidChangeConfiguration((e) => {\n            if (e.hasChanged(44 /* fontInfo */)) {\n                this._updateFont();\n            }\n        }));\n        this._setVisibleData(null);\n        this._layout();\n        this._editor.addContentWidget(this);\n    }\n    /**\n     * Returns `null` if the hover is not visible.\n     */\n    get position() {\n        var _a, _b;\n        return (_b = (_a = this._visibleData) === null || _a === void 0 ? void 0 : _a.showAtPosition) !== null && _b !== void 0 ? _b : null;\n    }\n    /**\n     * Returns `null` if the color picker is not visible.\n     */\n    get colorPicker() {\n        var _a, _b;\n        return (_b = (_a = this._visibleData) === null || _a === void 0 ? void 0 : _a.colorPicker) !== null && _b !== void 0 ? _b : null;\n    }\n    dispose() {\n        this._editor.removeContentWidget(this);\n        if (this._visibleData) {\n            this._visibleData.disposables.dispose();\n        }\n        super.dispose();\n    }\n    getId() {\n        return ContentHoverWidget.ID;\n    }\n    getDomNode() {\n        return this._hover.containerDomNode;\n    }\n    getPosition() {\n        if (!this._visibleData) {\n            return null;\n        }\n        let preferAbove = this._visibleData.preferAbove;\n        if (!preferAbove && this._contextKeyService.getContextKeyValue(SuggestContext.Visible.key)) {\n            // Prefer rendering above if the suggest widget is visible\n            preferAbove = true;\n        }\n        return {\n            position: this._visibleData.showAtPosition,\n            range: this._visibleData.showAtRange,\n            preference: (preferAbove\n                ? [1 /* ABOVE */, 2 /* BELOW */]\n                : [2 /* BELOW */, 1 /* ABOVE */]),\n        };\n    }\n    _setVisibleData(visibleData) {\n        if (this._visibleData) {\n            this._visibleData.disposables.dispose();\n        }\n        this._visibleData = visibleData;\n        this._hoverVisibleKey.set(!!this._visibleData);\n        this._hover.containerDomNode.classList.toggle('hidden', !this._visibleData);\n    }\n    _layout() {\n        const height = Math.max(this._editor.getLayoutInfo().height / 4, 250);\n        const { fontSize, lineHeight } = this._editor.getOption(44 /* fontInfo */);\n        this._hover.contentsDomNode.style.fontSize = `${fontSize}px`;\n        this._hover.contentsDomNode.style.lineHeight = `${lineHeight / fontSize}`;\n        this._hover.contentsDomNode.style.maxHeight = `${height}px`;\n        this._hover.contentsDomNode.style.maxWidth = `${Math.max(this._editor.getLayoutInfo().width * 0.66, 500)}px`;\n    }\n    _updateFont() {\n        const codeClasses = Array.prototype.slice.call(this._hover.contentsDomNode.getElementsByClassName('code'));\n        codeClasses.forEach(node => this._editor.applyFontInfo(node));\n    }\n    showAt(node, visibleData) {\n        this._setVisibleData(visibleData);\n        this._hover.contentsDomNode.textContent = '';\n        this._hover.contentsDomNode.appendChild(node);\n        this._hover.contentsDomNode.style.paddingBottom = '';\n        this._updateFont();\n        this._editor.layoutContentWidget(this);\n        this.onContentsChanged();\n        // Simply force a synchronous render on the editor\n        // such that the widget does not really render with left = '0px'\n        this._editor.render();\n        // See https://github.com/microsoft/vscode/issues/140339\n        // TODO: Doing a second layout of the hover after force rendering the editor\n        this._editor.layoutContentWidget(this);\n        this.onContentsChanged();\n        if (visibleData.stoleFocus) {\n            this._hover.containerDomNode.focus();\n        }\n        if (visibleData.colorPicker) {\n            visibleData.colorPicker.layout();\n        }\n    }\n    hide() {\n        if (this._visibleData) {\n            const stoleFocus = this._visibleData.stoleFocus;\n            this._setVisibleData(null);\n            this._editor.layoutContentWidget(this);\n            if (stoleFocus) {\n                this._editor.focus();\n            }\n        }\n    }\n    onContentsChanged() {\n        this._hover.onContentsChanged();\n        const scrollDimensions = this._hover.scrollbar.getScrollDimensions();\n        const hasHorizontalScrollbar = (scrollDimensions.scrollWidth > scrollDimensions.width);\n        if (hasHorizontalScrollbar) {\n            // There is just a horizontal scrollbar\n            const extraBottomPadding = `${this._hover.scrollbar.options.horizontalScrollbarSize}px`;\n            if (this._hover.contentsDomNode.style.paddingBottom !== extraBottomPadding) {\n                this._hover.contentsDomNode.style.paddingBottom = extraBottomPadding;\n                this._editor.layoutContentWidget(this);\n                this._hover.onContentsChanged();\n            }\n        }\n    }\n    clear() {\n        this._hover.contentsDomNode.textContent = '';\n    }\n};\nContentHoverWidget.ID = 'editor.contrib.contentHoverWidget';\nContentHoverWidget = __decorate([\n    __param(1, IContextKeyService)\n], ContentHoverWidget);\nexport { ContentHoverWidget };\nlet EditorHoverStatusBar = class EditorHoverStatusBar extends Disposable {\n    constructor(_keybindingService) {\n        super();\n        this._keybindingService = _keybindingService;\n        this._hasContent = false;\n        this.hoverElement = $('div.hover-row.status-bar');\n        this.actionsElement = dom.append(this.hoverElement, $('div.actions'));\n    }\n    get hasContent() {\n        return this._hasContent;\n    }\n    addAction(actionOptions) {\n        const keybinding = this._keybindingService.lookupKeybinding(actionOptions.commandId);\n        const keybindingLabel = keybinding ? keybinding.getLabel() : null;\n        this._hasContent = true;\n        return this._register(HoverAction.render(this.actionsElement, actionOptions, keybindingLabel));\n    }\n    append(element) {\n        const result = dom.append(this.actionsElement, element);\n        this._hasContent = true;\n        return result;\n    }\n};\nEditorHoverStatusBar = __decorate([\n    __param(0, IKeybindingService)\n], EditorHoverStatusBar);\nclass ContentHoverComputer {\n    constructor(_editor, _participants) {\n        this._editor = _editor;\n        this._participants = _participants;\n        this._anchor = null;\n        this._shouldFocus = false;\n    }\n    get anchor() { return this._anchor; }\n    set anchor(value) { this._anchor = value; }\n    get shouldFocus() { return this._shouldFocus; }\n    set shouldFocus(value) { this._shouldFocus = value; }\n    static _getLineDecorations(editor, anchor) {\n        if (anchor.type !== 1 /* Range */) {\n            return [];\n        }\n        const model = editor.getModel();\n        const lineNumber = anchor.range.startLineNumber;\n        const maxColumn = model.getLineMaxColumn(lineNumber);\n        return editor.getLineDecorations(lineNumber).filter((d) => {\n            if (d.options.isWholeLine) {\n                return true;\n            }\n            const startColumn = (d.range.startLineNumber === lineNumber) ? d.range.startColumn : 1;\n            const endColumn = (d.range.endLineNumber === lineNumber) ? d.range.endColumn : maxColumn;\n            if (d.options.showIfCollapsed) {\n                // Relax check around `showIfCollapsed` decorations to also include +/- 1 character\n                if (startColumn > anchor.range.startColumn + 1 || anchor.range.endColumn - 1 > endColumn) {\n                    return false;\n                }\n            }\n            else {\n                if (startColumn > anchor.range.startColumn || anchor.range.endColumn > endColumn) {\n                    return false;\n                }\n            }\n            return true;\n        });\n    }\n    computeAsync(token) {\n        const anchor = this._anchor;\n        if (!this._editor.hasModel() || !anchor) {\n            return AsyncIterableObject.EMPTY;\n        }\n        const lineDecorations = ContentHoverComputer._getLineDecorations(this._editor, anchor);\n        return AsyncIterableObject.merge(this._participants.map((participant) => {\n            if (!participant.computeAsync) {\n                return AsyncIterableObject.EMPTY;\n            }\n            return participant.computeAsync(anchor, lineDecorations, token);\n        }));\n    }\n    computeSync() {\n        if (!this._editor.hasModel() || !this._anchor) {\n            return [];\n        }\n        const lineDecorations = ContentHoverComputer._getLineDecorations(this._editor, this._anchor);\n        let result = [];\n        for (const participant of this._participants) {\n            result = result.concat(participant.computeSync(this._anchor, lineDecorations));\n        }\n        return coalesce(result);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}