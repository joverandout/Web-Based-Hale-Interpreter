{"ast":null,"code":"import { Emitter, PauseableEmitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { isUndefinedOrNull } from '../../../base/common/types.js';\nimport { InMemoryStorageDatabase, Storage } from '../../../base/parts/storage/common/storage.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nconst TARGET_KEY = '__$__targetStorageMarker';\nexport const IStorageService = createDecorator('storageService');\nexport var WillSaveStateReason;\n\n(function (WillSaveStateReason) {\n  /**\n   * No specific reason to save state.\n   */\n  WillSaveStateReason[WillSaveStateReason[\"NONE\"] = 0] = \"NONE\";\n  /**\n   * A hint that the workbench is about to shutdown.\n   */\n\n  WillSaveStateReason[WillSaveStateReason[\"SHUTDOWN\"] = 1] = \"SHUTDOWN\";\n})(WillSaveStateReason || (WillSaveStateReason = {}));\n\nexport class AbstractStorageService extends Disposable {\n  constructor(options = {\n    flushInterval: AbstractStorageService.DEFAULT_FLUSH_INTERVAL\n  }) {\n    super();\n    this.options = options;\n    this._onDidChangeValue = this._register(new PauseableEmitter());\n    this._onDidChangeTarget = this._register(new PauseableEmitter());\n    this._onWillSaveState = this._register(new Emitter());\n    this.onWillSaveState = this._onWillSaveState.event;\n    this._workspaceKeyTargets = undefined;\n    this._globalKeyTargets = undefined;\n  }\n\n  emitDidChangeValue(scope, key) {\n    // Specially handle `TARGET_KEY`\n    if (key === TARGET_KEY) {\n      // Clear our cached version which is now out of date\n      if (scope === 0\n      /* GLOBAL */\n      ) {\n        this._globalKeyTargets = undefined;\n      } else if (scope === 1\n      /* WORKSPACE */\n      ) {\n        this._workspaceKeyTargets = undefined;\n      } // Emit as `didChangeTarget` event\n\n\n      this._onDidChangeTarget.fire({\n        scope\n      });\n    } // Emit any other key to outside\n    else {\n      this._onDidChangeValue.fire({\n        scope,\n        key,\n        target: this.getKeyTargets(scope)[key]\n      });\n    }\n  }\n\n  get(key, scope, fallbackValue) {\n    var _a;\n\n    return (_a = this.getStorage(scope)) === null || _a === void 0 ? void 0 : _a.get(key, fallbackValue);\n  }\n\n  getBoolean(key, scope, fallbackValue) {\n    var _a;\n\n    return (_a = this.getStorage(scope)) === null || _a === void 0 ? void 0 : _a.getBoolean(key, fallbackValue);\n  }\n\n  getNumber(key, scope, fallbackValue) {\n    var _a;\n\n    return (_a = this.getStorage(scope)) === null || _a === void 0 ? void 0 : _a.getNumber(key, fallbackValue);\n  }\n\n  store(key, value, scope, target) {\n    // We remove the key for undefined/null values\n    if (isUndefinedOrNull(value)) {\n      this.remove(key, scope);\n      return;\n    } // Update our datastructures but send events only after\n\n\n    this.withPausedEmitters(() => {\n      var _a; // Update key-target map\n\n\n      this.updateKeyTarget(key, scope, target); // Store actual value\n\n      (_a = this.getStorage(scope)) === null || _a === void 0 ? void 0 : _a.set(key, value);\n    });\n  }\n\n  remove(key, scope) {\n    // Update our datastructures but send events only after\n    this.withPausedEmitters(() => {\n      var _a; // Update key-target map\n\n\n      this.updateKeyTarget(key, scope, undefined); // Remove actual key\n\n      (_a = this.getStorage(scope)) === null || _a === void 0 ? void 0 : _a.delete(key);\n    });\n  }\n\n  withPausedEmitters(fn) {\n    // Pause emitters\n    this._onDidChangeValue.pause();\n\n    this._onDidChangeTarget.pause();\n\n    try {\n      fn();\n    } finally {\n      // Resume emitters\n      this._onDidChangeValue.resume();\n\n      this._onDidChangeTarget.resume();\n    }\n  }\n\n  updateKeyTarget(key, scope, target) {\n    var _a, _b; // Add\n\n\n    const keyTargets = this.getKeyTargets(scope);\n\n    if (typeof target === 'number') {\n      if (keyTargets[key] !== target) {\n        keyTargets[key] = target;\n        (_a = this.getStorage(scope)) === null || _a === void 0 ? void 0 : _a.set(TARGET_KEY, JSON.stringify(keyTargets));\n      }\n    } // Remove\n    else {\n      if (typeof keyTargets[key] === 'number') {\n        delete keyTargets[key];\n        (_b = this.getStorage(scope)) === null || _b === void 0 ? void 0 : _b.set(TARGET_KEY, JSON.stringify(keyTargets));\n      }\n    }\n  }\n\n  get workspaceKeyTargets() {\n    if (!this._workspaceKeyTargets) {\n      this._workspaceKeyTargets = this.loadKeyTargets(1\n      /* WORKSPACE */\n      );\n    }\n\n    return this._workspaceKeyTargets;\n  }\n\n  get globalKeyTargets() {\n    if (!this._globalKeyTargets) {\n      this._globalKeyTargets = this.loadKeyTargets(0\n      /* GLOBAL */\n      );\n    }\n\n    return this._globalKeyTargets;\n  }\n\n  getKeyTargets(scope) {\n    return scope === 0\n    /* GLOBAL */\n    ? this.globalKeyTargets : this.workspaceKeyTargets;\n  }\n\n  loadKeyTargets(scope) {\n    const keysRaw = this.get(TARGET_KEY, scope);\n\n    if (keysRaw) {\n      try {\n        return JSON.parse(keysRaw);\n      } catch (error) {// Fail gracefully\n      }\n    }\n\n    return Object.create(null);\n  }\n\n}\nAbstractStorageService.DEFAULT_FLUSH_INTERVAL = 60 * 1000; // every minute\n\nexport class InMemoryStorageService extends AbstractStorageService {\n  constructor() {\n    super();\n    this.globalStorage = this._register(new Storage(new InMemoryStorageDatabase()));\n    this.workspaceStorage = this._register(new Storage(new InMemoryStorageDatabase()));\n\n    this._register(this.workspaceStorage.onDidChangeStorage(key => this.emitDidChangeValue(1\n    /* WORKSPACE */\n    , key)));\n\n    this._register(this.globalStorage.onDidChangeStorage(key => this.emitDidChangeValue(0\n    /* GLOBAL */\n    , key)));\n  }\n\n  getStorage(scope) {\n    return scope === 0\n    /* GLOBAL */\n    ? this.globalStorage : this.workspaceStorage;\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/platform/storage/common/storage.js"],"names":["Emitter","PauseableEmitter","Disposable","isUndefinedOrNull","InMemoryStorageDatabase","Storage","createDecorator","TARGET_KEY","IStorageService","WillSaveStateReason","AbstractStorageService","constructor","options","flushInterval","DEFAULT_FLUSH_INTERVAL","_onDidChangeValue","_register","_onDidChangeTarget","_onWillSaveState","onWillSaveState","event","_workspaceKeyTargets","undefined","_globalKeyTargets","emitDidChangeValue","scope","key","fire","target","getKeyTargets","get","fallbackValue","_a","getStorage","getBoolean","getNumber","store","value","remove","withPausedEmitters","updateKeyTarget","set","delete","fn","pause","resume","_b","keyTargets","JSON","stringify","workspaceKeyTargets","loadKeyTargets","globalKeyTargets","keysRaw","parse","error","Object","create","InMemoryStorageService","globalStorage","workspaceStorage","onDidChangeStorage"],"mappings":"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","sourcesContent":["import { Emitter, PauseableEmitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { isUndefinedOrNull } from '../../../base/common/types.js';\nimport { InMemoryStorageDatabase, Storage } from '../../../base/parts/storage/common/storage.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nconst TARGET_KEY = '__$__targetStorageMarker';\nexport const IStorageService = createDecorator('storageService');\nexport var WillSaveStateReason;\n(function (WillSaveStateReason) {\n    /**\n     * No specific reason to save state.\n     */\n    WillSaveStateReason[WillSaveStateReason[\"NONE\"] = 0] = \"NONE\";\n    /**\n     * A hint that the workbench is about to shutdown.\n     */\n    WillSaveStateReason[WillSaveStateReason[\"SHUTDOWN\"] = 1] = \"SHUTDOWN\";\n})(WillSaveStateReason || (WillSaveStateReason = {}));\nexport class AbstractStorageService extends Disposable {\n    constructor(options = { flushInterval: AbstractStorageService.DEFAULT_FLUSH_INTERVAL }) {\n        super();\n        this.options = options;\n        this._onDidChangeValue = this._register(new PauseableEmitter());\n        this._onDidChangeTarget = this._register(new PauseableEmitter());\n        this._onWillSaveState = this._register(new Emitter());\n        this.onWillSaveState = this._onWillSaveState.event;\n        this._workspaceKeyTargets = undefined;\n        this._globalKeyTargets = undefined;\n    }\n    emitDidChangeValue(scope, key) {\n        // Specially handle `TARGET_KEY`\n        if (key === TARGET_KEY) {\n            // Clear our cached version which is now out of date\n            if (scope === 0 /* GLOBAL */) {\n                this._globalKeyTargets = undefined;\n            }\n            else if (scope === 1 /* WORKSPACE */) {\n                this._workspaceKeyTargets = undefined;\n            }\n            // Emit as `didChangeTarget` event\n            this._onDidChangeTarget.fire({ scope });\n        }\n        // Emit any other key to outside\n        else {\n            this._onDidChangeValue.fire({ scope, key, target: this.getKeyTargets(scope)[key] });\n        }\n    }\n    get(key, scope, fallbackValue) {\n        var _a;\n        return (_a = this.getStorage(scope)) === null || _a === void 0 ? void 0 : _a.get(key, fallbackValue);\n    }\n    getBoolean(key, scope, fallbackValue) {\n        var _a;\n        return (_a = this.getStorage(scope)) === null || _a === void 0 ? void 0 : _a.getBoolean(key, fallbackValue);\n    }\n    getNumber(key, scope, fallbackValue) {\n        var _a;\n        return (_a = this.getStorage(scope)) === null || _a === void 0 ? void 0 : _a.getNumber(key, fallbackValue);\n    }\n    store(key, value, scope, target) {\n        // We remove the key for undefined/null values\n        if (isUndefinedOrNull(value)) {\n            this.remove(key, scope);\n            return;\n        }\n        // Update our datastructures but send events only after\n        this.withPausedEmitters(() => {\n            var _a;\n            // Update key-target map\n            this.updateKeyTarget(key, scope, target);\n            // Store actual value\n            (_a = this.getStorage(scope)) === null || _a === void 0 ? void 0 : _a.set(key, value);\n        });\n    }\n    remove(key, scope) {\n        // Update our datastructures but send events only after\n        this.withPausedEmitters(() => {\n            var _a;\n            // Update key-target map\n            this.updateKeyTarget(key, scope, undefined);\n            // Remove actual key\n            (_a = this.getStorage(scope)) === null || _a === void 0 ? void 0 : _a.delete(key);\n        });\n    }\n    withPausedEmitters(fn) {\n        // Pause emitters\n        this._onDidChangeValue.pause();\n        this._onDidChangeTarget.pause();\n        try {\n            fn();\n        }\n        finally {\n            // Resume emitters\n            this._onDidChangeValue.resume();\n            this._onDidChangeTarget.resume();\n        }\n    }\n    updateKeyTarget(key, scope, target) {\n        var _a, _b;\n        // Add\n        const keyTargets = this.getKeyTargets(scope);\n        if (typeof target === 'number') {\n            if (keyTargets[key] !== target) {\n                keyTargets[key] = target;\n                (_a = this.getStorage(scope)) === null || _a === void 0 ? void 0 : _a.set(TARGET_KEY, JSON.stringify(keyTargets));\n            }\n        }\n        // Remove\n        else {\n            if (typeof keyTargets[key] === 'number') {\n                delete keyTargets[key];\n                (_b = this.getStorage(scope)) === null || _b === void 0 ? void 0 : _b.set(TARGET_KEY, JSON.stringify(keyTargets));\n            }\n        }\n    }\n    get workspaceKeyTargets() {\n        if (!this._workspaceKeyTargets) {\n            this._workspaceKeyTargets = this.loadKeyTargets(1 /* WORKSPACE */);\n        }\n        return this._workspaceKeyTargets;\n    }\n    get globalKeyTargets() {\n        if (!this._globalKeyTargets) {\n            this._globalKeyTargets = this.loadKeyTargets(0 /* GLOBAL */);\n        }\n        return this._globalKeyTargets;\n    }\n    getKeyTargets(scope) {\n        return scope === 0 /* GLOBAL */ ? this.globalKeyTargets : this.workspaceKeyTargets;\n    }\n    loadKeyTargets(scope) {\n        const keysRaw = this.get(TARGET_KEY, scope);\n        if (keysRaw) {\n            try {\n                return JSON.parse(keysRaw);\n            }\n            catch (error) {\n                // Fail gracefully\n            }\n        }\n        return Object.create(null);\n    }\n}\nAbstractStorageService.DEFAULT_FLUSH_INTERVAL = 60 * 1000; // every minute\nexport class InMemoryStorageService extends AbstractStorageService {\n    constructor() {\n        super();\n        this.globalStorage = this._register(new Storage(new InMemoryStorageDatabase()));\n        this.workspaceStorage = this._register(new Storage(new InMemoryStorageDatabase()));\n        this._register(this.workspaceStorage.onDidChangeStorage(key => this.emitDidChangeValue(1 /* WORKSPACE */, key)));\n        this._register(this.globalStorage.onDidChangeStorage(key => this.emitDidChangeValue(0 /* GLOBAL */, key)));\n    }\n    getStorage(scope) {\n        return scope === 0 /* GLOBAL */ ? this.globalStorage : this.workspaceStorage;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}