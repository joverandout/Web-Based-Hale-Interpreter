{"ast":null,"code":"import * as React from 'react';\n/**\n * Utilites such as `getFocusedRouteNameFromRoute` need to access state.\n * So we need a way to suppress the warning for those use cases.\n * This is fine since they are internal utilities and this is not public API.\n */\n\nexport const CHILD_STATE = Symbol('CHILD_STATE');\n/**\n * Hook to cache route props for each screen in the navigator.\n * This lets add warnings and modifications to the route object but keep references between renders.\n */\n\nexport default function useRouteCache(routes) {\n  // Cache object which holds route objects for each screen\n  const cache = React.useMemo(() => ({\n    current: new Map()\n  }), []);\n\n  if (process.env.NODE_ENV === 'production') {\n    // We don't want the overhead of creating extra maps every render in prod\n    return routes;\n  }\n\n  cache.current = routes.reduce((acc, route) => {\n    const previous = cache.current.get(route);\n\n    if (previous) {\n      // If a cached route object already exists, reuse it\n      acc.set(route, previous);\n    } else {\n      const {\n        state,\n        ...proxy\n      } = route;\n      Object.defineProperty(proxy, CHILD_STATE, {\n        enumerable: false,\n        value: state\n      });\n      acc.set(route, proxy);\n    }\n\n    return acc;\n  }, new Map());\n  return Array.from(cache.current.values());\n}","map":{"version":3,"sources":["useRouteCache.tsx"],"names":["CHILD_STATE","Symbol","cache","current","process","previous","acc","proxy","Object","enumerable","value","state","Array"],"mappings":"AAKA,OAAO,KAAP,KAAA,MAAA,OAAA;AAMA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMA,WAAW,GAAGC,MAAM,CAA1B,aAA0B,CAA1B;AAEP;AACA;AACA;AACA;;AACA,eAAe,SAAA,aAAA,CAAA,MAAA,EAEb;AACA;AACA,QAAMC,KAAK,GAAG,KAAK,CAAL,OAAA,CAAc,OAAO;AAAEC,IAAAA,OAAO,EAAE,IAAA,GAAA;AAAX,GAAP,CAAd,EAAd,EAAc,CAAd;;AAEA,MAAIC,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,KAAJ,YAAA,EAA2C;AACzC;AACA,WAAA,MAAA;AACD;;AAEDF,EAAAA,KAAK,CAALA,OAAAA,GAAgB,MAAM,CAAN,MAAA,CAAc,CAAA,GAAA,EAAA,KAAA,KAAgB;AAC5C,UAAMG,QAAQ,GAAGH,KAAK,CAALA,OAAAA,CAAAA,GAAAA,CAAjB,KAAiBA,CAAjB;;AAEA,QAAA,QAAA,EAAc;AACZ;AACAI,MAAAA,GAAG,CAAHA,GAAAA,CAAAA,KAAAA,EAAAA,QAAAA;AAFF,KAAA,MAGO;AACL,YAAM;AAAA,QAAA,KAAA;AAAS,WAAGC;AAAZ,UAAN,KAAA;AAEAC,MAAAA,MAAM,CAANA,cAAAA,CAAAA,KAAAA,EAAAA,WAAAA,EAA0C;AACxCC,QAAAA,UAAU,EAD8B,KAAA;AAExCC,QAAAA,KAAK,EAAEC;AAFiC,OAA1CH;AAKAF,MAAAA,GAAG,CAAHA,GAAAA,CAAAA,KAAAA,EAAAA,KAAAA;AACD;;AAED,WAAA,GAAA;AAjBc,GAAA,EAkBb,IAlBHJ,GAkBG,EAlBa,CAAhBA;AAoBA,SAAOU,KAAK,CAALA,IAAAA,CAAWV,KAAK,CAALA,OAAAA,CAAlB,MAAkBA,EAAXU,CAAP;AACD","sourcesContent":["import type {\n  NavigationState,\n  ParamListBase,\n  Route,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport type { RouteProp } from './types';\n\ntype RouteCache = Map<Route<string>, RouteProp<ParamListBase>>;\n\n/**\n * Utilites such as `getFocusedRouteNameFromRoute` need to access state.\n * So we need a way to suppress the warning for those use cases.\n * This is fine since they are internal utilities and this is not public API.\n */\nexport const CHILD_STATE = Symbol('CHILD_STATE');\n\n/**\n * Hook to cache route props for each screen in the navigator.\n * This lets add warnings and modifications to the route object but keep references between renders.\n */\nexport default function useRouteCache<State extends NavigationState>(\n  routes: State['routes']\n) {\n  // Cache object which holds route objects for each screen\n  const cache = React.useMemo(() => ({ current: new Map() as RouteCache }), []);\n\n  if (process.env.NODE_ENV === 'production') {\n    // We don't want the overhead of creating extra maps every render in prod\n    return routes;\n  }\n\n  cache.current = routes.reduce((acc, route) => {\n    const previous = cache.current.get(route);\n\n    if (previous) {\n      // If a cached route object already exists, reuse it\n      acc.set(route, previous);\n    } else {\n      const { state, ...proxy } = route;\n\n      Object.defineProperty(proxy, CHILD_STATE, {\n        enumerable: false,\n        value: state,\n      });\n\n      acc.set(route, proxy);\n    }\n\n    return acc;\n  }, new Map() as RouteCache);\n\n  return Array.from(cache.current.values());\n}\n"]},"metadata":{},"sourceType":"module"}