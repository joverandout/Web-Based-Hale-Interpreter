{"ast":null,"code":"/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n// src/basic-languages/fsharp/fsharp.ts\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"(*\", \"*)\"]\n  },\n  brackets: [[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"]],\n  autoClosingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }],\n  surroundingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*//\\\\s*#region\\\\b|^\\\\s*\\\\(\\\\*\\\\s*#region(.*)\\\\*\\\\)\"),\n      end: new RegExp(\"^\\\\s*//\\\\s*#endregion\\\\b|^\\\\s*\\\\(\\\\*\\\\s*#endregion\\\\s*\\\\*\\\\)\")\n    }\n  }\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".fs\",\n  keywords: [\"abstract\", \"and\", \"atomic\", \"as\", \"assert\", \"asr\", \"base\", \"begin\", \"break\", \"checked\", \"component\", \"const\", \"constraint\", \"constructor\", \"continue\", \"class\", \"default\", \"delegate\", \"do\", \"done\", \"downcast\", \"downto\", \"elif\", \"else\", \"end\", \"exception\", \"eager\", \"event\", \"external\", \"extern\", \"false\", \"finally\", \"for\", \"fun\", \"function\", \"fixed\", \"functor\", \"global\", \"if\", \"in\", \"include\", \"inherit\", \"inline\", \"interface\", \"internal\", \"land\", \"lor\", \"lsl\", \"lsr\", \"lxor\", \"lazy\", \"let\", \"match\", \"member\", \"mod\", \"module\", \"mutable\", \"namespace\", \"method\", \"mixin\", \"new\", \"not\", \"null\", \"of\", \"open\", \"or\", \"object\", \"override\", \"private\", \"parallel\", \"process\", \"protected\", \"pure\", \"public\", \"rec\", \"return\", \"static\", \"sealed\", \"struct\", \"sig\", \"then\", \"to\", \"true\", \"tailcall\", \"trait\", \"try\", \"type\", \"upcast\", \"use\", \"val\", \"void\", \"virtual\", \"volatile\", \"when\", \"while\", \"with\", \"yield\"],\n  symbols: /[=><!~?:&|+\\-*\\^%;\\.,\\/]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  integersuffix: /[uU]?[yslnLI]?/,\n  floatsuffix: /[fFmM]?/,\n  tokenizer: {\n    root: [[/[a-zA-Z_]\\w*/, {\n      cases: {\n        \"@keywords\": {\n          token: \"keyword.$0\"\n        },\n        \"@default\": \"identifier\"\n      }\n    }], {\n      include: \"@whitespace\"\n    }, [/\\[<.*>\\]/, \"annotation\"], [/^#(if|else|endif)/, \"keyword\"], [/[{}()\\[\\]]/, \"@brackets\"], [/[<>](?!@symbols)/, \"@brackets\"], [/@symbols/, \"delimiter\"], [/\\d*\\d+[eE]([\\-+]?\\d+)?(@floatsuffix)/, \"number.float\"], [/\\d*\\.\\d+([eE][\\-+]?\\d+)?(@floatsuffix)/, \"number.float\"], [/0x[0-9a-fA-F]+LF/, \"number.float\"], [/0x[0-9a-fA-F]+(@integersuffix)/, \"number.hex\"], [/0b[0-1]+(@integersuffix)/, \"number.bin\"], [/\\d+(@integersuffix)/, \"number\"], [/[;,.]/, \"delimiter\"], [/\"([^\"\\\\]|\\\\.)*$/, \"string.invalid\"], [/\"\"\"/, \"string\", '@string.\"\"\"'], [/\"/, \"string\", '@string.\"'], [/\\@\"/, {\n      token: \"string.quote\",\n      next: \"@litstring\"\n    }], [/'[^\\\\']'B?/, \"string\"], [/(')(@escapes)(')/, [\"string\", \"string.escape\", \"string\"]], [/'/, \"string.invalid\"]],\n    whitespace: [[/[ \\t\\r\\n]+/, \"\"], [/\\(\\*(?!\\))/, \"comment\", \"@comment\"], [/\\/\\/.*$/, \"comment\"]],\n    comment: [[/[^*(]+/, \"comment\"], [/\\*\\)/, \"comment\", \"@pop\"], [/\\*/, \"comment\"], [/\\(\\*\\)/, \"comment\"], [/\\(/, \"comment\"]],\n    string: [[/[^\\\\\"]+/, \"string\"], [/@escapes/, \"string.escape\"], [/\\\\./, \"string.escape.invalid\"], [/(\"\"\"|\"B?)/, {\n      cases: {\n        \"$#==$S2\": {\n          token: \"string\",\n          next: \"@pop\"\n        },\n        \"@default\": \"string\"\n      }\n    }]],\n    litstring: [[/[^\"]+/, \"string\"], [/\"\"/, \"string.escape\"], [/\"/, {\n      token: \"string.quote\",\n      next: \"@pop\"\n    }]]\n  }\n};\nexport { conf, language };","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/basic-languages/fsharp/fsharp.js"],"names":["conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","folding","markers","start","RegExp","end","language","defaultToken","tokenPostfix","keywords","symbols","escapes","integersuffix","floatsuffix","tokenizer","root","cases","token","include","next","whitespace","comment","string","litstring"],"mappings":"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","sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/fsharp/fsharp.ts\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"(*\", \"*)\"]\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"]\n  ],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"' }\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" }\n  ],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*//\\\\s*#region\\\\b|^\\\\s*\\\\(\\\\*\\\\s*#region(.*)\\\\*\\\\)\"),\n      end: new RegExp(\"^\\\\s*//\\\\s*#endregion\\\\b|^\\\\s*\\\\(\\\\*\\\\s*#endregion\\\\s*\\\\*\\\\)\")\n    }\n  }\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".fs\",\n  keywords: [\n    \"abstract\",\n    \"and\",\n    \"atomic\",\n    \"as\",\n    \"assert\",\n    \"asr\",\n    \"base\",\n    \"begin\",\n    \"break\",\n    \"checked\",\n    \"component\",\n    \"const\",\n    \"constraint\",\n    \"constructor\",\n    \"continue\",\n    \"class\",\n    \"default\",\n    \"delegate\",\n    \"do\",\n    \"done\",\n    \"downcast\",\n    \"downto\",\n    \"elif\",\n    \"else\",\n    \"end\",\n    \"exception\",\n    \"eager\",\n    \"event\",\n    \"external\",\n    \"extern\",\n    \"false\",\n    \"finally\",\n    \"for\",\n    \"fun\",\n    \"function\",\n    \"fixed\",\n    \"functor\",\n    \"global\",\n    \"if\",\n    \"in\",\n    \"include\",\n    \"inherit\",\n    \"inline\",\n    \"interface\",\n    \"internal\",\n    \"land\",\n    \"lor\",\n    \"lsl\",\n    \"lsr\",\n    \"lxor\",\n    \"lazy\",\n    \"let\",\n    \"match\",\n    \"member\",\n    \"mod\",\n    \"module\",\n    \"mutable\",\n    \"namespace\",\n    \"method\",\n    \"mixin\",\n    \"new\",\n    \"not\",\n    \"null\",\n    \"of\",\n    \"open\",\n    \"or\",\n    \"object\",\n    \"override\",\n    \"private\",\n    \"parallel\",\n    \"process\",\n    \"protected\",\n    \"pure\",\n    \"public\",\n    \"rec\",\n    \"return\",\n    \"static\",\n    \"sealed\",\n    \"struct\",\n    \"sig\",\n    \"then\",\n    \"to\",\n    \"true\",\n    \"tailcall\",\n    \"trait\",\n    \"try\",\n    \"type\",\n    \"upcast\",\n    \"use\",\n    \"val\",\n    \"void\",\n    \"virtual\",\n    \"volatile\",\n    \"when\",\n    \"while\",\n    \"with\",\n    \"yield\"\n  ],\n  symbols: /[=><!~?:&|+\\-*\\^%;\\.,\\/]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  integersuffix: /[uU]?[yslnLI]?/,\n  floatsuffix: /[fFmM]?/,\n  tokenizer: {\n    root: [\n      [\n        /[a-zA-Z_]\\w*/,\n        {\n          cases: {\n            \"@keywords\": { token: \"keyword.$0\" },\n            \"@default\": \"identifier\"\n          }\n        }\n      ],\n      { include: \"@whitespace\" },\n      [/\\[<.*>\\]/, \"annotation\"],\n      [/^#(if|else|endif)/, \"keyword\"],\n      [/[{}()\\[\\]]/, \"@brackets\"],\n      [/[<>](?!@symbols)/, \"@brackets\"],\n      [/@symbols/, \"delimiter\"],\n      [/\\d*\\d+[eE]([\\-+]?\\d+)?(@floatsuffix)/, \"number.float\"],\n      [/\\d*\\.\\d+([eE][\\-+]?\\d+)?(@floatsuffix)/, \"number.float\"],\n      [/0x[0-9a-fA-F]+LF/, \"number.float\"],\n      [/0x[0-9a-fA-F]+(@integersuffix)/, \"number.hex\"],\n      [/0b[0-1]+(@integersuffix)/, \"number.bin\"],\n      [/\\d+(@integersuffix)/, \"number\"],\n      [/[;,.]/, \"delimiter\"],\n      [/\"([^\"\\\\]|\\\\.)*$/, \"string.invalid\"],\n      [/\"\"\"/, \"string\", '@string.\"\"\"'],\n      [/\"/, \"string\", '@string.\"'],\n      [/\\@\"/, { token: \"string.quote\", next: \"@litstring\" }],\n      [/'[^\\\\']'B?/, \"string\"],\n      [/(')(@escapes)(')/, [\"string\", \"string.escape\", \"string\"]],\n      [/'/, \"string.invalid\"]\n    ],\n    whitespace: [\n      [/[ \\t\\r\\n]+/, \"\"],\n      [/\\(\\*(?!\\))/, \"comment\", \"@comment\"],\n      [/\\/\\/.*$/, \"comment\"]\n    ],\n    comment: [\n      [/[^*(]+/, \"comment\"],\n      [/\\*\\)/, \"comment\", \"@pop\"],\n      [/\\*/, \"comment\"],\n      [/\\(\\*\\)/, \"comment\"],\n      [/\\(/, \"comment\"]\n    ],\n    string: [\n      [/[^\\\\\"]+/, \"string\"],\n      [/@escapes/, \"string.escape\"],\n      [/\\\\./, \"string.escape.invalid\"],\n      [\n        /(\"\"\"|\"B?)/,\n        {\n          cases: {\n            \"$#==$S2\": { token: \"string\", next: \"@pop\" },\n            \"@default\": \"string\"\n          }\n        }\n      ]\n    ],\n    litstring: [\n      [/[^\"]+/, \"string\"],\n      [/\"\"/, \"string.escape\"],\n      [/\"/, { token: \"string.quote\", next: \"@pop\" }]\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"]},"metadata":{},"sourceType":"module"}