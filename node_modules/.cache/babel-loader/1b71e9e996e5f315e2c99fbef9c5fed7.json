{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { FloatHorizontalRange } from '../../view/renderingContext.js';\nexport class RangeUtil {\n  static _createRange() {\n    if (!this._handyReadyRange) {\n      this._handyReadyRange = document.createRange();\n    }\n\n    return this._handyReadyRange;\n  }\n\n  static _detachRange(range, endNode) {\n    // Move range out of the span node, IE doesn't like having many ranges in\n    // the same spot and will act badly for lines containing dashes ('-')\n    range.selectNodeContents(endNode);\n  }\n\n  static _readClientRects(startElement, startOffset, endElement, endOffset, endNode) {\n    const range = this._createRange();\n\n    try {\n      range.setStart(startElement, startOffset);\n      range.setEnd(endElement, endOffset);\n      return range.getClientRects();\n    } catch (e) {\n      // This is life ...\n      return null;\n    } finally {\n      this._detachRange(range, endNode);\n    }\n  }\n\n  static _mergeAdjacentRanges(ranges) {\n    if (ranges.length === 1) {\n      // There is nothing to merge\n      return ranges;\n    }\n\n    ranges.sort(FloatHorizontalRange.compare);\n    const result = [];\n    let resultLen = 0;\n    let prev = ranges[0];\n\n    for (let i = 1, len = ranges.length; i < len; i++) {\n      const range = ranges[i];\n\n      if (prev.left + prev.width + 0.9\n      /* account for browser's rounding errors*/\n      >= range.left) {\n        prev.width = Math.max(prev.width, range.left + range.width - prev.left);\n      } else {\n        result[resultLen++] = prev;\n        prev = range;\n      }\n    }\n\n    result[resultLen++] = prev;\n    return result;\n  }\n\n  static _createHorizontalRangesFromClientRects(clientRects, clientRectDeltaLeft, clientRectScale) {\n    if (!clientRects || clientRects.length === 0) {\n      return null;\n    } // We go through FloatHorizontalRange because it has been observed in bi-di text\n    // that the clientRects are not coming in sorted from the browser\n\n\n    const result = [];\n\n    for (let i = 0, len = clientRects.length; i < len; i++) {\n      const clientRect = clientRects[i];\n      result[i] = new FloatHorizontalRange(Math.max(0, (clientRect.left - clientRectDeltaLeft) / clientRectScale), clientRect.width / clientRectScale);\n    }\n\n    return this._mergeAdjacentRanges(result);\n  }\n\n  static readHorizontalRanges(domNode, startChildIndex, startOffset, endChildIndex, endOffset, clientRectDeltaLeft, clientRectScale, endNode) {\n    // Panic check\n    const min = 0;\n    const max = domNode.children.length - 1;\n\n    if (min > max) {\n      return null;\n    }\n\n    startChildIndex = Math.min(max, Math.max(min, startChildIndex));\n    endChildIndex = Math.min(max, Math.max(min, endChildIndex));\n\n    if (startChildIndex === endChildIndex && startOffset === endOffset && startOffset === 0 && !domNode.children[startChildIndex].firstChild) {\n      // We must find the position at the beginning of a <span>\n      // To cover cases of empty <span>s, avoid using a range and use the <span>'s bounding box\n      const clientRects = domNode.children[startChildIndex].getClientRects();\n      return this._createHorizontalRangesFromClientRects(clientRects, clientRectDeltaLeft, clientRectScale);\n    } // If crossing over to a span only to select offset 0, then use the previous span's maximum offset\n    // Chrome is buggy and doesn't handle 0 offsets well sometimes.\n\n\n    if (startChildIndex !== endChildIndex) {\n      if (endChildIndex > 0 && endOffset === 0) {\n        endChildIndex--;\n        endOffset = 1073741824\n        /* MAX_SAFE_SMALL_INTEGER */\n        ;\n      }\n    }\n\n    let startElement = domNode.children[startChildIndex].firstChild;\n    let endElement = domNode.children[endChildIndex].firstChild;\n\n    if (!startElement || !endElement) {\n      // When having an empty <span> (without any text content), try to move to the previous <span>\n      if (!startElement && startOffset === 0 && startChildIndex > 0) {\n        startElement = domNode.children[startChildIndex - 1].firstChild;\n        startOffset = 1073741824\n        /* MAX_SAFE_SMALL_INTEGER */\n        ;\n      }\n\n      if (!endElement && endOffset === 0 && endChildIndex > 0) {\n        endElement = domNode.children[endChildIndex - 1].firstChild;\n        endOffset = 1073741824\n        /* MAX_SAFE_SMALL_INTEGER */\n        ;\n      }\n    }\n\n    if (!startElement || !endElement) {\n      return null;\n    }\n\n    startOffset = Math.min(startElement.textContent.length, Math.max(0, startOffset));\n    endOffset = Math.min(endElement.textContent.length, Math.max(0, endOffset));\n\n    const clientRects = this._readClientRects(startElement, startOffset, endElement, endOffset, endNode);\n\n    return this._createHorizontalRangesFromClientRects(clientRects, clientRectDeltaLeft, clientRectScale);\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/lines/rangeUtil.js"],"names":["FloatHorizontalRange","RangeUtil","_createRange","_handyReadyRange","document","createRange","_detachRange","range","endNode","selectNodeContents","_readClientRects","startElement","startOffset","endElement","endOffset","setStart","setEnd","getClientRects","e","_mergeAdjacentRanges","ranges","length","sort","compare","result","resultLen","prev","i","len","left","width","Math","max","_createHorizontalRangesFromClientRects","clientRects","clientRectDeltaLeft","clientRectScale","clientRect","readHorizontalRanges","domNode","startChildIndex","endChildIndex","min","children","firstChild","textContent"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { FloatHorizontalRange } from '../../view/renderingContext.js';\nexport class RangeUtil {\n    static _createRange() {\n        if (!this._handyReadyRange) {\n            this._handyReadyRange = document.createRange();\n        }\n        return this._handyReadyRange;\n    }\n    static _detachRange(range, endNode) {\n        // Move range out of the span node, IE doesn't like having many ranges in\n        // the same spot and will act badly for lines containing dashes ('-')\n        range.selectNodeContents(endNode);\n    }\n    static _readClientRects(startElement, startOffset, endElement, endOffset, endNode) {\n        const range = this._createRange();\n        try {\n            range.setStart(startElement, startOffset);\n            range.setEnd(endElement, endOffset);\n            return range.getClientRects();\n        }\n        catch (e) {\n            // This is life ...\n            return null;\n        }\n        finally {\n            this._detachRange(range, endNode);\n        }\n    }\n    static _mergeAdjacentRanges(ranges) {\n        if (ranges.length === 1) {\n            // There is nothing to merge\n            return ranges;\n        }\n        ranges.sort(FloatHorizontalRange.compare);\n        const result = [];\n        let resultLen = 0;\n        let prev = ranges[0];\n        for (let i = 1, len = ranges.length; i < len; i++) {\n            const range = ranges[i];\n            if (prev.left + prev.width + 0.9 /* account for browser's rounding errors*/ >= range.left) {\n                prev.width = Math.max(prev.width, range.left + range.width - prev.left);\n            }\n            else {\n                result[resultLen++] = prev;\n                prev = range;\n            }\n        }\n        result[resultLen++] = prev;\n        return result;\n    }\n    static _createHorizontalRangesFromClientRects(clientRects, clientRectDeltaLeft, clientRectScale) {\n        if (!clientRects || clientRects.length === 0) {\n            return null;\n        }\n        // We go through FloatHorizontalRange because it has been observed in bi-di text\n        // that the clientRects are not coming in sorted from the browser\n        const result = [];\n        for (let i = 0, len = clientRects.length; i < len; i++) {\n            const clientRect = clientRects[i];\n            result[i] = new FloatHorizontalRange(Math.max(0, (clientRect.left - clientRectDeltaLeft) / clientRectScale), clientRect.width / clientRectScale);\n        }\n        return this._mergeAdjacentRanges(result);\n    }\n    static readHorizontalRanges(domNode, startChildIndex, startOffset, endChildIndex, endOffset, clientRectDeltaLeft, clientRectScale, endNode) {\n        // Panic check\n        const min = 0;\n        const max = domNode.children.length - 1;\n        if (min > max) {\n            return null;\n        }\n        startChildIndex = Math.min(max, Math.max(min, startChildIndex));\n        endChildIndex = Math.min(max, Math.max(min, endChildIndex));\n        if (startChildIndex === endChildIndex && startOffset === endOffset && startOffset === 0 && !domNode.children[startChildIndex].firstChild) {\n            // We must find the position at the beginning of a <span>\n            // To cover cases of empty <span>s, avoid using a range and use the <span>'s bounding box\n            const clientRects = domNode.children[startChildIndex].getClientRects();\n            return this._createHorizontalRangesFromClientRects(clientRects, clientRectDeltaLeft, clientRectScale);\n        }\n        // If crossing over to a span only to select offset 0, then use the previous span's maximum offset\n        // Chrome is buggy and doesn't handle 0 offsets well sometimes.\n        if (startChildIndex !== endChildIndex) {\n            if (endChildIndex > 0 && endOffset === 0) {\n                endChildIndex--;\n                endOffset = 1073741824 /* MAX_SAFE_SMALL_INTEGER */;\n            }\n        }\n        let startElement = domNode.children[startChildIndex].firstChild;\n        let endElement = domNode.children[endChildIndex].firstChild;\n        if (!startElement || !endElement) {\n            // When having an empty <span> (without any text content), try to move to the previous <span>\n            if (!startElement && startOffset === 0 && startChildIndex > 0) {\n                startElement = domNode.children[startChildIndex - 1].firstChild;\n                startOffset = 1073741824 /* MAX_SAFE_SMALL_INTEGER */;\n            }\n            if (!endElement && endOffset === 0 && endChildIndex > 0) {\n                endElement = domNode.children[endChildIndex - 1].firstChild;\n                endOffset = 1073741824 /* MAX_SAFE_SMALL_INTEGER */;\n            }\n        }\n        if (!startElement || !endElement) {\n            return null;\n        }\n        startOffset = Math.min(startElement.textContent.length, Math.max(0, startOffset));\n        endOffset = Math.min(endElement.textContent.length, Math.max(0, endOffset));\n        const clientRects = this._readClientRects(startElement, startOffset, endElement, endOffset, endNode);\n        return this._createHorizontalRangesFromClientRects(clientRects, clientRectDeltaLeft, clientRectScale);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}