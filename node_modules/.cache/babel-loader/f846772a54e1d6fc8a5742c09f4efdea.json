{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { isNonEmptyArray } from '../../../../base/common/arrays.js';\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { CharacterSet } from '../../../common/core/characterClassifier.js';\nexport class CommitCharacterController {\n  constructor(editor, widget, accept) {\n    this._disposables = new DisposableStore();\n\n    this._disposables.add(widget.onDidShow(() => this._onItem(widget.getFocusedItem())));\n\n    this._disposables.add(widget.onDidFocus(this._onItem, this));\n\n    this._disposables.add(widget.onDidHide(this.reset, this));\n\n    this._disposables.add(editor.onWillType(text => {\n      if (this._active && !widget.isFrozen()) {\n        const ch = text.charCodeAt(text.length - 1);\n\n        if (this._active.acceptCharacters.has(ch) && editor.getOption(0\n        /* acceptSuggestionOnCommitCharacter */\n        )) {\n          accept(this._active.item);\n        }\n      }\n    }));\n  }\n\n  _onItem(selected) {\n    if (!selected || !isNonEmptyArray(selected.item.completion.commitCharacters)) {\n      // no item or no commit characters\n      this.reset();\n      return;\n    }\n\n    if (this._active && this._active.item.item === selected.item) {\n      // still the same item\n      return;\n    } // keep item and its commit characters\n\n\n    const acceptCharacters = new CharacterSet();\n\n    for (const ch of selected.item.completion.commitCharacters) {\n      if (ch.length > 0) {\n        acceptCharacters.add(ch.charCodeAt(0));\n      }\n    }\n\n    this._active = {\n      acceptCharacters,\n      item: selected\n    };\n  }\n\n  reset() {\n    this._active = undefined;\n  }\n\n  dispose() {\n    this._disposables.dispose();\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/contrib/suggest/browser/suggestCommitCharacters.js"],"names":["isNonEmptyArray","DisposableStore","CharacterSet","CommitCharacterController","constructor","editor","widget","accept","_disposables","add","onDidShow","_onItem","getFocusedItem","onDidFocus","onDidHide","reset","onWillType","text","_active","isFrozen","ch","charCodeAt","length","acceptCharacters","has","getOption","item","selected","completion","commitCharacters","undefined","dispose"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,eAAT,QAAgC,mCAAhC;AACA,SAASC,eAAT,QAAgC,sCAAhC;AACA,SAASC,YAAT,QAA6B,6CAA7B;AACA,OAAO,MAAMC,yBAAN,CAAgC;AACnCC,EAAAA,WAAW,CAACC,MAAD,EAASC,MAAT,EAAiBC,MAAjB,EAAyB;AAChC,SAAKC,YAAL,GAAoB,IAAIP,eAAJ,EAApB;;AACA,SAAKO,YAAL,CAAkBC,GAAlB,CAAsBH,MAAM,CAACI,SAAP,CAAiB,MAAM,KAAKC,OAAL,CAAaL,MAAM,CAACM,cAAP,EAAb,CAAvB,CAAtB;;AACA,SAAKJ,YAAL,CAAkBC,GAAlB,CAAsBH,MAAM,CAACO,UAAP,CAAkB,KAAKF,OAAvB,EAAgC,IAAhC,CAAtB;;AACA,SAAKH,YAAL,CAAkBC,GAAlB,CAAsBH,MAAM,CAACQ,SAAP,CAAiB,KAAKC,KAAtB,EAA6B,IAA7B,CAAtB;;AACA,SAAKP,YAAL,CAAkBC,GAAlB,CAAsBJ,MAAM,CAACW,UAAP,CAAkBC,IAAI,IAAI;AAC5C,UAAI,KAAKC,OAAL,IAAgB,CAACZ,MAAM,CAACa,QAAP,EAArB,EAAwC;AACpC,cAAMC,EAAE,GAAGH,IAAI,CAACI,UAAL,CAAgBJ,IAAI,CAACK,MAAL,GAAc,CAA9B,CAAX;;AACA,YAAI,KAAKJ,OAAL,CAAaK,gBAAb,CAA8BC,GAA9B,CAAkCJ,EAAlC,KAAyCf,MAAM,CAACoB,SAAP,CAAiB;AAAE;AAAnB,SAA7C,EAA0G;AACtGlB,UAAAA,MAAM,CAAC,KAAKW,OAAL,CAAaQ,IAAd,CAAN;AACH;AACJ;AACJ,KAPqB,CAAtB;AAQH;;AACDf,EAAAA,OAAO,CAACgB,QAAD,EAAW;AACd,QAAI,CAACA,QAAD,IAAa,CAAC3B,eAAe,CAAC2B,QAAQ,CAACD,IAAT,CAAcE,UAAd,CAAyBC,gBAA1B,CAAjC,EAA8E;AAC1E;AACA,WAAKd,KAAL;AACA;AACH;;AACD,QAAI,KAAKG,OAAL,IAAgB,KAAKA,OAAL,CAAaQ,IAAb,CAAkBA,IAAlB,KAA2BC,QAAQ,CAACD,IAAxD,EAA8D;AAC1D;AACA;AACH,KATa,CAUd;;;AACA,UAAMH,gBAAgB,GAAG,IAAIrB,YAAJ,EAAzB;;AACA,SAAK,MAAMkB,EAAX,IAAiBO,QAAQ,CAACD,IAAT,CAAcE,UAAd,CAAyBC,gBAA1C,EAA4D;AACxD,UAAIT,EAAE,CAACE,MAAH,GAAY,CAAhB,EAAmB;AACfC,QAAAA,gBAAgB,CAACd,GAAjB,CAAqBW,EAAE,CAACC,UAAH,CAAc,CAAd,CAArB;AACH;AACJ;;AACD,SAAKH,OAAL,GAAe;AAAEK,MAAAA,gBAAF;AAAoBG,MAAAA,IAAI,EAAEC;AAA1B,KAAf;AACH;;AACDZ,EAAAA,KAAK,GAAG;AACJ,SAAKG,OAAL,GAAeY,SAAf;AACH;;AACDC,EAAAA,OAAO,GAAG;AACN,SAAKvB,YAAL,CAAkBuB,OAAlB;AACH;;AAvCkC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { isNonEmptyArray } from '../../../../base/common/arrays.js';\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { CharacterSet } from '../../../common/core/characterClassifier.js';\nexport class CommitCharacterController {\n    constructor(editor, widget, accept) {\n        this._disposables = new DisposableStore();\n        this._disposables.add(widget.onDidShow(() => this._onItem(widget.getFocusedItem())));\n        this._disposables.add(widget.onDidFocus(this._onItem, this));\n        this._disposables.add(widget.onDidHide(this.reset, this));\n        this._disposables.add(editor.onWillType(text => {\n            if (this._active && !widget.isFrozen()) {\n                const ch = text.charCodeAt(text.length - 1);\n                if (this._active.acceptCharacters.has(ch) && editor.getOption(0 /* acceptSuggestionOnCommitCharacter */)) {\n                    accept(this._active.item);\n                }\n            }\n        }));\n    }\n    _onItem(selected) {\n        if (!selected || !isNonEmptyArray(selected.item.completion.commitCharacters)) {\n            // no item or no commit characters\n            this.reset();\n            return;\n        }\n        if (this._active && this._active.item.item === selected.item) {\n            // still the same item\n            return;\n        }\n        // keep item and its commit characters\n        const acceptCharacters = new CharacterSet();\n        for (const ch of selected.item.completion.commitCharacters) {\n            if (ch.length > 0) {\n                acceptCharacters.add(ch.charCodeAt(0));\n            }\n        }\n        this._active = { acceptCharacters, item: selected };\n    }\n    reset() {\n        this._active = undefined;\n    }\n    dispose() {\n        this._disposables.dispose();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}