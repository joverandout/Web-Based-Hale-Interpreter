{"ast":null,"code":"import * as React from 'react';\n/**\n * Hook to manage the event system used by the navigator to notify screens of various events.\n */\n\nexport default function useEventEmitter(listen) {\n  const listenRef = React.useRef(listen);\n  React.useEffect(() => {\n    listenRef.current = listen;\n  });\n  const listeners = React.useRef({});\n  const create = React.useCallback(target => {\n    const removeListener = (type, callback) => {\n      const callbacks = listeners.current[type] ? listeners.current[type][target] : undefined;\n\n      if (!callbacks) {\n        return;\n      }\n\n      const index = callbacks.indexOf(callback);\n      callbacks.splice(index, 1);\n    };\n\n    const addListener = (type, callback) => {\n      listeners.current[type] = listeners.current[type] || {};\n      listeners.current[type][target] = listeners.current[type][target] || [];\n      listeners.current[type][target].push(callback);\n      return () => removeListener(type, callback);\n    };\n\n    return {\n      addListener,\n      removeListener\n    };\n  }, []);\n  const emit = React.useCallback(_ref => {\n    var _items$target, _listenRef$current;\n\n    let {\n      type,\n      data,\n      target,\n      canPreventDefault\n    } = _ref;\n    const items = listeners.current[type] || {}; // Copy the current list of callbacks in case they are mutated during execution\n\n    const callbacks = target !== undefined ? (_items$target = items[target]) === null || _items$target === void 0 ? void 0 : _items$target.slice() : [].concat(...Object.keys(items).map(t => items[t])).filter((cb, i, self) => self.lastIndexOf(cb) === i);\n    const event = {\n      get type() {\n        return type;\n      }\n\n    };\n\n    if (target !== undefined) {\n      Object.defineProperty(event, 'target', {\n        enumerable: true,\n\n        get() {\n          return target;\n        }\n\n      });\n    }\n\n    if (data !== undefined) {\n      Object.defineProperty(event, 'data', {\n        enumerable: true,\n\n        get() {\n          return data;\n        }\n\n      });\n    }\n\n    if (canPreventDefault) {\n      let defaultPrevented = false;\n      Object.defineProperties(event, {\n        defaultPrevented: {\n          enumerable: true,\n\n          get() {\n            return defaultPrevented;\n          }\n\n        },\n        preventDefault: {\n          enumerable: true,\n\n          value() {\n            defaultPrevented = true;\n          }\n\n        }\n      });\n    }\n\n    (_listenRef$current = listenRef.current) === null || _listenRef$current === void 0 ? void 0 : _listenRef$current.call(listenRef, event);\n    callbacks === null || callbacks === void 0 ? void 0 : callbacks.forEach(cb => cb(event));\n    return event;\n  }, []);\n  return React.useMemo(() => ({\n    create,\n    emit\n  }), [create, emit]);\n}","map":{"version":3,"sources":["useEventEmitter.tsx"],"names":["listenRef","React","listeners","create","target","removeListener","callbacks","index","addListener","emit","canPreventDefault","items","Object","t","self","event","enumerable","get","data","defaultPrevented","preventDefault","value","cb"],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport type { EventArg, EventConsumer, EventEmitter } from './types';\n\nexport type NavigationEventEmitter<T extends Record<string, any>> =\n  EventEmitter<T> & {\n    create: (target: string) => EventConsumer<T>;\n  };\n\ntype Listeners = ((e: any) => void)[];\n\n/**\n * Hook to manage the event system used by the navigator to notify screens of various events.\n */\nexport default function useEventEmitter<T extends Record<string, any>>(\n  listen?: (e: any) => void\n): NavigationEventEmitter<T> {\n  const listenRef = React.useRef(listen);\n\n  React.useEffect(() => {\n    listenRef.current = listen;\n  });\n\n  const listeners = React.useRef<Record<string, Record<string, Listeners>>>({});\n\n  const create = React.useCallback((target: string) => {\n    const removeListener = (type: string, callback: (data: any) => void) => {\n      const callbacks = listeners.current[type]\n        ? listeners.current[type][target]\n        : undefined;\n\n      if (!callbacks) {\n        return;\n      }\n\n      const index = callbacks.indexOf(callback);\n\n      callbacks.splice(index, 1);\n    };\n\n    const addListener = (type: string, callback: (data: any) => void) => {\n      listeners.current[type] = listeners.current[type] || {};\n      listeners.current[type][target] = listeners.current[type][target] || [];\n      listeners.current[type][target].push(callback);\n\n      return () => removeListener(type, callback);\n    };\n\n    return {\n      addListener,\n      removeListener,\n    };\n  }, []);\n\n  const emit = React.useCallback(\n    ({\n      type,\n      data,\n      target,\n      canPreventDefault,\n    }: {\n      type: string;\n      data?: any;\n      target?: string;\n      canPreventDefault?: boolean;\n    }) => {\n      const items = listeners.current[type] || {};\n\n      // Copy the current list of callbacks in case they are mutated during execution\n      const callbacks =\n        target !== undefined\n          ? items[target]?.slice()\n          : ([] as Listeners)\n              .concat(...Object.keys(items).map((t) => items[t]))\n              .filter((cb, i, self) => self.lastIndexOf(cb) === i);\n\n      const event: EventArg<any, any, any> = {\n        get type() {\n          return type;\n        },\n      };\n\n      if (target !== undefined) {\n        Object.defineProperty(event, 'target', {\n          enumerable: true,\n          get() {\n            return target;\n          },\n        });\n      }\n\n      if (data !== undefined) {\n        Object.defineProperty(event, 'data', {\n          enumerable: true,\n          get() {\n            return data;\n          },\n        });\n      }\n\n      if (canPreventDefault) {\n        let defaultPrevented = false;\n\n        Object.defineProperties(event, {\n          defaultPrevented: {\n            enumerable: true,\n            get() {\n              return defaultPrevented;\n            },\n          },\n          preventDefault: {\n            enumerable: true,\n            value() {\n              defaultPrevented = true;\n            },\n          },\n        });\n      }\n\n      listenRef.current?.(event);\n\n      callbacks?.forEach((cb) => cb(event));\n\n      return event as any;\n    },\n    []\n  );\n\n  return React.useMemo(() => ({ create, emit }), [create, emit]);\n}\n"]},"metadata":{},"sourceType":"module"}