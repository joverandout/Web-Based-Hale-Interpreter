{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { LanguagesRegistry } from './languagesRegistry.js';\nimport { firstOrDefault } from '../../../base/common/arrays.js';\nimport { TokenizationRegistry } from '../languages.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nexport class LanguageService extends Disposable {\n  constructor(warnOnOverwrite = false) {\n    super();\n    this._onDidEncounterLanguage = this._register(new Emitter());\n    this.onDidEncounterLanguage = this._onDidEncounterLanguage.event;\n    this._onDidChange = this._register(new Emitter({\n      leakWarningThreshold: 200\n      /* https://github.com/microsoft/vscode/issues/119968 */\n\n    }));\n    this.onDidChange = this._onDidChange.event;\n    LanguageService.instanceCount++;\n    this._encounteredLanguages = new Set();\n    this._registry = this._register(new LanguagesRegistry(true, warnOnOverwrite));\n    this.languageIdCodec = this._registry.languageIdCodec;\n\n    this._register(this._registry.onDidChange(() => this._onDidChange.fire()));\n  }\n\n  dispose() {\n    LanguageService.instanceCount--;\n    super.dispose();\n  }\n\n  isRegisteredLanguageId(languageId) {\n    return this._registry.isRegisteredLanguageId(languageId);\n  }\n\n  getLanguageIdByLanguageName(languageName) {\n    return this._registry.getLanguageIdByLanguageName(languageName);\n  }\n\n  getLanguageIdByMimeType(mimeType) {\n    return this._registry.getLanguageIdByMimeType(mimeType);\n  }\n\n  guessLanguageIdByFilepathOrFirstLine(resource, firstLine) {\n    const languageIds = this._registry.guessLanguageIdByFilepathOrFirstLine(resource, firstLine);\n\n    return firstOrDefault(languageIds, null);\n  }\n\n  createById(languageId) {\n    return new LanguageSelection(this.onDidChange, () => {\n      return this._createAndGetLanguageIdentifier(languageId);\n    });\n  }\n\n  createByFilepathOrFirstLine(resource, firstLine) {\n    return new LanguageSelection(this.onDidChange, () => {\n      const languageId = this.guessLanguageIdByFilepathOrFirstLine(resource, firstLine);\n      return this._createAndGetLanguageIdentifier(languageId);\n    });\n  }\n\n  _createAndGetLanguageIdentifier(languageId) {\n    if (!languageId || !this.isRegisteredLanguageId(languageId)) {\n      // Fall back to plain text if language is unknown\n      languageId = PLAINTEXT_LANGUAGE_ID;\n    }\n\n    if (!this._encounteredLanguages.has(languageId)) {\n      this._encounteredLanguages.add(languageId); // Ensure tokenizers are created\n\n\n      TokenizationRegistry.getOrCreate(languageId); // Fire event\n\n      this._onDidEncounterLanguage.fire(languageId);\n    }\n\n    return languageId;\n  }\n\n}\nLanguageService.instanceCount = 0;\n\nclass LanguageSelection {\n  constructor(_onDidChangeLanguages, _selector) {\n    this._onDidChangeLanguages = _onDidChangeLanguages;\n    this._selector = _selector;\n    this._listener = null;\n    this._emitter = null;\n    this.languageId = this._selector();\n  }\n\n  _dispose() {\n    if (this._listener) {\n      this._listener.dispose();\n\n      this._listener = null;\n    }\n\n    if (this._emitter) {\n      this._emitter.dispose();\n\n      this._emitter = null;\n    }\n  }\n\n  get onDidChange() {\n    if (!this._listener) {\n      this._listener = this._onDidChangeLanguages(() => this._evaluate());\n    }\n\n    if (!this._emitter) {\n      this._emitter = new Emitter({\n        onLastListenerRemove: () => {\n          this._dispose();\n        }\n      });\n    }\n\n    return this._emitter.event;\n  }\n\n  _evaluate() {\n    const languageId = this._selector();\n\n    if (languageId === this.languageId) {\n      // no change\n      return;\n    }\n\n    this.languageId = languageId;\n\n    if (this._emitter) {\n      this._emitter.fire(this.languageId);\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/common/services/languageService.js"],"names":["Emitter","Disposable","LanguagesRegistry","firstOrDefault","TokenizationRegistry","PLAINTEXT_LANGUAGE_ID","LanguageService","constructor","warnOnOverwrite","_onDidEncounterLanguage","_register","onDidEncounterLanguage","event","_onDidChange","leakWarningThreshold","onDidChange","instanceCount","_encounteredLanguages","Set","_registry","languageIdCodec","fire","dispose","isRegisteredLanguageId","languageId","getLanguageIdByLanguageName","languageName","getLanguageIdByMimeType","mimeType","guessLanguageIdByFilepathOrFirstLine","resource","firstLine","languageIds","createById","LanguageSelection","_createAndGetLanguageIdentifier","createByFilepathOrFirstLine","has","add","getOrCreate","_onDidChangeLanguages","_selector","_listener","_emitter","_dispose","_evaluate","onLastListenerRemove"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { LanguagesRegistry } from './languagesRegistry.js';\nimport { firstOrDefault } from '../../../base/common/arrays.js';\nimport { TokenizationRegistry } from '../languages.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nexport class LanguageService extends Disposable {\n    constructor(warnOnOverwrite = false) {\n        super();\n        this._onDidEncounterLanguage = this._register(new Emitter());\n        this.onDidEncounterLanguage = this._onDidEncounterLanguage.event;\n        this._onDidChange = this._register(new Emitter({ leakWarningThreshold: 200 /* https://github.com/microsoft/vscode/issues/119968 */ }));\n        this.onDidChange = this._onDidChange.event;\n        LanguageService.instanceCount++;\n        this._encounteredLanguages = new Set();\n        this._registry = this._register(new LanguagesRegistry(true, warnOnOverwrite));\n        this.languageIdCodec = this._registry.languageIdCodec;\n        this._register(this._registry.onDidChange(() => this._onDidChange.fire()));\n    }\n    dispose() {\n        LanguageService.instanceCount--;\n        super.dispose();\n    }\n    isRegisteredLanguageId(languageId) {\n        return this._registry.isRegisteredLanguageId(languageId);\n    }\n    getLanguageIdByLanguageName(languageName) {\n        return this._registry.getLanguageIdByLanguageName(languageName);\n    }\n    getLanguageIdByMimeType(mimeType) {\n        return this._registry.getLanguageIdByMimeType(mimeType);\n    }\n    guessLanguageIdByFilepathOrFirstLine(resource, firstLine) {\n        const languageIds = this._registry.guessLanguageIdByFilepathOrFirstLine(resource, firstLine);\n        return firstOrDefault(languageIds, null);\n    }\n    createById(languageId) {\n        return new LanguageSelection(this.onDidChange, () => {\n            return this._createAndGetLanguageIdentifier(languageId);\n        });\n    }\n    createByFilepathOrFirstLine(resource, firstLine) {\n        return new LanguageSelection(this.onDidChange, () => {\n            const languageId = this.guessLanguageIdByFilepathOrFirstLine(resource, firstLine);\n            return this._createAndGetLanguageIdentifier(languageId);\n        });\n    }\n    _createAndGetLanguageIdentifier(languageId) {\n        if (!languageId || !this.isRegisteredLanguageId(languageId)) {\n            // Fall back to plain text if language is unknown\n            languageId = PLAINTEXT_LANGUAGE_ID;\n        }\n        if (!this._encounteredLanguages.has(languageId)) {\n            this._encounteredLanguages.add(languageId);\n            // Ensure tokenizers are created\n            TokenizationRegistry.getOrCreate(languageId);\n            // Fire event\n            this._onDidEncounterLanguage.fire(languageId);\n        }\n        return languageId;\n    }\n}\nLanguageService.instanceCount = 0;\nclass LanguageSelection {\n    constructor(_onDidChangeLanguages, _selector) {\n        this._onDidChangeLanguages = _onDidChangeLanguages;\n        this._selector = _selector;\n        this._listener = null;\n        this._emitter = null;\n        this.languageId = this._selector();\n    }\n    _dispose() {\n        if (this._listener) {\n            this._listener.dispose();\n            this._listener = null;\n        }\n        if (this._emitter) {\n            this._emitter.dispose();\n            this._emitter = null;\n        }\n    }\n    get onDidChange() {\n        if (!this._listener) {\n            this._listener = this._onDidChangeLanguages(() => this._evaluate());\n        }\n        if (!this._emitter) {\n            this._emitter = new Emitter({\n                onLastListenerRemove: () => {\n                    this._dispose();\n                }\n            });\n        }\n        return this._emitter.event;\n    }\n    _evaluate() {\n        const languageId = this._selector();\n        if (languageId === this.languageId) {\n            // no change\n            return;\n        }\n        this.languageId = languageId;\n        if (this._emitter) {\n            this._emitter.fire(this.languageId);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}