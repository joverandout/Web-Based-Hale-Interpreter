{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { Position } from '../../common/core/position.js';\nimport { Range } from '../../common/core/range.js';\nexport const _debugComposition = false;\nexport class TextAreaState {\n  constructor(value, selectionStart, selectionEnd, selectionStartPosition, selectionEndPosition) {\n    this.value = value;\n    this.selectionStart = selectionStart;\n    this.selectionEnd = selectionEnd;\n    this.selectionStartPosition = selectionStartPosition;\n    this.selectionEndPosition = selectionEndPosition;\n  }\n\n  toString() {\n    return `[ <${this.value}>, selectionStart: ${this.selectionStart}, selectionEnd: ${this.selectionEnd}]`;\n  }\n\n  static readFromTextArea(textArea) {\n    return new TextAreaState(textArea.getValue(), textArea.getSelectionStart(), textArea.getSelectionEnd(), null, null);\n  }\n\n  collapseSelection() {\n    return new TextAreaState(this.value, this.value.length, this.value.length, null, null);\n  }\n\n  writeToTextArea(reason, textArea, select) {\n    if (_debugComposition) {\n      console.log(`writeToTextArea ${reason}: ${this.toString()}`);\n    }\n\n    textArea.setValue(reason, this.value);\n\n    if (select) {\n      textArea.setSelectionRange(reason, this.selectionStart, this.selectionEnd);\n    }\n  }\n\n  deduceEditorPosition(offset) {\n    if (offset <= this.selectionStart) {\n      const str = this.value.substring(offset, this.selectionStart);\n      return this._finishDeduceEditorPosition(this.selectionStartPosition, str, -1);\n    }\n\n    if (offset >= this.selectionEnd) {\n      const str = this.value.substring(this.selectionEnd, offset);\n      return this._finishDeduceEditorPosition(this.selectionEndPosition, str, 1);\n    }\n\n    const str1 = this.value.substring(this.selectionStart, offset);\n\n    if (str1.indexOf(String.fromCharCode(8230)) === -1) {\n      return this._finishDeduceEditorPosition(this.selectionStartPosition, str1, 1);\n    }\n\n    const str2 = this.value.substring(offset, this.selectionEnd);\n    return this._finishDeduceEditorPosition(this.selectionEndPosition, str2, -1);\n  }\n\n  _finishDeduceEditorPosition(anchor, deltaText, signum) {\n    let lineFeedCnt = 0;\n    let lastLineFeedIndex = -1;\n\n    while ((lastLineFeedIndex = deltaText.indexOf('\\n', lastLineFeedIndex + 1)) !== -1) {\n      lineFeedCnt++;\n    }\n\n    return [anchor, signum * deltaText.length, lineFeedCnt];\n  }\n\n  static deduceInput(previousState, currentState, couldBeEmojiInput) {\n    if (!previousState) {\n      // This is the EMPTY state\n      return {\n        text: '',\n        replacePrevCharCnt: 0,\n        replaceNextCharCnt: 0,\n        positionDelta: 0\n      };\n    }\n\n    if (_debugComposition) {\n      console.log('------------------------deduceInput');\n      console.log(`PREVIOUS STATE: ${previousState.toString()}`);\n      console.log(`CURRENT STATE: ${currentState.toString()}`);\n    }\n\n    const prefixLength = Math.min(strings.commonPrefixLength(previousState.value, currentState.value), previousState.selectionStart, currentState.selectionStart);\n    const suffixLength = Math.min(strings.commonSuffixLength(previousState.value, currentState.value), previousState.value.length - previousState.selectionEnd, currentState.value.length - currentState.selectionEnd);\n    const previousValue = previousState.value.substring(prefixLength, previousState.value.length - suffixLength);\n    const currentValue = currentState.value.substring(prefixLength, currentState.value.length - suffixLength);\n    const previousSelectionStart = previousState.selectionStart - prefixLength;\n    const previousSelectionEnd = previousState.selectionEnd - prefixLength;\n    const currentSelectionStart = currentState.selectionStart - prefixLength;\n    const currentSelectionEnd = currentState.selectionEnd - prefixLength;\n\n    if (_debugComposition) {\n      console.log(`AFTER DIFFING PREVIOUS STATE: <${previousValue}>, selectionStart: ${previousSelectionStart}, selectionEnd: ${previousSelectionEnd}`);\n      console.log(`AFTER DIFFING CURRENT STATE: <${currentValue}>, selectionStart: ${currentSelectionStart}, selectionEnd: ${currentSelectionEnd}`);\n    }\n\n    if (currentSelectionStart === currentSelectionEnd) {\n      // no current selection\n      const replacePreviousCharacters = previousState.selectionStart - prefixLength;\n\n      if (_debugComposition) {\n        console.log(`REMOVE PREVIOUS: ${replacePreviousCharacters} chars`);\n      }\n\n      return {\n        text: currentValue,\n        replacePrevCharCnt: replacePreviousCharacters,\n        replaceNextCharCnt: 0,\n        positionDelta: 0\n      };\n    } // there is a current selection => composition case\n\n\n    const replacePreviousCharacters = previousSelectionEnd - previousSelectionStart;\n    return {\n      text: currentValue,\n      replacePrevCharCnt: replacePreviousCharacters,\n      replaceNextCharCnt: 0,\n      positionDelta: 0\n    };\n  }\n\n  static deduceAndroidCompositionInput(previousState, currentState) {\n    if (!previousState) {\n      // This is the EMPTY state\n      return {\n        text: '',\n        replacePrevCharCnt: 0,\n        replaceNextCharCnt: 0,\n        positionDelta: 0\n      };\n    }\n\n    if (_debugComposition) {\n      console.log('------------------------deduceAndroidCompositionInput');\n      console.log(`PREVIOUS STATE: ${previousState.toString()}`);\n      console.log(`CURRENT STATE: ${currentState.toString()}`);\n    }\n\n    if (previousState.value === currentState.value) {\n      return {\n        text: '',\n        replacePrevCharCnt: 0,\n        replaceNextCharCnt: 0,\n        positionDelta: currentState.selectionEnd - previousState.selectionEnd\n      };\n    }\n\n    const prefixLength = Math.min(strings.commonPrefixLength(previousState.value, currentState.value), previousState.selectionEnd);\n    const suffixLength = Math.min(strings.commonSuffixLength(previousState.value, currentState.value), previousState.value.length - previousState.selectionEnd);\n    const previousValue = previousState.value.substring(prefixLength, previousState.value.length - suffixLength);\n    const currentValue = currentState.value.substring(prefixLength, currentState.value.length - suffixLength);\n    const previousSelectionStart = previousState.selectionStart - prefixLength;\n    const previousSelectionEnd = previousState.selectionEnd - prefixLength;\n    const currentSelectionStart = currentState.selectionStart - prefixLength;\n    const currentSelectionEnd = currentState.selectionEnd - prefixLength;\n\n    if (_debugComposition) {\n      console.log(`AFTER DIFFING PREVIOUS STATE: <${previousValue}>, selectionStart: ${previousSelectionStart}, selectionEnd: ${previousSelectionEnd}`);\n      console.log(`AFTER DIFFING CURRENT STATE: <${currentValue}>, selectionStart: ${currentSelectionStart}, selectionEnd: ${currentSelectionEnd}`);\n    }\n\n    return {\n      text: currentValue,\n      replacePrevCharCnt: previousSelectionEnd,\n      replaceNextCharCnt: previousValue.length - previousSelectionEnd,\n      positionDelta: currentSelectionEnd - currentValue.length\n    };\n  }\n\n}\nTextAreaState.EMPTY = new TextAreaState('', 0, 0, null, null);\nexport class PagedScreenReaderStrategy {\n  static _getPageOfLine(lineNumber, linesPerPage) {\n    return Math.floor((lineNumber - 1) / linesPerPage);\n  }\n\n  static _getRangeForPage(page, linesPerPage) {\n    const offset = page * linesPerPage;\n    const startLineNumber = offset + 1;\n    const endLineNumber = offset + linesPerPage;\n    return new Range(startLineNumber, 1, endLineNumber + 1, 1);\n  }\n\n  static fromEditorSelection(previousState, model, selection, linesPerPage, trimLongText) {\n    const selectionStartPage = PagedScreenReaderStrategy._getPageOfLine(selection.startLineNumber, linesPerPage);\n\n    const selectionStartPageRange = PagedScreenReaderStrategy._getRangeForPage(selectionStartPage, linesPerPage);\n\n    const selectionEndPage = PagedScreenReaderStrategy._getPageOfLine(selection.endLineNumber, linesPerPage);\n\n    const selectionEndPageRange = PagedScreenReaderStrategy._getRangeForPage(selectionEndPage, linesPerPage);\n\n    const pretextRange = selectionStartPageRange.intersectRanges(new Range(1, 1, selection.startLineNumber, selection.startColumn));\n    let pretext = model.getValueInRange(pretextRange, 1\n    /* LF */\n    );\n    const lastLine = model.getLineCount();\n    const lastLineMaxColumn = model.getLineMaxColumn(lastLine);\n    const posttextRange = selectionEndPageRange.intersectRanges(new Range(selection.endLineNumber, selection.endColumn, lastLine, lastLineMaxColumn));\n    let posttext = model.getValueInRange(posttextRange, 1\n    /* LF */\n    );\n    let text;\n\n    if (selectionStartPage === selectionEndPage || selectionStartPage + 1 === selectionEndPage) {\n      // take full selection\n      text = model.getValueInRange(selection, 1\n      /* LF */\n      );\n    } else {\n      const selectionRange1 = selectionStartPageRange.intersectRanges(selection);\n      const selectionRange2 = selectionEndPageRange.intersectRanges(selection);\n      text = model.getValueInRange(selectionRange1, 1\n      /* LF */\n      ) + String.fromCharCode(8230) + model.getValueInRange(selectionRange2, 1\n      /* LF */\n      );\n    } // Chromium handles very poorly text even of a few thousand chars\n    // Cut text to avoid stalling the entire UI\n\n\n    if (trimLongText) {\n      const LIMIT_CHARS = 500;\n\n      if (pretext.length > LIMIT_CHARS) {\n        pretext = pretext.substring(pretext.length - LIMIT_CHARS, pretext.length);\n      }\n\n      if (posttext.length > LIMIT_CHARS) {\n        posttext = posttext.substring(0, LIMIT_CHARS);\n      }\n\n      if (text.length > 2 * LIMIT_CHARS) {\n        text = text.substring(0, LIMIT_CHARS) + String.fromCharCode(8230) + text.substring(text.length - LIMIT_CHARS, text.length);\n      }\n    }\n\n    return new TextAreaState(pretext + text + posttext, pretext.length, pretext.length + text.length, new Position(selection.startLineNumber, selection.startColumn), new Position(selection.endLineNumber, selection.endColumn));\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/browser/controller/textAreaState.js"],"names":["strings","Position","Range","_debugComposition","TextAreaState","constructor","value","selectionStart","selectionEnd","selectionStartPosition","selectionEndPosition","toString","readFromTextArea","textArea","getValue","getSelectionStart","getSelectionEnd","collapseSelection","length","writeToTextArea","reason","select","console","log","setValue","setSelectionRange","deduceEditorPosition","offset","str","substring","_finishDeduceEditorPosition","str1","indexOf","String","fromCharCode","str2","anchor","deltaText","signum","lineFeedCnt","lastLineFeedIndex","deduceInput","previousState","currentState","couldBeEmojiInput","text","replacePrevCharCnt","replaceNextCharCnt","positionDelta","prefixLength","Math","min","commonPrefixLength","suffixLength","commonSuffixLength","previousValue","currentValue","previousSelectionStart","previousSelectionEnd","currentSelectionStart","currentSelectionEnd","replacePreviousCharacters","deduceAndroidCompositionInput","EMPTY","PagedScreenReaderStrategy","_getPageOfLine","lineNumber","linesPerPage","floor","_getRangeForPage","page","startLineNumber","endLineNumber","fromEditorSelection","model","selection","trimLongText","selectionStartPage","selectionStartPageRange","selectionEndPage","selectionEndPageRange","pretextRange","intersectRanges","startColumn","pretext","getValueInRange","lastLine","getLineCount","lastLineMaxColumn","getLineMaxColumn","posttextRange","endColumn","posttext","selectionRange1","selectionRange2","LIMIT_CHARS"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { Position } from '../../common/core/position.js';\nimport { Range } from '../../common/core/range.js';\nexport const _debugComposition = false;\nexport class TextAreaState {\n    constructor(value, selectionStart, selectionEnd, selectionStartPosition, selectionEndPosition) {\n        this.value = value;\n        this.selectionStart = selectionStart;\n        this.selectionEnd = selectionEnd;\n        this.selectionStartPosition = selectionStartPosition;\n        this.selectionEndPosition = selectionEndPosition;\n    }\n    toString() {\n        return `[ <${this.value}>, selectionStart: ${this.selectionStart}, selectionEnd: ${this.selectionEnd}]`;\n    }\n    static readFromTextArea(textArea) {\n        return new TextAreaState(textArea.getValue(), textArea.getSelectionStart(), textArea.getSelectionEnd(), null, null);\n    }\n    collapseSelection() {\n        return new TextAreaState(this.value, this.value.length, this.value.length, null, null);\n    }\n    writeToTextArea(reason, textArea, select) {\n        if (_debugComposition) {\n            console.log(`writeToTextArea ${reason}: ${this.toString()}`);\n        }\n        textArea.setValue(reason, this.value);\n        if (select) {\n            textArea.setSelectionRange(reason, this.selectionStart, this.selectionEnd);\n        }\n    }\n    deduceEditorPosition(offset) {\n        if (offset <= this.selectionStart) {\n            const str = this.value.substring(offset, this.selectionStart);\n            return this._finishDeduceEditorPosition(this.selectionStartPosition, str, -1);\n        }\n        if (offset >= this.selectionEnd) {\n            const str = this.value.substring(this.selectionEnd, offset);\n            return this._finishDeduceEditorPosition(this.selectionEndPosition, str, 1);\n        }\n        const str1 = this.value.substring(this.selectionStart, offset);\n        if (str1.indexOf(String.fromCharCode(8230)) === -1) {\n            return this._finishDeduceEditorPosition(this.selectionStartPosition, str1, 1);\n        }\n        const str2 = this.value.substring(offset, this.selectionEnd);\n        return this._finishDeduceEditorPosition(this.selectionEndPosition, str2, -1);\n    }\n    _finishDeduceEditorPosition(anchor, deltaText, signum) {\n        let lineFeedCnt = 0;\n        let lastLineFeedIndex = -1;\n        while ((lastLineFeedIndex = deltaText.indexOf('\\n', lastLineFeedIndex + 1)) !== -1) {\n            lineFeedCnt++;\n        }\n        return [anchor, signum * deltaText.length, lineFeedCnt];\n    }\n    static deduceInput(previousState, currentState, couldBeEmojiInput) {\n        if (!previousState) {\n            // This is the EMPTY state\n            return {\n                text: '',\n                replacePrevCharCnt: 0,\n                replaceNextCharCnt: 0,\n                positionDelta: 0\n            };\n        }\n        if (_debugComposition) {\n            console.log('------------------------deduceInput');\n            console.log(`PREVIOUS STATE: ${previousState.toString()}`);\n            console.log(`CURRENT STATE: ${currentState.toString()}`);\n        }\n        const prefixLength = Math.min(strings.commonPrefixLength(previousState.value, currentState.value), previousState.selectionStart, currentState.selectionStart);\n        const suffixLength = Math.min(strings.commonSuffixLength(previousState.value, currentState.value), previousState.value.length - previousState.selectionEnd, currentState.value.length - currentState.selectionEnd);\n        const previousValue = previousState.value.substring(prefixLength, previousState.value.length - suffixLength);\n        const currentValue = currentState.value.substring(prefixLength, currentState.value.length - suffixLength);\n        const previousSelectionStart = previousState.selectionStart - prefixLength;\n        const previousSelectionEnd = previousState.selectionEnd - prefixLength;\n        const currentSelectionStart = currentState.selectionStart - prefixLength;\n        const currentSelectionEnd = currentState.selectionEnd - prefixLength;\n        if (_debugComposition) {\n            console.log(`AFTER DIFFING PREVIOUS STATE: <${previousValue}>, selectionStart: ${previousSelectionStart}, selectionEnd: ${previousSelectionEnd}`);\n            console.log(`AFTER DIFFING CURRENT STATE: <${currentValue}>, selectionStart: ${currentSelectionStart}, selectionEnd: ${currentSelectionEnd}`);\n        }\n        if (currentSelectionStart === currentSelectionEnd) {\n            // no current selection\n            const replacePreviousCharacters = (previousState.selectionStart - prefixLength);\n            if (_debugComposition) {\n                console.log(`REMOVE PREVIOUS: ${replacePreviousCharacters} chars`);\n            }\n            return {\n                text: currentValue,\n                replacePrevCharCnt: replacePreviousCharacters,\n                replaceNextCharCnt: 0,\n                positionDelta: 0\n            };\n        }\n        // there is a current selection => composition case\n        const replacePreviousCharacters = previousSelectionEnd - previousSelectionStart;\n        return {\n            text: currentValue,\n            replacePrevCharCnt: replacePreviousCharacters,\n            replaceNextCharCnt: 0,\n            positionDelta: 0\n        };\n    }\n    static deduceAndroidCompositionInput(previousState, currentState) {\n        if (!previousState) {\n            // This is the EMPTY state\n            return {\n                text: '',\n                replacePrevCharCnt: 0,\n                replaceNextCharCnt: 0,\n                positionDelta: 0\n            };\n        }\n        if (_debugComposition) {\n            console.log('------------------------deduceAndroidCompositionInput');\n            console.log(`PREVIOUS STATE: ${previousState.toString()}`);\n            console.log(`CURRENT STATE: ${currentState.toString()}`);\n        }\n        if (previousState.value === currentState.value) {\n            return {\n                text: '',\n                replacePrevCharCnt: 0,\n                replaceNextCharCnt: 0,\n                positionDelta: currentState.selectionEnd - previousState.selectionEnd\n            };\n        }\n        const prefixLength = Math.min(strings.commonPrefixLength(previousState.value, currentState.value), previousState.selectionEnd);\n        const suffixLength = Math.min(strings.commonSuffixLength(previousState.value, currentState.value), previousState.value.length - previousState.selectionEnd);\n        const previousValue = previousState.value.substring(prefixLength, previousState.value.length - suffixLength);\n        const currentValue = currentState.value.substring(prefixLength, currentState.value.length - suffixLength);\n        const previousSelectionStart = previousState.selectionStart - prefixLength;\n        const previousSelectionEnd = previousState.selectionEnd - prefixLength;\n        const currentSelectionStart = currentState.selectionStart - prefixLength;\n        const currentSelectionEnd = currentState.selectionEnd - prefixLength;\n        if (_debugComposition) {\n            console.log(`AFTER DIFFING PREVIOUS STATE: <${previousValue}>, selectionStart: ${previousSelectionStart}, selectionEnd: ${previousSelectionEnd}`);\n            console.log(`AFTER DIFFING CURRENT STATE: <${currentValue}>, selectionStart: ${currentSelectionStart}, selectionEnd: ${currentSelectionEnd}`);\n        }\n        return {\n            text: currentValue,\n            replacePrevCharCnt: previousSelectionEnd,\n            replaceNextCharCnt: previousValue.length - previousSelectionEnd,\n            positionDelta: currentSelectionEnd - currentValue.length\n        };\n    }\n}\nTextAreaState.EMPTY = new TextAreaState('', 0, 0, null, null);\nexport class PagedScreenReaderStrategy {\n    static _getPageOfLine(lineNumber, linesPerPage) {\n        return Math.floor((lineNumber - 1) / linesPerPage);\n    }\n    static _getRangeForPage(page, linesPerPage) {\n        const offset = page * linesPerPage;\n        const startLineNumber = offset + 1;\n        const endLineNumber = offset + linesPerPage;\n        return new Range(startLineNumber, 1, endLineNumber + 1, 1);\n    }\n    static fromEditorSelection(previousState, model, selection, linesPerPage, trimLongText) {\n        const selectionStartPage = PagedScreenReaderStrategy._getPageOfLine(selection.startLineNumber, linesPerPage);\n        const selectionStartPageRange = PagedScreenReaderStrategy._getRangeForPage(selectionStartPage, linesPerPage);\n        const selectionEndPage = PagedScreenReaderStrategy._getPageOfLine(selection.endLineNumber, linesPerPage);\n        const selectionEndPageRange = PagedScreenReaderStrategy._getRangeForPage(selectionEndPage, linesPerPage);\n        const pretextRange = selectionStartPageRange.intersectRanges(new Range(1, 1, selection.startLineNumber, selection.startColumn));\n        let pretext = model.getValueInRange(pretextRange, 1 /* LF */);\n        const lastLine = model.getLineCount();\n        const lastLineMaxColumn = model.getLineMaxColumn(lastLine);\n        const posttextRange = selectionEndPageRange.intersectRanges(new Range(selection.endLineNumber, selection.endColumn, lastLine, lastLineMaxColumn));\n        let posttext = model.getValueInRange(posttextRange, 1 /* LF */);\n        let text;\n        if (selectionStartPage === selectionEndPage || selectionStartPage + 1 === selectionEndPage) {\n            // take full selection\n            text = model.getValueInRange(selection, 1 /* LF */);\n        }\n        else {\n            const selectionRange1 = selectionStartPageRange.intersectRanges(selection);\n            const selectionRange2 = selectionEndPageRange.intersectRanges(selection);\n            text = (model.getValueInRange(selectionRange1, 1 /* LF */)\n                + String.fromCharCode(8230)\n                + model.getValueInRange(selectionRange2, 1 /* LF */));\n        }\n        // Chromium handles very poorly text even of a few thousand chars\n        // Cut text to avoid stalling the entire UI\n        if (trimLongText) {\n            const LIMIT_CHARS = 500;\n            if (pretext.length > LIMIT_CHARS) {\n                pretext = pretext.substring(pretext.length - LIMIT_CHARS, pretext.length);\n            }\n            if (posttext.length > LIMIT_CHARS) {\n                posttext = posttext.substring(0, LIMIT_CHARS);\n            }\n            if (text.length > 2 * LIMIT_CHARS) {\n                text = text.substring(0, LIMIT_CHARS) + String.fromCharCode(8230) + text.substring(text.length - LIMIT_CHARS, text.length);\n            }\n        }\n        return new TextAreaState(pretext + text + posttext, pretext.length, pretext.length + text.length, new Position(selection.startLineNumber, selection.startColumn), new Position(selection.endLineNumber, selection.endColumn));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}