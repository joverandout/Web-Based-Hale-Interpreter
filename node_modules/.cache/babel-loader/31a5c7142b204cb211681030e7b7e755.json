{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { match as matchGlobPattern } from '../../base/common/glob.js';\nimport { normalize } from '../../base/common/path.js';\nexport function score(selector, candidateUri, candidateLanguage, candidateIsSynchronized) {\n  if (Array.isArray(selector)) {\n    // array -> take max individual value\n    let ret = 0;\n\n    for (const filter of selector) {\n      const value = score(filter, candidateUri, candidateLanguage, candidateIsSynchronized);\n\n      if (value === 10) {\n        return value; // already at the highest\n      }\n\n      if (value > ret) {\n        ret = value;\n      }\n    }\n\n    return ret;\n  } else if (typeof selector === 'string') {\n    if (!candidateIsSynchronized) {\n      return 0;\n    } // short-hand notion, desugars to\n    // 'fooLang' -> { language: 'fooLang'}\n    // '*' -> { language: '*' }\n\n\n    if (selector === '*') {\n      return 5;\n    } else if (selector === candidateLanguage) {\n      return 10;\n    } else {\n      return 0;\n    }\n  } else if (selector) {\n    // filter -> select accordingly, use defaults for scheme\n    const {\n      language,\n      pattern,\n      scheme,\n      hasAccessToAllModels\n    } = selector; // TODO: microsoft/TypeScript#42768\n\n    if (!candidateIsSynchronized && !hasAccessToAllModels) {\n      return 0;\n    }\n\n    let ret = 0;\n\n    if (scheme) {\n      if (scheme === candidateUri.scheme) {\n        ret = 10;\n      } else if (scheme === '*') {\n        ret = 5;\n      } else {\n        return 0;\n      }\n    }\n\n    if (language) {\n      if (language === candidateLanguage) {\n        ret = 10;\n      } else if (language === '*') {\n        ret = Math.max(ret, 5);\n      } else {\n        return 0;\n      }\n    }\n\n    if (pattern) {\n      let normalizedPattern;\n\n      if (typeof pattern === 'string') {\n        normalizedPattern = pattern;\n      } else {\n        // Since this pattern has a `base` property, we need\n        // to normalize this path first before passing it on\n        // because we will compare it against `Uri.fsPath`\n        // which uses platform specific separators.\n        // Refs: https://github.com/microsoft/vscode/issues/99938\n        normalizedPattern = Object.assign(Object.assign({}, pattern), {\n          base: normalize(pattern.base)\n        });\n      }\n\n      if (normalizedPattern === candidateUri.fsPath || matchGlobPattern(normalizedPattern, candidateUri.fsPath)) {\n        ret = 10;\n      } else {\n        return 0;\n      }\n    }\n\n    return ret;\n  } else {\n    return 0;\n  }\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/common/languageSelector.js"],"names":["match","matchGlobPattern","normalize","score","selector","candidateUri","candidateLanguage","candidateIsSynchronized","Array","isArray","ret","filter","value","language","pattern","scheme","hasAccessToAllModels","Math","max","normalizedPattern","Object","assign","base","fsPath"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { match as matchGlobPattern } from '../../base/common/glob.js';\nimport { normalize } from '../../base/common/path.js';\nexport function score(selector, candidateUri, candidateLanguage, candidateIsSynchronized) {\n    if (Array.isArray(selector)) {\n        // array -> take max individual value\n        let ret = 0;\n        for (const filter of selector) {\n            const value = score(filter, candidateUri, candidateLanguage, candidateIsSynchronized);\n            if (value === 10) {\n                return value; // already at the highest\n            }\n            if (value > ret) {\n                ret = value;\n            }\n        }\n        return ret;\n    }\n    else if (typeof selector === 'string') {\n        if (!candidateIsSynchronized) {\n            return 0;\n        }\n        // short-hand notion, desugars to\n        // 'fooLang' -> { language: 'fooLang'}\n        // '*' -> { language: '*' }\n        if (selector === '*') {\n            return 5;\n        }\n        else if (selector === candidateLanguage) {\n            return 10;\n        }\n        else {\n            return 0;\n        }\n    }\n    else if (selector) {\n        // filter -> select accordingly, use defaults for scheme\n        const { language, pattern, scheme, hasAccessToAllModels } = selector; // TODO: microsoft/TypeScript#42768\n        if (!candidateIsSynchronized && !hasAccessToAllModels) {\n            return 0;\n        }\n        let ret = 0;\n        if (scheme) {\n            if (scheme === candidateUri.scheme) {\n                ret = 10;\n            }\n            else if (scheme === '*') {\n                ret = 5;\n            }\n            else {\n                return 0;\n            }\n        }\n        if (language) {\n            if (language === candidateLanguage) {\n                ret = 10;\n            }\n            else if (language === '*') {\n                ret = Math.max(ret, 5);\n            }\n            else {\n                return 0;\n            }\n        }\n        if (pattern) {\n            let normalizedPattern;\n            if (typeof pattern === 'string') {\n                normalizedPattern = pattern;\n            }\n            else {\n                // Since this pattern has a `base` property, we need\n                // to normalize this path first before passing it on\n                // because we will compare it against `Uri.fsPath`\n                // which uses platform specific separators.\n                // Refs: https://github.com/microsoft/vscode/issues/99938\n                normalizedPattern = Object.assign(Object.assign({}, pattern), { base: normalize(pattern.base) });\n            }\n            if (normalizedPattern === candidateUri.fsPath || matchGlobPattern(normalizedPattern, candidateUri.fsPath)) {\n                ret = 10;\n            }\n            else {\n                return 0;\n            }\n        }\n        return ret;\n    }\n    else {\n        return 0;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}