{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../dom.js';\nimport { createFastDomNode } from '../../fastDomNode.js';\nimport { GlobalMouseMoveMonitor, standardMouseMoveMerger } from '../../globalMouseMoveMonitor.js';\nimport { ScrollbarArrow } from './scrollbarArrow.js';\nimport { ScrollbarVisibilityController } from './scrollbarVisibilityController.js';\nimport { Widget } from '../widget.js';\nimport * as platform from '../../../common/platform.js';\n/**\n * The orthogonal distance to the slider at which dragging \"resets\". This implements \"snapping\"\n */\n\nconst MOUSE_DRAG_RESET_DISTANCE = 140;\nexport class AbstractScrollbar extends Widget {\n  constructor(opts) {\n    super();\n    this._lazyRender = opts.lazyRender;\n    this._host = opts.host;\n    this._scrollable = opts.scrollable;\n    this._scrollByPage = opts.scrollByPage;\n    this._scrollbarState = opts.scrollbarState;\n    this._visibilityController = this._register(new ScrollbarVisibilityController(opts.visibility, 'visible scrollbar ' + opts.extraScrollbarClassName, 'invisible scrollbar ' + opts.extraScrollbarClassName));\n\n    this._visibilityController.setIsNeeded(this._scrollbarState.isNeeded());\n\n    this._mouseMoveMonitor = this._register(new GlobalMouseMoveMonitor());\n    this._shouldRender = true;\n    this.domNode = createFastDomNode(document.createElement('div'));\n    this.domNode.setAttribute('role', 'presentation');\n    this.domNode.setAttribute('aria-hidden', 'true');\n\n    this._visibilityController.setDomNode(this.domNode);\n\n    this.domNode.setPosition('absolute');\n    this.onmousedown(this.domNode.domNode, e => this._domNodeMouseDown(e));\n  } // ----------------- creation\n\n  /**\n   * Creates the dom node for an arrow & adds it to the container\n   */\n\n\n  _createArrow(opts) {\n    const arrow = this._register(new ScrollbarArrow(opts));\n\n    this.domNode.domNode.appendChild(arrow.bgDomNode);\n    this.domNode.domNode.appendChild(arrow.domNode);\n  }\n  /**\n   * Creates the slider dom node, adds it to the container & hooks up the events\n   */\n\n\n  _createSlider(top, left, width, height) {\n    this.slider = createFastDomNode(document.createElement('div'));\n    this.slider.setClassName('slider');\n    this.slider.setPosition('absolute');\n    this.slider.setTop(top);\n    this.slider.setLeft(left);\n\n    if (typeof width === 'number') {\n      this.slider.setWidth(width);\n    }\n\n    if (typeof height === 'number') {\n      this.slider.setHeight(height);\n    }\n\n    this.slider.setLayerHinting(true);\n    this.slider.setContain('strict');\n    this.domNode.domNode.appendChild(this.slider.domNode);\n    this.onmousedown(this.slider.domNode, e => {\n      if (e.leftButton) {\n        e.preventDefault();\n\n        this._sliderMouseDown(e, () => {});\n      }\n    });\n    this.onclick(this.slider.domNode, e => {\n      if (e.leftButton) {\n        e.stopPropagation();\n      }\n    });\n  } // ----------------- Update state\n\n\n  _onElementSize(visibleSize) {\n    if (this._scrollbarState.setVisibleSize(visibleSize)) {\n      this._visibilityController.setIsNeeded(this._scrollbarState.isNeeded());\n\n      this._shouldRender = true;\n\n      if (!this._lazyRender) {\n        this.render();\n      }\n    }\n\n    return this._shouldRender;\n  }\n\n  _onElementScrollSize(elementScrollSize) {\n    if (this._scrollbarState.setScrollSize(elementScrollSize)) {\n      this._visibilityController.setIsNeeded(this._scrollbarState.isNeeded());\n\n      this._shouldRender = true;\n\n      if (!this._lazyRender) {\n        this.render();\n      }\n    }\n\n    return this._shouldRender;\n  }\n\n  _onElementScrollPosition(elementScrollPosition) {\n    if (this._scrollbarState.setScrollPosition(elementScrollPosition)) {\n      this._visibilityController.setIsNeeded(this._scrollbarState.isNeeded());\n\n      this._shouldRender = true;\n\n      if (!this._lazyRender) {\n        this.render();\n      }\n    }\n\n    return this._shouldRender;\n  } // ----------------- rendering\n\n\n  beginReveal() {\n    this._visibilityController.setShouldBeVisible(true);\n  }\n\n  beginHide() {\n    this._visibilityController.setShouldBeVisible(false);\n  }\n\n  render() {\n    if (!this._shouldRender) {\n      return;\n    }\n\n    this._shouldRender = false;\n\n    this._renderDomNode(this._scrollbarState.getRectangleLargeSize(), this._scrollbarState.getRectangleSmallSize());\n\n    this._updateSlider(this._scrollbarState.getSliderSize(), this._scrollbarState.getArrowSize() + this._scrollbarState.getSliderPosition());\n  } // ----------------- DOM events\n\n\n  _domNodeMouseDown(e) {\n    if (e.target !== this.domNode.domNode) {\n      return;\n    }\n\n    this._onMouseDown(e);\n  }\n\n  delegateMouseDown(e) {\n    const domTop = this.domNode.domNode.getClientRects()[0].top;\n\n    const sliderStart = domTop + this._scrollbarState.getSliderPosition();\n\n    const sliderStop = domTop + this._scrollbarState.getSliderPosition() + this._scrollbarState.getSliderSize();\n\n    const mousePos = this._sliderMousePosition(e);\n\n    if (sliderStart <= mousePos && mousePos <= sliderStop) {\n      // Act as if it was a mouse down on the slider\n      if (e.leftButton) {\n        e.preventDefault();\n\n        this._sliderMouseDown(e, () => {});\n      }\n    } else {\n      // Act as if it was a mouse down on the scrollbar\n      this._onMouseDown(e);\n    }\n  }\n\n  _onMouseDown(e) {\n    let offsetX;\n    let offsetY;\n\n    if (e.target === this.domNode.domNode && typeof e.browserEvent.offsetX === 'number' && typeof e.browserEvent.offsetY === 'number') {\n      offsetX = e.browserEvent.offsetX;\n      offsetY = e.browserEvent.offsetY;\n    } else {\n      const domNodePosition = dom.getDomNodePagePosition(this.domNode.domNode);\n      offsetX = e.posx - domNodePosition.left;\n      offsetY = e.posy - domNodePosition.top;\n    }\n\n    const offset = this._mouseDownRelativePosition(offsetX, offsetY);\n\n    this._setDesiredScrollPositionNow(this._scrollByPage ? this._scrollbarState.getDesiredScrollPositionFromOffsetPaged(offset) : this._scrollbarState.getDesiredScrollPositionFromOffset(offset));\n\n    if (e.leftButton) {\n      e.preventDefault();\n\n      this._sliderMouseDown(e, () => {});\n    }\n  }\n\n  _sliderMouseDown(e, onDragFinished) {\n    const initialMousePosition = this._sliderMousePosition(e);\n\n    const initialMouseOrthogonalPosition = this._sliderOrthogonalMousePosition(e);\n\n    const initialScrollbarState = this._scrollbarState.clone();\n\n    this.slider.toggleClassName('active', true);\n\n    this._mouseMoveMonitor.startMonitoring(e.target, e.buttons, standardMouseMoveMerger, mouseMoveData => {\n      const mouseOrthogonalPosition = this._sliderOrthogonalMousePosition(mouseMoveData);\n\n      const mouseOrthogonalDelta = Math.abs(mouseOrthogonalPosition - initialMouseOrthogonalPosition);\n\n      if (platform.isWindows && mouseOrthogonalDelta > MOUSE_DRAG_RESET_DISTANCE) {\n        // The mouse has wondered away from the scrollbar => reset dragging\n        this._setDesiredScrollPositionNow(initialScrollbarState.getScrollPosition());\n\n        return;\n      }\n\n      const mousePosition = this._sliderMousePosition(mouseMoveData);\n\n      const mouseDelta = mousePosition - initialMousePosition;\n\n      this._setDesiredScrollPositionNow(initialScrollbarState.getDesiredScrollPositionFromDelta(mouseDelta));\n    }, () => {\n      this.slider.toggleClassName('active', false);\n\n      this._host.onDragEnd();\n\n      onDragFinished();\n    });\n\n    this._host.onDragStart();\n  }\n\n  _setDesiredScrollPositionNow(_desiredScrollPosition) {\n    const desiredScrollPosition = {};\n    this.writeScrollPosition(desiredScrollPosition, _desiredScrollPosition);\n\n    this._scrollable.setScrollPositionNow(desiredScrollPosition);\n  }\n\n  updateScrollbarSize(scrollbarSize) {\n    this._updateScrollbarSize(scrollbarSize);\n\n    this._scrollbarState.setScrollbarSize(scrollbarSize);\n\n    this._shouldRender = true;\n\n    if (!this._lazyRender) {\n      this.render();\n    }\n  }\n\n  isNeeded() {\n    return this._scrollbarState.isNeeded();\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/base/browser/ui/scrollbar/abstractScrollbar.js"],"names":["dom","createFastDomNode","GlobalMouseMoveMonitor","standardMouseMoveMerger","ScrollbarArrow","ScrollbarVisibilityController","Widget","platform","MOUSE_DRAG_RESET_DISTANCE","AbstractScrollbar","constructor","opts","_lazyRender","lazyRender","_host","host","_scrollable","scrollable","_scrollByPage","scrollByPage","_scrollbarState","scrollbarState","_visibilityController","_register","visibility","extraScrollbarClassName","setIsNeeded","isNeeded","_mouseMoveMonitor","_shouldRender","domNode","document","createElement","setAttribute","setDomNode","setPosition","onmousedown","e","_domNodeMouseDown","_createArrow","arrow","appendChild","bgDomNode","_createSlider","top","left","width","height","slider","setClassName","setTop","setLeft","setWidth","setHeight","setLayerHinting","setContain","leftButton","preventDefault","_sliderMouseDown","onclick","stopPropagation","_onElementSize","visibleSize","setVisibleSize","render","_onElementScrollSize","elementScrollSize","setScrollSize","_onElementScrollPosition","elementScrollPosition","setScrollPosition","beginReveal","setShouldBeVisible","beginHide","_renderDomNode","getRectangleLargeSize","getRectangleSmallSize","_updateSlider","getSliderSize","getArrowSize","getSliderPosition","target","_onMouseDown","delegateMouseDown","domTop","getClientRects","sliderStart","sliderStop","mousePos","_sliderMousePosition","offsetX","offsetY","browserEvent","domNodePosition","getDomNodePagePosition","posx","posy","offset","_mouseDownRelativePosition","_setDesiredScrollPositionNow","getDesiredScrollPositionFromOffsetPaged","getDesiredScrollPositionFromOffset","onDragFinished","initialMousePosition","initialMouseOrthogonalPosition","_sliderOrthogonalMousePosition","initialScrollbarState","clone","toggleClassName","startMonitoring","buttons","mouseMoveData","mouseOrthogonalPosition","mouseOrthogonalDelta","Math","abs","isWindows","getScrollPosition","mousePosition","mouseDelta","getDesiredScrollPositionFromDelta","onDragEnd","onDragStart","_desiredScrollPosition","desiredScrollPosition","writeScrollPosition","setScrollPositionNow","updateScrollbarSize","scrollbarSize","_updateScrollbarSize","setScrollbarSize"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../dom.js';\nimport { createFastDomNode } from '../../fastDomNode.js';\nimport { GlobalMouseMoveMonitor, standardMouseMoveMerger } from '../../globalMouseMoveMonitor.js';\nimport { ScrollbarArrow } from './scrollbarArrow.js';\nimport { ScrollbarVisibilityController } from './scrollbarVisibilityController.js';\nimport { Widget } from '../widget.js';\nimport * as platform from '../../../common/platform.js';\n/**\n * The orthogonal distance to the slider at which dragging \"resets\". This implements \"snapping\"\n */\nconst MOUSE_DRAG_RESET_DISTANCE = 140;\nexport class AbstractScrollbar extends Widget {\n    constructor(opts) {\n        super();\n        this._lazyRender = opts.lazyRender;\n        this._host = opts.host;\n        this._scrollable = opts.scrollable;\n        this._scrollByPage = opts.scrollByPage;\n        this._scrollbarState = opts.scrollbarState;\n        this._visibilityController = this._register(new ScrollbarVisibilityController(opts.visibility, 'visible scrollbar ' + opts.extraScrollbarClassName, 'invisible scrollbar ' + opts.extraScrollbarClassName));\n        this._visibilityController.setIsNeeded(this._scrollbarState.isNeeded());\n        this._mouseMoveMonitor = this._register(new GlobalMouseMoveMonitor());\n        this._shouldRender = true;\n        this.domNode = createFastDomNode(document.createElement('div'));\n        this.domNode.setAttribute('role', 'presentation');\n        this.domNode.setAttribute('aria-hidden', 'true');\n        this._visibilityController.setDomNode(this.domNode);\n        this.domNode.setPosition('absolute');\n        this.onmousedown(this.domNode.domNode, (e) => this._domNodeMouseDown(e));\n    }\n    // ----------------- creation\n    /**\n     * Creates the dom node for an arrow & adds it to the container\n     */\n    _createArrow(opts) {\n        const arrow = this._register(new ScrollbarArrow(opts));\n        this.domNode.domNode.appendChild(arrow.bgDomNode);\n        this.domNode.domNode.appendChild(arrow.domNode);\n    }\n    /**\n     * Creates the slider dom node, adds it to the container & hooks up the events\n     */\n    _createSlider(top, left, width, height) {\n        this.slider = createFastDomNode(document.createElement('div'));\n        this.slider.setClassName('slider');\n        this.slider.setPosition('absolute');\n        this.slider.setTop(top);\n        this.slider.setLeft(left);\n        if (typeof width === 'number') {\n            this.slider.setWidth(width);\n        }\n        if (typeof height === 'number') {\n            this.slider.setHeight(height);\n        }\n        this.slider.setLayerHinting(true);\n        this.slider.setContain('strict');\n        this.domNode.domNode.appendChild(this.slider.domNode);\n        this.onmousedown(this.slider.domNode, (e) => {\n            if (e.leftButton) {\n                e.preventDefault();\n                this._sliderMouseDown(e, () => { });\n            }\n        });\n        this.onclick(this.slider.domNode, e => {\n            if (e.leftButton) {\n                e.stopPropagation();\n            }\n        });\n    }\n    // ----------------- Update state\n    _onElementSize(visibleSize) {\n        if (this._scrollbarState.setVisibleSize(visibleSize)) {\n            this._visibilityController.setIsNeeded(this._scrollbarState.isNeeded());\n            this._shouldRender = true;\n            if (!this._lazyRender) {\n                this.render();\n            }\n        }\n        return this._shouldRender;\n    }\n    _onElementScrollSize(elementScrollSize) {\n        if (this._scrollbarState.setScrollSize(elementScrollSize)) {\n            this._visibilityController.setIsNeeded(this._scrollbarState.isNeeded());\n            this._shouldRender = true;\n            if (!this._lazyRender) {\n                this.render();\n            }\n        }\n        return this._shouldRender;\n    }\n    _onElementScrollPosition(elementScrollPosition) {\n        if (this._scrollbarState.setScrollPosition(elementScrollPosition)) {\n            this._visibilityController.setIsNeeded(this._scrollbarState.isNeeded());\n            this._shouldRender = true;\n            if (!this._lazyRender) {\n                this.render();\n            }\n        }\n        return this._shouldRender;\n    }\n    // ----------------- rendering\n    beginReveal() {\n        this._visibilityController.setShouldBeVisible(true);\n    }\n    beginHide() {\n        this._visibilityController.setShouldBeVisible(false);\n    }\n    render() {\n        if (!this._shouldRender) {\n            return;\n        }\n        this._shouldRender = false;\n        this._renderDomNode(this._scrollbarState.getRectangleLargeSize(), this._scrollbarState.getRectangleSmallSize());\n        this._updateSlider(this._scrollbarState.getSliderSize(), this._scrollbarState.getArrowSize() + this._scrollbarState.getSliderPosition());\n    }\n    // ----------------- DOM events\n    _domNodeMouseDown(e) {\n        if (e.target !== this.domNode.domNode) {\n            return;\n        }\n        this._onMouseDown(e);\n    }\n    delegateMouseDown(e) {\n        const domTop = this.domNode.domNode.getClientRects()[0].top;\n        const sliderStart = domTop + this._scrollbarState.getSliderPosition();\n        const sliderStop = domTop + this._scrollbarState.getSliderPosition() + this._scrollbarState.getSliderSize();\n        const mousePos = this._sliderMousePosition(e);\n        if (sliderStart <= mousePos && mousePos <= sliderStop) {\n            // Act as if it was a mouse down on the slider\n            if (e.leftButton) {\n                e.preventDefault();\n                this._sliderMouseDown(e, () => { });\n            }\n        }\n        else {\n            // Act as if it was a mouse down on the scrollbar\n            this._onMouseDown(e);\n        }\n    }\n    _onMouseDown(e) {\n        let offsetX;\n        let offsetY;\n        if (e.target === this.domNode.domNode && typeof e.browserEvent.offsetX === 'number' && typeof e.browserEvent.offsetY === 'number') {\n            offsetX = e.browserEvent.offsetX;\n            offsetY = e.browserEvent.offsetY;\n        }\n        else {\n            const domNodePosition = dom.getDomNodePagePosition(this.domNode.domNode);\n            offsetX = e.posx - domNodePosition.left;\n            offsetY = e.posy - domNodePosition.top;\n        }\n        const offset = this._mouseDownRelativePosition(offsetX, offsetY);\n        this._setDesiredScrollPositionNow(this._scrollByPage\n            ? this._scrollbarState.getDesiredScrollPositionFromOffsetPaged(offset)\n            : this._scrollbarState.getDesiredScrollPositionFromOffset(offset));\n        if (e.leftButton) {\n            e.preventDefault();\n            this._sliderMouseDown(e, () => { });\n        }\n    }\n    _sliderMouseDown(e, onDragFinished) {\n        const initialMousePosition = this._sliderMousePosition(e);\n        const initialMouseOrthogonalPosition = this._sliderOrthogonalMousePosition(e);\n        const initialScrollbarState = this._scrollbarState.clone();\n        this.slider.toggleClassName('active', true);\n        this._mouseMoveMonitor.startMonitoring(e.target, e.buttons, standardMouseMoveMerger, (mouseMoveData) => {\n            const mouseOrthogonalPosition = this._sliderOrthogonalMousePosition(mouseMoveData);\n            const mouseOrthogonalDelta = Math.abs(mouseOrthogonalPosition - initialMouseOrthogonalPosition);\n            if (platform.isWindows && mouseOrthogonalDelta > MOUSE_DRAG_RESET_DISTANCE) {\n                // The mouse has wondered away from the scrollbar => reset dragging\n                this._setDesiredScrollPositionNow(initialScrollbarState.getScrollPosition());\n                return;\n            }\n            const mousePosition = this._sliderMousePosition(mouseMoveData);\n            const mouseDelta = mousePosition - initialMousePosition;\n            this._setDesiredScrollPositionNow(initialScrollbarState.getDesiredScrollPositionFromDelta(mouseDelta));\n        }, () => {\n            this.slider.toggleClassName('active', false);\n            this._host.onDragEnd();\n            onDragFinished();\n        });\n        this._host.onDragStart();\n    }\n    _setDesiredScrollPositionNow(_desiredScrollPosition) {\n        const desiredScrollPosition = {};\n        this.writeScrollPosition(desiredScrollPosition, _desiredScrollPosition);\n        this._scrollable.setScrollPositionNow(desiredScrollPosition);\n    }\n    updateScrollbarSize(scrollbarSize) {\n        this._updateScrollbarSize(scrollbarSize);\n        this._scrollbarState.setScrollbarSize(scrollbarSize);\n        this._shouldRender = true;\n        if (!this._lazyRender) {\n            this.render();\n        }\n    }\n    isNeeded() {\n        return this._scrollbarState.isNeeded();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}