{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as arrays from '../../../base/common/arrays.js';\nimport { ResourceMap } from '../../../base/common/map.js';\nimport * as objects from '../../../base/common/objects.js';\nimport * as types from '../../../base/common/types.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { addToValueTree, getConfigurationValue, removeFromValueTree, toValuesTree } from './configuration.js';\nimport { Extensions, overrideIdentifiersFromKey, OVERRIDE_PROPERTY_REGEX } from './configurationRegistry.js';\nimport { Registry } from '../../registry/common/platform.js';\nexport class ConfigurationModel {\n  constructor(_contents = {}, _keys = [], _overrides = []) {\n    this._contents = _contents;\n    this._keys = _keys;\n    this._overrides = _overrides;\n    this.isFrozen = false;\n    this.overrideConfigurations = new Map();\n  }\n\n  get contents() {\n    return this.checkAndFreeze(this._contents);\n  }\n\n  get overrides() {\n    return this.checkAndFreeze(this._overrides);\n  }\n\n  get keys() {\n    return this.checkAndFreeze(this._keys);\n  }\n\n  isEmpty() {\n    return this._keys.length === 0 && Object.keys(this._contents).length === 0 && this._overrides.length === 0;\n  }\n\n  getValue(section) {\n    return section ? getConfigurationValue(this.contents, section) : this.contents;\n  }\n\n  getOverrideValue(section, overrideIdentifier) {\n    const overrideContents = this.getContentsForOverrideIdentifer(overrideIdentifier);\n    return overrideContents ? section ? getConfigurationValue(overrideContents, section) : overrideContents : undefined;\n  }\n\n  override(identifier) {\n    let overrideConfigurationModel = this.overrideConfigurations.get(identifier);\n\n    if (!overrideConfigurationModel) {\n      overrideConfigurationModel = this.createOverrideConfigurationModel(identifier);\n      this.overrideConfigurations.set(identifier, overrideConfigurationModel);\n    }\n\n    return overrideConfigurationModel;\n  }\n\n  merge(...others) {\n    const contents = objects.deepClone(this.contents);\n    const overrides = objects.deepClone(this.overrides);\n    const keys = [...this.keys];\n\n    for (const other of others) {\n      this.mergeContents(contents, other.contents);\n\n      for (const otherOverride of other.overrides) {\n        const [override] = overrides.filter(o => arrays.equals(o.identifiers, otherOverride.identifiers));\n\n        if (override) {\n          this.mergeContents(override.contents, otherOverride.contents);\n          override.keys.push(...otherOverride.keys);\n          override.keys = arrays.distinct(override.keys);\n        } else {\n          overrides.push(objects.deepClone(otherOverride));\n        }\n      }\n\n      for (const key of other.keys) {\n        if (keys.indexOf(key) === -1) {\n          keys.push(key);\n        }\n      }\n    }\n\n    return new ConfigurationModel(contents, keys, overrides);\n  }\n\n  freeze() {\n    this.isFrozen = true;\n    return this;\n  }\n\n  createOverrideConfigurationModel(identifier) {\n    const overrideContents = this.getContentsForOverrideIdentifer(identifier);\n\n    if (!overrideContents || typeof overrideContents !== 'object' || !Object.keys(overrideContents).length) {\n      // If there are no valid overrides, return self\n      return this;\n    }\n\n    let contents = {};\n\n    for (const key of arrays.distinct([...Object.keys(this.contents), ...Object.keys(overrideContents)])) {\n      let contentsForKey = this.contents[key];\n      let overrideContentsForKey = overrideContents[key]; // If there are override contents for the key, clone and merge otherwise use base contents\n\n      if (overrideContentsForKey) {\n        // Clone and merge only if base contents and override contents are of type object otherwise just override\n        if (typeof contentsForKey === 'object' && typeof overrideContentsForKey === 'object') {\n          contentsForKey = objects.deepClone(contentsForKey);\n          this.mergeContents(contentsForKey, overrideContentsForKey);\n        } else {\n          contentsForKey = overrideContentsForKey;\n        }\n      }\n\n      contents[key] = contentsForKey;\n    }\n\n    return new ConfigurationModel(contents, this.keys, this.overrides);\n  }\n\n  mergeContents(source, target) {\n    for (const key of Object.keys(target)) {\n      if (key in source) {\n        if (types.isObject(source[key]) && types.isObject(target[key])) {\n          this.mergeContents(source[key], target[key]);\n          continue;\n        }\n      }\n\n      source[key] = objects.deepClone(target[key]);\n    }\n  }\n\n  checkAndFreeze(data) {\n    if (this.isFrozen && !Object.isFrozen(data)) {\n      return objects.deepFreeze(data);\n    }\n\n    return data;\n  }\n\n  getContentsForOverrideIdentifer(identifier) {\n    let contentsForIdentifierOnly = null;\n    let contents = null;\n\n    const mergeContents = contentsToMerge => {\n      if (contentsToMerge) {\n        if (contents) {\n          this.mergeContents(contents, contentsToMerge);\n        } else {\n          contents = objects.deepClone(contentsToMerge);\n        }\n      }\n    };\n\n    for (const override of this.overrides) {\n      if (arrays.equals(override.identifiers, [identifier])) {\n        contentsForIdentifierOnly = override.contents;\n      } else if (override.identifiers.includes(identifier)) {\n        mergeContents(override.contents);\n      }\n    } // Merge contents of the identifier only at the end to take precedence.\n\n\n    mergeContents(contentsForIdentifierOnly);\n    return contents;\n  }\n\n  toJSON() {\n    return {\n      contents: this.contents,\n      overrides: this.overrides,\n      keys: this.keys\n    };\n  } // Update methods\n\n\n  setValue(key, value) {\n    this.addKey(key);\n    addToValueTree(this.contents, key, value, e => {\n      throw new Error(e);\n    });\n  }\n\n  removeValue(key) {\n    if (this.removeKey(key)) {\n      removeFromValueTree(this.contents, key);\n    }\n  }\n\n  addKey(key) {\n    let index = this.keys.length;\n\n    for (let i = 0; i < index; i++) {\n      if (key.indexOf(this.keys[i]) === 0) {\n        index = i;\n      }\n    }\n\n    this.keys.splice(index, 1, key);\n  }\n\n  removeKey(key) {\n    let index = this.keys.indexOf(key);\n\n    if (index !== -1) {\n      this.keys.splice(index, 1);\n      return true;\n    }\n\n    return false;\n  }\n\n}\nexport class DefaultConfigurationModel extends ConfigurationModel {\n  constructor(configurationDefaultsOverrides = {}) {\n    const properties = Registry.as(Extensions.Configuration).getConfigurationProperties();\n    const keys = Object.keys(properties);\n    const contents = Object.create(null);\n    const overrides = [];\n\n    for (const key in properties) {\n      const defaultOverrideValue = configurationDefaultsOverrides[key];\n      const value = defaultOverrideValue !== undefined ? defaultOverrideValue : properties[key].default;\n      addToValueTree(contents, key, value, message => console.error(`Conflict in default settings: ${message}`));\n    }\n\n    for (const key of Object.keys(contents)) {\n      if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n        overrides.push({\n          identifiers: overrideIdentifiersFromKey(key),\n          keys: Object.keys(contents[key]),\n          contents: toValuesTree(contents[key], message => console.error(`Conflict in default settings file: ${message}`))\n        });\n      }\n    }\n\n    super(contents, keys, overrides);\n  }\n\n}\nexport class Configuration {\n  constructor(_defaultConfiguration, _localUserConfiguration, _remoteUserConfiguration = new ConfigurationModel(), _workspaceConfiguration = new ConfigurationModel(), _folderConfigurations = new ResourceMap(), _memoryConfiguration = new ConfigurationModel(), _memoryConfigurationByResource = new ResourceMap(), _freeze = true) {\n    this._defaultConfiguration = _defaultConfiguration;\n    this._localUserConfiguration = _localUserConfiguration;\n    this._remoteUserConfiguration = _remoteUserConfiguration;\n    this._workspaceConfiguration = _workspaceConfiguration;\n    this._folderConfigurations = _folderConfigurations;\n    this._memoryConfiguration = _memoryConfiguration;\n    this._memoryConfigurationByResource = _memoryConfigurationByResource;\n    this._freeze = _freeze;\n    this._workspaceConsolidatedConfiguration = null;\n    this._foldersConsolidatedConfigurations = new ResourceMap();\n    this._userConfiguration = null;\n  }\n\n  getValue(section, overrides, workspace) {\n    const consolidateConfigurationModel = this.getConsolidateConfigurationModel(overrides, workspace);\n    return consolidateConfigurationModel.getValue(section);\n  }\n\n  updateValue(key, value, overrides = {}) {\n    let memoryConfiguration;\n\n    if (overrides.resource) {\n      memoryConfiguration = this._memoryConfigurationByResource.get(overrides.resource);\n\n      if (!memoryConfiguration) {\n        memoryConfiguration = new ConfigurationModel();\n\n        this._memoryConfigurationByResource.set(overrides.resource, memoryConfiguration);\n      }\n    } else {\n      memoryConfiguration = this._memoryConfiguration;\n    }\n\n    if (value === undefined) {\n      memoryConfiguration.removeValue(key);\n    } else {\n      memoryConfiguration.setValue(key, value);\n    }\n\n    if (!overrides.resource) {\n      this._workspaceConsolidatedConfiguration = null;\n    }\n  }\n\n  inspect(key, overrides, workspace) {\n    const consolidateConfigurationModel = this.getConsolidateConfigurationModel(overrides, workspace);\n    const folderConfigurationModel = this.getFolderConfigurationModelForResource(overrides.resource, workspace);\n    const memoryConfigurationModel = overrides.resource ? this._memoryConfigurationByResource.get(overrides.resource) || this._memoryConfiguration : this._memoryConfiguration;\n    const defaultValue = overrides.overrideIdentifier ? this._defaultConfiguration.freeze().override(overrides.overrideIdentifier).getValue(key) : this._defaultConfiguration.freeze().getValue(key);\n    const userValue = overrides.overrideIdentifier ? this.userConfiguration.freeze().override(overrides.overrideIdentifier).getValue(key) : this.userConfiguration.freeze().getValue(key);\n    const userLocalValue = overrides.overrideIdentifier ? this.localUserConfiguration.freeze().override(overrides.overrideIdentifier).getValue(key) : this.localUserConfiguration.freeze().getValue(key);\n    const userRemoteValue = overrides.overrideIdentifier ? this.remoteUserConfiguration.freeze().override(overrides.overrideIdentifier).getValue(key) : this.remoteUserConfiguration.freeze().getValue(key);\n    const workspaceValue = workspace ? overrides.overrideIdentifier ? this._workspaceConfiguration.freeze().override(overrides.overrideIdentifier).getValue(key) : this._workspaceConfiguration.freeze().getValue(key) : undefined; //Check on workspace exists or not because _workspaceConfiguration is never null\n\n    const workspaceFolderValue = folderConfigurationModel ? overrides.overrideIdentifier ? folderConfigurationModel.freeze().override(overrides.overrideIdentifier).getValue(key) : folderConfigurationModel.freeze().getValue(key) : undefined;\n    const memoryValue = overrides.overrideIdentifier ? memoryConfigurationModel.override(overrides.overrideIdentifier).getValue(key) : memoryConfigurationModel.getValue(key);\n    const value = consolidateConfigurationModel.getValue(key);\n    const overrideIdentifiers = arrays.distinct(arrays.flatten(consolidateConfigurationModel.overrides.map(override => override.identifiers))).filter(overrideIdentifier => consolidateConfigurationModel.getOverrideValue(key, overrideIdentifier) !== undefined);\n    return {\n      defaultValue: defaultValue,\n      userValue: userValue,\n      userLocalValue: userLocalValue,\n      userRemoteValue: userRemoteValue,\n      workspaceValue: workspaceValue,\n      workspaceFolderValue: workspaceFolderValue,\n      memoryValue: memoryValue,\n      value,\n      default: defaultValue !== undefined ? {\n        value: this._defaultConfiguration.freeze().getValue(key),\n        override: overrides.overrideIdentifier ? this._defaultConfiguration.freeze().getOverrideValue(key, overrides.overrideIdentifier) : undefined\n      } : undefined,\n      user: userValue !== undefined ? {\n        value: this.userConfiguration.freeze().getValue(key),\n        override: overrides.overrideIdentifier ? this.userConfiguration.freeze().getOverrideValue(key, overrides.overrideIdentifier) : undefined\n      } : undefined,\n      userLocal: userLocalValue !== undefined ? {\n        value: this.localUserConfiguration.freeze().getValue(key),\n        override: overrides.overrideIdentifier ? this.localUserConfiguration.freeze().getOverrideValue(key, overrides.overrideIdentifier) : undefined\n      } : undefined,\n      userRemote: userRemoteValue !== undefined ? {\n        value: this.remoteUserConfiguration.freeze().getValue(key),\n        override: overrides.overrideIdentifier ? this.remoteUserConfiguration.freeze().getOverrideValue(key, overrides.overrideIdentifier) : undefined\n      } : undefined,\n      workspace: workspaceValue !== undefined ? {\n        value: this._workspaceConfiguration.freeze().getValue(key),\n        override: overrides.overrideIdentifier ? this._workspaceConfiguration.freeze().getOverrideValue(key, overrides.overrideIdentifier) : undefined\n      } : undefined,\n      workspaceFolder: workspaceFolderValue !== undefined ? {\n        value: folderConfigurationModel === null || folderConfigurationModel === void 0 ? void 0 : folderConfigurationModel.freeze().getValue(key),\n        override: overrides.overrideIdentifier ? folderConfigurationModel === null || folderConfigurationModel === void 0 ? void 0 : folderConfigurationModel.freeze().getOverrideValue(key, overrides.overrideIdentifier) : undefined\n      } : undefined,\n      memory: memoryValue !== undefined ? {\n        value: memoryConfigurationModel.getValue(key),\n        override: overrides.overrideIdentifier ? memoryConfigurationModel.getOverrideValue(key, overrides.overrideIdentifier) : undefined\n      } : undefined,\n      overrideIdentifiers: overrideIdentifiers.length ? overrideIdentifiers : undefined\n    };\n  }\n\n  get userConfiguration() {\n    if (!this._userConfiguration) {\n      this._userConfiguration = this._remoteUserConfiguration.isEmpty() ? this._localUserConfiguration : this._localUserConfiguration.merge(this._remoteUserConfiguration);\n\n      if (this._freeze) {\n        this._userConfiguration.freeze();\n      }\n    }\n\n    return this._userConfiguration;\n  }\n\n  get localUserConfiguration() {\n    return this._localUserConfiguration;\n  }\n\n  get remoteUserConfiguration() {\n    return this._remoteUserConfiguration;\n  }\n\n  getConsolidateConfigurationModel(overrides, workspace) {\n    let configurationModel = this.getConsolidatedConfigurationModelForResource(overrides, workspace);\n    return overrides.overrideIdentifier ? configurationModel.override(overrides.overrideIdentifier) : configurationModel;\n  }\n\n  getConsolidatedConfigurationModelForResource({\n    resource\n  }, workspace) {\n    let consolidateConfiguration = this.getWorkspaceConsolidatedConfiguration();\n\n    if (workspace && resource) {\n      const root = workspace.getFolder(resource);\n\n      if (root) {\n        consolidateConfiguration = this.getFolderConsolidatedConfiguration(root.uri) || consolidateConfiguration;\n      }\n\n      const memoryConfigurationForResource = this._memoryConfigurationByResource.get(resource);\n\n      if (memoryConfigurationForResource) {\n        consolidateConfiguration = consolidateConfiguration.merge(memoryConfigurationForResource);\n      }\n    }\n\n    return consolidateConfiguration;\n  }\n\n  getWorkspaceConsolidatedConfiguration() {\n    if (!this._workspaceConsolidatedConfiguration) {\n      this._workspaceConsolidatedConfiguration = this._defaultConfiguration.merge(this.userConfiguration, this._workspaceConfiguration, this._memoryConfiguration);\n\n      if (this._freeze) {\n        this._workspaceConfiguration = this._workspaceConfiguration.freeze();\n      }\n    }\n\n    return this._workspaceConsolidatedConfiguration;\n  }\n\n  getFolderConsolidatedConfiguration(folder) {\n    let folderConsolidatedConfiguration = this._foldersConsolidatedConfigurations.get(folder);\n\n    if (!folderConsolidatedConfiguration) {\n      const workspaceConsolidateConfiguration = this.getWorkspaceConsolidatedConfiguration();\n\n      const folderConfiguration = this._folderConfigurations.get(folder);\n\n      if (folderConfiguration) {\n        folderConsolidatedConfiguration = workspaceConsolidateConfiguration.merge(folderConfiguration);\n\n        if (this._freeze) {\n          folderConsolidatedConfiguration = folderConsolidatedConfiguration.freeze();\n        }\n\n        this._foldersConsolidatedConfigurations.set(folder, folderConsolidatedConfiguration);\n      } else {\n        folderConsolidatedConfiguration = workspaceConsolidateConfiguration;\n      }\n    }\n\n    return folderConsolidatedConfiguration;\n  }\n\n  getFolderConfigurationModelForResource(resource, workspace) {\n    if (workspace && resource) {\n      const root = workspace.getFolder(resource);\n\n      if (root) {\n        return this._folderConfigurations.get(root.uri);\n      }\n    }\n\n    return undefined;\n  }\n\n  toData() {\n    return {\n      defaults: {\n        contents: this._defaultConfiguration.contents,\n        overrides: this._defaultConfiguration.overrides,\n        keys: this._defaultConfiguration.keys\n      },\n      user: {\n        contents: this.userConfiguration.contents,\n        overrides: this.userConfiguration.overrides,\n        keys: this.userConfiguration.keys\n      },\n      workspace: {\n        contents: this._workspaceConfiguration.contents,\n        overrides: this._workspaceConfiguration.overrides,\n        keys: this._workspaceConfiguration.keys\n      },\n      folders: [...this._folderConfigurations.keys()].reduce((result, folder) => {\n        const {\n          contents,\n          overrides,\n          keys\n        } = this._folderConfigurations.get(folder);\n\n        result.push([folder, {\n          contents,\n          overrides,\n          keys\n        }]);\n        return result;\n      }, [])\n    };\n  }\n\n  static parse(data) {\n    const defaultConfiguration = this.parseConfigurationModel(data.defaults);\n    const userConfiguration = this.parseConfigurationModel(data.user);\n    const workspaceConfiguration = this.parseConfigurationModel(data.workspace);\n    const folders = data.folders.reduce((result, value) => {\n      result.set(URI.revive(value[0]), this.parseConfigurationModel(value[1]));\n      return result;\n    }, new ResourceMap());\n    return new Configuration(defaultConfiguration, userConfiguration, new ConfigurationModel(), workspaceConfiguration, folders, new ConfigurationModel(), new ResourceMap(), false);\n  }\n\n  static parseConfigurationModel(model) {\n    return new ConfigurationModel(model.contents, model.keys, model.overrides).freeze();\n  }\n\n}\nexport class ConfigurationChangeEvent {\n  constructor(change, previous, currentConfiguraiton, currentWorkspace) {\n    this.change = change;\n    this.previous = previous;\n    this.currentConfiguraiton = currentConfiguraiton;\n    this.currentWorkspace = currentWorkspace;\n    this._previousConfiguration = undefined;\n    const keysSet = new Set();\n    change.keys.forEach(key => keysSet.add(key));\n    change.overrides.forEach(([, keys]) => keys.forEach(key => keysSet.add(key)));\n    this.affectedKeys = [...keysSet.values()];\n    const configurationModel = new ConfigurationModel();\n    this.affectedKeys.forEach(key => configurationModel.setValue(key, {}));\n    this.affectedKeysTree = configurationModel.contents;\n  }\n\n  get previousConfiguration() {\n    if (!this._previousConfiguration && this.previous) {\n      this._previousConfiguration = Configuration.parse(this.previous.data);\n    }\n\n    return this._previousConfiguration;\n  }\n\n  affectsConfiguration(section, overrides) {\n    var _a;\n\n    if (this.doesAffectedKeysTreeContains(this.affectedKeysTree, section)) {\n      if (overrides) {\n        const value1 = this.previousConfiguration ? this.previousConfiguration.getValue(section, overrides, (_a = this.previous) === null || _a === void 0 ? void 0 : _a.workspace) : undefined;\n        const value2 = this.currentConfiguraiton.getValue(section, overrides, this.currentWorkspace);\n        return !objects.equals(value1, value2);\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  doesAffectedKeysTreeContains(affectedKeysTree, section) {\n    let requestedTree = toValuesTree({\n      [section]: true\n    }, () => {});\n    let key;\n\n    while (typeof requestedTree === 'object' && (key = Object.keys(requestedTree)[0])) {\n      // Only one key should present, since we added only one property\n      affectedKeysTree = affectedKeysTree[key];\n\n      if (!affectedKeysTree) {\n        return false; // Requested tree is not found\n      }\n\n      requestedTree = requestedTree[key];\n    }\n\n    return true;\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/platform/configuration/common/configurationModels.js"],"names":["arrays","ResourceMap","objects","types","URI","addToValueTree","getConfigurationValue","removeFromValueTree","toValuesTree","Extensions","overrideIdentifiersFromKey","OVERRIDE_PROPERTY_REGEX","Registry","ConfigurationModel","constructor","_contents","_keys","_overrides","isFrozen","overrideConfigurations","Map","contents","checkAndFreeze","overrides","keys","isEmpty","length","Object","getValue","section","getOverrideValue","overrideIdentifier","overrideContents","getContentsForOverrideIdentifer","undefined","override","identifier","overrideConfigurationModel","get","createOverrideConfigurationModel","set","merge","others","deepClone","other","mergeContents","otherOverride","filter","o","equals","identifiers","push","distinct","key","indexOf","freeze","contentsForKey","overrideContentsForKey","source","target","isObject","data","deepFreeze","contentsForIdentifierOnly","contentsToMerge","includes","toJSON","setValue","value","addKey","e","Error","removeValue","removeKey","index","i","splice","DefaultConfigurationModel","configurationDefaultsOverrides","properties","as","Configuration","getConfigurationProperties","create","defaultOverrideValue","default","message","console","error","test","_defaultConfiguration","_localUserConfiguration","_remoteUserConfiguration","_workspaceConfiguration","_folderConfigurations","_memoryConfiguration","_memoryConfigurationByResource","_freeze","_workspaceConsolidatedConfiguration","_foldersConsolidatedConfigurations","_userConfiguration","workspace","consolidateConfigurationModel","getConsolidateConfigurationModel","updateValue","memoryConfiguration","resource","inspect","folderConfigurationModel","getFolderConfigurationModelForResource","memoryConfigurationModel","defaultValue","userValue","userConfiguration","userLocalValue","localUserConfiguration","userRemoteValue","remoteUserConfiguration","workspaceValue","workspaceFolderValue","memoryValue","overrideIdentifiers","flatten","map","user","userLocal","userRemote","workspaceFolder","memory","configurationModel","getConsolidatedConfigurationModelForResource","consolidateConfiguration","getWorkspaceConsolidatedConfiguration","root","getFolder","getFolderConsolidatedConfiguration","uri","memoryConfigurationForResource","folder","folderConsolidatedConfiguration","workspaceConsolidateConfiguration","folderConfiguration","toData","defaults","folders","reduce","result","parse","defaultConfiguration","parseConfigurationModel","workspaceConfiguration","revive","model","ConfigurationChangeEvent","change","previous","currentConfiguraiton","currentWorkspace","_previousConfiguration","keysSet","Set","forEach","add","affectedKeys","values","affectedKeysTree","previousConfiguration","affectsConfiguration","_a","doesAffectedKeysTreeContains","value1","value2","requestedTree"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as arrays from '../../../base/common/arrays.js';\nimport { ResourceMap } from '../../../base/common/map.js';\nimport * as objects from '../../../base/common/objects.js';\nimport * as types from '../../../base/common/types.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { addToValueTree, getConfigurationValue, removeFromValueTree, toValuesTree } from './configuration.js';\nimport { Extensions, overrideIdentifiersFromKey, OVERRIDE_PROPERTY_REGEX } from './configurationRegistry.js';\nimport { Registry } from '../../registry/common/platform.js';\nexport class ConfigurationModel {\n    constructor(_contents = {}, _keys = [], _overrides = []) {\n        this._contents = _contents;\n        this._keys = _keys;\n        this._overrides = _overrides;\n        this.isFrozen = false;\n        this.overrideConfigurations = new Map();\n    }\n    get contents() {\n        return this.checkAndFreeze(this._contents);\n    }\n    get overrides() {\n        return this.checkAndFreeze(this._overrides);\n    }\n    get keys() {\n        return this.checkAndFreeze(this._keys);\n    }\n    isEmpty() {\n        return this._keys.length === 0 && Object.keys(this._contents).length === 0 && this._overrides.length === 0;\n    }\n    getValue(section) {\n        return section ? getConfigurationValue(this.contents, section) : this.contents;\n    }\n    getOverrideValue(section, overrideIdentifier) {\n        const overrideContents = this.getContentsForOverrideIdentifer(overrideIdentifier);\n        return overrideContents\n            ? section ? getConfigurationValue(overrideContents, section) : overrideContents\n            : undefined;\n    }\n    override(identifier) {\n        let overrideConfigurationModel = this.overrideConfigurations.get(identifier);\n        if (!overrideConfigurationModel) {\n            overrideConfigurationModel = this.createOverrideConfigurationModel(identifier);\n            this.overrideConfigurations.set(identifier, overrideConfigurationModel);\n        }\n        return overrideConfigurationModel;\n    }\n    merge(...others) {\n        const contents = objects.deepClone(this.contents);\n        const overrides = objects.deepClone(this.overrides);\n        const keys = [...this.keys];\n        for (const other of others) {\n            this.mergeContents(contents, other.contents);\n            for (const otherOverride of other.overrides) {\n                const [override] = overrides.filter(o => arrays.equals(o.identifiers, otherOverride.identifiers));\n                if (override) {\n                    this.mergeContents(override.contents, otherOverride.contents);\n                    override.keys.push(...otherOverride.keys);\n                    override.keys = arrays.distinct(override.keys);\n                }\n                else {\n                    overrides.push(objects.deepClone(otherOverride));\n                }\n            }\n            for (const key of other.keys) {\n                if (keys.indexOf(key) === -1) {\n                    keys.push(key);\n                }\n            }\n        }\n        return new ConfigurationModel(contents, keys, overrides);\n    }\n    freeze() {\n        this.isFrozen = true;\n        return this;\n    }\n    createOverrideConfigurationModel(identifier) {\n        const overrideContents = this.getContentsForOverrideIdentifer(identifier);\n        if (!overrideContents || typeof overrideContents !== 'object' || !Object.keys(overrideContents).length) {\n            // If there are no valid overrides, return self\n            return this;\n        }\n        let contents = {};\n        for (const key of arrays.distinct([...Object.keys(this.contents), ...Object.keys(overrideContents)])) {\n            let contentsForKey = this.contents[key];\n            let overrideContentsForKey = overrideContents[key];\n            // If there are override contents for the key, clone and merge otherwise use base contents\n            if (overrideContentsForKey) {\n                // Clone and merge only if base contents and override contents are of type object otherwise just override\n                if (typeof contentsForKey === 'object' && typeof overrideContentsForKey === 'object') {\n                    contentsForKey = objects.deepClone(contentsForKey);\n                    this.mergeContents(contentsForKey, overrideContentsForKey);\n                }\n                else {\n                    contentsForKey = overrideContentsForKey;\n                }\n            }\n            contents[key] = contentsForKey;\n        }\n        return new ConfigurationModel(contents, this.keys, this.overrides);\n    }\n    mergeContents(source, target) {\n        for (const key of Object.keys(target)) {\n            if (key in source) {\n                if (types.isObject(source[key]) && types.isObject(target[key])) {\n                    this.mergeContents(source[key], target[key]);\n                    continue;\n                }\n            }\n            source[key] = objects.deepClone(target[key]);\n        }\n    }\n    checkAndFreeze(data) {\n        if (this.isFrozen && !Object.isFrozen(data)) {\n            return objects.deepFreeze(data);\n        }\n        return data;\n    }\n    getContentsForOverrideIdentifer(identifier) {\n        let contentsForIdentifierOnly = null;\n        let contents = null;\n        const mergeContents = (contentsToMerge) => {\n            if (contentsToMerge) {\n                if (contents) {\n                    this.mergeContents(contents, contentsToMerge);\n                }\n                else {\n                    contents = objects.deepClone(contentsToMerge);\n                }\n            }\n        };\n        for (const override of this.overrides) {\n            if (arrays.equals(override.identifiers, [identifier])) {\n                contentsForIdentifierOnly = override.contents;\n            }\n            else if (override.identifiers.includes(identifier)) {\n                mergeContents(override.contents);\n            }\n        }\n        // Merge contents of the identifier only at the end to take precedence.\n        mergeContents(contentsForIdentifierOnly);\n        return contents;\n    }\n    toJSON() {\n        return {\n            contents: this.contents,\n            overrides: this.overrides,\n            keys: this.keys\n        };\n    }\n    // Update methods\n    setValue(key, value) {\n        this.addKey(key);\n        addToValueTree(this.contents, key, value, e => { throw new Error(e); });\n    }\n    removeValue(key) {\n        if (this.removeKey(key)) {\n            removeFromValueTree(this.contents, key);\n        }\n    }\n    addKey(key) {\n        let index = this.keys.length;\n        for (let i = 0; i < index; i++) {\n            if (key.indexOf(this.keys[i]) === 0) {\n                index = i;\n            }\n        }\n        this.keys.splice(index, 1, key);\n    }\n    removeKey(key) {\n        let index = this.keys.indexOf(key);\n        if (index !== -1) {\n            this.keys.splice(index, 1);\n            return true;\n        }\n        return false;\n    }\n}\nexport class DefaultConfigurationModel extends ConfigurationModel {\n    constructor(configurationDefaultsOverrides = {}) {\n        const properties = Registry.as(Extensions.Configuration).getConfigurationProperties();\n        const keys = Object.keys(properties);\n        const contents = Object.create(null);\n        const overrides = [];\n        for (const key in properties) {\n            const defaultOverrideValue = configurationDefaultsOverrides[key];\n            const value = defaultOverrideValue !== undefined ? defaultOverrideValue : properties[key].default;\n            addToValueTree(contents, key, value, message => console.error(`Conflict in default settings: ${message}`));\n        }\n        for (const key of Object.keys(contents)) {\n            if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n                overrides.push({\n                    identifiers: overrideIdentifiersFromKey(key),\n                    keys: Object.keys(contents[key]),\n                    contents: toValuesTree(contents[key], message => console.error(`Conflict in default settings file: ${message}`)),\n                });\n            }\n        }\n        super(contents, keys, overrides);\n    }\n}\nexport class Configuration {\n    constructor(_defaultConfiguration, _localUserConfiguration, _remoteUserConfiguration = new ConfigurationModel(), _workspaceConfiguration = new ConfigurationModel(), _folderConfigurations = new ResourceMap(), _memoryConfiguration = new ConfigurationModel(), _memoryConfigurationByResource = new ResourceMap(), _freeze = true) {\n        this._defaultConfiguration = _defaultConfiguration;\n        this._localUserConfiguration = _localUserConfiguration;\n        this._remoteUserConfiguration = _remoteUserConfiguration;\n        this._workspaceConfiguration = _workspaceConfiguration;\n        this._folderConfigurations = _folderConfigurations;\n        this._memoryConfiguration = _memoryConfiguration;\n        this._memoryConfigurationByResource = _memoryConfigurationByResource;\n        this._freeze = _freeze;\n        this._workspaceConsolidatedConfiguration = null;\n        this._foldersConsolidatedConfigurations = new ResourceMap();\n        this._userConfiguration = null;\n    }\n    getValue(section, overrides, workspace) {\n        const consolidateConfigurationModel = this.getConsolidateConfigurationModel(overrides, workspace);\n        return consolidateConfigurationModel.getValue(section);\n    }\n    updateValue(key, value, overrides = {}) {\n        let memoryConfiguration;\n        if (overrides.resource) {\n            memoryConfiguration = this._memoryConfigurationByResource.get(overrides.resource);\n            if (!memoryConfiguration) {\n                memoryConfiguration = new ConfigurationModel();\n                this._memoryConfigurationByResource.set(overrides.resource, memoryConfiguration);\n            }\n        }\n        else {\n            memoryConfiguration = this._memoryConfiguration;\n        }\n        if (value === undefined) {\n            memoryConfiguration.removeValue(key);\n        }\n        else {\n            memoryConfiguration.setValue(key, value);\n        }\n        if (!overrides.resource) {\n            this._workspaceConsolidatedConfiguration = null;\n        }\n    }\n    inspect(key, overrides, workspace) {\n        const consolidateConfigurationModel = this.getConsolidateConfigurationModel(overrides, workspace);\n        const folderConfigurationModel = this.getFolderConfigurationModelForResource(overrides.resource, workspace);\n        const memoryConfigurationModel = overrides.resource ? this._memoryConfigurationByResource.get(overrides.resource) || this._memoryConfiguration : this._memoryConfiguration;\n        const defaultValue = overrides.overrideIdentifier ? this._defaultConfiguration.freeze().override(overrides.overrideIdentifier).getValue(key) : this._defaultConfiguration.freeze().getValue(key);\n        const userValue = overrides.overrideIdentifier ? this.userConfiguration.freeze().override(overrides.overrideIdentifier).getValue(key) : this.userConfiguration.freeze().getValue(key);\n        const userLocalValue = overrides.overrideIdentifier ? this.localUserConfiguration.freeze().override(overrides.overrideIdentifier).getValue(key) : this.localUserConfiguration.freeze().getValue(key);\n        const userRemoteValue = overrides.overrideIdentifier ? this.remoteUserConfiguration.freeze().override(overrides.overrideIdentifier).getValue(key) : this.remoteUserConfiguration.freeze().getValue(key);\n        const workspaceValue = workspace ? overrides.overrideIdentifier ? this._workspaceConfiguration.freeze().override(overrides.overrideIdentifier).getValue(key) : this._workspaceConfiguration.freeze().getValue(key) : undefined; //Check on workspace exists or not because _workspaceConfiguration is never null\n        const workspaceFolderValue = folderConfigurationModel ? overrides.overrideIdentifier ? folderConfigurationModel.freeze().override(overrides.overrideIdentifier).getValue(key) : folderConfigurationModel.freeze().getValue(key) : undefined;\n        const memoryValue = overrides.overrideIdentifier ? memoryConfigurationModel.override(overrides.overrideIdentifier).getValue(key) : memoryConfigurationModel.getValue(key);\n        const value = consolidateConfigurationModel.getValue(key);\n        const overrideIdentifiers = arrays.distinct(arrays.flatten(consolidateConfigurationModel.overrides.map(override => override.identifiers))).filter(overrideIdentifier => consolidateConfigurationModel.getOverrideValue(key, overrideIdentifier) !== undefined);\n        return {\n            defaultValue: defaultValue,\n            userValue: userValue,\n            userLocalValue: userLocalValue,\n            userRemoteValue: userRemoteValue,\n            workspaceValue: workspaceValue,\n            workspaceFolderValue: workspaceFolderValue,\n            memoryValue: memoryValue,\n            value,\n            default: defaultValue !== undefined ? { value: this._defaultConfiguration.freeze().getValue(key), override: overrides.overrideIdentifier ? this._defaultConfiguration.freeze().getOverrideValue(key, overrides.overrideIdentifier) : undefined } : undefined,\n            user: userValue !== undefined ? { value: this.userConfiguration.freeze().getValue(key), override: overrides.overrideIdentifier ? this.userConfiguration.freeze().getOverrideValue(key, overrides.overrideIdentifier) : undefined } : undefined,\n            userLocal: userLocalValue !== undefined ? { value: this.localUserConfiguration.freeze().getValue(key), override: overrides.overrideIdentifier ? this.localUserConfiguration.freeze().getOverrideValue(key, overrides.overrideIdentifier) : undefined } : undefined,\n            userRemote: userRemoteValue !== undefined ? { value: this.remoteUserConfiguration.freeze().getValue(key), override: overrides.overrideIdentifier ? this.remoteUserConfiguration.freeze().getOverrideValue(key, overrides.overrideIdentifier) : undefined } : undefined,\n            workspace: workspaceValue !== undefined ? { value: this._workspaceConfiguration.freeze().getValue(key), override: overrides.overrideIdentifier ? this._workspaceConfiguration.freeze().getOverrideValue(key, overrides.overrideIdentifier) : undefined } : undefined,\n            workspaceFolder: workspaceFolderValue !== undefined ? { value: folderConfigurationModel === null || folderConfigurationModel === void 0 ? void 0 : folderConfigurationModel.freeze().getValue(key), override: overrides.overrideIdentifier ? folderConfigurationModel === null || folderConfigurationModel === void 0 ? void 0 : folderConfigurationModel.freeze().getOverrideValue(key, overrides.overrideIdentifier) : undefined } : undefined,\n            memory: memoryValue !== undefined ? { value: memoryConfigurationModel.getValue(key), override: overrides.overrideIdentifier ? memoryConfigurationModel.getOverrideValue(key, overrides.overrideIdentifier) : undefined } : undefined,\n            overrideIdentifiers: overrideIdentifiers.length ? overrideIdentifiers : undefined\n        };\n    }\n    get userConfiguration() {\n        if (!this._userConfiguration) {\n            this._userConfiguration = this._remoteUserConfiguration.isEmpty() ? this._localUserConfiguration : this._localUserConfiguration.merge(this._remoteUserConfiguration);\n            if (this._freeze) {\n                this._userConfiguration.freeze();\n            }\n        }\n        return this._userConfiguration;\n    }\n    get localUserConfiguration() {\n        return this._localUserConfiguration;\n    }\n    get remoteUserConfiguration() {\n        return this._remoteUserConfiguration;\n    }\n    getConsolidateConfigurationModel(overrides, workspace) {\n        let configurationModel = this.getConsolidatedConfigurationModelForResource(overrides, workspace);\n        return overrides.overrideIdentifier ? configurationModel.override(overrides.overrideIdentifier) : configurationModel;\n    }\n    getConsolidatedConfigurationModelForResource({ resource }, workspace) {\n        let consolidateConfiguration = this.getWorkspaceConsolidatedConfiguration();\n        if (workspace && resource) {\n            const root = workspace.getFolder(resource);\n            if (root) {\n                consolidateConfiguration = this.getFolderConsolidatedConfiguration(root.uri) || consolidateConfiguration;\n            }\n            const memoryConfigurationForResource = this._memoryConfigurationByResource.get(resource);\n            if (memoryConfigurationForResource) {\n                consolidateConfiguration = consolidateConfiguration.merge(memoryConfigurationForResource);\n            }\n        }\n        return consolidateConfiguration;\n    }\n    getWorkspaceConsolidatedConfiguration() {\n        if (!this._workspaceConsolidatedConfiguration) {\n            this._workspaceConsolidatedConfiguration = this._defaultConfiguration.merge(this.userConfiguration, this._workspaceConfiguration, this._memoryConfiguration);\n            if (this._freeze) {\n                this._workspaceConfiguration = this._workspaceConfiguration.freeze();\n            }\n        }\n        return this._workspaceConsolidatedConfiguration;\n    }\n    getFolderConsolidatedConfiguration(folder) {\n        let folderConsolidatedConfiguration = this._foldersConsolidatedConfigurations.get(folder);\n        if (!folderConsolidatedConfiguration) {\n            const workspaceConsolidateConfiguration = this.getWorkspaceConsolidatedConfiguration();\n            const folderConfiguration = this._folderConfigurations.get(folder);\n            if (folderConfiguration) {\n                folderConsolidatedConfiguration = workspaceConsolidateConfiguration.merge(folderConfiguration);\n                if (this._freeze) {\n                    folderConsolidatedConfiguration = folderConsolidatedConfiguration.freeze();\n                }\n                this._foldersConsolidatedConfigurations.set(folder, folderConsolidatedConfiguration);\n            }\n            else {\n                folderConsolidatedConfiguration = workspaceConsolidateConfiguration;\n            }\n        }\n        return folderConsolidatedConfiguration;\n    }\n    getFolderConfigurationModelForResource(resource, workspace) {\n        if (workspace && resource) {\n            const root = workspace.getFolder(resource);\n            if (root) {\n                return this._folderConfigurations.get(root.uri);\n            }\n        }\n        return undefined;\n    }\n    toData() {\n        return {\n            defaults: {\n                contents: this._defaultConfiguration.contents,\n                overrides: this._defaultConfiguration.overrides,\n                keys: this._defaultConfiguration.keys\n            },\n            user: {\n                contents: this.userConfiguration.contents,\n                overrides: this.userConfiguration.overrides,\n                keys: this.userConfiguration.keys\n            },\n            workspace: {\n                contents: this._workspaceConfiguration.contents,\n                overrides: this._workspaceConfiguration.overrides,\n                keys: this._workspaceConfiguration.keys\n            },\n            folders: [...this._folderConfigurations.keys()].reduce((result, folder) => {\n                const { contents, overrides, keys } = this._folderConfigurations.get(folder);\n                result.push([folder, { contents, overrides, keys }]);\n                return result;\n            }, [])\n        };\n    }\n    static parse(data) {\n        const defaultConfiguration = this.parseConfigurationModel(data.defaults);\n        const userConfiguration = this.parseConfigurationModel(data.user);\n        const workspaceConfiguration = this.parseConfigurationModel(data.workspace);\n        const folders = data.folders.reduce((result, value) => {\n            result.set(URI.revive(value[0]), this.parseConfigurationModel(value[1]));\n            return result;\n        }, new ResourceMap());\n        return new Configuration(defaultConfiguration, userConfiguration, new ConfigurationModel(), workspaceConfiguration, folders, new ConfigurationModel(), new ResourceMap(), false);\n    }\n    static parseConfigurationModel(model) {\n        return new ConfigurationModel(model.contents, model.keys, model.overrides).freeze();\n    }\n}\nexport class ConfigurationChangeEvent {\n    constructor(change, previous, currentConfiguraiton, currentWorkspace) {\n        this.change = change;\n        this.previous = previous;\n        this.currentConfiguraiton = currentConfiguraiton;\n        this.currentWorkspace = currentWorkspace;\n        this._previousConfiguration = undefined;\n        const keysSet = new Set();\n        change.keys.forEach(key => keysSet.add(key));\n        change.overrides.forEach(([, keys]) => keys.forEach(key => keysSet.add(key)));\n        this.affectedKeys = [...keysSet.values()];\n        const configurationModel = new ConfigurationModel();\n        this.affectedKeys.forEach(key => configurationModel.setValue(key, {}));\n        this.affectedKeysTree = configurationModel.contents;\n    }\n    get previousConfiguration() {\n        if (!this._previousConfiguration && this.previous) {\n            this._previousConfiguration = Configuration.parse(this.previous.data);\n        }\n        return this._previousConfiguration;\n    }\n    affectsConfiguration(section, overrides) {\n        var _a;\n        if (this.doesAffectedKeysTreeContains(this.affectedKeysTree, section)) {\n            if (overrides) {\n                const value1 = this.previousConfiguration ? this.previousConfiguration.getValue(section, overrides, (_a = this.previous) === null || _a === void 0 ? void 0 : _a.workspace) : undefined;\n                const value2 = this.currentConfiguraiton.getValue(section, overrides, this.currentWorkspace);\n                return !objects.equals(value1, value2);\n            }\n            return true;\n        }\n        return false;\n    }\n    doesAffectedKeysTreeContains(affectedKeysTree, section) {\n        let requestedTree = toValuesTree({ [section]: true }, () => { });\n        let key;\n        while (typeof requestedTree === 'object' && (key = Object.keys(requestedTree)[0])) { // Only one key should present, since we added only one property\n            affectedKeysTree = affectedKeysTree[key];\n            if (!affectedKeysTree) {\n                return false; // Requested tree is not found\n            }\n            requestedTree = requestedTree[key];\n        }\n        return true;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}