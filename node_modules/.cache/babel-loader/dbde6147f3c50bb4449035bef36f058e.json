{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { distinct } from '../../../base/common/arrays.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport * as types from '../../../base/common/types.js';\nimport * as nls from '../../../nls.js';\nimport { Extensions as JSONExtensions } from '../../jsonschemas/common/jsonContributionRegistry.js';\nimport { Registry } from '../../registry/common/platform.js';\nexport const Extensions = {\n  Configuration: 'base.contributions.configuration'\n};\nexport const allSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport const applicationSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport const machineSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport const machineOverridableSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport const windowSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport const resourceSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport const resourceLanguageSettingsSchemaId = 'vscode://schemas/settings/resourceLanguage';\nconst contributionRegistry = Registry.as(JSONExtensions.JSONContribution);\n\nclass ConfigurationRegistry {\n  constructor() {\n    this.overrideIdentifiers = new Set();\n    this._onDidSchemaChange = new Emitter();\n    this._onDidUpdateConfiguration = new Emitter();\n    this.configurationDefaultsOverrides = new Map();\n    this.defaultLanguageConfigurationOverridesNode = {\n      id: 'defaultOverrides',\n      title: nls.localize('defaultLanguageConfigurationOverrides.title', \"Default Language Configuration Overrides\"),\n      properties: {}\n    };\n    this.configurationContributors = [this.defaultLanguageConfigurationOverridesNode];\n    this.resourceLanguageSettingsSchema = {\n      properties: {},\n      patternProperties: {},\n      additionalProperties: false,\n      errorMessage: 'Unknown editor configuration setting',\n      allowTrailingCommas: true,\n      allowComments: true\n    };\n    this.configurationProperties = {};\n    this.excludedConfigurationProperties = {};\n    contributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);\n    this.registerOverridePropertyPatternKey();\n  }\n\n  registerConfiguration(configuration, validate = true) {\n    this.registerConfigurations([configuration], validate);\n  }\n\n  registerConfigurations(configurations, validate = true) {\n    const properties = this.doRegisterConfigurations(configurations, validate);\n    contributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);\n\n    this._onDidSchemaChange.fire();\n\n    this._onDidUpdateConfiguration.fire({\n      properties\n    });\n  }\n\n  registerDefaultConfigurations(configurationDefaults) {\n    var _a;\n\n    const properties = [];\n    const overrideIdentifiers = [];\n\n    for (const {\n      overrides,\n      source\n    } of configurationDefaults) {\n      for (const key in overrides) {\n        properties.push(key);\n\n        if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n          const defaultValue = Object.assign(Object.assign({}, ((_a = this.configurationDefaultsOverrides.get(key)) === null || _a === void 0 ? void 0 : _a.value) || {}), overrides[key]);\n          this.configurationDefaultsOverrides.set(key, {\n            source,\n            value: defaultValue\n          });\n          const property = {\n            type: 'object',\n            default: defaultValue,\n            description: nls.localize('defaultLanguageConfiguration.description', \"Configure settings to be overridden for {0} language.\", key),\n            $ref: resourceLanguageSettingsSchemaId,\n            defaultDefaultValue: defaultValue,\n            source: types.isString(source) ? undefined : source\n          };\n          overrideIdentifiers.push(...overrideIdentifiersFromKey(key));\n          this.configurationProperties[key] = property;\n          this.defaultLanguageConfigurationOverridesNode.properties[key] = property;\n        } else {\n          this.configurationDefaultsOverrides.set(key, {\n            value: overrides[key],\n            source\n          });\n          const property = this.configurationProperties[key];\n\n          if (property) {\n            this.updatePropertyDefaultValue(key, property);\n            this.updateSchema(key, property);\n          }\n        }\n      }\n    }\n\n    this.registerOverrideIdentifiers(overrideIdentifiers);\n\n    this._onDidSchemaChange.fire();\n\n    this._onDidUpdateConfiguration.fire({\n      properties,\n      defaultsOverrides: true\n    });\n  }\n\n  registerOverrideIdentifiers(overrideIdentifiers) {\n    for (const overrideIdentifier of overrideIdentifiers) {\n      this.overrideIdentifiers.add(overrideIdentifier);\n    }\n\n    this.updateOverridePropertyPatternKey();\n  }\n\n  doRegisterConfigurations(configurations, validate) {\n    const properties = [];\n    configurations.forEach(configuration => {\n      properties.push(...this.validateAndRegisterProperties(configuration, validate, configuration.extensionInfo, configuration.restrictedProperties)); // fills in defaults\n\n      this.configurationContributors.push(configuration);\n      this.registerJSONConfiguration(configuration);\n    });\n    return properties;\n  }\n\n  validateAndRegisterProperties(configuration, validate = true, extensionInfo, restrictedProperties, scope = 3\n  /* WINDOW */\n  ) {\n    scope = types.isUndefinedOrNull(configuration.scope) ? scope : configuration.scope;\n    let propertyKeys = [];\n    let properties = configuration.properties;\n\n    if (properties) {\n      for (let key in properties) {\n        if (validate && validateProperty(key)) {\n          delete properties[key];\n          continue;\n        }\n\n        const property = properties[key];\n        property.source = extensionInfo; // update default value\n\n        property.defaultDefaultValue = properties[key].default;\n        this.updatePropertyDefaultValue(key, property); // update scope\n\n        if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n          property.scope = undefined; // No scope for overridable properties `[${identifier}]`\n        } else {\n          property.scope = types.isUndefinedOrNull(property.scope) ? scope : property.scope;\n          property.restricted = types.isUndefinedOrNull(property.restricted) ? !!(restrictedProperties === null || restrictedProperties === void 0 ? void 0 : restrictedProperties.includes(key)) : property.restricted;\n        } // Add to properties maps\n        // Property is included by default if 'included' is unspecified\n\n\n        if (properties[key].hasOwnProperty('included') && !properties[key].included) {\n          this.excludedConfigurationProperties[key] = properties[key];\n          delete properties[key];\n          continue;\n        } else {\n          this.configurationProperties[key] = properties[key];\n        }\n\n        if (!properties[key].deprecationMessage && properties[key].markdownDeprecationMessage) {\n          // If not set, default deprecationMessage to the markdown source\n          properties[key].deprecationMessage = properties[key].markdownDeprecationMessage;\n        }\n\n        propertyKeys.push(key);\n      }\n    }\n\n    let subNodes = configuration.allOf;\n\n    if (subNodes) {\n      for (let node of subNodes) {\n        propertyKeys.push(...this.validateAndRegisterProperties(node, validate, extensionInfo, restrictedProperties, scope));\n      }\n    }\n\n    return propertyKeys;\n  }\n\n  getConfigurationProperties() {\n    return this.configurationProperties;\n  }\n\n  registerJSONConfiguration(configuration) {\n    const register = configuration => {\n      let properties = configuration.properties;\n\n      if (properties) {\n        for (const key in properties) {\n          this.updateSchema(key, properties[key]);\n        }\n      }\n\n      let subNodes = configuration.allOf;\n\n      if (subNodes) {\n        subNodes.forEach(register);\n      }\n    };\n\n    register(configuration);\n  }\n\n  updateSchema(key, property) {\n    allSettings.properties[key] = property;\n\n    switch (property.scope) {\n      case 1\n      /* APPLICATION */\n      :\n        applicationSettings.properties[key] = property;\n        break;\n\n      case 2\n      /* MACHINE */\n      :\n        machineSettings.properties[key] = property;\n        break;\n\n      case 6\n      /* MACHINE_OVERRIDABLE */\n      :\n        machineOverridableSettings.properties[key] = property;\n        break;\n\n      case 3\n      /* WINDOW */\n      :\n        windowSettings.properties[key] = property;\n        break;\n\n      case 4\n      /* RESOURCE */\n      :\n        resourceSettings.properties[key] = property;\n        break;\n\n      case 5\n      /* LANGUAGE_OVERRIDABLE */\n      :\n        resourceSettings.properties[key] = property;\n        this.resourceLanguageSettingsSchema.properties[key] = property;\n        break;\n    }\n  }\n\n  updateOverridePropertyPatternKey() {\n    for (const overrideIdentifier of this.overrideIdentifiers.values()) {\n      const overrideIdentifierProperty = `[${overrideIdentifier}]`;\n      const resourceLanguagePropertiesSchema = {\n        type: 'object',\n        description: nls.localize('overrideSettings.defaultDescription', \"Configure editor settings to be overridden for a language.\"),\n        errorMessage: nls.localize('overrideSettings.errorMessage', \"This setting does not support per-language configuration.\"),\n        $ref: resourceLanguageSettingsSchemaId\n      };\n      this.updatePropertyDefaultValue(overrideIdentifierProperty, resourceLanguagePropertiesSchema);\n      allSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n      applicationSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n      machineSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n      machineOverridableSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n      windowSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n      resourceSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n    }\n\n    this._onDidSchemaChange.fire();\n  }\n\n  registerOverridePropertyPatternKey() {\n    const resourceLanguagePropertiesSchema = {\n      type: 'object',\n      description: nls.localize('overrideSettings.defaultDescription', \"Configure editor settings to be overridden for a language.\"),\n      errorMessage: nls.localize('overrideSettings.errorMessage', \"This setting does not support per-language configuration.\"),\n      $ref: resourceLanguageSettingsSchemaId\n    };\n    allSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n    applicationSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n    machineSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n    machineOverridableSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n    windowSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n    resourceSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n\n    this._onDidSchemaChange.fire();\n  }\n\n  updatePropertyDefaultValue(key, property) {\n    const configurationdefaultOverride = this.configurationDefaultsOverrides.get(key);\n    let defaultValue = configurationdefaultOverride === null || configurationdefaultOverride === void 0 ? void 0 : configurationdefaultOverride.value;\n    let defaultSource = configurationdefaultOverride === null || configurationdefaultOverride === void 0 ? void 0 : configurationdefaultOverride.source;\n\n    if (types.isUndefined(defaultValue)) {\n      defaultValue = property.defaultDefaultValue;\n      defaultSource = undefined;\n    }\n\n    if (types.isUndefined(defaultValue)) {\n      defaultValue = getDefaultValue(property.type);\n    }\n\n    property.default = defaultValue;\n    property.defaultValueSource = defaultSource;\n  }\n\n}\n\nconst OVERRIDE_IDENTIFIER_PATTERN = `\\\\[([^\\\\]]+)\\\\]`;\nconst OVERRIDE_IDENTIFIER_REGEX = new RegExp(OVERRIDE_IDENTIFIER_PATTERN, 'g');\nexport const OVERRIDE_PROPERTY_PATTERN = `^(${OVERRIDE_IDENTIFIER_PATTERN})+$`;\nexport const OVERRIDE_PROPERTY_REGEX = new RegExp(OVERRIDE_PROPERTY_PATTERN);\nexport function overrideIdentifiersFromKey(key) {\n  const identifiers = [];\n\n  if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n    let matches = OVERRIDE_IDENTIFIER_REGEX.exec(key);\n\n    while (matches === null || matches === void 0 ? void 0 : matches.length) {\n      const identifier = matches[1].trim();\n\n      if (identifier) {\n        identifiers.push(identifier);\n      }\n\n      matches = OVERRIDE_IDENTIFIER_REGEX.exec(key);\n    }\n  }\n\n  return distinct(identifiers);\n}\nexport function getDefaultValue(type) {\n  const t = Array.isArray(type) ? type[0] : type;\n\n  switch (t) {\n    case 'boolean':\n      return false;\n\n    case 'integer':\n    case 'number':\n      return 0;\n\n    case 'string':\n      return '';\n\n    case 'array':\n      return [];\n\n    case 'object':\n      return {};\n\n    default:\n      return null;\n  }\n}\nconst configurationRegistry = new ConfigurationRegistry();\nRegistry.add(Extensions.Configuration, configurationRegistry);\nexport function validateProperty(property) {\n  if (!property.trim()) {\n    return nls.localize('config.property.empty', \"Cannot register an empty property\");\n  }\n\n  if (OVERRIDE_PROPERTY_REGEX.test(property)) {\n    return nls.localize('config.property.languageDefault', \"Cannot register '{0}'. This matches property pattern '\\\\\\\\[.*\\\\\\\\]$' for describing language specific editor settings. Use 'configurationDefaults' contribution.\", property);\n  }\n\n  if (configurationRegistry.getConfigurationProperties()[property] !== undefined) {\n    return nls.localize('config.property.duplicate', \"Cannot register '{0}'. This property is already registered.\", property);\n  }\n\n  return null;\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/platform/configuration/common/configurationRegistry.js"],"names":["distinct","Emitter","types","nls","Extensions","JSONExtensions","Registry","Configuration","allSettings","properties","patternProperties","applicationSettings","machineSettings","machineOverridableSettings","windowSettings","resourceSettings","resourceLanguageSettingsSchemaId","contributionRegistry","as","JSONContribution","ConfigurationRegistry","constructor","overrideIdentifiers","Set","_onDidSchemaChange","_onDidUpdateConfiguration","configurationDefaultsOverrides","Map","defaultLanguageConfigurationOverridesNode","id","title","localize","configurationContributors","resourceLanguageSettingsSchema","additionalProperties","errorMessage","allowTrailingCommas","allowComments","configurationProperties","excludedConfigurationProperties","registerSchema","registerOverridePropertyPatternKey","registerConfiguration","configuration","validate","registerConfigurations","configurations","doRegisterConfigurations","fire","registerDefaultConfigurations","configurationDefaults","_a","overrides","source","key","push","OVERRIDE_PROPERTY_REGEX","test","defaultValue","Object","assign","get","value","set","property","type","default","description","$ref","defaultDefaultValue","isString","undefined","overrideIdentifiersFromKey","updatePropertyDefaultValue","updateSchema","registerOverrideIdentifiers","defaultsOverrides","overrideIdentifier","add","updateOverridePropertyPatternKey","forEach","validateAndRegisterProperties","extensionInfo","restrictedProperties","registerJSONConfiguration","scope","isUndefinedOrNull","propertyKeys","validateProperty","restricted","includes","hasOwnProperty","included","deprecationMessage","markdownDeprecationMessage","subNodes","allOf","node","getConfigurationProperties","register","values","overrideIdentifierProperty","resourceLanguagePropertiesSchema","OVERRIDE_PROPERTY_PATTERN","configurationdefaultOverride","defaultSource","isUndefined","getDefaultValue","defaultValueSource","OVERRIDE_IDENTIFIER_PATTERN","OVERRIDE_IDENTIFIER_REGEX","RegExp","identifiers","matches","exec","length","identifier","trim","t","Array","isArray","configurationRegistry"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { distinct } from '../../../base/common/arrays.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport * as types from '../../../base/common/types.js';\nimport * as nls from '../../../nls.js';\nimport { Extensions as JSONExtensions } from '../../jsonschemas/common/jsonContributionRegistry.js';\nimport { Registry } from '../../registry/common/platform.js';\nexport const Extensions = {\n    Configuration: 'base.contributions.configuration'\n};\nexport const allSettings = { properties: {}, patternProperties: {} };\nexport const applicationSettings = { properties: {}, patternProperties: {} };\nexport const machineSettings = { properties: {}, patternProperties: {} };\nexport const machineOverridableSettings = { properties: {}, patternProperties: {} };\nexport const windowSettings = { properties: {}, patternProperties: {} };\nexport const resourceSettings = { properties: {}, patternProperties: {} };\nexport const resourceLanguageSettingsSchemaId = 'vscode://schemas/settings/resourceLanguage';\nconst contributionRegistry = Registry.as(JSONExtensions.JSONContribution);\nclass ConfigurationRegistry {\n    constructor() {\n        this.overrideIdentifiers = new Set();\n        this._onDidSchemaChange = new Emitter();\n        this._onDidUpdateConfiguration = new Emitter();\n        this.configurationDefaultsOverrides = new Map();\n        this.defaultLanguageConfigurationOverridesNode = {\n            id: 'defaultOverrides',\n            title: nls.localize('defaultLanguageConfigurationOverrides.title', \"Default Language Configuration Overrides\"),\n            properties: {}\n        };\n        this.configurationContributors = [this.defaultLanguageConfigurationOverridesNode];\n        this.resourceLanguageSettingsSchema = { properties: {}, patternProperties: {}, additionalProperties: false, errorMessage: 'Unknown editor configuration setting', allowTrailingCommas: true, allowComments: true };\n        this.configurationProperties = {};\n        this.excludedConfigurationProperties = {};\n        contributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);\n        this.registerOverridePropertyPatternKey();\n    }\n    registerConfiguration(configuration, validate = true) {\n        this.registerConfigurations([configuration], validate);\n    }\n    registerConfigurations(configurations, validate = true) {\n        const properties = this.doRegisterConfigurations(configurations, validate);\n        contributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);\n        this._onDidSchemaChange.fire();\n        this._onDidUpdateConfiguration.fire({ properties });\n    }\n    registerDefaultConfigurations(configurationDefaults) {\n        var _a;\n        const properties = [];\n        const overrideIdentifiers = [];\n        for (const { overrides, source } of configurationDefaults) {\n            for (const key in overrides) {\n                properties.push(key);\n                if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n                    const defaultValue = Object.assign(Object.assign({}, (((_a = this.configurationDefaultsOverrides.get(key)) === null || _a === void 0 ? void 0 : _a.value) || {})), overrides[key]);\n                    this.configurationDefaultsOverrides.set(key, { source, value: defaultValue });\n                    const property = {\n                        type: 'object',\n                        default: defaultValue,\n                        description: nls.localize('defaultLanguageConfiguration.description', \"Configure settings to be overridden for {0} language.\", key),\n                        $ref: resourceLanguageSettingsSchemaId,\n                        defaultDefaultValue: defaultValue,\n                        source: types.isString(source) ? undefined : source,\n                    };\n                    overrideIdentifiers.push(...overrideIdentifiersFromKey(key));\n                    this.configurationProperties[key] = property;\n                    this.defaultLanguageConfigurationOverridesNode.properties[key] = property;\n                }\n                else {\n                    this.configurationDefaultsOverrides.set(key, { value: overrides[key], source });\n                    const property = this.configurationProperties[key];\n                    if (property) {\n                        this.updatePropertyDefaultValue(key, property);\n                        this.updateSchema(key, property);\n                    }\n                }\n            }\n        }\n        this.registerOverrideIdentifiers(overrideIdentifiers);\n        this._onDidSchemaChange.fire();\n        this._onDidUpdateConfiguration.fire({ properties, defaultsOverrides: true });\n    }\n    registerOverrideIdentifiers(overrideIdentifiers) {\n        for (const overrideIdentifier of overrideIdentifiers) {\n            this.overrideIdentifiers.add(overrideIdentifier);\n        }\n        this.updateOverridePropertyPatternKey();\n    }\n    doRegisterConfigurations(configurations, validate) {\n        const properties = [];\n        configurations.forEach(configuration => {\n            properties.push(...this.validateAndRegisterProperties(configuration, validate, configuration.extensionInfo, configuration.restrictedProperties)); // fills in defaults\n            this.configurationContributors.push(configuration);\n            this.registerJSONConfiguration(configuration);\n        });\n        return properties;\n    }\n    validateAndRegisterProperties(configuration, validate = true, extensionInfo, restrictedProperties, scope = 3 /* WINDOW */) {\n        scope = types.isUndefinedOrNull(configuration.scope) ? scope : configuration.scope;\n        let propertyKeys = [];\n        let properties = configuration.properties;\n        if (properties) {\n            for (let key in properties) {\n                if (validate && validateProperty(key)) {\n                    delete properties[key];\n                    continue;\n                }\n                const property = properties[key];\n                property.source = extensionInfo;\n                // update default value\n                property.defaultDefaultValue = properties[key].default;\n                this.updatePropertyDefaultValue(key, property);\n                // update scope\n                if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n                    property.scope = undefined; // No scope for overridable properties `[${identifier}]`\n                }\n                else {\n                    property.scope = types.isUndefinedOrNull(property.scope) ? scope : property.scope;\n                    property.restricted = types.isUndefinedOrNull(property.restricted) ? !!(restrictedProperties === null || restrictedProperties === void 0 ? void 0 : restrictedProperties.includes(key)) : property.restricted;\n                }\n                // Add to properties maps\n                // Property is included by default if 'included' is unspecified\n                if (properties[key].hasOwnProperty('included') && !properties[key].included) {\n                    this.excludedConfigurationProperties[key] = properties[key];\n                    delete properties[key];\n                    continue;\n                }\n                else {\n                    this.configurationProperties[key] = properties[key];\n                }\n                if (!properties[key].deprecationMessage && properties[key].markdownDeprecationMessage) {\n                    // If not set, default deprecationMessage to the markdown source\n                    properties[key].deprecationMessage = properties[key].markdownDeprecationMessage;\n                }\n                propertyKeys.push(key);\n            }\n        }\n        let subNodes = configuration.allOf;\n        if (subNodes) {\n            for (let node of subNodes) {\n                propertyKeys.push(...this.validateAndRegisterProperties(node, validate, extensionInfo, restrictedProperties, scope));\n            }\n        }\n        return propertyKeys;\n    }\n    getConfigurationProperties() {\n        return this.configurationProperties;\n    }\n    registerJSONConfiguration(configuration) {\n        const register = (configuration) => {\n            let properties = configuration.properties;\n            if (properties) {\n                for (const key in properties) {\n                    this.updateSchema(key, properties[key]);\n                }\n            }\n            let subNodes = configuration.allOf;\n            if (subNodes) {\n                subNodes.forEach(register);\n            }\n        };\n        register(configuration);\n    }\n    updateSchema(key, property) {\n        allSettings.properties[key] = property;\n        switch (property.scope) {\n            case 1 /* APPLICATION */:\n                applicationSettings.properties[key] = property;\n                break;\n            case 2 /* MACHINE */:\n                machineSettings.properties[key] = property;\n                break;\n            case 6 /* MACHINE_OVERRIDABLE */:\n                machineOverridableSettings.properties[key] = property;\n                break;\n            case 3 /* WINDOW */:\n                windowSettings.properties[key] = property;\n                break;\n            case 4 /* RESOURCE */:\n                resourceSettings.properties[key] = property;\n                break;\n            case 5 /* LANGUAGE_OVERRIDABLE */:\n                resourceSettings.properties[key] = property;\n                this.resourceLanguageSettingsSchema.properties[key] = property;\n                break;\n        }\n    }\n    updateOverridePropertyPatternKey() {\n        for (const overrideIdentifier of this.overrideIdentifiers.values()) {\n            const overrideIdentifierProperty = `[${overrideIdentifier}]`;\n            const resourceLanguagePropertiesSchema = {\n                type: 'object',\n                description: nls.localize('overrideSettings.defaultDescription', \"Configure editor settings to be overridden for a language.\"),\n                errorMessage: nls.localize('overrideSettings.errorMessage', \"This setting does not support per-language configuration.\"),\n                $ref: resourceLanguageSettingsSchemaId,\n            };\n            this.updatePropertyDefaultValue(overrideIdentifierProperty, resourceLanguagePropertiesSchema);\n            allSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n            applicationSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n            machineSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n            machineOverridableSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n            windowSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n            resourceSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n        }\n        this._onDidSchemaChange.fire();\n    }\n    registerOverridePropertyPatternKey() {\n        const resourceLanguagePropertiesSchema = {\n            type: 'object',\n            description: nls.localize('overrideSettings.defaultDescription', \"Configure editor settings to be overridden for a language.\"),\n            errorMessage: nls.localize('overrideSettings.errorMessage', \"This setting does not support per-language configuration.\"),\n            $ref: resourceLanguageSettingsSchemaId,\n        };\n        allSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n        applicationSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n        machineSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n        machineOverridableSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n        windowSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n        resourceSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n        this._onDidSchemaChange.fire();\n    }\n    updatePropertyDefaultValue(key, property) {\n        const configurationdefaultOverride = this.configurationDefaultsOverrides.get(key);\n        let defaultValue = configurationdefaultOverride === null || configurationdefaultOverride === void 0 ? void 0 : configurationdefaultOverride.value;\n        let defaultSource = configurationdefaultOverride === null || configurationdefaultOverride === void 0 ? void 0 : configurationdefaultOverride.source;\n        if (types.isUndefined(defaultValue)) {\n            defaultValue = property.defaultDefaultValue;\n            defaultSource = undefined;\n        }\n        if (types.isUndefined(defaultValue)) {\n            defaultValue = getDefaultValue(property.type);\n        }\n        property.default = defaultValue;\n        property.defaultValueSource = defaultSource;\n    }\n}\nconst OVERRIDE_IDENTIFIER_PATTERN = `\\\\[([^\\\\]]+)\\\\]`;\nconst OVERRIDE_IDENTIFIER_REGEX = new RegExp(OVERRIDE_IDENTIFIER_PATTERN, 'g');\nexport const OVERRIDE_PROPERTY_PATTERN = `^(${OVERRIDE_IDENTIFIER_PATTERN})+$`;\nexport const OVERRIDE_PROPERTY_REGEX = new RegExp(OVERRIDE_PROPERTY_PATTERN);\nexport function overrideIdentifiersFromKey(key) {\n    const identifiers = [];\n    if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n        let matches = OVERRIDE_IDENTIFIER_REGEX.exec(key);\n        while (matches === null || matches === void 0 ? void 0 : matches.length) {\n            const identifier = matches[1].trim();\n            if (identifier) {\n                identifiers.push(identifier);\n            }\n            matches = OVERRIDE_IDENTIFIER_REGEX.exec(key);\n        }\n    }\n    return distinct(identifiers);\n}\nexport function getDefaultValue(type) {\n    const t = Array.isArray(type) ? type[0] : type;\n    switch (t) {\n        case 'boolean':\n            return false;\n        case 'integer':\n        case 'number':\n            return 0;\n        case 'string':\n            return '';\n        case 'array':\n            return [];\n        case 'object':\n            return {};\n        default:\n            return null;\n    }\n}\nconst configurationRegistry = new ConfigurationRegistry();\nRegistry.add(Extensions.Configuration, configurationRegistry);\nexport function validateProperty(property) {\n    if (!property.trim()) {\n        return nls.localize('config.property.empty', \"Cannot register an empty property\");\n    }\n    if (OVERRIDE_PROPERTY_REGEX.test(property)) {\n        return nls.localize('config.property.languageDefault', \"Cannot register '{0}'. This matches property pattern '\\\\\\\\[.*\\\\\\\\]$' for describing language specific editor settings. Use 'configurationDefaults' contribution.\", property);\n    }\n    if (configurationRegistry.getConfigurationProperties()[property] !== undefined) {\n        return nls.localize('config.property.duplicate', \"Cannot register '{0}'. This property is already registered.\", property);\n    }\n    return null;\n}\n"]},"metadata":{},"sourceType":"module"}