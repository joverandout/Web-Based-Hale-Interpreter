{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './overlayWidgets.css';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nexport class ViewOverlayWidgets extends ViewPart {\n  constructor(context) {\n    super(context);\n    const options = this._context.configuration.options;\n    const layoutInfo = options.get(131\n    /* layoutInfo */\n    );\n    this._widgets = {};\n    this._verticalScrollbarWidth = layoutInfo.verticalScrollbarWidth;\n    this._minimapWidth = layoutInfo.minimap.minimapWidth;\n    this._horizontalScrollbarHeight = layoutInfo.horizontalScrollbarHeight;\n    this._editorHeight = layoutInfo.height;\n    this._editorWidth = layoutInfo.width;\n    this._domNode = createFastDomNode(document.createElement('div'));\n    PartFingerprints.write(this._domNode, 4\n    /* OverlayWidgets */\n    );\n\n    this._domNode.setClassName('overlayWidgets');\n  }\n\n  dispose() {\n    super.dispose();\n    this._widgets = {};\n  }\n\n  getDomNode() {\n    return this._domNode;\n  } // ---- begin view event handlers\n\n\n  onConfigurationChanged(e) {\n    const options = this._context.configuration.options;\n    const layoutInfo = options.get(131\n    /* layoutInfo */\n    );\n    this._verticalScrollbarWidth = layoutInfo.verticalScrollbarWidth;\n    this._minimapWidth = layoutInfo.minimap.minimapWidth;\n    this._horizontalScrollbarHeight = layoutInfo.horizontalScrollbarHeight;\n    this._editorHeight = layoutInfo.height;\n    this._editorWidth = layoutInfo.width;\n    return true;\n  } // ---- end view event handlers\n\n\n  addWidget(widget) {\n    const domNode = createFastDomNode(widget.getDomNode());\n    this._widgets[widget.getId()] = {\n      widget: widget,\n      preference: null,\n      domNode: domNode\n    }; // This is sync because a widget wants to be in the dom\n\n    domNode.setPosition('absolute');\n    domNode.setAttribute('widgetId', widget.getId());\n\n    this._domNode.appendChild(domNode);\n\n    this.setShouldRender();\n  }\n\n  setWidgetPosition(widget, preference) {\n    const widgetData = this._widgets[widget.getId()];\n\n    if (widgetData.preference === preference) {\n      return false;\n    }\n\n    widgetData.preference = preference;\n    this.setShouldRender();\n    return true;\n  }\n\n  removeWidget(widget) {\n    const widgetId = widget.getId();\n\n    if (this._widgets.hasOwnProperty(widgetId)) {\n      const widgetData = this._widgets[widgetId];\n      const domNode = widgetData.domNode.domNode;\n      delete this._widgets[widgetId];\n      domNode.parentNode.removeChild(domNode);\n      this.setShouldRender();\n    }\n  }\n\n  _renderWidget(widgetData) {\n    const domNode = widgetData.domNode;\n\n    if (widgetData.preference === null) {\n      domNode.unsetTop();\n      return;\n    }\n\n    if (widgetData.preference === 0\n    /* TOP_RIGHT_CORNER */\n    ) {\n      domNode.setTop(0);\n      domNode.setRight(2 * this._verticalScrollbarWidth + this._minimapWidth);\n    } else if (widgetData.preference === 1\n    /* BOTTOM_RIGHT_CORNER */\n    ) {\n      const widgetHeight = domNode.domNode.clientHeight;\n      domNode.setTop(this._editorHeight - widgetHeight - 2 * this._horizontalScrollbarHeight);\n      domNode.setRight(2 * this._verticalScrollbarWidth + this._minimapWidth);\n    } else if (widgetData.preference === 2\n    /* TOP_CENTER */\n    ) {\n      domNode.setTop(0);\n      domNode.domNode.style.right = '50%';\n    }\n  }\n\n  prepareRender(ctx) {// Nothing to read\n  }\n\n  render(ctx) {\n    this._domNode.setWidth(this._editorWidth);\n\n    const keys = Object.keys(this._widgets);\n\n    for (let i = 0, len = keys.length; i < len; i++) {\n      const widgetId = keys[i];\n\n      this._renderWidget(this._widgets[widgetId]);\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/overlayWidgets/overlayWidgets.js"],"names":["createFastDomNode","PartFingerprints","ViewPart","ViewOverlayWidgets","constructor","context","options","_context","configuration","layoutInfo","get","_widgets","_verticalScrollbarWidth","verticalScrollbarWidth","_minimapWidth","minimap","minimapWidth","_horizontalScrollbarHeight","horizontalScrollbarHeight","_editorHeight","height","_editorWidth","width","_domNode","document","createElement","write","setClassName","dispose","getDomNode","onConfigurationChanged","e","addWidget","widget","domNode","getId","preference","setPosition","setAttribute","appendChild","setShouldRender","setWidgetPosition","widgetData","removeWidget","widgetId","hasOwnProperty","parentNode","removeChild","_renderWidget","unsetTop","setTop","setRight","widgetHeight","clientHeight","style","right","prepareRender","ctx","render","setWidth","keys","Object","i","len","length"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,sBAAP;AACA,SAASA,iBAAT,QAAkC,yCAAlC;AACA,SAASC,gBAAT,EAA2BC,QAA3B,QAA2C,wBAA3C;AACA,OAAO,MAAMC,kBAAN,SAAiCD,QAAjC,CAA0C;AAC7CE,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjB,UAAMA,OAAN;AACA,UAAMC,OAAO,GAAG,KAAKC,QAAL,CAAcC,aAAd,CAA4BF,OAA5C;AACA,UAAMG,UAAU,GAAGH,OAAO,CAACI,GAAR,CAAY;AAAI;AAAhB,KAAnB;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACA,SAAKC,uBAAL,GAA+BH,UAAU,CAACI,sBAA1C;AACA,SAAKC,aAAL,GAAqBL,UAAU,CAACM,OAAX,CAAmBC,YAAxC;AACA,SAAKC,0BAAL,GAAkCR,UAAU,CAACS,yBAA7C;AACA,SAAKC,aAAL,GAAqBV,UAAU,CAACW,MAAhC;AACA,SAAKC,YAAL,GAAoBZ,UAAU,CAACa,KAA/B;AACA,SAAKC,QAAL,GAAgBvB,iBAAiB,CAACwB,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAD,CAAjC;AACAxB,IAAAA,gBAAgB,CAACyB,KAAjB,CAAuB,KAAKH,QAA5B,EAAsC;AAAE;AAAxC;;AACA,SAAKA,QAAL,CAAcI,YAAd,CAA2B,gBAA3B;AACH;;AACDC,EAAAA,OAAO,GAAG;AACN,UAAMA,OAAN;AACA,SAAKjB,QAAL,GAAgB,EAAhB;AACH;;AACDkB,EAAAA,UAAU,GAAG;AACT,WAAO,KAAKN,QAAZ;AACH,GArB4C,CAsB7C;;;AACAO,EAAAA,sBAAsB,CAACC,CAAD,EAAI;AACtB,UAAMzB,OAAO,GAAG,KAAKC,QAAL,CAAcC,aAAd,CAA4BF,OAA5C;AACA,UAAMG,UAAU,GAAGH,OAAO,CAACI,GAAR,CAAY;AAAI;AAAhB,KAAnB;AACA,SAAKE,uBAAL,GAA+BH,UAAU,CAACI,sBAA1C;AACA,SAAKC,aAAL,GAAqBL,UAAU,CAACM,OAAX,CAAmBC,YAAxC;AACA,SAAKC,0BAAL,GAAkCR,UAAU,CAACS,yBAA7C;AACA,SAAKC,aAAL,GAAqBV,UAAU,CAACW,MAAhC;AACA,SAAKC,YAAL,GAAoBZ,UAAU,CAACa,KAA/B;AACA,WAAO,IAAP;AACH,GAhC4C,CAiC7C;;;AACAU,EAAAA,SAAS,CAACC,MAAD,EAAS;AACd,UAAMC,OAAO,GAAGlC,iBAAiB,CAACiC,MAAM,CAACJ,UAAP,EAAD,CAAjC;AACA,SAAKlB,QAAL,CAAcsB,MAAM,CAACE,KAAP,EAAd,IAAgC;AAC5BF,MAAAA,MAAM,EAAEA,MADoB;AAE5BG,MAAAA,UAAU,EAAE,IAFgB;AAG5BF,MAAAA,OAAO,EAAEA;AAHmB,KAAhC,CAFc,CAOd;;AACAA,IAAAA,OAAO,CAACG,WAAR,CAAoB,UAApB;AACAH,IAAAA,OAAO,CAACI,YAAR,CAAqB,UAArB,EAAiCL,MAAM,CAACE,KAAP,EAAjC;;AACA,SAAKZ,QAAL,CAAcgB,WAAd,CAA0BL,OAA1B;;AACA,SAAKM,eAAL;AACH;;AACDC,EAAAA,iBAAiB,CAACR,MAAD,EAASG,UAAT,EAAqB;AAClC,UAAMM,UAAU,GAAG,KAAK/B,QAAL,CAAcsB,MAAM,CAACE,KAAP,EAAd,CAAnB;;AACA,QAAIO,UAAU,CAACN,UAAX,KAA0BA,UAA9B,EAA0C;AACtC,aAAO,KAAP;AACH;;AACDM,IAAAA,UAAU,CAACN,UAAX,GAAwBA,UAAxB;AACA,SAAKI,eAAL;AACA,WAAO,IAAP;AACH;;AACDG,EAAAA,YAAY,CAACV,MAAD,EAAS;AACjB,UAAMW,QAAQ,GAAGX,MAAM,CAACE,KAAP,EAAjB;;AACA,QAAI,KAAKxB,QAAL,CAAckC,cAAd,CAA6BD,QAA7B,CAAJ,EAA4C;AACxC,YAAMF,UAAU,GAAG,KAAK/B,QAAL,CAAciC,QAAd,CAAnB;AACA,YAAMV,OAAO,GAAGQ,UAAU,CAACR,OAAX,CAAmBA,OAAnC;AACA,aAAO,KAAKvB,QAAL,CAAciC,QAAd,CAAP;AACAV,MAAAA,OAAO,CAACY,UAAR,CAAmBC,WAAnB,CAA+Bb,OAA/B;AACA,WAAKM,eAAL;AACH;AACJ;;AACDQ,EAAAA,aAAa,CAACN,UAAD,EAAa;AACtB,UAAMR,OAAO,GAAGQ,UAAU,CAACR,OAA3B;;AACA,QAAIQ,UAAU,CAACN,UAAX,KAA0B,IAA9B,EAAoC;AAChCF,MAAAA,OAAO,CAACe,QAAR;AACA;AACH;;AACD,QAAIP,UAAU,CAACN,UAAX,KAA0B;AAAE;AAAhC,MAAwD;AACpDF,MAAAA,OAAO,CAACgB,MAAR,CAAe,CAAf;AACAhB,MAAAA,OAAO,CAACiB,QAAR,CAAkB,IAAI,KAAKvC,uBAAV,GAAqC,KAAKE,aAA3D;AACH,KAHD,MAIK,IAAI4B,UAAU,CAACN,UAAX,KAA0B;AAAE;AAAhC,MAA2D;AAC5D,YAAMgB,YAAY,GAAGlB,OAAO,CAACA,OAAR,CAAgBmB,YAArC;AACAnB,MAAAA,OAAO,CAACgB,MAAR,CAAgB,KAAK/B,aAAL,GAAqBiC,YAArB,GAAoC,IAAI,KAAKnC,0BAA7D;AACAiB,MAAAA,OAAO,CAACiB,QAAR,CAAkB,IAAI,KAAKvC,uBAAV,GAAqC,KAAKE,aAA3D;AACH,KAJI,MAKA,IAAI4B,UAAU,CAACN,UAAX,KAA0B;AAAE;AAAhC,MAAkD;AACnDF,MAAAA,OAAO,CAACgB,MAAR,CAAe,CAAf;AACAhB,MAAAA,OAAO,CAACA,OAAR,CAAgBoB,KAAhB,CAAsBC,KAAtB,GAA8B,KAA9B;AACH;AACJ;;AACDC,EAAAA,aAAa,CAACC,GAAD,EAAM,CACf;AACH;;AACDC,EAAAA,MAAM,CAACD,GAAD,EAAM;AACR,SAAKlC,QAAL,CAAcoC,QAAd,CAAuB,KAAKtC,YAA5B;;AACA,UAAMuC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAY,KAAKjD,QAAjB,CAAb;;AACA,SAAK,IAAImD,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGH,IAAI,CAACI,MAA3B,EAAmCF,CAAC,GAAGC,GAAvC,EAA4CD,CAAC,EAA7C,EAAiD;AAC7C,YAAMlB,QAAQ,GAAGgB,IAAI,CAACE,CAAD,CAArB;;AACA,WAAKd,aAAL,CAAmB,KAAKrC,QAAL,CAAciC,QAAd,CAAnB;AACH;AACJ;;AAhG4C","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './overlayWidgets.css';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nexport class ViewOverlayWidgets extends ViewPart {\n    constructor(context) {\n        super(context);\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this._widgets = {};\n        this._verticalScrollbarWidth = layoutInfo.verticalScrollbarWidth;\n        this._minimapWidth = layoutInfo.minimap.minimapWidth;\n        this._horizontalScrollbarHeight = layoutInfo.horizontalScrollbarHeight;\n        this._editorHeight = layoutInfo.height;\n        this._editorWidth = layoutInfo.width;\n        this._domNode = createFastDomNode(document.createElement('div'));\n        PartFingerprints.write(this._domNode, 4 /* OverlayWidgets */);\n        this._domNode.setClassName('overlayWidgets');\n    }\n    dispose() {\n        super.dispose();\n        this._widgets = {};\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this._verticalScrollbarWidth = layoutInfo.verticalScrollbarWidth;\n        this._minimapWidth = layoutInfo.minimap.minimapWidth;\n        this._horizontalScrollbarHeight = layoutInfo.horizontalScrollbarHeight;\n        this._editorHeight = layoutInfo.height;\n        this._editorWidth = layoutInfo.width;\n        return true;\n    }\n    // ---- end view event handlers\n    addWidget(widget) {\n        const domNode = createFastDomNode(widget.getDomNode());\n        this._widgets[widget.getId()] = {\n            widget: widget,\n            preference: null,\n            domNode: domNode\n        };\n        // This is sync because a widget wants to be in the dom\n        domNode.setPosition('absolute');\n        domNode.setAttribute('widgetId', widget.getId());\n        this._domNode.appendChild(domNode);\n        this.setShouldRender();\n    }\n    setWidgetPosition(widget, preference) {\n        const widgetData = this._widgets[widget.getId()];\n        if (widgetData.preference === preference) {\n            return false;\n        }\n        widgetData.preference = preference;\n        this.setShouldRender();\n        return true;\n    }\n    removeWidget(widget) {\n        const widgetId = widget.getId();\n        if (this._widgets.hasOwnProperty(widgetId)) {\n            const widgetData = this._widgets[widgetId];\n            const domNode = widgetData.domNode.domNode;\n            delete this._widgets[widgetId];\n            domNode.parentNode.removeChild(domNode);\n            this.setShouldRender();\n        }\n    }\n    _renderWidget(widgetData) {\n        const domNode = widgetData.domNode;\n        if (widgetData.preference === null) {\n            domNode.unsetTop();\n            return;\n        }\n        if (widgetData.preference === 0 /* TOP_RIGHT_CORNER */) {\n            domNode.setTop(0);\n            domNode.setRight((2 * this._verticalScrollbarWidth) + this._minimapWidth);\n        }\n        else if (widgetData.preference === 1 /* BOTTOM_RIGHT_CORNER */) {\n            const widgetHeight = domNode.domNode.clientHeight;\n            domNode.setTop((this._editorHeight - widgetHeight - 2 * this._horizontalScrollbarHeight));\n            domNode.setRight((2 * this._verticalScrollbarWidth) + this._minimapWidth);\n        }\n        else if (widgetData.preference === 2 /* TOP_CENTER */) {\n            domNode.setTop(0);\n            domNode.domNode.style.right = '50%';\n        }\n    }\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    render(ctx) {\n        this._domNode.setWidth(this._editorWidth);\n        const keys = Object.keys(this._widgets);\n        for (let i = 0, len = keys.length; i < len; i++) {\n            const widgetId = keys[i];\n            this._renderWidget(this._widgets[widgetId]);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}