{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { Color } from '../../../base/common/color.js';\nimport { Range } from '../../common/core/range.js';\nimport * as languages from '../../common/languages.js';\nimport { LanguageConfigurationRegistry } from '../../common/languages/languageConfigurationRegistry.js';\nimport { ModesRegistry } from '../../common/languages/modesRegistry.js';\nimport { ILanguageService } from '../../common/services/language.js';\nimport * as standaloneEnums from '../../common/standalone/standaloneEnums.js';\nimport { StandaloneServices } from './standaloneServices.js';\nimport { compile } from '../common/monarch/monarchCompile.js';\nimport { MonarchTokenizer } from '../common/monarch/monarchLexer.js';\nimport { IStandaloneThemeService } from '../common/standaloneTheme.js';\nimport { IMarkerService } from '../../../platform/markers/common/markers.js';\n/**\n * Register information about a new language.\n */\n\nexport function register(language) {\n  ModesRegistry.registerLanguage(language);\n}\n/**\n * Get the information of all the registered languages.\n */\n\nexport function getLanguages() {\n  let result = [];\n  result = result.concat(ModesRegistry.getLanguages());\n  return result;\n}\nexport function getEncodedLanguageId(languageId) {\n  const languageService = StandaloneServices.get(ILanguageService);\n  return languageService.languageIdCodec.encodeLanguageId(languageId);\n}\n/**\n * An event emitted when a language is needed for the first time (e.g. a model has it set).\n * @event\n */\n\nexport function onLanguage(languageId, callback) {\n  const languageService = StandaloneServices.get(ILanguageService);\n  const disposable = languageService.onDidEncounterLanguage(encounteredLanguageId => {\n    if (encounteredLanguageId === languageId) {\n      // stop listening\n      disposable.dispose(); // invoke actual listener\n\n      callback();\n    }\n  });\n  return disposable;\n}\n/**\n * Set the editing configuration for a language.\n */\n\nexport function setLanguageConfiguration(languageId, configuration) {\n  const languageService = StandaloneServices.get(ILanguageService);\n\n  if (!languageService.isRegisteredLanguageId(languageId)) {\n    throw new Error(`Cannot set configuration for unknown language ${languageId}`);\n  }\n\n  return LanguageConfigurationRegistry.register(languageId, configuration, 100);\n}\n/**\n * @internal\n */\n\nexport class EncodedTokenizationSupportAdapter {\n  constructor(languageId, actual) {\n    this._languageId = languageId;\n    this._actual = actual;\n  }\n\n  getInitialState() {\n    return this._actual.getInitialState();\n  }\n\n  tokenize(line, hasEOL, state) {\n    if (typeof this._actual.tokenize === 'function') {\n      return TokenizationSupportAdapter.adaptTokenize(this._languageId, this._actual, line, state);\n    }\n\n    throw new Error('Not supported!');\n  }\n\n  tokenizeEncoded(line, hasEOL, state) {\n    const result = this._actual.tokenizeEncoded(line, state);\n\n    return new languages.EncodedTokenizationResult(result.tokens, result.endState);\n  }\n\n}\n/**\n * @internal\n */\n\nexport class TokenizationSupportAdapter {\n  constructor(_languageId, _actual, _languageService, _standaloneThemeService) {\n    this._languageId = _languageId;\n    this._actual = _actual;\n    this._languageService = _languageService;\n    this._standaloneThemeService = _standaloneThemeService;\n  }\n\n  getInitialState() {\n    return this._actual.getInitialState();\n  }\n\n  static _toClassicTokens(tokens, language) {\n    const result = [];\n    let previousStartIndex = 0;\n\n    for (let i = 0, len = tokens.length; i < len; i++) {\n      const t = tokens[i];\n      let startIndex = t.startIndex; // Prevent issues stemming from a buggy external tokenizer.\n\n      if (i === 0) {\n        // Force first token to start at first index!\n        startIndex = 0;\n      } else if (startIndex < previousStartIndex) {\n        // Force tokens to be after one another!\n        startIndex = previousStartIndex;\n      }\n\n      result[i] = new languages.Token(startIndex, t.scopes, language);\n      previousStartIndex = startIndex;\n    }\n\n    return result;\n  }\n\n  static adaptTokenize(language, actual, line, state) {\n    const actualResult = actual.tokenize(line, state);\n\n    const tokens = TokenizationSupportAdapter._toClassicTokens(actualResult.tokens, language);\n\n    let endState; // try to save an object if possible\n\n    if (actualResult.endState.equals(state)) {\n      endState = state;\n    } else {\n      endState = actualResult.endState;\n    }\n\n    return new languages.TokenizationResult(tokens, endState);\n  }\n\n  tokenize(line, hasEOL, state) {\n    return TokenizationSupportAdapter.adaptTokenize(this._languageId, this._actual, line, state);\n  }\n\n  _toBinaryTokens(languageIdCodec, tokens) {\n    const languageId = languageIdCodec.encodeLanguageId(this._languageId);\n\n    const tokenTheme = this._standaloneThemeService.getColorTheme().tokenTheme;\n\n    const result = [];\n    let resultLen = 0;\n    let previousStartIndex = 0;\n\n    for (let i = 0, len = tokens.length; i < len; i++) {\n      const t = tokens[i];\n      const metadata = tokenTheme.match(languageId, t.scopes);\n\n      if (resultLen > 0 && result[resultLen - 1] === metadata) {\n        // same metadata\n        continue;\n      }\n\n      let startIndex = t.startIndex; // Prevent issues stemming from a buggy external tokenizer.\n\n      if (i === 0) {\n        // Force first token to start at first index!\n        startIndex = 0;\n      } else if (startIndex < previousStartIndex) {\n        // Force tokens to be after one another!\n        startIndex = previousStartIndex;\n      }\n\n      result[resultLen++] = startIndex;\n      result[resultLen++] = metadata;\n      previousStartIndex = startIndex;\n    }\n\n    const actualResult = new Uint32Array(resultLen);\n\n    for (let i = 0; i < resultLen; i++) {\n      actualResult[i] = result[i];\n    }\n\n    return actualResult;\n  }\n\n  tokenizeEncoded(line, hasEOL, state) {\n    const actualResult = this._actual.tokenize(line, state);\n\n    const tokens = this._toBinaryTokens(this._languageService.languageIdCodec, actualResult.tokens);\n\n    let endState; // try to save an object if possible\n\n    if (actualResult.endState.equals(state)) {\n      endState = state;\n    } else {\n      endState = actualResult.endState;\n    }\n\n    return new languages.EncodedTokenizationResult(tokens, endState);\n  }\n\n}\n\nfunction isATokensProvider(provider) {\n  return typeof provider.getInitialState === 'function';\n}\n\nfunction isEncodedTokensProvider(provider) {\n  return 'tokenizeEncoded' in provider;\n}\n\nfunction isThenable(obj) {\n  return obj && typeof obj.then === 'function';\n}\n/**\n * Change the color map that is used for token colors.\n * Supported formats (hex): #RRGGBB, $RRGGBBAA, #RGB, #RGBA\n */\n\n\nexport function setColorMap(colorMap) {\n  const standaloneThemeService = StandaloneServices.get(IStandaloneThemeService);\n\n  if (colorMap) {\n    const result = [null];\n\n    for (let i = 1, len = colorMap.length; i < len; i++) {\n      result[i] = Color.fromHex(colorMap[i]);\n    }\n\n    standaloneThemeService.setColorMapOverride(result);\n  } else {\n    standaloneThemeService.setColorMapOverride(null);\n  }\n}\n/**\n * @internal\n */\n\nfunction createTokenizationSupportAdapter(languageId, provider) {\n  if (isEncodedTokensProvider(provider)) {\n    return new EncodedTokenizationSupportAdapter(languageId, provider);\n  } else {\n    return new TokenizationSupportAdapter(languageId, provider, StandaloneServices.get(ILanguageService), StandaloneServices.get(IStandaloneThemeService));\n  }\n}\n/**\n * Register a tokens provider factory for a language. This tokenizer will be exclusive with a tokenizer\n * set using `setTokensProvider` or one created using `setMonarchTokensProvider`, but will work together\n * with a tokens provider set using `registerDocumentSemanticTokensProvider` or `registerDocumentRangeSemanticTokensProvider`.\n */\n\n\nexport function registerTokensProviderFactory(languageId, factory) {\n  const adaptedFactory = {\n    createTokenizationSupport: () => __awaiter(this, void 0, void 0, function* () {\n      const result = yield Promise.resolve(factory.create());\n\n      if (!result) {\n        return null;\n      }\n\n      if (isATokensProvider(result)) {\n        return createTokenizationSupportAdapter(languageId, result);\n      }\n\n      return new MonarchTokenizer(StandaloneServices.get(ILanguageService), StandaloneServices.get(IStandaloneThemeService), languageId, compile(languageId, result));\n    })\n  };\n  return languages.TokenizationRegistry.registerFactory(languageId, adaptedFactory);\n}\n/**\n * Set the tokens provider for a language (manual implementation). This tokenizer will be exclusive\n * with a tokenizer created using `setMonarchTokensProvider`, or with `registerTokensProviderFactory`,\n * but will work together with a tokens provider set using `registerDocumentSemanticTokensProvider`\n * or `registerDocumentRangeSemanticTokensProvider`.\n */\n\nexport function setTokensProvider(languageId, provider) {\n  const languageService = StandaloneServices.get(ILanguageService);\n\n  if (!languageService.isRegisteredLanguageId(languageId)) {\n    throw new Error(`Cannot set tokens provider for unknown language ${languageId}`);\n  }\n\n  if (isThenable(provider)) {\n    return registerTokensProviderFactory(languageId, {\n      create: () => provider\n    });\n  }\n\n  return languages.TokenizationRegistry.register(languageId, createTokenizationSupportAdapter(languageId, provider));\n}\n/**\n * Set the tokens provider for a language (monarch implementation). This tokenizer will be exclusive\n * with a tokenizer set using `setTokensProvider`, or with `registerTokensProviderFactory`, but will\n * work together with a tokens provider set using `registerDocumentSemanticTokensProvider` or\n * `registerDocumentRangeSemanticTokensProvider`.\n */\n\nexport function setMonarchTokensProvider(languageId, languageDef) {\n  const create = languageDef => {\n    return new MonarchTokenizer(StandaloneServices.get(ILanguageService), StandaloneServices.get(IStandaloneThemeService), languageId, compile(languageId, languageDef));\n  };\n\n  if (isThenable(languageDef)) {\n    return registerTokensProviderFactory(languageId, {\n      create: () => languageDef\n    });\n  }\n\n  return languages.TokenizationRegistry.register(languageId, create(languageDef));\n}\n/**\n * Register a reference provider (used by e.g. reference search).\n */\n\nexport function registerReferenceProvider(languageId, provider) {\n  return languages.ReferenceProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a rename provider (used by e.g. rename symbol).\n */\n\nexport function registerRenameProvider(languageId, provider) {\n  return languages.RenameProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a signature help provider (used by e.g. parameter hints).\n */\n\nexport function registerSignatureHelpProvider(languageId, provider) {\n  return languages.SignatureHelpProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a hover provider (used by e.g. editor hover).\n */\n\nexport function registerHoverProvider(languageId, provider) {\n  return languages.HoverProviderRegistry.register(languageId, {\n    provideHover: (model, position, token) => {\n      const word = model.getWordAtPosition(position);\n      return Promise.resolve(provider.provideHover(model, position, token)).then(value => {\n        if (!value) {\n          return undefined;\n        }\n\n        if (!value.range && word) {\n          value.range = new Range(position.lineNumber, word.startColumn, position.lineNumber, word.endColumn);\n        }\n\n        if (!value.range) {\n          value.range = new Range(position.lineNumber, position.column, position.lineNumber, position.column);\n        }\n\n        return value;\n      });\n    }\n  });\n}\n/**\n * Register a document symbol provider (used by e.g. outline).\n */\n\nexport function registerDocumentSymbolProvider(languageId, provider) {\n  return languages.DocumentSymbolProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a document highlight provider (used by e.g. highlight occurrences).\n */\n\nexport function registerDocumentHighlightProvider(languageId, provider) {\n  return languages.DocumentHighlightProviderRegistry.register(languageId, provider);\n}\n/**\n * Register an linked editing range provider.\n */\n\nexport function registerLinkedEditingRangeProvider(languageId, provider) {\n  return languages.LinkedEditingRangeProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a definition provider (used by e.g. go to definition).\n */\n\nexport function registerDefinitionProvider(languageId, provider) {\n  return languages.DefinitionProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a implementation provider (used by e.g. go to implementation).\n */\n\nexport function registerImplementationProvider(languageId, provider) {\n  return languages.ImplementationProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a type definition provider (used by e.g. go to type definition).\n */\n\nexport function registerTypeDefinitionProvider(languageId, provider) {\n  return languages.TypeDefinitionProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a code lens provider (used by e.g. inline code lenses).\n */\n\nexport function registerCodeLensProvider(languageId, provider) {\n  return languages.CodeLensProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a code action provider (used by e.g. quick fix).\n */\n\nexport function registerCodeActionProvider(languageId, provider, metadata) {\n  return languages.CodeActionProviderRegistry.register(languageId, {\n    providedCodeActionKinds: metadata === null || metadata === void 0 ? void 0 : metadata.providedCodeActionKinds,\n    provideCodeActions: (model, range, context, token) => {\n      const markerService = StandaloneServices.get(IMarkerService);\n      const markers = markerService.read({\n        resource: model.uri\n      }).filter(m => {\n        return Range.areIntersectingOrTouching(m, range);\n      });\n      return provider.provideCodeActions(model, range, {\n        markers,\n        only: context.only\n      }, token);\n    },\n    resolveCodeAction: provider.resolveCodeAction\n  });\n}\n/**\n * Register a formatter that can handle only entire models.\n */\n\nexport function registerDocumentFormattingEditProvider(languageId, provider) {\n  return languages.DocumentFormattingEditProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a formatter that can handle a range inside a model.\n */\n\nexport function registerDocumentRangeFormattingEditProvider(languageId, provider) {\n  return languages.DocumentRangeFormattingEditProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a formatter than can do formatting as the user types.\n */\n\nexport function registerOnTypeFormattingEditProvider(languageId, provider) {\n  return languages.OnTypeFormattingEditProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a link provider that can find links in text.\n */\n\nexport function registerLinkProvider(languageId, provider) {\n  return languages.LinkProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a completion item provider (use by e.g. suggestions).\n */\n\nexport function registerCompletionItemProvider(languageId, provider) {\n  return languages.CompletionProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a document color provider (used by Color Picker, Color Decorator).\n */\n\nexport function registerColorProvider(languageId, provider) {\n  return languages.ColorProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a folding range provider\n */\n\nexport function registerFoldingRangeProvider(languageId, provider) {\n  return languages.FoldingRangeProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a declaration provider\n */\n\nexport function registerDeclarationProvider(languageId, provider) {\n  return languages.DeclarationProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a selection range provider\n */\n\nexport function registerSelectionRangeProvider(languageId, provider) {\n  return languages.SelectionRangeRegistry.register(languageId, provider);\n}\n/**\n * Register a document semantic tokens provider. A semantic tokens provider will complement and enhance a\n * simple top-down tokenizer. Simple top-down tokenizers can be set either via `setMonarchTokensProvider`\n * or `setTokensProvider`.\n *\n * For the best user experience, register both a semantic tokens provider and a top-down tokenizer.\n */\n\nexport function registerDocumentSemanticTokensProvider(languageId, provider) {\n  return languages.DocumentSemanticTokensProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a document range semantic tokens provider. A semantic tokens provider will complement and enhance a\n * simple top-down tokenizer. Simple top-down tokenizers can be set either via `setMonarchTokensProvider`\n * or `setTokensProvider`.\n *\n * For the best user experience, register both a semantic tokens provider and a top-down tokenizer.\n */\n\nexport function registerDocumentRangeSemanticTokensProvider(languageId, provider) {\n  return languages.DocumentRangeSemanticTokensProviderRegistry.register(languageId, provider);\n}\n/**\n * Register an inline completions provider.\n */\n\nexport function registerInlineCompletionsProvider(languageId, provider) {\n  return languages.InlineCompletionsProviderRegistry.register(languageId, provider);\n}\n/**\n * Register an inlay hints provider.\n */\n\nexport function registerInlayHintsProvider(languageId, provider) {\n  return languages.InlayHintsProviderRegistry.register(languageId, provider);\n}\n/**\n * @internal\n */\n\nexport function createMonacoLanguagesAPI() {\n  return {\n    register: register,\n    getLanguages: getLanguages,\n    onLanguage: onLanguage,\n    getEncodedLanguageId: getEncodedLanguageId,\n    // provider methods\n    setLanguageConfiguration: setLanguageConfiguration,\n    setColorMap: setColorMap,\n    registerTokensProviderFactory: registerTokensProviderFactory,\n    setTokensProvider: setTokensProvider,\n    setMonarchTokensProvider: setMonarchTokensProvider,\n    registerReferenceProvider: registerReferenceProvider,\n    registerRenameProvider: registerRenameProvider,\n    registerCompletionItemProvider: registerCompletionItemProvider,\n    registerSignatureHelpProvider: registerSignatureHelpProvider,\n    registerHoverProvider: registerHoverProvider,\n    registerDocumentSymbolProvider: registerDocumentSymbolProvider,\n    registerDocumentHighlightProvider: registerDocumentHighlightProvider,\n    registerLinkedEditingRangeProvider: registerLinkedEditingRangeProvider,\n    registerDefinitionProvider: registerDefinitionProvider,\n    registerImplementationProvider: registerImplementationProvider,\n    registerTypeDefinitionProvider: registerTypeDefinitionProvider,\n    registerCodeLensProvider: registerCodeLensProvider,\n    registerCodeActionProvider: registerCodeActionProvider,\n    registerDocumentFormattingEditProvider: registerDocumentFormattingEditProvider,\n    registerDocumentRangeFormattingEditProvider: registerDocumentRangeFormattingEditProvider,\n    registerOnTypeFormattingEditProvider: registerOnTypeFormattingEditProvider,\n    registerLinkProvider: registerLinkProvider,\n    registerColorProvider: registerColorProvider,\n    registerFoldingRangeProvider: registerFoldingRangeProvider,\n    registerDeclarationProvider: registerDeclarationProvider,\n    registerSelectionRangeProvider: registerSelectionRangeProvider,\n    registerDocumentSemanticTokensProvider: registerDocumentSemanticTokensProvider,\n    registerDocumentRangeSemanticTokensProvider: registerDocumentRangeSemanticTokensProvider,\n    registerInlineCompletionsProvider: registerInlineCompletionsProvider,\n    registerInlayHintsProvider: registerInlayHintsProvider,\n    // enums\n    DocumentHighlightKind: standaloneEnums.DocumentHighlightKind,\n    CompletionItemKind: standaloneEnums.CompletionItemKind,\n    CompletionItemTag: standaloneEnums.CompletionItemTag,\n    CompletionItemInsertTextRule: standaloneEnums.CompletionItemInsertTextRule,\n    SymbolKind: standaloneEnums.SymbolKind,\n    SymbolTag: standaloneEnums.SymbolTag,\n    IndentAction: standaloneEnums.IndentAction,\n    CompletionTriggerKind: standaloneEnums.CompletionTriggerKind,\n    SignatureHelpTriggerKind: standaloneEnums.SignatureHelpTriggerKind,\n    InlayHintKind: standaloneEnums.InlayHintKind,\n    InlineCompletionTriggerKind: standaloneEnums.InlineCompletionTriggerKind,\n    // classes\n    FoldingRangeKind: languages.FoldingRangeKind\n  };\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/standalone/browser/standaloneLanguages.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Color","Range","languages","LanguageConfigurationRegistry","ModesRegistry","ILanguageService","standaloneEnums","StandaloneServices","compile","MonarchTokenizer","IStandaloneThemeService","IMarkerService","register","language","registerLanguage","getLanguages","concat","getEncodedLanguageId","languageId","languageService","get","languageIdCodec","encodeLanguageId","onLanguage","callback","disposable","onDidEncounterLanguage","encounteredLanguageId","dispose","setLanguageConfiguration","configuration","isRegisteredLanguageId","Error","EncodedTokenizationSupportAdapter","constructor","actual","_languageId","_actual","getInitialState","tokenize","line","hasEOL","state","TokenizationSupportAdapter","adaptTokenize","tokenizeEncoded","EncodedTokenizationResult","tokens","endState","_languageService","_standaloneThemeService","_toClassicTokens","previousStartIndex","i","len","length","t","startIndex","Token","scopes","actualResult","equals","TokenizationResult","_toBinaryTokens","tokenTheme","getColorTheme","resultLen","metadata","match","Uint32Array","isATokensProvider","provider","isEncodedTokensProvider","isThenable","obj","setColorMap","colorMap","standaloneThemeService","fromHex","setColorMapOverride","createTokenizationSupportAdapter","registerTokensProviderFactory","factory","adaptedFactory","createTokenizationSupport","create","TokenizationRegistry","registerFactory","setTokensProvider","setMonarchTokensProvider","languageDef","registerReferenceProvider","ReferenceProviderRegistry","registerRenameProvider","RenameProviderRegistry","registerSignatureHelpProvider","SignatureHelpProviderRegistry","registerHoverProvider","HoverProviderRegistry","provideHover","model","position","token","word","getWordAtPosition","undefined","range","lineNumber","startColumn","endColumn","column","registerDocumentSymbolProvider","DocumentSymbolProviderRegistry","registerDocumentHighlightProvider","DocumentHighlightProviderRegistry","registerLinkedEditingRangeProvider","LinkedEditingRangeProviderRegistry","registerDefinitionProvider","DefinitionProviderRegistry","registerImplementationProvider","ImplementationProviderRegistry","registerTypeDefinitionProvider","TypeDefinitionProviderRegistry","registerCodeLensProvider","CodeLensProviderRegistry","registerCodeActionProvider","CodeActionProviderRegistry","providedCodeActionKinds","provideCodeActions","context","markerService","markers","read","resource","uri","filter","m","areIntersectingOrTouching","only","resolveCodeAction","registerDocumentFormattingEditProvider","DocumentFormattingEditProviderRegistry","registerDocumentRangeFormattingEditProvider","DocumentRangeFormattingEditProviderRegistry","registerOnTypeFormattingEditProvider","OnTypeFormattingEditProviderRegistry","registerLinkProvider","LinkProviderRegistry","registerCompletionItemProvider","CompletionProviderRegistry","registerColorProvider","ColorProviderRegistry","registerFoldingRangeProvider","FoldingRangeProviderRegistry","registerDeclarationProvider","DeclarationProviderRegistry","registerSelectionRangeProvider","SelectionRangeRegistry","registerDocumentSemanticTokensProvider","DocumentSemanticTokensProviderRegistry","registerDocumentRangeSemanticTokensProvider","DocumentRangeSemanticTokensProviderRegistry","registerInlineCompletionsProvider","InlineCompletionsProviderRegistry","registerInlayHintsProvider","InlayHintsProviderRegistry","createMonacoLanguagesAPI","DocumentHighlightKind","CompletionItemKind","CompletionItemTag","CompletionItemInsertTextRule","SymbolKind","SymbolTag","IndentAction","CompletionTriggerKind","SignatureHelpTriggerKind","InlayHintKind","InlineCompletionTriggerKind","FoldingRangeKind"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Color } from '../../../base/common/color.js';\nimport { Range } from '../../common/core/range.js';\nimport * as languages from '../../common/languages.js';\nimport { LanguageConfigurationRegistry } from '../../common/languages/languageConfigurationRegistry.js';\nimport { ModesRegistry } from '../../common/languages/modesRegistry.js';\nimport { ILanguageService } from '../../common/services/language.js';\nimport * as standaloneEnums from '../../common/standalone/standaloneEnums.js';\nimport { StandaloneServices } from './standaloneServices.js';\nimport { compile } from '../common/monarch/monarchCompile.js';\nimport { MonarchTokenizer } from '../common/monarch/monarchLexer.js';\nimport { IStandaloneThemeService } from '../common/standaloneTheme.js';\nimport { IMarkerService } from '../../../platform/markers/common/markers.js';\n/**\n * Register information about a new language.\n */\nexport function register(language) {\n    ModesRegistry.registerLanguage(language);\n}\n/**\n * Get the information of all the registered languages.\n */\nexport function getLanguages() {\n    let result = [];\n    result = result.concat(ModesRegistry.getLanguages());\n    return result;\n}\nexport function getEncodedLanguageId(languageId) {\n    const languageService = StandaloneServices.get(ILanguageService);\n    return languageService.languageIdCodec.encodeLanguageId(languageId);\n}\n/**\n * An event emitted when a language is needed for the first time (e.g. a model has it set).\n * @event\n */\nexport function onLanguage(languageId, callback) {\n    const languageService = StandaloneServices.get(ILanguageService);\n    const disposable = languageService.onDidEncounterLanguage((encounteredLanguageId) => {\n        if (encounteredLanguageId === languageId) {\n            // stop listening\n            disposable.dispose();\n            // invoke actual listener\n            callback();\n        }\n    });\n    return disposable;\n}\n/**\n * Set the editing configuration for a language.\n */\nexport function setLanguageConfiguration(languageId, configuration) {\n    const languageService = StandaloneServices.get(ILanguageService);\n    if (!languageService.isRegisteredLanguageId(languageId)) {\n        throw new Error(`Cannot set configuration for unknown language ${languageId}`);\n    }\n    return LanguageConfigurationRegistry.register(languageId, configuration, 100);\n}\n/**\n * @internal\n */\nexport class EncodedTokenizationSupportAdapter {\n    constructor(languageId, actual) {\n        this._languageId = languageId;\n        this._actual = actual;\n    }\n    getInitialState() {\n        return this._actual.getInitialState();\n    }\n    tokenize(line, hasEOL, state) {\n        if (typeof this._actual.tokenize === 'function') {\n            return TokenizationSupportAdapter.adaptTokenize(this._languageId, this._actual, line, state);\n        }\n        throw new Error('Not supported!');\n    }\n    tokenizeEncoded(line, hasEOL, state) {\n        const result = this._actual.tokenizeEncoded(line, state);\n        return new languages.EncodedTokenizationResult(result.tokens, result.endState);\n    }\n}\n/**\n * @internal\n */\nexport class TokenizationSupportAdapter {\n    constructor(_languageId, _actual, _languageService, _standaloneThemeService) {\n        this._languageId = _languageId;\n        this._actual = _actual;\n        this._languageService = _languageService;\n        this._standaloneThemeService = _standaloneThemeService;\n    }\n    getInitialState() {\n        return this._actual.getInitialState();\n    }\n    static _toClassicTokens(tokens, language) {\n        const result = [];\n        let previousStartIndex = 0;\n        for (let i = 0, len = tokens.length; i < len; i++) {\n            const t = tokens[i];\n            let startIndex = t.startIndex;\n            // Prevent issues stemming from a buggy external tokenizer.\n            if (i === 0) {\n                // Force first token to start at first index!\n                startIndex = 0;\n            }\n            else if (startIndex < previousStartIndex) {\n                // Force tokens to be after one another!\n                startIndex = previousStartIndex;\n            }\n            result[i] = new languages.Token(startIndex, t.scopes, language);\n            previousStartIndex = startIndex;\n        }\n        return result;\n    }\n    static adaptTokenize(language, actual, line, state) {\n        const actualResult = actual.tokenize(line, state);\n        const tokens = TokenizationSupportAdapter._toClassicTokens(actualResult.tokens, language);\n        let endState;\n        // try to save an object if possible\n        if (actualResult.endState.equals(state)) {\n            endState = state;\n        }\n        else {\n            endState = actualResult.endState;\n        }\n        return new languages.TokenizationResult(tokens, endState);\n    }\n    tokenize(line, hasEOL, state) {\n        return TokenizationSupportAdapter.adaptTokenize(this._languageId, this._actual, line, state);\n    }\n    _toBinaryTokens(languageIdCodec, tokens) {\n        const languageId = languageIdCodec.encodeLanguageId(this._languageId);\n        const tokenTheme = this._standaloneThemeService.getColorTheme().tokenTheme;\n        const result = [];\n        let resultLen = 0;\n        let previousStartIndex = 0;\n        for (let i = 0, len = tokens.length; i < len; i++) {\n            const t = tokens[i];\n            const metadata = tokenTheme.match(languageId, t.scopes);\n            if (resultLen > 0 && result[resultLen - 1] === metadata) {\n                // same metadata\n                continue;\n            }\n            let startIndex = t.startIndex;\n            // Prevent issues stemming from a buggy external tokenizer.\n            if (i === 0) {\n                // Force first token to start at first index!\n                startIndex = 0;\n            }\n            else if (startIndex < previousStartIndex) {\n                // Force tokens to be after one another!\n                startIndex = previousStartIndex;\n            }\n            result[resultLen++] = startIndex;\n            result[resultLen++] = metadata;\n            previousStartIndex = startIndex;\n        }\n        const actualResult = new Uint32Array(resultLen);\n        for (let i = 0; i < resultLen; i++) {\n            actualResult[i] = result[i];\n        }\n        return actualResult;\n    }\n    tokenizeEncoded(line, hasEOL, state) {\n        const actualResult = this._actual.tokenize(line, state);\n        const tokens = this._toBinaryTokens(this._languageService.languageIdCodec, actualResult.tokens);\n        let endState;\n        // try to save an object if possible\n        if (actualResult.endState.equals(state)) {\n            endState = state;\n        }\n        else {\n            endState = actualResult.endState;\n        }\n        return new languages.EncodedTokenizationResult(tokens, endState);\n    }\n}\nfunction isATokensProvider(provider) {\n    return (typeof provider.getInitialState === 'function');\n}\nfunction isEncodedTokensProvider(provider) {\n    return 'tokenizeEncoded' in provider;\n}\nfunction isThenable(obj) {\n    return obj && typeof obj.then === 'function';\n}\n/**\n * Change the color map that is used for token colors.\n * Supported formats (hex): #RRGGBB, $RRGGBBAA, #RGB, #RGBA\n */\nexport function setColorMap(colorMap) {\n    const standaloneThemeService = StandaloneServices.get(IStandaloneThemeService);\n    if (colorMap) {\n        const result = [null];\n        for (let i = 1, len = colorMap.length; i < len; i++) {\n            result[i] = Color.fromHex(colorMap[i]);\n        }\n        standaloneThemeService.setColorMapOverride(result);\n    }\n    else {\n        standaloneThemeService.setColorMapOverride(null);\n    }\n}\n/**\n * @internal\n */\nfunction createTokenizationSupportAdapter(languageId, provider) {\n    if (isEncodedTokensProvider(provider)) {\n        return new EncodedTokenizationSupportAdapter(languageId, provider);\n    }\n    else {\n        return new TokenizationSupportAdapter(languageId, provider, StandaloneServices.get(ILanguageService), StandaloneServices.get(IStandaloneThemeService));\n    }\n}\n/**\n * Register a tokens provider factory for a language. This tokenizer will be exclusive with a tokenizer\n * set using `setTokensProvider` or one created using `setMonarchTokensProvider`, but will work together\n * with a tokens provider set using `registerDocumentSemanticTokensProvider` or `registerDocumentRangeSemanticTokensProvider`.\n */\nexport function registerTokensProviderFactory(languageId, factory) {\n    const adaptedFactory = {\n        createTokenizationSupport: () => __awaiter(this, void 0, void 0, function* () {\n            const result = yield Promise.resolve(factory.create());\n            if (!result) {\n                return null;\n            }\n            if (isATokensProvider(result)) {\n                return createTokenizationSupportAdapter(languageId, result);\n            }\n            return new MonarchTokenizer(StandaloneServices.get(ILanguageService), StandaloneServices.get(IStandaloneThemeService), languageId, compile(languageId, result));\n        })\n    };\n    return languages.TokenizationRegistry.registerFactory(languageId, adaptedFactory);\n}\n/**\n * Set the tokens provider for a language (manual implementation). This tokenizer will be exclusive\n * with a tokenizer created using `setMonarchTokensProvider`, or with `registerTokensProviderFactory`,\n * but will work together with a tokens provider set using `registerDocumentSemanticTokensProvider`\n * or `registerDocumentRangeSemanticTokensProvider`.\n */\nexport function setTokensProvider(languageId, provider) {\n    const languageService = StandaloneServices.get(ILanguageService);\n    if (!languageService.isRegisteredLanguageId(languageId)) {\n        throw new Error(`Cannot set tokens provider for unknown language ${languageId}`);\n    }\n    if (isThenable(provider)) {\n        return registerTokensProviderFactory(languageId, { create: () => provider });\n    }\n    return languages.TokenizationRegistry.register(languageId, createTokenizationSupportAdapter(languageId, provider));\n}\n/**\n * Set the tokens provider for a language (monarch implementation). This tokenizer will be exclusive\n * with a tokenizer set using `setTokensProvider`, or with `registerTokensProviderFactory`, but will\n * work together with a tokens provider set using `registerDocumentSemanticTokensProvider` or\n * `registerDocumentRangeSemanticTokensProvider`.\n */\nexport function setMonarchTokensProvider(languageId, languageDef) {\n    const create = (languageDef) => {\n        return new MonarchTokenizer(StandaloneServices.get(ILanguageService), StandaloneServices.get(IStandaloneThemeService), languageId, compile(languageId, languageDef));\n    };\n    if (isThenable(languageDef)) {\n        return registerTokensProviderFactory(languageId, { create: () => languageDef });\n    }\n    return languages.TokenizationRegistry.register(languageId, create(languageDef));\n}\n/**\n * Register a reference provider (used by e.g. reference search).\n */\nexport function registerReferenceProvider(languageId, provider) {\n    return languages.ReferenceProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a rename provider (used by e.g. rename symbol).\n */\nexport function registerRenameProvider(languageId, provider) {\n    return languages.RenameProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a signature help provider (used by e.g. parameter hints).\n */\nexport function registerSignatureHelpProvider(languageId, provider) {\n    return languages.SignatureHelpProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a hover provider (used by e.g. editor hover).\n */\nexport function registerHoverProvider(languageId, provider) {\n    return languages.HoverProviderRegistry.register(languageId, {\n        provideHover: (model, position, token) => {\n            const word = model.getWordAtPosition(position);\n            return Promise.resolve(provider.provideHover(model, position, token)).then((value) => {\n                if (!value) {\n                    return undefined;\n                }\n                if (!value.range && word) {\n                    value.range = new Range(position.lineNumber, word.startColumn, position.lineNumber, word.endColumn);\n                }\n                if (!value.range) {\n                    value.range = new Range(position.lineNumber, position.column, position.lineNumber, position.column);\n                }\n                return value;\n            });\n        }\n    });\n}\n/**\n * Register a document symbol provider (used by e.g. outline).\n */\nexport function registerDocumentSymbolProvider(languageId, provider) {\n    return languages.DocumentSymbolProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a document highlight provider (used by e.g. highlight occurrences).\n */\nexport function registerDocumentHighlightProvider(languageId, provider) {\n    return languages.DocumentHighlightProviderRegistry.register(languageId, provider);\n}\n/**\n * Register an linked editing range provider.\n */\nexport function registerLinkedEditingRangeProvider(languageId, provider) {\n    return languages.LinkedEditingRangeProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a definition provider (used by e.g. go to definition).\n */\nexport function registerDefinitionProvider(languageId, provider) {\n    return languages.DefinitionProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a implementation provider (used by e.g. go to implementation).\n */\nexport function registerImplementationProvider(languageId, provider) {\n    return languages.ImplementationProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a type definition provider (used by e.g. go to type definition).\n */\nexport function registerTypeDefinitionProvider(languageId, provider) {\n    return languages.TypeDefinitionProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a code lens provider (used by e.g. inline code lenses).\n */\nexport function registerCodeLensProvider(languageId, provider) {\n    return languages.CodeLensProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a code action provider (used by e.g. quick fix).\n */\nexport function registerCodeActionProvider(languageId, provider, metadata) {\n    return languages.CodeActionProviderRegistry.register(languageId, {\n        providedCodeActionKinds: metadata === null || metadata === void 0 ? void 0 : metadata.providedCodeActionKinds,\n        provideCodeActions: (model, range, context, token) => {\n            const markerService = StandaloneServices.get(IMarkerService);\n            const markers = markerService.read({ resource: model.uri }).filter(m => {\n                return Range.areIntersectingOrTouching(m, range);\n            });\n            return provider.provideCodeActions(model, range, { markers, only: context.only }, token);\n        },\n        resolveCodeAction: provider.resolveCodeAction\n    });\n}\n/**\n * Register a formatter that can handle only entire models.\n */\nexport function registerDocumentFormattingEditProvider(languageId, provider) {\n    return languages.DocumentFormattingEditProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a formatter that can handle a range inside a model.\n */\nexport function registerDocumentRangeFormattingEditProvider(languageId, provider) {\n    return languages.DocumentRangeFormattingEditProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a formatter than can do formatting as the user types.\n */\nexport function registerOnTypeFormattingEditProvider(languageId, provider) {\n    return languages.OnTypeFormattingEditProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a link provider that can find links in text.\n */\nexport function registerLinkProvider(languageId, provider) {\n    return languages.LinkProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a completion item provider (use by e.g. suggestions).\n */\nexport function registerCompletionItemProvider(languageId, provider) {\n    return languages.CompletionProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a document color provider (used by Color Picker, Color Decorator).\n */\nexport function registerColorProvider(languageId, provider) {\n    return languages.ColorProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a folding range provider\n */\nexport function registerFoldingRangeProvider(languageId, provider) {\n    return languages.FoldingRangeProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a declaration provider\n */\nexport function registerDeclarationProvider(languageId, provider) {\n    return languages.DeclarationProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a selection range provider\n */\nexport function registerSelectionRangeProvider(languageId, provider) {\n    return languages.SelectionRangeRegistry.register(languageId, provider);\n}\n/**\n * Register a document semantic tokens provider. A semantic tokens provider will complement and enhance a\n * simple top-down tokenizer. Simple top-down tokenizers can be set either via `setMonarchTokensProvider`\n * or `setTokensProvider`.\n *\n * For the best user experience, register both a semantic tokens provider and a top-down tokenizer.\n */\nexport function registerDocumentSemanticTokensProvider(languageId, provider) {\n    return languages.DocumentSemanticTokensProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a document range semantic tokens provider. A semantic tokens provider will complement and enhance a\n * simple top-down tokenizer. Simple top-down tokenizers can be set either via `setMonarchTokensProvider`\n * or `setTokensProvider`.\n *\n * For the best user experience, register both a semantic tokens provider and a top-down tokenizer.\n */\nexport function registerDocumentRangeSemanticTokensProvider(languageId, provider) {\n    return languages.DocumentRangeSemanticTokensProviderRegistry.register(languageId, provider);\n}\n/**\n * Register an inline completions provider.\n */\nexport function registerInlineCompletionsProvider(languageId, provider) {\n    return languages.InlineCompletionsProviderRegistry.register(languageId, provider);\n}\n/**\n * Register an inlay hints provider.\n */\nexport function registerInlayHintsProvider(languageId, provider) {\n    return languages.InlayHintsProviderRegistry.register(languageId, provider);\n}\n/**\n * @internal\n */\nexport function createMonacoLanguagesAPI() {\n    return {\n        register: register,\n        getLanguages: getLanguages,\n        onLanguage: onLanguage,\n        getEncodedLanguageId: getEncodedLanguageId,\n        // provider methods\n        setLanguageConfiguration: setLanguageConfiguration,\n        setColorMap: setColorMap,\n        registerTokensProviderFactory: registerTokensProviderFactory,\n        setTokensProvider: setTokensProvider,\n        setMonarchTokensProvider: setMonarchTokensProvider,\n        registerReferenceProvider: registerReferenceProvider,\n        registerRenameProvider: registerRenameProvider,\n        registerCompletionItemProvider: registerCompletionItemProvider,\n        registerSignatureHelpProvider: registerSignatureHelpProvider,\n        registerHoverProvider: registerHoverProvider,\n        registerDocumentSymbolProvider: registerDocumentSymbolProvider,\n        registerDocumentHighlightProvider: registerDocumentHighlightProvider,\n        registerLinkedEditingRangeProvider: registerLinkedEditingRangeProvider,\n        registerDefinitionProvider: registerDefinitionProvider,\n        registerImplementationProvider: registerImplementationProvider,\n        registerTypeDefinitionProvider: registerTypeDefinitionProvider,\n        registerCodeLensProvider: registerCodeLensProvider,\n        registerCodeActionProvider: registerCodeActionProvider,\n        registerDocumentFormattingEditProvider: registerDocumentFormattingEditProvider,\n        registerDocumentRangeFormattingEditProvider: registerDocumentRangeFormattingEditProvider,\n        registerOnTypeFormattingEditProvider: registerOnTypeFormattingEditProvider,\n        registerLinkProvider: registerLinkProvider,\n        registerColorProvider: registerColorProvider,\n        registerFoldingRangeProvider: registerFoldingRangeProvider,\n        registerDeclarationProvider: registerDeclarationProvider,\n        registerSelectionRangeProvider: registerSelectionRangeProvider,\n        registerDocumentSemanticTokensProvider: registerDocumentSemanticTokensProvider,\n        registerDocumentRangeSemanticTokensProvider: registerDocumentRangeSemanticTokensProvider,\n        registerInlineCompletionsProvider: registerInlineCompletionsProvider,\n        registerInlayHintsProvider: registerInlayHintsProvider,\n        // enums\n        DocumentHighlightKind: standaloneEnums.DocumentHighlightKind,\n        CompletionItemKind: standaloneEnums.CompletionItemKind,\n        CompletionItemTag: standaloneEnums.CompletionItemTag,\n        CompletionItemInsertTextRule: standaloneEnums.CompletionItemInsertTextRule,\n        SymbolKind: standaloneEnums.SymbolKind,\n        SymbolTag: standaloneEnums.SymbolTag,\n        IndentAction: standaloneEnums.IndentAction,\n        CompletionTriggerKind: standaloneEnums.CompletionTriggerKind,\n        SignatureHelpTriggerKind: standaloneEnums.SignatureHelpTriggerKind,\n        InlayHintKind: standaloneEnums.InlayHintKind,\n        InlineCompletionTriggerKind: standaloneEnums.InlineCompletionTriggerKind,\n        // classes\n        FoldingRangeKind: languages.FoldingRangeKind,\n    };\n}\n"]},"metadata":{},"sourceType":"module"}