{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { Color, RGBA } from '../../../base/common/color.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { assertNever } from '../../../base/common/types.js';\nimport * as nls from '../../../nls.js';\nimport { Extensions as JSONExtensions } from '../../jsonschemas/common/jsonContributionRegistry.js';\nimport * as platform from '../../registry/common/platform.js';\n/**\n * Returns the css variable name for the given color identifier. Dots (`.`) are replaced with hyphens (`-`) and\n * everything is prefixed with `--vscode-`.\n *\n * @sample `editorSuggestWidget.background` is `--vscode-editorSuggestWidget-background`.\n */\n\nexport function asCssVariableName(colorIdent) {\n  return `--vscode-${colorIdent.replace('.', '-')}`;\n} // color registry\n\nexport const Extensions = {\n  ColorContribution: 'base.contributions.colors'\n};\n\nclass ColorRegistry {\n  constructor() {\n    this._onDidChangeSchema = new Emitter();\n    this.onDidChangeSchema = this._onDidChangeSchema.event;\n    this.colorSchema = {\n      type: 'object',\n      properties: {}\n    };\n    this.colorReferenceSchema = {\n      type: 'string',\n      enum: [],\n      enumDescriptions: []\n    };\n    this.colorsById = {};\n  }\n\n  registerColor(id, defaults, description, needsTransparency = false, deprecationMessage) {\n    let colorContribution = {\n      id,\n      description,\n      defaults,\n      needsTransparency,\n      deprecationMessage\n    };\n    this.colorsById[id] = colorContribution;\n    let propertySchema = {\n      type: 'string',\n      description,\n      format: 'color-hex',\n      defaultSnippets: [{\n        body: '${1:#ff0000}'\n      }]\n    };\n\n    if (deprecationMessage) {\n      propertySchema.deprecationMessage = deprecationMessage;\n    }\n\n    this.colorSchema.properties[id] = propertySchema;\n    this.colorReferenceSchema.enum.push(id);\n    this.colorReferenceSchema.enumDescriptions.push(description);\n\n    this._onDidChangeSchema.fire();\n\n    return id;\n  }\n\n  getColors() {\n    return Object.keys(this.colorsById).map(id => this.colorsById[id]);\n  }\n\n  resolveDefaultColor(id, theme) {\n    const colorDesc = this.colorsById[id];\n\n    if (colorDesc && colorDesc.defaults) {\n      const colorValue = colorDesc.defaults[theme.type];\n      return resolveColorValue(colorValue, theme);\n    }\n\n    return undefined;\n  }\n\n  getColorSchema() {\n    return this.colorSchema;\n  }\n\n  toString() {\n    let sorter = (a, b) => {\n      let cat1 = a.indexOf('.') === -1 ? 0 : 1;\n      let cat2 = b.indexOf('.') === -1 ? 0 : 1;\n\n      if (cat1 !== cat2) {\n        return cat1 - cat2;\n      }\n\n      return a.localeCompare(b);\n    };\n\n    return Object.keys(this.colorsById).sort(sorter).map(k => `- \\`${k}\\`: ${this.colorsById[k].description}`).join('\\n');\n  }\n\n}\n\nconst colorRegistry = new ColorRegistry();\nplatform.Registry.add(Extensions.ColorContribution, colorRegistry);\nexport function registerColor(id, defaults, description, needsTransparency, deprecationMessage) {\n  return colorRegistry.registerColor(id, defaults, description, needsTransparency, deprecationMessage);\n} // ----- base colors\n\nexport const foreground = registerColor('foreground', {\n  dark: '#CCCCCC',\n  light: '#616161',\n  hc: '#FFFFFF'\n}, nls.localize('foreground', \"Overall foreground color. This color is only used if not overridden by a component.\"));\nexport const errorForeground = registerColor('errorForeground', {\n  dark: '#F48771',\n  light: '#A1260D',\n  hc: '#F48771'\n}, nls.localize('errorForeground', \"Overall foreground color for error messages. This color is only used if not overridden by a component.\"));\nexport const descriptionForeground = registerColor('descriptionForeground', {\n  light: '#717171',\n  dark: transparent(foreground, 0.7),\n  hc: transparent(foreground, 0.7)\n}, nls.localize('descriptionForeground', \"Foreground color for description text providing additional information, for example for a label.\"));\nexport const iconForeground = registerColor('icon.foreground', {\n  dark: '#C5C5C5',\n  light: '#424242',\n  hc: '#FFFFFF'\n}, nls.localize('iconForeground', \"The default color for icons in the workbench.\"));\nexport const focusBorder = registerColor('focusBorder', {\n  dark: '#007FD4',\n  light: '#0090F1',\n  hc: '#F38518'\n}, nls.localize('focusBorder', \"Overall border color for focused elements. This color is only used if not overridden by a component.\"));\nexport const contrastBorder = registerColor('contrastBorder', {\n  light: null,\n  dark: null,\n  hc: '#6FC3DF'\n}, nls.localize('contrastBorder', \"An extra border around elements to separate them from others for greater contrast.\"));\nexport const activeContrastBorder = registerColor('contrastActiveBorder', {\n  light: null,\n  dark: null,\n  hc: focusBorder\n}, nls.localize('activeContrastBorder', \"An extra border around active elements to separate them from others for greater contrast.\"));\nexport const selectionBackground = registerColor('selection.background', {\n  light: null,\n  dark: null,\n  hc: null\n}, nls.localize('selectionBackground', \"The background color of text selections in the workbench (e.g. for input fields or text areas). Note that this does not apply to selections within the editor.\")); // ------ text colors\n\nexport const textSeparatorForeground = registerColor('textSeparator.foreground', {\n  light: '#0000002e',\n  dark: '#ffffff2e',\n  hc: Color.black\n}, nls.localize('textSeparatorForeground', \"Color for text separators.\"));\nexport const textLinkForeground = registerColor('textLink.foreground', {\n  light: '#006AB1',\n  dark: '#3794FF',\n  hc: '#3794FF'\n}, nls.localize('textLinkForeground', \"Foreground color for links in text.\"));\nexport const textLinkActiveForeground = registerColor('textLink.activeForeground', {\n  light: '#006AB1',\n  dark: '#3794FF',\n  hc: '#3794FF'\n}, nls.localize('textLinkActiveForeground', \"Foreground color for links in text when clicked on and on mouse hover.\"));\nexport const textPreformatForeground = registerColor('textPreformat.foreground', {\n  light: '#A31515',\n  dark: '#D7BA7D',\n  hc: '#D7BA7D'\n}, nls.localize('textPreformatForeground', \"Foreground color for preformatted text segments.\"));\nexport const textBlockQuoteBackground = registerColor('textBlockQuote.background', {\n  light: '#7f7f7f1a',\n  dark: '#7f7f7f1a',\n  hc: null\n}, nls.localize('textBlockQuoteBackground', \"Background color for block quotes in text.\"));\nexport const textBlockQuoteBorder = registerColor('textBlockQuote.border', {\n  light: '#007acc80',\n  dark: '#007acc80',\n  hc: Color.white\n}, nls.localize('textBlockQuoteBorder', \"Border color for block quotes in text.\"));\nexport const textCodeBlockBackground = registerColor('textCodeBlock.background', {\n  light: '#dcdcdc66',\n  dark: '#0a0a0a66',\n  hc: Color.black\n}, nls.localize('textCodeBlockBackground', \"Background color for code blocks in text.\")); // ----- widgets\n\nexport const widgetShadow = registerColor('widget.shadow', {\n  dark: transparent(Color.black, .36),\n  light: transparent(Color.black, .16),\n  hc: null\n}, nls.localize('widgetShadow', 'Shadow color of widgets such as find/replace inside the editor.'));\nexport const inputBackground = registerColor('input.background', {\n  dark: '#3C3C3C',\n  light: Color.white,\n  hc: Color.black\n}, nls.localize('inputBoxBackground', \"Input box background.\"));\nexport const inputForeground = registerColor('input.foreground', {\n  dark: foreground,\n  light: foreground,\n  hc: foreground\n}, nls.localize('inputBoxForeground', \"Input box foreground.\"));\nexport const inputBorder = registerColor('input.border', {\n  dark: null,\n  light: null,\n  hc: contrastBorder\n}, nls.localize('inputBoxBorder', \"Input box border.\"));\nexport const inputActiveOptionBorder = registerColor('inputOption.activeBorder', {\n  dark: '#007ACC00',\n  light: '#007ACC00',\n  hc: contrastBorder\n}, nls.localize('inputBoxActiveOptionBorder', \"Border color of activated options in input fields.\"));\nexport const inputActiveOptionHoverBackground = registerColor('inputOption.hoverBackground', {\n  dark: '#5a5d5e80',\n  light: '#b8b8b850',\n  hc: null\n}, nls.localize('inputOption.hoverBackground', \"Background color of activated options in input fields.\"));\nexport const inputActiveOptionBackground = registerColor('inputOption.activeBackground', {\n  dark: transparent(focusBorder, 0.4),\n  light: transparent(focusBorder, 0.2),\n  hc: Color.transparent\n}, nls.localize('inputOption.activeBackground', \"Background hover color of options in input fields.\"));\nexport const inputActiveOptionForeground = registerColor('inputOption.activeForeground', {\n  dark: Color.white,\n  light: Color.black,\n  hc: null\n}, nls.localize('inputOption.activeForeground', \"Foreground color of activated options in input fields.\"));\nexport const inputPlaceholderForeground = registerColor('input.placeholderForeground', {\n  light: transparent(foreground, 0.5),\n  dark: transparent(foreground, 0.5),\n  hc: transparent(foreground, 0.7)\n}, nls.localize('inputPlaceholderForeground', \"Input box foreground color for placeholder text.\"));\nexport const inputValidationInfoBackground = registerColor('inputValidation.infoBackground', {\n  dark: '#063B49',\n  light: '#D6ECF2',\n  hc: Color.black\n}, nls.localize('inputValidationInfoBackground', \"Input validation background color for information severity.\"));\nexport const inputValidationInfoForeground = registerColor('inputValidation.infoForeground', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('inputValidationInfoForeground', \"Input validation foreground color for information severity.\"));\nexport const inputValidationInfoBorder = registerColor('inputValidation.infoBorder', {\n  dark: '#007acc',\n  light: '#007acc',\n  hc: contrastBorder\n}, nls.localize('inputValidationInfoBorder', \"Input validation border color for information severity.\"));\nexport const inputValidationWarningBackground = registerColor('inputValidation.warningBackground', {\n  dark: '#352A05',\n  light: '#F6F5D2',\n  hc: Color.black\n}, nls.localize('inputValidationWarningBackground', \"Input validation background color for warning severity.\"));\nexport const inputValidationWarningForeground = registerColor('inputValidation.warningForeground', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('inputValidationWarningForeground', \"Input validation foreground color for warning severity.\"));\nexport const inputValidationWarningBorder = registerColor('inputValidation.warningBorder', {\n  dark: '#B89500',\n  light: '#B89500',\n  hc: contrastBorder\n}, nls.localize('inputValidationWarningBorder', \"Input validation border color for warning severity.\"));\nexport const inputValidationErrorBackground = registerColor('inputValidation.errorBackground', {\n  dark: '#5A1D1D',\n  light: '#F2DEDE',\n  hc: Color.black\n}, nls.localize('inputValidationErrorBackground', \"Input validation background color for error severity.\"));\nexport const inputValidationErrorForeground = registerColor('inputValidation.errorForeground', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('inputValidationErrorForeground', \"Input validation foreground color for error severity.\"));\nexport const inputValidationErrorBorder = registerColor('inputValidation.errorBorder', {\n  dark: '#BE1100',\n  light: '#BE1100',\n  hc: contrastBorder\n}, nls.localize('inputValidationErrorBorder', \"Input validation border color for error severity.\"));\nexport const selectBackground = registerColor('dropdown.background', {\n  dark: '#3C3C3C',\n  light: Color.white,\n  hc: Color.black\n}, nls.localize('dropdownBackground', \"Dropdown background.\"));\nexport const selectListBackground = registerColor('dropdown.listBackground', {\n  dark: null,\n  light: null,\n  hc: Color.black\n}, nls.localize('dropdownListBackground', \"Dropdown list background.\"));\nexport const selectForeground = registerColor('dropdown.foreground', {\n  dark: '#F0F0F0',\n  light: null,\n  hc: Color.white\n}, nls.localize('dropdownForeground', \"Dropdown foreground.\"));\nexport const selectBorder = registerColor('dropdown.border', {\n  dark: selectBackground,\n  light: '#CECECE',\n  hc: contrastBorder\n}, nls.localize('dropdownBorder', \"Dropdown border.\"));\nexport const simpleCheckboxBackground = registerColor('checkbox.background', {\n  dark: selectBackground,\n  light: selectBackground,\n  hc: selectBackground\n}, nls.localize('checkbox.background', \"Background color of checkbox widget.\"));\nexport const simpleCheckboxForeground = registerColor('checkbox.foreground', {\n  dark: selectForeground,\n  light: selectForeground,\n  hc: selectForeground\n}, nls.localize('checkbox.foreground', \"Foreground color of checkbox widget.\"));\nexport const simpleCheckboxBorder = registerColor('checkbox.border', {\n  dark: selectBorder,\n  light: selectBorder,\n  hc: selectBorder\n}, nls.localize('checkbox.border', \"Border color of checkbox widget.\"));\nexport const buttonForeground = registerColor('button.foreground', {\n  dark: Color.white,\n  light: Color.white,\n  hc: Color.white\n}, nls.localize('buttonForeground', \"Button foreground color.\"));\nexport const buttonBackground = registerColor('button.background', {\n  dark: '#0E639C',\n  light: '#007ACC',\n  hc: null\n}, nls.localize('buttonBackground', \"Button background color.\"));\nexport const buttonHoverBackground = registerColor('button.hoverBackground', {\n  dark: lighten(buttonBackground, 0.2),\n  light: darken(buttonBackground, 0.2),\n  hc: null\n}, nls.localize('buttonHoverBackground', \"Button background color when hovering.\"));\nexport const buttonBorder = registerColor('button.border', {\n  dark: contrastBorder,\n  light: contrastBorder,\n  hc: contrastBorder\n}, nls.localize('buttonBorder', \"Button border color.\"));\nexport const buttonSecondaryForeground = registerColor('button.secondaryForeground', {\n  dark: Color.white,\n  light: Color.white,\n  hc: Color.white\n}, nls.localize('buttonSecondaryForeground', \"Secondary button foreground color.\"));\nexport const buttonSecondaryBackground = registerColor('button.secondaryBackground', {\n  dark: '#3A3D41',\n  light: '#5F6A79',\n  hc: null\n}, nls.localize('buttonSecondaryBackground', \"Secondary button background color.\"));\nexport const buttonSecondaryHoverBackground = registerColor('button.secondaryHoverBackground', {\n  dark: lighten(buttonSecondaryBackground, 0.2),\n  light: darken(buttonSecondaryBackground, 0.2),\n  hc: null\n}, nls.localize('buttonSecondaryHoverBackground', \"Secondary button background color when hovering.\"));\nexport const badgeBackground = registerColor('badge.background', {\n  dark: '#4D4D4D',\n  light: '#C4C4C4',\n  hc: Color.black\n}, nls.localize('badgeBackground', \"Badge background color. Badges are small information labels, e.g. for search results count.\"));\nexport const badgeForeground = registerColor('badge.foreground', {\n  dark: Color.white,\n  light: '#333',\n  hc: Color.white\n}, nls.localize('badgeForeground', \"Badge foreground color. Badges are small information labels, e.g. for search results count.\"));\nexport const scrollbarShadow = registerColor('scrollbar.shadow', {\n  dark: '#000000',\n  light: '#DDDDDD',\n  hc: null\n}, nls.localize('scrollbarShadow', \"Scrollbar shadow to indicate that the view is scrolled.\"));\nexport const scrollbarSliderBackground = registerColor('scrollbarSlider.background', {\n  dark: Color.fromHex('#797979').transparent(0.4),\n  light: Color.fromHex('#646464').transparent(0.4),\n  hc: transparent(contrastBorder, 0.6)\n}, nls.localize('scrollbarSliderBackground', \"Scrollbar slider background color.\"));\nexport const scrollbarSliderHoverBackground = registerColor('scrollbarSlider.hoverBackground', {\n  dark: Color.fromHex('#646464').transparent(0.7),\n  light: Color.fromHex('#646464').transparent(0.7),\n  hc: transparent(contrastBorder, 0.8)\n}, nls.localize('scrollbarSliderHoverBackground', \"Scrollbar slider background color when hovering.\"));\nexport const scrollbarSliderActiveBackground = registerColor('scrollbarSlider.activeBackground', {\n  dark: Color.fromHex('#BFBFBF').transparent(0.4),\n  light: Color.fromHex('#000000').transparent(0.6),\n  hc: contrastBorder\n}, nls.localize('scrollbarSliderActiveBackground', \"Scrollbar slider background color when clicked on.\"));\nexport const progressBarBackground = registerColor('progressBar.background', {\n  dark: Color.fromHex('#0E70C0'),\n  light: Color.fromHex('#0E70C0'),\n  hc: contrastBorder\n}, nls.localize('progressBarBackground', \"Background color of the progress bar that can show for long running operations.\"));\nexport const editorErrorBackground = registerColor('editorError.background', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('editorError.background', 'Background color of error text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorErrorForeground = registerColor('editorError.foreground', {\n  dark: '#F14C4C',\n  light: '#E51400',\n  hc: null\n}, nls.localize('editorError.foreground', 'Foreground color of error squigglies in the editor.'));\nexport const editorErrorBorder = registerColor('editorError.border', {\n  dark: null,\n  light: null,\n  hc: Color.fromHex('#E47777').transparent(0.8)\n}, nls.localize('errorBorder', 'Border color of error boxes in the editor.'));\nexport const editorWarningBackground = registerColor('editorWarning.background', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('editorWarning.background', 'Background color of warning text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorWarningForeground = registerColor('editorWarning.foreground', {\n  dark: '#CCA700',\n  light: '#BF8803',\n  hc: null\n}, nls.localize('editorWarning.foreground', 'Foreground color of warning squigglies in the editor.'));\nexport const editorWarningBorder = registerColor('editorWarning.border', {\n  dark: null,\n  light: null,\n  hc: Color.fromHex('#FFCC00').transparent(0.8)\n}, nls.localize('warningBorder', 'Border color of warning boxes in the editor.'));\nexport const editorInfoBackground = registerColor('editorInfo.background', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('editorInfo.background', 'Background color of info text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorInfoForeground = registerColor('editorInfo.foreground', {\n  dark: '#3794FF',\n  light: '#1a85ff',\n  hc: '#3794FF'\n}, nls.localize('editorInfo.foreground', 'Foreground color of info squigglies in the editor.'));\nexport const editorInfoBorder = registerColor('editorInfo.border', {\n  dark: null,\n  light: null,\n  hc: Color.fromHex('#3794FF').transparent(0.8)\n}, nls.localize('infoBorder', 'Border color of info boxes in the editor.'));\nexport const editorHintForeground = registerColor('editorHint.foreground', {\n  dark: Color.fromHex('#eeeeee').transparent(0.7),\n  light: '#6c6c6c',\n  hc: null\n}, nls.localize('editorHint.foreground', 'Foreground color of hint squigglies in the editor.'));\nexport const editorHintBorder = registerColor('editorHint.border', {\n  dark: null,\n  light: null,\n  hc: Color.fromHex('#eeeeee').transparent(0.8)\n}, nls.localize('hintBorder', 'Border color of hint boxes in the editor.'));\nexport const sashHoverBorder = registerColor('sash.hoverBorder', {\n  dark: focusBorder,\n  light: focusBorder,\n  hc: focusBorder\n}, nls.localize('sashActiveBorder', \"Border color of active sashes.\"));\n/**\n * Editor background color.\n * Because of bug https://monacotools.visualstudio.com/DefaultCollection/Monaco/_workitems/edit/13254\n * we are *not* using the color white (or #ffffff, rgba(255,255,255)) but something very close to white.\n */\n\nexport const editorBackground = registerColor('editor.background', {\n  light: '#fffffe',\n  dark: '#1E1E1E',\n  hc: Color.black\n}, nls.localize('editorBackground', \"Editor background color.\"));\n/**\n * Editor foreground color.\n */\n\nexport const editorForeground = registerColor('editor.foreground', {\n  light: '#333333',\n  dark: '#BBBBBB',\n  hc: Color.white\n}, nls.localize('editorForeground', \"Editor default foreground color.\"));\n/**\n * Editor widgets\n */\n\nexport const editorWidgetBackground = registerColor('editorWidget.background', {\n  dark: '#252526',\n  light: '#F3F3F3',\n  hc: '#0C141F'\n}, nls.localize('editorWidgetBackground', 'Background color of editor widgets, such as find/replace.'));\nexport const editorWidgetForeground = registerColor('editorWidget.foreground', {\n  dark: foreground,\n  light: foreground,\n  hc: foreground\n}, nls.localize('editorWidgetForeground', 'Foreground color of editor widgets, such as find/replace.'));\nexport const editorWidgetBorder = registerColor('editorWidget.border', {\n  dark: '#454545',\n  light: '#C8C8C8',\n  hc: contrastBorder\n}, nls.localize('editorWidgetBorder', 'Border color of editor widgets. The color is only used if the widget chooses to have a border and if the color is not overridden by a widget.'));\nexport const editorWidgetResizeBorder = registerColor('editorWidget.resizeBorder', {\n  light: null,\n  dark: null,\n  hc: null\n}, nls.localize('editorWidgetResizeBorder', \"Border color of the resize bar of editor widgets. The color is only used if the widget chooses to have a resize border and if the color is not overridden by a widget.\"));\n/**\n * Quick pick widget\n */\n\nexport const quickInputBackground = registerColor('quickInput.background', {\n  dark: editorWidgetBackground,\n  light: editorWidgetBackground,\n  hc: editorWidgetBackground\n}, nls.localize('pickerBackground', \"Quick picker background color. The quick picker widget is the container for pickers like the command palette.\"));\nexport const quickInputForeground = registerColor('quickInput.foreground', {\n  dark: editorWidgetForeground,\n  light: editorWidgetForeground,\n  hc: editorWidgetForeground\n}, nls.localize('pickerForeground', \"Quick picker foreground color. The quick picker widget is the container for pickers like the command palette.\"));\nexport const quickInputTitleBackground = registerColor('quickInputTitle.background', {\n  dark: new Color(new RGBA(255, 255, 255, 0.105)),\n  light: new Color(new RGBA(0, 0, 0, 0.06)),\n  hc: '#000000'\n}, nls.localize('pickerTitleBackground', \"Quick picker title background color. The quick picker widget is the container for pickers like the command palette.\"));\nexport const pickerGroupForeground = registerColor('pickerGroup.foreground', {\n  dark: '#3794FF',\n  light: '#0066BF',\n  hc: Color.white\n}, nls.localize('pickerGroupForeground', \"Quick picker color for grouping labels.\"));\nexport const pickerGroupBorder = registerColor('pickerGroup.border', {\n  dark: '#3F3F46',\n  light: '#CCCEDB',\n  hc: Color.white\n}, nls.localize('pickerGroupBorder', \"Quick picker color for grouping borders.\"));\n/**\n * Keybinding label\n */\n\nexport const keybindingLabelBackground = registerColor('keybindingLabel.background', {\n  dark: new Color(new RGBA(128, 128, 128, 0.17)),\n  light: new Color(new RGBA(221, 221, 221, 0.4)),\n  hc: Color.transparent\n}, nls.localize('keybindingLabelBackground', \"Keybinding label background color. The keybinding label is used to represent a keyboard shortcut.\"));\nexport const keybindingLabelForeground = registerColor('keybindingLabel.foreground', {\n  dark: Color.fromHex('#CCCCCC'),\n  light: Color.fromHex('#555555'),\n  hc: Color.white\n}, nls.localize('keybindingLabelForeground', \"Keybinding label foreground color. The keybinding label is used to represent a keyboard shortcut.\"));\nexport const keybindingLabelBorder = registerColor('keybindingLabel.border', {\n  dark: new Color(new RGBA(51, 51, 51, 0.6)),\n  light: new Color(new RGBA(204, 204, 204, 0.4)),\n  hc: new Color(new RGBA(111, 195, 223))\n}, nls.localize('keybindingLabelBorder', \"Keybinding label border color. The keybinding label is used to represent a keyboard shortcut.\"));\nexport const keybindingLabelBottomBorder = registerColor('keybindingLabel.bottomBorder', {\n  dark: new Color(new RGBA(68, 68, 68, 0.6)),\n  light: new Color(new RGBA(187, 187, 187, 0.4)),\n  hc: new Color(new RGBA(111, 195, 223))\n}, nls.localize('keybindingLabelBottomBorder', \"Keybinding label border bottom color. The keybinding label is used to represent a keyboard shortcut.\"));\n/**\n * Editor selection colors.\n */\n\nexport const editorSelectionBackground = registerColor('editor.selectionBackground', {\n  light: '#ADD6FF',\n  dark: '#264F78',\n  hc: '#f3f518'\n}, nls.localize('editorSelectionBackground', \"Color of the editor selection.\"));\nexport const editorSelectionForeground = registerColor('editor.selectionForeground', {\n  light: null,\n  dark: null,\n  hc: '#000000'\n}, nls.localize('editorSelectionForeground', \"Color of the selected text for high contrast.\"));\nexport const editorInactiveSelection = registerColor('editor.inactiveSelectionBackground', {\n  light: transparent(editorSelectionBackground, 0.5),\n  dark: transparent(editorSelectionBackground, 0.5),\n  hc: transparent(editorSelectionBackground, 0.5)\n}, nls.localize('editorInactiveSelection', \"Color of the selection in an inactive editor. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport const editorSelectionHighlight = registerColor('editor.selectionHighlightBackground', {\n  light: lessProminent(editorSelectionBackground, editorBackground, 0.3, 0.6),\n  dark: lessProminent(editorSelectionBackground, editorBackground, 0.3, 0.6),\n  hc: null\n}, nls.localize('editorSelectionHighlight', 'Color for regions with the same content as the selection. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorSelectionHighlightBorder = registerColor('editor.selectionHighlightBorder', {\n  light: null,\n  dark: null,\n  hc: activeContrastBorder\n}, nls.localize('editorSelectionHighlightBorder', \"Border color for regions with the same content as the selection.\"));\n/**\n * Editor find match colors.\n */\n\nexport const editorFindMatch = registerColor('editor.findMatchBackground', {\n  light: '#A8AC94',\n  dark: '#515C6A',\n  hc: null\n}, nls.localize('editorFindMatch', \"Color of the current search match.\"));\nexport const editorFindMatchHighlight = registerColor('editor.findMatchHighlightBackground', {\n  light: '#EA5C0055',\n  dark: '#EA5C0055',\n  hc: null\n}, nls.localize('findMatchHighlight', \"Color of the other search matches. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport const editorFindRangeHighlight = registerColor('editor.findRangeHighlightBackground', {\n  dark: '#3a3d4166',\n  light: '#b4b4b44d',\n  hc: null\n}, nls.localize('findRangeHighlight', \"Color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport const editorFindMatchBorder = registerColor('editor.findMatchBorder', {\n  light: null,\n  dark: null,\n  hc: activeContrastBorder\n}, nls.localize('editorFindMatchBorder', \"Border color of the current search match.\"));\nexport const editorFindMatchHighlightBorder = registerColor('editor.findMatchHighlightBorder', {\n  light: null,\n  dark: null,\n  hc: activeContrastBorder\n}, nls.localize('findMatchHighlightBorder', \"Border color of the other search matches.\"));\nexport const editorFindRangeHighlightBorder = registerColor('editor.findRangeHighlightBorder', {\n  dark: null,\n  light: null,\n  hc: transparent(activeContrastBorder, 0.4)\n}, nls.localize('findRangeHighlightBorder', \"Border color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations.\"), true);\n/**\n * Search Editor query match colors.\n *\n * Distinct from normal editor find match to allow for better differentiation\n */\n\nexport const searchEditorFindMatch = registerColor('searchEditor.findMatchBackground', {\n  light: transparent(editorFindMatchHighlight, 0.66),\n  dark: transparent(editorFindMatchHighlight, 0.66),\n  hc: editorFindMatchHighlight\n}, nls.localize('searchEditor.queryMatch', \"Color of the Search Editor query matches.\"));\nexport const searchEditorFindMatchBorder = registerColor('searchEditor.findMatchBorder', {\n  light: transparent(editorFindMatchHighlightBorder, 0.66),\n  dark: transparent(editorFindMatchHighlightBorder, 0.66),\n  hc: editorFindMatchHighlightBorder\n}, nls.localize('searchEditor.editorFindMatchBorder', \"Border color of the Search Editor query matches.\"));\n/**\n * Editor hover\n */\n\nexport const editorHoverHighlight = registerColor('editor.hoverHighlightBackground', {\n  light: '#ADD6FF26',\n  dark: '#264f7840',\n  hc: '#ADD6FF26'\n}, nls.localize('hoverHighlight', 'Highlight below the word for which a hover is shown. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorHoverBackground = registerColor('editorHoverWidget.background', {\n  light: editorWidgetBackground,\n  dark: editorWidgetBackground,\n  hc: editorWidgetBackground\n}, nls.localize('hoverBackground', 'Background color of the editor hover.'));\nexport const editorHoverForeground = registerColor('editorHoverWidget.foreground', {\n  light: editorWidgetForeground,\n  dark: editorWidgetForeground,\n  hc: editorWidgetForeground\n}, nls.localize('hoverForeground', 'Foreground color of the editor hover.'));\nexport const editorHoverBorder = registerColor('editorHoverWidget.border', {\n  light: editorWidgetBorder,\n  dark: editorWidgetBorder,\n  hc: editorWidgetBorder\n}, nls.localize('hoverBorder', 'Border color of the editor hover.'));\nexport const editorHoverStatusBarBackground = registerColor('editorHoverWidget.statusBarBackground', {\n  dark: lighten(editorHoverBackground, 0.2),\n  light: darken(editorHoverBackground, 0.05),\n  hc: editorWidgetBackground\n}, nls.localize('statusBarBackground', \"Background color of the editor hover status bar.\"));\n/**\n * Editor link colors\n */\n\nexport const editorActiveLinkForeground = registerColor('editorLink.activeForeground', {\n  dark: '#4E94CE',\n  light: Color.blue,\n  hc: Color.cyan\n}, nls.localize('activeLinkForeground', 'Color of active links.'));\n/**\n * Inline hints\n */\n\nexport const editorInlayHintForeground = registerColor('editorInlayHint.foreground', {\n  dark: transparent(badgeForeground, .8),\n  light: transparent(badgeForeground, .8),\n  hc: badgeForeground\n}, nls.localize('editorInlayHintForeground', 'Foreground color of inline hints'));\nexport const editorInlayHintBackground = registerColor('editorInlayHint.background', {\n  dark: transparent(badgeBackground, .6),\n  light: transparent(badgeBackground, .3),\n  hc: badgeBackground\n}, nls.localize('editorInlayHintBackground', 'Background color of inline hints'));\nexport const editorInlayHintTypeForeground = registerColor('editorInlayHint.typeForeground', {\n  dark: editorInlayHintForeground,\n  light: editorInlayHintForeground,\n  hc: editorInlayHintForeground\n}, nls.localize('editorInlayHintForegroundTypes', 'Foreground color of inline hints for types'));\nexport const editorInlayHintTypeBackground = registerColor('editorInlayHint.typeBackground', {\n  dark: editorInlayHintBackground,\n  light: editorInlayHintBackground,\n  hc: editorInlayHintBackground\n}, nls.localize('editorInlayHintBackgroundTypes', 'Background color of inline hints for types'));\nexport const editorInlayHintParameterForeground = registerColor('editorInlayHint.parameterForeground', {\n  dark: editorInlayHintForeground,\n  light: editorInlayHintForeground,\n  hc: editorInlayHintForeground\n}, nls.localize('editorInlayHintForegroundParameter', 'Foreground color of inline hints for parameters'));\nexport const editorInlayHintParameterBackground = registerColor('editorInlayHint.parameterBackground', {\n  dark: editorInlayHintBackground,\n  light: editorInlayHintBackground,\n  hc: editorInlayHintBackground\n}, nls.localize('editorInlayHintBackgroundParameter', 'Background color of inline hints for parameters'));\n/**\n * Editor lighbulb icon colors\n */\n\nexport const editorLightBulbForeground = registerColor('editorLightBulb.foreground', {\n  dark: '#FFCC00',\n  light: '#DDB100',\n  hc: '#FFCC00'\n}, nls.localize('editorLightBulbForeground', \"The color used for the lightbulb actions icon.\"));\nexport const editorLightBulbAutoFixForeground = registerColor('editorLightBulbAutoFix.foreground', {\n  dark: '#75BEFF',\n  light: '#007ACC',\n  hc: '#75BEFF'\n}, nls.localize('editorLightBulbAutoFixForeground', \"The color used for the lightbulb auto fix actions icon.\"));\n/**\n * Diff Editor Colors\n */\n\nexport const defaultInsertColor = new Color(new RGBA(155, 185, 85, 0.2));\nexport const defaultRemoveColor = new Color(new RGBA(255, 0, 0, 0.2));\nexport const diffInserted = registerColor('diffEditor.insertedTextBackground', {\n  dark: defaultInsertColor,\n  light: defaultInsertColor,\n  hc: null\n}, nls.localize('diffEditorInserted', 'Background color for text that got inserted. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const diffRemoved = registerColor('diffEditor.removedTextBackground', {\n  dark: defaultRemoveColor,\n  light: defaultRemoveColor,\n  hc: null\n}, nls.localize('diffEditorRemoved', 'Background color for text that got removed. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const diffInsertedOutline = registerColor('diffEditor.insertedTextBorder', {\n  dark: null,\n  light: null,\n  hc: '#33ff2eff'\n}, nls.localize('diffEditorInsertedOutline', 'Outline color for the text that got inserted.'));\nexport const diffRemovedOutline = registerColor('diffEditor.removedTextBorder', {\n  dark: null,\n  light: null,\n  hc: '#FF008F'\n}, nls.localize('diffEditorRemovedOutline', 'Outline color for text that got removed.'));\nexport const diffBorder = registerColor('diffEditor.border', {\n  dark: null,\n  light: null,\n  hc: contrastBorder\n}, nls.localize('diffEditorBorder', 'Border color between the two text editors.'));\nexport const diffDiagonalFill = registerColor('diffEditor.diagonalFill', {\n  dark: '#cccccc33',\n  light: '#22222233',\n  hc: null\n}, nls.localize('diffDiagonalFill', \"Color of the diff editor's diagonal fill. The diagonal fill is used in side-by-side diff views.\"));\n/**\n * List and tree colors\n */\n\nexport const listFocusBackground = registerColor('list.focusBackground', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('listFocusBackground', \"List/Tree background color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listFocusForeground = registerColor('list.focusForeground', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('listFocusForeground', \"List/Tree foreground color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listFocusOutline = registerColor('list.focusOutline', {\n  dark: focusBorder,\n  light: focusBorder,\n  hc: activeContrastBorder\n}, nls.localize('listFocusOutline', \"List/Tree outline color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listActiveSelectionBackground = registerColor('list.activeSelectionBackground', {\n  dark: '#094771',\n  light: '#0060C0',\n  hc: null\n}, nls.localize('listActiveSelectionBackground', \"List/Tree background color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listActiveSelectionForeground = registerColor('list.activeSelectionForeground', {\n  dark: Color.white,\n  light: Color.white,\n  hc: null\n}, nls.localize('listActiveSelectionForeground', \"List/Tree foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listActiveSelectionIconForeground = registerColor('list.activeSelectionIconForeground', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('listActiveSelectionIconForeground', \"List/Tree icon foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveSelectionBackground = registerColor('list.inactiveSelectionBackground', {\n  dark: '#37373D',\n  light: '#E4E6F1',\n  hc: null\n}, nls.localize('listInactiveSelectionBackground', \"List/Tree background color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveSelectionForeground = registerColor('list.inactiveSelectionForeground', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('listInactiveSelectionForeground', \"List/Tree foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveSelectionIconForeground = registerColor('list.inactiveSelectionIconForeground', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('listInactiveSelectionIconForeground', \"List/Tree icon foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveFocusBackground = registerColor('list.inactiveFocusBackground', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('listInactiveFocusBackground', \"List/Tree background color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveFocusOutline = registerColor('list.inactiveFocusOutline', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('listInactiveFocusOutline', \"List/Tree outline color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listHoverBackground = registerColor('list.hoverBackground', {\n  dark: '#2A2D2E',\n  light: '#F0F0F0',\n  hc: null\n}, nls.localize('listHoverBackground', \"List/Tree background when hovering over items using the mouse.\"));\nexport const listHoverForeground = registerColor('list.hoverForeground', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('listHoverForeground', \"List/Tree foreground when hovering over items using the mouse.\"));\nexport const listDropBackground = registerColor('list.dropBackground', {\n  dark: '#062F4A',\n  light: '#D6EBFF',\n  hc: null\n}, nls.localize('listDropBackground', \"List/Tree drag and drop background when moving items around using the mouse.\"));\nexport const listHighlightForeground = registerColor('list.highlightForeground', {\n  dark: '#18A3FF',\n  light: '#0066BF',\n  hc: focusBorder\n}, nls.localize('highlight', 'List/Tree foreground color of the match highlights when searching inside the list/tree.'));\nexport const listFocusHighlightForeground = registerColor('list.focusHighlightForeground', {\n  dark: listHighlightForeground,\n  light: ifDefinedThenElse(listActiveSelectionBackground, listHighlightForeground, '#9DDDFF'),\n  hc: listHighlightForeground\n}, nls.localize('listFocusHighlightForeground', 'List/Tree foreground color of the match highlights on actively focused items when searching inside the list/tree.'));\nexport const listInvalidItemForeground = registerColor('list.invalidItemForeground', {\n  dark: '#B89500',\n  light: '#B89500',\n  hc: '#B89500'\n}, nls.localize('invalidItemForeground', 'List/Tree foreground color for invalid items, for example an unresolved root in explorer.'));\nexport const listErrorForeground = registerColor('list.errorForeground', {\n  dark: '#F88070',\n  light: '#B01011',\n  hc: null\n}, nls.localize('listErrorForeground', 'Foreground color of list items containing errors.'));\nexport const listWarningForeground = registerColor('list.warningForeground', {\n  dark: '#CCA700',\n  light: '#855F00',\n  hc: null\n}, nls.localize('listWarningForeground', 'Foreground color of list items containing warnings.'));\nexport const listFilterWidgetBackground = registerColor('listFilterWidget.background', {\n  light: '#efc1ad',\n  dark: '#653723',\n  hc: Color.black\n}, nls.localize('listFilterWidgetBackground', 'Background color of the type filter widget in lists and trees.'));\nexport const listFilterWidgetOutline = registerColor('listFilterWidget.outline', {\n  dark: Color.transparent,\n  light: Color.transparent,\n  hc: '#f38518'\n}, nls.localize('listFilterWidgetOutline', 'Outline color of the type filter widget in lists and trees.'));\nexport const listFilterWidgetNoMatchesOutline = registerColor('listFilterWidget.noMatchesOutline', {\n  dark: '#BE1100',\n  light: '#BE1100',\n  hc: contrastBorder\n}, nls.localize('listFilterWidgetNoMatchesOutline', 'Outline color of the type filter widget in lists and trees, when there are no matches.'));\nexport const listFilterMatchHighlight = registerColor('list.filterMatchBackground', {\n  dark: editorFindMatchHighlight,\n  light: editorFindMatchHighlight,\n  hc: null\n}, nls.localize('listFilterMatchHighlight', 'Background color of the filtered match.'));\nexport const listFilterMatchHighlightBorder = registerColor('list.filterMatchBorder', {\n  dark: editorFindMatchHighlightBorder,\n  light: editorFindMatchHighlightBorder,\n  hc: contrastBorder\n}, nls.localize('listFilterMatchHighlightBorder', 'Border color of the filtered match.'));\nexport const treeIndentGuidesStroke = registerColor('tree.indentGuidesStroke', {\n  dark: '#585858',\n  light: '#a9a9a9',\n  hc: '#a9a9a9'\n}, nls.localize('treeIndentGuidesStroke', \"Tree stroke color for the indentation guides.\"));\nexport const tableColumnsBorder = registerColor('tree.tableColumnsBorder', {\n  dark: '#CCCCCC20',\n  light: '#61616120',\n  hc: null\n}, nls.localize('tableColumnsBorder', \"Table border color between columns.\"));\nexport const tableOddRowsBackgroundColor = registerColor('tree.tableOddRowsBackground', {\n  dark: transparent(foreground, 0.04),\n  light: transparent(foreground, 0.04),\n  hc: null\n}, nls.localize('tableOddRowsBackgroundColor', \"Background color for odd table rows.\"));\nexport const listDeemphasizedForeground = registerColor('list.deemphasizedForeground', {\n  dark: '#8C8C8C',\n  light: '#8E8E90',\n  hc: '#A7A8A9'\n}, nls.localize('listDeemphasizedForeground', \"List/Tree foreground color for items that are deemphasized. \"));\n/**\n * Quick pick widget (dependent on List and tree colors)\n */\n\nexport const _deprecatedQuickInputListFocusBackground = registerColor('quickInput.list.focusBackground', {\n  dark: null,\n  light: null,\n  hc: null\n}, '', undefined, nls.localize('quickInput.list.focusBackground deprecation', \"Please use quickInputList.focusBackground instead\"));\nexport const quickInputListFocusForeground = registerColor('quickInputList.focusForeground', {\n  dark: listActiveSelectionForeground,\n  light: listActiveSelectionForeground,\n  hc: listActiveSelectionForeground\n}, nls.localize('quickInput.listFocusForeground', \"Quick picker foreground color for the focused item.\"));\nexport const quickInputListFocusIconForeground = registerColor('quickInputList.focusIconForeground', {\n  dark: listActiveSelectionIconForeground,\n  light: listActiveSelectionIconForeground,\n  hc: listActiveSelectionIconForeground\n}, nls.localize('quickInput.listFocusIconForeground', \"Quick picker icon foreground color for the focused item.\"));\nexport const quickInputListFocusBackground = registerColor('quickInputList.focusBackground', {\n  dark: oneOf(_deprecatedQuickInputListFocusBackground, listActiveSelectionBackground),\n  light: oneOf(_deprecatedQuickInputListFocusBackground, listActiveSelectionBackground),\n  hc: null\n}, nls.localize('quickInput.listFocusBackground', \"Quick picker background color for the focused item.\"));\n/**\n * Menu colors\n */\n\nexport const menuBorder = registerColor('menu.border', {\n  dark: null,\n  light: null,\n  hc: contrastBorder\n}, nls.localize('menuBorder', \"Border color of menus.\"));\nexport const menuForeground = registerColor('menu.foreground', {\n  dark: selectForeground,\n  light: foreground,\n  hc: selectForeground\n}, nls.localize('menuForeground', \"Foreground color of menu items.\"));\nexport const menuBackground = registerColor('menu.background', {\n  dark: selectBackground,\n  light: selectBackground,\n  hc: selectBackground\n}, nls.localize('menuBackground', \"Background color of menu items.\"));\nexport const menuSelectionForeground = registerColor('menu.selectionForeground', {\n  dark: listActiveSelectionForeground,\n  light: listActiveSelectionForeground,\n  hc: listActiveSelectionForeground\n}, nls.localize('menuSelectionForeground', \"Foreground color of the selected menu item in menus.\"));\nexport const menuSelectionBackground = registerColor('menu.selectionBackground', {\n  dark: listActiveSelectionBackground,\n  light: listActiveSelectionBackground,\n  hc: listActiveSelectionBackground\n}, nls.localize('menuSelectionBackground', \"Background color of the selected menu item in menus.\"));\nexport const menuSelectionBorder = registerColor('menu.selectionBorder', {\n  dark: null,\n  light: null,\n  hc: activeContrastBorder\n}, nls.localize('menuSelectionBorder', \"Border color of the selected menu item in menus.\"));\nexport const menuSeparatorBackground = registerColor('menu.separatorBackground', {\n  dark: '#BBBBBB',\n  light: '#888888',\n  hc: contrastBorder\n}, nls.localize('menuSeparatorBackground', \"Color of a separator menu item in menus.\"));\n/**\n * Toolbar colors\n */\n\nexport const toolbarHoverBackground = registerColor('toolbar.hoverBackground', {\n  dark: '#5a5d5e50',\n  light: '#b8b8b850',\n  hc: null\n}, nls.localize('toolbarHoverBackground', \"Toolbar background when hovering over actions using the mouse\"));\nexport const toolbarHoverOutline = registerColor('toolbar.hoverOutline', {\n  dark: null,\n  light: null,\n  hc: activeContrastBorder\n}, nls.localize('toolbarHoverOutline', \"Toolbar outline when hovering over actions using the mouse\"));\nexport const toolbarActiveBackground = registerColor('toolbar.activeBackground', {\n  dark: lighten(toolbarHoverBackground, 0.1),\n  light: darken(toolbarHoverBackground, 0.1),\n  hc: null\n}, nls.localize('toolbarActiveBackground', \"Toolbar background when holding the mouse over actions\"));\n/**\n * Snippet placeholder colors\n */\n\nexport const snippetTabstopHighlightBackground = registerColor('editor.snippetTabstopHighlightBackground', {\n  dark: new Color(new RGBA(124, 124, 124, 0.3)),\n  light: new Color(new RGBA(10, 50, 100, 0.2)),\n  hc: new Color(new RGBA(124, 124, 124, 0.3))\n}, nls.localize('snippetTabstopHighlightBackground', \"Highlight background color of a snippet tabstop.\"));\nexport const snippetTabstopHighlightBorder = registerColor('editor.snippetTabstopHighlightBorder', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('snippetTabstopHighlightBorder', \"Highlight border color of a snippet tabstop.\"));\nexport const snippetFinalTabstopHighlightBackground = registerColor('editor.snippetFinalTabstopHighlightBackground', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('snippetFinalTabstopHighlightBackground', \"Highlight background color of the final tabstop of a snippet.\"));\nexport const snippetFinalTabstopHighlightBorder = registerColor('editor.snippetFinalTabstopHighlightBorder', {\n  dark: '#525252',\n  light: new Color(new RGBA(10, 50, 100, 0.5)),\n  hc: '#525252'\n}, nls.localize('snippetFinalTabstopHighlightBorder', \"Highlight border color of the final tabstop of a snippet.\"));\n/**\n * Breadcrumb colors\n */\n\nexport const breadcrumbsForeground = registerColor('breadcrumb.foreground', {\n  light: transparent(foreground, 0.8),\n  dark: transparent(foreground, 0.8),\n  hc: transparent(foreground, 0.8)\n}, nls.localize('breadcrumbsFocusForeground', \"Color of focused breadcrumb items.\"));\nexport const breadcrumbsBackground = registerColor('breadcrumb.background', {\n  light: editorBackground,\n  dark: editorBackground,\n  hc: editorBackground\n}, nls.localize('breadcrumbsBackground', \"Background color of breadcrumb items.\"));\nexport const breadcrumbsFocusForeground = registerColor('breadcrumb.focusForeground', {\n  light: darken(foreground, 0.2),\n  dark: lighten(foreground, 0.1),\n  hc: lighten(foreground, 0.1)\n}, nls.localize('breadcrumbsFocusForeground', \"Color of focused breadcrumb items.\"));\nexport const breadcrumbsActiveSelectionForeground = registerColor('breadcrumb.activeSelectionForeground', {\n  light: darken(foreground, 0.2),\n  dark: lighten(foreground, 0.1),\n  hc: lighten(foreground, 0.1)\n}, nls.localize('breadcrumbsSelectedForegound', \"Color of selected breadcrumb items.\"));\nexport const breadcrumbsPickerBackground = registerColor('breadcrumbPicker.background', {\n  light: editorWidgetBackground,\n  dark: editorWidgetBackground,\n  hc: editorWidgetBackground\n}, nls.localize('breadcrumbsSelectedBackground', \"Background color of breadcrumb item picker.\"));\n/**\n * Merge-conflict colors\n */\n\nconst headerTransparency = 0.5;\nconst currentBaseColor = Color.fromHex('#40C8AE').transparent(headerTransparency);\nconst incomingBaseColor = Color.fromHex('#40A6FF').transparent(headerTransparency);\nconst commonBaseColor = Color.fromHex('#606060').transparent(0.4);\nconst contentTransparency = 0.4;\nconst rulerTransparency = 1;\nexport const mergeCurrentHeaderBackground = registerColor('merge.currentHeaderBackground', {\n  dark: currentBaseColor,\n  light: currentBaseColor,\n  hc: null\n}, nls.localize('mergeCurrentHeaderBackground', 'Current header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeCurrentContentBackground = registerColor('merge.currentContentBackground', {\n  dark: transparent(mergeCurrentHeaderBackground, contentTransparency),\n  light: transparent(mergeCurrentHeaderBackground, contentTransparency),\n  hc: transparent(mergeCurrentHeaderBackground, contentTransparency)\n}, nls.localize('mergeCurrentContentBackground', 'Current content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeIncomingHeaderBackground = registerColor('merge.incomingHeaderBackground', {\n  dark: incomingBaseColor,\n  light: incomingBaseColor,\n  hc: null\n}, nls.localize('mergeIncomingHeaderBackground', 'Incoming header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeIncomingContentBackground = registerColor('merge.incomingContentBackground', {\n  dark: transparent(mergeIncomingHeaderBackground, contentTransparency),\n  light: transparent(mergeIncomingHeaderBackground, contentTransparency),\n  hc: transparent(mergeIncomingHeaderBackground, contentTransparency)\n}, nls.localize('mergeIncomingContentBackground', 'Incoming content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeCommonHeaderBackground = registerColor('merge.commonHeaderBackground', {\n  dark: commonBaseColor,\n  light: commonBaseColor,\n  hc: null\n}, nls.localize('mergeCommonHeaderBackground', 'Common ancestor header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeCommonContentBackground = registerColor('merge.commonContentBackground', {\n  dark: transparent(mergeCommonHeaderBackground, contentTransparency),\n  light: transparent(mergeCommonHeaderBackground, contentTransparency),\n  hc: transparent(mergeCommonHeaderBackground, contentTransparency)\n}, nls.localize('mergeCommonContentBackground', 'Common ancestor content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeBorder = registerColor('merge.border', {\n  dark: null,\n  light: null,\n  hc: '#C3DF6F'\n}, nls.localize('mergeBorder', 'Border color on headers and the splitter in inline merge-conflicts.'));\nexport const overviewRulerCurrentContentForeground = registerColor('editorOverviewRuler.currentContentForeground', {\n  dark: transparent(mergeCurrentHeaderBackground, rulerTransparency),\n  light: transparent(mergeCurrentHeaderBackground, rulerTransparency),\n  hc: mergeBorder\n}, nls.localize('overviewRulerCurrentContentForeground', 'Current overview ruler foreground for inline merge-conflicts.'));\nexport const overviewRulerIncomingContentForeground = registerColor('editorOverviewRuler.incomingContentForeground', {\n  dark: transparent(mergeIncomingHeaderBackground, rulerTransparency),\n  light: transparent(mergeIncomingHeaderBackground, rulerTransparency),\n  hc: mergeBorder\n}, nls.localize('overviewRulerIncomingContentForeground', 'Incoming overview ruler foreground for inline merge-conflicts.'));\nexport const overviewRulerCommonContentForeground = registerColor('editorOverviewRuler.commonContentForeground', {\n  dark: transparent(mergeCommonHeaderBackground, rulerTransparency),\n  light: transparent(mergeCommonHeaderBackground, rulerTransparency),\n  hc: mergeBorder\n}, nls.localize('overviewRulerCommonContentForeground', 'Common ancestor overview ruler foreground for inline merge-conflicts.'));\nexport const overviewRulerFindMatchForeground = registerColor('editorOverviewRuler.findMatchForeground', {\n  dark: '#d186167e',\n  light: '#d186167e',\n  hc: '#AB5A00'\n}, nls.localize('overviewRulerFindMatchForeground', 'Overview ruler marker color for find matches. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const overviewRulerSelectionHighlightForeground = registerColor('editorOverviewRuler.selectionHighlightForeground', {\n  dark: '#A0A0A0CC',\n  light: '#A0A0A0CC',\n  hc: '#A0A0A0CC'\n}, nls.localize('overviewRulerSelectionHighlightForeground', 'Overview ruler marker color for selection highlights. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const minimapFindMatch = registerColor('minimap.findMatchHighlight', {\n  light: '#d18616',\n  dark: '#d18616',\n  hc: '#AB5A00'\n}, nls.localize('minimapFindMatchHighlight', 'Minimap marker color for find matches.'), true);\nexport const minimapSelectionOccurrenceHighlight = registerColor('minimap.selectionOccurrenceHighlight', {\n  light: '#c9c9c9',\n  dark: '#676767',\n  hc: '#ffffff'\n}, nls.localize('minimapSelectionOccurrenceHighlight', 'Minimap marker color for repeating editor selections.'), true);\nexport const minimapSelection = registerColor('minimap.selectionHighlight', {\n  light: '#ADD6FF',\n  dark: '#264F78',\n  hc: '#ffffff'\n}, nls.localize('minimapSelectionHighlight', 'Minimap marker color for the editor selection.'), true);\nexport const minimapError = registerColor('minimap.errorHighlight', {\n  dark: new Color(new RGBA(255, 18, 18, 0.7)),\n  light: new Color(new RGBA(255, 18, 18, 0.7)),\n  hc: new Color(new RGBA(255, 50, 50, 1))\n}, nls.localize('minimapError', 'Minimap marker color for errors.'));\nexport const minimapWarning = registerColor('minimap.warningHighlight', {\n  dark: editorWarningForeground,\n  light: editorWarningForeground,\n  hc: editorWarningBorder\n}, nls.localize('overviewRuleWarning', 'Minimap marker color for warnings.'));\nexport const minimapBackground = registerColor('minimap.background', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('minimapBackground', \"Minimap background color.\"));\nexport const minimapForegroundOpacity = registerColor('minimap.foregroundOpacity', {\n  dark: Color.fromHex('#000f'),\n  light: Color.fromHex('#000f'),\n  hc: Color.fromHex('#000f')\n}, nls.localize('minimapForegroundOpacity', 'Opacity of foreground elements rendered in the minimap. For example, \"#000000c0\" will render the elements with 75% opacity.'));\nexport const minimapSliderBackground = registerColor('minimapSlider.background', {\n  light: transparent(scrollbarSliderBackground, 0.5),\n  dark: transparent(scrollbarSliderBackground, 0.5),\n  hc: transparent(scrollbarSliderBackground, 0.5)\n}, nls.localize('minimapSliderBackground', \"Minimap slider background color.\"));\nexport const minimapSliderHoverBackground = registerColor('minimapSlider.hoverBackground', {\n  light: transparent(scrollbarSliderHoverBackground, 0.5),\n  dark: transparent(scrollbarSliderHoverBackground, 0.5),\n  hc: transparent(scrollbarSliderHoverBackground, 0.5)\n}, nls.localize('minimapSliderHoverBackground', \"Minimap slider background color when hovering.\"));\nexport const minimapSliderActiveBackground = registerColor('minimapSlider.activeBackground', {\n  light: transparent(scrollbarSliderActiveBackground, 0.5),\n  dark: transparent(scrollbarSliderActiveBackground, 0.5),\n  hc: transparent(scrollbarSliderActiveBackground, 0.5)\n}, nls.localize('minimapSliderActiveBackground', \"Minimap slider background color when clicked on.\"));\nexport const problemsErrorIconForeground = registerColor('problemsErrorIcon.foreground', {\n  dark: editorErrorForeground,\n  light: editorErrorForeground,\n  hc: editorErrorForeground\n}, nls.localize('problemsErrorIconForeground', \"The color used for the problems error icon.\"));\nexport const problemsWarningIconForeground = registerColor('problemsWarningIcon.foreground', {\n  dark: editorWarningForeground,\n  light: editorWarningForeground,\n  hc: editorWarningForeground\n}, nls.localize('problemsWarningIconForeground', \"The color used for the problems warning icon.\"));\nexport const problemsInfoIconForeground = registerColor('problemsInfoIcon.foreground', {\n  dark: editorInfoForeground,\n  light: editorInfoForeground,\n  hc: editorInfoForeground\n}, nls.localize('problemsInfoIconForeground', \"The color used for the problems info icon.\"));\n/**\n * Chart colors\n */\n\nexport const chartsForeground = registerColor('charts.foreground', {\n  dark: foreground,\n  light: foreground,\n  hc: foreground\n}, nls.localize('chartsForeground', \"The foreground color used in charts.\"));\nexport const chartsLines = registerColor('charts.lines', {\n  dark: transparent(foreground, .5),\n  light: transparent(foreground, .5),\n  hc: transparent(foreground, .5)\n}, nls.localize('chartsLines', \"The color used for horizontal lines in charts.\"));\nexport const chartsRed = registerColor('charts.red', {\n  dark: editorErrorForeground,\n  light: editorErrorForeground,\n  hc: editorErrorForeground\n}, nls.localize('chartsRed', \"The red color used in chart visualizations.\"));\nexport const chartsBlue = registerColor('charts.blue', {\n  dark: editorInfoForeground,\n  light: editorInfoForeground,\n  hc: editorInfoForeground\n}, nls.localize('chartsBlue', \"The blue color used in chart visualizations.\"));\nexport const chartsYellow = registerColor('charts.yellow', {\n  dark: editorWarningForeground,\n  light: editorWarningForeground,\n  hc: editorWarningForeground\n}, nls.localize('chartsYellow', \"The yellow color used in chart visualizations.\"));\nexport const chartsOrange = registerColor('charts.orange', {\n  dark: minimapFindMatch,\n  light: minimapFindMatch,\n  hc: minimapFindMatch\n}, nls.localize('chartsOrange', \"The orange color used in chart visualizations.\"));\nexport const chartsGreen = registerColor('charts.green', {\n  dark: '#89D185',\n  light: '#388A34',\n  hc: '#89D185'\n}, nls.localize('chartsGreen', \"The green color used in chart visualizations.\"));\nexport const chartsPurple = registerColor('charts.purple', {\n  dark: '#B180D7',\n  light: '#652D90',\n  hc: '#B180D7'\n}, nls.localize('chartsPurple', \"The purple color used in chart visualizations.\")); // ----- color functions\n\nexport function executeTransform(transform, theme) {\n  var _a, _b, _c;\n\n  switch (transform.op) {\n    case 0\n    /* Darken */\n    :\n      return (_a = resolveColorValue(transform.value, theme)) === null || _a === void 0 ? void 0 : _a.darken(transform.factor);\n\n    case 1\n    /* Lighten */\n    :\n      return (_b = resolveColorValue(transform.value, theme)) === null || _b === void 0 ? void 0 : _b.lighten(transform.factor);\n\n    case 2\n    /* Transparent */\n    :\n      return (_c = resolveColorValue(transform.value, theme)) === null || _c === void 0 ? void 0 : _c.transparent(transform.factor);\n\n    case 3\n    /* OneOf */\n    :\n      for (const candidate of transform.values) {\n        const color = resolveColorValue(candidate, theme);\n\n        if (color) {\n          return color;\n        }\n      }\n\n      return undefined;\n\n    case 5\n    /* IfDefinedThenElse */\n    :\n      return resolveColorValue(theme.defines(transform.if) ? transform.then : transform.else, theme);\n\n    case 4\n    /* LessProminent */\n    :\n      {\n        const from = resolveColorValue(transform.value, theme);\n\n        if (!from) {\n          return undefined;\n        }\n\n        const backgroundColor = resolveColorValue(transform.background, theme);\n\n        if (!backgroundColor) {\n          return from.transparent(transform.factor * transform.transparency);\n        }\n\n        return from.isDarkerThan(backgroundColor) ? Color.getLighterColor(from, backgroundColor, transform.factor).transparent(transform.transparency) : Color.getDarkerColor(from, backgroundColor, transform.factor).transparent(transform.transparency);\n      }\n\n    default:\n      throw assertNever(transform);\n  }\n}\nexport function darken(colorValue, factor) {\n  return {\n    op: 0\n    /* Darken */\n    ,\n    value: colorValue,\n    factor\n  };\n}\nexport function lighten(colorValue, factor) {\n  return {\n    op: 1\n    /* Lighten */\n    ,\n    value: colorValue,\n    factor\n  };\n}\nexport function transparent(colorValue, factor) {\n  return {\n    op: 2\n    /* Transparent */\n    ,\n    value: colorValue,\n    factor\n  };\n}\nexport function oneOf(...colorValues) {\n  return {\n    op: 3\n    /* OneOf */\n    ,\n    values: colorValues\n  };\n}\nexport function ifDefinedThenElse(ifArg, thenArg, elseArg) {\n  return {\n    op: 5\n    /* IfDefinedThenElse */\n    ,\n    if: ifArg,\n    then: thenArg,\n    else: elseArg\n  };\n}\n\nfunction lessProminent(colorValue, backgroundColorValue, factor, transparency) {\n  return {\n    op: 4\n    /* LessProminent */\n    ,\n    value: colorValue,\n    background: backgroundColorValue,\n    factor,\n    transparency\n  };\n} // ----- implementation\n\n/**\n * @param colorValue Resolve a color value in the context of a theme\n */\n\n\nexport function resolveColorValue(colorValue, theme) {\n  if (colorValue === null) {\n    return undefined;\n  } else if (typeof colorValue === 'string') {\n    if (colorValue[0] === '#') {\n      return Color.fromHex(colorValue);\n    }\n\n    return theme.getColor(colorValue);\n  } else if (colorValue instanceof Color) {\n    return colorValue;\n  } else if (typeof colorValue === 'object') {\n    return executeTransform(colorValue, theme);\n  }\n\n  return undefined;\n}\nexport const workbenchColorsSchemaId = 'vscode://schemas/workbench-colors';\nlet schemaRegistry = platform.Registry.as(JSONExtensions.JSONContribution);\nschemaRegistry.registerSchema(workbenchColorsSchemaId, colorRegistry.getColorSchema());\nconst delayer = new RunOnceScheduler(() => schemaRegistry.notifySchemaChanged(workbenchColorsSchemaId), 200);\ncolorRegistry.onDidChangeSchema(() => {\n  if (!delayer.isScheduled()) {\n    delayer.schedule();\n  }\n}); // setTimeout(_ => console.log(colorRegistry.toString()), 5000);","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/platform/theme/common/colorRegistry.js"],"names":["RunOnceScheduler","Color","RGBA","Emitter","assertNever","nls","Extensions","JSONExtensions","platform","asCssVariableName","colorIdent","replace","ColorContribution","ColorRegistry","constructor","_onDidChangeSchema","onDidChangeSchema","event","colorSchema","type","properties","colorReferenceSchema","enum","enumDescriptions","colorsById","registerColor","id","defaults","description","needsTransparency","deprecationMessage","colorContribution","propertySchema","format","defaultSnippets","body","push","fire","getColors","Object","keys","map","resolveDefaultColor","theme","colorDesc","colorValue","resolveColorValue","undefined","getColorSchema","toString","sorter","a","b","cat1","indexOf","cat2","localeCompare","sort","k","join","colorRegistry","Registry","add","foreground","dark","light","hc","localize","errorForeground","descriptionForeground","transparent","iconForeground","focusBorder","contrastBorder","activeContrastBorder","selectionBackground","textSeparatorForeground","black","textLinkForeground","textLinkActiveForeground","textPreformatForeground","textBlockQuoteBackground","textBlockQuoteBorder","white","textCodeBlockBackground","widgetShadow","inputBackground","inputForeground","inputBorder","inputActiveOptionBorder","inputActiveOptionHoverBackground","inputActiveOptionBackground","inputActiveOptionForeground","inputPlaceholderForeground","inputValidationInfoBackground","inputValidationInfoForeground","inputValidationInfoBorder","inputValidationWarningBackground","inputValidationWarningForeground","inputValidationWarningBorder","inputValidationErrorBackground","inputValidationErrorForeground","inputValidationErrorBorder","selectBackground","selectListBackground","selectForeground","selectBorder","simpleCheckboxBackground","simpleCheckboxForeground","simpleCheckboxBorder","buttonForeground","buttonBackground","buttonHoverBackground","lighten","darken","buttonBorder","buttonSecondaryForeground","buttonSecondaryBackground","buttonSecondaryHoverBackground","badgeBackground","badgeForeground","scrollbarShadow","scrollbarSliderBackground","fromHex","scrollbarSliderHoverBackground","scrollbarSliderActiveBackground","progressBarBackground","editorErrorBackground","editorErrorForeground","editorErrorBorder","editorWarningBackground","editorWarningForeground","editorWarningBorder","editorInfoBackground","editorInfoForeground","editorInfoBorder","editorHintForeground","editorHintBorder","sashHoverBorder","editorBackground","editorForeground","editorWidgetBackground","editorWidgetForeground","editorWidgetBorder","editorWidgetResizeBorder","quickInputBackground","quickInputForeground","quickInputTitleBackground","pickerGroupForeground","pickerGroupBorder","keybindingLabelBackground","keybindingLabelForeground","keybindingLabelBorder","keybindingLabelBottomBorder","editorSelectionBackground","editorSelectionForeground","editorInactiveSelection","editorSelectionHighlight","lessProminent","editorSelectionHighlightBorder","editorFindMatch","editorFindMatchHighlight","editorFindRangeHighlight","editorFindMatchBorder","editorFindMatchHighlightBorder","editorFindRangeHighlightBorder","searchEditorFindMatch","searchEditorFindMatchBorder","editorHoverHighlight","editorHoverBackground","editorHoverForeground","editorHoverBorder","editorHoverStatusBarBackground","editorActiveLinkForeground","blue","cyan","editorInlayHintForeground","editorInlayHintBackground","editorInlayHintTypeForeground","editorInlayHintTypeBackground","editorInlayHintParameterForeground","editorInlayHintParameterBackground","editorLightBulbForeground","editorLightBulbAutoFixForeground","defaultInsertColor","defaultRemoveColor","diffInserted","diffRemoved","diffInsertedOutline","diffRemovedOutline","diffBorder","diffDiagonalFill","listFocusBackground","listFocusForeground","listFocusOutline","listActiveSelectionBackground","listActiveSelectionForeground","listActiveSelectionIconForeground","listInactiveSelectionBackground","listInactiveSelectionForeground","listInactiveSelectionIconForeground","listInactiveFocusBackground","listInactiveFocusOutline","listHoverBackground","listHoverForeground","listDropBackground","listHighlightForeground","listFocusHighlightForeground","ifDefinedThenElse","listInvalidItemForeground","listErrorForeground","listWarningForeground","listFilterWidgetBackground","listFilterWidgetOutline","listFilterWidgetNoMatchesOutline","listFilterMatchHighlight","listFilterMatchHighlightBorder","treeIndentGuidesStroke","tableColumnsBorder","tableOddRowsBackgroundColor","listDeemphasizedForeground","_deprecatedQuickInputListFocusBackground","quickInputListFocusForeground","quickInputListFocusIconForeground","quickInputListFocusBackground","oneOf","menuBorder","menuForeground","menuBackground","menuSelectionForeground","menuSelectionBackground","menuSelectionBorder","menuSeparatorBackground","toolbarHoverBackground","toolbarHoverOutline","toolbarActiveBackground","snippetTabstopHighlightBackground","snippetTabstopHighlightBorder","snippetFinalTabstopHighlightBackground","snippetFinalTabstopHighlightBorder","breadcrumbsForeground","breadcrumbsBackground","breadcrumbsFocusForeground","breadcrumbsActiveSelectionForeground","breadcrumbsPickerBackground","headerTransparency","currentBaseColor","incomingBaseColor","commonBaseColor","contentTransparency","rulerTransparency","mergeCurrentHeaderBackground","mergeCurrentContentBackground","mergeIncomingHeaderBackground","mergeIncomingContentBackground","mergeCommonHeaderBackground","mergeCommonContentBackground","mergeBorder","overviewRulerCurrentContentForeground","overviewRulerIncomingContentForeground","overviewRulerCommonContentForeground","overviewRulerFindMatchForeground","overviewRulerSelectionHighlightForeground","minimapFindMatch","minimapSelectionOccurrenceHighlight","minimapSelection","minimapError","minimapWarning","minimapBackground","minimapForegroundOpacity","minimapSliderBackground","minimapSliderHoverBackground","minimapSliderActiveBackground","problemsErrorIconForeground","problemsWarningIconForeground","problemsInfoIconForeground","chartsForeground","chartsLines","chartsRed","chartsBlue","chartsYellow","chartsOrange","chartsGreen","chartsPurple","executeTransform","transform","_a","_b","_c","op","value","factor","candidate","values","color","defines","if","then","else","from","backgroundColor","background","transparency","isDarkerThan","getLighterColor","getDarkerColor","colorValues","ifArg","thenArg","elseArg","backgroundColorValue","getColor","workbenchColorsSchemaId","schemaRegistry","as","JSONContribution","registerSchema","delayer","notifySchemaChanged","isScheduled","schedule"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { Color, RGBA } from '../../../base/common/color.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { assertNever } from '../../../base/common/types.js';\nimport * as nls from '../../../nls.js';\nimport { Extensions as JSONExtensions } from '../../jsonschemas/common/jsonContributionRegistry.js';\nimport * as platform from '../../registry/common/platform.js';\n/**\n * Returns the css variable name for the given color identifier. Dots (`.`) are replaced with hyphens (`-`) and\n * everything is prefixed with `--vscode-`.\n *\n * @sample `editorSuggestWidget.background` is `--vscode-editorSuggestWidget-background`.\n */\nexport function asCssVariableName(colorIdent) {\n    return `--vscode-${colorIdent.replace('.', '-')}`;\n}\n// color registry\nexport const Extensions = {\n    ColorContribution: 'base.contributions.colors'\n};\nclass ColorRegistry {\n    constructor() {\n        this._onDidChangeSchema = new Emitter();\n        this.onDidChangeSchema = this._onDidChangeSchema.event;\n        this.colorSchema = { type: 'object', properties: {} };\n        this.colorReferenceSchema = { type: 'string', enum: [], enumDescriptions: [] };\n        this.colorsById = {};\n    }\n    registerColor(id, defaults, description, needsTransparency = false, deprecationMessage) {\n        let colorContribution = { id, description, defaults, needsTransparency, deprecationMessage };\n        this.colorsById[id] = colorContribution;\n        let propertySchema = { type: 'string', description, format: 'color-hex', defaultSnippets: [{ body: '${1:#ff0000}' }] };\n        if (deprecationMessage) {\n            propertySchema.deprecationMessage = deprecationMessage;\n        }\n        this.colorSchema.properties[id] = propertySchema;\n        this.colorReferenceSchema.enum.push(id);\n        this.colorReferenceSchema.enumDescriptions.push(description);\n        this._onDidChangeSchema.fire();\n        return id;\n    }\n    getColors() {\n        return Object.keys(this.colorsById).map(id => this.colorsById[id]);\n    }\n    resolveDefaultColor(id, theme) {\n        const colorDesc = this.colorsById[id];\n        if (colorDesc && colorDesc.defaults) {\n            const colorValue = colorDesc.defaults[theme.type];\n            return resolveColorValue(colorValue, theme);\n        }\n        return undefined;\n    }\n    getColorSchema() {\n        return this.colorSchema;\n    }\n    toString() {\n        let sorter = (a, b) => {\n            let cat1 = a.indexOf('.') === -1 ? 0 : 1;\n            let cat2 = b.indexOf('.') === -1 ? 0 : 1;\n            if (cat1 !== cat2) {\n                return cat1 - cat2;\n            }\n            return a.localeCompare(b);\n        };\n        return Object.keys(this.colorsById).sort(sorter).map(k => `- \\`${k}\\`: ${this.colorsById[k].description}`).join('\\n');\n    }\n}\nconst colorRegistry = new ColorRegistry();\nplatform.Registry.add(Extensions.ColorContribution, colorRegistry);\nexport function registerColor(id, defaults, description, needsTransparency, deprecationMessage) {\n    return colorRegistry.registerColor(id, defaults, description, needsTransparency, deprecationMessage);\n}\n// ----- base colors\nexport const foreground = registerColor('foreground', { dark: '#CCCCCC', light: '#616161', hc: '#FFFFFF' }, nls.localize('foreground', \"Overall foreground color. This color is only used if not overridden by a component.\"));\nexport const errorForeground = registerColor('errorForeground', { dark: '#F48771', light: '#A1260D', hc: '#F48771' }, nls.localize('errorForeground', \"Overall foreground color for error messages. This color is only used if not overridden by a component.\"));\nexport const descriptionForeground = registerColor('descriptionForeground', { light: '#717171', dark: transparent(foreground, 0.7), hc: transparent(foreground, 0.7) }, nls.localize('descriptionForeground', \"Foreground color for description text providing additional information, for example for a label.\"));\nexport const iconForeground = registerColor('icon.foreground', { dark: '#C5C5C5', light: '#424242', hc: '#FFFFFF' }, nls.localize('iconForeground', \"The default color for icons in the workbench.\"));\nexport const focusBorder = registerColor('focusBorder', { dark: '#007FD4', light: '#0090F1', hc: '#F38518' }, nls.localize('focusBorder', \"Overall border color for focused elements. This color is only used if not overridden by a component.\"));\nexport const contrastBorder = registerColor('contrastBorder', { light: null, dark: null, hc: '#6FC3DF' }, nls.localize('contrastBorder', \"An extra border around elements to separate them from others for greater contrast.\"));\nexport const activeContrastBorder = registerColor('contrastActiveBorder', { light: null, dark: null, hc: focusBorder }, nls.localize('activeContrastBorder', \"An extra border around active elements to separate them from others for greater contrast.\"));\nexport const selectionBackground = registerColor('selection.background', { light: null, dark: null, hc: null }, nls.localize('selectionBackground', \"The background color of text selections in the workbench (e.g. for input fields or text areas). Note that this does not apply to selections within the editor.\"));\n// ------ text colors\nexport const textSeparatorForeground = registerColor('textSeparator.foreground', { light: '#0000002e', dark: '#ffffff2e', hc: Color.black }, nls.localize('textSeparatorForeground', \"Color for text separators.\"));\nexport const textLinkForeground = registerColor('textLink.foreground', { light: '#006AB1', dark: '#3794FF', hc: '#3794FF' }, nls.localize('textLinkForeground', \"Foreground color for links in text.\"));\nexport const textLinkActiveForeground = registerColor('textLink.activeForeground', { light: '#006AB1', dark: '#3794FF', hc: '#3794FF' }, nls.localize('textLinkActiveForeground', \"Foreground color for links in text when clicked on and on mouse hover.\"));\nexport const textPreformatForeground = registerColor('textPreformat.foreground', { light: '#A31515', dark: '#D7BA7D', hc: '#D7BA7D' }, nls.localize('textPreformatForeground', \"Foreground color for preformatted text segments.\"));\nexport const textBlockQuoteBackground = registerColor('textBlockQuote.background', { light: '#7f7f7f1a', dark: '#7f7f7f1a', hc: null }, nls.localize('textBlockQuoteBackground', \"Background color for block quotes in text.\"));\nexport const textBlockQuoteBorder = registerColor('textBlockQuote.border', { light: '#007acc80', dark: '#007acc80', hc: Color.white }, nls.localize('textBlockQuoteBorder', \"Border color for block quotes in text.\"));\nexport const textCodeBlockBackground = registerColor('textCodeBlock.background', { light: '#dcdcdc66', dark: '#0a0a0a66', hc: Color.black }, nls.localize('textCodeBlockBackground', \"Background color for code blocks in text.\"));\n// ----- widgets\nexport const widgetShadow = registerColor('widget.shadow', { dark: transparent(Color.black, .36), light: transparent(Color.black, .16), hc: null }, nls.localize('widgetShadow', 'Shadow color of widgets such as find/replace inside the editor.'));\nexport const inputBackground = registerColor('input.background', { dark: '#3C3C3C', light: Color.white, hc: Color.black }, nls.localize('inputBoxBackground', \"Input box background.\"));\nexport const inputForeground = registerColor('input.foreground', { dark: foreground, light: foreground, hc: foreground }, nls.localize('inputBoxForeground', \"Input box foreground.\"));\nexport const inputBorder = registerColor('input.border', { dark: null, light: null, hc: contrastBorder }, nls.localize('inputBoxBorder', \"Input box border.\"));\nexport const inputActiveOptionBorder = registerColor('inputOption.activeBorder', { dark: '#007ACC00', light: '#007ACC00', hc: contrastBorder }, nls.localize('inputBoxActiveOptionBorder', \"Border color of activated options in input fields.\"));\nexport const inputActiveOptionHoverBackground = registerColor('inputOption.hoverBackground', { dark: '#5a5d5e80', light: '#b8b8b850', hc: null }, nls.localize('inputOption.hoverBackground', \"Background color of activated options in input fields.\"));\nexport const inputActiveOptionBackground = registerColor('inputOption.activeBackground', { dark: transparent(focusBorder, 0.4), light: transparent(focusBorder, 0.2), hc: Color.transparent }, nls.localize('inputOption.activeBackground', \"Background hover color of options in input fields.\"));\nexport const inputActiveOptionForeground = registerColor('inputOption.activeForeground', { dark: Color.white, light: Color.black, hc: null }, nls.localize('inputOption.activeForeground', \"Foreground color of activated options in input fields.\"));\nexport const inputPlaceholderForeground = registerColor('input.placeholderForeground', { light: transparent(foreground, 0.5), dark: transparent(foreground, 0.5), hc: transparent(foreground, 0.7) }, nls.localize('inputPlaceholderForeground', \"Input box foreground color for placeholder text.\"));\nexport const inputValidationInfoBackground = registerColor('inputValidation.infoBackground', { dark: '#063B49', light: '#D6ECF2', hc: Color.black }, nls.localize('inputValidationInfoBackground', \"Input validation background color for information severity.\"));\nexport const inputValidationInfoForeground = registerColor('inputValidation.infoForeground', { dark: null, light: null, hc: null }, nls.localize('inputValidationInfoForeground', \"Input validation foreground color for information severity.\"));\nexport const inputValidationInfoBorder = registerColor('inputValidation.infoBorder', { dark: '#007acc', light: '#007acc', hc: contrastBorder }, nls.localize('inputValidationInfoBorder', \"Input validation border color for information severity.\"));\nexport const inputValidationWarningBackground = registerColor('inputValidation.warningBackground', { dark: '#352A05', light: '#F6F5D2', hc: Color.black }, nls.localize('inputValidationWarningBackground', \"Input validation background color for warning severity.\"));\nexport const inputValidationWarningForeground = registerColor('inputValidation.warningForeground', { dark: null, light: null, hc: null }, nls.localize('inputValidationWarningForeground', \"Input validation foreground color for warning severity.\"));\nexport const inputValidationWarningBorder = registerColor('inputValidation.warningBorder', { dark: '#B89500', light: '#B89500', hc: contrastBorder }, nls.localize('inputValidationWarningBorder', \"Input validation border color for warning severity.\"));\nexport const inputValidationErrorBackground = registerColor('inputValidation.errorBackground', { dark: '#5A1D1D', light: '#F2DEDE', hc: Color.black }, nls.localize('inputValidationErrorBackground', \"Input validation background color for error severity.\"));\nexport const inputValidationErrorForeground = registerColor('inputValidation.errorForeground', { dark: null, light: null, hc: null }, nls.localize('inputValidationErrorForeground', \"Input validation foreground color for error severity.\"));\nexport const inputValidationErrorBorder = registerColor('inputValidation.errorBorder', { dark: '#BE1100', light: '#BE1100', hc: contrastBorder }, nls.localize('inputValidationErrorBorder', \"Input validation border color for error severity.\"));\nexport const selectBackground = registerColor('dropdown.background', { dark: '#3C3C3C', light: Color.white, hc: Color.black }, nls.localize('dropdownBackground', \"Dropdown background.\"));\nexport const selectListBackground = registerColor('dropdown.listBackground', { dark: null, light: null, hc: Color.black }, nls.localize('dropdownListBackground', \"Dropdown list background.\"));\nexport const selectForeground = registerColor('dropdown.foreground', { dark: '#F0F0F0', light: null, hc: Color.white }, nls.localize('dropdownForeground', \"Dropdown foreground.\"));\nexport const selectBorder = registerColor('dropdown.border', { dark: selectBackground, light: '#CECECE', hc: contrastBorder }, nls.localize('dropdownBorder', \"Dropdown border.\"));\nexport const simpleCheckboxBackground = registerColor('checkbox.background', { dark: selectBackground, light: selectBackground, hc: selectBackground }, nls.localize('checkbox.background', \"Background color of checkbox widget.\"));\nexport const simpleCheckboxForeground = registerColor('checkbox.foreground', { dark: selectForeground, light: selectForeground, hc: selectForeground }, nls.localize('checkbox.foreground', \"Foreground color of checkbox widget.\"));\nexport const simpleCheckboxBorder = registerColor('checkbox.border', { dark: selectBorder, light: selectBorder, hc: selectBorder }, nls.localize('checkbox.border', \"Border color of checkbox widget.\"));\nexport const buttonForeground = registerColor('button.foreground', { dark: Color.white, light: Color.white, hc: Color.white }, nls.localize('buttonForeground', \"Button foreground color.\"));\nexport const buttonBackground = registerColor('button.background', { dark: '#0E639C', light: '#007ACC', hc: null }, nls.localize('buttonBackground', \"Button background color.\"));\nexport const buttonHoverBackground = registerColor('button.hoverBackground', { dark: lighten(buttonBackground, 0.2), light: darken(buttonBackground, 0.2), hc: null }, nls.localize('buttonHoverBackground', \"Button background color when hovering.\"));\nexport const buttonBorder = registerColor('button.border', { dark: contrastBorder, light: contrastBorder, hc: contrastBorder }, nls.localize('buttonBorder', \"Button border color.\"));\nexport const buttonSecondaryForeground = registerColor('button.secondaryForeground', { dark: Color.white, light: Color.white, hc: Color.white }, nls.localize('buttonSecondaryForeground', \"Secondary button foreground color.\"));\nexport const buttonSecondaryBackground = registerColor('button.secondaryBackground', { dark: '#3A3D41', light: '#5F6A79', hc: null }, nls.localize('buttonSecondaryBackground', \"Secondary button background color.\"));\nexport const buttonSecondaryHoverBackground = registerColor('button.secondaryHoverBackground', { dark: lighten(buttonSecondaryBackground, 0.2), light: darken(buttonSecondaryBackground, 0.2), hc: null }, nls.localize('buttonSecondaryHoverBackground', \"Secondary button background color when hovering.\"));\nexport const badgeBackground = registerColor('badge.background', { dark: '#4D4D4D', light: '#C4C4C4', hc: Color.black }, nls.localize('badgeBackground', \"Badge background color. Badges are small information labels, e.g. for search results count.\"));\nexport const badgeForeground = registerColor('badge.foreground', { dark: Color.white, light: '#333', hc: Color.white }, nls.localize('badgeForeground', \"Badge foreground color. Badges are small information labels, e.g. for search results count.\"));\nexport const scrollbarShadow = registerColor('scrollbar.shadow', { dark: '#000000', light: '#DDDDDD', hc: null }, nls.localize('scrollbarShadow', \"Scrollbar shadow to indicate that the view is scrolled.\"));\nexport const scrollbarSliderBackground = registerColor('scrollbarSlider.background', { dark: Color.fromHex('#797979').transparent(0.4), light: Color.fromHex('#646464').transparent(0.4), hc: transparent(contrastBorder, 0.6) }, nls.localize('scrollbarSliderBackground', \"Scrollbar slider background color.\"));\nexport const scrollbarSliderHoverBackground = registerColor('scrollbarSlider.hoverBackground', { dark: Color.fromHex('#646464').transparent(0.7), light: Color.fromHex('#646464').transparent(0.7), hc: transparent(contrastBorder, 0.8) }, nls.localize('scrollbarSliderHoverBackground', \"Scrollbar slider background color when hovering.\"));\nexport const scrollbarSliderActiveBackground = registerColor('scrollbarSlider.activeBackground', { dark: Color.fromHex('#BFBFBF').transparent(0.4), light: Color.fromHex('#000000').transparent(0.6), hc: contrastBorder }, nls.localize('scrollbarSliderActiveBackground', \"Scrollbar slider background color when clicked on.\"));\nexport const progressBarBackground = registerColor('progressBar.background', { dark: Color.fromHex('#0E70C0'), light: Color.fromHex('#0E70C0'), hc: contrastBorder }, nls.localize('progressBarBackground', \"Background color of the progress bar that can show for long running operations.\"));\nexport const editorErrorBackground = registerColor('editorError.background', { dark: null, light: null, hc: null }, nls.localize('editorError.background', 'Background color of error text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorErrorForeground = registerColor('editorError.foreground', { dark: '#F14C4C', light: '#E51400', hc: null }, nls.localize('editorError.foreground', 'Foreground color of error squigglies in the editor.'));\nexport const editorErrorBorder = registerColor('editorError.border', { dark: null, light: null, hc: Color.fromHex('#E47777').transparent(0.8) }, nls.localize('errorBorder', 'Border color of error boxes in the editor.'));\nexport const editorWarningBackground = registerColor('editorWarning.background', { dark: null, light: null, hc: null }, nls.localize('editorWarning.background', 'Background color of warning text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorWarningForeground = registerColor('editorWarning.foreground', { dark: '#CCA700', light: '#BF8803', hc: null }, nls.localize('editorWarning.foreground', 'Foreground color of warning squigglies in the editor.'));\nexport const editorWarningBorder = registerColor('editorWarning.border', { dark: null, light: null, hc: Color.fromHex('#FFCC00').transparent(0.8) }, nls.localize('warningBorder', 'Border color of warning boxes in the editor.'));\nexport const editorInfoBackground = registerColor('editorInfo.background', { dark: null, light: null, hc: null }, nls.localize('editorInfo.background', 'Background color of info text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorInfoForeground = registerColor('editorInfo.foreground', { dark: '#3794FF', light: '#1a85ff', hc: '#3794FF' }, nls.localize('editorInfo.foreground', 'Foreground color of info squigglies in the editor.'));\nexport const editorInfoBorder = registerColor('editorInfo.border', { dark: null, light: null, hc: Color.fromHex('#3794FF').transparent(0.8) }, nls.localize('infoBorder', 'Border color of info boxes in the editor.'));\nexport const editorHintForeground = registerColor('editorHint.foreground', { dark: Color.fromHex('#eeeeee').transparent(0.7), light: '#6c6c6c', hc: null }, nls.localize('editorHint.foreground', 'Foreground color of hint squigglies in the editor.'));\nexport const editorHintBorder = registerColor('editorHint.border', { dark: null, light: null, hc: Color.fromHex('#eeeeee').transparent(0.8) }, nls.localize('hintBorder', 'Border color of hint boxes in the editor.'));\nexport const sashHoverBorder = registerColor('sash.hoverBorder', { dark: focusBorder, light: focusBorder, hc: focusBorder }, nls.localize('sashActiveBorder', \"Border color of active sashes.\"));\n/**\n * Editor background color.\n * Because of bug https://monacotools.visualstudio.com/DefaultCollection/Monaco/_workitems/edit/13254\n * we are *not* using the color white (or #ffffff, rgba(255,255,255)) but something very close to white.\n */\nexport const editorBackground = registerColor('editor.background', { light: '#fffffe', dark: '#1E1E1E', hc: Color.black }, nls.localize('editorBackground', \"Editor background color.\"));\n/**\n * Editor foreground color.\n */\nexport const editorForeground = registerColor('editor.foreground', { light: '#333333', dark: '#BBBBBB', hc: Color.white }, nls.localize('editorForeground', \"Editor default foreground color.\"));\n/**\n * Editor widgets\n */\nexport const editorWidgetBackground = registerColor('editorWidget.background', { dark: '#252526', light: '#F3F3F3', hc: '#0C141F' }, nls.localize('editorWidgetBackground', 'Background color of editor widgets, such as find/replace.'));\nexport const editorWidgetForeground = registerColor('editorWidget.foreground', { dark: foreground, light: foreground, hc: foreground }, nls.localize('editorWidgetForeground', 'Foreground color of editor widgets, such as find/replace.'));\nexport const editorWidgetBorder = registerColor('editorWidget.border', { dark: '#454545', light: '#C8C8C8', hc: contrastBorder }, nls.localize('editorWidgetBorder', 'Border color of editor widgets. The color is only used if the widget chooses to have a border and if the color is not overridden by a widget.'));\nexport const editorWidgetResizeBorder = registerColor('editorWidget.resizeBorder', { light: null, dark: null, hc: null }, nls.localize('editorWidgetResizeBorder', \"Border color of the resize bar of editor widgets. The color is only used if the widget chooses to have a resize border and if the color is not overridden by a widget.\"));\n/**\n * Quick pick widget\n */\nexport const quickInputBackground = registerColor('quickInput.background', { dark: editorWidgetBackground, light: editorWidgetBackground, hc: editorWidgetBackground }, nls.localize('pickerBackground', \"Quick picker background color. The quick picker widget is the container for pickers like the command palette.\"));\nexport const quickInputForeground = registerColor('quickInput.foreground', { dark: editorWidgetForeground, light: editorWidgetForeground, hc: editorWidgetForeground }, nls.localize('pickerForeground', \"Quick picker foreground color. The quick picker widget is the container for pickers like the command palette.\"));\nexport const quickInputTitleBackground = registerColor('quickInputTitle.background', { dark: new Color(new RGBA(255, 255, 255, 0.105)), light: new Color(new RGBA(0, 0, 0, 0.06)), hc: '#000000' }, nls.localize('pickerTitleBackground', \"Quick picker title background color. The quick picker widget is the container for pickers like the command palette.\"));\nexport const pickerGroupForeground = registerColor('pickerGroup.foreground', { dark: '#3794FF', light: '#0066BF', hc: Color.white }, nls.localize('pickerGroupForeground', \"Quick picker color for grouping labels.\"));\nexport const pickerGroupBorder = registerColor('pickerGroup.border', { dark: '#3F3F46', light: '#CCCEDB', hc: Color.white }, nls.localize('pickerGroupBorder', \"Quick picker color for grouping borders.\"));\n/**\n * Keybinding label\n */\nexport const keybindingLabelBackground = registerColor('keybindingLabel.background', { dark: new Color(new RGBA(128, 128, 128, 0.17)), light: new Color(new RGBA(221, 221, 221, 0.4)), hc: Color.transparent }, nls.localize('keybindingLabelBackground', \"Keybinding label background color. The keybinding label is used to represent a keyboard shortcut.\"));\nexport const keybindingLabelForeground = registerColor('keybindingLabel.foreground', { dark: Color.fromHex('#CCCCCC'), light: Color.fromHex('#555555'), hc: Color.white }, nls.localize('keybindingLabelForeground', \"Keybinding label foreground color. The keybinding label is used to represent a keyboard shortcut.\"));\nexport const keybindingLabelBorder = registerColor('keybindingLabel.border', { dark: new Color(new RGBA(51, 51, 51, 0.6)), light: new Color(new RGBA(204, 204, 204, 0.4)), hc: new Color(new RGBA(111, 195, 223)) }, nls.localize('keybindingLabelBorder', \"Keybinding label border color. The keybinding label is used to represent a keyboard shortcut.\"));\nexport const keybindingLabelBottomBorder = registerColor('keybindingLabel.bottomBorder', { dark: new Color(new RGBA(68, 68, 68, 0.6)), light: new Color(new RGBA(187, 187, 187, 0.4)), hc: new Color(new RGBA(111, 195, 223)) }, nls.localize('keybindingLabelBottomBorder', \"Keybinding label border bottom color. The keybinding label is used to represent a keyboard shortcut.\"));\n/**\n * Editor selection colors.\n */\nexport const editorSelectionBackground = registerColor('editor.selectionBackground', { light: '#ADD6FF', dark: '#264F78', hc: '#f3f518' }, nls.localize('editorSelectionBackground', \"Color of the editor selection.\"));\nexport const editorSelectionForeground = registerColor('editor.selectionForeground', { light: null, dark: null, hc: '#000000' }, nls.localize('editorSelectionForeground', \"Color of the selected text for high contrast.\"));\nexport const editorInactiveSelection = registerColor('editor.inactiveSelectionBackground', { light: transparent(editorSelectionBackground, 0.5), dark: transparent(editorSelectionBackground, 0.5), hc: transparent(editorSelectionBackground, 0.5) }, nls.localize('editorInactiveSelection', \"Color of the selection in an inactive editor. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport const editorSelectionHighlight = registerColor('editor.selectionHighlightBackground', { light: lessProminent(editorSelectionBackground, editorBackground, 0.3, 0.6), dark: lessProminent(editorSelectionBackground, editorBackground, 0.3, 0.6), hc: null }, nls.localize('editorSelectionHighlight', 'Color for regions with the same content as the selection. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorSelectionHighlightBorder = registerColor('editor.selectionHighlightBorder', { light: null, dark: null, hc: activeContrastBorder }, nls.localize('editorSelectionHighlightBorder', \"Border color for regions with the same content as the selection.\"));\n/**\n * Editor find match colors.\n */\nexport const editorFindMatch = registerColor('editor.findMatchBackground', { light: '#A8AC94', dark: '#515C6A', hc: null }, nls.localize('editorFindMatch', \"Color of the current search match.\"));\nexport const editorFindMatchHighlight = registerColor('editor.findMatchHighlightBackground', { light: '#EA5C0055', dark: '#EA5C0055', hc: null }, nls.localize('findMatchHighlight', \"Color of the other search matches. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport const editorFindRangeHighlight = registerColor('editor.findRangeHighlightBackground', { dark: '#3a3d4166', light: '#b4b4b44d', hc: null }, nls.localize('findRangeHighlight', \"Color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport const editorFindMatchBorder = registerColor('editor.findMatchBorder', { light: null, dark: null, hc: activeContrastBorder }, nls.localize('editorFindMatchBorder', \"Border color of the current search match.\"));\nexport const editorFindMatchHighlightBorder = registerColor('editor.findMatchHighlightBorder', { light: null, dark: null, hc: activeContrastBorder }, nls.localize('findMatchHighlightBorder', \"Border color of the other search matches.\"));\nexport const editorFindRangeHighlightBorder = registerColor('editor.findRangeHighlightBorder', { dark: null, light: null, hc: transparent(activeContrastBorder, 0.4) }, nls.localize('findRangeHighlightBorder', \"Border color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations.\"), true);\n/**\n * Search Editor query match colors.\n *\n * Distinct from normal editor find match to allow for better differentiation\n */\nexport const searchEditorFindMatch = registerColor('searchEditor.findMatchBackground', { light: transparent(editorFindMatchHighlight, 0.66), dark: transparent(editorFindMatchHighlight, 0.66), hc: editorFindMatchHighlight }, nls.localize('searchEditor.queryMatch', \"Color of the Search Editor query matches.\"));\nexport const searchEditorFindMatchBorder = registerColor('searchEditor.findMatchBorder', { light: transparent(editorFindMatchHighlightBorder, 0.66), dark: transparent(editorFindMatchHighlightBorder, 0.66), hc: editorFindMatchHighlightBorder }, nls.localize('searchEditor.editorFindMatchBorder', \"Border color of the Search Editor query matches.\"));\n/**\n * Editor hover\n */\nexport const editorHoverHighlight = registerColor('editor.hoverHighlightBackground', { light: '#ADD6FF26', dark: '#264f7840', hc: '#ADD6FF26' }, nls.localize('hoverHighlight', 'Highlight below the word for which a hover is shown. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorHoverBackground = registerColor('editorHoverWidget.background', { light: editorWidgetBackground, dark: editorWidgetBackground, hc: editorWidgetBackground }, nls.localize('hoverBackground', 'Background color of the editor hover.'));\nexport const editorHoverForeground = registerColor('editorHoverWidget.foreground', { light: editorWidgetForeground, dark: editorWidgetForeground, hc: editorWidgetForeground }, nls.localize('hoverForeground', 'Foreground color of the editor hover.'));\nexport const editorHoverBorder = registerColor('editorHoverWidget.border', { light: editorWidgetBorder, dark: editorWidgetBorder, hc: editorWidgetBorder }, nls.localize('hoverBorder', 'Border color of the editor hover.'));\nexport const editorHoverStatusBarBackground = registerColor('editorHoverWidget.statusBarBackground', { dark: lighten(editorHoverBackground, 0.2), light: darken(editorHoverBackground, 0.05), hc: editorWidgetBackground }, nls.localize('statusBarBackground', \"Background color of the editor hover status bar.\"));\n/**\n * Editor link colors\n */\nexport const editorActiveLinkForeground = registerColor('editorLink.activeForeground', { dark: '#4E94CE', light: Color.blue, hc: Color.cyan }, nls.localize('activeLinkForeground', 'Color of active links.'));\n/**\n * Inline hints\n */\nexport const editorInlayHintForeground = registerColor('editorInlayHint.foreground', { dark: transparent(badgeForeground, .8), light: transparent(badgeForeground, .8), hc: badgeForeground }, nls.localize('editorInlayHintForeground', 'Foreground color of inline hints'));\nexport const editorInlayHintBackground = registerColor('editorInlayHint.background', { dark: transparent(badgeBackground, .6), light: transparent(badgeBackground, .3), hc: badgeBackground }, nls.localize('editorInlayHintBackground', 'Background color of inline hints'));\nexport const editorInlayHintTypeForeground = registerColor('editorInlayHint.typeForeground', { dark: editorInlayHintForeground, light: editorInlayHintForeground, hc: editorInlayHintForeground }, nls.localize('editorInlayHintForegroundTypes', 'Foreground color of inline hints for types'));\nexport const editorInlayHintTypeBackground = registerColor('editorInlayHint.typeBackground', { dark: editorInlayHintBackground, light: editorInlayHintBackground, hc: editorInlayHintBackground }, nls.localize('editorInlayHintBackgroundTypes', 'Background color of inline hints for types'));\nexport const editorInlayHintParameterForeground = registerColor('editorInlayHint.parameterForeground', { dark: editorInlayHintForeground, light: editorInlayHintForeground, hc: editorInlayHintForeground }, nls.localize('editorInlayHintForegroundParameter', 'Foreground color of inline hints for parameters'));\nexport const editorInlayHintParameterBackground = registerColor('editorInlayHint.parameterBackground', { dark: editorInlayHintBackground, light: editorInlayHintBackground, hc: editorInlayHintBackground }, nls.localize('editorInlayHintBackgroundParameter', 'Background color of inline hints for parameters'));\n/**\n * Editor lighbulb icon colors\n */\nexport const editorLightBulbForeground = registerColor('editorLightBulb.foreground', { dark: '#FFCC00', light: '#DDB100', hc: '#FFCC00' }, nls.localize('editorLightBulbForeground', \"The color used for the lightbulb actions icon.\"));\nexport const editorLightBulbAutoFixForeground = registerColor('editorLightBulbAutoFix.foreground', { dark: '#75BEFF', light: '#007ACC', hc: '#75BEFF' }, nls.localize('editorLightBulbAutoFixForeground', \"The color used for the lightbulb auto fix actions icon.\"));\n/**\n * Diff Editor Colors\n */\nexport const defaultInsertColor = new Color(new RGBA(155, 185, 85, 0.2));\nexport const defaultRemoveColor = new Color(new RGBA(255, 0, 0, 0.2));\nexport const diffInserted = registerColor('diffEditor.insertedTextBackground', { dark: defaultInsertColor, light: defaultInsertColor, hc: null }, nls.localize('diffEditorInserted', 'Background color for text that got inserted. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const diffRemoved = registerColor('diffEditor.removedTextBackground', { dark: defaultRemoveColor, light: defaultRemoveColor, hc: null }, nls.localize('diffEditorRemoved', 'Background color for text that got removed. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const diffInsertedOutline = registerColor('diffEditor.insertedTextBorder', { dark: null, light: null, hc: '#33ff2eff' }, nls.localize('diffEditorInsertedOutline', 'Outline color for the text that got inserted.'));\nexport const diffRemovedOutline = registerColor('diffEditor.removedTextBorder', { dark: null, light: null, hc: '#FF008F' }, nls.localize('diffEditorRemovedOutline', 'Outline color for text that got removed.'));\nexport const diffBorder = registerColor('diffEditor.border', { dark: null, light: null, hc: contrastBorder }, nls.localize('diffEditorBorder', 'Border color between the two text editors.'));\nexport const diffDiagonalFill = registerColor('diffEditor.diagonalFill', { dark: '#cccccc33', light: '#22222233', hc: null }, nls.localize('diffDiagonalFill', \"Color of the diff editor's diagonal fill. The diagonal fill is used in side-by-side diff views.\"));\n/**\n * List and tree colors\n */\nexport const listFocusBackground = registerColor('list.focusBackground', { dark: null, light: null, hc: null }, nls.localize('listFocusBackground', \"List/Tree background color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listFocusForeground = registerColor('list.focusForeground', { dark: null, light: null, hc: null }, nls.localize('listFocusForeground', \"List/Tree foreground color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listFocusOutline = registerColor('list.focusOutline', { dark: focusBorder, light: focusBorder, hc: activeContrastBorder }, nls.localize('listFocusOutline', \"List/Tree outline color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listActiveSelectionBackground = registerColor('list.activeSelectionBackground', { dark: '#094771', light: '#0060C0', hc: null }, nls.localize('listActiveSelectionBackground', \"List/Tree background color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listActiveSelectionForeground = registerColor('list.activeSelectionForeground', { dark: Color.white, light: Color.white, hc: null }, nls.localize('listActiveSelectionForeground', \"List/Tree foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listActiveSelectionIconForeground = registerColor('list.activeSelectionIconForeground', { dark: null, light: null, hc: null }, nls.localize('listActiveSelectionIconForeground', \"List/Tree icon foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveSelectionBackground = registerColor('list.inactiveSelectionBackground', { dark: '#37373D', light: '#E4E6F1', hc: null }, nls.localize('listInactiveSelectionBackground', \"List/Tree background color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveSelectionForeground = registerColor('list.inactiveSelectionForeground', { dark: null, light: null, hc: null }, nls.localize('listInactiveSelectionForeground', \"List/Tree foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveSelectionIconForeground = registerColor('list.inactiveSelectionIconForeground', { dark: null, light: null, hc: null }, nls.localize('listInactiveSelectionIconForeground', \"List/Tree icon foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveFocusBackground = registerColor('list.inactiveFocusBackground', { dark: null, light: null, hc: null }, nls.localize('listInactiveFocusBackground', \"List/Tree background color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveFocusOutline = registerColor('list.inactiveFocusOutline', { dark: null, light: null, hc: null }, nls.localize('listInactiveFocusOutline', \"List/Tree outline color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listHoverBackground = registerColor('list.hoverBackground', { dark: '#2A2D2E', light: '#F0F0F0', hc: null }, nls.localize('listHoverBackground', \"List/Tree background when hovering over items using the mouse.\"));\nexport const listHoverForeground = registerColor('list.hoverForeground', { dark: null, light: null, hc: null }, nls.localize('listHoverForeground', \"List/Tree foreground when hovering over items using the mouse.\"));\nexport const listDropBackground = registerColor('list.dropBackground', { dark: '#062F4A', light: '#D6EBFF', hc: null }, nls.localize('listDropBackground', \"List/Tree drag and drop background when moving items around using the mouse.\"));\nexport const listHighlightForeground = registerColor('list.highlightForeground', { dark: '#18A3FF', light: '#0066BF', hc: focusBorder }, nls.localize('highlight', 'List/Tree foreground color of the match highlights when searching inside the list/tree.'));\nexport const listFocusHighlightForeground = registerColor('list.focusHighlightForeground', { dark: listHighlightForeground, light: ifDefinedThenElse(listActiveSelectionBackground, listHighlightForeground, '#9DDDFF'), hc: listHighlightForeground }, nls.localize('listFocusHighlightForeground', 'List/Tree foreground color of the match highlights on actively focused items when searching inside the list/tree.'));\nexport const listInvalidItemForeground = registerColor('list.invalidItemForeground', { dark: '#B89500', light: '#B89500', hc: '#B89500' }, nls.localize('invalidItemForeground', 'List/Tree foreground color for invalid items, for example an unresolved root in explorer.'));\nexport const listErrorForeground = registerColor('list.errorForeground', { dark: '#F88070', light: '#B01011', hc: null }, nls.localize('listErrorForeground', 'Foreground color of list items containing errors.'));\nexport const listWarningForeground = registerColor('list.warningForeground', { dark: '#CCA700', light: '#855F00', hc: null }, nls.localize('listWarningForeground', 'Foreground color of list items containing warnings.'));\nexport const listFilterWidgetBackground = registerColor('listFilterWidget.background', { light: '#efc1ad', dark: '#653723', hc: Color.black }, nls.localize('listFilterWidgetBackground', 'Background color of the type filter widget in lists and trees.'));\nexport const listFilterWidgetOutline = registerColor('listFilterWidget.outline', { dark: Color.transparent, light: Color.transparent, hc: '#f38518' }, nls.localize('listFilterWidgetOutline', 'Outline color of the type filter widget in lists and trees.'));\nexport const listFilterWidgetNoMatchesOutline = registerColor('listFilterWidget.noMatchesOutline', { dark: '#BE1100', light: '#BE1100', hc: contrastBorder }, nls.localize('listFilterWidgetNoMatchesOutline', 'Outline color of the type filter widget in lists and trees, when there are no matches.'));\nexport const listFilterMatchHighlight = registerColor('list.filterMatchBackground', { dark: editorFindMatchHighlight, light: editorFindMatchHighlight, hc: null }, nls.localize('listFilterMatchHighlight', 'Background color of the filtered match.'));\nexport const listFilterMatchHighlightBorder = registerColor('list.filterMatchBorder', { dark: editorFindMatchHighlightBorder, light: editorFindMatchHighlightBorder, hc: contrastBorder }, nls.localize('listFilterMatchHighlightBorder', 'Border color of the filtered match.'));\nexport const treeIndentGuidesStroke = registerColor('tree.indentGuidesStroke', { dark: '#585858', light: '#a9a9a9', hc: '#a9a9a9' }, nls.localize('treeIndentGuidesStroke', \"Tree stroke color for the indentation guides.\"));\nexport const tableColumnsBorder = registerColor('tree.tableColumnsBorder', { dark: '#CCCCCC20', light: '#61616120', hc: null }, nls.localize('tableColumnsBorder', \"Table border color between columns.\"));\nexport const tableOddRowsBackgroundColor = registerColor('tree.tableOddRowsBackground', { dark: transparent(foreground, 0.04), light: transparent(foreground, 0.04), hc: null }, nls.localize('tableOddRowsBackgroundColor', \"Background color for odd table rows.\"));\nexport const listDeemphasizedForeground = registerColor('list.deemphasizedForeground', { dark: '#8C8C8C', light: '#8E8E90', hc: '#A7A8A9' }, nls.localize('listDeemphasizedForeground', \"List/Tree foreground color for items that are deemphasized. \"));\n/**\n * Quick pick widget (dependent on List and tree colors)\n */\nexport const _deprecatedQuickInputListFocusBackground = registerColor('quickInput.list.focusBackground', { dark: null, light: null, hc: null }, '', undefined, nls.localize('quickInput.list.focusBackground deprecation', \"Please use quickInputList.focusBackground instead\"));\nexport const quickInputListFocusForeground = registerColor('quickInputList.focusForeground', { dark: listActiveSelectionForeground, light: listActiveSelectionForeground, hc: listActiveSelectionForeground }, nls.localize('quickInput.listFocusForeground', \"Quick picker foreground color for the focused item.\"));\nexport const quickInputListFocusIconForeground = registerColor('quickInputList.focusIconForeground', { dark: listActiveSelectionIconForeground, light: listActiveSelectionIconForeground, hc: listActiveSelectionIconForeground }, nls.localize('quickInput.listFocusIconForeground', \"Quick picker icon foreground color for the focused item.\"));\nexport const quickInputListFocusBackground = registerColor('quickInputList.focusBackground', { dark: oneOf(_deprecatedQuickInputListFocusBackground, listActiveSelectionBackground), light: oneOf(_deprecatedQuickInputListFocusBackground, listActiveSelectionBackground), hc: null }, nls.localize('quickInput.listFocusBackground', \"Quick picker background color for the focused item.\"));\n/**\n * Menu colors\n */\nexport const menuBorder = registerColor('menu.border', { dark: null, light: null, hc: contrastBorder }, nls.localize('menuBorder', \"Border color of menus.\"));\nexport const menuForeground = registerColor('menu.foreground', { dark: selectForeground, light: foreground, hc: selectForeground }, nls.localize('menuForeground', \"Foreground color of menu items.\"));\nexport const menuBackground = registerColor('menu.background', { dark: selectBackground, light: selectBackground, hc: selectBackground }, nls.localize('menuBackground', \"Background color of menu items.\"));\nexport const menuSelectionForeground = registerColor('menu.selectionForeground', { dark: listActiveSelectionForeground, light: listActiveSelectionForeground, hc: listActiveSelectionForeground }, nls.localize('menuSelectionForeground', \"Foreground color of the selected menu item in menus.\"));\nexport const menuSelectionBackground = registerColor('menu.selectionBackground', { dark: listActiveSelectionBackground, light: listActiveSelectionBackground, hc: listActiveSelectionBackground }, nls.localize('menuSelectionBackground', \"Background color of the selected menu item in menus.\"));\nexport const menuSelectionBorder = registerColor('menu.selectionBorder', { dark: null, light: null, hc: activeContrastBorder }, nls.localize('menuSelectionBorder', \"Border color of the selected menu item in menus.\"));\nexport const menuSeparatorBackground = registerColor('menu.separatorBackground', { dark: '#BBBBBB', light: '#888888', hc: contrastBorder }, nls.localize('menuSeparatorBackground', \"Color of a separator menu item in menus.\"));\n/**\n * Toolbar colors\n */\nexport const toolbarHoverBackground = registerColor('toolbar.hoverBackground', { dark: '#5a5d5e50', light: '#b8b8b850', hc: null }, nls.localize('toolbarHoverBackground', \"Toolbar background when hovering over actions using the mouse\"));\nexport const toolbarHoverOutline = registerColor('toolbar.hoverOutline', { dark: null, light: null, hc: activeContrastBorder }, nls.localize('toolbarHoverOutline', \"Toolbar outline when hovering over actions using the mouse\"));\nexport const toolbarActiveBackground = registerColor('toolbar.activeBackground', { dark: lighten(toolbarHoverBackground, 0.1), light: darken(toolbarHoverBackground, 0.1), hc: null }, nls.localize('toolbarActiveBackground', \"Toolbar background when holding the mouse over actions\"));\n/**\n * Snippet placeholder colors\n */\nexport const snippetTabstopHighlightBackground = registerColor('editor.snippetTabstopHighlightBackground', { dark: new Color(new RGBA(124, 124, 124, 0.3)), light: new Color(new RGBA(10, 50, 100, 0.2)), hc: new Color(new RGBA(124, 124, 124, 0.3)) }, nls.localize('snippetTabstopHighlightBackground', \"Highlight background color of a snippet tabstop.\"));\nexport const snippetTabstopHighlightBorder = registerColor('editor.snippetTabstopHighlightBorder', { dark: null, light: null, hc: null }, nls.localize('snippetTabstopHighlightBorder', \"Highlight border color of a snippet tabstop.\"));\nexport const snippetFinalTabstopHighlightBackground = registerColor('editor.snippetFinalTabstopHighlightBackground', { dark: null, light: null, hc: null }, nls.localize('snippetFinalTabstopHighlightBackground', \"Highlight background color of the final tabstop of a snippet.\"));\nexport const snippetFinalTabstopHighlightBorder = registerColor('editor.snippetFinalTabstopHighlightBorder', { dark: '#525252', light: new Color(new RGBA(10, 50, 100, 0.5)), hc: '#525252' }, nls.localize('snippetFinalTabstopHighlightBorder', \"Highlight border color of the final tabstop of a snippet.\"));\n/**\n * Breadcrumb colors\n */\nexport const breadcrumbsForeground = registerColor('breadcrumb.foreground', { light: transparent(foreground, 0.8), dark: transparent(foreground, 0.8), hc: transparent(foreground, 0.8) }, nls.localize('breadcrumbsFocusForeground', \"Color of focused breadcrumb items.\"));\nexport const breadcrumbsBackground = registerColor('breadcrumb.background', { light: editorBackground, dark: editorBackground, hc: editorBackground }, nls.localize('breadcrumbsBackground', \"Background color of breadcrumb items.\"));\nexport const breadcrumbsFocusForeground = registerColor('breadcrumb.focusForeground', { light: darken(foreground, 0.2), dark: lighten(foreground, 0.1), hc: lighten(foreground, 0.1) }, nls.localize('breadcrumbsFocusForeground', \"Color of focused breadcrumb items.\"));\nexport const breadcrumbsActiveSelectionForeground = registerColor('breadcrumb.activeSelectionForeground', { light: darken(foreground, 0.2), dark: lighten(foreground, 0.1), hc: lighten(foreground, 0.1) }, nls.localize('breadcrumbsSelectedForegound', \"Color of selected breadcrumb items.\"));\nexport const breadcrumbsPickerBackground = registerColor('breadcrumbPicker.background', { light: editorWidgetBackground, dark: editorWidgetBackground, hc: editorWidgetBackground }, nls.localize('breadcrumbsSelectedBackground', \"Background color of breadcrumb item picker.\"));\n/**\n * Merge-conflict colors\n */\nconst headerTransparency = 0.5;\nconst currentBaseColor = Color.fromHex('#40C8AE').transparent(headerTransparency);\nconst incomingBaseColor = Color.fromHex('#40A6FF').transparent(headerTransparency);\nconst commonBaseColor = Color.fromHex('#606060').transparent(0.4);\nconst contentTransparency = 0.4;\nconst rulerTransparency = 1;\nexport const mergeCurrentHeaderBackground = registerColor('merge.currentHeaderBackground', { dark: currentBaseColor, light: currentBaseColor, hc: null }, nls.localize('mergeCurrentHeaderBackground', 'Current header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeCurrentContentBackground = registerColor('merge.currentContentBackground', { dark: transparent(mergeCurrentHeaderBackground, contentTransparency), light: transparent(mergeCurrentHeaderBackground, contentTransparency), hc: transparent(mergeCurrentHeaderBackground, contentTransparency) }, nls.localize('mergeCurrentContentBackground', 'Current content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeIncomingHeaderBackground = registerColor('merge.incomingHeaderBackground', { dark: incomingBaseColor, light: incomingBaseColor, hc: null }, nls.localize('mergeIncomingHeaderBackground', 'Incoming header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeIncomingContentBackground = registerColor('merge.incomingContentBackground', { dark: transparent(mergeIncomingHeaderBackground, contentTransparency), light: transparent(mergeIncomingHeaderBackground, contentTransparency), hc: transparent(mergeIncomingHeaderBackground, contentTransparency) }, nls.localize('mergeIncomingContentBackground', 'Incoming content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeCommonHeaderBackground = registerColor('merge.commonHeaderBackground', { dark: commonBaseColor, light: commonBaseColor, hc: null }, nls.localize('mergeCommonHeaderBackground', 'Common ancestor header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeCommonContentBackground = registerColor('merge.commonContentBackground', { dark: transparent(mergeCommonHeaderBackground, contentTransparency), light: transparent(mergeCommonHeaderBackground, contentTransparency), hc: transparent(mergeCommonHeaderBackground, contentTransparency) }, nls.localize('mergeCommonContentBackground', 'Common ancestor content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeBorder = registerColor('merge.border', { dark: null, light: null, hc: '#C3DF6F' }, nls.localize('mergeBorder', 'Border color on headers and the splitter in inline merge-conflicts.'));\nexport const overviewRulerCurrentContentForeground = registerColor('editorOverviewRuler.currentContentForeground', { dark: transparent(mergeCurrentHeaderBackground, rulerTransparency), light: transparent(mergeCurrentHeaderBackground, rulerTransparency), hc: mergeBorder }, nls.localize('overviewRulerCurrentContentForeground', 'Current overview ruler foreground for inline merge-conflicts.'));\nexport const overviewRulerIncomingContentForeground = registerColor('editorOverviewRuler.incomingContentForeground', { dark: transparent(mergeIncomingHeaderBackground, rulerTransparency), light: transparent(mergeIncomingHeaderBackground, rulerTransparency), hc: mergeBorder }, nls.localize('overviewRulerIncomingContentForeground', 'Incoming overview ruler foreground for inline merge-conflicts.'));\nexport const overviewRulerCommonContentForeground = registerColor('editorOverviewRuler.commonContentForeground', { dark: transparent(mergeCommonHeaderBackground, rulerTransparency), light: transparent(mergeCommonHeaderBackground, rulerTransparency), hc: mergeBorder }, nls.localize('overviewRulerCommonContentForeground', 'Common ancestor overview ruler foreground for inline merge-conflicts.'));\nexport const overviewRulerFindMatchForeground = registerColor('editorOverviewRuler.findMatchForeground', { dark: '#d186167e', light: '#d186167e', hc: '#AB5A00' }, nls.localize('overviewRulerFindMatchForeground', 'Overview ruler marker color for find matches. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const overviewRulerSelectionHighlightForeground = registerColor('editorOverviewRuler.selectionHighlightForeground', { dark: '#A0A0A0CC', light: '#A0A0A0CC', hc: '#A0A0A0CC' }, nls.localize('overviewRulerSelectionHighlightForeground', 'Overview ruler marker color for selection highlights. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const minimapFindMatch = registerColor('minimap.findMatchHighlight', { light: '#d18616', dark: '#d18616', hc: '#AB5A00' }, nls.localize('minimapFindMatchHighlight', 'Minimap marker color for find matches.'), true);\nexport const minimapSelectionOccurrenceHighlight = registerColor('minimap.selectionOccurrenceHighlight', { light: '#c9c9c9', dark: '#676767', hc: '#ffffff' }, nls.localize('minimapSelectionOccurrenceHighlight', 'Minimap marker color for repeating editor selections.'), true);\nexport const minimapSelection = registerColor('minimap.selectionHighlight', { light: '#ADD6FF', dark: '#264F78', hc: '#ffffff' }, nls.localize('minimapSelectionHighlight', 'Minimap marker color for the editor selection.'), true);\nexport const minimapError = registerColor('minimap.errorHighlight', { dark: new Color(new RGBA(255, 18, 18, 0.7)), light: new Color(new RGBA(255, 18, 18, 0.7)), hc: new Color(new RGBA(255, 50, 50, 1)) }, nls.localize('minimapError', 'Minimap marker color for errors.'));\nexport const minimapWarning = registerColor('minimap.warningHighlight', { dark: editorWarningForeground, light: editorWarningForeground, hc: editorWarningBorder }, nls.localize('overviewRuleWarning', 'Minimap marker color for warnings.'));\nexport const minimapBackground = registerColor('minimap.background', { dark: null, light: null, hc: null }, nls.localize('minimapBackground', \"Minimap background color.\"));\nexport const minimapForegroundOpacity = registerColor('minimap.foregroundOpacity', { dark: Color.fromHex('#000f'), light: Color.fromHex('#000f'), hc: Color.fromHex('#000f') }, nls.localize('minimapForegroundOpacity', 'Opacity of foreground elements rendered in the minimap. For example, \"#000000c0\" will render the elements with 75% opacity.'));\nexport const minimapSliderBackground = registerColor('minimapSlider.background', { light: transparent(scrollbarSliderBackground, 0.5), dark: transparent(scrollbarSliderBackground, 0.5), hc: transparent(scrollbarSliderBackground, 0.5) }, nls.localize('minimapSliderBackground', \"Minimap slider background color.\"));\nexport const minimapSliderHoverBackground = registerColor('minimapSlider.hoverBackground', { light: transparent(scrollbarSliderHoverBackground, 0.5), dark: transparent(scrollbarSliderHoverBackground, 0.5), hc: transparent(scrollbarSliderHoverBackground, 0.5) }, nls.localize('minimapSliderHoverBackground', \"Minimap slider background color when hovering.\"));\nexport const minimapSliderActiveBackground = registerColor('minimapSlider.activeBackground', { light: transparent(scrollbarSliderActiveBackground, 0.5), dark: transparent(scrollbarSliderActiveBackground, 0.5), hc: transparent(scrollbarSliderActiveBackground, 0.5) }, nls.localize('minimapSliderActiveBackground', \"Minimap slider background color when clicked on.\"));\nexport const problemsErrorIconForeground = registerColor('problemsErrorIcon.foreground', { dark: editorErrorForeground, light: editorErrorForeground, hc: editorErrorForeground }, nls.localize('problemsErrorIconForeground', \"The color used for the problems error icon.\"));\nexport const problemsWarningIconForeground = registerColor('problemsWarningIcon.foreground', { dark: editorWarningForeground, light: editorWarningForeground, hc: editorWarningForeground }, nls.localize('problemsWarningIconForeground', \"The color used for the problems warning icon.\"));\nexport const problemsInfoIconForeground = registerColor('problemsInfoIcon.foreground', { dark: editorInfoForeground, light: editorInfoForeground, hc: editorInfoForeground }, nls.localize('problemsInfoIconForeground', \"The color used for the problems info icon.\"));\n/**\n * Chart colors\n */\nexport const chartsForeground = registerColor('charts.foreground', { dark: foreground, light: foreground, hc: foreground }, nls.localize('chartsForeground', \"The foreground color used in charts.\"));\nexport const chartsLines = registerColor('charts.lines', { dark: transparent(foreground, .5), light: transparent(foreground, .5), hc: transparent(foreground, .5) }, nls.localize('chartsLines', \"The color used for horizontal lines in charts.\"));\nexport const chartsRed = registerColor('charts.red', { dark: editorErrorForeground, light: editorErrorForeground, hc: editorErrorForeground }, nls.localize('chartsRed', \"The red color used in chart visualizations.\"));\nexport const chartsBlue = registerColor('charts.blue', { dark: editorInfoForeground, light: editorInfoForeground, hc: editorInfoForeground }, nls.localize('chartsBlue', \"The blue color used in chart visualizations.\"));\nexport const chartsYellow = registerColor('charts.yellow', { dark: editorWarningForeground, light: editorWarningForeground, hc: editorWarningForeground }, nls.localize('chartsYellow', \"The yellow color used in chart visualizations.\"));\nexport const chartsOrange = registerColor('charts.orange', { dark: minimapFindMatch, light: minimapFindMatch, hc: minimapFindMatch }, nls.localize('chartsOrange', \"The orange color used in chart visualizations.\"));\nexport const chartsGreen = registerColor('charts.green', { dark: '#89D185', light: '#388A34', hc: '#89D185' }, nls.localize('chartsGreen', \"The green color used in chart visualizations.\"));\nexport const chartsPurple = registerColor('charts.purple', { dark: '#B180D7', light: '#652D90', hc: '#B180D7' }, nls.localize('chartsPurple', \"The purple color used in chart visualizations.\"));\n// ----- color functions\nexport function executeTransform(transform, theme) {\n    var _a, _b, _c;\n    switch (transform.op) {\n        case 0 /* Darken */:\n            return (_a = resolveColorValue(transform.value, theme)) === null || _a === void 0 ? void 0 : _a.darken(transform.factor);\n        case 1 /* Lighten */:\n            return (_b = resolveColorValue(transform.value, theme)) === null || _b === void 0 ? void 0 : _b.lighten(transform.factor);\n        case 2 /* Transparent */:\n            return (_c = resolveColorValue(transform.value, theme)) === null || _c === void 0 ? void 0 : _c.transparent(transform.factor);\n        case 3 /* OneOf */:\n            for (const candidate of transform.values) {\n                const color = resolveColorValue(candidate, theme);\n                if (color) {\n                    return color;\n                }\n            }\n            return undefined;\n        case 5 /* IfDefinedThenElse */:\n            return resolveColorValue(theme.defines(transform.if) ? transform.then : transform.else, theme);\n        case 4 /* LessProminent */: {\n            const from = resolveColorValue(transform.value, theme);\n            if (!from) {\n                return undefined;\n            }\n            const backgroundColor = resolveColorValue(transform.background, theme);\n            if (!backgroundColor) {\n                return from.transparent(transform.factor * transform.transparency);\n            }\n            return from.isDarkerThan(backgroundColor)\n                ? Color.getLighterColor(from, backgroundColor, transform.factor).transparent(transform.transparency)\n                : Color.getDarkerColor(from, backgroundColor, transform.factor).transparent(transform.transparency);\n        }\n        default:\n            throw assertNever(transform);\n    }\n}\nexport function darken(colorValue, factor) {\n    return { op: 0 /* Darken */, value: colorValue, factor };\n}\nexport function lighten(colorValue, factor) {\n    return { op: 1 /* Lighten */, value: colorValue, factor };\n}\nexport function transparent(colorValue, factor) {\n    return { op: 2 /* Transparent */, value: colorValue, factor };\n}\nexport function oneOf(...colorValues) {\n    return { op: 3 /* OneOf */, values: colorValues };\n}\nexport function ifDefinedThenElse(ifArg, thenArg, elseArg) {\n    return { op: 5 /* IfDefinedThenElse */, if: ifArg, then: thenArg, else: elseArg };\n}\nfunction lessProminent(colorValue, backgroundColorValue, factor, transparency) {\n    return { op: 4 /* LessProminent */, value: colorValue, background: backgroundColorValue, factor, transparency };\n}\n// ----- implementation\n/**\n * @param colorValue Resolve a color value in the context of a theme\n */\nexport function resolveColorValue(colorValue, theme) {\n    if (colorValue === null) {\n        return undefined;\n    }\n    else if (typeof colorValue === 'string') {\n        if (colorValue[0] === '#') {\n            return Color.fromHex(colorValue);\n        }\n        return theme.getColor(colorValue);\n    }\n    else if (colorValue instanceof Color) {\n        return colorValue;\n    }\n    else if (typeof colorValue === 'object') {\n        return executeTransform(colorValue, theme);\n    }\n    return undefined;\n}\nexport const workbenchColorsSchemaId = 'vscode://schemas/workbench-colors';\nlet schemaRegistry = platform.Registry.as(JSONExtensions.JSONContribution);\nschemaRegistry.registerSchema(workbenchColorsSchemaId, colorRegistry.getColorSchema());\nconst delayer = new RunOnceScheduler(() => schemaRegistry.notifySchemaChanged(workbenchColorsSchemaId), 200);\ncolorRegistry.onDidChangeSchema(() => {\n    if (!delayer.isScheduled()) {\n        delayer.schedule();\n    }\n});\n// setTimeout(_ => console.log(colorRegistry.toString()), 5000);\n"]},"metadata":{},"sourceType":"module"}