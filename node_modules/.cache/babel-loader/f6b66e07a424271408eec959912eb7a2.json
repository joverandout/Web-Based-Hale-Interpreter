{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ObjectTreeModel } from './objectTreeModel.js';\nimport { TreeError, WeakMapper } from './tree.js';\nimport { Event } from '../../../common/event.js';\nimport { Iterable } from '../../../common/iterator.js';\n\nfunction noCompress(element) {\n  const elements = [element.element];\n  const incompressible = element.incompressible || false;\n  return {\n    element: {\n      elements,\n      incompressible\n    },\n    children: Iterable.map(Iterable.from(element.children), noCompress),\n    collapsible: element.collapsible,\n    collapsed: element.collapsed\n  };\n} // Exported only for test reasons, do not use directly\n\n\nexport function compress(element) {\n  const elements = [element.element];\n  const incompressible = element.incompressible || false;\n  let childrenIterator;\n  let children;\n\n  while (true) {\n    [children, childrenIterator] = Iterable.consume(Iterable.from(element.children), 2);\n\n    if (children.length !== 1) {\n      break;\n    }\n\n    if (children[0].incompressible) {\n      break;\n    }\n\n    element = children[0];\n    elements.push(element.element);\n  }\n\n  return {\n    element: {\n      elements,\n      incompressible\n    },\n    children: Iterable.map(Iterable.concat(children, childrenIterator), compress),\n    collapsible: element.collapsible,\n    collapsed: element.collapsed\n  };\n}\n\nfunction _decompress(element, index = 0) {\n  let children;\n\n  if (index < element.element.elements.length - 1) {\n    children = [_decompress(element, index + 1)];\n  } else {\n    children = Iterable.map(Iterable.from(element.children), el => _decompress(el, 0));\n  }\n\n  if (index === 0 && element.element.incompressible) {\n    return {\n      element: element.element.elements[index],\n      children,\n      incompressible: true,\n      collapsible: element.collapsible,\n      collapsed: element.collapsed\n    };\n  }\n\n  return {\n    element: element.element.elements[index],\n    children,\n    collapsible: element.collapsible,\n    collapsed: element.collapsed\n  };\n} // Exported only for test reasons, do not use directly\n\n\nexport function decompress(element) {\n  return _decompress(element, 0);\n}\n\nfunction splice(treeElement, element, children) {\n  if (treeElement.element === element) {\n    return Object.assign(Object.assign({}, treeElement), {\n      children\n    });\n  }\n\n  return Object.assign(Object.assign({}, treeElement), {\n    children: Iterable.map(Iterable.from(treeElement.children), e => splice(e, element, children))\n  });\n}\n\nconst wrapIdentityProvider = base => ({\n  getId(node) {\n    return node.elements.map(e => base.getId(e).toString()).join('\\0');\n  }\n\n}); // Exported only for test reasons, do not use directly\n\n\nexport class CompressedObjectTreeModel {\n  constructor(user, list, options = {}) {\n    this.user = user;\n    this.rootRef = null;\n    this.nodes = new Map();\n    this.model = new ObjectTreeModel(user, list, options);\n    this.enabled = typeof options.compressionEnabled === 'undefined' ? true : options.compressionEnabled;\n    this.identityProvider = options.identityProvider;\n  }\n\n  get onDidSplice() {\n    return this.model.onDidSplice;\n  }\n\n  get onDidChangeCollapseState() {\n    return this.model.onDidChangeCollapseState;\n  }\n\n  get onDidChangeRenderNodeCount() {\n    return this.model.onDidChangeRenderNodeCount;\n  }\n\n  setChildren(element, children = Iterable.empty(), options) {\n    // Diffs must be deem, since the compression can affect nested elements.\n    // @see https://github.com/microsoft/vscode/pull/114237#issuecomment-759425034\n    const diffIdentityProvider = options.diffIdentityProvider && wrapIdentityProvider(options.diffIdentityProvider);\n\n    if (element === null) {\n      const compressedChildren = Iterable.map(children, this.enabled ? compress : noCompress);\n\n      this._setChildren(null, compressedChildren, {\n        diffIdentityProvider,\n        diffDepth: Infinity\n      });\n\n      return;\n    }\n\n    const compressedNode = this.nodes.get(element);\n\n    if (!compressedNode) {\n      throw new Error('Unknown compressed tree node');\n    }\n\n    const node = this.model.getNode(compressedNode);\n    const compressedParentNode = this.model.getParentNodeLocation(compressedNode);\n    const parent = this.model.getNode(compressedParentNode);\n    const decompressedElement = decompress(node);\n    const splicedElement = splice(decompressedElement, element, children);\n    const recompressedElement = (this.enabled ? compress : noCompress)(splicedElement);\n    const parentChildren = parent.children.map(child => child === node ? recompressedElement : child);\n\n    this._setChildren(parent.element, parentChildren, {\n      diffIdentityProvider,\n      diffDepth: node.depth - parent.depth\n    });\n  }\n\n  setCompressionEnabled(enabled) {\n    if (enabled === this.enabled) {\n      return;\n    }\n\n    this.enabled = enabled;\n    const root = this.model.getNode();\n    const rootChildren = root.children;\n    const decompressedRootChildren = Iterable.map(rootChildren, decompress);\n    const recompressedRootChildren = Iterable.map(decompressedRootChildren, enabled ? compress : noCompress); // it should be safe to always use deep diff mode here if an identity\n    // provider is available, since we know the raw nodes are unchanged.\n\n    this._setChildren(null, recompressedRootChildren, {\n      diffIdentityProvider: this.identityProvider,\n      diffDepth: Infinity\n    });\n  }\n\n  _setChildren(node, children, options) {\n    const insertedElements = new Set();\n\n    const onDidCreateNode = node => {\n      for (const element of node.element.elements) {\n        insertedElements.add(element);\n        this.nodes.set(element, node.element);\n      }\n    };\n\n    const onDidDeleteNode = node => {\n      for (const element of node.element.elements) {\n        if (!insertedElements.has(element)) {\n          this.nodes.delete(element);\n        }\n      }\n    };\n\n    this.model.setChildren(node, children, Object.assign(Object.assign({}, options), {\n      onDidCreateNode,\n      onDidDeleteNode\n    }));\n  }\n\n  has(element) {\n    return this.nodes.has(element);\n  }\n\n  getListIndex(location) {\n    const node = this.getCompressedNode(location);\n    return this.model.getListIndex(node);\n  }\n\n  getListRenderCount(location) {\n    const node = this.getCompressedNode(location);\n    return this.model.getListRenderCount(node);\n  }\n\n  getNode(location) {\n    if (typeof location === 'undefined') {\n      return this.model.getNode();\n    }\n\n    const node = this.getCompressedNode(location);\n    return this.model.getNode(node);\n  } // TODO: review this\n\n\n  getNodeLocation(node) {\n    const compressedNode = this.model.getNodeLocation(node);\n\n    if (compressedNode === null) {\n      return null;\n    }\n\n    return compressedNode.elements[compressedNode.elements.length - 1];\n  } // TODO: review this\n\n\n  getParentNodeLocation(location) {\n    const compressedNode = this.getCompressedNode(location);\n    const parentNode = this.model.getParentNodeLocation(compressedNode);\n\n    if (parentNode === null) {\n      return null;\n    }\n\n    return parentNode.elements[parentNode.elements.length - 1];\n  }\n\n  getFirstElementChild(location) {\n    const compressedNode = this.getCompressedNode(location);\n    return this.model.getFirstElementChild(compressedNode);\n  }\n\n  isCollapsible(location) {\n    const compressedNode = this.getCompressedNode(location);\n    return this.model.isCollapsible(compressedNode);\n  }\n\n  setCollapsible(location, collapsible) {\n    const compressedNode = this.getCompressedNode(location);\n    return this.model.setCollapsible(compressedNode, collapsible);\n  }\n\n  isCollapsed(location) {\n    const compressedNode = this.getCompressedNode(location);\n    return this.model.isCollapsed(compressedNode);\n  }\n\n  setCollapsed(location, collapsed, recursive) {\n    const compressedNode = this.getCompressedNode(location);\n    return this.model.setCollapsed(compressedNode, collapsed, recursive);\n  }\n\n  expandTo(location) {\n    const compressedNode = this.getCompressedNode(location);\n    this.model.expandTo(compressedNode);\n  }\n\n  rerender(location) {\n    const compressedNode = this.getCompressedNode(location);\n    this.model.rerender(compressedNode);\n  }\n\n  refilter() {\n    this.model.refilter();\n  }\n\n  getCompressedNode(element) {\n    if (element === null) {\n      return null;\n    }\n\n    const node = this.nodes.get(element);\n\n    if (!node) {\n      throw new TreeError(this.user, `Tree element not found: ${element}`);\n    }\n\n    return node;\n  }\n\n}\nexport const DefaultElementMapper = elements => elements[elements.length - 1];\n\nclass CompressedTreeNodeWrapper {\n  constructor(unwrapper, node) {\n    this.unwrapper = unwrapper;\n    this.node = node;\n  }\n\n  get element() {\n    return this.node.element === null ? null : this.unwrapper(this.node.element);\n  }\n\n  get children() {\n    return this.node.children.map(node => new CompressedTreeNodeWrapper(this.unwrapper, node));\n  }\n\n  get depth() {\n    return this.node.depth;\n  }\n\n  get visibleChildrenCount() {\n    return this.node.visibleChildrenCount;\n  }\n\n  get visibleChildIndex() {\n    return this.node.visibleChildIndex;\n  }\n\n  get collapsible() {\n    return this.node.collapsible;\n  }\n\n  get collapsed() {\n    return this.node.collapsed;\n  }\n\n  get visible() {\n    return this.node.visible;\n  }\n\n  get filterData() {\n    return this.node.filterData;\n  }\n\n}\n\nfunction mapList(nodeMapper, list) {\n  return {\n    splice(start, deleteCount, toInsert) {\n      list.splice(start, deleteCount, toInsert.map(node => nodeMapper.map(node)));\n    },\n\n    updateElementHeight(index, height) {\n      list.updateElementHeight(index, height);\n    }\n\n  };\n}\n\nfunction mapOptions(compressedNodeUnwrapper, options) {\n  return Object.assign(Object.assign({}, options), {\n    identityProvider: options.identityProvider && {\n      getId(node) {\n        return options.identityProvider.getId(compressedNodeUnwrapper(node));\n      }\n\n    },\n    sorter: options.sorter && {\n      compare(node, otherNode) {\n        return options.sorter.compare(node.elements[0], otherNode.elements[0]);\n      }\n\n    },\n    filter: options.filter && {\n      filter(node, parentVisibility) {\n        return options.filter.filter(compressedNodeUnwrapper(node), parentVisibility);\n      }\n\n    }\n  });\n}\n\nexport class CompressibleObjectTreeModel {\n  constructor(user, list, options = {}) {\n    this.rootRef = null;\n    this.elementMapper = options.elementMapper || DefaultElementMapper;\n\n    const compressedNodeUnwrapper = node => this.elementMapper(node.elements);\n\n    this.nodeMapper = new WeakMapper(node => new CompressedTreeNodeWrapper(compressedNodeUnwrapper, node));\n    this.model = new CompressedObjectTreeModel(user, mapList(this.nodeMapper, list), mapOptions(compressedNodeUnwrapper, options));\n  }\n\n  get onDidSplice() {\n    return Event.map(this.model.onDidSplice, ({\n      insertedNodes,\n      deletedNodes\n    }) => ({\n      insertedNodes: insertedNodes.map(node => this.nodeMapper.map(node)),\n      deletedNodes: deletedNodes.map(node => this.nodeMapper.map(node))\n    }));\n  }\n\n  get onDidChangeCollapseState() {\n    return Event.map(this.model.onDidChangeCollapseState, ({\n      node,\n      deep\n    }) => ({\n      node: this.nodeMapper.map(node),\n      deep\n    }));\n  }\n\n  get onDidChangeRenderNodeCount() {\n    return Event.map(this.model.onDidChangeRenderNodeCount, node => this.nodeMapper.map(node));\n  }\n\n  setChildren(element, children = Iterable.empty(), options = {}) {\n    this.model.setChildren(element, children, options);\n  }\n\n  setCompressionEnabled(enabled) {\n    this.model.setCompressionEnabled(enabled);\n  }\n\n  has(location) {\n    return this.model.has(location);\n  }\n\n  getListIndex(location) {\n    return this.model.getListIndex(location);\n  }\n\n  getListRenderCount(location) {\n    return this.model.getListRenderCount(location);\n  }\n\n  getNode(location) {\n    return this.nodeMapper.map(this.model.getNode(location));\n  }\n\n  getNodeLocation(node) {\n    return node.element;\n  }\n\n  getParentNodeLocation(location) {\n    return this.model.getParentNodeLocation(location);\n  }\n\n  getFirstElementChild(location) {\n    const result = this.model.getFirstElementChild(location);\n\n    if (result === null || typeof result === 'undefined') {\n      return result;\n    }\n\n    return this.elementMapper(result.elements);\n  }\n\n  isCollapsible(location) {\n    return this.model.isCollapsible(location);\n  }\n\n  setCollapsible(location, collapsed) {\n    return this.model.setCollapsible(location, collapsed);\n  }\n\n  isCollapsed(location) {\n    return this.model.isCollapsed(location);\n  }\n\n  setCollapsed(location, collapsed, recursive) {\n    return this.model.setCollapsed(location, collapsed, recursive);\n  }\n\n  expandTo(location) {\n    return this.model.expandTo(location);\n  }\n\n  rerender(location) {\n    return this.model.rerender(location);\n  }\n\n  refilter() {\n    return this.model.refilter();\n  }\n\n  getCompressedTreeNode(location = null) {\n    return this.model.getNode(location);\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/base/browser/ui/tree/compressedObjectTreeModel.js"],"names":["ObjectTreeModel","TreeError","WeakMapper","Event","Iterable","noCompress","element","elements","incompressible","children","map","from","collapsible","collapsed","compress","childrenIterator","consume","length","push","concat","_decompress","index","el","decompress","splice","treeElement","Object","assign","e","wrapIdentityProvider","base","getId","node","toString","join","CompressedObjectTreeModel","constructor","user","list","options","rootRef","nodes","Map","model","enabled","compressionEnabled","identityProvider","onDidSplice","onDidChangeCollapseState","onDidChangeRenderNodeCount","setChildren","empty","diffIdentityProvider","compressedChildren","_setChildren","diffDepth","Infinity","compressedNode","get","Error","getNode","compressedParentNode","getParentNodeLocation","parent","decompressedElement","splicedElement","recompressedElement","parentChildren","child","depth","setCompressionEnabled","root","rootChildren","decompressedRootChildren","recompressedRootChildren","insertedElements","Set","onDidCreateNode","add","set","onDidDeleteNode","has","delete","getListIndex","location","getCompressedNode","getListRenderCount","getNodeLocation","parentNode","getFirstElementChild","isCollapsible","setCollapsible","isCollapsed","setCollapsed","recursive","expandTo","rerender","refilter","DefaultElementMapper","CompressedTreeNodeWrapper","unwrapper","visibleChildrenCount","visibleChildIndex","visible","filterData","mapList","nodeMapper","start","deleteCount","toInsert","updateElementHeight","height","mapOptions","compressedNodeUnwrapper","sorter","compare","otherNode","filter","parentVisibility","CompressibleObjectTreeModel","elementMapper","insertedNodes","deletedNodes","deep","result","getCompressedTreeNode"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ObjectTreeModel } from './objectTreeModel.js';\nimport { TreeError, WeakMapper } from './tree.js';\nimport { Event } from '../../../common/event.js';\nimport { Iterable } from '../../../common/iterator.js';\nfunction noCompress(element) {\n    const elements = [element.element];\n    const incompressible = element.incompressible || false;\n    return {\n        element: { elements, incompressible },\n        children: Iterable.map(Iterable.from(element.children), noCompress),\n        collapsible: element.collapsible,\n        collapsed: element.collapsed\n    };\n}\n// Exported only for test reasons, do not use directly\nexport function compress(element) {\n    const elements = [element.element];\n    const incompressible = element.incompressible || false;\n    let childrenIterator;\n    let children;\n    while (true) {\n        [children, childrenIterator] = Iterable.consume(Iterable.from(element.children), 2);\n        if (children.length !== 1) {\n            break;\n        }\n        if (children[0].incompressible) {\n            break;\n        }\n        element = children[0];\n        elements.push(element.element);\n    }\n    return {\n        element: { elements, incompressible },\n        children: Iterable.map(Iterable.concat(children, childrenIterator), compress),\n        collapsible: element.collapsible,\n        collapsed: element.collapsed\n    };\n}\nfunction _decompress(element, index = 0) {\n    let children;\n    if (index < element.element.elements.length - 1) {\n        children = [_decompress(element, index + 1)];\n    }\n    else {\n        children = Iterable.map(Iterable.from(element.children), el => _decompress(el, 0));\n    }\n    if (index === 0 && element.element.incompressible) {\n        return {\n            element: element.element.elements[index],\n            children,\n            incompressible: true,\n            collapsible: element.collapsible,\n            collapsed: element.collapsed\n        };\n    }\n    return {\n        element: element.element.elements[index],\n        children,\n        collapsible: element.collapsible,\n        collapsed: element.collapsed\n    };\n}\n// Exported only for test reasons, do not use directly\nexport function decompress(element) {\n    return _decompress(element, 0);\n}\nfunction splice(treeElement, element, children) {\n    if (treeElement.element === element) {\n        return Object.assign(Object.assign({}, treeElement), { children });\n    }\n    return Object.assign(Object.assign({}, treeElement), { children: Iterable.map(Iterable.from(treeElement.children), e => splice(e, element, children)) });\n}\nconst wrapIdentityProvider = (base) => ({\n    getId(node) {\n        return node.elements.map(e => base.getId(e).toString()).join('\\0');\n    }\n});\n// Exported only for test reasons, do not use directly\nexport class CompressedObjectTreeModel {\n    constructor(user, list, options = {}) {\n        this.user = user;\n        this.rootRef = null;\n        this.nodes = new Map();\n        this.model = new ObjectTreeModel(user, list, options);\n        this.enabled = typeof options.compressionEnabled === 'undefined' ? true : options.compressionEnabled;\n        this.identityProvider = options.identityProvider;\n    }\n    get onDidSplice() { return this.model.onDidSplice; }\n    get onDidChangeCollapseState() { return this.model.onDidChangeCollapseState; }\n    get onDidChangeRenderNodeCount() { return this.model.onDidChangeRenderNodeCount; }\n    setChildren(element, children = Iterable.empty(), options) {\n        // Diffs must be deem, since the compression can affect nested elements.\n        // @see https://github.com/microsoft/vscode/pull/114237#issuecomment-759425034\n        const diffIdentityProvider = options.diffIdentityProvider && wrapIdentityProvider(options.diffIdentityProvider);\n        if (element === null) {\n            const compressedChildren = Iterable.map(children, this.enabled ? compress : noCompress);\n            this._setChildren(null, compressedChildren, { diffIdentityProvider, diffDepth: Infinity });\n            return;\n        }\n        const compressedNode = this.nodes.get(element);\n        if (!compressedNode) {\n            throw new Error('Unknown compressed tree node');\n        }\n        const node = this.model.getNode(compressedNode);\n        const compressedParentNode = this.model.getParentNodeLocation(compressedNode);\n        const parent = this.model.getNode(compressedParentNode);\n        const decompressedElement = decompress(node);\n        const splicedElement = splice(decompressedElement, element, children);\n        const recompressedElement = (this.enabled ? compress : noCompress)(splicedElement);\n        const parentChildren = parent.children\n            .map(child => child === node ? recompressedElement : child);\n        this._setChildren(parent.element, parentChildren, {\n            diffIdentityProvider,\n            diffDepth: node.depth - parent.depth,\n        });\n    }\n    setCompressionEnabled(enabled) {\n        if (enabled === this.enabled) {\n            return;\n        }\n        this.enabled = enabled;\n        const root = this.model.getNode();\n        const rootChildren = root.children;\n        const decompressedRootChildren = Iterable.map(rootChildren, decompress);\n        const recompressedRootChildren = Iterable.map(decompressedRootChildren, enabled ? compress : noCompress);\n        // it should be safe to always use deep diff mode here if an identity\n        // provider is available, since we know the raw nodes are unchanged.\n        this._setChildren(null, recompressedRootChildren, {\n            diffIdentityProvider: this.identityProvider,\n            diffDepth: Infinity,\n        });\n    }\n    _setChildren(node, children, options) {\n        const insertedElements = new Set();\n        const onDidCreateNode = (node) => {\n            for (const element of node.element.elements) {\n                insertedElements.add(element);\n                this.nodes.set(element, node.element);\n            }\n        };\n        const onDidDeleteNode = (node) => {\n            for (const element of node.element.elements) {\n                if (!insertedElements.has(element)) {\n                    this.nodes.delete(element);\n                }\n            }\n        };\n        this.model.setChildren(node, children, Object.assign(Object.assign({}, options), { onDidCreateNode, onDidDeleteNode }));\n    }\n    has(element) {\n        return this.nodes.has(element);\n    }\n    getListIndex(location) {\n        const node = this.getCompressedNode(location);\n        return this.model.getListIndex(node);\n    }\n    getListRenderCount(location) {\n        const node = this.getCompressedNode(location);\n        return this.model.getListRenderCount(node);\n    }\n    getNode(location) {\n        if (typeof location === 'undefined') {\n            return this.model.getNode();\n        }\n        const node = this.getCompressedNode(location);\n        return this.model.getNode(node);\n    }\n    // TODO: review this\n    getNodeLocation(node) {\n        const compressedNode = this.model.getNodeLocation(node);\n        if (compressedNode === null) {\n            return null;\n        }\n        return compressedNode.elements[compressedNode.elements.length - 1];\n    }\n    // TODO: review this\n    getParentNodeLocation(location) {\n        const compressedNode = this.getCompressedNode(location);\n        const parentNode = this.model.getParentNodeLocation(compressedNode);\n        if (parentNode === null) {\n            return null;\n        }\n        return parentNode.elements[parentNode.elements.length - 1];\n    }\n    getFirstElementChild(location) {\n        const compressedNode = this.getCompressedNode(location);\n        return this.model.getFirstElementChild(compressedNode);\n    }\n    isCollapsible(location) {\n        const compressedNode = this.getCompressedNode(location);\n        return this.model.isCollapsible(compressedNode);\n    }\n    setCollapsible(location, collapsible) {\n        const compressedNode = this.getCompressedNode(location);\n        return this.model.setCollapsible(compressedNode, collapsible);\n    }\n    isCollapsed(location) {\n        const compressedNode = this.getCompressedNode(location);\n        return this.model.isCollapsed(compressedNode);\n    }\n    setCollapsed(location, collapsed, recursive) {\n        const compressedNode = this.getCompressedNode(location);\n        return this.model.setCollapsed(compressedNode, collapsed, recursive);\n    }\n    expandTo(location) {\n        const compressedNode = this.getCompressedNode(location);\n        this.model.expandTo(compressedNode);\n    }\n    rerender(location) {\n        const compressedNode = this.getCompressedNode(location);\n        this.model.rerender(compressedNode);\n    }\n    refilter() {\n        this.model.refilter();\n    }\n    getCompressedNode(element) {\n        if (element === null) {\n            return null;\n        }\n        const node = this.nodes.get(element);\n        if (!node) {\n            throw new TreeError(this.user, `Tree element not found: ${element}`);\n        }\n        return node;\n    }\n}\nexport const DefaultElementMapper = elements => elements[elements.length - 1];\nclass CompressedTreeNodeWrapper {\n    constructor(unwrapper, node) {\n        this.unwrapper = unwrapper;\n        this.node = node;\n    }\n    get element() { return this.node.element === null ? null : this.unwrapper(this.node.element); }\n    get children() { return this.node.children.map(node => new CompressedTreeNodeWrapper(this.unwrapper, node)); }\n    get depth() { return this.node.depth; }\n    get visibleChildrenCount() { return this.node.visibleChildrenCount; }\n    get visibleChildIndex() { return this.node.visibleChildIndex; }\n    get collapsible() { return this.node.collapsible; }\n    get collapsed() { return this.node.collapsed; }\n    get visible() { return this.node.visible; }\n    get filterData() { return this.node.filterData; }\n}\nfunction mapList(nodeMapper, list) {\n    return {\n        splice(start, deleteCount, toInsert) {\n            list.splice(start, deleteCount, toInsert.map(node => nodeMapper.map(node)));\n        },\n        updateElementHeight(index, height) {\n            list.updateElementHeight(index, height);\n        }\n    };\n}\nfunction mapOptions(compressedNodeUnwrapper, options) {\n    return Object.assign(Object.assign({}, options), { identityProvider: options.identityProvider && {\n            getId(node) {\n                return options.identityProvider.getId(compressedNodeUnwrapper(node));\n            }\n        }, sorter: options.sorter && {\n            compare(node, otherNode) {\n                return options.sorter.compare(node.elements[0], otherNode.elements[0]);\n            }\n        }, filter: options.filter && {\n            filter(node, parentVisibility) {\n                return options.filter.filter(compressedNodeUnwrapper(node), parentVisibility);\n            }\n        } });\n}\nexport class CompressibleObjectTreeModel {\n    constructor(user, list, options = {}) {\n        this.rootRef = null;\n        this.elementMapper = options.elementMapper || DefaultElementMapper;\n        const compressedNodeUnwrapper = node => this.elementMapper(node.elements);\n        this.nodeMapper = new WeakMapper(node => new CompressedTreeNodeWrapper(compressedNodeUnwrapper, node));\n        this.model = new CompressedObjectTreeModel(user, mapList(this.nodeMapper, list), mapOptions(compressedNodeUnwrapper, options));\n    }\n    get onDidSplice() {\n        return Event.map(this.model.onDidSplice, ({ insertedNodes, deletedNodes }) => ({\n            insertedNodes: insertedNodes.map(node => this.nodeMapper.map(node)),\n            deletedNodes: deletedNodes.map(node => this.nodeMapper.map(node)),\n        }));\n    }\n    get onDidChangeCollapseState() {\n        return Event.map(this.model.onDidChangeCollapseState, ({ node, deep }) => ({\n            node: this.nodeMapper.map(node),\n            deep\n        }));\n    }\n    get onDidChangeRenderNodeCount() {\n        return Event.map(this.model.onDidChangeRenderNodeCount, node => this.nodeMapper.map(node));\n    }\n    setChildren(element, children = Iterable.empty(), options = {}) {\n        this.model.setChildren(element, children, options);\n    }\n    setCompressionEnabled(enabled) {\n        this.model.setCompressionEnabled(enabled);\n    }\n    has(location) {\n        return this.model.has(location);\n    }\n    getListIndex(location) {\n        return this.model.getListIndex(location);\n    }\n    getListRenderCount(location) {\n        return this.model.getListRenderCount(location);\n    }\n    getNode(location) {\n        return this.nodeMapper.map(this.model.getNode(location));\n    }\n    getNodeLocation(node) {\n        return node.element;\n    }\n    getParentNodeLocation(location) {\n        return this.model.getParentNodeLocation(location);\n    }\n    getFirstElementChild(location) {\n        const result = this.model.getFirstElementChild(location);\n        if (result === null || typeof result === 'undefined') {\n            return result;\n        }\n        return this.elementMapper(result.elements);\n    }\n    isCollapsible(location) {\n        return this.model.isCollapsible(location);\n    }\n    setCollapsible(location, collapsed) {\n        return this.model.setCollapsible(location, collapsed);\n    }\n    isCollapsed(location) {\n        return this.model.isCollapsed(location);\n    }\n    setCollapsed(location, collapsed, recursive) {\n        return this.model.setCollapsed(location, collapsed, recursive);\n    }\n    expandTo(location) {\n        return this.model.expandTo(location);\n    }\n    rerender(location) {\n        return this.model.rerender(location);\n    }\n    refilter() {\n        return this.model.refilter();\n    }\n    getCompressedTreeNode(location = null) {\n        return this.model.getNode(location);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}