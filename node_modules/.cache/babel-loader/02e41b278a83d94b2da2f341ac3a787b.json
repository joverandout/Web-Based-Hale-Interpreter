{"ast":null,"code":"import * as React from 'react';\nimport { useState } from 'react';\nimport useNavigation from './useNavigation';\n/**\n * Hook to get the current focus state of the screen. Returns a `true` if screen is focused, otherwise `false`.\n * This can be used if a component needs to render something based on the focus state.\n */\n\nexport default function useIsFocused() {\n  const navigation = useNavigation();\n  const [isFocused, setIsFocused] = useState(navigation.isFocused);\n  const valueToReturn = navigation.isFocused();\n\n  if (isFocused !== valueToReturn) {\n    // If the value has changed since the last render, we need to update it.\n    // This could happen if we missed an update from the event listeners during re-render.\n    // React will process this update immediately, so the old subscription value won't be committed.\n    // It is still nice to avoid returning a mismatched value though, so let's override the return value.\n    // This is the same logic as in https://github.com/facebook/react/tree/master/packages/use-subscription\n    setIsFocused(valueToReturn);\n  }\n\n  React.useEffect(() => {\n    const unsubscribeFocus = navigation.addListener('focus', () => setIsFocused(true));\n    const unsubscribeBlur = navigation.addListener('blur', () => setIsFocused(false));\n    return () => {\n      unsubscribeFocus();\n      unsubscribeBlur();\n    };\n  }, [navigation]);\n  React.useDebugValue(valueToReturn);\n  return valueToReturn;\n}","map":{"version":3,"sources":["useIsFocused.tsx"],"names":["navigation","useNavigation","useState","valueToReturn","isFocused","setIsFocused","React","unsubscribeFocus","unsubscribeBlur"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,QAAA,QAAA,OAAA;AAEA,OAAA,aAAA,MAAA,iBAAA;AAEA;AACA;AACA;AACA;;AACA,eAAe,SAAA,YAAA,GAAiC;AAC9C,QAAMA,UAAU,GAAGC,aAAnB,EAAA;AACA,QAAM,CAAA,SAAA,EAAA,YAAA,IAA4BC,QAAQ,CAACF,UAAU,CAArD,SAA0C,CAA1C;AAEA,QAAMG,aAAa,GAAGH,UAAU,CAAhC,SAAsBA,EAAtB;;AAEA,MAAII,SAAS,KAAb,aAAA,EAAiC;AAC/B;AACA;AACA;AACA;AACA;AACAC,IAAAA,YAAY,CAAZA,aAAY,CAAZA;AACD;;AAEDC,EAAAA,KAAK,CAALA,SAAAA,CAAgB,MAAM;AACpB,UAAMC,gBAAgB,GAAGP,UAAU,CAAVA,WAAAA,CAAAA,OAAAA,EAAgC,MACvDK,YAAY,CADd,IACc,CADWL,CAAzB;AAIA,UAAMQ,eAAe,GAAGR,UAAU,CAAVA,WAAAA,CAAAA,MAAAA,EAA+B,MACrDK,YAAY,CADd,KACc,CADUL,CAAxB;AAIA,WAAO,MAAM;AACXO,MAAAA,gBAAgB;AAChBC,MAAAA,eAAe;AAFjB,KAAA;AATFF,GAAAA,EAaG,CAbHA,UAaG,CAbHA;AAeAA,EAAAA,KAAK,CAALA,aAAAA,CAAAA,aAAAA;AAEA,SAAA,aAAA;AACD","sourcesContent":["import * as React from 'react';\nimport { useState } from 'react';\n\nimport useNavigation from './useNavigation';\n\n/**\n * Hook to get the current focus state of the screen. Returns a `true` if screen is focused, otherwise `false`.\n * This can be used if a component needs to render something based on the focus state.\n */\nexport default function useIsFocused(): boolean {\n  const navigation = useNavigation();\n  const [isFocused, setIsFocused] = useState(navigation.isFocused);\n\n  const valueToReturn = navigation.isFocused();\n\n  if (isFocused !== valueToReturn) {\n    // If the value has changed since the last render, we need to update it.\n    // This could happen if we missed an update from the event listeners during re-render.\n    // React will process this update immediately, so the old subscription value won't be committed.\n    // It is still nice to avoid returning a mismatched value though, so let's override the return value.\n    // This is the same logic as in https://github.com/facebook/react/tree/master/packages/use-subscription\n    setIsFocused(valueToReturn);\n  }\n\n  React.useEffect(() => {\n    const unsubscribeFocus = navigation.addListener('focus', () =>\n      setIsFocused(true)\n    );\n\n    const unsubscribeBlur = navigation.addListener('blur', () =>\n      setIsFocused(false)\n    );\n\n    return () => {\n      unsubscribeFocus();\n      unsubscribeBlur();\n    };\n  }, [navigation]);\n\n  React.useDebugValue(valueToReturn);\n\n  return valueToReturn;\n}\n"]},"metadata":{},"sourceType":"module"}