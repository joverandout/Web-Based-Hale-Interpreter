{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nexport class OvertypingCapturer {\n  constructor(editor, suggestModel) {\n    this._disposables = new DisposableStore();\n    this._lastOvertyped = [];\n    this._empty = true;\n\n    this._disposables.add(editor.onWillType(() => {\n      if (!this._empty) {\n        return;\n      }\n\n      if (!editor.hasModel()) {\n        return;\n      }\n\n      const selections = editor.getSelections();\n      const selectionsLength = selections.length; // Check if it will overtype any selections\n\n      let willOvertype = false;\n\n      for (let i = 0; i < selectionsLength; i++) {\n        if (!selections[i].isEmpty()) {\n          willOvertype = true;\n          break;\n        }\n      }\n\n      if (!willOvertype) {\n        return;\n      }\n\n      this._lastOvertyped = [];\n      const model = editor.getModel();\n\n      for (let i = 0; i < selectionsLength; i++) {\n        const selection = selections[i]; // Check for overtyping capturer restrictions\n\n        if (model.getValueLengthInRange(selection) > OvertypingCapturer._maxSelectionLength) {\n          return;\n        }\n\n        this._lastOvertyped[i] = {\n          value: model.getValueInRange(selection),\n          multiline: selection.startLineNumber !== selection.endLineNumber\n        };\n      }\n\n      this._empty = false;\n    }));\n\n    this._disposables.add(suggestModel.onDidCancel(e => {\n      if (!this._empty && !e.retrigger) {\n        this._empty = true;\n      }\n    }));\n  }\n\n  getLastOvertypedInfo(idx) {\n    if (!this._empty && idx >= 0 && idx < this._lastOvertyped.length) {\n      return this._lastOvertyped[idx];\n    }\n\n    return undefined;\n  }\n\n  dispose() {\n    this._disposables.dispose();\n  }\n\n}\nOvertypingCapturer._maxSelectionLength = 51200;","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/contrib/suggest/browser/suggestOvertypingCapturer.js"],"names":["DisposableStore","OvertypingCapturer","constructor","editor","suggestModel","_disposables","_lastOvertyped","_empty","add","onWillType","hasModel","selections","getSelections","selectionsLength","length","willOvertype","i","isEmpty","model","getModel","selection","getValueLengthInRange","_maxSelectionLength","value","getValueInRange","multiline","startLineNumber","endLineNumber","onDidCancel","e","retrigger","getLastOvertypedInfo","idx","undefined","dispose"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,eAAT,QAAgC,sCAAhC;AACA,OAAO,MAAMC,kBAAN,CAAyB;AAC5BC,EAAAA,WAAW,CAACC,MAAD,EAASC,YAAT,EAAuB;AAC9B,SAAKC,YAAL,GAAoB,IAAIL,eAAJ,EAApB;AACA,SAAKM,cAAL,GAAsB,EAAtB;AACA,SAAKC,MAAL,GAAc,IAAd;;AACA,SAAKF,YAAL,CAAkBG,GAAlB,CAAsBL,MAAM,CAACM,UAAP,CAAkB,MAAM;AAC1C,UAAI,CAAC,KAAKF,MAAV,EAAkB;AACd;AACH;;AACD,UAAI,CAACJ,MAAM,CAACO,QAAP,EAAL,EAAwB;AACpB;AACH;;AACD,YAAMC,UAAU,GAAGR,MAAM,CAACS,aAAP,EAAnB;AACA,YAAMC,gBAAgB,GAAGF,UAAU,CAACG,MAApC,CAR0C,CAS1C;;AACA,UAAIC,YAAY,GAAG,KAAnB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,gBAApB,EAAsCG,CAAC,EAAvC,EAA2C;AACvC,YAAI,CAACL,UAAU,CAACK,CAAD,CAAV,CAAcC,OAAd,EAAL,EAA8B;AAC1BF,UAAAA,YAAY,GAAG,IAAf;AACA;AACH;AACJ;;AACD,UAAI,CAACA,YAAL,EAAmB;AACf;AACH;;AACD,WAAKT,cAAL,GAAsB,EAAtB;AACA,YAAMY,KAAK,GAAGf,MAAM,CAACgB,QAAP,EAAd;;AACA,WAAK,IAAIH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,gBAApB,EAAsCG,CAAC,EAAvC,EAA2C;AACvC,cAAMI,SAAS,GAAGT,UAAU,CAACK,CAAD,CAA5B,CADuC,CAEvC;;AACA,YAAIE,KAAK,CAACG,qBAAN,CAA4BD,SAA5B,IAAyCnB,kBAAkB,CAACqB,mBAAhE,EAAqF;AACjF;AACH;;AACD,aAAKhB,cAAL,CAAoBU,CAApB,IAAyB;AAAEO,UAAAA,KAAK,EAAEL,KAAK,CAACM,eAAN,CAAsBJ,SAAtB,CAAT;AAA2CK,UAAAA,SAAS,EAAEL,SAAS,CAACM,eAAV,KAA8BN,SAAS,CAACO;AAA9F,SAAzB;AACH;;AACD,WAAKpB,MAAL,GAAc,KAAd;AACH,KA/BqB,CAAtB;;AAgCA,SAAKF,YAAL,CAAkBG,GAAlB,CAAsBJ,YAAY,CAACwB,WAAb,CAAyBC,CAAC,IAAI;AAChD,UAAI,CAAC,KAAKtB,MAAN,IAAgB,CAACsB,CAAC,CAACC,SAAvB,EAAkC;AAC9B,aAAKvB,MAAL,GAAc,IAAd;AACH;AACJ,KAJqB,CAAtB;AAKH;;AACDwB,EAAAA,oBAAoB,CAACC,GAAD,EAAM;AACtB,QAAI,CAAC,KAAKzB,MAAN,IAAgByB,GAAG,IAAI,CAAvB,IAA4BA,GAAG,GAAG,KAAK1B,cAAL,CAAoBQ,MAA1D,EAAkE;AAC9D,aAAO,KAAKR,cAAL,CAAoB0B,GAApB,CAAP;AACH;;AACD,WAAOC,SAAP;AACH;;AACDC,EAAAA,OAAO,GAAG;AACN,SAAK7B,YAAL,CAAkB6B,OAAlB;AACH;;AAnD2B;AAqDhCjC,kBAAkB,CAACqB,mBAAnB,GAAyC,KAAzC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nexport class OvertypingCapturer {\n    constructor(editor, suggestModel) {\n        this._disposables = new DisposableStore();\n        this._lastOvertyped = [];\n        this._empty = true;\n        this._disposables.add(editor.onWillType(() => {\n            if (!this._empty) {\n                return;\n            }\n            if (!editor.hasModel()) {\n                return;\n            }\n            const selections = editor.getSelections();\n            const selectionsLength = selections.length;\n            // Check if it will overtype any selections\n            let willOvertype = false;\n            for (let i = 0; i < selectionsLength; i++) {\n                if (!selections[i].isEmpty()) {\n                    willOvertype = true;\n                    break;\n                }\n            }\n            if (!willOvertype) {\n                return;\n            }\n            this._lastOvertyped = [];\n            const model = editor.getModel();\n            for (let i = 0; i < selectionsLength; i++) {\n                const selection = selections[i];\n                // Check for overtyping capturer restrictions\n                if (model.getValueLengthInRange(selection) > OvertypingCapturer._maxSelectionLength) {\n                    return;\n                }\n                this._lastOvertyped[i] = { value: model.getValueInRange(selection), multiline: selection.startLineNumber !== selection.endLineNumber };\n            }\n            this._empty = false;\n        }));\n        this._disposables.add(suggestModel.onDidCancel(e => {\n            if (!this._empty && !e.retrigger) {\n                this._empty = true;\n            }\n        }));\n    }\n    getLastOvertypedInfo(idx) {\n        if (!this._empty && idx >= 0 && idx < this._lastOvertyped.length) {\n            return this._lastOvertyped[idx];\n        }\n        return undefined;\n    }\n    dispose() {\n        this._disposables.dispose();\n    }\n}\nOvertypingCapturer._maxSelectionLength = 51200;\n"]},"metadata":{},"sourceType":"module"}