{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { DisposableStore } from '../../../base/common/lifecycle.js';\nimport { IMenuService, isIMenuItem, MenuItemAction, MenuRegistry, SubmenuItemAction } from './actions.js';\nimport { ICommandService } from '../../commands/common/commands.js';\nimport { IContextKeyService } from '../../contextkey/common/contextkey.js';\nlet MenuService = class MenuService {\n  constructor(_commandService) {\n    this._commandService = _commandService; //\n  }\n  /**\n   * Create a new menu for the given menu identifier. A menu sends events when it's entries\n   * have changed (placement, enablement, checked-state). By default it does send events for\n   * sub menu entries. That is more expensive and must be explicitly enabled with the\n   * `emitEventsForSubmenuChanges` flag.\n   */\n\n\n  createMenu(id, contextKeyService, options) {\n    return new Menu(id, Object.assign({\n      emitEventsForSubmenuChanges: false,\n      eventDebounceDelay: 50\n    }, options), this._commandService, contextKeyService, this);\n  }\n\n};\nMenuService = __decorate([__param(0, ICommandService)], MenuService);\nexport { MenuService };\nlet Menu = class Menu {\n  constructor(_id, _options, _commandService, _contextKeyService, _menuService) {\n    this._id = _id;\n    this._options = _options;\n    this._commandService = _commandService;\n    this._contextKeyService = _contextKeyService;\n    this._menuService = _menuService;\n    this._disposables = new DisposableStore();\n    this._menuGroups = [];\n    this._contextKeys = new Set();\n\n    this._build(); // Rebuild this menu whenever the menu registry reports an event for this MenuId.\n    // This usually happen while code and extensions are loaded and affects the over\n    // structure of the menu\n\n\n    const rebuildMenuSoon = new RunOnceScheduler(() => {\n      this._build();\n\n      this._onDidChange.fire(this);\n    }, _options.eventDebounceDelay);\n\n    this._disposables.add(rebuildMenuSoon);\n\n    this._disposables.add(MenuRegistry.onDidChangeMenu(e => {\n      if (e.has(_id)) {\n        rebuildMenuSoon.schedule();\n      }\n    })); // When context keys change we need to check if the menu also has changed. However,\n    // we only do that when someone listens on this menu because (1) context key events are\n    // firing often and (2) menu are often leaked\n\n\n    const contextKeyListener = this._disposables.add(new DisposableStore());\n\n    const startContextKeyListener = () => {\n      const fireChangeSoon = new RunOnceScheduler(() => this._onDidChange.fire(this), _options.eventDebounceDelay);\n      contextKeyListener.add(fireChangeSoon);\n      contextKeyListener.add(_contextKeyService.onDidChangeContext(e => {\n        if (e.affectsSome(this._contextKeys)) {\n          fireChangeSoon.schedule();\n        }\n      }));\n    };\n\n    this._onDidChange = new Emitter({\n      // start/stop context key listener\n      onFirstListenerAdd: startContextKeyListener,\n      onLastListenerRemove: contextKeyListener.clear.bind(contextKeyListener)\n    });\n    this.onDidChange = this._onDidChange.event;\n  }\n\n  dispose() {\n    this._disposables.dispose();\n\n    this._onDidChange.dispose();\n  }\n\n  _build() {\n    // reset\n    this._menuGroups.length = 0;\n\n    this._contextKeys.clear();\n\n    const menuItems = MenuRegistry.getMenuItems(this._id);\n    let group;\n    menuItems.sort(Menu._compareMenuItems);\n\n    for (const item of menuItems) {\n      // group by groupId\n      const groupName = item.group || '';\n\n      if (!group || group[0] !== groupName) {\n        group = [groupName, []];\n\n        this._menuGroups.push(group);\n      }\n\n      group[1].push(item); // keep keys for eventing\n\n      this._collectContextKeys(item);\n    }\n  }\n\n  _collectContextKeys(item) {\n    Menu._fillInKbExprKeys(item.when, this._contextKeys);\n\n    if (isIMenuItem(item)) {\n      // keep precondition keys for event if applicable\n      if (item.command.precondition) {\n        Menu._fillInKbExprKeys(item.command.precondition, this._contextKeys);\n      } // keep toggled keys for event if applicable\n\n\n      if (item.command.toggled) {\n        const toggledExpression = item.command.toggled.condition || item.command.toggled;\n\n        Menu._fillInKbExprKeys(toggledExpression, this._contextKeys);\n      }\n    } else if (this._options.emitEventsForSubmenuChanges) {\n      // recursively collect context keys from submenus so that this\n      // menu fires events when context key changes affect submenus\n      MenuRegistry.getMenuItems(item.submenu).forEach(this._collectContextKeys, this);\n    }\n  }\n\n  getActions(options) {\n    const result = [];\n\n    for (let group of this._menuGroups) {\n      const [id, items] = group;\n      const activeActions = [];\n\n      for (const item of items) {\n        if (this._contextKeyService.contextMatchesRules(item.when)) {\n          const action = isIMenuItem(item) ? new MenuItemAction(item.command, item.alt, options, this._contextKeyService, this._commandService) : new SubmenuItemAction(item, this._menuService, this._contextKeyService, options);\n          activeActions.push(action);\n        }\n      }\n\n      if (activeActions.length > 0) {\n        result.push([id, activeActions]);\n      }\n    }\n\n    return result;\n  }\n\n  static _fillInKbExprKeys(exp, set) {\n    if (exp) {\n      for (let key of exp.keys()) {\n        set.add(key);\n      }\n    }\n  }\n\n  static _compareMenuItems(a, b) {\n    let aGroup = a.group;\n    let bGroup = b.group;\n\n    if (aGroup !== bGroup) {\n      // Falsy groups come last\n      if (!aGroup) {\n        return 1;\n      } else if (!bGroup) {\n        return -1;\n      } // 'navigation' group comes first\n\n\n      if (aGroup === 'navigation') {\n        return -1;\n      } else if (bGroup === 'navigation') {\n        return 1;\n      } // lexical sort for groups\n\n\n      let value = aGroup.localeCompare(bGroup);\n\n      if (value !== 0) {\n        return value;\n      }\n    } // sort on priority - default is 0\n\n\n    let aPrio = a.order || 0;\n    let bPrio = b.order || 0;\n\n    if (aPrio < bPrio) {\n      return -1;\n    } else if (aPrio > bPrio) {\n      return 1;\n    } // sort on titles\n\n\n    return Menu._compareTitles(isIMenuItem(a) ? a.command.title : a.title, isIMenuItem(b) ? b.command.title : b.title);\n  }\n\n  static _compareTitles(a, b) {\n    const aStr = typeof a === 'string' ? a : a.original;\n    const bStr = typeof b === 'string' ? b : b.original;\n    return aStr.localeCompare(bStr);\n  }\n\n};\nMenu = __decorate([__param(2, ICommandService), __param(3, IContextKeyService), __param(4, IMenuService)], Menu);","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/platform/actions/common/menuService.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","RunOnceScheduler","Emitter","DisposableStore","IMenuService","isIMenuItem","MenuItemAction","MenuRegistry","SubmenuItemAction","ICommandService","IContextKeyService","MenuService","constructor","_commandService","createMenu","id","contextKeyService","options","Menu","assign","emitEventsForSubmenuChanges","eventDebounceDelay","_id","_options","_contextKeyService","_menuService","_disposables","_menuGroups","_contextKeys","Set","_build","rebuildMenuSoon","_onDidChange","fire","add","onDidChangeMenu","e","has","schedule","contextKeyListener","startContextKeyListener","fireChangeSoon","onDidChangeContext","affectsSome","onFirstListenerAdd","onLastListenerRemove","clear","bind","onDidChange","event","dispose","menuItems","getMenuItems","group","sort","_compareMenuItems","item","groupName","push","_collectContextKeys","_fillInKbExprKeys","when","command","precondition","toggled","toggledExpression","condition","submenu","forEach","getActions","result","items","activeActions","contextMatchesRules","action","alt","exp","set","keys","a","b","aGroup","bGroup","value","localeCompare","aPrio","order","bPrio","_compareTitles","title","aStr","original","bStr"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { DisposableStore } from '../../../base/common/lifecycle.js';\nimport { IMenuService, isIMenuItem, MenuItemAction, MenuRegistry, SubmenuItemAction } from './actions.js';\nimport { ICommandService } from '../../commands/common/commands.js';\nimport { IContextKeyService } from '../../contextkey/common/contextkey.js';\nlet MenuService = class MenuService {\n    constructor(_commandService) {\n        this._commandService = _commandService;\n        //\n    }\n    /**\n     * Create a new menu for the given menu identifier. A menu sends events when it's entries\n     * have changed (placement, enablement, checked-state). By default it does send events for\n     * sub menu entries. That is more expensive and must be explicitly enabled with the\n     * `emitEventsForSubmenuChanges` flag.\n     */\n    createMenu(id, contextKeyService, options) {\n        return new Menu(id, Object.assign({ emitEventsForSubmenuChanges: false, eventDebounceDelay: 50 }, options), this._commandService, contextKeyService, this);\n    }\n};\nMenuService = __decorate([\n    __param(0, ICommandService)\n], MenuService);\nexport { MenuService };\nlet Menu = class Menu {\n    constructor(_id, _options, _commandService, _contextKeyService, _menuService) {\n        this._id = _id;\n        this._options = _options;\n        this._commandService = _commandService;\n        this._contextKeyService = _contextKeyService;\n        this._menuService = _menuService;\n        this._disposables = new DisposableStore();\n        this._menuGroups = [];\n        this._contextKeys = new Set();\n        this._build();\n        // Rebuild this menu whenever the menu registry reports an event for this MenuId.\n        // This usually happen while code and extensions are loaded and affects the over\n        // structure of the menu\n        const rebuildMenuSoon = new RunOnceScheduler(() => {\n            this._build();\n            this._onDidChange.fire(this);\n        }, _options.eventDebounceDelay);\n        this._disposables.add(rebuildMenuSoon);\n        this._disposables.add(MenuRegistry.onDidChangeMenu(e => {\n            if (e.has(_id)) {\n                rebuildMenuSoon.schedule();\n            }\n        }));\n        // When context keys change we need to check if the menu also has changed. However,\n        // we only do that when someone listens on this menu because (1) context key events are\n        // firing often and (2) menu are often leaked\n        const contextKeyListener = this._disposables.add(new DisposableStore());\n        const startContextKeyListener = () => {\n            const fireChangeSoon = new RunOnceScheduler(() => this._onDidChange.fire(this), _options.eventDebounceDelay);\n            contextKeyListener.add(fireChangeSoon);\n            contextKeyListener.add(_contextKeyService.onDidChangeContext(e => {\n                if (e.affectsSome(this._contextKeys)) {\n                    fireChangeSoon.schedule();\n                }\n            }));\n        };\n        this._onDidChange = new Emitter({\n            // start/stop context key listener\n            onFirstListenerAdd: startContextKeyListener,\n            onLastListenerRemove: contextKeyListener.clear.bind(contextKeyListener)\n        });\n        this.onDidChange = this._onDidChange.event;\n    }\n    dispose() {\n        this._disposables.dispose();\n        this._onDidChange.dispose();\n    }\n    _build() {\n        // reset\n        this._menuGroups.length = 0;\n        this._contextKeys.clear();\n        const menuItems = MenuRegistry.getMenuItems(this._id);\n        let group;\n        menuItems.sort(Menu._compareMenuItems);\n        for (const item of menuItems) {\n            // group by groupId\n            const groupName = item.group || '';\n            if (!group || group[0] !== groupName) {\n                group = [groupName, []];\n                this._menuGroups.push(group);\n            }\n            group[1].push(item);\n            // keep keys for eventing\n            this._collectContextKeys(item);\n        }\n    }\n    _collectContextKeys(item) {\n        Menu._fillInKbExprKeys(item.when, this._contextKeys);\n        if (isIMenuItem(item)) {\n            // keep precondition keys for event if applicable\n            if (item.command.precondition) {\n                Menu._fillInKbExprKeys(item.command.precondition, this._contextKeys);\n            }\n            // keep toggled keys for event if applicable\n            if (item.command.toggled) {\n                const toggledExpression = item.command.toggled.condition || item.command.toggled;\n                Menu._fillInKbExprKeys(toggledExpression, this._contextKeys);\n            }\n        }\n        else if (this._options.emitEventsForSubmenuChanges) {\n            // recursively collect context keys from submenus so that this\n            // menu fires events when context key changes affect submenus\n            MenuRegistry.getMenuItems(item.submenu).forEach(this._collectContextKeys, this);\n        }\n    }\n    getActions(options) {\n        const result = [];\n        for (let group of this._menuGroups) {\n            const [id, items] = group;\n            const activeActions = [];\n            for (const item of items) {\n                if (this._contextKeyService.contextMatchesRules(item.when)) {\n                    const action = isIMenuItem(item)\n                        ? new MenuItemAction(item.command, item.alt, options, this._contextKeyService, this._commandService)\n                        : new SubmenuItemAction(item, this._menuService, this._contextKeyService, options);\n                    activeActions.push(action);\n                }\n            }\n            if (activeActions.length > 0) {\n                result.push([id, activeActions]);\n            }\n        }\n        return result;\n    }\n    static _fillInKbExprKeys(exp, set) {\n        if (exp) {\n            for (let key of exp.keys()) {\n                set.add(key);\n            }\n        }\n    }\n    static _compareMenuItems(a, b) {\n        let aGroup = a.group;\n        let bGroup = b.group;\n        if (aGroup !== bGroup) {\n            // Falsy groups come last\n            if (!aGroup) {\n                return 1;\n            }\n            else if (!bGroup) {\n                return -1;\n            }\n            // 'navigation' group comes first\n            if (aGroup === 'navigation') {\n                return -1;\n            }\n            else if (bGroup === 'navigation') {\n                return 1;\n            }\n            // lexical sort for groups\n            let value = aGroup.localeCompare(bGroup);\n            if (value !== 0) {\n                return value;\n            }\n        }\n        // sort on priority - default is 0\n        let aPrio = a.order || 0;\n        let bPrio = b.order || 0;\n        if (aPrio < bPrio) {\n            return -1;\n        }\n        else if (aPrio > bPrio) {\n            return 1;\n        }\n        // sort on titles\n        return Menu._compareTitles(isIMenuItem(a) ? a.command.title : a.title, isIMenuItem(b) ? b.command.title : b.title);\n    }\n    static _compareTitles(a, b) {\n        const aStr = typeof a === 'string' ? a : a.original;\n        const bStr = typeof b === 'string' ? b : b.original;\n        return aStr.localeCompare(bStr);\n    }\n};\nMenu = __decorate([\n    __param(2, ICommandService),\n    __param(3, IContextKeyService),\n    __param(4, IMenuService)\n], Menu);\n"]},"metadata":{},"sourceType":"module"}