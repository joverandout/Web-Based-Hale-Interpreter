{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './linesDecorations.css';\nimport { DecorationToRender, DedupOverlay } from '../glyphMargin/glyphMargin.js';\nexport class LinesDecorationsOverlay extends DedupOverlay {\n  constructor(context) {\n    super();\n    this._context = context;\n    const options = this._context.configuration.options;\n    const layoutInfo = options.get(131\n    /* layoutInfo */\n    );\n    this._decorationsLeft = layoutInfo.decorationsLeft;\n    this._decorationsWidth = layoutInfo.decorationsWidth;\n    this._renderResult = null;\n\n    this._context.addEventHandler(this);\n  }\n\n  dispose() {\n    this._context.removeEventHandler(this);\n\n    this._renderResult = null;\n    super.dispose();\n  } // --- begin event handlers\n\n\n  onConfigurationChanged(e) {\n    const options = this._context.configuration.options;\n    const layoutInfo = options.get(131\n    /* layoutInfo */\n    );\n    this._decorationsLeft = layoutInfo.decorationsLeft;\n    this._decorationsWidth = layoutInfo.decorationsWidth;\n    return true;\n  }\n\n  onDecorationsChanged(e) {\n    return true;\n  }\n\n  onFlushed(e) {\n    return true;\n  }\n\n  onLinesChanged(e) {\n    return true;\n  }\n\n  onLinesDeleted(e) {\n    return true;\n  }\n\n  onLinesInserted(e) {\n    return true;\n  }\n\n  onScrollChanged(e) {\n    return e.scrollTopChanged;\n  }\n\n  onZonesChanged(e) {\n    return true;\n  } // --- end event handlers\n\n\n  _getDecorations(ctx) {\n    const decorations = ctx.getDecorationsInViewport();\n    const r = [];\n    let rLen = 0;\n\n    for (let i = 0, len = decorations.length; i < len; i++) {\n      const d = decorations[i];\n      const linesDecorationsClassName = d.options.linesDecorationsClassName;\n\n      if (linesDecorationsClassName) {\n        r[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.endLineNumber, linesDecorationsClassName);\n      }\n\n      const firstLineDecorationClassName = d.options.firstLineDecorationClassName;\n\n      if (firstLineDecorationClassName) {\n        r[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.startLineNumber, firstLineDecorationClassName);\n      }\n    }\n\n    return r;\n  }\n\n  prepareRender(ctx) {\n    const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n    const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n\n    const toRender = this._render(visibleStartLineNumber, visibleEndLineNumber, this._getDecorations(ctx));\n\n    const left = this._decorationsLeft.toString();\n\n    const width = this._decorationsWidth.toString();\n\n    const common = '\" style=\"left:' + left + 'px;width:' + width + 'px;\"></div>';\n    const output = [];\n\n    for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n      const lineIndex = lineNumber - visibleStartLineNumber;\n      const classNames = toRender[lineIndex];\n      let lineOutput = '';\n\n      for (let i = 0, len = classNames.length; i < len; i++) {\n        lineOutput += '<div class=\"cldr ' + classNames[i] + common;\n      }\n\n      output[lineIndex] = lineOutput;\n    }\n\n    this._renderResult = output;\n  }\n\n  render(startLineNumber, lineNumber) {\n    if (!this._renderResult) {\n      return '';\n    }\n\n    return this._renderResult[lineNumber - startLineNumber];\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/linesDecorations/linesDecorations.js"],"names":["DecorationToRender","DedupOverlay","LinesDecorationsOverlay","constructor","context","_context","options","configuration","layoutInfo","get","_decorationsLeft","decorationsLeft","_decorationsWidth","decorationsWidth","_renderResult","addEventHandler","dispose","removeEventHandler","onConfigurationChanged","e","onDecorationsChanged","onFlushed","onLinesChanged","onLinesDeleted","onLinesInserted","onScrollChanged","scrollTopChanged","onZonesChanged","_getDecorations","ctx","decorations","getDecorationsInViewport","r","rLen","i","len","length","d","linesDecorationsClassName","range","startLineNumber","endLineNumber","firstLineDecorationClassName","prepareRender","visibleStartLineNumber","visibleRange","visibleEndLineNumber","toRender","_render","left","toString","width","common","output","lineNumber","lineIndex","classNames","lineOutput","render"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './linesDecorations.css';\nimport { DecorationToRender, DedupOverlay } from '../glyphMargin/glyphMargin.js';\nexport class LinesDecorationsOverlay extends DedupOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this._decorationsLeft = layoutInfo.decorationsLeft;\n        this._decorationsWidth = layoutInfo.decorationsWidth;\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this._decorationsLeft = layoutInfo.decorationsLeft;\n        this._decorationsWidth = layoutInfo.decorationsWidth;\n        return true;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    _getDecorations(ctx) {\n        const decorations = ctx.getDecorationsInViewport();\n        const r = [];\n        let rLen = 0;\n        for (let i = 0, len = decorations.length; i < len; i++) {\n            const d = decorations[i];\n            const linesDecorationsClassName = d.options.linesDecorationsClassName;\n            if (linesDecorationsClassName) {\n                r[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.endLineNumber, linesDecorationsClassName);\n            }\n            const firstLineDecorationClassName = d.options.firstLineDecorationClassName;\n            if (firstLineDecorationClassName) {\n                r[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.startLineNumber, firstLineDecorationClassName);\n            }\n        }\n        return r;\n    }\n    prepareRender(ctx) {\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const toRender = this._render(visibleStartLineNumber, visibleEndLineNumber, this._getDecorations(ctx));\n        const left = this._decorationsLeft.toString();\n        const width = this._decorationsWidth.toString();\n        const common = '\" style=\"left:' + left + 'px;width:' + width + 'px;\"></div>';\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            const classNames = toRender[lineIndex];\n            let lineOutput = '';\n            for (let i = 0, len = classNames.length; i < len; i++) {\n                lineOutput += '<div class=\"cldr ' + classNames[i] + common;\n            }\n            output[lineIndex] = lineOutput;\n        }\n        this._renderResult = output;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        return this._renderResult[lineNumber - startLineNumber];\n    }\n}\n"]},"metadata":{},"sourceType":"module"}