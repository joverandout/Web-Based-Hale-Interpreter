{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { KeyCodeUtils, IMMUTABLE_CODE_TO_KEY_CODE } from '../../../base/common/keyCodes.js';\nimport { ChordKeybinding, SimpleKeybinding } from '../../../base/common/keybindings.js';\nimport { BaseResolvedKeybinding } from './baseResolvedKeybinding.js';\nimport { removeElementsAfterNulls } from './resolvedKeybindingItem.js';\n/**\n * Do not instantiate. Use KeybindingService to get a ResolvedKeybinding seeded with information about the current kb layout.\n */\n\nexport class USLayoutResolvedKeybinding extends BaseResolvedKeybinding {\n  constructor(actual, os) {\n    super(os, actual.parts);\n  }\n\n  _keyCodeToUILabel(keyCode) {\n    if (this._os === 2\n    /* Macintosh */\n    ) {\n      switch (keyCode) {\n        case 15\n        /* LeftArrow */\n        :\n          return '←';\n\n        case 16\n        /* UpArrow */\n        :\n          return '↑';\n\n        case 17\n        /* RightArrow */\n        :\n          return '→';\n\n        case 18\n        /* DownArrow */\n        :\n          return '↓';\n      }\n    }\n\n    return KeyCodeUtils.toString(keyCode);\n  }\n\n  _getLabel(keybinding) {\n    if (keybinding.isDuplicateModifierCase()) {\n      return '';\n    }\n\n    return this._keyCodeToUILabel(keybinding.keyCode);\n  }\n\n  _getAriaLabel(keybinding) {\n    if (keybinding.isDuplicateModifierCase()) {\n      return '';\n    }\n\n    return KeyCodeUtils.toString(keybinding.keyCode);\n  }\n\n  _getElectronAccelerator(keybinding) {\n    return KeyCodeUtils.toElectronAccelerator(keybinding.keyCode);\n  }\n\n  _getDispatchPart(keybinding) {\n    return USLayoutResolvedKeybinding.getDispatchStr(keybinding);\n  }\n\n  static getDispatchStr(keybinding) {\n    if (keybinding.isModifierKey()) {\n      return null;\n    }\n\n    let result = '';\n\n    if (keybinding.ctrlKey) {\n      result += 'ctrl+';\n    }\n\n    if (keybinding.shiftKey) {\n      result += 'shift+';\n    }\n\n    if (keybinding.altKey) {\n      result += 'alt+';\n    }\n\n    if (keybinding.metaKey) {\n      result += 'meta+';\n    }\n\n    result += KeyCodeUtils.toString(keybinding.keyCode);\n    return result;\n  }\n\n  _getSingleModifierDispatchPart(keybinding) {\n    if (keybinding.keyCode === 5\n    /* Ctrl */\n    && !keybinding.shiftKey && !keybinding.altKey && !keybinding.metaKey) {\n      return 'ctrl';\n    }\n\n    if (keybinding.keyCode === 4\n    /* Shift */\n    && !keybinding.ctrlKey && !keybinding.altKey && !keybinding.metaKey) {\n      return 'shift';\n    }\n\n    if (keybinding.keyCode === 6\n    /* Alt */\n    && !keybinding.ctrlKey && !keybinding.shiftKey && !keybinding.metaKey) {\n      return 'alt';\n    }\n\n    if (keybinding.keyCode === 57\n    /* Meta */\n    && !keybinding.ctrlKey && !keybinding.shiftKey && !keybinding.altKey) {\n      return 'meta';\n    }\n\n    return null;\n  }\n  /**\n   * *NOTE*: Check return value for `KeyCode.Unknown`.\n   */\n\n\n  static _scanCodeToKeyCode(scanCode) {\n    const immutableKeyCode = IMMUTABLE_CODE_TO_KEY_CODE[scanCode];\n\n    if (immutableKeyCode !== -1\n    /* DependsOnKbLayout */\n    ) {\n      return immutableKeyCode;\n    }\n\n    switch (scanCode) {\n      case 10\n      /* KeyA */\n      :\n        return 31\n        /* KeyA */\n        ;\n\n      case 11\n      /* KeyB */\n      :\n        return 32\n        /* KeyB */\n        ;\n\n      case 12\n      /* KeyC */\n      :\n        return 33\n        /* KeyC */\n        ;\n\n      case 13\n      /* KeyD */\n      :\n        return 34\n        /* KeyD */\n        ;\n\n      case 14\n      /* KeyE */\n      :\n        return 35\n        /* KeyE */\n        ;\n\n      case 15\n      /* KeyF */\n      :\n        return 36\n        /* KeyF */\n        ;\n\n      case 16\n      /* KeyG */\n      :\n        return 37\n        /* KeyG */\n        ;\n\n      case 17\n      /* KeyH */\n      :\n        return 38\n        /* KeyH */\n        ;\n\n      case 18\n      /* KeyI */\n      :\n        return 39\n        /* KeyI */\n        ;\n\n      case 19\n      /* KeyJ */\n      :\n        return 40\n        /* KeyJ */\n        ;\n\n      case 20\n      /* KeyK */\n      :\n        return 41\n        /* KeyK */\n        ;\n\n      case 21\n      /* KeyL */\n      :\n        return 42\n        /* KeyL */\n        ;\n\n      case 22\n      /* KeyM */\n      :\n        return 43\n        /* KeyM */\n        ;\n\n      case 23\n      /* KeyN */\n      :\n        return 44\n        /* KeyN */\n        ;\n\n      case 24\n      /* KeyO */\n      :\n        return 45\n        /* KeyO */\n        ;\n\n      case 25\n      /* KeyP */\n      :\n        return 46\n        /* KeyP */\n        ;\n\n      case 26\n      /* KeyQ */\n      :\n        return 47\n        /* KeyQ */\n        ;\n\n      case 27\n      /* KeyR */\n      :\n        return 48\n        /* KeyR */\n        ;\n\n      case 28\n      /* KeyS */\n      :\n        return 49\n        /* KeyS */\n        ;\n\n      case 29\n      /* KeyT */\n      :\n        return 50\n        /* KeyT */\n        ;\n\n      case 30\n      /* KeyU */\n      :\n        return 51\n        /* KeyU */\n        ;\n\n      case 31\n      /* KeyV */\n      :\n        return 52\n        /* KeyV */\n        ;\n\n      case 32\n      /* KeyW */\n      :\n        return 53\n        /* KeyW */\n        ;\n\n      case 33\n      /* KeyX */\n      :\n        return 54\n        /* KeyX */\n        ;\n\n      case 34\n      /* KeyY */\n      :\n        return 55\n        /* KeyY */\n        ;\n\n      case 35\n      /* KeyZ */\n      :\n        return 56\n        /* KeyZ */\n        ;\n\n      case 36\n      /* Digit1 */\n      :\n        return 22\n        /* Digit1 */\n        ;\n\n      case 37\n      /* Digit2 */\n      :\n        return 23\n        /* Digit2 */\n        ;\n\n      case 38\n      /* Digit3 */\n      :\n        return 24\n        /* Digit3 */\n        ;\n\n      case 39\n      /* Digit4 */\n      :\n        return 25\n        /* Digit4 */\n        ;\n\n      case 40\n      /* Digit5 */\n      :\n        return 26\n        /* Digit5 */\n        ;\n\n      case 41\n      /* Digit6 */\n      :\n        return 27\n        /* Digit6 */\n        ;\n\n      case 42\n      /* Digit7 */\n      :\n        return 28\n        /* Digit7 */\n        ;\n\n      case 43\n      /* Digit8 */\n      :\n        return 29\n        /* Digit8 */\n        ;\n\n      case 44\n      /* Digit9 */\n      :\n        return 30\n        /* Digit9 */\n        ;\n\n      case 45\n      /* Digit0 */\n      :\n        return 21\n        /* Digit0 */\n        ;\n\n      case 51\n      /* Minus */\n      :\n        return 83\n        /* Minus */\n        ;\n\n      case 52\n      /* Equal */\n      :\n        return 81\n        /* Equal */\n        ;\n\n      case 53\n      /* BracketLeft */\n      :\n        return 87\n        /* BracketLeft */\n        ;\n\n      case 54\n      /* BracketRight */\n      :\n        return 89\n        /* BracketRight */\n        ;\n\n      case 55\n      /* Backslash */\n      :\n        return 88\n        /* Backslash */\n        ;\n\n      case 56\n      /* IntlHash */\n      :\n        return 0\n        /* Unknown */\n        ;\n      // missing\n\n      case 57\n      /* Semicolon */\n      :\n        return 80\n        /* Semicolon */\n        ;\n\n      case 58\n      /* Quote */\n      :\n        return 90\n        /* Quote */\n        ;\n\n      case 59\n      /* Backquote */\n      :\n        return 86\n        /* Backquote */\n        ;\n\n      case 60\n      /* Comma */\n      :\n        return 82\n        /* Comma */\n        ;\n\n      case 61\n      /* Period */\n      :\n        return 84\n        /* Period */\n        ;\n\n      case 62\n      /* Slash */\n      :\n        return 85\n        /* Slash */\n        ;\n\n      case 106\n      /* IntlBackslash */\n      :\n        return 92\n        /* IntlBackslash */\n        ;\n    }\n\n    return 0\n    /* Unknown */\n    ;\n  }\n\n  static _resolveSimpleUserBinding(binding) {\n    if (!binding) {\n      return null;\n    }\n\n    if (binding instanceof SimpleKeybinding) {\n      return binding;\n    }\n\n    const keyCode = this._scanCodeToKeyCode(binding.scanCode);\n\n    if (keyCode === 0\n    /* Unknown */\n    ) {\n      return null;\n    }\n\n    return new SimpleKeybinding(binding.ctrlKey, binding.shiftKey, binding.altKey, binding.metaKey, keyCode);\n  }\n\n  static resolveUserBinding(input, os) {\n    const parts = removeElementsAfterNulls(input.map(keybinding => this._resolveSimpleUserBinding(keybinding)));\n\n    if (parts.length > 0) {\n      return [new USLayoutResolvedKeybinding(new ChordKeybinding(parts), os)];\n    }\n\n    return [];\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/platform/keybinding/common/usLayoutResolvedKeybinding.js"],"names":["KeyCodeUtils","IMMUTABLE_CODE_TO_KEY_CODE","ChordKeybinding","SimpleKeybinding","BaseResolvedKeybinding","removeElementsAfterNulls","USLayoutResolvedKeybinding","constructor","actual","os","parts","_keyCodeToUILabel","keyCode","_os","toString","_getLabel","keybinding","isDuplicateModifierCase","_getAriaLabel","_getElectronAccelerator","toElectronAccelerator","_getDispatchPart","getDispatchStr","isModifierKey","result","ctrlKey","shiftKey","altKey","metaKey","_getSingleModifierDispatchPart","_scanCodeToKeyCode","scanCode","immutableKeyCode","_resolveSimpleUserBinding","binding","resolveUserBinding","input","map","length"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { KeyCodeUtils, IMMUTABLE_CODE_TO_KEY_CODE } from '../../../base/common/keyCodes.js';\nimport { ChordKeybinding, SimpleKeybinding } from '../../../base/common/keybindings.js';\nimport { BaseResolvedKeybinding } from './baseResolvedKeybinding.js';\nimport { removeElementsAfterNulls } from './resolvedKeybindingItem.js';\n/**\n * Do not instantiate. Use KeybindingService to get a ResolvedKeybinding seeded with information about the current kb layout.\n */\nexport class USLayoutResolvedKeybinding extends BaseResolvedKeybinding {\n    constructor(actual, os) {\n        super(os, actual.parts);\n    }\n    _keyCodeToUILabel(keyCode) {\n        if (this._os === 2 /* Macintosh */) {\n            switch (keyCode) {\n                case 15 /* LeftArrow */:\n                    return '←';\n                case 16 /* UpArrow */:\n                    return '↑';\n                case 17 /* RightArrow */:\n                    return '→';\n                case 18 /* DownArrow */:\n                    return '↓';\n            }\n        }\n        return KeyCodeUtils.toString(keyCode);\n    }\n    _getLabel(keybinding) {\n        if (keybinding.isDuplicateModifierCase()) {\n            return '';\n        }\n        return this._keyCodeToUILabel(keybinding.keyCode);\n    }\n    _getAriaLabel(keybinding) {\n        if (keybinding.isDuplicateModifierCase()) {\n            return '';\n        }\n        return KeyCodeUtils.toString(keybinding.keyCode);\n    }\n    _getElectronAccelerator(keybinding) {\n        return KeyCodeUtils.toElectronAccelerator(keybinding.keyCode);\n    }\n    _getDispatchPart(keybinding) {\n        return USLayoutResolvedKeybinding.getDispatchStr(keybinding);\n    }\n    static getDispatchStr(keybinding) {\n        if (keybinding.isModifierKey()) {\n            return null;\n        }\n        let result = '';\n        if (keybinding.ctrlKey) {\n            result += 'ctrl+';\n        }\n        if (keybinding.shiftKey) {\n            result += 'shift+';\n        }\n        if (keybinding.altKey) {\n            result += 'alt+';\n        }\n        if (keybinding.metaKey) {\n            result += 'meta+';\n        }\n        result += KeyCodeUtils.toString(keybinding.keyCode);\n        return result;\n    }\n    _getSingleModifierDispatchPart(keybinding) {\n        if (keybinding.keyCode === 5 /* Ctrl */ && !keybinding.shiftKey && !keybinding.altKey && !keybinding.metaKey) {\n            return 'ctrl';\n        }\n        if (keybinding.keyCode === 4 /* Shift */ && !keybinding.ctrlKey && !keybinding.altKey && !keybinding.metaKey) {\n            return 'shift';\n        }\n        if (keybinding.keyCode === 6 /* Alt */ && !keybinding.ctrlKey && !keybinding.shiftKey && !keybinding.metaKey) {\n            return 'alt';\n        }\n        if (keybinding.keyCode === 57 /* Meta */ && !keybinding.ctrlKey && !keybinding.shiftKey && !keybinding.altKey) {\n            return 'meta';\n        }\n        return null;\n    }\n    /**\n     * *NOTE*: Check return value for `KeyCode.Unknown`.\n     */\n    static _scanCodeToKeyCode(scanCode) {\n        const immutableKeyCode = IMMUTABLE_CODE_TO_KEY_CODE[scanCode];\n        if (immutableKeyCode !== -1 /* DependsOnKbLayout */) {\n            return immutableKeyCode;\n        }\n        switch (scanCode) {\n            case 10 /* KeyA */: return 31 /* KeyA */;\n            case 11 /* KeyB */: return 32 /* KeyB */;\n            case 12 /* KeyC */: return 33 /* KeyC */;\n            case 13 /* KeyD */: return 34 /* KeyD */;\n            case 14 /* KeyE */: return 35 /* KeyE */;\n            case 15 /* KeyF */: return 36 /* KeyF */;\n            case 16 /* KeyG */: return 37 /* KeyG */;\n            case 17 /* KeyH */: return 38 /* KeyH */;\n            case 18 /* KeyI */: return 39 /* KeyI */;\n            case 19 /* KeyJ */: return 40 /* KeyJ */;\n            case 20 /* KeyK */: return 41 /* KeyK */;\n            case 21 /* KeyL */: return 42 /* KeyL */;\n            case 22 /* KeyM */: return 43 /* KeyM */;\n            case 23 /* KeyN */: return 44 /* KeyN */;\n            case 24 /* KeyO */: return 45 /* KeyO */;\n            case 25 /* KeyP */: return 46 /* KeyP */;\n            case 26 /* KeyQ */: return 47 /* KeyQ */;\n            case 27 /* KeyR */: return 48 /* KeyR */;\n            case 28 /* KeyS */: return 49 /* KeyS */;\n            case 29 /* KeyT */: return 50 /* KeyT */;\n            case 30 /* KeyU */: return 51 /* KeyU */;\n            case 31 /* KeyV */: return 52 /* KeyV */;\n            case 32 /* KeyW */: return 53 /* KeyW */;\n            case 33 /* KeyX */: return 54 /* KeyX */;\n            case 34 /* KeyY */: return 55 /* KeyY */;\n            case 35 /* KeyZ */: return 56 /* KeyZ */;\n            case 36 /* Digit1 */: return 22 /* Digit1 */;\n            case 37 /* Digit2 */: return 23 /* Digit2 */;\n            case 38 /* Digit3 */: return 24 /* Digit3 */;\n            case 39 /* Digit4 */: return 25 /* Digit4 */;\n            case 40 /* Digit5 */: return 26 /* Digit5 */;\n            case 41 /* Digit6 */: return 27 /* Digit6 */;\n            case 42 /* Digit7 */: return 28 /* Digit7 */;\n            case 43 /* Digit8 */: return 29 /* Digit8 */;\n            case 44 /* Digit9 */: return 30 /* Digit9 */;\n            case 45 /* Digit0 */: return 21 /* Digit0 */;\n            case 51 /* Minus */: return 83 /* Minus */;\n            case 52 /* Equal */: return 81 /* Equal */;\n            case 53 /* BracketLeft */: return 87 /* BracketLeft */;\n            case 54 /* BracketRight */: return 89 /* BracketRight */;\n            case 55 /* Backslash */: return 88 /* Backslash */;\n            case 56 /* IntlHash */: return 0 /* Unknown */; // missing\n            case 57 /* Semicolon */: return 80 /* Semicolon */;\n            case 58 /* Quote */: return 90 /* Quote */;\n            case 59 /* Backquote */: return 86 /* Backquote */;\n            case 60 /* Comma */: return 82 /* Comma */;\n            case 61 /* Period */: return 84 /* Period */;\n            case 62 /* Slash */: return 85 /* Slash */;\n            case 106 /* IntlBackslash */: return 92 /* IntlBackslash */;\n        }\n        return 0 /* Unknown */;\n    }\n    static _resolveSimpleUserBinding(binding) {\n        if (!binding) {\n            return null;\n        }\n        if (binding instanceof SimpleKeybinding) {\n            return binding;\n        }\n        const keyCode = this._scanCodeToKeyCode(binding.scanCode);\n        if (keyCode === 0 /* Unknown */) {\n            return null;\n        }\n        return new SimpleKeybinding(binding.ctrlKey, binding.shiftKey, binding.altKey, binding.metaKey, keyCode);\n    }\n    static resolveUserBinding(input, os) {\n        const parts = removeElementsAfterNulls(input.map(keybinding => this._resolveSimpleUserBinding(keybinding)));\n        if (parts.length > 0) {\n            return [new USLayoutResolvedKeybinding(new ChordKeybinding(parts), os)];\n        }\n        return [];\n    }\n}\n"]},"metadata":{},"sourceType":"module"}