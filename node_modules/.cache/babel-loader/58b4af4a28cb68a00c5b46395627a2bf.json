{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { hasDriveLetter, isRootOrDriveLetter } from './extpath.js';\nimport { Schemas } from './network.js';\nimport { isWindows } from './platform.js';\nimport { basename } from './resources.js';\nimport { URI } from './uri.js';\nexport function getBaseLabel(resource) {\n  if (!resource) {\n    return undefined;\n  }\n\n  if (typeof resource === 'string') {\n    resource = URI.file(resource);\n  }\n\n  const base = basename(resource) || (resource.scheme === Schemas.file ? resource.fsPath : resource.path)\n  /* can be empty string if '/' is passed in */\n  ; // convert c: => C:\n\n  if (isWindows && isRootOrDriveLetter(base)) {\n    return normalizeDriveLetter(base);\n  }\n\n  return base;\n}\nexport function normalizeDriveLetter(path, continueAsWindows) {\n  if (hasDriveLetter(path, continueAsWindows)) {\n    return path.charAt(0).toUpperCase() + path.slice(1);\n  }\n\n  return path;\n}\nlet normalizedUserHomeCached = Object.create(null);","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/base/common/labels.js"],"names":["hasDriveLetter","isRootOrDriveLetter","Schemas","isWindows","basename","URI","getBaseLabel","resource","undefined","file","base","scheme","fsPath","path","normalizeDriveLetter","continueAsWindows","charAt","toUpperCase","slice","normalizedUserHomeCached","Object","create"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,cAAT,EAAyBC,mBAAzB,QAAoD,cAApD;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,SAAT,QAA0B,eAA1B;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,GAAT,QAAoB,UAApB;AACA,OAAO,SAASC,YAAT,CAAsBC,QAAtB,EAAgC;AACnC,MAAI,CAACA,QAAL,EAAe;AACX,WAAOC,SAAP;AACH;;AACD,MAAI,OAAOD,QAAP,KAAoB,QAAxB,EAAkC;AAC9BA,IAAAA,QAAQ,GAAGF,GAAG,CAACI,IAAJ,CAASF,QAAT,CAAX;AACH;;AACD,QAAMG,IAAI,GAAGN,QAAQ,CAACG,QAAD,CAAR,KAAuBA,QAAQ,CAACI,MAAT,KAAoBT,OAAO,CAACO,IAA5B,GAAmCF,QAAQ,CAACK,MAA5C,GAAqDL,QAAQ,CAACM,IAArF;AAA2F;AAAxG,GAPmC,CAQnC;;AACA,MAAIV,SAAS,IAAIF,mBAAmB,CAACS,IAAD,CAApC,EAA4C;AACxC,WAAOI,oBAAoB,CAACJ,IAAD,CAA3B;AACH;;AACD,SAAOA,IAAP;AACH;AACD,OAAO,SAASI,oBAAT,CAA8BD,IAA9B,EAAoCE,iBAApC,EAAuD;AAC1D,MAAIf,cAAc,CAACa,IAAD,EAAOE,iBAAP,CAAlB,EAA6C;AACzC,WAAOF,IAAI,CAACG,MAAL,CAAY,CAAZ,EAAeC,WAAf,KAA+BJ,IAAI,CAACK,KAAL,CAAW,CAAX,CAAtC;AACH;;AACD,SAAOL,IAAP;AACH;AACD,IAAIM,wBAAwB,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAA/B","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { hasDriveLetter, isRootOrDriveLetter } from './extpath.js';\nimport { Schemas } from './network.js';\nimport { isWindows } from './platform.js';\nimport { basename } from './resources.js';\nimport { URI } from './uri.js';\nexport function getBaseLabel(resource) {\n    if (!resource) {\n        return undefined;\n    }\n    if (typeof resource === 'string') {\n        resource = URI.file(resource);\n    }\n    const base = basename(resource) || (resource.scheme === Schemas.file ? resource.fsPath : resource.path) /* can be empty string if '/' is passed in */;\n    // convert c: => C:\n    if (isWindows && isRootOrDriveLetter(base)) {\n        return normalizeDriveLetter(base);\n    }\n    return base;\n}\nexport function normalizeDriveLetter(path, continueAsWindows) {\n    if (hasDriveLetter(path, continueAsWindows)) {\n        return path.charAt(0).toUpperCase() + path.slice(1);\n    }\n    return path;\n}\nlet normalizedUserHomeCached = Object.create(null);\n"]},"metadata":{},"sourceType":"module"}