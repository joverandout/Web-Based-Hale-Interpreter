{"ast":null,"code":"/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n// src/basic-languages/protobuf/protobuf.ts\nvar namedLiterals = [\"true\", \"false\"];\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"], [\"<\", \">\"]],\n  surroundingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: \"<\",\n    close: \">\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }],\n  autoClosingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: \"<\",\n    close: \">\"\n  }, {\n    open: '\"',\n    close: '\"',\n    notIn: [\"string\"]\n  }, {\n    open: \"'\",\n    close: \"'\",\n    notIn: [\"string\"]\n  }],\n  autoCloseBefore: \".,=}])>' \\n\t\",\n  indentationRules: {\n    increaseIndentPattern: new RegExp(\"^((?!\\\\/\\\\/).)*(\\\\{[^}\\\"'`]*|\\\\([^)\\\"'`]*|\\\\[[^\\\\]\\\"'`]*)$\"),\n    decreaseIndentPattern: new RegExp(\"^((?!.*?\\\\/\\\\*).*\\\\*/)?\\\\s*[\\\\}\\\\]].*$\")\n  }\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".proto\",\n  brackets: [{\n    open: \"{\",\n    close: \"}\",\n    token: \"delimiter.curly\"\n  }, {\n    open: \"[\",\n    close: \"]\",\n    token: \"delimiter.square\"\n  }, {\n    open: \"(\",\n    close: \")\",\n    token: \"delimiter.parenthesis\"\n  }, {\n    open: \"<\",\n    close: \">\",\n    token: \"delimiter.angle\"\n  }],\n  symbols: /[=><!~?:&|+\\-*/^%]+/,\n  keywords: [\"syntax\", \"import\", \"weak\", \"public\", \"package\", \"option\", \"repeated\", \"oneof\", \"map\", \"reserved\", \"to\", \"max\", \"enum\", \"message\", \"service\", \"rpc\", \"stream\", \"returns\", \"package\", \"optional\", \"true\", \"false\"],\n  builtinTypes: [\"double\", \"float\", \"int32\", \"int64\", \"uint32\", \"uint64\", \"sint32\", \"sint64\", \"fixed32\", \"fixed64\", \"sfixed32\", \"sfixed64\", \"bool\", \"string\", \"bytes\"],\n  operators: [\"=\", \"+\", \"-\"],\n  namedLiterals,\n  escapes: `\\\\\\\\(u{[0-9A-Fa-f]+}|n|r|t|\\\\\\\\|'|\\\\\\${)`,\n  identifier: /[a-zA-Z]\\w*/,\n  fullIdentifier: /@identifier(?:\\s*\\.\\s*@identifier)*/,\n  optionName: /(?:@identifier|\\(\\s*@fullIdentifier\\s*\\))(?:\\s*\\.\\s*@identifier)*/,\n  messageName: /@identifier/,\n  enumName: /@identifier/,\n  messageType: /\\.?\\s*(?:@identifier\\s*\\.\\s*)*@messageName/,\n  enumType: /\\.?\\s*(?:@identifier\\s*\\.\\s*)*@enumName/,\n  floatLit: /[0-9]+\\s*\\.\\s*[0-9]*(?:@exponent)?|[0-9]+@exponent|\\.[0-9]+(?:@exponent)?/,\n  exponent: /[eE]\\s*[+-]?\\s*[0-9]+/,\n  boolLit: /true\\b|false\\b/,\n  decimalLit: /[1-9][0-9]*/,\n  octalLit: /0[0-7]*/,\n  hexLit: /0[xX][0-9a-fA-F]+/,\n  type: /double|float|int32|int64|uint32|uint64|sint32|sint64|fixed32|fixed64|sfixed32|sfixed64|bool|string|bytes|@messageType|@enumType/,\n  keyType: /int32|int64|uint32|uint64|sint32|sint64|fixed32|fixed64|sfixed32|sfixed64|bool|string/,\n  tokenizer: {\n    root: [{\n      include: \"@whitespace\"\n    }, [/syntax/, \"keyword\"], [/=/, \"operators\"], [/;/, \"delimiter\"], [/(\")(proto3)(\")/, [\"string.quote\", \"string\", {\n      token: \"string.quote\",\n      switchTo: \"@topLevel.proto3\"\n    }]], [/(\")(proto2)(\")/, [\"string.quote\", \"string\", {\n      token: \"string.quote\",\n      switchTo: \"@topLevel.proto2\"\n    }]], [/.*?/, {\n      token: \"\",\n      switchTo: \"@topLevel.proto2\"\n    }]],\n    topLevel: [{\n      include: \"@whitespace\"\n    }, {\n      include: \"@constant\"\n    }, [/=/, \"operators\"], [/[;.]/, \"delimiter\"], [/@fullIdentifier/, {\n      cases: {\n        option: {\n          token: \"keyword\",\n          next: \"@option.$S2\"\n        },\n        enum: {\n          token: \"keyword\",\n          next: \"@enumDecl.$S2\"\n        },\n        message: {\n          token: \"keyword\",\n          next: \"@messageDecl.$S2\"\n        },\n        service: {\n          token: \"keyword\",\n          next: \"@serviceDecl.$S2\"\n        },\n        extend: {\n          cases: {\n            \"$S2==proto2\": {\n              token: \"keyword\",\n              next: \"@extendDecl.$S2\"\n            }\n          }\n        },\n        \"@keywords\": \"keyword\",\n        \"@default\": \"identifier\"\n      }\n    }]],\n    enumDecl: [{\n      include: \"@whitespace\"\n    }, [/@identifier/, \"type.identifier\"], [/{/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      switchTo: \"@enumBody.$S2\"\n    }]],\n    enumBody: [{\n      include: \"@whitespace\"\n    }, {\n      include: \"@constant\"\n    }, [/=/, \"operators\"], [/;/, \"delimiter\"], [/option\\b/, \"keyword\", \"@option.$S2\"], [/@identifier/, \"identifier\"], [/\\[/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      next: \"@options.$S2\"\n    }], [/}/, {\n      token: \"@brackets\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    messageDecl: [{\n      include: \"@whitespace\"\n    }, [/@identifier/, \"type.identifier\"], [/{/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      switchTo: \"@messageBody.$S2\"\n    }]],\n    messageBody: [{\n      include: \"@whitespace\"\n    }, {\n      include: \"@constant\"\n    }, [/=/, \"operators\"], [/;/, \"delimiter\"], [\"(map)(s*)(<)\", [\"keyword\", \"white\", {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      next: \"@map.$S2\"\n    }]], [/@identifier/, {\n      cases: {\n        option: {\n          token: \"keyword\",\n          next: \"@option.$S2\"\n        },\n        enum: {\n          token: \"keyword\",\n          next: \"@enumDecl.$S2\"\n        },\n        message: {\n          token: \"keyword\",\n          next: \"@messageDecl.$S2\"\n        },\n        oneof: {\n          token: \"keyword\",\n          next: \"@oneofDecl.$S2\"\n        },\n        extensions: {\n          cases: {\n            \"$S2==proto2\": {\n              token: \"keyword\",\n              next: \"@reserved.$S2\"\n            }\n          }\n        },\n        reserved: {\n          token: \"keyword\",\n          next: \"@reserved.$S2\"\n        },\n        \"(?:repeated|optional)\": {\n          token: \"keyword\",\n          next: \"@field.$S2\"\n        },\n        required: {\n          cases: {\n            \"$S2==proto2\": {\n              token: \"keyword\",\n              next: \"@field.$S2\"\n            }\n          }\n        },\n        \"$S2==proto3\": {\n          token: \"@rematch\",\n          next: \"@field.$S2\"\n        }\n      }\n    }], [/\\[/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      next: \"@options.$S2\"\n    }], [/}/, {\n      token: \"@brackets\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    extendDecl: [{\n      include: \"@whitespace\"\n    }, [/@identifier/, \"type.identifier\"], [/{/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      switchTo: \"@extendBody.$S2\"\n    }]],\n    extendBody: [{\n      include: \"@whitespace\"\n    }, {\n      include: \"@constant\"\n    }, [/;/, \"delimiter\"], [/(?:repeated|optional|required)/, \"keyword\", \"@field.$S2\"], [/\\[/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      next: \"@options.$S2\"\n    }], [/}/, {\n      token: \"@brackets\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    options: [{\n      include: \"@whitespace\"\n    }, {\n      include: \"@constant\"\n    }, [/;/, \"delimiter\"], [/@optionName/, \"annotation\"], [/[()]/, \"annotation.brackets\"], [/=/, \"operator\"], [/\\]/, {\n      token: \"@brackets\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    option: [{\n      include: \"@whitespace\"\n    }, [/@optionName/, \"annotation\"], [/[()]/, \"annotation.brackets\"], [/=/, \"operator\", \"@pop\"]],\n    oneofDecl: [{\n      include: \"@whitespace\"\n    }, [/@identifier/, \"identifier\"], [/{/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      switchTo: \"@oneofBody.$S2\"\n    }]],\n    oneofBody: [{\n      include: \"@whitespace\"\n    }, {\n      include: \"@constant\"\n    }, [/;/, \"delimiter\"], [/(@identifier)(\\s*)(=)/, [\"identifier\", \"white\", \"delimiter\"]], [/@fullIdentifier|\\./, {\n      cases: {\n        \"@builtinTypes\": \"keyword\",\n        \"@default\": \"type.identifier\"\n      }\n    }], [/\\[/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      next: \"@options.$S2\"\n    }], [/}/, {\n      token: \"@brackets\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    reserved: [{\n      include: \"@whitespace\"\n    }, [/,/, \"delimiter\"], [/;/, \"delimiter\", \"@pop\"], {\n      include: \"@constant\"\n    }, [/to\\b|max\\b/, \"keyword\"]],\n    map: [{\n      include: \"@whitespace\"\n    }, [/@fullIdentifier|\\./, {\n      cases: {\n        \"@builtinTypes\": \"keyword\",\n        \"@default\": \"type.identifier\"\n      }\n    }], [/,/, \"delimiter\"], [/>/, {\n      token: \"@brackets\",\n      bracket: \"@close\",\n      switchTo: \"identifier\"\n    }]],\n    field: [{\n      include: \"@whitespace\"\n    }, [\"group\", {\n      cases: {\n        \"$S2==proto2\": {\n          token: \"keyword\",\n          switchTo: \"@groupDecl.$S2\"\n        }\n      }\n    }], [/(@identifier)(\\s*)(=)/, [\"identifier\", \"white\", {\n      token: \"delimiter\",\n      next: \"@pop\"\n    }]], [/@fullIdentifier|\\./, {\n      cases: {\n        \"@builtinTypes\": \"keyword\",\n        \"@default\": \"type.identifier\"\n      }\n    }]],\n    groupDecl: [{\n      include: \"@whitespace\"\n    }, [/@identifier/, \"identifier\"], [\"=\", \"operator\"], [/{/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      switchTo: \"@messageBody.$S2\"\n    }], {\n      include: \"@constant\"\n    }],\n    type: [{\n      include: \"@whitespace\"\n    }, [/@identifier/, \"type.identifier\", \"@pop\"], [/./, \"delimiter\"]],\n    identifier: [{\n      include: \"@whitespace\"\n    }, [/@identifier/, \"identifier\", \"@pop\"]],\n    serviceDecl: [{\n      include: \"@whitespace\"\n    }, [/@identifier/, \"identifier\"], [/{/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      switchTo: \"@serviceBody.$S2\"\n    }]],\n    serviceBody: [{\n      include: \"@whitespace\"\n    }, {\n      include: \"@constant\"\n    }, [/;/, \"delimiter\"], [/option\\b/, \"keyword\", \"@option.$S2\"], [/rpc\\b/, \"keyword\", \"@rpc.$S2\"], [/\\[/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      next: \"@options.$S2\"\n    }], [/}/, {\n      token: \"@brackets\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    rpc: [{\n      include: \"@whitespace\"\n    }, [/@identifier/, \"identifier\"], [/\\(/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      switchTo: \"@request.$S2\"\n    }], [/{/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      next: \"@methodOptions.$S2\"\n    }], [/;/, \"delimiter\", \"@pop\"]],\n    request: [{\n      include: \"@whitespace\"\n    }, [/@messageType/, {\n      cases: {\n        stream: {\n          token: \"keyword\",\n          next: \"@type.$S2\"\n        },\n        \"@default\": \"type.identifier\"\n      }\n    }], [/\\)/, {\n      token: \"@brackets\",\n      bracket: \"@close\",\n      switchTo: \"@returns.$S2\"\n    }]],\n    returns: [{\n      include: \"@whitespace\"\n    }, [/returns\\b/, \"keyword\"], [/\\(/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      switchTo: \"@response.$S2\"\n    }]],\n    response: [{\n      include: \"@whitespace\"\n    }, [/@messageType/, {\n      cases: {\n        stream: {\n          token: \"keyword\",\n          next: \"@type.$S2\"\n        },\n        \"@default\": \"type.identifier\"\n      }\n    }], [/\\)/, {\n      token: \"@brackets\",\n      bracket: \"@close\",\n      switchTo: \"@rpc.$S2\"\n    }]],\n    methodOptions: [{\n      include: \"@whitespace\"\n    }, {\n      include: \"@constant\"\n    }, [/;/, \"delimiter\"], [\"option\", \"keyword\"], [/@optionName/, \"annotation\"], [/[()]/, \"annotation.brackets\"], [/=/, \"operator\"], [/}/, {\n      token: \"@brackets\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    comment: [[/[^\\/*]+/, \"comment\"], [/\\/\\*/, \"comment\", \"@push\"], [\"\\\\*/\", \"comment\", \"@pop\"], [/[\\/*]/, \"comment\"]],\n    string: [[/[^\\\\\"]+/, \"string\"], [/@escapes/, \"string.escape\"], [/\\\\./, \"string.escape.invalid\"], [/\"/, {\n      token: \"string.quote\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    stringSingle: [[/[^\\\\']+/, \"string\"], [/@escapes/, \"string.escape\"], [/\\\\./, \"string.escape.invalid\"], [/'/, {\n      token: \"string.quote\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    constant: [[\"@boolLit\", \"keyword.constant\"], [\"@hexLit\", \"number.hex\"], [\"@octalLit\", \"number.octal\"], [\"@decimalLit\", \"number\"], [\"@floatLit\", \"number.float\"], [/(\"([^\"\\\\]|\\\\.)*|'([^'\\\\]|\\\\.)*)$/, \"string.invalid\"], [/\"/, {\n      token: \"string.quote\",\n      bracket: \"@open\",\n      next: \"@string\"\n    }], [/'/, {\n      token: \"string.quote\",\n      bracket: \"@open\",\n      next: \"@stringSingle\"\n    }], [/{/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      next: \"@prototext\"\n    }], [/identifier/, \"identifier\"]],\n    whitespace: [[/[ \\t\\r\\n]+/, \"white\"], [/\\/\\*/, \"comment\", \"@comment\"], [/\\/\\/.*$/, \"comment\"]],\n    prototext: [{\n      include: \"@whitespace\"\n    }, {\n      include: \"@constant\"\n    }, [/@identifier/, \"identifier\"], [/[:;]/, \"delimiter\"], [/}/, {\n      token: \"@brackets\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]]\n  }\n};\nexport { conf, language };","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/basic-languages/protobuf/protobuf.js"],"names":["namedLiterals","conf","comments","lineComment","blockComment","brackets","surroundingPairs","open","close","autoClosingPairs","notIn","autoCloseBefore","indentationRules","increaseIndentPattern","RegExp","decreaseIndentPattern","language","defaultToken","tokenPostfix","token","symbols","keywords","builtinTypes","operators","escapes","identifier","fullIdentifier","optionName","messageName","enumName","messageType","enumType","floatLit","exponent","boolLit","decimalLit","octalLit","hexLit","type","keyType","tokenizer","root","include","switchTo","topLevel","cases","option","next","enum","message","service","extend","enumDecl","bracket","enumBody","messageDecl","messageBody","oneof","extensions","reserved","required","extendDecl","extendBody","options","oneofDecl","oneofBody","map","field","groupDecl","serviceDecl","serviceBody","rpc","request","stream","returns","response","methodOptions","comment","string","stringSingle","constant","whitespace","prototext"],"mappings":"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","sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/protobuf/protobuf.ts\nvar namedLiterals = [\"true\", \"false\"];\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"],\n    [\"<\", \">\"]\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"<\", close: \">\" },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" }\n  ],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"<\", close: \">\" },\n    { open: '\"', close: '\"', notIn: [\"string\"] },\n    { open: \"'\", close: \"'\", notIn: [\"string\"] }\n  ],\n  autoCloseBefore: \".,=}])>' \\n\t\",\n  indentationRules: {\n    increaseIndentPattern: new RegExp(\"^((?!\\\\/\\\\/).)*(\\\\{[^}\\\"'`]*|\\\\([^)\\\"'`]*|\\\\[[^\\\\]\\\"'`]*)$\"),\n    decreaseIndentPattern: new RegExp(\"^((?!.*?\\\\/\\\\*).*\\\\*/)?\\\\s*[\\\\}\\\\]].*$\")\n  }\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".proto\",\n  brackets: [\n    { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\n    { open: \"[\", close: \"]\", token: \"delimiter.square\" },\n    { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"<\", close: \">\", token: \"delimiter.angle\" }\n  ],\n  symbols: /[=><!~?:&|+\\-*/^%]+/,\n  keywords: [\n    \"syntax\",\n    \"import\",\n    \"weak\",\n    \"public\",\n    \"package\",\n    \"option\",\n    \"repeated\",\n    \"oneof\",\n    \"map\",\n    \"reserved\",\n    \"to\",\n    \"max\",\n    \"enum\",\n    \"message\",\n    \"service\",\n    \"rpc\",\n    \"stream\",\n    \"returns\",\n    \"package\",\n    \"optional\",\n    \"true\",\n    \"false\"\n  ],\n  builtinTypes: [\n    \"double\",\n    \"float\",\n    \"int32\",\n    \"int64\",\n    \"uint32\",\n    \"uint64\",\n    \"sint32\",\n    \"sint64\",\n    \"fixed32\",\n    \"fixed64\",\n    \"sfixed32\",\n    \"sfixed64\",\n    \"bool\",\n    \"string\",\n    \"bytes\"\n  ],\n  operators: [\"=\", \"+\", \"-\"],\n  namedLiterals,\n  escapes: `\\\\\\\\(u{[0-9A-Fa-f]+}|n|r|t|\\\\\\\\|'|\\\\\\${)`,\n  identifier: /[a-zA-Z]\\w*/,\n  fullIdentifier: /@identifier(?:\\s*\\.\\s*@identifier)*/,\n  optionName: /(?:@identifier|\\(\\s*@fullIdentifier\\s*\\))(?:\\s*\\.\\s*@identifier)*/,\n  messageName: /@identifier/,\n  enumName: /@identifier/,\n  messageType: /\\.?\\s*(?:@identifier\\s*\\.\\s*)*@messageName/,\n  enumType: /\\.?\\s*(?:@identifier\\s*\\.\\s*)*@enumName/,\n  floatLit: /[0-9]+\\s*\\.\\s*[0-9]*(?:@exponent)?|[0-9]+@exponent|\\.[0-9]+(?:@exponent)?/,\n  exponent: /[eE]\\s*[+-]?\\s*[0-9]+/,\n  boolLit: /true\\b|false\\b/,\n  decimalLit: /[1-9][0-9]*/,\n  octalLit: /0[0-7]*/,\n  hexLit: /0[xX][0-9a-fA-F]+/,\n  type: /double|float|int32|int64|uint32|uint64|sint32|sint64|fixed32|fixed64|sfixed32|sfixed64|bool|string|bytes|@messageType|@enumType/,\n  keyType: /int32|int64|uint32|uint64|sint32|sint64|fixed32|fixed64|sfixed32|sfixed64|bool|string/,\n  tokenizer: {\n    root: [\n      { include: \"@whitespace\" },\n      [/syntax/, \"keyword\"],\n      [/=/, \"operators\"],\n      [/;/, \"delimiter\"],\n      [\n        /(\")(proto3)(\")/,\n        [\"string.quote\", \"string\", { token: \"string.quote\", switchTo: \"@topLevel.proto3\" }]\n      ],\n      [\n        /(\")(proto2)(\")/,\n        [\"string.quote\", \"string\", { token: \"string.quote\", switchTo: \"@topLevel.proto2\" }]\n      ],\n      [\n        /.*?/,\n        { token: \"\", switchTo: \"@topLevel.proto2\" }\n      ]\n    ],\n    topLevel: [\n      { include: \"@whitespace\" },\n      { include: \"@constant\" },\n      [/=/, \"operators\"],\n      [/[;.]/, \"delimiter\"],\n      [\n        /@fullIdentifier/,\n        {\n          cases: {\n            option: { token: \"keyword\", next: \"@option.$S2\" },\n            enum: { token: \"keyword\", next: \"@enumDecl.$S2\" },\n            message: { token: \"keyword\", next: \"@messageDecl.$S2\" },\n            service: { token: \"keyword\", next: \"@serviceDecl.$S2\" },\n            extend: {\n              cases: {\n                \"$S2==proto2\": { token: \"keyword\", next: \"@extendDecl.$S2\" }\n              }\n            },\n            \"@keywords\": \"keyword\",\n            \"@default\": \"identifier\"\n          }\n        }\n      ]\n    ],\n    enumDecl: [\n      { include: \"@whitespace\" },\n      [/@identifier/, \"type.identifier\"],\n      [/{/, { token: \"@brackets\", bracket: \"@open\", switchTo: \"@enumBody.$S2\" }]\n    ],\n    enumBody: [\n      { include: \"@whitespace\" },\n      { include: \"@constant\" },\n      [/=/, \"operators\"],\n      [/;/, \"delimiter\"],\n      [/option\\b/, \"keyword\", \"@option.$S2\"],\n      [/@identifier/, \"identifier\"],\n      [/\\[/, { token: \"@brackets\", bracket: \"@open\", next: \"@options.$S2\" }],\n      [/}/, { token: \"@brackets\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    messageDecl: [\n      { include: \"@whitespace\" },\n      [/@identifier/, \"type.identifier\"],\n      [/{/, { token: \"@brackets\", bracket: \"@open\", switchTo: \"@messageBody.$S2\" }]\n    ],\n    messageBody: [\n      { include: \"@whitespace\" },\n      { include: \"@constant\" },\n      [/=/, \"operators\"],\n      [/;/, \"delimiter\"],\n      [\n        \"(map)(s*)(<)\",\n        [\"keyword\", \"white\", { token: \"@brackets\", bracket: \"@open\", next: \"@map.$S2\" }]\n      ],\n      [\n        /@identifier/,\n        {\n          cases: {\n            option: { token: \"keyword\", next: \"@option.$S2\" },\n            enum: { token: \"keyword\", next: \"@enumDecl.$S2\" },\n            message: { token: \"keyword\", next: \"@messageDecl.$S2\" },\n            oneof: { token: \"keyword\", next: \"@oneofDecl.$S2\" },\n            extensions: {\n              cases: {\n                \"$S2==proto2\": { token: \"keyword\", next: \"@reserved.$S2\" }\n              }\n            },\n            reserved: { token: \"keyword\", next: \"@reserved.$S2\" },\n            \"(?:repeated|optional)\": { token: \"keyword\", next: \"@field.$S2\" },\n            required: {\n              cases: {\n                \"$S2==proto2\": { token: \"keyword\", next: \"@field.$S2\" }\n              }\n            },\n            \"$S2==proto3\": { token: \"@rematch\", next: \"@field.$S2\" }\n          }\n        }\n      ],\n      [/\\[/, { token: \"@brackets\", bracket: \"@open\", next: \"@options.$S2\" }],\n      [/}/, { token: \"@brackets\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    extendDecl: [\n      { include: \"@whitespace\" },\n      [/@identifier/, \"type.identifier\"],\n      [/{/, { token: \"@brackets\", bracket: \"@open\", switchTo: \"@extendBody.$S2\" }]\n    ],\n    extendBody: [\n      { include: \"@whitespace\" },\n      { include: \"@constant\" },\n      [/;/, \"delimiter\"],\n      [/(?:repeated|optional|required)/, \"keyword\", \"@field.$S2\"],\n      [/\\[/, { token: \"@brackets\", bracket: \"@open\", next: \"@options.$S2\" }],\n      [/}/, { token: \"@brackets\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    options: [\n      { include: \"@whitespace\" },\n      { include: \"@constant\" },\n      [/;/, \"delimiter\"],\n      [/@optionName/, \"annotation\"],\n      [/[()]/, \"annotation.brackets\"],\n      [/=/, \"operator\"],\n      [/\\]/, { token: \"@brackets\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    option: [\n      { include: \"@whitespace\" },\n      [/@optionName/, \"annotation\"],\n      [/[()]/, \"annotation.brackets\"],\n      [/=/, \"operator\", \"@pop\"]\n    ],\n    oneofDecl: [\n      { include: \"@whitespace\" },\n      [/@identifier/, \"identifier\"],\n      [/{/, { token: \"@brackets\", bracket: \"@open\", switchTo: \"@oneofBody.$S2\" }]\n    ],\n    oneofBody: [\n      { include: \"@whitespace\" },\n      { include: \"@constant\" },\n      [/;/, \"delimiter\"],\n      [/(@identifier)(\\s*)(=)/, [\"identifier\", \"white\", \"delimiter\"]],\n      [\n        /@fullIdentifier|\\./,\n        {\n          cases: {\n            \"@builtinTypes\": \"keyword\",\n            \"@default\": \"type.identifier\"\n          }\n        }\n      ],\n      [/\\[/, { token: \"@brackets\", bracket: \"@open\", next: \"@options.$S2\" }],\n      [/}/, { token: \"@brackets\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    reserved: [\n      { include: \"@whitespace\" },\n      [/,/, \"delimiter\"],\n      [/;/, \"delimiter\", \"@pop\"],\n      { include: \"@constant\" },\n      [/to\\b|max\\b/, \"keyword\"]\n    ],\n    map: [\n      { include: \"@whitespace\" },\n      [\n        /@fullIdentifier|\\./,\n        {\n          cases: {\n            \"@builtinTypes\": \"keyword\",\n            \"@default\": \"type.identifier\"\n          }\n        }\n      ],\n      [/,/, \"delimiter\"],\n      [/>/, { token: \"@brackets\", bracket: \"@close\", switchTo: \"identifier\" }]\n    ],\n    field: [\n      { include: \"@whitespace\" },\n      [\n        \"group\",\n        {\n          cases: {\n            \"$S2==proto2\": { token: \"keyword\", switchTo: \"@groupDecl.$S2\" }\n          }\n        }\n      ],\n      [/(@identifier)(\\s*)(=)/, [\"identifier\", \"white\", { token: \"delimiter\", next: \"@pop\" }]],\n      [\n        /@fullIdentifier|\\./,\n        {\n          cases: {\n            \"@builtinTypes\": \"keyword\",\n            \"@default\": \"type.identifier\"\n          }\n        }\n      ]\n    ],\n    groupDecl: [\n      { include: \"@whitespace\" },\n      [/@identifier/, \"identifier\"],\n      [\"=\", \"operator\"],\n      [/{/, { token: \"@brackets\", bracket: \"@open\", switchTo: \"@messageBody.$S2\" }],\n      { include: \"@constant\" }\n    ],\n    type: [\n      { include: \"@whitespace\" },\n      [/@identifier/, \"type.identifier\", \"@pop\"],\n      [/./, \"delimiter\"]\n    ],\n    identifier: [{ include: \"@whitespace\" }, [/@identifier/, \"identifier\", \"@pop\"]],\n    serviceDecl: [\n      { include: \"@whitespace\" },\n      [/@identifier/, \"identifier\"],\n      [/{/, { token: \"@brackets\", bracket: \"@open\", switchTo: \"@serviceBody.$S2\" }]\n    ],\n    serviceBody: [\n      { include: \"@whitespace\" },\n      { include: \"@constant\" },\n      [/;/, \"delimiter\"],\n      [/option\\b/, \"keyword\", \"@option.$S2\"],\n      [/rpc\\b/, \"keyword\", \"@rpc.$S2\"],\n      [/\\[/, { token: \"@brackets\", bracket: \"@open\", next: \"@options.$S2\" }],\n      [/}/, { token: \"@brackets\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    rpc: [\n      { include: \"@whitespace\" },\n      [/@identifier/, \"identifier\"],\n      [/\\(/, { token: \"@brackets\", bracket: \"@open\", switchTo: \"@request.$S2\" }],\n      [/{/, { token: \"@brackets\", bracket: \"@open\", next: \"@methodOptions.$S2\" }],\n      [/;/, \"delimiter\", \"@pop\"]\n    ],\n    request: [\n      { include: \"@whitespace\" },\n      [\n        /@messageType/,\n        {\n          cases: {\n            stream: { token: \"keyword\", next: \"@type.$S2\" },\n            \"@default\": \"type.identifier\"\n          }\n        }\n      ],\n      [/\\)/, { token: \"@brackets\", bracket: \"@close\", switchTo: \"@returns.$S2\" }]\n    ],\n    returns: [\n      { include: \"@whitespace\" },\n      [/returns\\b/, \"keyword\"],\n      [/\\(/, { token: \"@brackets\", bracket: \"@open\", switchTo: \"@response.$S2\" }]\n    ],\n    response: [\n      { include: \"@whitespace\" },\n      [\n        /@messageType/,\n        {\n          cases: {\n            stream: { token: \"keyword\", next: \"@type.$S2\" },\n            \"@default\": \"type.identifier\"\n          }\n        }\n      ],\n      [/\\)/, { token: \"@brackets\", bracket: \"@close\", switchTo: \"@rpc.$S2\" }]\n    ],\n    methodOptions: [\n      { include: \"@whitespace\" },\n      { include: \"@constant\" },\n      [/;/, \"delimiter\"],\n      [\"option\", \"keyword\"],\n      [/@optionName/, \"annotation\"],\n      [/[()]/, \"annotation.brackets\"],\n      [/=/, \"operator\"],\n      [/}/, { token: \"@brackets\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    comment: [\n      [/[^\\/*]+/, \"comment\"],\n      [/\\/\\*/, \"comment\", \"@push\"],\n      [\"\\\\*/\", \"comment\", \"@pop\"],\n      [/[\\/*]/, \"comment\"]\n    ],\n    string: [\n      [/[^\\\\\"]+/, \"string\"],\n      [/@escapes/, \"string.escape\"],\n      [/\\\\./, \"string.escape.invalid\"],\n      [/\"/, { token: \"string.quote\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    stringSingle: [\n      [/[^\\\\']+/, \"string\"],\n      [/@escapes/, \"string.escape\"],\n      [/\\\\./, \"string.escape.invalid\"],\n      [/'/, { token: \"string.quote\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    constant: [\n      [\"@boolLit\", \"keyword.constant\"],\n      [\"@hexLit\", \"number.hex\"],\n      [\"@octalLit\", \"number.octal\"],\n      [\"@decimalLit\", \"number\"],\n      [\"@floatLit\", \"number.float\"],\n      [/(\"([^\"\\\\]|\\\\.)*|'([^'\\\\]|\\\\.)*)$/, \"string.invalid\"],\n      [/\"/, { token: \"string.quote\", bracket: \"@open\", next: \"@string\" }],\n      [/'/, { token: \"string.quote\", bracket: \"@open\", next: \"@stringSingle\" }],\n      [/{/, { token: \"@brackets\", bracket: \"@open\", next: \"@prototext\" }],\n      [/identifier/, \"identifier\"]\n    ],\n    whitespace: [\n      [/[ \\t\\r\\n]+/, \"white\"],\n      [/\\/\\*/, \"comment\", \"@comment\"],\n      [/\\/\\/.*$/, \"comment\"]\n    ],\n    prototext: [\n      { include: \"@whitespace\" },\n      { include: \"@constant\" },\n      [/@identifier/, \"identifier\"],\n      [/[:;]/, \"delimiter\"],\n      [/}/, { token: \"@brackets\", bracket: \"@close\", next: \"@pop\" }]\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"]},"metadata":{},"sourceType":"module"}