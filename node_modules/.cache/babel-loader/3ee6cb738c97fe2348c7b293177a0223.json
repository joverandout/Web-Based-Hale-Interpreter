{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { $, addDisposableListener, EventType, isHTMLElement } from '../../../base/browser/dom.js';\nimport { StandardMouseEvent } from '../../../base/browser/mouseEvent.js';\nimport { Menu } from '../../../base/browser/ui/menu/menu.js';\nimport { ActionRunner } from '../../../base/common/actions.js';\nimport { isCancellationError } from '../../../base/common/errors.js';\nimport { combinedDisposable, DisposableStore } from '../../../base/common/lifecycle.js';\nimport './contextMenuHandler.css';\nimport { attachMenuStyler } from '../../theme/common/styler.js';\nexport class ContextMenuHandler {\n  constructor(contextViewService, telemetryService, notificationService, keybindingService, themeService) {\n    this.contextViewService = contextViewService;\n    this.telemetryService = telemetryService;\n    this.notificationService = notificationService;\n    this.keybindingService = keybindingService;\n    this.themeService = themeService;\n    this.focusToReturn = null;\n    this.block = null;\n    this.options = {\n      blockMouse: true\n    };\n  }\n\n  configure(options) {\n    this.options = options;\n  }\n\n  showContextMenu(delegate) {\n    const actions = delegate.getActions();\n\n    if (!actions.length) {\n      return; // Don't render an empty context menu\n    }\n\n    this.focusToReturn = document.activeElement;\n    let menu;\n    let shadowRootElement = isHTMLElement(delegate.domForShadowRoot) ? delegate.domForShadowRoot : undefined;\n    this.contextViewService.showContextView({\n      getAnchor: () => delegate.getAnchor(),\n      canRelayout: false,\n      anchorAlignment: delegate.anchorAlignment,\n      anchorAxisAlignment: delegate.anchorAxisAlignment,\n      render: container => {\n        let className = delegate.getMenuClassName ? delegate.getMenuClassName() : '';\n\n        if (className) {\n          container.className += ' ' + className;\n        } // Render invisible div to block mouse interaction in the rest of the UI\n\n\n        if (this.options.blockMouse) {\n          this.block = container.appendChild($('.context-view-block'));\n          this.block.style.position = 'fixed';\n          this.block.style.cursor = 'initial';\n          this.block.style.left = '0';\n          this.block.style.top = '0';\n          this.block.style.width = '100%';\n          this.block.style.height = '100%';\n          this.block.style.zIndex = '-1'; // TODO@Steven: this is never getting disposed\n\n          addDisposableListener(this.block, EventType.MOUSE_DOWN, e => e.stopPropagation());\n        }\n\n        const menuDisposables = new DisposableStore();\n        const actionRunner = delegate.actionRunner || new ActionRunner();\n        actionRunner.onBeforeRun(this.onActionRun, this, menuDisposables);\n        actionRunner.onDidRun(this.onDidActionRun, this, menuDisposables);\n        menu = new Menu(container, actions, {\n          actionViewItemProvider: delegate.getActionViewItem,\n          context: delegate.getActionsContext ? delegate.getActionsContext() : null,\n          actionRunner,\n          getKeyBinding: delegate.getKeyBinding ? delegate.getKeyBinding : action => this.keybindingService.lookupKeybinding(action.id)\n        });\n        menuDisposables.add(attachMenuStyler(menu, this.themeService));\n        menu.onDidCancel(() => this.contextViewService.hideContextView(true), null, menuDisposables);\n        menu.onDidBlur(() => this.contextViewService.hideContextView(true), null, menuDisposables);\n        menuDisposables.add(addDisposableListener(window, EventType.BLUR, () => this.contextViewService.hideContextView(true)));\n        menuDisposables.add(addDisposableListener(window, EventType.MOUSE_DOWN, e => {\n          if (e.defaultPrevented) {\n            return;\n          }\n\n          let event = new StandardMouseEvent(e);\n          let element = event.target; // Don't do anything as we are likely creating a context menu\n\n          if (event.rightButton) {\n            return;\n          }\n\n          while (element) {\n            if (element === container) {\n              return;\n            }\n\n            element = element.parentElement;\n          }\n\n          this.contextViewService.hideContextView(true);\n        }));\n        return combinedDisposable(menuDisposables, menu);\n      },\n      focus: () => {\n        if (menu) {\n          menu.focus(!!delegate.autoSelectFirstItem);\n        }\n      },\n      onHide: didCancel => {\n        if (delegate.onHide) {\n          delegate.onHide(!!didCancel);\n        }\n\n        if (this.block) {\n          this.block.remove();\n          this.block = null;\n        }\n\n        if (this.focusToReturn) {\n          this.focusToReturn.focus();\n        }\n      }\n    }, shadowRootElement, !!shadowRootElement);\n  }\n\n  onActionRun(e) {\n    this.telemetryService.publicLog2('workbenchActionExecuted', {\n      id: e.action.id,\n      from: 'contextMenu'\n    });\n    this.contextViewService.hideContextView(false); // Restore focus here\n\n    if (this.focusToReturn) {\n      this.focusToReturn.focus();\n    }\n  }\n\n  onDidActionRun(e) {\n    if (e.error && !isCancellationError(e.error)) {\n      this.notificationService.error(e.error);\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/platform/contextview/browser/contextMenuHandler.js"],"names":["$","addDisposableListener","EventType","isHTMLElement","StandardMouseEvent","Menu","ActionRunner","isCancellationError","combinedDisposable","DisposableStore","attachMenuStyler","ContextMenuHandler","constructor","contextViewService","telemetryService","notificationService","keybindingService","themeService","focusToReturn","block","options","blockMouse","configure","showContextMenu","delegate","actions","getActions","length","document","activeElement","menu","shadowRootElement","domForShadowRoot","undefined","showContextView","getAnchor","canRelayout","anchorAlignment","anchorAxisAlignment","render","container","className","getMenuClassName","appendChild","style","position","cursor","left","top","width","height","zIndex","MOUSE_DOWN","e","stopPropagation","menuDisposables","actionRunner","onBeforeRun","onActionRun","onDidRun","onDidActionRun","actionViewItemProvider","getActionViewItem","context","getActionsContext","getKeyBinding","action","lookupKeybinding","id","add","onDidCancel","hideContextView","onDidBlur","window","BLUR","defaultPrevented","event","element","target","rightButton","parentElement","focus","autoSelectFirstItem","onHide","didCancel","remove","publicLog2","from","error"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { $, addDisposableListener, EventType, isHTMLElement } from '../../../base/browser/dom.js';\nimport { StandardMouseEvent } from '../../../base/browser/mouseEvent.js';\nimport { Menu } from '../../../base/browser/ui/menu/menu.js';\nimport { ActionRunner } from '../../../base/common/actions.js';\nimport { isCancellationError } from '../../../base/common/errors.js';\nimport { combinedDisposable, DisposableStore } from '../../../base/common/lifecycle.js';\nimport './contextMenuHandler.css';\nimport { attachMenuStyler } from '../../theme/common/styler.js';\nexport class ContextMenuHandler {\n    constructor(contextViewService, telemetryService, notificationService, keybindingService, themeService) {\n        this.contextViewService = contextViewService;\n        this.telemetryService = telemetryService;\n        this.notificationService = notificationService;\n        this.keybindingService = keybindingService;\n        this.themeService = themeService;\n        this.focusToReturn = null;\n        this.block = null;\n        this.options = { blockMouse: true };\n    }\n    configure(options) {\n        this.options = options;\n    }\n    showContextMenu(delegate) {\n        const actions = delegate.getActions();\n        if (!actions.length) {\n            return; // Don't render an empty context menu\n        }\n        this.focusToReturn = document.activeElement;\n        let menu;\n        let shadowRootElement = isHTMLElement(delegate.domForShadowRoot) ? delegate.domForShadowRoot : undefined;\n        this.contextViewService.showContextView({\n            getAnchor: () => delegate.getAnchor(),\n            canRelayout: false,\n            anchorAlignment: delegate.anchorAlignment,\n            anchorAxisAlignment: delegate.anchorAxisAlignment,\n            render: (container) => {\n                let className = delegate.getMenuClassName ? delegate.getMenuClassName() : '';\n                if (className) {\n                    container.className += ' ' + className;\n                }\n                // Render invisible div to block mouse interaction in the rest of the UI\n                if (this.options.blockMouse) {\n                    this.block = container.appendChild($('.context-view-block'));\n                    this.block.style.position = 'fixed';\n                    this.block.style.cursor = 'initial';\n                    this.block.style.left = '0';\n                    this.block.style.top = '0';\n                    this.block.style.width = '100%';\n                    this.block.style.height = '100%';\n                    this.block.style.zIndex = '-1';\n                    // TODO@Steven: this is never getting disposed\n                    addDisposableListener(this.block, EventType.MOUSE_DOWN, e => e.stopPropagation());\n                }\n                const menuDisposables = new DisposableStore();\n                const actionRunner = delegate.actionRunner || new ActionRunner();\n                actionRunner.onBeforeRun(this.onActionRun, this, menuDisposables);\n                actionRunner.onDidRun(this.onDidActionRun, this, menuDisposables);\n                menu = new Menu(container, actions, {\n                    actionViewItemProvider: delegate.getActionViewItem,\n                    context: delegate.getActionsContext ? delegate.getActionsContext() : null,\n                    actionRunner,\n                    getKeyBinding: delegate.getKeyBinding ? delegate.getKeyBinding : action => this.keybindingService.lookupKeybinding(action.id)\n                });\n                menuDisposables.add(attachMenuStyler(menu, this.themeService));\n                menu.onDidCancel(() => this.contextViewService.hideContextView(true), null, menuDisposables);\n                menu.onDidBlur(() => this.contextViewService.hideContextView(true), null, menuDisposables);\n                menuDisposables.add(addDisposableListener(window, EventType.BLUR, () => this.contextViewService.hideContextView(true)));\n                menuDisposables.add(addDisposableListener(window, EventType.MOUSE_DOWN, (e) => {\n                    if (e.defaultPrevented) {\n                        return;\n                    }\n                    let event = new StandardMouseEvent(e);\n                    let element = event.target;\n                    // Don't do anything as we are likely creating a context menu\n                    if (event.rightButton) {\n                        return;\n                    }\n                    while (element) {\n                        if (element === container) {\n                            return;\n                        }\n                        element = element.parentElement;\n                    }\n                    this.contextViewService.hideContextView(true);\n                }));\n                return combinedDisposable(menuDisposables, menu);\n            },\n            focus: () => {\n                if (menu) {\n                    menu.focus(!!delegate.autoSelectFirstItem);\n                }\n            },\n            onHide: (didCancel) => {\n                if (delegate.onHide) {\n                    delegate.onHide(!!didCancel);\n                }\n                if (this.block) {\n                    this.block.remove();\n                    this.block = null;\n                }\n                if (this.focusToReturn) {\n                    this.focusToReturn.focus();\n                }\n            }\n        }, shadowRootElement, !!shadowRootElement);\n    }\n    onActionRun(e) {\n        this.telemetryService.publicLog2('workbenchActionExecuted', { id: e.action.id, from: 'contextMenu' });\n        this.contextViewService.hideContextView(false);\n        // Restore focus here\n        if (this.focusToReturn) {\n            this.focusToReturn.focus();\n        }\n    }\n    onDidActionRun(e) {\n        if (e.error && !isCancellationError(e.error)) {\n            this.notificationService.error(e.error);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}