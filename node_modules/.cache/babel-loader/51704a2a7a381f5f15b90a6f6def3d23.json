{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../common/event.js';\nimport { Disposable } from '../common/lifecycle.js';\n\nclass WindowManager {\n  constructor() {\n    // --- Zoom Factor\n    this._zoomFactor = 1;\n  }\n\n  getZoomFactor() {\n    return this._zoomFactor;\n  }\n\n}\n\nWindowManager.INSTANCE = new WindowManager();\n\nclass PixelRatioImpl extends Disposable {\n  constructor() {\n    super();\n    this._onDidChange = this._register(new Emitter());\n    this.onDidChange = this._onDidChange.event;\n    this._value = this._getPixelRatio();\n    this._removeListener = this._installResolutionListener();\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  dispose() {\n    this._removeListener();\n\n    super.dispose();\n  }\n\n  _installResolutionListener() {\n    // See https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio#monitoring_screen_resolution_or_zoom_level_changes\n    const mediaQueryList = matchMedia(`(resolution: ${window.devicePixelRatio}dppx)`);\n\n    const listener = () => this._updateValue();\n\n    mediaQueryList.addEventListener('change', listener);\n    return () => {\n      mediaQueryList.removeEventListener('change', listener);\n    };\n  }\n\n  _updateValue() {\n    this._value = this._getPixelRatio();\n\n    this._onDidChange.fire(this._value);\n\n    this._removeListener = this._installResolutionListener();\n  }\n\n  _getPixelRatio() {\n    const ctx = document.createElement('canvas').getContext('2d');\n    const dpr = window.devicePixelRatio || 1;\n    const bsr = ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1;\n    return dpr / bsr;\n  }\n\n}\n\nclass PixelRatioFacade {\n  constructor() {\n    this._pixelRatioMonitor = null;\n  }\n\n  _getOrCreatePixelRatioMonitor() {\n    if (!this._pixelRatioMonitor) {\n      this._pixelRatioMonitor = new PixelRatioImpl();\n    }\n\n    return this._pixelRatioMonitor;\n  }\n  /**\n   * Get the current value.\n   */\n\n\n  get value() {\n    return this._getOrCreatePixelRatioMonitor().value;\n  }\n  /**\n   * Listen for changes.\n   */\n\n\n  get onDidChange() {\n    return this._getOrCreatePixelRatioMonitor().onDidChange;\n  }\n\n}\n/**\n * Returns the pixel ratio.\n *\n * This is useful for rendering <canvas> elements at native screen resolution or for being used as\n * a cache key when storing font measurements. Fonts might render differently depending on resolution\n * and any measurements need to be discarded for example when a window is moved from a monitor to another.\n */\n\n\nexport const PixelRatio = new PixelRatioFacade();\n/** The zoom scale for an index, e.g. 1, 1.2, 1.4 */\n\nexport function getZoomFactor() {\n  return WindowManager.INSTANCE.getZoomFactor();\n}\nconst userAgent = navigator.userAgent;\nexport const isFirefox = userAgent.indexOf('Firefox') >= 0;\nexport const isWebKit = userAgent.indexOf('AppleWebKit') >= 0;\nexport const isChrome = userAgent.indexOf('Chrome') >= 0;\nexport const isSafari = !isChrome && userAgent.indexOf('Safari') >= 0;\nexport const isWebkitWebView = !isChrome && !isSafari && isWebKit;\nexport const isEdgeLegacyWebView = userAgent.indexOf('Edge/') >= 0 && userAgent.indexOf('WebView/') >= 0;\nexport const isElectron = userAgent.indexOf('Electron/') >= 0;\nexport const isAndroid = userAgent.indexOf('Android') >= 0;\nexport const isStandalone = window.matchMedia && window.matchMedia('(display-mode: standalone)').matches;","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/base/browser/browser.js"],"names":["Emitter","Disposable","WindowManager","constructor","_zoomFactor","getZoomFactor","INSTANCE","PixelRatioImpl","_onDidChange","_register","onDidChange","event","_value","_getPixelRatio","_removeListener","_installResolutionListener","value","dispose","mediaQueryList","matchMedia","window","devicePixelRatio","listener","_updateValue","addEventListener","removeEventListener","fire","ctx","document","createElement","getContext","dpr","bsr","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","PixelRatioFacade","_pixelRatioMonitor","_getOrCreatePixelRatioMonitor","PixelRatio","userAgent","navigator","isFirefox","indexOf","isWebKit","isChrome","isSafari","isWebkitWebView","isEdgeLegacyWebView","isElectron","isAndroid","isStandalone","matches"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../common/event.js';\nimport { Disposable } from '../common/lifecycle.js';\nclass WindowManager {\n    constructor() {\n        // --- Zoom Factor\n        this._zoomFactor = 1;\n    }\n    getZoomFactor() {\n        return this._zoomFactor;\n    }\n}\nWindowManager.INSTANCE = new WindowManager();\nclass PixelRatioImpl extends Disposable {\n    constructor() {\n        super();\n        this._onDidChange = this._register(new Emitter());\n        this.onDidChange = this._onDidChange.event;\n        this._value = this._getPixelRatio();\n        this._removeListener = this._installResolutionListener();\n    }\n    get value() {\n        return this._value;\n    }\n    dispose() {\n        this._removeListener();\n        super.dispose();\n    }\n    _installResolutionListener() {\n        // See https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio#monitoring_screen_resolution_or_zoom_level_changes\n        const mediaQueryList = matchMedia(`(resolution: ${window.devicePixelRatio}dppx)`);\n        const listener = () => this._updateValue();\n        mediaQueryList.addEventListener('change', listener);\n        return () => {\n            mediaQueryList.removeEventListener('change', listener);\n        };\n    }\n    _updateValue() {\n        this._value = this._getPixelRatio();\n        this._onDidChange.fire(this._value);\n        this._removeListener = this._installResolutionListener();\n    }\n    _getPixelRatio() {\n        const ctx = document.createElement('canvas').getContext('2d');\n        const dpr = window.devicePixelRatio || 1;\n        const bsr = ctx.webkitBackingStorePixelRatio ||\n            ctx.mozBackingStorePixelRatio ||\n            ctx.msBackingStorePixelRatio ||\n            ctx.oBackingStorePixelRatio ||\n            ctx.backingStorePixelRatio || 1;\n        return dpr / bsr;\n    }\n}\nclass PixelRatioFacade {\n    constructor() {\n        this._pixelRatioMonitor = null;\n    }\n    _getOrCreatePixelRatioMonitor() {\n        if (!this._pixelRatioMonitor) {\n            this._pixelRatioMonitor = new PixelRatioImpl();\n        }\n        return this._pixelRatioMonitor;\n    }\n    /**\n     * Get the current value.\n     */\n    get value() {\n        return this._getOrCreatePixelRatioMonitor().value;\n    }\n    /**\n     * Listen for changes.\n     */\n    get onDidChange() {\n        return this._getOrCreatePixelRatioMonitor().onDidChange;\n    }\n}\n/**\n * Returns the pixel ratio.\n *\n * This is useful for rendering <canvas> elements at native screen resolution or for being used as\n * a cache key when storing font measurements. Fonts might render differently depending on resolution\n * and any measurements need to be discarded for example when a window is moved from a monitor to another.\n */\nexport const PixelRatio = new PixelRatioFacade();\n/** The zoom scale for an index, e.g. 1, 1.2, 1.4 */\nexport function getZoomFactor() {\n    return WindowManager.INSTANCE.getZoomFactor();\n}\nconst userAgent = navigator.userAgent;\nexport const isFirefox = (userAgent.indexOf('Firefox') >= 0);\nexport const isWebKit = (userAgent.indexOf('AppleWebKit') >= 0);\nexport const isChrome = (userAgent.indexOf('Chrome') >= 0);\nexport const isSafari = (!isChrome && (userAgent.indexOf('Safari') >= 0));\nexport const isWebkitWebView = (!isChrome && !isSafari && isWebKit);\nexport const isEdgeLegacyWebView = (userAgent.indexOf('Edge/') >= 0) && (userAgent.indexOf('WebView/') >= 0);\nexport const isElectron = (userAgent.indexOf('Electron/') >= 0);\nexport const isAndroid = (userAgent.indexOf('Android') >= 0);\nexport const isStandalone = (window.matchMedia && window.matchMedia('(display-mode: standalone)').matches);\n"]},"metadata":{},"sourceType":"module"}