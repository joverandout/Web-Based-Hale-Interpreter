{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar _a;\n\nimport './media/diffReview.css';\nimport * as nls from '../../../nls.js';\nimport * as dom from '../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\nimport { ActionBar } from '../../../base/browser/ui/actionbar/actionbar.js';\nimport { DomScrollableElement } from '../../../base/browser/ui/scrollbar/scrollableElement.js';\nimport { Action } from '../../../base/common/actions.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { applyFontInfo } from '../config/domFontInfo.js';\nimport { EditorAction, registerEditorAction } from '../editorExtensions.js';\nimport { ICodeEditorService } from '../services/codeEditorService.js';\nimport { EditorFontLigatures } from '../../common/config/editorOptions.js';\nimport { LineTokens } from '../../common/tokens/lineTokens.js';\nimport { Position } from '../../common/core/position.js';\nimport { editorLineNumbers } from '../../common/core/editorColorRegistry.js';\nimport { RenderLineInput, renderViewLine2 as renderViewLine } from '../../common/viewLayout/viewLineRenderer.js';\nimport { ViewLineRenderingData } from '../../common/viewModel/viewModel.js';\nimport { ContextKeyExpr } from '../../../platform/contextkey/common/contextkey.js';\nimport { scrollbarShadow } from '../../../platform/theme/common/colorRegistry.js';\nimport { registerThemingParticipant, ThemeIcon } from '../../../platform/theme/common/themeService.js';\nimport { Codicon } from '../../../base/common/codicons.js';\nimport { registerIcon } from '../../../platform/theme/common/iconRegistry.js';\nimport { ILanguageService } from '../../common/services/language.js';\nconst DIFF_LINES_PADDING = 3;\n\nclass DiffEntry {\n  constructor(originalLineStart, originalLineEnd, modifiedLineStart, modifiedLineEnd) {\n    this.originalLineStart = originalLineStart;\n    this.originalLineEnd = originalLineEnd;\n    this.modifiedLineStart = modifiedLineStart;\n    this.modifiedLineEnd = modifiedLineEnd;\n  }\n\n  getType() {\n    if (this.originalLineStart === 0) {\n      return 1\n      /* Insert */\n      ;\n    }\n\n    if (this.modifiedLineStart === 0) {\n      return 2\n      /* Delete */\n      ;\n    }\n\n    return 0\n    /* Equal */\n    ;\n  }\n\n}\n\nclass Diff {\n  constructor(entries) {\n    this.entries = entries;\n  }\n\n}\n\nconst diffReviewInsertIcon = registerIcon('diff-review-insert', Codicon.add, nls.localize('diffReviewInsertIcon', 'Icon for \\'Insert\\' in diff review.'));\nconst diffReviewRemoveIcon = registerIcon('diff-review-remove', Codicon.remove, nls.localize('diffReviewRemoveIcon', 'Icon for \\'Remove\\' in diff review.'));\nconst diffReviewCloseIcon = registerIcon('diff-review-close', Codicon.close, nls.localize('diffReviewCloseIcon', 'Icon for \\'Close\\' in diff review.'));\nlet DiffReview = class DiffReview extends Disposable {\n  constructor(diffEditor, _languageService) {\n    super();\n    this._languageService = _languageService;\n    this._width = 0;\n    this._diffEditor = diffEditor;\n    this._isVisible = false;\n    this.shadow = createFastDomNode(document.createElement('div'));\n    this.shadow.setClassName('diff-review-shadow');\n    this.actionBarContainer = createFastDomNode(document.createElement('div'));\n    this.actionBarContainer.setClassName('diff-review-actions');\n    this._actionBar = this._register(new ActionBar(this.actionBarContainer.domNode));\n\n    this._actionBar.push(new Action('diffreview.close', nls.localize('label.close', \"Close\"), 'close-diff-review ' + ThemeIcon.asClassName(diffReviewCloseIcon), true, () => __awaiter(this, void 0, void 0, function* () {\n      return this.hide();\n    })), {\n      label: false,\n      icon: true\n    });\n\n    this.domNode = createFastDomNode(document.createElement('div'));\n    this.domNode.setClassName('diff-review monaco-editor-background');\n    this._content = createFastDomNode(document.createElement('div'));\n\n    this._content.setClassName('diff-review-content');\n\n    this._content.setAttribute('role', 'code');\n\n    this.scrollbar = this._register(new DomScrollableElement(this._content.domNode, {}));\n    this.domNode.domNode.appendChild(this.scrollbar.getDomNode());\n\n    this._register(diffEditor.onDidUpdateDiff(() => {\n      if (!this._isVisible) {\n        return;\n      }\n\n      this._diffs = this._compute();\n\n      this._render();\n    }));\n\n    this._register(diffEditor.getModifiedEditor().onDidChangeCursorPosition(() => {\n      if (!this._isVisible) {\n        return;\n      }\n\n      this._render();\n    }));\n\n    this._register(dom.addStandardDisposableListener(this.domNode.domNode, 'click', e => {\n      e.preventDefault();\n      const row = dom.findParentWithClass(e.target, 'diff-review-row');\n\n      if (row) {\n        this._goToRow(row);\n      }\n    }));\n\n    this._register(dom.addStandardDisposableListener(this.domNode.domNode, 'keydown', e => {\n      if (e.equals(18\n      /* DownArrow */\n      ) || e.equals(2048\n      /* CtrlCmd */\n      | 18\n      /* DownArrow */\n      ) || e.equals(512\n      /* Alt */\n      | 18\n      /* DownArrow */\n      )) {\n        e.preventDefault();\n\n        this._goToRow(this._getNextRow());\n      }\n\n      if (e.equals(16\n      /* UpArrow */\n      ) || e.equals(2048\n      /* CtrlCmd */\n      | 16\n      /* UpArrow */\n      ) || e.equals(512\n      /* Alt */\n      | 16\n      /* UpArrow */\n      )) {\n        e.preventDefault();\n\n        this._goToRow(this._getPrevRow());\n      }\n\n      if (e.equals(9\n      /* Escape */\n      ) || e.equals(2048\n      /* CtrlCmd */\n      | 9\n      /* Escape */\n      ) || e.equals(512\n      /* Alt */\n      | 9\n      /* Escape */\n      ) || e.equals(1024\n      /* Shift */\n      | 9\n      /* Escape */\n      )) {\n        e.preventDefault();\n        this.hide();\n      }\n\n      if (e.equals(10\n      /* Space */\n      ) || e.equals(3\n      /* Enter */\n      )) {\n        e.preventDefault();\n        this.accept();\n      }\n    }));\n\n    this._diffs = [];\n    this._currentDiff = null;\n  }\n\n  prev() {\n    let index = 0;\n\n    if (!this._isVisible) {\n      this._diffs = this._compute();\n    }\n\n    if (this._isVisible) {\n      let currentIndex = -1;\n\n      for (let i = 0, len = this._diffs.length; i < len; i++) {\n        if (this._diffs[i] === this._currentDiff) {\n          currentIndex = i;\n          break;\n        }\n      }\n\n      index = this._diffs.length + currentIndex - 1;\n    } else {\n      index = this._findDiffIndex(this._diffEditor.getPosition());\n    }\n\n    if (this._diffs.length === 0) {\n      // Nothing to do\n      return;\n    }\n\n    index = index % this._diffs.length;\n    const entries = this._diffs[index].entries;\n\n    this._diffEditor.setPosition(new Position(entries[0].modifiedLineStart, 1));\n\n    this._diffEditor.setSelection({\n      startColumn: 1,\n      startLineNumber: entries[0].modifiedLineStart,\n      endColumn: 1073741824\n      /* MAX_SAFE_SMALL_INTEGER */\n      ,\n      endLineNumber: entries[entries.length - 1].modifiedLineEnd\n    });\n\n    this._isVisible = true;\n\n    this._diffEditor.doLayout();\n\n    this._render();\n\n    this._goToRow(this._getNextRow());\n  }\n\n  next() {\n    let index = 0;\n\n    if (!this._isVisible) {\n      this._diffs = this._compute();\n    }\n\n    if (this._isVisible) {\n      let currentIndex = -1;\n\n      for (let i = 0, len = this._diffs.length; i < len; i++) {\n        if (this._diffs[i] === this._currentDiff) {\n          currentIndex = i;\n          break;\n        }\n      }\n\n      index = currentIndex + 1;\n    } else {\n      index = this._findDiffIndex(this._diffEditor.getPosition());\n    }\n\n    if (this._diffs.length === 0) {\n      // Nothing to do\n      return;\n    }\n\n    index = index % this._diffs.length;\n    const entries = this._diffs[index].entries;\n\n    this._diffEditor.setPosition(new Position(entries[0].modifiedLineStart, 1));\n\n    this._diffEditor.setSelection({\n      startColumn: 1,\n      startLineNumber: entries[0].modifiedLineStart,\n      endColumn: 1073741824\n      /* MAX_SAFE_SMALL_INTEGER */\n      ,\n      endLineNumber: entries[entries.length - 1].modifiedLineEnd\n    });\n\n    this._isVisible = true;\n\n    this._diffEditor.doLayout();\n\n    this._render();\n\n    this._goToRow(this._getNextRow());\n  }\n\n  accept() {\n    let jumpToLineNumber = -1;\n\n    const current = this._getCurrentFocusedRow();\n\n    if (current) {\n      const lineNumber = parseInt(current.getAttribute('data-line'), 10);\n\n      if (!isNaN(lineNumber)) {\n        jumpToLineNumber = lineNumber;\n      }\n    }\n\n    this.hide();\n\n    if (jumpToLineNumber !== -1) {\n      this._diffEditor.setPosition(new Position(jumpToLineNumber, 1));\n\n      this._diffEditor.revealPosition(new Position(jumpToLineNumber, 1), 1\n      /* Immediate */\n      );\n    }\n  }\n\n  hide() {\n    this._isVisible = false;\n\n    this._diffEditor.updateOptions({\n      readOnly: false\n    });\n\n    this._diffEditor.focus();\n\n    this._diffEditor.doLayout();\n\n    this._render();\n  }\n\n  _getPrevRow() {\n    const current = this._getCurrentFocusedRow();\n\n    if (!current) {\n      return this._getFirstRow();\n    }\n\n    if (current.previousElementSibling) {\n      return current.previousElementSibling;\n    }\n\n    return current;\n  }\n\n  _getNextRow() {\n    const current = this._getCurrentFocusedRow();\n\n    if (!current) {\n      return this._getFirstRow();\n    }\n\n    if (current.nextElementSibling) {\n      return current.nextElementSibling;\n    }\n\n    return current;\n  }\n\n  _getFirstRow() {\n    return this.domNode.domNode.querySelector('.diff-review-row');\n  }\n\n  _getCurrentFocusedRow() {\n    const result = document.activeElement;\n\n    if (result && /diff-review-row/.test(result.className)) {\n      return result;\n    }\n\n    return null;\n  }\n\n  _goToRow(row) {\n    const prev = this._getCurrentFocusedRow();\n\n    row.tabIndex = 0;\n    row.focus();\n\n    if (prev && prev !== row) {\n      prev.tabIndex = -1;\n    }\n\n    this.scrollbar.scanDomNode();\n  }\n\n  isVisible() {\n    return this._isVisible;\n  }\n\n  layout(top, width, height) {\n    this._width = width;\n    this.shadow.setTop(top - 6);\n    this.shadow.setWidth(width);\n    this.shadow.setHeight(this._isVisible ? 6 : 0);\n    this.domNode.setTop(top);\n    this.domNode.setWidth(width);\n    this.domNode.setHeight(height);\n\n    this._content.setHeight(height);\n\n    this._content.setWidth(width);\n\n    if (this._isVisible) {\n      this.actionBarContainer.setAttribute('aria-hidden', 'false');\n      this.actionBarContainer.setDisplay('block');\n    } else {\n      this.actionBarContainer.setAttribute('aria-hidden', 'true');\n      this.actionBarContainer.setDisplay('none');\n    }\n  }\n\n  _compute() {\n    const lineChanges = this._diffEditor.getLineChanges();\n\n    if (!lineChanges || lineChanges.length === 0) {\n      return [];\n    }\n\n    const originalModel = this._diffEditor.getOriginalEditor().getModel();\n\n    const modifiedModel = this._diffEditor.getModifiedEditor().getModel();\n\n    if (!originalModel || !modifiedModel) {\n      return [];\n    }\n\n    return DiffReview._mergeAdjacent(lineChanges, originalModel.getLineCount(), modifiedModel.getLineCount());\n  }\n\n  static _mergeAdjacent(lineChanges, originalLineCount, modifiedLineCount) {\n    if (!lineChanges || lineChanges.length === 0) {\n      return [];\n    }\n\n    const diffs = [];\n    let diffsLength = 0;\n\n    for (let i = 0, len = lineChanges.length; i < len; i++) {\n      const lineChange = lineChanges[i];\n      const originalStart = lineChange.originalStartLineNumber;\n      const originalEnd = lineChange.originalEndLineNumber;\n      const modifiedStart = lineChange.modifiedStartLineNumber;\n      const modifiedEnd = lineChange.modifiedEndLineNumber;\n      const r = [];\n      let rLength = 0; // Emit before anchors\n\n      {\n        const originalEqualAbove = originalEnd === 0 ? originalStart : originalStart - 1;\n        const modifiedEqualAbove = modifiedEnd === 0 ? modifiedStart : modifiedStart - 1; // Make sure we don't step into the previous diff\n\n        let minOriginal = 1;\n        let minModified = 1;\n\n        if (i > 0) {\n          const prevLineChange = lineChanges[i - 1];\n\n          if (prevLineChange.originalEndLineNumber === 0) {\n            minOriginal = prevLineChange.originalStartLineNumber + 1;\n          } else {\n            minOriginal = prevLineChange.originalEndLineNumber + 1;\n          }\n\n          if (prevLineChange.modifiedEndLineNumber === 0) {\n            minModified = prevLineChange.modifiedStartLineNumber + 1;\n          } else {\n            minModified = prevLineChange.modifiedEndLineNumber + 1;\n          }\n        }\n\n        let fromOriginal = originalEqualAbove - DIFF_LINES_PADDING + 1;\n        let fromModified = modifiedEqualAbove - DIFF_LINES_PADDING + 1;\n\n        if (fromOriginal < minOriginal) {\n          const delta = minOriginal - fromOriginal;\n          fromOriginal = fromOriginal + delta;\n          fromModified = fromModified + delta;\n        }\n\n        if (fromModified < minModified) {\n          const delta = minModified - fromModified;\n          fromOriginal = fromOriginal + delta;\n          fromModified = fromModified + delta;\n        }\n\n        r[rLength++] = new DiffEntry(fromOriginal, originalEqualAbove, fromModified, modifiedEqualAbove);\n      } // Emit deleted lines\n\n      {\n        if (originalEnd !== 0) {\n          r[rLength++] = new DiffEntry(originalStart, originalEnd, 0, 0);\n        }\n      } // Emit inserted lines\n\n      {\n        if (modifiedEnd !== 0) {\n          r[rLength++] = new DiffEntry(0, 0, modifiedStart, modifiedEnd);\n        }\n      } // Emit after anchors\n\n      {\n        const originalEqualBelow = originalEnd === 0 ? originalStart + 1 : originalEnd + 1;\n        const modifiedEqualBelow = modifiedEnd === 0 ? modifiedStart + 1 : modifiedEnd + 1; // Make sure we don't step into the next diff\n\n        let maxOriginal = originalLineCount;\n        let maxModified = modifiedLineCount;\n\n        if (i + 1 < len) {\n          const nextLineChange = lineChanges[i + 1];\n\n          if (nextLineChange.originalEndLineNumber === 0) {\n            maxOriginal = nextLineChange.originalStartLineNumber;\n          } else {\n            maxOriginal = nextLineChange.originalStartLineNumber - 1;\n          }\n\n          if (nextLineChange.modifiedEndLineNumber === 0) {\n            maxModified = nextLineChange.modifiedStartLineNumber;\n          } else {\n            maxModified = nextLineChange.modifiedStartLineNumber - 1;\n          }\n        }\n\n        let toOriginal = originalEqualBelow + DIFF_LINES_PADDING - 1;\n        let toModified = modifiedEqualBelow + DIFF_LINES_PADDING - 1;\n\n        if (toOriginal > maxOriginal) {\n          const delta = maxOriginal - toOriginal;\n          toOriginal = toOriginal + delta;\n          toModified = toModified + delta;\n        }\n\n        if (toModified > maxModified) {\n          const delta = maxModified - toModified;\n          toOriginal = toOriginal + delta;\n          toModified = toModified + delta;\n        }\n\n        r[rLength++] = new DiffEntry(originalEqualBelow, toOriginal, modifiedEqualBelow, toModified);\n      }\n      diffs[diffsLength++] = new Diff(r);\n    } // Merge adjacent diffs\n\n\n    let curr = diffs[0].entries;\n    const r = [];\n    let rLength = 0;\n\n    for (let i = 1, len = diffs.length; i < len; i++) {\n      const thisDiff = diffs[i].entries;\n      const currLast = curr[curr.length - 1];\n      const thisFirst = thisDiff[0];\n\n      if (currLast.getType() === 0\n      /* Equal */\n      && thisFirst.getType() === 0\n      /* Equal */\n      && thisFirst.originalLineStart <= currLast.originalLineEnd) {\n        // We are dealing with equal lines that overlap\n        curr[curr.length - 1] = new DiffEntry(currLast.originalLineStart, thisFirst.originalLineEnd, currLast.modifiedLineStart, thisFirst.modifiedLineEnd);\n        curr = curr.concat(thisDiff.slice(1));\n        continue;\n      }\n\n      r[rLength++] = new Diff(curr);\n      curr = thisDiff;\n    }\n\n    r[rLength++] = new Diff(curr);\n    return r;\n  }\n\n  _findDiffIndex(pos) {\n    const lineNumber = pos.lineNumber;\n\n    for (let i = 0, len = this._diffs.length; i < len; i++) {\n      const diff = this._diffs[i].entries;\n      const lastModifiedLine = diff[diff.length - 1].modifiedLineEnd;\n\n      if (lineNumber <= lastModifiedLine) {\n        return i;\n      }\n    }\n\n    return 0;\n  }\n\n  _render() {\n    const originalOptions = this._diffEditor.getOriginalEditor().getOptions();\n\n    const modifiedOptions = this._diffEditor.getModifiedEditor().getOptions();\n\n    const originalModel = this._diffEditor.getOriginalEditor().getModel();\n\n    const modifiedModel = this._diffEditor.getModifiedEditor().getModel();\n\n    const originalModelOpts = originalModel.getOptions();\n    const modifiedModelOpts = modifiedModel.getOptions();\n\n    if (!this._isVisible || !originalModel || !modifiedModel) {\n      dom.clearNode(this._content.domNode);\n      this._currentDiff = null;\n      this.scrollbar.scanDomNode();\n      return;\n    }\n\n    this._diffEditor.updateOptions({\n      readOnly: true\n    });\n\n    const diffIndex = this._findDiffIndex(this._diffEditor.getPosition());\n\n    if (this._diffs[diffIndex] === this._currentDiff) {\n      return;\n    }\n\n    this._currentDiff = this._diffs[diffIndex];\n    const diffs = this._diffs[diffIndex].entries;\n    const container = document.createElement('div');\n    container.className = 'diff-review-table';\n    container.setAttribute('role', 'list');\n    container.setAttribute('aria-label', 'Difference review. Use \"Stage | Unstage | Revert Selected Ranges\" commands');\n    applyFontInfo(container, modifiedOptions.get(44\n    /* fontInfo */\n    ));\n    let minOriginalLine = 0;\n    let maxOriginalLine = 0;\n    let minModifiedLine = 0;\n    let maxModifiedLine = 0;\n\n    for (let i = 0, len = diffs.length; i < len; i++) {\n      const diffEntry = diffs[i];\n      const originalLineStart = diffEntry.originalLineStart;\n      const originalLineEnd = diffEntry.originalLineEnd;\n      const modifiedLineStart = diffEntry.modifiedLineStart;\n      const modifiedLineEnd = diffEntry.modifiedLineEnd;\n\n      if (originalLineStart !== 0 && (minOriginalLine === 0 || originalLineStart < minOriginalLine)) {\n        minOriginalLine = originalLineStart;\n      }\n\n      if (originalLineEnd !== 0 && (maxOriginalLine === 0 || originalLineEnd > maxOriginalLine)) {\n        maxOriginalLine = originalLineEnd;\n      }\n\n      if (modifiedLineStart !== 0 && (minModifiedLine === 0 || modifiedLineStart < minModifiedLine)) {\n        minModifiedLine = modifiedLineStart;\n      }\n\n      if (modifiedLineEnd !== 0 && (maxModifiedLine === 0 || modifiedLineEnd > maxModifiedLine)) {\n        maxModifiedLine = modifiedLineEnd;\n      }\n    }\n\n    const header = document.createElement('div');\n    header.className = 'diff-review-row';\n    const cell = document.createElement('div');\n    cell.className = 'diff-review-cell diff-review-summary';\n    const originalChangedLinesCnt = maxOriginalLine - minOriginalLine + 1;\n    const modifiedChangedLinesCnt = maxModifiedLine - minModifiedLine + 1;\n    cell.appendChild(document.createTextNode(`${diffIndex + 1}/${this._diffs.length}: @@ -${minOriginalLine},${originalChangedLinesCnt} +${minModifiedLine},${modifiedChangedLinesCnt} @@`));\n    header.setAttribute('data-line', String(minModifiedLine));\n\n    const getAriaLines = lines => {\n      if (lines === 0) {\n        return nls.localize('no_lines_changed', \"no lines changed\");\n      } else if (lines === 1) {\n        return nls.localize('one_line_changed', \"1 line changed\");\n      } else {\n        return nls.localize('more_lines_changed', \"{0} lines changed\", lines);\n      }\n    };\n\n    const originalChangedLinesCntAria = getAriaLines(originalChangedLinesCnt);\n    const modifiedChangedLinesCntAria = getAriaLines(modifiedChangedLinesCnt);\n    header.setAttribute('aria-label', nls.localize({\n      key: 'header',\n      comment: ['This is the ARIA label for a git diff header.', 'A git diff header looks like this: @@ -154,12 +159,39 @@.', 'That encodes that at original line 154 (which is now line 159), 12 lines were removed/changed with 39 lines.', 'Variables 0 and 1 refer to the diff index out of total number of diffs.', 'Variables 2 and 4 will be numbers (a line number).', 'Variables 3 and 5 will be \"no lines changed\", \"1 line changed\" or \"X lines changed\", localized separately.']\n    }, \"Difference {0} of {1}: original line {2}, {3}, modified line {4}, {5}\", diffIndex + 1, this._diffs.length, minOriginalLine, originalChangedLinesCntAria, minModifiedLine, modifiedChangedLinesCntAria));\n    header.appendChild(cell); // @@ -504,7 +517,7 @@\n\n    header.setAttribute('role', 'listitem');\n    container.appendChild(header);\n    const lineHeight = modifiedOptions.get(59\n    /* lineHeight */\n    );\n    let modLine = minModifiedLine;\n\n    for (let i = 0, len = diffs.length; i < len; i++) {\n      const diffEntry = diffs[i];\n\n      DiffReview._renderSection(container, diffEntry, modLine, lineHeight, this._width, originalOptions, originalModel, originalModelOpts, modifiedOptions, modifiedModel, modifiedModelOpts, this._languageService.languageIdCodec);\n\n      if (diffEntry.modifiedLineStart !== 0) {\n        modLine = diffEntry.modifiedLineEnd;\n      }\n    }\n\n    dom.clearNode(this._content.domNode);\n\n    this._content.domNode.appendChild(container);\n\n    this.scrollbar.scanDomNode();\n  }\n\n  static _renderSection(dest, diffEntry, modLine, lineHeight, width, originalOptions, originalModel, originalModelOpts, modifiedOptions, modifiedModel, modifiedModelOpts, languageIdCodec) {\n    const type = diffEntry.getType();\n    let rowClassName = 'diff-review-row';\n    let lineNumbersExtraClassName = '';\n    const spacerClassName = 'diff-review-spacer';\n    let spacerIcon = null;\n\n    switch (type) {\n      case 1\n      /* Insert */\n      :\n        rowClassName = 'diff-review-row line-insert';\n        lineNumbersExtraClassName = ' char-insert';\n        spacerIcon = diffReviewInsertIcon;\n        break;\n\n      case 2\n      /* Delete */\n      :\n        rowClassName = 'diff-review-row line-delete';\n        lineNumbersExtraClassName = ' char-delete';\n        spacerIcon = diffReviewRemoveIcon;\n        break;\n    }\n\n    const originalLineStart = diffEntry.originalLineStart;\n    const originalLineEnd = diffEntry.originalLineEnd;\n    const modifiedLineStart = diffEntry.modifiedLineStart;\n    const modifiedLineEnd = diffEntry.modifiedLineEnd;\n    const cnt = Math.max(modifiedLineEnd - modifiedLineStart, originalLineEnd - originalLineStart);\n    const originalLayoutInfo = originalOptions.get(131\n    /* layoutInfo */\n    );\n    const originalLineNumbersWidth = originalLayoutInfo.glyphMarginWidth + originalLayoutInfo.lineNumbersWidth;\n    const modifiedLayoutInfo = modifiedOptions.get(131\n    /* layoutInfo */\n    );\n    const modifiedLineNumbersWidth = 10 + modifiedLayoutInfo.glyphMarginWidth + modifiedLayoutInfo.lineNumbersWidth;\n\n    for (let i = 0; i <= cnt; i++) {\n      const originalLine = originalLineStart === 0 ? 0 : originalLineStart + i;\n      const modifiedLine = modifiedLineStart === 0 ? 0 : modifiedLineStart + i;\n      const row = document.createElement('div');\n      row.style.minWidth = width + 'px';\n      row.className = rowClassName;\n      row.setAttribute('role', 'listitem');\n\n      if (modifiedLine !== 0) {\n        modLine = modifiedLine;\n      }\n\n      row.setAttribute('data-line', String(modLine));\n      const cell = document.createElement('div');\n      cell.className = 'diff-review-cell';\n      cell.style.height = `${lineHeight}px`;\n      row.appendChild(cell);\n      const originalLineNumber = document.createElement('span');\n      originalLineNumber.style.width = originalLineNumbersWidth + 'px';\n      originalLineNumber.style.minWidth = originalLineNumbersWidth + 'px';\n      originalLineNumber.className = 'diff-review-line-number' + lineNumbersExtraClassName;\n\n      if (originalLine !== 0) {\n        originalLineNumber.appendChild(document.createTextNode(String(originalLine)));\n      } else {\n        originalLineNumber.innerText = '\\u00a0';\n      }\n\n      cell.appendChild(originalLineNumber);\n      const modifiedLineNumber = document.createElement('span');\n      modifiedLineNumber.style.width = modifiedLineNumbersWidth + 'px';\n      modifiedLineNumber.style.minWidth = modifiedLineNumbersWidth + 'px';\n      modifiedLineNumber.style.paddingRight = '10px';\n      modifiedLineNumber.className = 'diff-review-line-number' + lineNumbersExtraClassName;\n\n      if (modifiedLine !== 0) {\n        modifiedLineNumber.appendChild(document.createTextNode(String(modifiedLine)));\n      } else {\n        modifiedLineNumber.innerText = '\\u00a0';\n      }\n\n      cell.appendChild(modifiedLineNumber);\n      const spacer = document.createElement('span');\n      spacer.className = spacerClassName;\n\n      if (spacerIcon) {\n        const spacerCodicon = document.createElement('span');\n        spacerCodicon.className = ThemeIcon.asClassName(spacerIcon);\n        spacerCodicon.innerText = '\\u00a0\\u00a0';\n        spacer.appendChild(spacerCodicon);\n      } else {\n        spacer.innerText = '\\u00a0\\u00a0';\n      }\n\n      cell.appendChild(spacer);\n      let lineContent;\n\n      if (modifiedLine !== 0) {\n        let html = this._renderLine(modifiedModel, modifiedOptions, modifiedModelOpts.tabSize, modifiedLine, languageIdCodec);\n\n        if (DiffReview._ttPolicy) {\n          html = DiffReview._ttPolicy.createHTML(html);\n        }\n\n        cell.insertAdjacentHTML('beforeend', html);\n        lineContent = modifiedModel.getLineContent(modifiedLine);\n      } else {\n        let html = this._renderLine(originalModel, originalOptions, originalModelOpts.tabSize, originalLine, languageIdCodec);\n\n        if (DiffReview._ttPolicy) {\n          html = DiffReview._ttPolicy.createHTML(html);\n        }\n\n        cell.insertAdjacentHTML('beforeend', html);\n        lineContent = originalModel.getLineContent(originalLine);\n      }\n\n      if (lineContent.length === 0) {\n        lineContent = nls.localize('blankLine', \"blank\");\n      }\n\n      let ariaLabel = '';\n\n      switch (type) {\n        case 0\n        /* Equal */\n        :\n          if (originalLine === modifiedLine) {\n            ariaLabel = nls.localize({\n              key: 'unchangedLine',\n              comment: ['The placeholders are contents of the line and should not be translated.']\n            }, \"{0} unchanged line {1}\", lineContent, originalLine);\n          } else {\n            ariaLabel = nls.localize('equalLine', \"{0} original line {1} modified line {2}\", lineContent, originalLine, modifiedLine);\n          }\n\n          break;\n\n        case 1\n        /* Insert */\n        :\n          ariaLabel = nls.localize('insertLine', \"+ {0} modified line {1}\", lineContent, modifiedLine);\n          break;\n\n        case 2\n        /* Delete */\n        :\n          ariaLabel = nls.localize('deleteLine', \"- {0} original line {1}\", lineContent, originalLine);\n          break;\n      }\n\n      row.setAttribute('aria-label', ariaLabel);\n      dest.appendChild(row);\n    }\n  }\n\n  static _renderLine(model, options, tabSize, lineNumber, languageIdCodec) {\n    const lineContent = model.getLineContent(lineNumber);\n    const fontInfo = options.get(44\n    /* fontInfo */\n    );\n    const lineTokens = LineTokens.createEmpty(lineContent, languageIdCodec);\n    const isBasicASCII = ViewLineRenderingData.isBasicASCII(lineContent, model.mightContainNonBasicASCII());\n    const containsRTL = ViewLineRenderingData.containsRTL(lineContent, isBasicASCII, model.mightContainRTL());\n    const r = renderViewLine(new RenderLineInput(fontInfo.isMonospace && !options.get(29\n    /* disableMonospaceOptimizations */\n    ), fontInfo.canUseHalfwidthRightwardsArrow, lineContent, false, isBasicASCII, containsRTL, 0, lineTokens, [], tabSize, 0, fontInfo.spaceWidth, fontInfo.middotWidth, fontInfo.wsmiddotWidth, options.get(105\n    /* stopRenderingLineAfter */\n    ), options.get(88\n    /* renderWhitespace */\n    ), options.get(83\n    /* renderControlCharacters */\n    ), options.get(45\n    /* fontLigatures */\n    ) !== EditorFontLigatures.OFF, null));\n    return r.html;\n  }\n\n};\nDiffReview._ttPolicy = (_a = window.trustedTypes) === null || _a === void 0 ? void 0 : _a.createPolicy('diffReview', {\n  createHTML: value => value\n});\nDiffReview = __decorate([__param(1, ILanguageService)], DiffReview);\nexport { DiffReview }; // theming\n\nregisterThemingParticipant((theme, collector) => {\n  const lineNumbers = theme.getColor(editorLineNumbers);\n\n  if (lineNumbers) {\n    collector.addRule(`.monaco-diff-editor .diff-review-line-number { color: ${lineNumbers}; }`);\n  }\n\n  const shadow = theme.getColor(scrollbarShadow);\n\n  if (shadow) {\n    collector.addRule(`.monaco-diff-editor .diff-review-shadow { box-shadow: ${shadow} 0 -6px 6px -6px inset; }`);\n  }\n});\n\nclass DiffReviewNext extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.diffReview.next',\n      label: nls.localize('editor.action.diffReview.next', \"Go to Next Difference\"),\n      alias: 'Go to Next Difference',\n      precondition: ContextKeyExpr.has('isInDiffEditor'),\n      kbOpts: {\n        kbExpr: null,\n        primary: 65\n        /* F7 */\n        ,\n        weight: 100\n        /* EditorContrib */\n\n      }\n    });\n  }\n\n  run(accessor, editor) {\n    const diffEditor = findFocusedDiffEditor(accessor);\n\n    if (diffEditor) {\n      diffEditor.diffReviewNext();\n    }\n  }\n\n}\n\nclass DiffReviewPrev extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.diffReview.prev',\n      label: nls.localize('editor.action.diffReview.prev', \"Go to Previous Difference\"),\n      alias: 'Go to Previous Difference',\n      precondition: ContextKeyExpr.has('isInDiffEditor'),\n      kbOpts: {\n        kbExpr: null,\n        primary: 1024\n        /* Shift */\n        | 65\n        /* F7 */\n        ,\n        weight: 100\n        /* EditorContrib */\n\n      }\n    });\n  }\n\n  run(accessor, editor) {\n    const diffEditor = findFocusedDiffEditor(accessor);\n\n    if (diffEditor) {\n      diffEditor.diffReviewPrev();\n    }\n  }\n\n}\n\nfunction findFocusedDiffEditor(accessor) {\n  const codeEditorService = accessor.get(ICodeEditorService);\n  const diffEditors = codeEditorService.listDiffEditors();\n  const activeCodeEditor = codeEditorService.getActiveCodeEditor();\n\n  if (!activeCodeEditor) {\n    return null;\n  }\n\n  for (let i = 0, len = diffEditors.length; i < len; i++) {\n    const diffEditor = diffEditors[i];\n\n    if (diffEditor.getModifiedEditor().getId() === activeCodeEditor.getId() || diffEditor.getOriginalEditor().getId() === activeCodeEditor.getId()) {\n      return diffEditor;\n    }\n  }\n\n  return null;\n}\n\nregisterEditorAction(DiffReviewNext);\nregisterEditorAction(DiffReviewPrev);","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/browser/widget/diffReview.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","_a","nls","dom","createFastDomNode","ActionBar","DomScrollableElement","Action","Disposable","applyFontInfo","EditorAction","registerEditorAction","ICodeEditorService","EditorFontLigatures","LineTokens","Position","editorLineNumbers","RenderLineInput","renderViewLine2","renderViewLine","ViewLineRenderingData","ContextKeyExpr","scrollbarShadow","registerThemingParticipant","ThemeIcon","Codicon","registerIcon","ILanguageService","DIFF_LINES_PADDING","DiffEntry","constructor","originalLineStart","originalLineEnd","modifiedLineStart","modifiedLineEnd","getType","Diff","entries","diffReviewInsertIcon","add","localize","diffReviewRemoveIcon","remove","diffReviewCloseIcon","close","DiffReview","diffEditor","_languageService","_width","_diffEditor","_isVisible","shadow","document","createElement","setClassName","actionBarContainer","_actionBar","_register","domNode","push","asClassName","hide","label","icon","_content","setAttribute","scrollbar","appendChild","getDomNode","onDidUpdateDiff","_diffs","_compute","_render","getModifiedEditor","onDidChangeCursorPosition","addStandardDisposableListener","preventDefault","row","findParentWithClass","_goToRow","equals","_getNextRow","_getPrevRow","accept","_currentDiff","prev","index","currentIndex","len","_findDiffIndex","getPosition","setPosition","setSelection","startColumn","startLineNumber","endColumn","endLineNumber","doLayout","jumpToLineNumber","current","_getCurrentFocusedRow","lineNumber","parseInt","getAttribute","isNaN","revealPosition","updateOptions","readOnly","focus","_getFirstRow","previousElementSibling","nextElementSibling","querySelector","activeElement","test","className","tabIndex","scanDomNode","isVisible","layout","top","width","height","setTop","setWidth","setHeight","setDisplay","lineChanges","getLineChanges","originalModel","getOriginalEditor","getModel","modifiedModel","_mergeAdjacent","getLineCount","originalLineCount","modifiedLineCount","diffs","diffsLength","lineChange","originalStart","originalStartLineNumber","originalEnd","originalEndLineNumber","modifiedStart","modifiedStartLineNumber","modifiedEnd","modifiedEndLineNumber","rLength","originalEqualAbove","modifiedEqualAbove","minOriginal","minModified","prevLineChange","fromOriginal","fromModified","delta","originalEqualBelow","modifiedEqualBelow","maxOriginal","maxModified","nextLineChange","toOriginal","toModified","curr","thisDiff","currLast","thisFirst","concat","slice","pos","diff","lastModifiedLine","originalOptions","getOptions","modifiedOptions","originalModelOpts","modifiedModelOpts","clearNode","diffIndex","container","get","minOriginalLine","maxOriginalLine","minModifiedLine","maxModifiedLine","diffEntry","header","cell","originalChangedLinesCnt","modifiedChangedLinesCnt","createTextNode","String","getAriaLines","lines","originalChangedLinesCntAria","modifiedChangedLinesCntAria","comment","lineHeight","modLine","_renderSection","languageIdCodec","dest","type","rowClassName","lineNumbersExtraClassName","spacerClassName","spacerIcon","cnt","Math","max","originalLayoutInfo","originalLineNumbersWidth","glyphMarginWidth","lineNumbersWidth","modifiedLayoutInfo","modifiedLineNumbersWidth","originalLine","modifiedLine","style","minWidth","originalLineNumber","innerText","modifiedLineNumber","paddingRight","spacer","spacerCodicon","lineContent","html","_renderLine","tabSize","_ttPolicy","createHTML","insertAdjacentHTML","getLineContent","ariaLabel","model","options","fontInfo","lineTokens","createEmpty","isBasicASCII","mightContainNonBasicASCII","containsRTL","mightContainRTL","isMonospace","canUseHalfwidthRightwardsArrow","spaceWidth","middotWidth","wsmiddotWidth","OFF","window","trustedTypes","createPolicy","theme","collector","lineNumbers","getColor","addRule","DiffReviewNext","id","alias","precondition","has","kbOpts","kbExpr","primary","weight","run","accessor","editor","findFocusedDiffEditor","diffReviewNext","DiffReviewPrev","diffReviewPrev","codeEditorService","diffEditors","listDiffEditors","activeCodeEditor","getActiveCodeEditor","getId"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar _a;\nimport './media/diffReview.css';\nimport * as nls from '../../../nls.js';\nimport * as dom from '../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\nimport { ActionBar } from '../../../base/browser/ui/actionbar/actionbar.js';\nimport { DomScrollableElement } from '../../../base/browser/ui/scrollbar/scrollableElement.js';\nimport { Action } from '../../../base/common/actions.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { applyFontInfo } from '../config/domFontInfo.js';\nimport { EditorAction, registerEditorAction } from '../editorExtensions.js';\nimport { ICodeEditorService } from '../services/codeEditorService.js';\nimport { EditorFontLigatures } from '../../common/config/editorOptions.js';\nimport { LineTokens } from '../../common/tokens/lineTokens.js';\nimport { Position } from '../../common/core/position.js';\nimport { editorLineNumbers } from '../../common/core/editorColorRegistry.js';\nimport { RenderLineInput, renderViewLine2 as renderViewLine } from '../../common/viewLayout/viewLineRenderer.js';\nimport { ViewLineRenderingData } from '../../common/viewModel/viewModel.js';\nimport { ContextKeyExpr } from '../../../platform/contextkey/common/contextkey.js';\nimport { scrollbarShadow } from '../../../platform/theme/common/colorRegistry.js';\nimport { registerThemingParticipant, ThemeIcon } from '../../../platform/theme/common/themeService.js';\nimport { Codicon } from '../../../base/common/codicons.js';\nimport { registerIcon } from '../../../platform/theme/common/iconRegistry.js';\nimport { ILanguageService } from '../../common/services/language.js';\nconst DIFF_LINES_PADDING = 3;\nclass DiffEntry {\n    constructor(originalLineStart, originalLineEnd, modifiedLineStart, modifiedLineEnd) {\n        this.originalLineStart = originalLineStart;\n        this.originalLineEnd = originalLineEnd;\n        this.modifiedLineStart = modifiedLineStart;\n        this.modifiedLineEnd = modifiedLineEnd;\n    }\n    getType() {\n        if (this.originalLineStart === 0) {\n            return 1 /* Insert */;\n        }\n        if (this.modifiedLineStart === 0) {\n            return 2 /* Delete */;\n        }\n        return 0 /* Equal */;\n    }\n}\nclass Diff {\n    constructor(entries) {\n        this.entries = entries;\n    }\n}\nconst diffReviewInsertIcon = registerIcon('diff-review-insert', Codicon.add, nls.localize('diffReviewInsertIcon', 'Icon for \\'Insert\\' in diff review.'));\nconst diffReviewRemoveIcon = registerIcon('diff-review-remove', Codicon.remove, nls.localize('diffReviewRemoveIcon', 'Icon for \\'Remove\\' in diff review.'));\nconst diffReviewCloseIcon = registerIcon('diff-review-close', Codicon.close, nls.localize('diffReviewCloseIcon', 'Icon for \\'Close\\' in diff review.'));\nlet DiffReview = class DiffReview extends Disposable {\n    constructor(diffEditor, _languageService) {\n        super();\n        this._languageService = _languageService;\n        this._width = 0;\n        this._diffEditor = diffEditor;\n        this._isVisible = false;\n        this.shadow = createFastDomNode(document.createElement('div'));\n        this.shadow.setClassName('diff-review-shadow');\n        this.actionBarContainer = createFastDomNode(document.createElement('div'));\n        this.actionBarContainer.setClassName('diff-review-actions');\n        this._actionBar = this._register(new ActionBar(this.actionBarContainer.domNode));\n        this._actionBar.push(new Action('diffreview.close', nls.localize('label.close', \"Close\"), 'close-diff-review ' + ThemeIcon.asClassName(diffReviewCloseIcon), true, () => __awaiter(this, void 0, void 0, function* () { return this.hide(); })), { label: false, icon: true });\n        this.domNode = createFastDomNode(document.createElement('div'));\n        this.domNode.setClassName('diff-review monaco-editor-background');\n        this._content = createFastDomNode(document.createElement('div'));\n        this._content.setClassName('diff-review-content');\n        this._content.setAttribute('role', 'code');\n        this.scrollbar = this._register(new DomScrollableElement(this._content.domNode, {}));\n        this.domNode.domNode.appendChild(this.scrollbar.getDomNode());\n        this._register(diffEditor.onDidUpdateDiff(() => {\n            if (!this._isVisible) {\n                return;\n            }\n            this._diffs = this._compute();\n            this._render();\n        }));\n        this._register(diffEditor.getModifiedEditor().onDidChangeCursorPosition(() => {\n            if (!this._isVisible) {\n                return;\n            }\n            this._render();\n        }));\n        this._register(dom.addStandardDisposableListener(this.domNode.domNode, 'click', (e) => {\n            e.preventDefault();\n            const row = dom.findParentWithClass(e.target, 'diff-review-row');\n            if (row) {\n                this._goToRow(row);\n            }\n        }));\n        this._register(dom.addStandardDisposableListener(this.domNode.domNode, 'keydown', (e) => {\n            if (e.equals(18 /* DownArrow */)\n                || e.equals(2048 /* CtrlCmd */ | 18 /* DownArrow */)\n                || e.equals(512 /* Alt */ | 18 /* DownArrow */)) {\n                e.preventDefault();\n                this._goToRow(this._getNextRow());\n            }\n            if (e.equals(16 /* UpArrow */)\n                || e.equals(2048 /* CtrlCmd */ | 16 /* UpArrow */)\n                || e.equals(512 /* Alt */ | 16 /* UpArrow */)) {\n                e.preventDefault();\n                this._goToRow(this._getPrevRow());\n            }\n            if (e.equals(9 /* Escape */)\n                || e.equals(2048 /* CtrlCmd */ | 9 /* Escape */)\n                || e.equals(512 /* Alt */ | 9 /* Escape */)\n                || e.equals(1024 /* Shift */ | 9 /* Escape */)) {\n                e.preventDefault();\n                this.hide();\n            }\n            if (e.equals(10 /* Space */)\n                || e.equals(3 /* Enter */)) {\n                e.preventDefault();\n                this.accept();\n            }\n        }));\n        this._diffs = [];\n        this._currentDiff = null;\n    }\n    prev() {\n        let index = 0;\n        if (!this._isVisible) {\n            this._diffs = this._compute();\n        }\n        if (this._isVisible) {\n            let currentIndex = -1;\n            for (let i = 0, len = this._diffs.length; i < len; i++) {\n                if (this._diffs[i] === this._currentDiff) {\n                    currentIndex = i;\n                    break;\n                }\n            }\n            index = (this._diffs.length + currentIndex - 1);\n        }\n        else {\n            index = this._findDiffIndex(this._diffEditor.getPosition());\n        }\n        if (this._diffs.length === 0) {\n            // Nothing to do\n            return;\n        }\n        index = index % this._diffs.length;\n        const entries = this._diffs[index].entries;\n        this._diffEditor.setPosition(new Position(entries[0].modifiedLineStart, 1));\n        this._diffEditor.setSelection({ startColumn: 1, startLineNumber: entries[0].modifiedLineStart, endColumn: 1073741824 /* MAX_SAFE_SMALL_INTEGER */, endLineNumber: entries[entries.length - 1].modifiedLineEnd });\n        this._isVisible = true;\n        this._diffEditor.doLayout();\n        this._render();\n        this._goToRow(this._getNextRow());\n    }\n    next() {\n        let index = 0;\n        if (!this._isVisible) {\n            this._diffs = this._compute();\n        }\n        if (this._isVisible) {\n            let currentIndex = -1;\n            for (let i = 0, len = this._diffs.length; i < len; i++) {\n                if (this._diffs[i] === this._currentDiff) {\n                    currentIndex = i;\n                    break;\n                }\n            }\n            index = (currentIndex + 1);\n        }\n        else {\n            index = this._findDiffIndex(this._diffEditor.getPosition());\n        }\n        if (this._diffs.length === 0) {\n            // Nothing to do\n            return;\n        }\n        index = index % this._diffs.length;\n        const entries = this._diffs[index].entries;\n        this._diffEditor.setPosition(new Position(entries[0].modifiedLineStart, 1));\n        this._diffEditor.setSelection({ startColumn: 1, startLineNumber: entries[0].modifiedLineStart, endColumn: 1073741824 /* MAX_SAFE_SMALL_INTEGER */, endLineNumber: entries[entries.length - 1].modifiedLineEnd });\n        this._isVisible = true;\n        this._diffEditor.doLayout();\n        this._render();\n        this._goToRow(this._getNextRow());\n    }\n    accept() {\n        let jumpToLineNumber = -1;\n        const current = this._getCurrentFocusedRow();\n        if (current) {\n            const lineNumber = parseInt(current.getAttribute('data-line'), 10);\n            if (!isNaN(lineNumber)) {\n                jumpToLineNumber = lineNumber;\n            }\n        }\n        this.hide();\n        if (jumpToLineNumber !== -1) {\n            this._diffEditor.setPosition(new Position(jumpToLineNumber, 1));\n            this._diffEditor.revealPosition(new Position(jumpToLineNumber, 1), 1 /* Immediate */);\n        }\n    }\n    hide() {\n        this._isVisible = false;\n        this._diffEditor.updateOptions({ readOnly: false });\n        this._diffEditor.focus();\n        this._diffEditor.doLayout();\n        this._render();\n    }\n    _getPrevRow() {\n        const current = this._getCurrentFocusedRow();\n        if (!current) {\n            return this._getFirstRow();\n        }\n        if (current.previousElementSibling) {\n            return current.previousElementSibling;\n        }\n        return current;\n    }\n    _getNextRow() {\n        const current = this._getCurrentFocusedRow();\n        if (!current) {\n            return this._getFirstRow();\n        }\n        if (current.nextElementSibling) {\n            return current.nextElementSibling;\n        }\n        return current;\n    }\n    _getFirstRow() {\n        return this.domNode.domNode.querySelector('.diff-review-row');\n    }\n    _getCurrentFocusedRow() {\n        const result = document.activeElement;\n        if (result && /diff-review-row/.test(result.className)) {\n            return result;\n        }\n        return null;\n    }\n    _goToRow(row) {\n        const prev = this._getCurrentFocusedRow();\n        row.tabIndex = 0;\n        row.focus();\n        if (prev && prev !== row) {\n            prev.tabIndex = -1;\n        }\n        this.scrollbar.scanDomNode();\n    }\n    isVisible() {\n        return this._isVisible;\n    }\n    layout(top, width, height) {\n        this._width = width;\n        this.shadow.setTop(top - 6);\n        this.shadow.setWidth(width);\n        this.shadow.setHeight(this._isVisible ? 6 : 0);\n        this.domNode.setTop(top);\n        this.domNode.setWidth(width);\n        this.domNode.setHeight(height);\n        this._content.setHeight(height);\n        this._content.setWidth(width);\n        if (this._isVisible) {\n            this.actionBarContainer.setAttribute('aria-hidden', 'false');\n            this.actionBarContainer.setDisplay('block');\n        }\n        else {\n            this.actionBarContainer.setAttribute('aria-hidden', 'true');\n            this.actionBarContainer.setDisplay('none');\n        }\n    }\n    _compute() {\n        const lineChanges = this._diffEditor.getLineChanges();\n        if (!lineChanges || lineChanges.length === 0) {\n            return [];\n        }\n        const originalModel = this._diffEditor.getOriginalEditor().getModel();\n        const modifiedModel = this._diffEditor.getModifiedEditor().getModel();\n        if (!originalModel || !modifiedModel) {\n            return [];\n        }\n        return DiffReview._mergeAdjacent(lineChanges, originalModel.getLineCount(), modifiedModel.getLineCount());\n    }\n    static _mergeAdjacent(lineChanges, originalLineCount, modifiedLineCount) {\n        if (!lineChanges || lineChanges.length === 0) {\n            return [];\n        }\n        const diffs = [];\n        let diffsLength = 0;\n        for (let i = 0, len = lineChanges.length; i < len; i++) {\n            const lineChange = lineChanges[i];\n            const originalStart = lineChange.originalStartLineNumber;\n            const originalEnd = lineChange.originalEndLineNumber;\n            const modifiedStart = lineChange.modifiedStartLineNumber;\n            const modifiedEnd = lineChange.modifiedEndLineNumber;\n            const r = [];\n            let rLength = 0;\n            // Emit before anchors\n            {\n                const originalEqualAbove = (originalEnd === 0 ? originalStart : originalStart - 1);\n                const modifiedEqualAbove = (modifiedEnd === 0 ? modifiedStart : modifiedStart - 1);\n                // Make sure we don't step into the previous diff\n                let minOriginal = 1;\n                let minModified = 1;\n                if (i > 0) {\n                    const prevLineChange = lineChanges[i - 1];\n                    if (prevLineChange.originalEndLineNumber === 0) {\n                        minOriginal = prevLineChange.originalStartLineNumber + 1;\n                    }\n                    else {\n                        minOriginal = prevLineChange.originalEndLineNumber + 1;\n                    }\n                    if (prevLineChange.modifiedEndLineNumber === 0) {\n                        minModified = prevLineChange.modifiedStartLineNumber + 1;\n                    }\n                    else {\n                        minModified = prevLineChange.modifiedEndLineNumber + 1;\n                    }\n                }\n                let fromOriginal = originalEqualAbove - DIFF_LINES_PADDING + 1;\n                let fromModified = modifiedEqualAbove - DIFF_LINES_PADDING + 1;\n                if (fromOriginal < minOriginal) {\n                    const delta = minOriginal - fromOriginal;\n                    fromOriginal = fromOriginal + delta;\n                    fromModified = fromModified + delta;\n                }\n                if (fromModified < minModified) {\n                    const delta = minModified - fromModified;\n                    fromOriginal = fromOriginal + delta;\n                    fromModified = fromModified + delta;\n                }\n                r[rLength++] = new DiffEntry(fromOriginal, originalEqualAbove, fromModified, modifiedEqualAbove);\n            }\n            // Emit deleted lines\n            {\n                if (originalEnd !== 0) {\n                    r[rLength++] = new DiffEntry(originalStart, originalEnd, 0, 0);\n                }\n            }\n            // Emit inserted lines\n            {\n                if (modifiedEnd !== 0) {\n                    r[rLength++] = new DiffEntry(0, 0, modifiedStart, modifiedEnd);\n                }\n            }\n            // Emit after anchors\n            {\n                const originalEqualBelow = (originalEnd === 0 ? originalStart + 1 : originalEnd + 1);\n                const modifiedEqualBelow = (modifiedEnd === 0 ? modifiedStart + 1 : modifiedEnd + 1);\n                // Make sure we don't step into the next diff\n                let maxOriginal = originalLineCount;\n                let maxModified = modifiedLineCount;\n                if (i + 1 < len) {\n                    const nextLineChange = lineChanges[i + 1];\n                    if (nextLineChange.originalEndLineNumber === 0) {\n                        maxOriginal = nextLineChange.originalStartLineNumber;\n                    }\n                    else {\n                        maxOriginal = nextLineChange.originalStartLineNumber - 1;\n                    }\n                    if (nextLineChange.modifiedEndLineNumber === 0) {\n                        maxModified = nextLineChange.modifiedStartLineNumber;\n                    }\n                    else {\n                        maxModified = nextLineChange.modifiedStartLineNumber - 1;\n                    }\n                }\n                let toOriginal = originalEqualBelow + DIFF_LINES_PADDING - 1;\n                let toModified = modifiedEqualBelow + DIFF_LINES_PADDING - 1;\n                if (toOriginal > maxOriginal) {\n                    const delta = maxOriginal - toOriginal;\n                    toOriginal = toOriginal + delta;\n                    toModified = toModified + delta;\n                }\n                if (toModified > maxModified) {\n                    const delta = maxModified - toModified;\n                    toOriginal = toOriginal + delta;\n                    toModified = toModified + delta;\n                }\n                r[rLength++] = new DiffEntry(originalEqualBelow, toOriginal, modifiedEqualBelow, toModified);\n            }\n            diffs[diffsLength++] = new Diff(r);\n        }\n        // Merge adjacent diffs\n        let curr = diffs[0].entries;\n        const r = [];\n        let rLength = 0;\n        for (let i = 1, len = diffs.length; i < len; i++) {\n            const thisDiff = diffs[i].entries;\n            const currLast = curr[curr.length - 1];\n            const thisFirst = thisDiff[0];\n            if (currLast.getType() === 0 /* Equal */\n                && thisFirst.getType() === 0 /* Equal */\n                && thisFirst.originalLineStart <= currLast.originalLineEnd) {\n                // We are dealing with equal lines that overlap\n                curr[curr.length - 1] = new DiffEntry(currLast.originalLineStart, thisFirst.originalLineEnd, currLast.modifiedLineStart, thisFirst.modifiedLineEnd);\n                curr = curr.concat(thisDiff.slice(1));\n                continue;\n            }\n            r[rLength++] = new Diff(curr);\n            curr = thisDiff;\n        }\n        r[rLength++] = new Diff(curr);\n        return r;\n    }\n    _findDiffIndex(pos) {\n        const lineNumber = pos.lineNumber;\n        for (let i = 0, len = this._diffs.length; i < len; i++) {\n            const diff = this._diffs[i].entries;\n            const lastModifiedLine = diff[diff.length - 1].modifiedLineEnd;\n            if (lineNumber <= lastModifiedLine) {\n                return i;\n            }\n        }\n        return 0;\n    }\n    _render() {\n        const originalOptions = this._diffEditor.getOriginalEditor().getOptions();\n        const modifiedOptions = this._diffEditor.getModifiedEditor().getOptions();\n        const originalModel = this._diffEditor.getOriginalEditor().getModel();\n        const modifiedModel = this._diffEditor.getModifiedEditor().getModel();\n        const originalModelOpts = originalModel.getOptions();\n        const modifiedModelOpts = modifiedModel.getOptions();\n        if (!this._isVisible || !originalModel || !modifiedModel) {\n            dom.clearNode(this._content.domNode);\n            this._currentDiff = null;\n            this.scrollbar.scanDomNode();\n            return;\n        }\n        this._diffEditor.updateOptions({ readOnly: true });\n        const diffIndex = this._findDiffIndex(this._diffEditor.getPosition());\n        if (this._diffs[diffIndex] === this._currentDiff) {\n            return;\n        }\n        this._currentDiff = this._diffs[diffIndex];\n        const diffs = this._diffs[diffIndex].entries;\n        const container = document.createElement('div');\n        container.className = 'diff-review-table';\n        container.setAttribute('role', 'list');\n        container.setAttribute('aria-label', 'Difference review. Use \"Stage | Unstage | Revert Selected Ranges\" commands');\n        applyFontInfo(container, modifiedOptions.get(44 /* fontInfo */));\n        let minOriginalLine = 0;\n        let maxOriginalLine = 0;\n        let minModifiedLine = 0;\n        let maxModifiedLine = 0;\n        for (let i = 0, len = diffs.length; i < len; i++) {\n            const diffEntry = diffs[i];\n            const originalLineStart = diffEntry.originalLineStart;\n            const originalLineEnd = diffEntry.originalLineEnd;\n            const modifiedLineStart = diffEntry.modifiedLineStart;\n            const modifiedLineEnd = diffEntry.modifiedLineEnd;\n            if (originalLineStart !== 0 && ((minOriginalLine === 0 || originalLineStart < minOriginalLine))) {\n                minOriginalLine = originalLineStart;\n            }\n            if (originalLineEnd !== 0 && ((maxOriginalLine === 0 || originalLineEnd > maxOriginalLine))) {\n                maxOriginalLine = originalLineEnd;\n            }\n            if (modifiedLineStart !== 0 && ((minModifiedLine === 0 || modifiedLineStart < minModifiedLine))) {\n                minModifiedLine = modifiedLineStart;\n            }\n            if (modifiedLineEnd !== 0 && ((maxModifiedLine === 0 || modifiedLineEnd > maxModifiedLine))) {\n                maxModifiedLine = modifiedLineEnd;\n            }\n        }\n        const header = document.createElement('div');\n        header.className = 'diff-review-row';\n        const cell = document.createElement('div');\n        cell.className = 'diff-review-cell diff-review-summary';\n        const originalChangedLinesCnt = maxOriginalLine - minOriginalLine + 1;\n        const modifiedChangedLinesCnt = maxModifiedLine - minModifiedLine + 1;\n        cell.appendChild(document.createTextNode(`${diffIndex + 1}/${this._diffs.length}: @@ -${minOriginalLine},${originalChangedLinesCnt} +${minModifiedLine},${modifiedChangedLinesCnt} @@`));\n        header.setAttribute('data-line', String(minModifiedLine));\n        const getAriaLines = (lines) => {\n            if (lines === 0) {\n                return nls.localize('no_lines_changed', \"no lines changed\");\n            }\n            else if (lines === 1) {\n                return nls.localize('one_line_changed', \"1 line changed\");\n            }\n            else {\n                return nls.localize('more_lines_changed', \"{0} lines changed\", lines);\n            }\n        };\n        const originalChangedLinesCntAria = getAriaLines(originalChangedLinesCnt);\n        const modifiedChangedLinesCntAria = getAriaLines(modifiedChangedLinesCnt);\n        header.setAttribute('aria-label', nls.localize({\n            key: 'header',\n            comment: [\n                'This is the ARIA label for a git diff header.',\n                'A git diff header looks like this: @@ -154,12 +159,39 @@.',\n                'That encodes that at original line 154 (which is now line 159), 12 lines were removed/changed with 39 lines.',\n                'Variables 0 and 1 refer to the diff index out of total number of diffs.',\n                'Variables 2 and 4 will be numbers (a line number).',\n                'Variables 3 and 5 will be \"no lines changed\", \"1 line changed\" or \"X lines changed\", localized separately.'\n            ]\n        }, \"Difference {0} of {1}: original line {2}, {3}, modified line {4}, {5}\", (diffIndex + 1), this._diffs.length, minOriginalLine, originalChangedLinesCntAria, minModifiedLine, modifiedChangedLinesCntAria));\n        header.appendChild(cell);\n        // @@ -504,7 +517,7 @@\n        header.setAttribute('role', 'listitem');\n        container.appendChild(header);\n        const lineHeight = modifiedOptions.get(59 /* lineHeight */);\n        let modLine = minModifiedLine;\n        for (let i = 0, len = diffs.length; i < len; i++) {\n            const diffEntry = diffs[i];\n            DiffReview._renderSection(container, diffEntry, modLine, lineHeight, this._width, originalOptions, originalModel, originalModelOpts, modifiedOptions, modifiedModel, modifiedModelOpts, this._languageService.languageIdCodec);\n            if (diffEntry.modifiedLineStart !== 0) {\n                modLine = diffEntry.modifiedLineEnd;\n            }\n        }\n        dom.clearNode(this._content.domNode);\n        this._content.domNode.appendChild(container);\n        this.scrollbar.scanDomNode();\n    }\n    static _renderSection(dest, diffEntry, modLine, lineHeight, width, originalOptions, originalModel, originalModelOpts, modifiedOptions, modifiedModel, modifiedModelOpts, languageIdCodec) {\n        const type = diffEntry.getType();\n        let rowClassName = 'diff-review-row';\n        let lineNumbersExtraClassName = '';\n        const spacerClassName = 'diff-review-spacer';\n        let spacerIcon = null;\n        switch (type) {\n            case 1 /* Insert */:\n                rowClassName = 'diff-review-row line-insert';\n                lineNumbersExtraClassName = ' char-insert';\n                spacerIcon = diffReviewInsertIcon;\n                break;\n            case 2 /* Delete */:\n                rowClassName = 'diff-review-row line-delete';\n                lineNumbersExtraClassName = ' char-delete';\n                spacerIcon = diffReviewRemoveIcon;\n                break;\n        }\n        const originalLineStart = diffEntry.originalLineStart;\n        const originalLineEnd = diffEntry.originalLineEnd;\n        const modifiedLineStart = diffEntry.modifiedLineStart;\n        const modifiedLineEnd = diffEntry.modifiedLineEnd;\n        const cnt = Math.max(modifiedLineEnd - modifiedLineStart, originalLineEnd - originalLineStart);\n        const originalLayoutInfo = originalOptions.get(131 /* layoutInfo */);\n        const originalLineNumbersWidth = originalLayoutInfo.glyphMarginWidth + originalLayoutInfo.lineNumbersWidth;\n        const modifiedLayoutInfo = modifiedOptions.get(131 /* layoutInfo */);\n        const modifiedLineNumbersWidth = 10 + modifiedLayoutInfo.glyphMarginWidth + modifiedLayoutInfo.lineNumbersWidth;\n        for (let i = 0; i <= cnt; i++) {\n            const originalLine = (originalLineStart === 0 ? 0 : originalLineStart + i);\n            const modifiedLine = (modifiedLineStart === 0 ? 0 : modifiedLineStart + i);\n            const row = document.createElement('div');\n            row.style.minWidth = width + 'px';\n            row.className = rowClassName;\n            row.setAttribute('role', 'listitem');\n            if (modifiedLine !== 0) {\n                modLine = modifiedLine;\n            }\n            row.setAttribute('data-line', String(modLine));\n            const cell = document.createElement('div');\n            cell.className = 'diff-review-cell';\n            cell.style.height = `${lineHeight}px`;\n            row.appendChild(cell);\n            const originalLineNumber = document.createElement('span');\n            originalLineNumber.style.width = (originalLineNumbersWidth + 'px');\n            originalLineNumber.style.minWidth = (originalLineNumbersWidth + 'px');\n            originalLineNumber.className = 'diff-review-line-number' + lineNumbersExtraClassName;\n            if (originalLine !== 0) {\n                originalLineNumber.appendChild(document.createTextNode(String(originalLine)));\n            }\n            else {\n                originalLineNumber.innerText = '\\u00a0';\n            }\n            cell.appendChild(originalLineNumber);\n            const modifiedLineNumber = document.createElement('span');\n            modifiedLineNumber.style.width = (modifiedLineNumbersWidth + 'px');\n            modifiedLineNumber.style.minWidth = (modifiedLineNumbersWidth + 'px');\n            modifiedLineNumber.style.paddingRight = '10px';\n            modifiedLineNumber.className = 'diff-review-line-number' + lineNumbersExtraClassName;\n            if (modifiedLine !== 0) {\n                modifiedLineNumber.appendChild(document.createTextNode(String(modifiedLine)));\n            }\n            else {\n                modifiedLineNumber.innerText = '\\u00a0';\n            }\n            cell.appendChild(modifiedLineNumber);\n            const spacer = document.createElement('span');\n            spacer.className = spacerClassName;\n            if (spacerIcon) {\n                const spacerCodicon = document.createElement('span');\n                spacerCodicon.className = ThemeIcon.asClassName(spacerIcon);\n                spacerCodicon.innerText = '\\u00a0\\u00a0';\n                spacer.appendChild(spacerCodicon);\n            }\n            else {\n                spacer.innerText = '\\u00a0\\u00a0';\n            }\n            cell.appendChild(spacer);\n            let lineContent;\n            if (modifiedLine !== 0) {\n                let html = this._renderLine(modifiedModel, modifiedOptions, modifiedModelOpts.tabSize, modifiedLine, languageIdCodec);\n                if (DiffReview._ttPolicy) {\n                    html = DiffReview._ttPolicy.createHTML(html);\n                }\n                cell.insertAdjacentHTML('beforeend', html);\n                lineContent = modifiedModel.getLineContent(modifiedLine);\n            }\n            else {\n                let html = this._renderLine(originalModel, originalOptions, originalModelOpts.tabSize, originalLine, languageIdCodec);\n                if (DiffReview._ttPolicy) {\n                    html = DiffReview._ttPolicy.createHTML(html);\n                }\n                cell.insertAdjacentHTML('beforeend', html);\n                lineContent = originalModel.getLineContent(originalLine);\n            }\n            if (lineContent.length === 0) {\n                lineContent = nls.localize('blankLine', \"blank\");\n            }\n            let ariaLabel = '';\n            switch (type) {\n                case 0 /* Equal */:\n                    if (originalLine === modifiedLine) {\n                        ariaLabel = nls.localize({ key: 'unchangedLine', comment: ['The placeholders are contents of the line and should not be translated.'] }, \"{0} unchanged line {1}\", lineContent, originalLine);\n                    }\n                    else {\n                        ariaLabel = nls.localize('equalLine', \"{0} original line {1} modified line {2}\", lineContent, originalLine, modifiedLine);\n                    }\n                    break;\n                case 1 /* Insert */:\n                    ariaLabel = nls.localize('insertLine', \"+ {0} modified line {1}\", lineContent, modifiedLine);\n                    break;\n                case 2 /* Delete */:\n                    ariaLabel = nls.localize('deleteLine', \"- {0} original line {1}\", lineContent, originalLine);\n                    break;\n            }\n            row.setAttribute('aria-label', ariaLabel);\n            dest.appendChild(row);\n        }\n    }\n    static _renderLine(model, options, tabSize, lineNumber, languageIdCodec) {\n        const lineContent = model.getLineContent(lineNumber);\n        const fontInfo = options.get(44 /* fontInfo */);\n        const lineTokens = LineTokens.createEmpty(lineContent, languageIdCodec);\n        const isBasicASCII = ViewLineRenderingData.isBasicASCII(lineContent, model.mightContainNonBasicASCII());\n        const containsRTL = ViewLineRenderingData.containsRTL(lineContent, isBasicASCII, model.mightContainRTL());\n        const r = renderViewLine(new RenderLineInput((fontInfo.isMonospace && !options.get(29 /* disableMonospaceOptimizations */)), fontInfo.canUseHalfwidthRightwardsArrow, lineContent, false, isBasicASCII, containsRTL, 0, lineTokens, [], tabSize, 0, fontInfo.spaceWidth, fontInfo.middotWidth, fontInfo.wsmiddotWidth, options.get(105 /* stopRenderingLineAfter */), options.get(88 /* renderWhitespace */), options.get(83 /* renderControlCharacters */), options.get(45 /* fontLigatures */) !== EditorFontLigatures.OFF, null));\n        return r.html;\n    }\n};\nDiffReview._ttPolicy = (_a = window.trustedTypes) === null || _a === void 0 ? void 0 : _a.createPolicy('diffReview', { createHTML: value => value });\nDiffReview = __decorate([\n    __param(1, ILanguageService)\n], DiffReview);\nexport { DiffReview };\n// theming\nregisterThemingParticipant((theme, collector) => {\n    const lineNumbers = theme.getColor(editorLineNumbers);\n    if (lineNumbers) {\n        collector.addRule(`.monaco-diff-editor .diff-review-line-number { color: ${lineNumbers}; }`);\n    }\n    const shadow = theme.getColor(scrollbarShadow);\n    if (shadow) {\n        collector.addRule(`.monaco-diff-editor .diff-review-shadow { box-shadow: ${shadow} 0 -6px 6px -6px inset; }`);\n    }\n});\nclass DiffReviewNext extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.diffReview.next',\n            label: nls.localize('editor.action.diffReview.next', \"Go to Next Difference\"),\n            alias: 'Go to Next Difference',\n            precondition: ContextKeyExpr.has('isInDiffEditor'),\n            kbOpts: {\n                kbExpr: null,\n                primary: 65 /* F7 */,\n                weight: 100 /* EditorContrib */\n            }\n        });\n    }\n    run(accessor, editor) {\n        const diffEditor = findFocusedDiffEditor(accessor);\n        if (diffEditor) {\n            diffEditor.diffReviewNext();\n        }\n    }\n}\nclass DiffReviewPrev extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.diffReview.prev',\n            label: nls.localize('editor.action.diffReview.prev', \"Go to Previous Difference\"),\n            alias: 'Go to Previous Difference',\n            precondition: ContextKeyExpr.has('isInDiffEditor'),\n            kbOpts: {\n                kbExpr: null,\n                primary: 1024 /* Shift */ | 65 /* F7 */,\n                weight: 100 /* EditorContrib */\n            }\n        });\n    }\n    run(accessor, editor) {\n        const diffEditor = findFocusedDiffEditor(accessor);\n        if (diffEditor) {\n            diffEditor.diffReviewPrev();\n        }\n    }\n}\nfunction findFocusedDiffEditor(accessor) {\n    const codeEditorService = accessor.get(ICodeEditorService);\n    const diffEditors = codeEditorService.listDiffEditors();\n    const activeCodeEditor = codeEditorService.getActiveCodeEditor();\n    if (!activeCodeEditor) {\n        return null;\n    }\n    for (let i = 0, len = diffEditors.length; i < len; i++) {\n        const diffEditor = diffEditors[i];\n        if (diffEditor.getModifiedEditor().getId() === activeCodeEditor.getId() || diffEditor.getOriginalEditor().getId() === activeCodeEditor.getId()) {\n            return diffEditor;\n        }\n    }\n    return null;\n}\nregisterEditorAction(DiffReviewNext);\nregisterEditorAction(DiffReviewPrev);\n"]},"metadata":{},"sourceType":"module"}