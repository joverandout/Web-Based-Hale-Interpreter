{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './glyphMargin.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nexport class DecorationToRender {\n  constructor(startLineNumber, endLineNumber, className) {\n    this._decorationToRenderBrand = undefined;\n    this.startLineNumber = +startLineNumber;\n    this.endLineNumber = +endLineNumber;\n    this.className = String(className);\n  }\n\n}\nexport class DedupOverlay extends DynamicViewOverlay {\n  _render(visibleStartLineNumber, visibleEndLineNumber, decorations) {\n    const output = [];\n\n    for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n      const lineIndex = lineNumber - visibleStartLineNumber;\n      output[lineIndex] = [];\n    }\n\n    if (decorations.length === 0) {\n      return output;\n    }\n\n    decorations.sort((a, b) => {\n      if (a.className === b.className) {\n        if (a.startLineNumber === b.startLineNumber) {\n          return a.endLineNumber - b.endLineNumber;\n        }\n\n        return a.startLineNumber - b.startLineNumber;\n      }\n\n      return a.className < b.className ? -1 : 1;\n    });\n    let prevClassName = null;\n    let prevEndLineIndex = 0;\n\n    for (let i = 0, len = decorations.length; i < len; i++) {\n      const d = decorations[i];\n      const className = d.className;\n      let startLineIndex = Math.max(d.startLineNumber, visibleStartLineNumber) - visibleStartLineNumber;\n      const endLineIndex = Math.min(d.endLineNumber, visibleEndLineNumber) - visibleStartLineNumber;\n\n      if (prevClassName === className) {\n        startLineIndex = Math.max(prevEndLineIndex + 1, startLineIndex);\n        prevEndLineIndex = Math.max(prevEndLineIndex, endLineIndex);\n      } else {\n        prevClassName = className;\n        prevEndLineIndex = endLineIndex;\n      }\n\n      for (let i = startLineIndex; i <= prevEndLineIndex; i++) {\n        output[i].push(prevClassName);\n      }\n    }\n\n    return output;\n  }\n\n}\nexport class GlyphMarginOverlay extends DedupOverlay {\n  constructor(context) {\n    super();\n    this._context = context;\n    const options = this._context.configuration.options;\n    const layoutInfo = options.get(131\n    /* layoutInfo */\n    );\n    this._lineHeight = options.get(59\n    /* lineHeight */\n    );\n    this._glyphMargin = options.get(50\n    /* glyphMargin */\n    );\n    this._glyphMarginLeft = layoutInfo.glyphMarginLeft;\n    this._glyphMarginWidth = layoutInfo.glyphMarginWidth;\n    this._renderResult = null;\n\n    this._context.addEventHandler(this);\n  }\n\n  dispose() {\n    this._context.removeEventHandler(this);\n\n    this._renderResult = null;\n    super.dispose();\n  } // --- begin event handlers\n\n\n  onConfigurationChanged(e) {\n    const options = this._context.configuration.options;\n    const layoutInfo = options.get(131\n    /* layoutInfo */\n    );\n    this._lineHeight = options.get(59\n    /* lineHeight */\n    );\n    this._glyphMargin = options.get(50\n    /* glyphMargin */\n    );\n    this._glyphMarginLeft = layoutInfo.glyphMarginLeft;\n    this._glyphMarginWidth = layoutInfo.glyphMarginWidth;\n    return true;\n  }\n\n  onDecorationsChanged(e) {\n    return true;\n  }\n\n  onFlushed(e) {\n    return true;\n  }\n\n  onLinesChanged(e) {\n    return true;\n  }\n\n  onLinesDeleted(e) {\n    return true;\n  }\n\n  onLinesInserted(e) {\n    return true;\n  }\n\n  onScrollChanged(e) {\n    return e.scrollTopChanged;\n  }\n\n  onZonesChanged(e) {\n    return true;\n  } // --- end event handlers\n\n\n  _getDecorations(ctx) {\n    const decorations = ctx.getDecorationsInViewport();\n    const r = [];\n    let rLen = 0;\n\n    for (let i = 0, len = decorations.length; i < len; i++) {\n      const d = decorations[i];\n      const glyphMarginClassName = d.options.glyphMarginClassName;\n\n      if (glyphMarginClassName) {\n        r[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.endLineNumber, glyphMarginClassName);\n      }\n    }\n\n    return r;\n  }\n\n  prepareRender(ctx) {\n    if (!this._glyphMargin) {\n      this._renderResult = null;\n      return;\n    }\n\n    const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n    const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n\n    const toRender = this._render(visibleStartLineNumber, visibleEndLineNumber, this._getDecorations(ctx));\n\n    const lineHeight = this._lineHeight.toString();\n\n    const left = this._glyphMarginLeft.toString();\n\n    const width = this._glyphMarginWidth.toString();\n\n    const common = '\" style=\"left:' + left + 'px;width:' + width + 'px' + ';height:' + lineHeight + 'px;\"></div>';\n    const output = [];\n\n    for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n      const lineIndex = lineNumber - visibleStartLineNumber;\n      const classNames = toRender[lineIndex];\n\n      if (classNames.length === 0) {\n        output[lineIndex] = '';\n      } else {\n        output[lineIndex] = '<div class=\"cgmr codicon ' + classNames.join(' ') + common;\n      }\n    }\n\n    this._renderResult = output;\n  }\n\n  render(startLineNumber, lineNumber) {\n    if (!this._renderResult) {\n      return '';\n    }\n\n    const lineIndex = lineNumber - startLineNumber;\n\n    if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n      return '';\n    }\n\n    return this._renderResult[lineIndex];\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/glyphMargin/glyphMargin.js"],"names":["DynamicViewOverlay","DecorationToRender","constructor","startLineNumber","endLineNumber","className","_decorationToRenderBrand","undefined","String","DedupOverlay","_render","visibleStartLineNumber","visibleEndLineNumber","decorations","output","lineNumber","lineIndex","length","sort","a","b","prevClassName","prevEndLineIndex","i","len","d","startLineIndex","Math","max","endLineIndex","min","push","GlyphMarginOverlay","context","_context","options","configuration","layoutInfo","get","_lineHeight","_glyphMargin","_glyphMarginLeft","glyphMarginLeft","_glyphMarginWidth","glyphMarginWidth","_renderResult","addEventHandler","dispose","removeEventHandler","onConfigurationChanged","e","onDecorationsChanged","onFlushed","onLinesChanged","onLinesDeleted","onLinesInserted","onScrollChanged","scrollTopChanged","onZonesChanged","_getDecorations","ctx","getDecorationsInViewport","r","rLen","glyphMarginClassName","range","prepareRender","visibleRange","toRender","lineHeight","toString","left","width","common","classNames","join","render"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './glyphMargin.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nexport class DecorationToRender {\n    constructor(startLineNumber, endLineNumber, className) {\n        this._decorationToRenderBrand = undefined;\n        this.startLineNumber = +startLineNumber;\n        this.endLineNumber = +endLineNumber;\n        this.className = String(className);\n    }\n}\nexport class DedupOverlay extends DynamicViewOverlay {\n    _render(visibleStartLineNumber, visibleEndLineNumber, decorations) {\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            output[lineIndex] = [];\n        }\n        if (decorations.length === 0) {\n            return output;\n        }\n        decorations.sort((a, b) => {\n            if (a.className === b.className) {\n                if (a.startLineNumber === b.startLineNumber) {\n                    return a.endLineNumber - b.endLineNumber;\n                }\n                return a.startLineNumber - b.startLineNumber;\n            }\n            return (a.className < b.className ? -1 : 1);\n        });\n        let prevClassName = null;\n        let prevEndLineIndex = 0;\n        for (let i = 0, len = decorations.length; i < len; i++) {\n            const d = decorations[i];\n            const className = d.className;\n            let startLineIndex = Math.max(d.startLineNumber, visibleStartLineNumber) - visibleStartLineNumber;\n            const endLineIndex = Math.min(d.endLineNumber, visibleEndLineNumber) - visibleStartLineNumber;\n            if (prevClassName === className) {\n                startLineIndex = Math.max(prevEndLineIndex + 1, startLineIndex);\n                prevEndLineIndex = Math.max(prevEndLineIndex, endLineIndex);\n            }\n            else {\n                prevClassName = className;\n                prevEndLineIndex = endLineIndex;\n            }\n            for (let i = startLineIndex; i <= prevEndLineIndex; i++) {\n                output[i].push(prevClassName);\n            }\n        }\n        return output;\n    }\n}\nexport class GlyphMarginOverlay extends DedupOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this._lineHeight = options.get(59 /* lineHeight */);\n        this._glyphMargin = options.get(50 /* glyphMargin */);\n        this._glyphMarginLeft = layoutInfo.glyphMarginLeft;\n        this._glyphMarginWidth = layoutInfo.glyphMarginWidth;\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this._lineHeight = options.get(59 /* lineHeight */);\n        this._glyphMargin = options.get(50 /* glyphMargin */);\n        this._glyphMarginLeft = layoutInfo.glyphMarginLeft;\n        this._glyphMarginWidth = layoutInfo.glyphMarginWidth;\n        return true;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    _getDecorations(ctx) {\n        const decorations = ctx.getDecorationsInViewport();\n        const r = [];\n        let rLen = 0;\n        for (let i = 0, len = decorations.length; i < len; i++) {\n            const d = decorations[i];\n            const glyphMarginClassName = d.options.glyphMarginClassName;\n            if (glyphMarginClassName) {\n                r[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.endLineNumber, glyphMarginClassName);\n            }\n        }\n        return r;\n    }\n    prepareRender(ctx) {\n        if (!this._glyphMargin) {\n            this._renderResult = null;\n            return;\n        }\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const toRender = this._render(visibleStartLineNumber, visibleEndLineNumber, this._getDecorations(ctx));\n        const lineHeight = this._lineHeight.toString();\n        const left = this._glyphMarginLeft.toString();\n        const width = this._glyphMarginWidth.toString();\n        const common = '\" style=\"left:' + left + 'px;width:' + width + 'px' + ';height:' + lineHeight + 'px;\"></div>';\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            const classNames = toRender[lineIndex];\n            if (classNames.length === 0) {\n                output[lineIndex] = '';\n            }\n            else {\n                output[lineIndex] = ('<div class=\"cgmr codicon '\n                    + classNames.join(' ')\n                    + common);\n            }\n        }\n        this._renderResult = output;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\n"]},"metadata":{},"sourceType":"module"}