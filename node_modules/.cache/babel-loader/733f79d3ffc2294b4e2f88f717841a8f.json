{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as DOM from './dom.js';\nimport * as dompurify from './dompurify/dompurify.js';\nimport { DomEmitter } from './event.js';\nimport { createElement } from './formattedTextRenderer.js';\nimport { StandardMouseEvent } from './mouseEvent.js';\nimport { renderLabelWithIcons } from './ui/iconLabel/iconLabels.js';\nimport { raceCancellation } from '../common/async.js';\nimport { CancellationTokenSource } from '../common/cancellation.js';\nimport { onUnexpectedError } from '../common/errors.js';\nimport { Event } from '../common/event.js';\nimport { parseHrefAndDimensions, removeMarkdownEscapes } from '../common/htmlContent.js';\nimport { markdownEscapeEscapedIcons } from '../common/iconLabels.js';\nimport { defaultGenerator } from '../common/idGenerator.js';\nimport { DisposableStore } from '../common/lifecycle.js';\nimport { marked } from '../common/marked/marked.js';\nimport { parse } from '../common/marshalling.js';\nimport { FileAccess, Schemas } from '../common/network.js';\nimport { cloneAndChange } from '../common/objects.js';\nimport { resolvePath } from '../common/resources.js';\nimport { escape } from '../common/strings.js';\nimport { URI } from '../common/uri.js';\n/**\n * Low-level way create a html element from a markdown string.\n *\n * **Note** that for most cases you should be using [`MarkdownRenderer`](./src/vs/editor/browser/core/markdownRenderer.ts)\n * which comes with support for pretty code block rendering and which uses the default way of handling links.\n */\n\nexport function renderMarkdown(markdown, options = {}, markedOptions = {}) {\n  var _a;\n\n  const disposables = new DisposableStore();\n  let isDisposed = false;\n  const cts = disposables.add(new CancellationTokenSource());\n  const element = createElement(options);\n\n  const _uriMassage = function (part) {\n    let data;\n\n    try {\n      data = parse(decodeURIComponent(part));\n    } catch (e) {// ignore\n    }\n\n    if (!data) {\n      return part;\n    }\n\n    data = cloneAndChange(data, value => {\n      if (markdown.uris && markdown.uris[value]) {\n        return URI.revive(markdown.uris[value]);\n      } else {\n        return undefined;\n      }\n    });\n    return encodeURIComponent(JSON.stringify(data));\n  };\n\n  const _href = function (href, isDomUri) {\n    const data = markdown.uris && markdown.uris[href];\n    let uri = URI.revive(data);\n\n    if (isDomUri) {\n      if (href.startsWith(Schemas.data + ':')) {\n        return href;\n      }\n\n      if (!uri) {\n        uri = URI.parse(href);\n      } // this URI will end up as \"src\"-attribute of a dom node\n      // and because of that special rewriting needs to be done\n      // so that the URI uses a protocol that's understood by\n      // browsers (like http or https)\n\n\n      return FileAccess.asBrowserUri(uri).toString(true);\n    }\n\n    if (!uri) {\n      return href;\n    }\n\n    if (URI.parse(href).toString() === uri.toString()) {\n      return href; // no transformation performed\n    }\n\n    if (uri.query) {\n      uri = uri.with({\n        query: _uriMassage(uri.query)\n      });\n    }\n\n    return uri.toString();\n  }; // signal to code-block render that the\n  // element has been created\n\n\n  let signalInnerHTML;\n  const withInnerHTML = new Promise(c => signalInnerHTML = c);\n  const renderer = new marked.Renderer();\n\n  renderer.image = (href, title, text) => {\n    let dimensions = [];\n    let attributes = [];\n\n    if (href) {\n      ({\n        href,\n        dimensions\n      } = parseHrefAndDimensions(href));\n      attributes.push(`src=\"${href}\"`);\n    }\n\n    if (text) {\n      attributes.push(`alt=\"${text}\"`);\n    }\n\n    if (title) {\n      attributes.push(`title=\"${title}\"`);\n    }\n\n    if (dimensions.length) {\n      attributes = attributes.concat(dimensions);\n    }\n\n    return '<img ' + attributes.join(' ') + '>';\n  };\n\n  renderer.link = (href, title, text) => {\n    if (typeof href !== 'string') {\n      return '';\n    } // Remove markdown escapes. Workaround for https://github.com/chjj/marked/issues/829\n\n\n    if (href === text) {\n      // raw link case\n      text = removeMarkdownEscapes(text);\n    }\n\n    href = _href(href, false);\n\n    if (options.baseUrl) {\n      const hasScheme = /^\\w[\\w\\d+.-]*:/.test(href);\n\n      if (!hasScheme) {\n        href = resolvePath(options.baseUrl, href).toString();\n      }\n    }\n\n    title = typeof title === 'string' ? removeMarkdownEscapes(title) : '';\n    href = removeMarkdownEscapes(href);\n\n    if (!href || href.match(/^data:|javascript:/i) || href.match(/^command:/i) && !markdown.isTrusted || href.match(/^command:(\\/\\/\\/)?_workbench\\.downloadResource/i)) {\n      // drop the link\n      return text;\n    } else {\n      // HTML Encode href\n      href = href.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;');\n      return `<a data-href=\"${href}\" title=\"${title || href}\">${text}</a>`;\n    }\n  };\n\n  renderer.paragraph = text => {\n    return `<p>${text}</p>`;\n  };\n\n  if (options.codeBlockRenderer) {\n    renderer.code = (code, lang) => {\n      if (typeof lang !== 'string') {\n        return '';\n      }\n\n      const value = options.codeBlockRenderer(lang, code); // when code-block rendering is async we return sync\n      // but update the node with the real result later.\n\n      const id = defaultGenerator.nextId();\n      raceCancellation(Promise.all([value, withInnerHTML]), cts.token).then(values => {\n        var _a;\n\n        if (!isDisposed && values) {\n          const span = element.querySelector(`div[data-code=\"${id}\"]`);\n\n          if (span) {\n            DOM.reset(span, values[0]);\n          }\n\n          (_a = options.asyncRenderCallback) === null || _a === void 0 ? void 0 : _a.call(options);\n        }\n      }).catch(() => {// ignore\n      });\n      return `<div class=\"code\" data-code=\"${id}\">${escape(code)}</div>`;\n    };\n  }\n\n  if (options.actionHandler) {\n    const onClick = options.actionHandler.disposables.add(new DomEmitter(element, 'click'));\n    const onAuxClick = options.actionHandler.disposables.add(new DomEmitter(element, 'auxclick'));\n    options.actionHandler.disposables.add(Event.any(onClick.event, onAuxClick.event)(e => {\n      const mouseEvent = new StandardMouseEvent(e);\n\n      if (!mouseEvent.leftButton && !mouseEvent.middleButton) {\n        return;\n      }\n\n      let target = mouseEvent.target;\n\n      if (target.tagName !== 'A') {\n        target = target.parentElement;\n\n        if (!target || target.tagName !== 'A') {\n          return;\n        }\n      }\n\n      try {\n        const href = target.dataset['href'];\n\n        if (href) {\n          options.actionHandler.callback(href, mouseEvent);\n        }\n      } catch (err) {\n        onUnexpectedError(err);\n      } finally {\n        mouseEvent.preventDefault();\n      }\n    }));\n  }\n\n  if (!markdown.supportHtml) {\n    // TODO: Can we deprecated this in favor of 'supportHtml'?\n    // Use our own sanitizer so that we can let through only spans.\n    // Otherwise, we'd be letting all html be rendered.\n    // If we want to allow markdown permitted tags, then we can delete sanitizer and sanitize.\n    // We always pass the output through dompurify after this so that we don't rely on\n    // marked for sanitization.\n    markedOptions.sanitizer = html => {\n      const match = markdown.isTrusted ? html.match(/^(<span[^>]+>)|(<\\/\\s*span>)$/) : undefined;\n      return match ? html : '';\n    };\n\n    markedOptions.sanitize = true;\n    markedOptions.silent = true;\n  }\n\n  markedOptions.renderer = renderer; // values that are too long will freeze the UI\n\n  let value = (_a = markdown.value) !== null && _a !== void 0 ? _a : '';\n\n  if (value.length > 100000) {\n    value = `${value.substr(0, 100000)}â€¦`;\n  } // escape theme icons\n\n\n  if (markdown.supportThemeIcons) {\n    value = markdownEscapeEscapedIcons(value);\n  }\n\n  let renderedMarkdown = marked.parse(value, markedOptions); // Rewrite theme icons\n\n  if (markdown.supportThemeIcons) {\n    const elements = renderLabelWithIcons(renderedMarkdown);\n    renderedMarkdown = elements.map(e => typeof e === 'string' ? e : e.outerHTML).join('');\n  }\n\n  const htmlParser = new DOMParser();\n  const markdownHtmlDoc = htmlParser.parseFromString(sanitizeRenderedMarkdown(markdown, renderedMarkdown), 'text/html');\n  markdownHtmlDoc.body.querySelectorAll('img').forEach(img => {\n    if (img.src) {\n      let href = _href(img.src, true);\n\n      try {\n        const hrefAsUri = URI.parse(href);\n\n        if (options.baseUrl && hrefAsUri.scheme === Schemas.file) {\n          // absolute or relative local path, or file: uri\n          href = resolvePath(options.baseUrl, href).toString();\n        }\n      } catch (err) {}\n\n      img.src = href;\n    }\n  });\n  element.innerHTML = sanitizeRenderedMarkdown(markdown, markdownHtmlDoc.body.innerHTML); // signal that async code blocks can be now be inserted\n\n  signalInnerHTML(); // signal size changes for image tags\n\n  if (options.asyncRenderCallback) {\n    for (const img of element.getElementsByTagName('img')) {\n      const listener = disposables.add(DOM.addDisposableListener(img, 'load', () => {\n        listener.dispose();\n        options.asyncRenderCallback();\n      }));\n    }\n  }\n\n  return {\n    element,\n    dispose: () => {\n      isDisposed = true;\n      cts.cancel();\n      disposables.dispose();\n    }\n  };\n}\n\nfunction sanitizeRenderedMarkdown(options, renderedMarkdown) {\n  const {\n    config,\n    allowedSchemes\n  } = getSanitizerOptions(options);\n  dompurify.addHook('uponSanitizeAttribute', (element, e) => {\n    if (e.attrName === 'style' || e.attrName === 'class') {\n      if (element.tagName === 'SPAN') {\n        if (e.attrName === 'style') {\n          e.keepAttr = /^(color\\:#[0-9a-fA-F]+;)?(background-color\\:#[0-9a-fA-F]+;)?$/.test(e.attrValue);\n          return;\n        } else if (e.attrName === 'class') {\n          e.keepAttr = /^codicon codicon-[a-z\\-]+( codicon-modifier-[a-z\\-]+)?$/.test(e.attrValue);\n          return;\n        }\n      }\n\n      e.keepAttr = false;\n      return;\n    }\n  }); // build an anchor to map URLs to\n\n  const anchor = document.createElement('a'); // https://github.com/cure53/DOMPurify/blob/main/demos/hooks-scheme-allowlist.html\n\n  dompurify.addHook('afterSanitizeAttributes', node => {\n    // check all href/src attributes for validity\n    for (const attr of ['href', 'src']) {\n      if (node.hasAttribute(attr)) {\n        anchor.href = node.getAttribute(attr);\n\n        if (!allowedSchemes.includes(anchor.protocol.replace(/:$/, ''))) {\n          node.removeAttribute(attr);\n        }\n      }\n    }\n  });\n\n  try {\n    return dompurify.sanitize(renderedMarkdown, Object.assign(Object.assign({}, config), {\n      RETURN_TRUSTED_TYPE: true\n    }));\n  } finally {\n    dompurify.removeHook('uponSanitizeAttribute');\n    dompurify.removeHook('afterSanitizeAttributes');\n  }\n}\n\nfunction getSanitizerOptions(options) {\n  const allowedSchemes = [Schemas.http, Schemas.https, Schemas.mailto, Schemas.data, Schemas.file, Schemas.vscodeFileResource, Schemas.vscodeRemote, Schemas.vscodeRemoteResource];\n\n  if (options.isTrusted) {\n    allowedSchemes.push(Schemas.command);\n  }\n\n  return {\n    config: {\n      // allowedTags should included everything that markdown renders to.\n      // Since we have our own sanitize function for marked, it's possible we missed some tag so let dompurify make sure.\n      // HTML tags that can result from markdown are from reading https://spec.commonmark.org/0.29/\n      // HTML table tags that can result from markdown are from https://github.github.com/gfm/#tables-extension-\n      ALLOWED_TAGS: ['ul', 'li', 'p', 'b', 'i', 'code', 'blockquote', 'ol', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'hr', 'em', 'pre', 'table', 'thead', 'tbody', 'tr', 'th', 'td', 'div', 'del', 'a', 'strong', 'br', 'img', 'span'],\n      ALLOWED_ATTR: ['href', 'data-href', 'target', 'title', 'src', 'alt', 'class', 'style', 'data-code', 'width', 'height', 'align'],\n      ALLOW_UNKNOWN_PROTOCOLS: true\n    },\n    allowedSchemes\n  };\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/base/browser/markdownRenderer.js"],"names":["DOM","dompurify","DomEmitter","createElement","StandardMouseEvent","renderLabelWithIcons","raceCancellation","CancellationTokenSource","onUnexpectedError","Event","parseHrefAndDimensions","removeMarkdownEscapes","markdownEscapeEscapedIcons","defaultGenerator","DisposableStore","marked","parse","FileAccess","Schemas","cloneAndChange","resolvePath","escape","URI","renderMarkdown","markdown","options","markedOptions","_a","disposables","isDisposed","cts","add","element","_uriMassage","part","data","decodeURIComponent","e","value","uris","revive","undefined","encodeURIComponent","JSON","stringify","_href","href","isDomUri","uri","startsWith","asBrowserUri","toString","query","with","signalInnerHTML","withInnerHTML","Promise","c","renderer","Renderer","image","title","text","dimensions","attributes","push","length","concat","join","link","baseUrl","hasScheme","test","match","isTrusted","replace","paragraph","codeBlockRenderer","code","lang","id","nextId","all","token","then","values","span","querySelector","reset","asyncRenderCallback","call","catch","actionHandler","onClick","onAuxClick","any","event","mouseEvent","leftButton","middleButton","target","tagName","parentElement","dataset","callback","err","preventDefault","supportHtml","sanitizer","html","sanitize","silent","substr","supportThemeIcons","renderedMarkdown","elements","map","outerHTML","htmlParser","DOMParser","markdownHtmlDoc","parseFromString","sanitizeRenderedMarkdown","body","querySelectorAll","forEach","img","src","hrefAsUri","scheme","file","innerHTML","getElementsByTagName","listener","addDisposableListener","dispose","cancel","config","allowedSchemes","getSanitizerOptions","addHook","attrName","keepAttr","attrValue","anchor","document","node","attr","hasAttribute","getAttribute","includes","protocol","removeAttribute","Object","assign","RETURN_TRUSTED_TYPE","removeHook","http","https","mailto","vscodeFileResource","vscodeRemote","vscodeRemoteResource","command","ALLOWED_TAGS","ALLOWED_ATTR","ALLOW_UNKNOWN_PROTOCOLS"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as DOM from './dom.js';\nimport * as dompurify from './dompurify/dompurify.js';\nimport { DomEmitter } from './event.js';\nimport { createElement } from './formattedTextRenderer.js';\nimport { StandardMouseEvent } from './mouseEvent.js';\nimport { renderLabelWithIcons } from './ui/iconLabel/iconLabels.js';\nimport { raceCancellation } from '../common/async.js';\nimport { CancellationTokenSource } from '../common/cancellation.js';\nimport { onUnexpectedError } from '../common/errors.js';\nimport { Event } from '../common/event.js';\nimport { parseHrefAndDimensions, removeMarkdownEscapes } from '../common/htmlContent.js';\nimport { markdownEscapeEscapedIcons } from '../common/iconLabels.js';\nimport { defaultGenerator } from '../common/idGenerator.js';\nimport { DisposableStore } from '../common/lifecycle.js';\nimport { marked } from '../common/marked/marked.js';\nimport { parse } from '../common/marshalling.js';\nimport { FileAccess, Schemas } from '../common/network.js';\nimport { cloneAndChange } from '../common/objects.js';\nimport { resolvePath } from '../common/resources.js';\nimport { escape } from '../common/strings.js';\nimport { URI } from '../common/uri.js';\n/**\n * Low-level way create a html element from a markdown string.\n *\n * **Note** that for most cases you should be using [`MarkdownRenderer`](./src/vs/editor/browser/core/markdownRenderer.ts)\n * which comes with support for pretty code block rendering and which uses the default way of handling links.\n */\nexport function renderMarkdown(markdown, options = {}, markedOptions = {}) {\n    var _a;\n    const disposables = new DisposableStore();\n    let isDisposed = false;\n    const cts = disposables.add(new CancellationTokenSource());\n    const element = createElement(options);\n    const _uriMassage = function (part) {\n        let data;\n        try {\n            data = parse(decodeURIComponent(part));\n        }\n        catch (e) {\n            // ignore\n        }\n        if (!data) {\n            return part;\n        }\n        data = cloneAndChange(data, value => {\n            if (markdown.uris && markdown.uris[value]) {\n                return URI.revive(markdown.uris[value]);\n            }\n            else {\n                return undefined;\n            }\n        });\n        return encodeURIComponent(JSON.stringify(data));\n    };\n    const _href = function (href, isDomUri) {\n        const data = markdown.uris && markdown.uris[href];\n        let uri = URI.revive(data);\n        if (isDomUri) {\n            if (href.startsWith(Schemas.data + ':')) {\n                return href;\n            }\n            if (!uri) {\n                uri = URI.parse(href);\n            }\n            // this URI will end up as \"src\"-attribute of a dom node\n            // and because of that special rewriting needs to be done\n            // so that the URI uses a protocol that's understood by\n            // browsers (like http or https)\n            return FileAccess.asBrowserUri(uri).toString(true);\n        }\n        if (!uri) {\n            return href;\n        }\n        if (URI.parse(href).toString() === uri.toString()) {\n            return href; // no transformation performed\n        }\n        if (uri.query) {\n            uri = uri.with({ query: _uriMassage(uri.query) });\n        }\n        return uri.toString();\n    };\n    // signal to code-block render that the\n    // element has been created\n    let signalInnerHTML;\n    const withInnerHTML = new Promise(c => signalInnerHTML = c);\n    const renderer = new marked.Renderer();\n    renderer.image = (href, title, text) => {\n        let dimensions = [];\n        let attributes = [];\n        if (href) {\n            ({ href, dimensions } = parseHrefAndDimensions(href));\n            attributes.push(`src=\"${href}\"`);\n        }\n        if (text) {\n            attributes.push(`alt=\"${text}\"`);\n        }\n        if (title) {\n            attributes.push(`title=\"${title}\"`);\n        }\n        if (dimensions.length) {\n            attributes = attributes.concat(dimensions);\n        }\n        return '<img ' + attributes.join(' ') + '>';\n    };\n    renderer.link = (href, title, text) => {\n        if (typeof href !== 'string') {\n            return '';\n        }\n        // Remove markdown escapes. Workaround for https://github.com/chjj/marked/issues/829\n        if (href === text) { // raw link case\n            text = removeMarkdownEscapes(text);\n        }\n        href = _href(href, false);\n        if (options.baseUrl) {\n            const hasScheme = /^\\w[\\w\\d+.-]*:/.test(href);\n            if (!hasScheme) {\n                href = resolvePath(options.baseUrl, href).toString();\n            }\n        }\n        title = typeof title === 'string' ? removeMarkdownEscapes(title) : '';\n        href = removeMarkdownEscapes(href);\n        if (!href\n            || href.match(/^data:|javascript:/i)\n            || (href.match(/^command:/i) && !markdown.isTrusted)\n            || href.match(/^command:(\\/\\/\\/)?_workbench\\.downloadResource/i)) {\n            // drop the link\n            return text;\n        }\n        else {\n            // HTML Encode href\n            href = href.replace(/&/g, '&amp;')\n                .replace(/</g, '&lt;')\n                .replace(/>/g, '&gt;')\n                .replace(/\"/g, '&quot;')\n                .replace(/'/g, '&#39;');\n            return `<a data-href=\"${href}\" title=\"${title || href}\">${text}</a>`;\n        }\n    };\n    renderer.paragraph = (text) => {\n        return `<p>${text}</p>`;\n    };\n    if (options.codeBlockRenderer) {\n        renderer.code = (code, lang) => {\n            if (typeof lang !== 'string') {\n                return '';\n            }\n            const value = options.codeBlockRenderer(lang, code);\n            // when code-block rendering is async we return sync\n            // but update the node with the real result later.\n            const id = defaultGenerator.nextId();\n            raceCancellation(Promise.all([value, withInnerHTML]), cts.token).then(values => {\n                var _a;\n                if (!isDisposed && values) {\n                    const span = element.querySelector(`div[data-code=\"${id}\"]`);\n                    if (span) {\n                        DOM.reset(span, values[0]);\n                    }\n                    (_a = options.asyncRenderCallback) === null || _a === void 0 ? void 0 : _a.call(options);\n                }\n            }).catch(() => {\n                // ignore\n            });\n            return `<div class=\"code\" data-code=\"${id}\">${escape(code)}</div>`;\n        };\n    }\n    if (options.actionHandler) {\n        const onClick = options.actionHandler.disposables.add(new DomEmitter(element, 'click'));\n        const onAuxClick = options.actionHandler.disposables.add(new DomEmitter(element, 'auxclick'));\n        options.actionHandler.disposables.add(Event.any(onClick.event, onAuxClick.event)(e => {\n            const mouseEvent = new StandardMouseEvent(e);\n            if (!mouseEvent.leftButton && !mouseEvent.middleButton) {\n                return;\n            }\n            let target = mouseEvent.target;\n            if (target.tagName !== 'A') {\n                target = target.parentElement;\n                if (!target || target.tagName !== 'A') {\n                    return;\n                }\n            }\n            try {\n                const href = target.dataset['href'];\n                if (href) {\n                    options.actionHandler.callback(href, mouseEvent);\n                }\n            }\n            catch (err) {\n                onUnexpectedError(err);\n            }\n            finally {\n                mouseEvent.preventDefault();\n            }\n        }));\n    }\n    if (!markdown.supportHtml) {\n        // TODO: Can we deprecated this in favor of 'supportHtml'?\n        // Use our own sanitizer so that we can let through only spans.\n        // Otherwise, we'd be letting all html be rendered.\n        // If we want to allow markdown permitted tags, then we can delete sanitizer and sanitize.\n        // We always pass the output through dompurify after this so that we don't rely on\n        // marked for sanitization.\n        markedOptions.sanitizer = (html) => {\n            const match = markdown.isTrusted ? html.match(/^(<span[^>]+>)|(<\\/\\s*span>)$/) : undefined;\n            return match ? html : '';\n        };\n        markedOptions.sanitize = true;\n        markedOptions.silent = true;\n    }\n    markedOptions.renderer = renderer;\n    // values that are too long will freeze the UI\n    let value = (_a = markdown.value) !== null && _a !== void 0 ? _a : '';\n    if (value.length > 100000) {\n        value = `${value.substr(0, 100000)}â€¦`;\n    }\n    // escape theme icons\n    if (markdown.supportThemeIcons) {\n        value = markdownEscapeEscapedIcons(value);\n    }\n    let renderedMarkdown = marked.parse(value, markedOptions);\n    // Rewrite theme icons\n    if (markdown.supportThemeIcons) {\n        const elements = renderLabelWithIcons(renderedMarkdown);\n        renderedMarkdown = elements.map(e => typeof e === 'string' ? e : e.outerHTML).join('');\n    }\n    const htmlParser = new DOMParser();\n    const markdownHtmlDoc = htmlParser.parseFromString(sanitizeRenderedMarkdown(markdown, renderedMarkdown), 'text/html');\n    markdownHtmlDoc.body.querySelectorAll('img')\n        .forEach(img => {\n        if (img.src) {\n            let href = _href(img.src, true);\n            try {\n                const hrefAsUri = URI.parse(href);\n                if (options.baseUrl && hrefAsUri.scheme === Schemas.file) { // absolute or relative local path, or file: uri\n                    href = resolvePath(options.baseUrl, href).toString();\n                }\n            }\n            catch (err) { }\n            img.src = href;\n        }\n    });\n    element.innerHTML = sanitizeRenderedMarkdown(markdown, markdownHtmlDoc.body.innerHTML);\n    // signal that async code blocks can be now be inserted\n    signalInnerHTML();\n    // signal size changes for image tags\n    if (options.asyncRenderCallback) {\n        for (const img of element.getElementsByTagName('img')) {\n            const listener = disposables.add(DOM.addDisposableListener(img, 'load', () => {\n                listener.dispose();\n                options.asyncRenderCallback();\n            }));\n        }\n    }\n    return {\n        element,\n        dispose: () => {\n            isDisposed = true;\n            cts.cancel();\n            disposables.dispose();\n        }\n    };\n}\nfunction sanitizeRenderedMarkdown(options, renderedMarkdown) {\n    const { config, allowedSchemes } = getSanitizerOptions(options);\n    dompurify.addHook('uponSanitizeAttribute', (element, e) => {\n        if (e.attrName === 'style' || e.attrName === 'class') {\n            if (element.tagName === 'SPAN') {\n                if (e.attrName === 'style') {\n                    e.keepAttr = /^(color\\:#[0-9a-fA-F]+;)?(background-color\\:#[0-9a-fA-F]+;)?$/.test(e.attrValue);\n                    return;\n                }\n                else if (e.attrName === 'class') {\n                    e.keepAttr = /^codicon codicon-[a-z\\-]+( codicon-modifier-[a-z\\-]+)?$/.test(e.attrValue);\n                    return;\n                }\n            }\n            e.keepAttr = false;\n            return;\n        }\n    });\n    // build an anchor to map URLs to\n    const anchor = document.createElement('a');\n    // https://github.com/cure53/DOMPurify/blob/main/demos/hooks-scheme-allowlist.html\n    dompurify.addHook('afterSanitizeAttributes', (node) => {\n        // check all href/src attributes for validity\n        for (const attr of ['href', 'src']) {\n            if (node.hasAttribute(attr)) {\n                anchor.href = node.getAttribute(attr);\n                if (!allowedSchemes.includes(anchor.protocol.replace(/:$/, ''))) {\n                    node.removeAttribute(attr);\n                }\n            }\n        }\n    });\n    try {\n        return dompurify.sanitize(renderedMarkdown, Object.assign(Object.assign({}, config), { RETURN_TRUSTED_TYPE: true }));\n    }\n    finally {\n        dompurify.removeHook('uponSanitizeAttribute');\n        dompurify.removeHook('afterSanitizeAttributes');\n    }\n}\nfunction getSanitizerOptions(options) {\n    const allowedSchemes = [\n        Schemas.http,\n        Schemas.https,\n        Schemas.mailto,\n        Schemas.data,\n        Schemas.file,\n        Schemas.vscodeFileResource,\n        Schemas.vscodeRemote,\n        Schemas.vscodeRemoteResource,\n    ];\n    if (options.isTrusted) {\n        allowedSchemes.push(Schemas.command);\n    }\n    return {\n        config: {\n            // allowedTags should included everything that markdown renders to.\n            // Since we have our own sanitize function for marked, it's possible we missed some tag so let dompurify make sure.\n            // HTML tags that can result from markdown are from reading https://spec.commonmark.org/0.29/\n            // HTML table tags that can result from markdown are from https://github.github.com/gfm/#tables-extension-\n            ALLOWED_TAGS: ['ul', 'li', 'p', 'b', 'i', 'code', 'blockquote', 'ol', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'hr', 'em', 'pre', 'table', 'thead', 'tbody', 'tr', 'th', 'td', 'div', 'del', 'a', 'strong', 'br', 'img', 'span'],\n            ALLOWED_ATTR: ['href', 'data-href', 'target', 'title', 'src', 'alt', 'class', 'style', 'data-code', 'width', 'height', 'align'],\n            ALLOW_UNKNOWN_PROTOCOLS: true,\n        },\n        allowedSchemes\n    };\n}\n"]},"metadata":{},"sourceType":"module"}