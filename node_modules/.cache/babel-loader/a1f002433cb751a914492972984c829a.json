{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable, markAsSingleton } from '../../../base/common/lifecycle.js';\nimport { RGBA8 } from '../core/rgba.js';\nimport { TokenizationRegistry } from '../languages.js';\nexport class MinimapTokensColorTracker extends Disposable {\n  constructor() {\n    super();\n    this._onDidChange = new Emitter();\n    this.onDidChange = this._onDidChange.event;\n\n    this._updateColorMap();\n\n    this._register(TokenizationRegistry.onDidChange(e => {\n      if (e.changedColorMap) {\n        this._updateColorMap();\n      }\n    }));\n  }\n\n  static getInstance() {\n    if (!this._INSTANCE) {\n      this._INSTANCE = markAsSingleton(new MinimapTokensColorTracker());\n    }\n\n    return this._INSTANCE;\n  }\n\n  _updateColorMap() {\n    const colorMap = TokenizationRegistry.getColorMap();\n\n    if (!colorMap) {\n      this._colors = [RGBA8.Empty];\n      this._backgroundIsLight = true;\n      return;\n    }\n\n    this._colors = [RGBA8.Empty];\n\n    for (let colorId = 1; colorId < colorMap.length; colorId++) {\n      const source = colorMap[colorId].rgba; // Use a VM friendly data-type\n\n      this._colors[colorId] = new RGBA8(source.r, source.g, source.b, Math.round(source.a * 255));\n    }\n\n    const backgroundLuminosity = colorMap[2\n    /* DefaultBackground */\n    ].getRelativeLuminance();\n    this._backgroundIsLight = backgroundLuminosity >= 0.5;\n\n    this._onDidChange.fire(undefined);\n  }\n\n  getColor(colorId) {\n    if (colorId < 1 || colorId >= this._colors.length) {\n      // background color (basically invisible)\n      colorId = 2\n      /* DefaultBackground */\n      ;\n    }\n\n    return this._colors[colorId];\n  }\n\n  backgroundIsLight() {\n    return this._backgroundIsLight;\n  }\n\n}\nMinimapTokensColorTracker._INSTANCE = null;","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/common/viewModel/minimapTokensColorTracker.js"],"names":["Emitter","Disposable","markAsSingleton","RGBA8","TokenizationRegistry","MinimapTokensColorTracker","constructor","_onDidChange","onDidChange","event","_updateColorMap","_register","e","changedColorMap","getInstance","_INSTANCE","colorMap","getColorMap","_colors","Empty","_backgroundIsLight","colorId","length","source","rgba","r","g","b","Math","round","a","backgroundLuminosity","getRelativeLuminance","fire","undefined","getColor","backgroundIsLight"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,OAAT,QAAwB,+BAAxB;AACA,SAASC,UAAT,EAAqBC,eAArB,QAA4C,mCAA5C;AACA,SAASC,KAAT,QAAsB,iBAAtB;AACA,SAASC,oBAAT,QAAqC,iBAArC;AACA,OAAO,MAAMC,yBAAN,SAAwCJ,UAAxC,CAAmD;AACtDK,EAAAA,WAAW,GAAG;AACV;AACA,SAAKC,YAAL,GAAoB,IAAIP,OAAJ,EAApB;AACA,SAAKQ,WAAL,GAAmB,KAAKD,YAAL,CAAkBE,KAArC;;AACA,SAAKC,eAAL;;AACA,SAAKC,SAAL,CAAeP,oBAAoB,CAACI,WAArB,CAAiCI,CAAC,IAAI;AACjD,UAAIA,CAAC,CAACC,eAAN,EAAuB;AACnB,aAAKH,eAAL;AACH;AACJ,KAJc,CAAf;AAKH;;AACiB,SAAXI,WAAW,GAAG;AACjB,QAAI,CAAC,KAAKC,SAAV,EAAqB;AACjB,WAAKA,SAAL,GAAiBb,eAAe,CAAC,IAAIG,yBAAJ,EAAD,CAAhC;AACH;;AACD,WAAO,KAAKU,SAAZ;AACH;;AACDL,EAAAA,eAAe,GAAG;AACd,UAAMM,QAAQ,GAAGZ,oBAAoB,CAACa,WAArB,EAAjB;;AACA,QAAI,CAACD,QAAL,EAAe;AACX,WAAKE,OAAL,GAAe,CAACf,KAAK,CAACgB,KAAP,CAAf;AACA,WAAKC,kBAAL,GAA0B,IAA1B;AACA;AACH;;AACD,SAAKF,OAAL,GAAe,CAACf,KAAK,CAACgB,KAAP,CAAf;;AACA,SAAK,IAAIE,OAAO,GAAG,CAAnB,EAAsBA,OAAO,GAAGL,QAAQ,CAACM,MAAzC,EAAiDD,OAAO,EAAxD,EAA4D;AACxD,YAAME,MAAM,GAAGP,QAAQ,CAACK,OAAD,CAAR,CAAkBG,IAAjC,CADwD,CAExD;;AACA,WAAKN,OAAL,CAAaG,OAAb,IAAwB,IAAIlB,KAAJ,CAAUoB,MAAM,CAACE,CAAjB,EAAoBF,MAAM,CAACG,CAA3B,EAA8BH,MAAM,CAACI,CAArC,EAAwCC,IAAI,CAACC,KAAL,CAAWN,MAAM,CAACO,CAAP,GAAW,GAAtB,CAAxC,CAAxB;AACH;;AACD,UAAMC,oBAAoB,GAAGf,QAAQ,CAAC;AAAE;AAAH,KAAR,CAAoCgB,oBAApC,EAA7B;AACA,SAAKZ,kBAAL,GAA0BW,oBAAoB,IAAI,GAAlD;;AACA,SAAKxB,YAAL,CAAkB0B,IAAlB,CAAuBC,SAAvB;AACH;;AACDC,EAAAA,QAAQ,CAACd,OAAD,EAAU;AACd,QAAIA,OAAO,GAAG,CAAV,IAAeA,OAAO,IAAI,KAAKH,OAAL,CAAaI,MAA3C,EAAmD;AAC/C;AACAD,MAAAA,OAAO,GAAG;AAAE;AAAZ;AACH;;AACD,WAAO,KAAKH,OAAL,CAAaG,OAAb,CAAP;AACH;;AACDe,EAAAA,iBAAiB,GAAG;AAChB,WAAO,KAAKhB,kBAAZ;AACH;;AA5CqD;AA8C1Df,yBAAyB,CAACU,SAA1B,GAAsC,IAAtC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable, markAsSingleton } from '../../../base/common/lifecycle.js';\nimport { RGBA8 } from '../core/rgba.js';\nimport { TokenizationRegistry } from '../languages.js';\nexport class MinimapTokensColorTracker extends Disposable {\n    constructor() {\n        super();\n        this._onDidChange = new Emitter();\n        this.onDidChange = this._onDidChange.event;\n        this._updateColorMap();\n        this._register(TokenizationRegistry.onDidChange(e => {\n            if (e.changedColorMap) {\n                this._updateColorMap();\n            }\n        }));\n    }\n    static getInstance() {\n        if (!this._INSTANCE) {\n            this._INSTANCE = markAsSingleton(new MinimapTokensColorTracker());\n        }\n        return this._INSTANCE;\n    }\n    _updateColorMap() {\n        const colorMap = TokenizationRegistry.getColorMap();\n        if (!colorMap) {\n            this._colors = [RGBA8.Empty];\n            this._backgroundIsLight = true;\n            return;\n        }\n        this._colors = [RGBA8.Empty];\n        for (let colorId = 1; colorId < colorMap.length; colorId++) {\n            const source = colorMap[colorId].rgba;\n            // Use a VM friendly data-type\n            this._colors[colorId] = new RGBA8(source.r, source.g, source.b, Math.round(source.a * 255));\n        }\n        const backgroundLuminosity = colorMap[2 /* DefaultBackground */].getRelativeLuminance();\n        this._backgroundIsLight = backgroundLuminosity >= 0.5;\n        this._onDidChange.fire(undefined);\n    }\n    getColor(colorId) {\n        if (colorId < 1 || colorId >= this._colors.length) {\n            // background color (basically invisible)\n            colorId = 2 /* DefaultBackground */;\n        }\n        return this._colors[colorId];\n    }\n    backgroundIsLight() {\n        return this._backgroundIsLight;\n    }\n}\nMinimapTokensColorTracker._INSTANCE = null;\n"]},"metadata":{},"sourceType":"module"}