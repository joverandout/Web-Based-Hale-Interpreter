{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../base/browser/dom.js';\nimport * as platform from '../../../base/common/platform.js';\nimport { EventType, Gesture } from '../../../base/browser/touch.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { MouseHandler, createMouseMoveEventMerger } from './mouseHandler.js';\nimport { EditorMouseEvent, EditorPointerEventFactory } from '../editorDom.js';\nimport { BrowserFeatures } from '../../../base/browser/canIUse.js';\nimport { TextAreaSyntethicEvents } from './textAreaInput.js';\n/**\n * Currently only tested on iOS 13/ iPadOS.\n */\n\nexport class PointerEventHandler extends MouseHandler {\n  constructor(context, viewController, viewHelper) {\n    super(context, viewController, viewHelper);\n\n    this._register(Gesture.addTarget(this.viewHelper.linesContentDomNode));\n\n    this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, EventType.Tap, e => this.onTap(e)));\n\n    this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, EventType.Change, e => this.onChange(e)));\n\n    this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, EventType.Contextmenu, e => this._onContextMenu(new EditorMouseEvent(e, this.viewHelper.viewDomNode), false)));\n\n    this._lastPointerType = 'mouse';\n\n    this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, 'pointerdown', e => {\n      const pointerType = e.pointerType;\n\n      if (pointerType === 'mouse') {\n        this._lastPointerType = 'mouse';\n        return;\n      } else if (pointerType === 'touch') {\n        this._lastPointerType = 'touch';\n      } else {\n        this._lastPointerType = 'pen';\n      }\n    })); // PonterEvents\n\n\n    const pointerEvents = new EditorPointerEventFactory(this.viewHelper.viewDomNode);\n\n    this._register(pointerEvents.onPointerMoveThrottled(this.viewHelper.viewDomNode, e => this._onMouseMove(e), createMouseMoveEventMerger(this.mouseTargetFactory), MouseHandler.MOUSE_MOVE_MINIMUM_TIME));\n\n    this._register(pointerEvents.onPointerUp(this.viewHelper.viewDomNode, e => this._onMouseUp(e)));\n\n    this._register(pointerEvents.onPointerLeave(this.viewHelper.viewDomNode, e => this._onMouseLeave(e)));\n\n    this._register(pointerEvents.onPointerDown(this.viewHelper.viewDomNode, e => this._onMouseDown(e)));\n  }\n\n  onTap(event) {\n    if (!event.initialTarget || !this.viewHelper.linesContentDomNode.contains(event.initialTarget)) {\n      return;\n    }\n\n    event.preventDefault();\n    this.viewHelper.focusTextArea();\n\n    const target = this._createMouseTarget(new EditorMouseEvent(event, this.viewHelper.viewDomNode), false);\n\n    if (target.position) {\n      // this.viewController.moveTo(target.position);\n      this.viewController.dispatchMouse({\n        position: target.position,\n        mouseColumn: target.position.column,\n        startedOnLineNumbers: false,\n        mouseDownCount: event.tapCount,\n        inSelectionMode: false,\n        altKey: false,\n        ctrlKey: false,\n        metaKey: false,\n        shiftKey: false,\n        leftButton: false,\n        middleButton: false\n      });\n    }\n  }\n\n  onChange(e) {\n    if (this._lastPointerType === 'touch') {\n      this._context.model.deltaScrollNow(-e.translationX, -e.translationY);\n    }\n  }\n\n  _onMouseDown(e) {\n    if (e.browserEvent.pointerType === 'touch') {\n      return;\n    }\n\n    super._onMouseDown(e);\n  }\n\n}\n\nclass TouchHandler extends MouseHandler {\n  constructor(context, viewController, viewHelper) {\n    super(context, viewController, viewHelper);\n\n    this._register(Gesture.addTarget(this.viewHelper.linesContentDomNode));\n\n    this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, EventType.Tap, e => this.onTap(e)));\n\n    this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, EventType.Change, e => this.onChange(e)));\n\n    this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, EventType.Contextmenu, e => this._onContextMenu(new EditorMouseEvent(e, this.viewHelper.viewDomNode), false)));\n  }\n\n  onTap(event) {\n    event.preventDefault();\n    this.viewHelper.focusTextArea();\n\n    const target = this._createMouseTarget(new EditorMouseEvent(event, this.viewHelper.viewDomNode), false);\n\n    if (target.position) {\n      // Send the tap event also to the <textarea> (for input purposes)\n      const event = document.createEvent('CustomEvent');\n      event.initEvent(TextAreaSyntethicEvents.Tap, false, true);\n      this.viewHelper.dispatchTextAreaEvent(event);\n      this.viewController.moveTo(target.position);\n    }\n  }\n\n  onChange(e) {\n    this._context.model.deltaScrollNow(-e.translationX, -e.translationY);\n  }\n\n}\n\nexport class PointerHandler extends Disposable {\n  constructor(context, viewController, viewHelper) {\n    super();\n\n    if (platform.isIOS && BrowserFeatures.pointerEvents) {\n      this.handler = this._register(new PointerEventHandler(context, viewController, viewHelper));\n    } else if (window.TouchEvent) {\n      this.handler = this._register(new TouchHandler(context, viewController, viewHelper));\n    } else {\n      this.handler = this._register(new MouseHandler(context, viewController, viewHelper));\n    }\n  }\n\n  getTargetAtClientPoint(clientX, clientY) {\n    return this.handler.getTargetAtClientPoint(clientX, clientY);\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/browser/controller/pointerHandler.js"],"names":["dom","platform","EventType","Gesture","Disposable","MouseHandler","createMouseMoveEventMerger","EditorMouseEvent","EditorPointerEventFactory","BrowserFeatures","TextAreaSyntethicEvents","PointerEventHandler","constructor","context","viewController","viewHelper","_register","addTarget","linesContentDomNode","addDisposableListener","Tap","e","onTap","Change","onChange","Contextmenu","_onContextMenu","viewDomNode","_lastPointerType","pointerType","pointerEvents","onPointerMoveThrottled","_onMouseMove","mouseTargetFactory","MOUSE_MOVE_MINIMUM_TIME","onPointerUp","_onMouseUp","onPointerLeave","_onMouseLeave","onPointerDown","_onMouseDown","event","initialTarget","contains","preventDefault","focusTextArea","target","_createMouseTarget","position","dispatchMouse","mouseColumn","column","startedOnLineNumbers","mouseDownCount","tapCount","inSelectionMode","altKey","ctrlKey","metaKey","shiftKey","leftButton","middleButton","_context","model","deltaScrollNow","translationX","translationY","browserEvent","TouchHandler","document","createEvent","initEvent","dispatchTextAreaEvent","moveTo","PointerHandler","isIOS","handler","window","TouchEvent","getTargetAtClientPoint","clientX","clientY"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../base/browser/dom.js';\nimport * as platform from '../../../base/common/platform.js';\nimport { EventType, Gesture } from '../../../base/browser/touch.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { MouseHandler, createMouseMoveEventMerger } from './mouseHandler.js';\nimport { EditorMouseEvent, EditorPointerEventFactory } from '../editorDom.js';\nimport { BrowserFeatures } from '../../../base/browser/canIUse.js';\nimport { TextAreaSyntethicEvents } from './textAreaInput.js';\n/**\n * Currently only tested on iOS 13/ iPadOS.\n */\nexport class PointerEventHandler extends MouseHandler {\n    constructor(context, viewController, viewHelper) {\n        super(context, viewController, viewHelper);\n        this._register(Gesture.addTarget(this.viewHelper.linesContentDomNode));\n        this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, EventType.Tap, (e) => this.onTap(e)));\n        this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, EventType.Change, (e) => this.onChange(e)));\n        this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, EventType.Contextmenu, (e) => this._onContextMenu(new EditorMouseEvent(e, this.viewHelper.viewDomNode), false)));\n        this._lastPointerType = 'mouse';\n        this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, 'pointerdown', (e) => {\n            const pointerType = e.pointerType;\n            if (pointerType === 'mouse') {\n                this._lastPointerType = 'mouse';\n                return;\n            }\n            else if (pointerType === 'touch') {\n                this._lastPointerType = 'touch';\n            }\n            else {\n                this._lastPointerType = 'pen';\n            }\n        }));\n        // PonterEvents\n        const pointerEvents = new EditorPointerEventFactory(this.viewHelper.viewDomNode);\n        this._register(pointerEvents.onPointerMoveThrottled(this.viewHelper.viewDomNode, (e) => this._onMouseMove(e), createMouseMoveEventMerger(this.mouseTargetFactory), MouseHandler.MOUSE_MOVE_MINIMUM_TIME));\n        this._register(pointerEvents.onPointerUp(this.viewHelper.viewDomNode, (e) => this._onMouseUp(e)));\n        this._register(pointerEvents.onPointerLeave(this.viewHelper.viewDomNode, (e) => this._onMouseLeave(e)));\n        this._register(pointerEvents.onPointerDown(this.viewHelper.viewDomNode, (e) => this._onMouseDown(e)));\n    }\n    onTap(event) {\n        if (!event.initialTarget || !this.viewHelper.linesContentDomNode.contains(event.initialTarget)) {\n            return;\n        }\n        event.preventDefault();\n        this.viewHelper.focusTextArea();\n        const target = this._createMouseTarget(new EditorMouseEvent(event, this.viewHelper.viewDomNode), false);\n        if (target.position) {\n            // this.viewController.moveTo(target.position);\n            this.viewController.dispatchMouse({\n                position: target.position,\n                mouseColumn: target.position.column,\n                startedOnLineNumbers: false,\n                mouseDownCount: event.tapCount,\n                inSelectionMode: false,\n                altKey: false,\n                ctrlKey: false,\n                metaKey: false,\n                shiftKey: false,\n                leftButton: false,\n                middleButton: false,\n            });\n        }\n    }\n    onChange(e) {\n        if (this._lastPointerType === 'touch') {\n            this._context.model.deltaScrollNow(-e.translationX, -e.translationY);\n        }\n    }\n    _onMouseDown(e) {\n        if (e.browserEvent.pointerType === 'touch') {\n            return;\n        }\n        super._onMouseDown(e);\n    }\n}\nclass TouchHandler extends MouseHandler {\n    constructor(context, viewController, viewHelper) {\n        super(context, viewController, viewHelper);\n        this._register(Gesture.addTarget(this.viewHelper.linesContentDomNode));\n        this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, EventType.Tap, (e) => this.onTap(e)));\n        this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, EventType.Change, (e) => this.onChange(e)));\n        this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, EventType.Contextmenu, (e) => this._onContextMenu(new EditorMouseEvent(e, this.viewHelper.viewDomNode), false)));\n    }\n    onTap(event) {\n        event.preventDefault();\n        this.viewHelper.focusTextArea();\n        const target = this._createMouseTarget(new EditorMouseEvent(event, this.viewHelper.viewDomNode), false);\n        if (target.position) {\n            // Send the tap event also to the <textarea> (for input purposes)\n            const event = document.createEvent('CustomEvent');\n            event.initEvent(TextAreaSyntethicEvents.Tap, false, true);\n            this.viewHelper.dispatchTextAreaEvent(event);\n            this.viewController.moveTo(target.position);\n        }\n    }\n    onChange(e) {\n        this._context.model.deltaScrollNow(-e.translationX, -e.translationY);\n    }\n}\nexport class PointerHandler extends Disposable {\n    constructor(context, viewController, viewHelper) {\n        super();\n        if ((platform.isIOS && BrowserFeatures.pointerEvents)) {\n            this.handler = this._register(new PointerEventHandler(context, viewController, viewHelper));\n        }\n        else if (window.TouchEvent) {\n            this.handler = this._register(new TouchHandler(context, viewController, viewHelper));\n        }\n        else {\n            this.handler = this._register(new MouseHandler(context, viewController, viewHelper));\n        }\n    }\n    getTargetAtClientPoint(clientX, clientY) {\n        return this.handler.getTargetAtClientPoint(clientX, clientY);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}