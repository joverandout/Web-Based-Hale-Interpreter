{"ast":null,"code":"import { CommonActions } from '@react-navigation/routers';\nimport * as React from 'react';\nimport NavigationContext from './NavigationContext';\nimport { PrivateValueStore } from './types';\nimport UnhandledActionContext from './UnhandledActionContext'; // This is to make TypeScript compiler happy\n// eslint-disable-next-line babel/no-unused-expressions\n\nPrivateValueStore;\n/**\n * Navigation object with helper methods to be used by a navigator.\n * This object includes methods for common actions as well as methods the parent screen's navigation object.\n */\n\nexport default function useNavigationHelpers(_ref) {\n  let {\n    onAction,\n    getState,\n    emitter,\n    router\n  } = _ref;\n  const onUnhandledAction = React.useContext(UnhandledActionContext);\n  const parentNavigationHelpers = React.useContext(NavigationContext);\n  return React.useMemo(() => {\n    const dispatch = op => {\n      const action = typeof op === 'function' ? op(getState()) : op;\n      const handled = onAction(action);\n\n      if (!handled) {\n        onUnhandledAction === null || onUnhandledAction === void 0 ? void 0 : onUnhandledAction(action);\n      }\n    };\n\n    const actions = { ...router.actionCreators,\n      ...CommonActions\n    };\n    const helpers = Object.keys(actions).reduce((acc, name) => {\n      // @ts-expect-error: name is a valid key, but TypeScript is dumb\n      acc[name] = function () {\n        return dispatch(actions[name](...arguments));\n      };\n\n      return acc;\n    }, {});\n    return { ...parentNavigationHelpers,\n      ...helpers,\n      dispatch,\n      emit: emitter.emit,\n      isFocused: parentNavigationHelpers ? parentNavigationHelpers.isFocused : () => true,\n      canGoBack: () => {\n        const state = getState();\n        return router.getStateForAction(state, CommonActions.goBack(), {\n          routeNames: state.routeNames,\n          routeParamList: {},\n          routeGetIdList: {}\n        }) !== null || (parentNavigationHelpers === null || parentNavigationHelpers === void 0 ? void 0 : parentNavigationHelpers.canGoBack()) || false;\n      },\n      getParent: () => parentNavigationHelpers,\n      getState\n    };\n  }, [emitter.emit, getState, onAction, onUnhandledAction, parentNavigationHelpers, router]);\n}","map":{"version":3,"sources":["useNavigationHelpers.tsx"],"names":["PrivateValueStore","router","onUnhandledAction","React","parentNavigationHelpers","dispatch","op","action","getState","handled","onAction","actions","CommonActions","helpers","acc","emit","emitter","isFocused","canGoBack","state","routeNames","routeParamList","routeGetIdList","getParent"],"mappings":"AAAA,SAAA,aAAA,QAAA,2BAAA;AAOA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,OAAA,iBAAA,MAAA,qBAAA;AACA,SAAA,iBAAA,QAAA,SAAA;AACA,OAAA,sBAAA,MAAA,0BAAA,C,CAGA;AACA;;AACAA,iBAAiB;AASjB;AACA;AACA;AACA;;AACA,eAAe,SAAA,oBAAA,CAAA,IAAA,EAKoD;AAAA,MAAjE;AAAA,IAAA,QAAA;AAAA,IAAA,QAAA;AAAA,IAAA,OAAA;AAA+BC,IAAAA;AAA/B,MAAiE,IAAA;AACjE,QAAMC,iBAAiB,GAAGC,KAAK,CAALA,UAAAA,CAA1B,sBAA0BA,CAA1B;AACA,QAAMC,uBAAuB,GAAGD,KAAK,CAALA,UAAAA,CAAhC,iBAAgCA,CAAhC;AAEA,SAAO,KAAK,CAAL,OAAA,CAAc,MAAM;AACzB,UAAME,QAAQ,GAAIC,EAAD,IAA6C;AAC5D,YAAMC,MAAM,GAAG,OAAA,EAAA,KAAA,UAAA,GAA2BD,EAAE,CAACE,QAA9B,EAA6B,CAA7B,GAAf,EAAA;AAEA,YAAMC,OAAO,GAAGC,QAAQ,CAAxB,MAAwB,CAAxB;;AAEA,UAAI,CAAJ,OAAA,EAAc;AACZR,QAAAA,iBAAiB,KAAjBA,IAAAA,IAAAA,iBAAiB,KAAA,KAAjBA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,iBAAiB,CAAjBA,MAAiB,CAAjBA;AACD;AAPH,KAAA;;AAUA,UAAMS,OAAO,GAAG,EACd,GAAGV,MAAM,CADK,cAAA;AAEd,SAAGW;AAFW,KAAhB;AAKA,UAAMC,OAAO,GAAG,MAAM,CAAN,IAAA,CAAA,OAAA,EAAA,MAAA,CACd,CAAA,GAAA,EAAA,IAAA,KAAe;AACb;AACAC,MAAAA,GAAG,CAAHA,IAAG,CAAHA,GAAY,YAAA;AAAA,eAAkBT,QAAQ,CAACM,OAAO,CAAPA,IAAO,CAAPA,CAAc,GAAzC,SAA2BA,CAAD,CAA1B;AAAZG,OAAAA;;AACA,aAAA,GAAA;AAJY,KAAA,EAAhB,EAAgB,CAAhB;AASA,WAAO,EACL,GADK,uBAAA;AAEL,SAFK,OAAA;AAAA,MAAA,QAAA;AAILC,MAAAA,IAAI,EAAEC,OAAO,CAJR,IAAA;AAKLC,MAAAA,SAAS,EAAEb,uBAAuB,GAC9BA,uBAAuB,CADO,SAAA,GAE9B,MAPC,IAAA;AAQLc,MAAAA,SAAS,EAAE,MAAM;AACf,cAAMC,KAAK,GAAGX,QAAd,EAAA;AAEA,eACE,MAAM,CAAN,iBAAA,CAAA,KAAA,EAAgCI,aAAa,CAA7C,MAAgCA,EAAhC,EAAkE;AAChEQ,UAAAA,UAAU,EAAED,KAAK,CAD+C,UAAA;AAEhEE,UAAAA,cAAc,EAFkD,EAAA;AAGhEC,UAAAA,cAAc,EAAE;AAHgD,SAAlE,MAAA,IAAA,KAKAlB,uBALA,KAAA,IAKAA,IAAAA,uBALA,KAAA,KAAA,CAKAA,GALA,KAAA,CAKAA,GAAAA,uBAAuB,CALvB,SAKAA,EALA,KADF,KAAA;AAXG,OAAA;AAqBLmB,MAAAA,SAAS,EAAE,MArBN,uBAAA;AAsBLf,MAAAA;AAtBK,KAAP;AAzBK,GAAA,EAmDJ,CACDQ,OAAO,CADN,IAAA,EAAA,QAAA,EAAA,QAAA,EAAA,iBAAA,EAAA,uBAAA,EAnDH,MAmDG,CAnDI,CAAP;AA2DD","sourcesContent":["import {\n  CommonActions,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationContext from './NavigationContext';\nimport { NavigationHelpers, NavigationProp, PrivateValueStore } from './types';\nimport UnhandledActionContext from './UnhandledActionContext';\nimport type { NavigationEventEmitter } from './useEventEmitter';\n\n// This is to make TypeScript compiler happy\n// eslint-disable-next-line babel/no-unused-expressions\nPrivateValueStore;\n\ntype Options<State extends NavigationState, Action extends NavigationAction> = {\n  onAction: (action: NavigationAction) => boolean;\n  getState: () => State;\n  emitter: NavigationEventEmitter<any>;\n  router: Router<State, Action>;\n};\n\n/**\n * Navigation object with helper methods to be used by a navigator.\n * This object includes methods for common actions as well as methods the parent screen's navigation object.\n */\nexport default function useNavigationHelpers<\n  State extends NavigationState,\n  ActionHelpers extends Record<string, () => void>,\n  Action extends NavigationAction,\n  EventMap extends Record<string, any>\n>({ onAction, getState, emitter, router }: Options<State, Action>) {\n  const onUnhandledAction = React.useContext(UnhandledActionContext);\n  const parentNavigationHelpers = React.useContext(NavigationContext);\n\n  return React.useMemo(() => {\n    const dispatch = (op: Action | ((state: State) => Action)) => {\n      const action = typeof op === 'function' ? op(getState()) : op;\n\n      const handled = onAction(action);\n\n      if (!handled) {\n        onUnhandledAction?.(action);\n      }\n    };\n\n    const actions = {\n      ...router.actionCreators,\n      ...CommonActions,\n    };\n\n    const helpers = Object.keys(actions).reduce<Record<string, () => void>>(\n      (acc, name) => {\n        // @ts-expect-error: name is a valid key, but TypeScript is dumb\n        acc[name] = (...args: any) => dispatch(actions[name](...args));\n        return acc;\n      },\n      {}\n    );\n\n    return {\n      ...parentNavigationHelpers,\n      ...helpers,\n      dispatch,\n      emit: emitter.emit,\n      isFocused: parentNavigationHelpers\n        ? parentNavigationHelpers.isFocused\n        : () => true,\n      canGoBack: () => {\n        const state = getState();\n\n        return (\n          router.getStateForAction(state, CommonActions.goBack() as Action, {\n            routeNames: state.routeNames,\n            routeParamList: {},\n            routeGetIdList: {},\n          }) !== null ||\n          parentNavigationHelpers?.canGoBack() ||\n          false\n        );\n      },\n      getParent: () => parentNavigationHelpers as any,\n      getState,\n    } as NavigationHelpers<ParamListBase, EventMap> &\n      (NavigationProp<ParamListBase, string, any, any, any> | undefined) &\n      ActionHelpers;\n  }, [\n    emitter.emit,\n    getState,\n    onAction,\n    onUnhandledAction,\n    parentNavigationHelpers,\n    router,\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}