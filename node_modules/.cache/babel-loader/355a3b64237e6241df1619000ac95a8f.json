{"ast":null,"code":"/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n// src/basic-languages/postiats/postiats.ts\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"(*\", \"*)\"]\n  },\n  brackets: [[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"], [\"<\", \">\"]],\n  autoClosingPairs: [{\n    open: '\"',\n    close: '\"',\n    notIn: [\"string\", \"comment\"]\n  }, {\n    open: \"{\",\n    close: \"}\",\n    notIn: [\"string\", \"comment\"]\n  }, {\n    open: \"[\",\n    close: \"]\",\n    notIn: [\"string\", \"comment\"]\n  }, {\n    open: \"(\",\n    close: \")\",\n    notIn: [\"string\", \"comment\"]\n  }]\n};\nvar language = {\n  tokenPostfix: \".pats\",\n  defaultToken: \"invalid\",\n  keywords: [\"abstype\", \"abst0ype\", \"absprop\", \"absview\", \"absvtype\", \"absviewtype\", \"absvt0ype\", \"absviewt0ype\", \"as\", \"and\", \"assume\", \"begin\", \"classdec\", \"datasort\", \"datatype\", \"dataprop\", \"dataview\", \"datavtype\", \"dataviewtype\", \"do\", \"end\", \"extern\", \"extype\", \"extvar\", \"exception\", \"fn\", \"fnx\", \"fun\", \"prfn\", \"prfun\", \"praxi\", \"castfn\", \"if\", \"then\", \"else\", \"ifcase\", \"in\", \"infix\", \"infixl\", \"infixr\", \"prefix\", \"postfix\", \"implmnt\", \"implement\", \"primplmnt\", \"primplement\", \"import\", \"let\", \"local\", \"macdef\", \"macrodef\", \"nonfix\", \"symelim\", \"symintr\", \"overload\", \"of\", \"op\", \"rec\", \"sif\", \"scase\", \"sortdef\", \"sta\", \"stacst\", \"stadef\", \"static\", \"staload\", \"dynload\", \"try\", \"tkindef\", \"typedef\", \"propdef\", \"viewdef\", \"vtypedef\", \"viewtypedef\", \"prval\", \"var\", \"prvar\", \"when\", \"where\", \"with\", \"withtype\", \"withprop\", \"withview\", \"withvtype\", \"withviewtype\"],\n  keywords_dlr: [\"$delay\", \"$ldelay\", \"$arrpsz\", \"$arrptrsize\", \"$d2ctype\", \"$effmask\", \"$effmask_ntm\", \"$effmask_exn\", \"$effmask_ref\", \"$effmask_wrt\", \"$effmask_all\", \"$extern\", \"$extkind\", \"$extype\", \"$extype_struct\", \"$extval\", \"$extfcall\", \"$extmcall\", \"$literal\", \"$myfilename\", \"$mylocation\", \"$myfunction\", \"$lst\", \"$lst_t\", \"$lst_vt\", \"$list\", \"$list_t\", \"$list_vt\", \"$rec\", \"$rec_t\", \"$rec_vt\", \"$record\", \"$record_t\", \"$record_vt\", \"$tup\", \"$tup_t\", \"$tup_vt\", \"$tuple\", \"$tuple_t\", \"$tuple_vt\", \"$break\", \"$continue\", \"$raise\", \"$showtype\", \"$vcopyenv_v\", \"$vcopyenv_vt\", \"$tempenver\", \"$solver_assert\", \"$solver_verify\"],\n  keywords_srp: [\"#if\", \"#ifdef\", \"#ifndef\", \"#then\", \"#elif\", \"#elifdef\", \"#elifndef\", \"#else\", \"#endif\", \"#error\", \"#prerr\", \"#print\", \"#assert\", \"#undef\", \"#define\", \"#include\", \"#require\", \"#pragma\", \"#codegen2\", \"#codegen3\"],\n  irregular_keyword_list: [\"val+\", \"val-\", \"val\", \"case+\", \"case-\", \"case\", \"addr@\", \"addr\", \"fold@\", \"free@\", \"fix@\", \"fix\", \"lam@\", \"lam\", \"llam@\", \"llam\", \"viewt@ype+\", \"viewt@ype-\", \"viewt@ype\", \"viewtype+\", \"viewtype-\", \"viewtype\", \"view+\", \"view-\", \"view@\", \"view\", \"type+\", \"type-\", \"type\", \"vtype+\", \"vtype-\", \"vtype\", \"vt@ype+\", \"vt@ype-\", \"vt@ype\", \"viewt@ype+\", \"viewt@ype-\", \"viewt@ype\", \"viewtype+\", \"viewtype-\", \"viewtype\", \"prop+\", \"prop-\", \"prop\", \"type+\", \"type-\", \"type\", \"t@ype\", \"t@ype+\", \"t@ype-\", \"abst@ype\", \"abstype\", \"absviewt@ype\", \"absvt@ype\", \"for*\", \"for\", \"while*\", \"while\"],\n  keywords_types: [\"bool\", \"double\", \"byte\", \"int\", \"short\", \"char\", \"void\", \"unit\", \"long\", \"float\", \"string\", \"strptr\"],\n  keywords_effects: [\"0\", \"fun\", \"clo\", \"prf\", \"funclo\", \"cloptr\", \"cloref\", \"ref\", \"ntm\", \"1\"],\n  operators: [\"@\", \"!\", \"|\", \"`\", \":\", \"$\", \".\", \"=\", \"#\", \"~\", \"..\", \"...\", \"=>\", \"=<>\", \"=/=>\", \"=>>\", \"=/=>>\", \"<\", \">\", \"><\", \".<\", \">.\", \".<>.\", \"->\", \"-<>\"],\n  brackets: [{\n    open: \",(\",\n    close: \")\",\n    token: \"delimiter.parenthesis\"\n  }, {\n    open: \"`(\",\n    close: \")\",\n    token: \"delimiter.parenthesis\"\n  }, {\n    open: \"%(\",\n    close: \")\",\n    token: \"delimiter.parenthesis\"\n  }, {\n    open: \"'(\",\n    close: \")\",\n    token: \"delimiter.parenthesis\"\n  }, {\n    open: \"'{\",\n    close: \"}\",\n    token: \"delimiter.parenthesis\"\n  }, {\n    open: \"@(\",\n    close: \")\",\n    token: \"delimiter.parenthesis\"\n  }, {\n    open: \"@{\",\n    close: \"}\",\n    token: \"delimiter.brace\"\n  }, {\n    open: \"@[\",\n    close: \"]\",\n    token: \"delimiter.square\"\n  }, {\n    open: \"#[\",\n    close: \"]\",\n    token: \"delimiter.square\"\n  }, {\n    open: \"{\",\n    close: \"}\",\n    token: \"delimiter.curly\"\n  }, {\n    open: \"[\",\n    close: \"]\",\n    token: \"delimiter.square\"\n  }, {\n    open: \"(\",\n    close: \")\",\n    token: \"delimiter.parenthesis\"\n  }, {\n    open: \"<\",\n    close: \">\",\n    token: \"delimiter.angle\"\n  }],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  IDENTFST: /[a-zA-Z_]/,\n  IDENTRST: /[a-zA-Z0-9_'$]/,\n  symbolic: /[%&+-./:=@~`^|*!$#?<>]/,\n  digit: /[0-9]/,\n  digitseq0: /@digit*/,\n  xdigit: /[0-9A-Za-z]/,\n  xdigitseq0: /@xdigit*/,\n  INTSP: /[lLuU]/,\n  FLOATSP: /[fFlL]/,\n  fexponent: /[eE][+-]?[0-9]+/,\n  fexponent_bin: /[pP][+-]?[0-9]+/,\n  deciexp: /\\.[0-9]*@fexponent?/,\n  hexiexp: /\\.[0-9a-zA-Z]*@fexponent_bin?/,\n  irregular_keywords: /val[+-]?|case[+-]?|addr\\@?|fold\\@|free\\@|fix\\@?|lam\\@?|llam\\@?|prop[+-]?|type[+-]?|view[+-@]?|viewt@?ype[+-]?|t@?ype[+-]?|v(iew)?t@?ype[+-]?|abst@?ype|absv(iew)?t@?ype|for\\*?|while\\*?/,\n  ESCHAR: /[ntvbrfa\\\\\\?'\"\\(\\[\\{]/,\n  start: \"root\",\n  tokenizer: {\n    root: [{\n      regex: /[ \\t\\r\\n]+/,\n      action: {\n        token: \"\"\n      }\n    }, {\n      regex: /\\(\\*\\)/,\n      action: {\n        token: \"invalid\"\n      }\n    }, {\n      regex: /\\(\\*/,\n      action: {\n        token: \"comment\",\n        next: \"lexing_COMMENT_block_ml\"\n      }\n    }, {\n      regex: /\\(/,\n      action: \"@brackets\"\n    }, {\n      regex: /\\)/,\n      action: \"@brackets\"\n    }, {\n      regex: /\\[/,\n      action: \"@brackets\"\n    }, {\n      regex: /\\]/,\n      action: \"@brackets\"\n    }, {\n      regex: /\\{/,\n      action: \"@brackets\"\n    }, {\n      regex: /\\}/,\n      action: \"@brackets\"\n    }, {\n      regex: /,\\(/,\n      action: \"@brackets\"\n    }, {\n      regex: /,/,\n      action: {\n        token: \"delimiter.comma\"\n      }\n    }, {\n      regex: /;/,\n      action: {\n        token: \"delimiter.semicolon\"\n      }\n    }, {\n      regex: /@\\(/,\n      action: \"@brackets\"\n    }, {\n      regex: /@\\[/,\n      action: \"@brackets\"\n    }, {\n      regex: /@\\{/,\n      action: \"@brackets\"\n    }, {\n      regex: /:</,\n      action: {\n        token: \"keyword\",\n        next: \"@lexing_EFFECT_commaseq0\"\n      }\n    }, {\n      regex: /\\.@symbolic+/,\n      action: {\n        token: \"identifier.sym\"\n      }\n    }, {\n      regex: /\\.@digit*@fexponent@FLOATSP*/,\n      action: {\n        token: \"number.float\"\n      }\n    }, {\n      regex: /\\.@digit+/,\n      action: {\n        token: \"number.float\"\n      }\n    }, {\n      regex: /\\$@IDENTFST@IDENTRST*/,\n      action: {\n        cases: {\n          \"@keywords_dlr\": {\n            token: \"keyword.dlr\"\n          },\n          \"@default\": {\n            token: \"namespace\"\n          }\n        }\n      }\n    }, {\n      regex: /\\#@IDENTFST@IDENTRST*/,\n      action: {\n        cases: {\n          \"@keywords_srp\": {\n            token: \"keyword.srp\"\n          },\n          \"@default\": {\n            token: \"identifier\"\n          }\n        }\n      }\n    }, {\n      regex: /%\\(/,\n      action: {\n        token: \"delimiter.parenthesis\"\n      }\n    }, {\n      regex: /^%{(#|\\^|\\$)?/,\n      action: {\n        token: \"keyword\",\n        next: \"@lexing_EXTCODE\",\n        nextEmbedded: \"text/javascript\"\n      }\n    }, {\n      regex: /^%}/,\n      action: {\n        token: \"keyword\"\n      }\n    }, {\n      regex: /'\\(/,\n      action: {\n        token: \"delimiter.parenthesis\"\n      }\n    }, {\n      regex: /'\\[/,\n      action: {\n        token: \"delimiter.bracket\"\n      }\n    }, {\n      regex: /'\\{/,\n      action: {\n        token: \"delimiter.brace\"\n      }\n    }, [/(')(\\\\@ESCHAR|\\\\[xX]@xdigit+|\\\\@digit+)(')/, [\"string\", \"string.escape\", \"string\"]], [/'[^\\\\']'/, \"string\"], [/\"/, \"string.quote\", \"@lexing_DQUOTE\"], {\n      regex: /`\\(/,\n      action: \"@brackets\"\n    }, {\n      regex: /\\\\/,\n      action: {\n        token: \"punctuation\"\n      }\n    }, {\n      regex: /@irregular_keywords(?!@IDENTRST)/,\n      action: {\n        token: \"keyword\"\n      }\n    }, {\n      regex: /@IDENTFST@IDENTRST*[<!\\[]?/,\n      action: {\n        cases: {\n          \"@keywords\": {\n            token: \"keyword\"\n          },\n          \"@keywords_types\": {\n            token: \"type\"\n          },\n          \"@default\": {\n            token: \"identifier\"\n          }\n        }\n      }\n    }, {\n      regex: /\\/\\/\\/\\//,\n      action: {\n        token: \"comment\",\n        next: \"@lexing_COMMENT_rest\"\n      }\n    }, {\n      regex: /\\/\\/.*$/,\n      action: {\n        token: \"comment\"\n      }\n    }, {\n      regex: /\\/\\*/,\n      action: {\n        token: \"comment\",\n        next: \"@lexing_COMMENT_block_c\"\n      }\n    }, {\n      regex: /-<|=</,\n      action: {\n        token: \"keyword\",\n        next: \"@lexing_EFFECT_commaseq0\"\n      }\n    }, {\n      regex: /@symbolic+/,\n      action: {\n        cases: {\n          \"@operators\": \"keyword\",\n          \"@default\": \"operator\"\n        }\n      }\n    }, {\n      regex: /0[xX]@xdigit+(@hexiexp|@fexponent_bin)@FLOATSP*/,\n      action: {\n        token: \"number.float\"\n      }\n    }, {\n      regex: /0[xX]@xdigit+@INTSP*/,\n      action: {\n        token: \"number.hex\"\n      }\n    }, {\n      regex: /0[0-7]+(?![0-9])@INTSP*/,\n      action: {\n        token: \"number.octal\"\n      }\n    }, {\n      regex: /@digit+(@fexponent|@deciexp)@FLOATSP*/,\n      action: {\n        token: \"number.float\"\n      }\n    }, {\n      regex: /@digit@digitseq0@INTSP*/,\n      action: {\n        token: \"number.decimal\"\n      }\n    }, {\n      regex: /@digit+@INTSP*/,\n      action: {\n        token: \"number\"\n      }\n    }],\n    lexing_COMMENT_block_ml: [[/[^\\(\\*]+/, \"comment\"], [/\\(\\*/, \"comment\", \"@push\"], [/\\(\\*/, \"comment.invalid\"], [/\\*\\)/, \"comment\", \"@pop\"], [/\\*/, \"comment\"]],\n    lexing_COMMENT_block_c: [[/[^\\/*]+/, \"comment\"], [/\\*\\//, \"comment\", \"@pop\"], [/[\\/*]/, \"comment\"]],\n    lexing_COMMENT_rest: [[/$/, \"comment\", \"@pop\"], [/.*/, \"comment\"]],\n    lexing_EFFECT_commaseq0: [{\n      regex: /@IDENTFST@IDENTRST+|@digit+/,\n      action: {\n        cases: {\n          \"@keywords_effects\": {\n            token: \"type.effect\"\n          },\n          \"@default\": {\n            token: \"identifier\"\n          }\n        }\n      }\n    }, {\n      regex: /,/,\n      action: {\n        token: \"punctuation\"\n      }\n    }, {\n      regex: />/,\n      action: {\n        token: \"@rematch\",\n        next: \"@pop\"\n      }\n    }],\n    lexing_EXTCODE: [{\n      regex: /^%}/,\n      action: {\n        token: \"@rematch\",\n        next: \"@pop\",\n        nextEmbedded: \"@pop\"\n      }\n    }, {\n      regex: /[^%]+/,\n      action: \"\"\n    }],\n    lexing_DQUOTE: [{\n      regex: /\"/,\n      action: {\n        token: \"string.quote\",\n        next: \"@pop\"\n      }\n    }, {\n      regex: /(\\{\\$)(@IDENTFST@IDENTRST*)(\\})/,\n      action: [{\n        token: \"string.escape\"\n      }, {\n        token: \"identifier\"\n      }, {\n        token: \"string.escape\"\n      }]\n    }, {\n      regex: /\\\\$/,\n      action: {\n        token: \"string.escape\"\n      }\n    }, {\n      regex: /\\\\(@ESCHAR|[xX]@xdigit+|@digit+)/,\n      action: {\n        token: \"string.escape\"\n      }\n    }, {\n      regex: /[^\\\\\"]+/,\n      action: {\n        token: \"string\"\n      }\n    }]\n  }\n};\nexport { conf, language };","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/basic-languages/postiats/postiats.js"],"names":["conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","language","tokenPostfix","defaultToken","keywords","keywords_dlr","keywords_srp","irregular_keyword_list","keywords_types","keywords_effects","operators","token","symbols","IDENTFST","IDENTRST","symbolic","digit","digitseq0","xdigit","xdigitseq0","INTSP","FLOATSP","fexponent","fexponent_bin","deciexp","hexiexp","irregular_keywords","ESCHAR","start","tokenizer","root","regex","action","next","cases","nextEmbedded","lexing_COMMENT_block_ml","lexing_COMMENT_block_c","lexing_COMMENT_rest","lexing_EFFECT_commaseq0","lexing_EXTCODE","lexing_DQUOTE"],"mappings":"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","sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/postiats/postiats.ts\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"(*\", \"*)\"]\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"],\n    [\"<\", \">\"]\n  ],\n  autoClosingPairs: [\n    { open: '\"', close: '\"', notIn: [\"string\", \"comment\"] },\n    { open: \"{\", close: \"}\", notIn: [\"string\", \"comment\"] },\n    { open: \"[\", close: \"]\", notIn: [\"string\", \"comment\"] },\n    { open: \"(\", close: \")\", notIn: [\"string\", \"comment\"] }\n  ]\n};\nvar language = {\n  tokenPostfix: \".pats\",\n  defaultToken: \"invalid\",\n  keywords: [\n    \"abstype\",\n    \"abst0ype\",\n    \"absprop\",\n    \"absview\",\n    \"absvtype\",\n    \"absviewtype\",\n    \"absvt0ype\",\n    \"absviewt0ype\",\n    \"as\",\n    \"and\",\n    \"assume\",\n    \"begin\",\n    \"classdec\",\n    \"datasort\",\n    \"datatype\",\n    \"dataprop\",\n    \"dataview\",\n    \"datavtype\",\n    \"dataviewtype\",\n    \"do\",\n    \"end\",\n    \"extern\",\n    \"extype\",\n    \"extvar\",\n    \"exception\",\n    \"fn\",\n    \"fnx\",\n    \"fun\",\n    \"prfn\",\n    \"prfun\",\n    \"praxi\",\n    \"castfn\",\n    \"if\",\n    \"then\",\n    \"else\",\n    \"ifcase\",\n    \"in\",\n    \"infix\",\n    \"infixl\",\n    \"infixr\",\n    \"prefix\",\n    \"postfix\",\n    \"implmnt\",\n    \"implement\",\n    \"primplmnt\",\n    \"primplement\",\n    \"import\",\n    \"let\",\n    \"local\",\n    \"macdef\",\n    \"macrodef\",\n    \"nonfix\",\n    \"symelim\",\n    \"symintr\",\n    \"overload\",\n    \"of\",\n    \"op\",\n    \"rec\",\n    \"sif\",\n    \"scase\",\n    \"sortdef\",\n    \"sta\",\n    \"stacst\",\n    \"stadef\",\n    \"static\",\n    \"staload\",\n    \"dynload\",\n    \"try\",\n    \"tkindef\",\n    \"typedef\",\n    \"propdef\",\n    \"viewdef\",\n    \"vtypedef\",\n    \"viewtypedef\",\n    \"prval\",\n    \"var\",\n    \"prvar\",\n    \"when\",\n    \"where\",\n    \"with\",\n    \"withtype\",\n    \"withprop\",\n    \"withview\",\n    \"withvtype\",\n    \"withviewtype\"\n  ],\n  keywords_dlr: [\n    \"$delay\",\n    \"$ldelay\",\n    \"$arrpsz\",\n    \"$arrptrsize\",\n    \"$d2ctype\",\n    \"$effmask\",\n    \"$effmask_ntm\",\n    \"$effmask_exn\",\n    \"$effmask_ref\",\n    \"$effmask_wrt\",\n    \"$effmask_all\",\n    \"$extern\",\n    \"$extkind\",\n    \"$extype\",\n    \"$extype_struct\",\n    \"$extval\",\n    \"$extfcall\",\n    \"$extmcall\",\n    \"$literal\",\n    \"$myfilename\",\n    \"$mylocation\",\n    \"$myfunction\",\n    \"$lst\",\n    \"$lst_t\",\n    \"$lst_vt\",\n    \"$list\",\n    \"$list_t\",\n    \"$list_vt\",\n    \"$rec\",\n    \"$rec_t\",\n    \"$rec_vt\",\n    \"$record\",\n    \"$record_t\",\n    \"$record_vt\",\n    \"$tup\",\n    \"$tup_t\",\n    \"$tup_vt\",\n    \"$tuple\",\n    \"$tuple_t\",\n    \"$tuple_vt\",\n    \"$break\",\n    \"$continue\",\n    \"$raise\",\n    \"$showtype\",\n    \"$vcopyenv_v\",\n    \"$vcopyenv_vt\",\n    \"$tempenver\",\n    \"$solver_assert\",\n    \"$solver_verify\"\n  ],\n  keywords_srp: [\n    \"#if\",\n    \"#ifdef\",\n    \"#ifndef\",\n    \"#then\",\n    \"#elif\",\n    \"#elifdef\",\n    \"#elifndef\",\n    \"#else\",\n    \"#endif\",\n    \"#error\",\n    \"#prerr\",\n    \"#print\",\n    \"#assert\",\n    \"#undef\",\n    \"#define\",\n    \"#include\",\n    \"#require\",\n    \"#pragma\",\n    \"#codegen2\",\n    \"#codegen3\"\n  ],\n  irregular_keyword_list: [\n    \"val+\",\n    \"val-\",\n    \"val\",\n    \"case+\",\n    \"case-\",\n    \"case\",\n    \"addr@\",\n    \"addr\",\n    \"fold@\",\n    \"free@\",\n    \"fix@\",\n    \"fix\",\n    \"lam@\",\n    \"lam\",\n    \"llam@\",\n    \"llam\",\n    \"viewt@ype+\",\n    \"viewt@ype-\",\n    \"viewt@ype\",\n    \"viewtype+\",\n    \"viewtype-\",\n    \"viewtype\",\n    \"view+\",\n    \"view-\",\n    \"view@\",\n    \"view\",\n    \"type+\",\n    \"type-\",\n    \"type\",\n    \"vtype+\",\n    \"vtype-\",\n    \"vtype\",\n    \"vt@ype+\",\n    \"vt@ype-\",\n    \"vt@ype\",\n    \"viewt@ype+\",\n    \"viewt@ype-\",\n    \"viewt@ype\",\n    \"viewtype+\",\n    \"viewtype-\",\n    \"viewtype\",\n    \"prop+\",\n    \"prop-\",\n    \"prop\",\n    \"type+\",\n    \"type-\",\n    \"type\",\n    \"t@ype\",\n    \"t@ype+\",\n    \"t@ype-\",\n    \"abst@ype\",\n    \"abstype\",\n    \"absviewt@ype\",\n    \"absvt@ype\",\n    \"for*\",\n    \"for\",\n    \"while*\",\n    \"while\"\n  ],\n  keywords_types: [\n    \"bool\",\n    \"double\",\n    \"byte\",\n    \"int\",\n    \"short\",\n    \"char\",\n    \"void\",\n    \"unit\",\n    \"long\",\n    \"float\",\n    \"string\",\n    \"strptr\"\n  ],\n  keywords_effects: [\n    \"0\",\n    \"fun\",\n    \"clo\",\n    \"prf\",\n    \"funclo\",\n    \"cloptr\",\n    \"cloref\",\n    \"ref\",\n    \"ntm\",\n    \"1\"\n  ],\n  operators: [\n    \"@\",\n    \"!\",\n    \"|\",\n    \"`\",\n    \":\",\n    \"$\",\n    \".\",\n    \"=\",\n    \"#\",\n    \"~\",\n    \"..\",\n    \"...\",\n    \"=>\",\n    \"=<>\",\n    \"=/=>\",\n    \"=>>\",\n    \"=/=>>\",\n    \"<\",\n    \">\",\n    \"><\",\n    \".<\",\n    \">.\",\n    \".<>.\",\n    \"->\",\n    \"-<>\"\n  ],\n  brackets: [\n    { open: \",(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"`(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"%(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"'(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"'{\", close: \"}\", token: \"delimiter.parenthesis\" },\n    { open: \"@(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"@{\", close: \"}\", token: \"delimiter.brace\" },\n    { open: \"@[\", close: \"]\", token: \"delimiter.square\" },\n    { open: \"#[\", close: \"]\", token: \"delimiter.square\" },\n    { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\n    { open: \"[\", close: \"]\", token: \"delimiter.square\" },\n    { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"<\", close: \">\", token: \"delimiter.angle\" }\n  ],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  IDENTFST: /[a-zA-Z_]/,\n  IDENTRST: /[a-zA-Z0-9_'$]/,\n  symbolic: /[%&+-./:=@~`^|*!$#?<>]/,\n  digit: /[0-9]/,\n  digitseq0: /@digit*/,\n  xdigit: /[0-9A-Za-z]/,\n  xdigitseq0: /@xdigit*/,\n  INTSP: /[lLuU]/,\n  FLOATSP: /[fFlL]/,\n  fexponent: /[eE][+-]?[0-9]+/,\n  fexponent_bin: /[pP][+-]?[0-9]+/,\n  deciexp: /\\.[0-9]*@fexponent?/,\n  hexiexp: /\\.[0-9a-zA-Z]*@fexponent_bin?/,\n  irregular_keywords: /val[+-]?|case[+-]?|addr\\@?|fold\\@|free\\@|fix\\@?|lam\\@?|llam\\@?|prop[+-]?|type[+-]?|view[+-@]?|viewt@?ype[+-]?|t@?ype[+-]?|v(iew)?t@?ype[+-]?|abst@?ype|absv(iew)?t@?ype|for\\*?|while\\*?/,\n  ESCHAR: /[ntvbrfa\\\\\\?'\"\\(\\[\\{]/,\n  start: \"root\",\n  tokenizer: {\n    root: [\n      { regex: /[ \\t\\r\\n]+/, action: { token: \"\" } },\n      { regex: /\\(\\*\\)/, action: { token: \"invalid\" } },\n      {\n        regex: /\\(\\*/,\n        action: { token: \"comment\", next: \"lexing_COMMENT_block_ml\" }\n      },\n      {\n        regex: /\\(/,\n        action: \"@brackets\"\n      },\n      {\n        regex: /\\)/,\n        action: \"@brackets\"\n      },\n      {\n        regex: /\\[/,\n        action: \"@brackets\"\n      },\n      {\n        regex: /\\]/,\n        action: \"@brackets\"\n      },\n      {\n        regex: /\\{/,\n        action: \"@brackets\"\n      },\n      {\n        regex: /\\}/,\n        action: \"@brackets\"\n      },\n      {\n        regex: /,\\(/,\n        action: \"@brackets\"\n      },\n      { regex: /,/, action: { token: \"delimiter.comma\" } },\n      { regex: /;/, action: { token: \"delimiter.semicolon\" } },\n      {\n        regex: /@\\(/,\n        action: \"@brackets\"\n      },\n      {\n        regex: /@\\[/,\n        action: \"@brackets\"\n      },\n      {\n        regex: /@\\{/,\n        action: \"@brackets\"\n      },\n      {\n        regex: /:</,\n        action: { token: \"keyword\", next: \"@lexing_EFFECT_commaseq0\" }\n      },\n      { regex: /\\.@symbolic+/, action: { token: \"identifier.sym\" } },\n      {\n        regex: /\\.@digit*@fexponent@FLOATSP*/,\n        action: { token: \"number.float\" }\n      },\n      { regex: /\\.@digit+/, action: { token: \"number.float\" } },\n      {\n        regex: /\\$@IDENTFST@IDENTRST*/,\n        action: {\n          cases: {\n            \"@keywords_dlr\": { token: \"keyword.dlr\" },\n            \"@default\": { token: \"namespace\" }\n          }\n        }\n      },\n      {\n        regex: /\\#@IDENTFST@IDENTRST*/,\n        action: {\n          cases: {\n            \"@keywords_srp\": { token: \"keyword.srp\" },\n            \"@default\": { token: \"identifier\" }\n          }\n        }\n      },\n      { regex: /%\\(/, action: { token: \"delimiter.parenthesis\" } },\n      {\n        regex: /^%{(#|\\^|\\$)?/,\n        action: {\n          token: \"keyword\",\n          next: \"@lexing_EXTCODE\",\n          nextEmbedded: \"text/javascript\"\n        }\n      },\n      { regex: /^%}/, action: { token: \"keyword\" } },\n      { regex: /'\\(/, action: { token: \"delimiter.parenthesis\" } },\n      { regex: /'\\[/, action: { token: \"delimiter.bracket\" } },\n      { regex: /'\\{/, action: { token: \"delimiter.brace\" } },\n      [/(')(\\\\@ESCHAR|\\\\[xX]@xdigit+|\\\\@digit+)(')/, [\"string\", \"string.escape\", \"string\"]],\n      [/'[^\\\\']'/, \"string\"],\n      [/\"/, \"string.quote\", \"@lexing_DQUOTE\"],\n      {\n        regex: /`\\(/,\n        action: \"@brackets\"\n      },\n      { regex: /\\\\/, action: { token: \"punctuation\" } },\n      {\n        regex: /@irregular_keywords(?!@IDENTRST)/,\n        action: { token: \"keyword\" }\n      },\n      {\n        regex: /@IDENTFST@IDENTRST*[<!\\[]?/,\n        action: {\n          cases: {\n            \"@keywords\": { token: \"keyword\" },\n            \"@keywords_types\": { token: \"type\" },\n            \"@default\": { token: \"identifier\" }\n          }\n        }\n      },\n      {\n        regex: /\\/\\/\\/\\//,\n        action: { token: \"comment\", next: \"@lexing_COMMENT_rest\" }\n      },\n      { regex: /\\/\\/.*$/, action: { token: \"comment\" } },\n      {\n        regex: /\\/\\*/,\n        action: { token: \"comment\", next: \"@lexing_COMMENT_block_c\" }\n      },\n      {\n        regex: /-<|=</,\n        action: { token: \"keyword\", next: \"@lexing_EFFECT_commaseq0\" }\n      },\n      {\n        regex: /@symbolic+/,\n        action: {\n          cases: {\n            \"@operators\": \"keyword\",\n            \"@default\": \"operator\"\n          }\n        }\n      },\n      {\n        regex: /0[xX]@xdigit+(@hexiexp|@fexponent_bin)@FLOATSP*/,\n        action: { token: \"number.float\" }\n      },\n      { regex: /0[xX]@xdigit+@INTSP*/, action: { token: \"number.hex\" } },\n      {\n        regex: /0[0-7]+(?![0-9])@INTSP*/,\n        action: { token: \"number.octal\" }\n      },\n      {\n        regex: /@digit+(@fexponent|@deciexp)@FLOATSP*/,\n        action: { token: \"number.float\" }\n      },\n      {\n        regex: /@digit@digitseq0@INTSP*/,\n        action: { token: \"number.decimal\" }\n      },\n      { regex: /@digit+@INTSP*/, action: { token: \"number\" } }\n    ],\n    lexing_COMMENT_block_ml: [\n      [/[^\\(\\*]+/, \"comment\"],\n      [/\\(\\*/, \"comment\", \"@push\"],\n      [/\\(\\*/, \"comment.invalid\"],\n      [/\\*\\)/, \"comment\", \"@pop\"],\n      [/\\*/, \"comment\"]\n    ],\n    lexing_COMMENT_block_c: [\n      [/[^\\/*]+/, \"comment\"],\n      [/\\*\\//, \"comment\", \"@pop\"],\n      [/[\\/*]/, \"comment\"]\n    ],\n    lexing_COMMENT_rest: [\n      [/$/, \"comment\", \"@pop\"],\n      [/.*/, \"comment\"]\n    ],\n    lexing_EFFECT_commaseq0: [\n      {\n        regex: /@IDENTFST@IDENTRST+|@digit+/,\n        action: {\n          cases: {\n            \"@keywords_effects\": { token: \"type.effect\" },\n            \"@default\": { token: \"identifier\" }\n          }\n        }\n      },\n      { regex: /,/, action: { token: \"punctuation\" } },\n      { regex: />/, action: { token: \"@rematch\", next: \"@pop\" } }\n    ],\n    lexing_EXTCODE: [\n      {\n        regex: /^%}/,\n        action: {\n          token: \"@rematch\",\n          next: \"@pop\",\n          nextEmbedded: \"@pop\"\n        }\n      },\n      { regex: /[^%]+/, action: \"\" }\n    ],\n    lexing_DQUOTE: [\n      { regex: /\"/, action: { token: \"string.quote\", next: \"@pop\" } },\n      {\n        regex: /(\\{\\$)(@IDENTFST@IDENTRST*)(\\})/,\n        action: [{ token: \"string.escape\" }, { token: \"identifier\" }, { token: \"string.escape\" }]\n      },\n      { regex: /\\\\$/, action: { token: \"string.escape\" } },\n      {\n        regex: /\\\\(@ESCHAR|[xX]@xdigit+|@digit+)/,\n        action: { token: \"string.escape\" }\n      },\n      { regex: /[^\\\\\"]+/, action: { token: \"string\" } }\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"]},"metadata":{},"sourceType":"module"}