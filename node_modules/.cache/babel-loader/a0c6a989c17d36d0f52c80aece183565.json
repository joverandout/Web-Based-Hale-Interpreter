{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { EditorCommand, registerEditorCommand } from '../../../browser/editorExtensions.js';\nimport { IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { LinkedList } from '../../../../base/common/linkedList.js';\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { localize } from '../../../../nls.js';\nconst IEditorCancellationTokens = createDecorator('IEditorCancelService');\nconst ctxCancellableOperation = new RawContextKey('cancellableOperation', false, localize('cancellableOperation', 'Whether the editor runs a cancellable operation, e.g. like \\'Peek References\\''));\nregisterSingleton(IEditorCancellationTokens, class {\n  constructor() {\n    this._tokens = new WeakMap();\n  }\n\n  add(editor, cts) {\n    let data = this._tokens.get(editor);\n\n    if (!data) {\n      data = editor.invokeWithinContext(accessor => {\n        const key = ctxCancellableOperation.bindTo(accessor.get(IContextKeyService));\n        const tokens = new LinkedList();\n        return {\n          key,\n          tokens\n        };\n      });\n\n      this._tokens.set(editor, data);\n    }\n\n    let removeFn;\n    data.key.set(true);\n    removeFn = data.tokens.push(cts);\n    return () => {\n      // remove w/o cancellation\n      if (removeFn) {\n        removeFn();\n        data.key.set(!data.tokens.isEmpty());\n        removeFn = undefined;\n      }\n    };\n  }\n\n  cancel(editor) {\n    const data = this._tokens.get(editor);\n\n    if (!data) {\n      return;\n    } // remove with cancellation\n\n\n    const cts = data.tokens.pop();\n\n    if (cts) {\n      cts.cancel();\n      data.key.set(!data.tokens.isEmpty());\n    }\n  }\n\n}, true);\nexport class EditorKeybindingCancellationTokenSource extends CancellationTokenSource {\n  constructor(editor, parent) {\n    super(parent);\n    this.editor = editor;\n    this._unregister = editor.invokeWithinContext(accessor => accessor.get(IEditorCancellationTokens).add(editor, this));\n  }\n\n  dispose() {\n    this._unregister();\n\n    super.dispose();\n  }\n\n}\nregisterEditorCommand(new class extends EditorCommand {\n  constructor() {\n    super({\n      id: 'editor.cancelOperation',\n      kbOpts: {\n        weight: 100\n        /* EditorContrib */\n        ,\n        primary: 9\n        /* Escape */\n\n      },\n      precondition: ctxCancellableOperation\n    });\n  }\n\n  runEditorCommand(accessor, editor) {\n    accessor.get(IEditorCancellationTokens).cancel(editor);\n  }\n\n}());","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/contrib/editorState/browser/keybindingCancellation.js"],"names":["EditorCommand","registerEditorCommand","IContextKeyService","RawContextKey","CancellationTokenSource","LinkedList","createDecorator","registerSingleton","localize","IEditorCancellationTokens","ctxCancellableOperation","constructor","_tokens","WeakMap","add","editor","cts","data","get","invokeWithinContext","accessor","key","bindTo","tokens","set","removeFn","push","isEmpty","undefined","cancel","pop","EditorKeybindingCancellationTokenSource","parent","_unregister","dispose","id","kbOpts","weight","primary","precondition","runEditorCommand"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { EditorCommand, registerEditorCommand } from '../../../browser/editorExtensions.js';\nimport { IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { LinkedList } from '../../../../base/common/linkedList.js';\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { localize } from '../../../../nls.js';\nconst IEditorCancellationTokens = createDecorator('IEditorCancelService');\nconst ctxCancellableOperation = new RawContextKey('cancellableOperation', false, localize('cancellableOperation', 'Whether the editor runs a cancellable operation, e.g. like \\'Peek References\\''));\nregisterSingleton(IEditorCancellationTokens, class {\n    constructor() {\n        this._tokens = new WeakMap();\n    }\n    add(editor, cts) {\n        let data = this._tokens.get(editor);\n        if (!data) {\n            data = editor.invokeWithinContext(accessor => {\n                const key = ctxCancellableOperation.bindTo(accessor.get(IContextKeyService));\n                const tokens = new LinkedList();\n                return { key, tokens };\n            });\n            this._tokens.set(editor, data);\n        }\n        let removeFn;\n        data.key.set(true);\n        removeFn = data.tokens.push(cts);\n        return () => {\n            // remove w/o cancellation\n            if (removeFn) {\n                removeFn();\n                data.key.set(!data.tokens.isEmpty());\n                removeFn = undefined;\n            }\n        };\n    }\n    cancel(editor) {\n        const data = this._tokens.get(editor);\n        if (!data) {\n            return;\n        }\n        // remove with cancellation\n        const cts = data.tokens.pop();\n        if (cts) {\n            cts.cancel();\n            data.key.set(!data.tokens.isEmpty());\n        }\n    }\n}, true);\nexport class EditorKeybindingCancellationTokenSource extends CancellationTokenSource {\n    constructor(editor, parent) {\n        super(parent);\n        this.editor = editor;\n        this._unregister = editor.invokeWithinContext(accessor => accessor.get(IEditorCancellationTokens).add(editor, this));\n    }\n    dispose() {\n        this._unregister();\n        super.dispose();\n    }\n}\nregisterEditorCommand(new class extends EditorCommand {\n    constructor() {\n        super({\n            id: 'editor.cancelOperation',\n            kbOpts: {\n                weight: 100 /* EditorContrib */,\n                primary: 9 /* Escape */\n            },\n            precondition: ctxCancellableOperation\n        });\n    }\n    runEditorCommand(accessor, editor) {\n        accessor.get(IEditorCancellationTokens).cancel(editor);\n    }\n});\n"]},"metadata":{},"sourceType":"module"}