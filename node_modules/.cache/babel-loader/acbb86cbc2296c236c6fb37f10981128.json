{"ast":null,"code":"var Connection = require('./Connection');\n\nvar PoolSelector = require('./PoolSelector');\n\nmodule.exports = PoolNamespace;\n/**\n * PoolNamespace\n * @constructor\n * @param {PoolCluster} cluster The parent cluster for the namespace\n * @param {string} pattern The selection pattern to use\n * @param {string} selector The selector name to use\n * @public\n */\n\nfunction PoolNamespace(cluster, pattern, selector) {\n  this._cluster = cluster;\n  this._pattern = pattern;\n  this._selector = new PoolSelector[selector]();\n}\n\nPoolNamespace.prototype.getConnection = function (cb) {\n  var clusterNode = this._getClusterNode();\n\n  var cluster = this._cluster;\n  var namespace = this;\n\n  if (clusterNode === null) {\n    var err = null;\n\n    if (this._cluster._findNodeIds(this._pattern, true).length !== 0) {\n      err = new Error('Pool does not have online node.');\n      err.code = 'POOL_NONEONLINE';\n    } else {\n      err = new Error('Pool does not exist.');\n      err.code = 'POOL_NOEXIST';\n    }\n\n    cb(err);\n    return;\n  }\n\n  cluster._getConnection(clusterNode, function (err, connection) {\n    var retry = err && cluster._canRetry && cluster._findNodeIds(namespace._pattern).length !== 0;\n\n    if (retry) {\n      namespace.getConnection(cb);\n      return;\n    }\n\n    if (err) {\n      cb(err);\n      return;\n    }\n\n    cb(null, connection);\n  });\n};\n\nPoolNamespace.prototype.query = function (sql, values, cb) {\n  var cluster = this._cluster;\n\n  var clusterNode = this._getClusterNode();\n\n  var query = Connection.createQuery(sql, values, cb);\n  var namespace = this;\n\n  if (clusterNode === null) {\n    var err = null;\n\n    if (this._cluster._findNodeIds(this._pattern, true).length !== 0) {\n      err = new Error('Pool does not have online node.');\n      err.code = 'POOL_NONEONLINE';\n    } else {\n      err = new Error('Pool does not exist.');\n      err.code = 'POOL_NOEXIST';\n    }\n\n    process.nextTick(function () {\n      query.on('error', function () {});\n      query.end(err);\n    });\n    return query;\n  }\n\n  if (!(typeof sql === 'object' && 'typeCast' in sql)) {\n    query.typeCast = clusterNode.pool.config.connectionConfig.typeCast;\n  }\n\n  if (clusterNode.pool.config.connectionConfig.trace) {\n    // Long stack trace support\n    query._callSite = new Error();\n  }\n\n  cluster._getConnection(clusterNode, function (err, conn) {\n    var retry = err && cluster._canRetry && cluster._findNodeIds(namespace._pattern).length !== 0;\n\n    if (retry) {\n      namespace.query(query);\n      return;\n    }\n\n    if (err) {\n      query.on('error', function () {});\n      query.end(err);\n      return;\n    } // Release connection based off event\n\n\n    query.once('end', function () {\n      conn.release();\n    });\n    conn.query(query);\n  });\n\n  return query;\n};\n\nPoolNamespace.prototype._getClusterNode = function _getClusterNode() {\n  var foundNodeIds = this._cluster._findNodeIds(this._pattern);\n\n  var nodeId;\n\n  switch (foundNodeIds.length) {\n    case 0:\n      nodeId = null;\n      break;\n\n    case 1:\n      nodeId = foundNodeIds[0];\n      break;\n\n    default:\n      nodeId = this._selector(foundNodeIds);\n      break;\n  }\n\n  return nodeId !== null ? this._cluster._getNode(nodeId) : null;\n};","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/mysql/lib/PoolNamespace.js"],"names":["Connection","require","PoolSelector","module","exports","PoolNamespace","cluster","pattern","selector","_cluster","_pattern","_selector","prototype","getConnection","cb","clusterNode","_getClusterNode","namespace","err","_findNodeIds","length","Error","code","_getConnection","connection","retry","_canRetry","query","sql","values","createQuery","process","nextTick","on","end","typeCast","pool","config","connectionConfig","trace","_callSite","conn","once","release","foundNodeIds","nodeId","_getNode"],"mappings":"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","sourcesContent":["var Connection   = require('./Connection');\nvar PoolSelector = require('./PoolSelector');\n\nmodule.exports = PoolNamespace;\n\n/**\n * PoolNamespace\n * @constructor\n * @param {PoolCluster} cluster The parent cluster for the namespace\n * @param {string} pattern The selection pattern to use\n * @param {string} selector The selector name to use\n * @public\n */\nfunction PoolNamespace(cluster, pattern, selector) {\n  this._cluster = cluster;\n  this._pattern = pattern;\n  this._selector = new PoolSelector[selector]();\n}\n\nPoolNamespace.prototype.getConnection = function(cb) {\n  var clusterNode = this._getClusterNode();\n  var cluster     = this._cluster;\n  var namespace   = this;\n\n  if (clusterNode === null) {\n    var err = null;\n\n    if (this._cluster._findNodeIds(this._pattern, true).length !== 0) {\n      err = new Error('Pool does not have online node.');\n      err.code = 'POOL_NONEONLINE';\n    } else {\n      err = new Error('Pool does not exist.');\n      err.code = 'POOL_NOEXIST';\n    }\n\n    cb(err);\n    return;\n  }\n\n  cluster._getConnection(clusterNode, function(err, connection) {\n    var retry = err && cluster._canRetry\n      && cluster._findNodeIds(namespace._pattern).length !== 0;\n\n    if (retry) {\n      namespace.getConnection(cb);\n      return;\n    }\n\n    if (err) {\n      cb(err);\n      return;\n    }\n\n    cb(null, connection);\n  });\n};\n\nPoolNamespace.prototype.query = function (sql, values, cb) {\n  var cluster     = this._cluster;\n  var clusterNode = this._getClusterNode();\n  var query       = Connection.createQuery(sql, values, cb);\n  var namespace   = this;\n\n  if (clusterNode === null) {\n    var err = null;\n\n    if (this._cluster._findNodeIds(this._pattern, true).length !== 0) {\n      err = new Error('Pool does not have online node.');\n      err.code = 'POOL_NONEONLINE';\n    } else {\n      err = new Error('Pool does not exist.');\n      err.code = 'POOL_NOEXIST';\n    }\n\n    process.nextTick(function () {\n      query.on('error', function () {});\n      query.end(err);\n    });\n    return query;\n  }\n\n  if (!(typeof sql === 'object' && 'typeCast' in sql)) {\n    query.typeCast = clusterNode.pool.config.connectionConfig.typeCast;\n  }\n\n  if (clusterNode.pool.config.connectionConfig.trace) {\n    // Long stack trace support\n    query._callSite = new Error();\n  }\n\n  cluster._getConnection(clusterNode, function (err, conn) {\n    var retry = err && cluster._canRetry\n      && cluster._findNodeIds(namespace._pattern).length !== 0;\n\n    if (retry) {\n      namespace.query(query);\n      return;\n    }\n\n    if (err) {\n      query.on('error', function () {});\n      query.end(err);\n      return;\n    }\n\n    // Release connection based off event\n    query.once('end', function() {\n      conn.release();\n    });\n\n    conn.query(query);\n  });\n\n  return query;\n};\n\nPoolNamespace.prototype._getClusterNode = function _getClusterNode() {\n  var foundNodeIds = this._cluster._findNodeIds(this._pattern);\n  var nodeId;\n\n  switch (foundNodeIds.length) {\n    case 0:\n      nodeId = null;\n      break;\n    case 1:\n      nodeId = foundNodeIds[0];\n      break;\n    default:\n      nodeId = this._selector(foundNodeIds);\n      break;\n  }\n\n  return nodeId !== null\n    ? this._cluster._getNode(nodeId)\n    : null;\n};\n"]},"metadata":{},"sourceType":"script"}