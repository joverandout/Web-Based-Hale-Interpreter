{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { $ } from '../../dom.js';\n\nfunction removeFromParent(element) {\n  try {\n    if (element.parentElement) {\n      element.parentElement.removeChild(element);\n    }\n  } catch (e) {// this will throw if this happens due to a blur event, nasty business\n  }\n}\n\nexport class RowCache {\n  constructor(renderers) {\n    this.renderers = renderers;\n    this.cache = new Map();\n  }\n  /**\n   * Returns a row either by creating a new one or reusing\n   * a previously released row which shares the same templateId.\n   */\n\n\n  alloc(templateId) {\n    let result = this.getTemplateCache(templateId).pop();\n\n    if (!result) {\n      const domNode = $('.monaco-list-row');\n      const renderer = this.getRenderer(templateId);\n      const templateData = renderer.renderTemplate(domNode);\n      result = {\n        domNode,\n        templateId,\n        templateData\n      };\n    }\n\n    return result;\n  }\n  /**\n   * Releases the row for eventual reuse.\n   */\n\n\n  release(row) {\n    if (!row) {\n      return;\n    }\n\n    this.releaseRow(row);\n  }\n\n  releaseRow(row) {\n    const {\n      domNode,\n      templateId\n    } = row;\n\n    if (domNode) {\n      domNode.classList.remove('scrolling');\n      removeFromParent(domNode);\n    }\n\n    const cache = this.getTemplateCache(templateId);\n    cache.push(row);\n  }\n\n  getTemplateCache(templateId) {\n    let result = this.cache.get(templateId);\n\n    if (!result) {\n      result = [];\n      this.cache.set(templateId, result);\n    }\n\n    return result;\n  }\n\n  dispose() {\n    this.cache.forEach((cachedRows, templateId) => {\n      for (const cachedRow of cachedRows) {\n        const renderer = this.getRenderer(templateId);\n        renderer.disposeTemplate(cachedRow.templateData);\n        cachedRow.templateData = null;\n      }\n    });\n    this.cache.clear();\n  }\n\n  getRenderer(templateId) {\n    const renderer = this.renderers.get(templateId);\n\n    if (!renderer) {\n      throw new Error(`No renderer found for ${templateId}`);\n    }\n\n    return renderer;\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/base/browser/ui/list/rowCache.js"],"names":["$","removeFromParent","element","parentElement","removeChild","e","RowCache","constructor","renderers","cache","Map","alloc","templateId","result","getTemplateCache","pop","domNode","renderer","getRenderer","templateData","renderTemplate","release","row","releaseRow","classList","remove","push","get","set","dispose","forEach","cachedRows","cachedRow","disposeTemplate","clear","Error"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,CAAT,QAAkB,cAAlB;;AACA,SAASC,gBAAT,CAA0BC,OAA1B,EAAmC;AAC/B,MAAI;AACA,QAAIA,OAAO,CAACC,aAAZ,EAA2B;AACvBD,MAAAA,OAAO,CAACC,aAAR,CAAsBC,WAAtB,CAAkCF,OAAlC;AACH;AACJ,GAJD,CAKA,OAAOG,CAAP,EAAU,CACN;AACH;AACJ;;AACD,OAAO,MAAMC,QAAN,CAAe;AAClBC,EAAAA,WAAW,CAACC,SAAD,EAAY;AACnB,SAAKA,SAAL,GAAiBA,SAAjB;AACA,SAAKC,KAAL,GAAa,IAAIC,GAAJ,EAAb;AACH;AACD;AACJ;AACA;AACA;;;AACIC,EAAAA,KAAK,CAACC,UAAD,EAAa;AACd,QAAIC,MAAM,GAAG,KAAKC,gBAAL,CAAsBF,UAAtB,EAAkCG,GAAlC,EAAb;;AACA,QAAI,CAACF,MAAL,EAAa;AACT,YAAMG,OAAO,GAAGhB,CAAC,CAAC,kBAAD,CAAjB;AACA,YAAMiB,QAAQ,GAAG,KAAKC,WAAL,CAAiBN,UAAjB,CAAjB;AACA,YAAMO,YAAY,GAAGF,QAAQ,CAACG,cAAT,CAAwBJ,OAAxB,CAArB;AACAH,MAAAA,MAAM,GAAG;AAAEG,QAAAA,OAAF;AAAWJ,QAAAA,UAAX;AAAuBO,QAAAA;AAAvB,OAAT;AACH;;AACD,WAAON,MAAP;AACH;AACD;AACJ;AACA;;;AACIQ,EAAAA,OAAO,CAACC,GAAD,EAAM;AACT,QAAI,CAACA,GAAL,EAAU;AACN;AACH;;AACD,SAAKC,UAAL,CAAgBD,GAAhB;AACH;;AACDC,EAAAA,UAAU,CAACD,GAAD,EAAM;AACZ,UAAM;AAAEN,MAAAA,OAAF;AAAWJ,MAAAA;AAAX,QAA0BU,GAAhC;;AACA,QAAIN,OAAJ,EAAa;AACTA,MAAAA,OAAO,CAACQ,SAAR,CAAkBC,MAAlB,CAAyB,WAAzB;AACAxB,MAAAA,gBAAgB,CAACe,OAAD,CAAhB;AACH;;AACD,UAAMP,KAAK,GAAG,KAAKK,gBAAL,CAAsBF,UAAtB,CAAd;AACAH,IAAAA,KAAK,CAACiB,IAAN,CAAWJ,GAAX;AACH;;AACDR,EAAAA,gBAAgB,CAACF,UAAD,EAAa;AACzB,QAAIC,MAAM,GAAG,KAAKJ,KAAL,CAAWkB,GAAX,CAAef,UAAf,CAAb;;AACA,QAAI,CAACC,MAAL,EAAa;AACTA,MAAAA,MAAM,GAAG,EAAT;AACA,WAAKJ,KAAL,CAAWmB,GAAX,CAAehB,UAAf,EAA2BC,MAA3B;AACH;;AACD,WAAOA,MAAP;AACH;;AACDgB,EAAAA,OAAO,GAAG;AACN,SAAKpB,KAAL,CAAWqB,OAAX,CAAmB,CAACC,UAAD,EAAanB,UAAb,KAA4B;AAC3C,WAAK,MAAMoB,SAAX,IAAwBD,UAAxB,EAAoC;AAChC,cAAMd,QAAQ,GAAG,KAAKC,WAAL,CAAiBN,UAAjB,CAAjB;AACAK,QAAAA,QAAQ,CAACgB,eAAT,CAAyBD,SAAS,CAACb,YAAnC;AACAa,QAAAA,SAAS,CAACb,YAAV,GAAyB,IAAzB;AACH;AACJ,KAND;AAOA,SAAKV,KAAL,CAAWyB,KAAX;AACH;;AACDhB,EAAAA,WAAW,CAACN,UAAD,EAAa;AACpB,UAAMK,QAAQ,GAAG,KAAKT,SAAL,CAAemB,GAAf,CAAmBf,UAAnB,CAAjB;;AACA,QAAI,CAACK,QAAL,EAAe;AACX,YAAM,IAAIkB,KAAJ,CAAW,yBAAwBvB,UAAW,EAA9C,CAAN;AACH;;AACD,WAAOK,QAAP;AACH;;AA7DiB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { $ } from '../../dom.js';\nfunction removeFromParent(element) {\n    try {\n        if (element.parentElement) {\n            element.parentElement.removeChild(element);\n        }\n    }\n    catch (e) {\n        // this will throw if this happens due to a blur event, nasty business\n    }\n}\nexport class RowCache {\n    constructor(renderers) {\n        this.renderers = renderers;\n        this.cache = new Map();\n    }\n    /**\n     * Returns a row either by creating a new one or reusing\n     * a previously released row which shares the same templateId.\n     */\n    alloc(templateId) {\n        let result = this.getTemplateCache(templateId).pop();\n        if (!result) {\n            const domNode = $('.monaco-list-row');\n            const renderer = this.getRenderer(templateId);\n            const templateData = renderer.renderTemplate(domNode);\n            result = { domNode, templateId, templateData };\n        }\n        return result;\n    }\n    /**\n     * Releases the row for eventual reuse.\n     */\n    release(row) {\n        if (!row) {\n            return;\n        }\n        this.releaseRow(row);\n    }\n    releaseRow(row) {\n        const { domNode, templateId } = row;\n        if (domNode) {\n            domNode.classList.remove('scrolling');\n            removeFromParent(domNode);\n        }\n        const cache = this.getTemplateCache(templateId);\n        cache.push(row);\n    }\n    getTemplateCache(templateId) {\n        let result = this.cache.get(templateId);\n        if (!result) {\n            result = [];\n            this.cache.set(templateId, result);\n        }\n        return result;\n    }\n    dispose() {\n        this.cache.forEach((cachedRows, templateId) => {\n            for (const cachedRow of cachedRows) {\n                const renderer = this.getRenderer(templateId);\n                renderer.disposeTemplate(cachedRow.templateData);\n                cachedRow.templateData = null;\n            }\n        });\n        this.cache.clear();\n    }\n    getRenderer(templateId) {\n        const renderer = this.renderers.get(templateId);\n        if (!renderer) {\n            throw new Error(`No renderer found for ${templateId}`);\n        }\n        return renderer;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}