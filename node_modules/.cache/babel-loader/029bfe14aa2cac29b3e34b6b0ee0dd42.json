{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from './event.js';\nimport { Disposable } from './lifecycle.js';\nexport class ScrollState {\n  constructor(_forceIntegerValues, width, scrollWidth, scrollLeft, height, scrollHeight, scrollTop) {\n    this._forceIntegerValues = _forceIntegerValues;\n    this._scrollStateBrand = undefined;\n\n    if (this._forceIntegerValues) {\n      width = width | 0;\n      scrollWidth = scrollWidth | 0;\n      scrollLeft = scrollLeft | 0;\n      height = height | 0;\n      scrollHeight = scrollHeight | 0;\n      scrollTop = scrollTop | 0;\n    }\n\n    this.rawScrollLeft = scrollLeft; // before validation\n\n    this.rawScrollTop = scrollTop; // before validation\n\n    if (width < 0) {\n      width = 0;\n    }\n\n    if (scrollLeft + width > scrollWidth) {\n      scrollLeft = scrollWidth - width;\n    }\n\n    if (scrollLeft < 0) {\n      scrollLeft = 0;\n    }\n\n    if (height < 0) {\n      height = 0;\n    }\n\n    if (scrollTop + height > scrollHeight) {\n      scrollTop = scrollHeight - height;\n    }\n\n    if (scrollTop < 0) {\n      scrollTop = 0;\n    }\n\n    this.width = width;\n    this.scrollWidth = scrollWidth;\n    this.scrollLeft = scrollLeft;\n    this.height = height;\n    this.scrollHeight = scrollHeight;\n    this.scrollTop = scrollTop;\n  }\n\n  equals(other) {\n    return this.rawScrollLeft === other.rawScrollLeft && this.rawScrollTop === other.rawScrollTop && this.width === other.width && this.scrollWidth === other.scrollWidth && this.scrollLeft === other.scrollLeft && this.height === other.height && this.scrollHeight === other.scrollHeight && this.scrollTop === other.scrollTop;\n  }\n\n  withScrollDimensions(update, useRawScrollPositions) {\n    return new ScrollState(this._forceIntegerValues, typeof update.width !== 'undefined' ? update.width : this.width, typeof update.scrollWidth !== 'undefined' ? update.scrollWidth : this.scrollWidth, useRawScrollPositions ? this.rawScrollLeft : this.scrollLeft, typeof update.height !== 'undefined' ? update.height : this.height, typeof update.scrollHeight !== 'undefined' ? update.scrollHeight : this.scrollHeight, useRawScrollPositions ? this.rawScrollTop : this.scrollTop);\n  }\n\n  withScrollPosition(update) {\n    return new ScrollState(this._forceIntegerValues, this.width, this.scrollWidth, typeof update.scrollLeft !== 'undefined' ? update.scrollLeft : this.rawScrollLeft, this.height, this.scrollHeight, typeof update.scrollTop !== 'undefined' ? update.scrollTop : this.rawScrollTop);\n  }\n\n  createScrollEvent(previous, inSmoothScrolling) {\n    const widthChanged = this.width !== previous.width;\n    const scrollWidthChanged = this.scrollWidth !== previous.scrollWidth;\n    const scrollLeftChanged = this.scrollLeft !== previous.scrollLeft;\n    const heightChanged = this.height !== previous.height;\n    const scrollHeightChanged = this.scrollHeight !== previous.scrollHeight;\n    const scrollTopChanged = this.scrollTop !== previous.scrollTop;\n    return {\n      inSmoothScrolling: inSmoothScrolling,\n      oldWidth: previous.width,\n      oldScrollWidth: previous.scrollWidth,\n      oldScrollLeft: previous.scrollLeft,\n      width: this.width,\n      scrollWidth: this.scrollWidth,\n      scrollLeft: this.scrollLeft,\n      oldHeight: previous.height,\n      oldScrollHeight: previous.scrollHeight,\n      oldScrollTop: previous.scrollTop,\n      height: this.height,\n      scrollHeight: this.scrollHeight,\n      scrollTop: this.scrollTop,\n      widthChanged: widthChanged,\n      scrollWidthChanged: scrollWidthChanged,\n      scrollLeftChanged: scrollLeftChanged,\n      heightChanged: heightChanged,\n      scrollHeightChanged: scrollHeightChanged,\n      scrollTopChanged: scrollTopChanged\n    };\n  }\n\n}\nexport class Scrollable extends Disposable {\n  constructor(options) {\n    super();\n    this._scrollableBrand = undefined;\n    this._onScroll = this._register(new Emitter());\n    this.onScroll = this._onScroll.event;\n    this._smoothScrollDuration = options.smoothScrollDuration;\n    this._scheduleAtNextAnimationFrame = options.scheduleAtNextAnimationFrame;\n    this._state = new ScrollState(options.forceIntegerValues, 0, 0, 0, 0, 0, 0);\n    this._smoothScrolling = null;\n  }\n\n  dispose() {\n    if (this._smoothScrolling) {\n      this._smoothScrolling.dispose();\n\n      this._smoothScrolling = null;\n    }\n\n    super.dispose();\n  }\n\n  setSmoothScrollDuration(smoothScrollDuration) {\n    this._smoothScrollDuration = smoothScrollDuration;\n  }\n\n  validateScrollPosition(scrollPosition) {\n    return this._state.withScrollPosition(scrollPosition);\n  }\n\n  getScrollDimensions() {\n    return this._state;\n  }\n\n  setScrollDimensions(dimensions, useRawScrollPositions) {\n    const newState = this._state.withScrollDimensions(dimensions, useRawScrollPositions);\n\n    this._setState(newState, Boolean(this._smoothScrolling)); // Validate outstanding animated scroll position target\n\n\n    if (this._smoothScrolling) {\n      this._smoothScrolling.acceptScrollDimensions(this._state);\n    }\n  }\n  /**\n   * Returns the final scroll position that the instance will have once the smooth scroll animation concludes.\n   * If no scroll animation is occurring, it will return the current scroll position instead.\n   */\n\n\n  getFutureScrollPosition() {\n    if (this._smoothScrolling) {\n      return this._smoothScrolling.to;\n    }\n\n    return this._state;\n  }\n  /**\n   * Returns the current scroll position.\n   * Note: This result might be an intermediate scroll position, as there might be an ongoing smooth scroll animation.\n   */\n\n\n  getCurrentScrollPosition() {\n    return this._state;\n  }\n\n  setScrollPositionNow(update) {\n    // no smooth scrolling requested\n    const newState = this._state.withScrollPosition(update); // Terminate any outstanding smooth scrolling\n\n\n    if (this._smoothScrolling) {\n      this._smoothScrolling.dispose();\n\n      this._smoothScrolling = null;\n    }\n\n    this._setState(newState, false);\n  }\n\n  setScrollPositionSmooth(update, reuseAnimation) {\n    if (this._smoothScrollDuration === 0) {\n      // Smooth scrolling not supported.\n      return this.setScrollPositionNow(update);\n    }\n\n    if (this._smoothScrolling) {\n      // Combine our pending scrollLeft/scrollTop with incoming scrollLeft/scrollTop\n      update = {\n        scrollLeft: typeof update.scrollLeft === 'undefined' ? this._smoothScrolling.to.scrollLeft : update.scrollLeft,\n        scrollTop: typeof update.scrollTop === 'undefined' ? this._smoothScrolling.to.scrollTop : update.scrollTop\n      }; // Validate `update`\n\n      const validTarget = this._state.withScrollPosition(update);\n\n      if (this._smoothScrolling.to.scrollLeft === validTarget.scrollLeft && this._smoothScrolling.to.scrollTop === validTarget.scrollTop) {\n        // No need to interrupt or extend the current animation since we're going to the same place\n        return;\n      }\n\n      let newSmoothScrolling;\n\n      if (reuseAnimation) {\n        newSmoothScrolling = new SmoothScrollingOperation(this._smoothScrolling.from, validTarget, this._smoothScrolling.startTime, this._smoothScrolling.duration);\n      } else {\n        newSmoothScrolling = this._smoothScrolling.combine(this._state, validTarget, this._smoothScrollDuration);\n      }\n\n      this._smoothScrolling.dispose();\n\n      this._smoothScrolling = newSmoothScrolling;\n    } else {\n      // Validate `update`\n      const validTarget = this._state.withScrollPosition(update);\n\n      this._smoothScrolling = SmoothScrollingOperation.start(this._state, validTarget, this._smoothScrollDuration);\n    } // Begin smooth scrolling animation\n\n\n    this._smoothScrolling.animationFrameDisposable = this._scheduleAtNextAnimationFrame(() => {\n      if (!this._smoothScrolling) {\n        return;\n      }\n\n      this._smoothScrolling.animationFrameDisposable = null;\n\n      this._performSmoothScrolling();\n    });\n  }\n\n  _performSmoothScrolling() {\n    if (!this._smoothScrolling) {\n      return;\n    }\n\n    const update = this._smoothScrolling.tick();\n\n    const newState = this._state.withScrollPosition(update);\n\n    this._setState(newState, true);\n\n    if (!this._smoothScrolling) {\n      // Looks like someone canceled the smooth scrolling\n      // from the scroll event handler\n      return;\n    }\n\n    if (update.isDone) {\n      this._smoothScrolling.dispose();\n\n      this._smoothScrolling = null;\n      return;\n    } // Continue smooth scrolling animation\n\n\n    this._smoothScrolling.animationFrameDisposable = this._scheduleAtNextAnimationFrame(() => {\n      if (!this._smoothScrolling) {\n        return;\n      }\n\n      this._smoothScrolling.animationFrameDisposable = null;\n\n      this._performSmoothScrolling();\n    });\n  }\n\n  _setState(newState, inSmoothScrolling) {\n    const oldState = this._state;\n\n    if (oldState.equals(newState)) {\n      // no change\n      return;\n    }\n\n    this._state = newState;\n\n    this._onScroll.fire(this._state.createScrollEvent(oldState, inSmoothScrolling));\n  }\n\n}\nexport class SmoothScrollingUpdate {\n  constructor(scrollLeft, scrollTop, isDone) {\n    this.scrollLeft = scrollLeft;\n    this.scrollTop = scrollTop;\n    this.isDone = isDone;\n  }\n\n}\n\nfunction createEaseOutCubic(from, to) {\n  const delta = to - from;\n  return function (completion) {\n    return from + delta * easeOutCubic(completion);\n  };\n}\n\nfunction createComposed(a, b, cut) {\n  return function (completion) {\n    if (completion < cut) {\n      return a(completion / cut);\n    }\n\n    return b((completion - cut) / (1 - cut));\n  };\n}\n\nexport class SmoothScrollingOperation {\n  constructor(from, to, startTime, duration) {\n    this.from = from;\n    this.to = to;\n    this.duration = duration;\n    this.startTime = startTime;\n    this.animationFrameDisposable = null;\n\n    this._initAnimations();\n  }\n\n  _initAnimations() {\n    this.scrollLeft = this._initAnimation(this.from.scrollLeft, this.to.scrollLeft, this.to.width);\n    this.scrollTop = this._initAnimation(this.from.scrollTop, this.to.scrollTop, this.to.height);\n  }\n\n  _initAnimation(from, to, viewportSize) {\n    const delta = Math.abs(from - to);\n\n    if (delta > 2.5 * viewportSize) {\n      let stop1, stop2;\n\n      if (from < to) {\n        // scroll to 75% of the viewportSize\n        stop1 = from + 0.75 * viewportSize;\n        stop2 = to - 0.75 * viewportSize;\n      } else {\n        stop1 = from - 0.75 * viewportSize;\n        stop2 = to + 0.75 * viewportSize;\n      }\n\n      return createComposed(createEaseOutCubic(from, stop1), createEaseOutCubic(stop2, to), 0.33);\n    }\n\n    return createEaseOutCubic(from, to);\n  }\n\n  dispose() {\n    if (this.animationFrameDisposable !== null) {\n      this.animationFrameDisposable.dispose();\n      this.animationFrameDisposable = null;\n    }\n  }\n\n  acceptScrollDimensions(state) {\n    this.to = state.withScrollPosition(this.to);\n\n    this._initAnimations();\n  }\n\n  tick() {\n    return this._tick(Date.now());\n  }\n\n  _tick(now) {\n    const completion = (now - this.startTime) / this.duration;\n\n    if (completion < 1) {\n      const newScrollLeft = this.scrollLeft(completion);\n      const newScrollTop = this.scrollTop(completion);\n      return new SmoothScrollingUpdate(newScrollLeft, newScrollTop, false);\n    }\n\n    return new SmoothScrollingUpdate(this.to.scrollLeft, this.to.scrollTop, true);\n  }\n\n  combine(from, to, duration) {\n    return SmoothScrollingOperation.start(from, to, duration);\n  }\n\n  static start(from, to, duration) {\n    // +10 / -10 : pretend the animation already started for a quicker response to a scroll request\n    duration = duration + 10;\n    const startTime = Date.now() - 10;\n    return new SmoothScrollingOperation(from, to, startTime, duration);\n  }\n\n}\n\nfunction easeInCubic(t) {\n  return Math.pow(t, 3);\n}\n\nfunction easeOutCubic(t) {\n  return 1 - easeInCubic(1 - t);\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/base/common/scrollable.js"],"names":["Emitter","Disposable","ScrollState","constructor","_forceIntegerValues","width","scrollWidth","scrollLeft","height","scrollHeight","scrollTop","_scrollStateBrand","undefined","rawScrollLeft","rawScrollTop","equals","other","withScrollDimensions","update","useRawScrollPositions","withScrollPosition","createScrollEvent","previous","inSmoothScrolling","widthChanged","scrollWidthChanged","scrollLeftChanged","heightChanged","scrollHeightChanged","scrollTopChanged","oldWidth","oldScrollWidth","oldScrollLeft","oldHeight","oldScrollHeight","oldScrollTop","Scrollable","options","_scrollableBrand","_onScroll","_register","onScroll","event","_smoothScrollDuration","smoothScrollDuration","_scheduleAtNextAnimationFrame","scheduleAtNextAnimationFrame","_state","forceIntegerValues","_smoothScrolling","dispose","setSmoothScrollDuration","validateScrollPosition","scrollPosition","getScrollDimensions","setScrollDimensions","dimensions","newState","_setState","Boolean","acceptScrollDimensions","getFutureScrollPosition","to","getCurrentScrollPosition","setScrollPositionNow","setScrollPositionSmooth","reuseAnimation","validTarget","newSmoothScrolling","SmoothScrollingOperation","from","startTime","duration","combine","start","animationFrameDisposable","_performSmoothScrolling","tick","isDone","oldState","fire","SmoothScrollingUpdate","createEaseOutCubic","delta","completion","easeOutCubic","createComposed","a","b","cut","_initAnimations","_initAnimation","viewportSize","Math","abs","stop1","stop2","state","_tick","Date","now","newScrollLeft","newScrollTop","easeInCubic","t","pow"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from './event.js';\nimport { Disposable } from './lifecycle.js';\nexport class ScrollState {\n    constructor(_forceIntegerValues, width, scrollWidth, scrollLeft, height, scrollHeight, scrollTop) {\n        this._forceIntegerValues = _forceIntegerValues;\n        this._scrollStateBrand = undefined;\n        if (this._forceIntegerValues) {\n            width = width | 0;\n            scrollWidth = scrollWidth | 0;\n            scrollLeft = scrollLeft | 0;\n            height = height | 0;\n            scrollHeight = scrollHeight | 0;\n            scrollTop = scrollTop | 0;\n        }\n        this.rawScrollLeft = scrollLeft; // before validation\n        this.rawScrollTop = scrollTop; // before validation\n        if (width < 0) {\n            width = 0;\n        }\n        if (scrollLeft + width > scrollWidth) {\n            scrollLeft = scrollWidth - width;\n        }\n        if (scrollLeft < 0) {\n            scrollLeft = 0;\n        }\n        if (height < 0) {\n            height = 0;\n        }\n        if (scrollTop + height > scrollHeight) {\n            scrollTop = scrollHeight - height;\n        }\n        if (scrollTop < 0) {\n            scrollTop = 0;\n        }\n        this.width = width;\n        this.scrollWidth = scrollWidth;\n        this.scrollLeft = scrollLeft;\n        this.height = height;\n        this.scrollHeight = scrollHeight;\n        this.scrollTop = scrollTop;\n    }\n    equals(other) {\n        return (this.rawScrollLeft === other.rawScrollLeft\n            && this.rawScrollTop === other.rawScrollTop\n            && this.width === other.width\n            && this.scrollWidth === other.scrollWidth\n            && this.scrollLeft === other.scrollLeft\n            && this.height === other.height\n            && this.scrollHeight === other.scrollHeight\n            && this.scrollTop === other.scrollTop);\n    }\n    withScrollDimensions(update, useRawScrollPositions) {\n        return new ScrollState(this._forceIntegerValues, (typeof update.width !== 'undefined' ? update.width : this.width), (typeof update.scrollWidth !== 'undefined' ? update.scrollWidth : this.scrollWidth), useRawScrollPositions ? this.rawScrollLeft : this.scrollLeft, (typeof update.height !== 'undefined' ? update.height : this.height), (typeof update.scrollHeight !== 'undefined' ? update.scrollHeight : this.scrollHeight), useRawScrollPositions ? this.rawScrollTop : this.scrollTop);\n    }\n    withScrollPosition(update) {\n        return new ScrollState(this._forceIntegerValues, this.width, this.scrollWidth, (typeof update.scrollLeft !== 'undefined' ? update.scrollLeft : this.rawScrollLeft), this.height, this.scrollHeight, (typeof update.scrollTop !== 'undefined' ? update.scrollTop : this.rawScrollTop));\n    }\n    createScrollEvent(previous, inSmoothScrolling) {\n        const widthChanged = (this.width !== previous.width);\n        const scrollWidthChanged = (this.scrollWidth !== previous.scrollWidth);\n        const scrollLeftChanged = (this.scrollLeft !== previous.scrollLeft);\n        const heightChanged = (this.height !== previous.height);\n        const scrollHeightChanged = (this.scrollHeight !== previous.scrollHeight);\n        const scrollTopChanged = (this.scrollTop !== previous.scrollTop);\n        return {\n            inSmoothScrolling: inSmoothScrolling,\n            oldWidth: previous.width,\n            oldScrollWidth: previous.scrollWidth,\n            oldScrollLeft: previous.scrollLeft,\n            width: this.width,\n            scrollWidth: this.scrollWidth,\n            scrollLeft: this.scrollLeft,\n            oldHeight: previous.height,\n            oldScrollHeight: previous.scrollHeight,\n            oldScrollTop: previous.scrollTop,\n            height: this.height,\n            scrollHeight: this.scrollHeight,\n            scrollTop: this.scrollTop,\n            widthChanged: widthChanged,\n            scrollWidthChanged: scrollWidthChanged,\n            scrollLeftChanged: scrollLeftChanged,\n            heightChanged: heightChanged,\n            scrollHeightChanged: scrollHeightChanged,\n            scrollTopChanged: scrollTopChanged,\n        };\n    }\n}\nexport class Scrollable extends Disposable {\n    constructor(options) {\n        super();\n        this._scrollableBrand = undefined;\n        this._onScroll = this._register(new Emitter());\n        this.onScroll = this._onScroll.event;\n        this._smoothScrollDuration = options.smoothScrollDuration;\n        this._scheduleAtNextAnimationFrame = options.scheduleAtNextAnimationFrame;\n        this._state = new ScrollState(options.forceIntegerValues, 0, 0, 0, 0, 0, 0);\n        this._smoothScrolling = null;\n    }\n    dispose() {\n        if (this._smoothScrolling) {\n            this._smoothScrolling.dispose();\n            this._smoothScrolling = null;\n        }\n        super.dispose();\n    }\n    setSmoothScrollDuration(smoothScrollDuration) {\n        this._smoothScrollDuration = smoothScrollDuration;\n    }\n    validateScrollPosition(scrollPosition) {\n        return this._state.withScrollPosition(scrollPosition);\n    }\n    getScrollDimensions() {\n        return this._state;\n    }\n    setScrollDimensions(dimensions, useRawScrollPositions) {\n        const newState = this._state.withScrollDimensions(dimensions, useRawScrollPositions);\n        this._setState(newState, Boolean(this._smoothScrolling));\n        // Validate outstanding animated scroll position target\n        if (this._smoothScrolling) {\n            this._smoothScrolling.acceptScrollDimensions(this._state);\n        }\n    }\n    /**\n     * Returns the final scroll position that the instance will have once the smooth scroll animation concludes.\n     * If no scroll animation is occurring, it will return the current scroll position instead.\n     */\n    getFutureScrollPosition() {\n        if (this._smoothScrolling) {\n            return this._smoothScrolling.to;\n        }\n        return this._state;\n    }\n    /**\n     * Returns the current scroll position.\n     * Note: This result might be an intermediate scroll position, as there might be an ongoing smooth scroll animation.\n     */\n    getCurrentScrollPosition() {\n        return this._state;\n    }\n    setScrollPositionNow(update) {\n        // no smooth scrolling requested\n        const newState = this._state.withScrollPosition(update);\n        // Terminate any outstanding smooth scrolling\n        if (this._smoothScrolling) {\n            this._smoothScrolling.dispose();\n            this._smoothScrolling = null;\n        }\n        this._setState(newState, false);\n    }\n    setScrollPositionSmooth(update, reuseAnimation) {\n        if (this._smoothScrollDuration === 0) {\n            // Smooth scrolling not supported.\n            return this.setScrollPositionNow(update);\n        }\n        if (this._smoothScrolling) {\n            // Combine our pending scrollLeft/scrollTop with incoming scrollLeft/scrollTop\n            update = {\n                scrollLeft: (typeof update.scrollLeft === 'undefined' ? this._smoothScrolling.to.scrollLeft : update.scrollLeft),\n                scrollTop: (typeof update.scrollTop === 'undefined' ? this._smoothScrolling.to.scrollTop : update.scrollTop)\n            };\n            // Validate `update`\n            const validTarget = this._state.withScrollPosition(update);\n            if (this._smoothScrolling.to.scrollLeft === validTarget.scrollLeft && this._smoothScrolling.to.scrollTop === validTarget.scrollTop) {\n                // No need to interrupt or extend the current animation since we're going to the same place\n                return;\n            }\n            let newSmoothScrolling;\n            if (reuseAnimation) {\n                newSmoothScrolling = new SmoothScrollingOperation(this._smoothScrolling.from, validTarget, this._smoothScrolling.startTime, this._smoothScrolling.duration);\n            }\n            else {\n                newSmoothScrolling = this._smoothScrolling.combine(this._state, validTarget, this._smoothScrollDuration);\n            }\n            this._smoothScrolling.dispose();\n            this._smoothScrolling = newSmoothScrolling;\n        }\n        else {\n            // Validate `update`\n            const validTarget = this._state.withScrollPosition(update);\n            this._smoothScrolling = SmoothScrollingOperation.start(this._state, validTarget, this._smoothScrollDuration);\n        }\n        // Begin smooth scrolling animation\n        this._smoothScrolling.animationFrameDisposable = this._scheduleAtNextAnimationFrame(() => {\n            if (!this._smoothScrolling) {\n                return;\n            }\n            this._smoothScrolling.animationFrameDisposable = null;\n            this._performSmoothScrolling();\n        });\n    }\n    _performSmoothScrolling() {\n        if (!this._smoothScrolling) {\n            return;\n        }\n        const update = this._smoothScrolling.tick();\n        const newState = this._state.withScrollPosition(update);\n        this._setState(newState, true);\n        if (!this._smoothScrolling) {\n            // Looks like someone canceled the smooth scrolling\n            // from the scroll event handler\n            return;\n        }\n        if (update.isDone) {\n            this._smoothScrolling.dispose();\n            this._smoothScrolling = null;\n            return;\n        }\n        // Continue smooth scrolling animation\n        this._smoothScrolling.animationFrameDisposable = this._scheduleAtNextAnimationFrame(() => {\n            if (!this._smoothScrolling) {\n                return;\n            }\n            this._smoothScrolling.animationFrameDisposable = null;\n            this._performSmoothScrolling();\n        });\n    }\n    _setState(newState, inSmoothScrolling) {\n        const oldState = this._state;\n        if (oldState.equals(newState)) {\n            // no change\n            return;\n        }\n        this._state = newState;\n        this._onScroll.fire(this._state.createScrollEvent(oldState, inSmoothScrolling));\n    }\n}\nexport class SmoothScrollingUpdate {\n    constructor(scrollLeft, scrollTop, isDone) {\n        this.scrollLeft = scrollLeft;\n        this.scrollTop = scrollTop;\n        this.isDone = isDone;\n    }\n}\nfunction createEaseOutCubic(from, to) {\n    const delta = to - from;\n    return function (completion) {\n        return from + delta * easeOutCubic(completion);\n    };\n}\nfunction createComposed(a, b, cut) {\n    return function (completion) {\n        if (completion < cut) {\n            return a(completion / cut);\n        }\n        return b((completion - cut) / (1 - cut));\n    };\n}\nexport class SmoothScrollingOperation {\n    constructor(from, to, startTime, duration) {\n        this.from = from;\n        this.to = to;\n        this.duration = duration;\n        this.startTime = startTime;\n        this.animationFrameDisposable = null;\n        this._initAnimations();\n    }\n    _initAnimations() {\n        this.scrollLeft = this._initAnimation(this.from.scrollLeft, this.to.scrollLeft, this.to.width);\n        this.scrollTop = this._initAnimation(this.from.scrollTop, this.to.scrollTop, this.to.height);\n    }\n    _initAnimation(from, to, viewportSize) {\n        const delta = Math.abs(from - to);\n        if (delta > 2.5 * viewportSize) {\n            let stop1, stop2;\n            if (from < to) {\n                // scroll to 75% of the viewportSize\n                stop1 = from + 0.75 * viewportSize;\n                stop2 = to - 0.75 * viewportSize;\n            }\n            else {\n                stop1 = from - 0.75 * viewportSize;\n                stop2 = to + 0.75 * viewportSize;\n            }\n            return createComposed(createEaseOutCubic(from, stop1), createEaseOutCubic(stop2, to), 0.33);\n        }\n        return createEaseOutCubic(from, to);\n    }\n    dispose() {\n        if (this.animationFrameDisposable !== null) {\n            this.animationFrameDisposable.dispose();\n            this.animationFrameDisposable = null;\n        }\n    }\n    acceptScrollDimensions(state) {\n        this.to = state.withScrollPosition(this.to);\n        this._initAnimations();\n    }\n    tick() {\n        return this._tick(Date.now());\n    }\n    _tick(now) {\n        const completion = (now - this.startTime) / this.duration;\n        if (completion < 1) {\n            const newScrollLeft = this.scrollLeft(completion);\n            const newScrollTop = this.scrollTop(completion);\n            return new SmoothScrollingUpdate(newScrollLeft, newScrollTop, false);\n        }\n        return new SmoothScrollingUpdate(this.to.scrollLeft, this.to.scrollTop, true);\n    }\n    combine(from, to, duration) {\n        return SmoothScrollingOperation.start(from, to, duration);\n    }\n    static start(from, to, duration) {\n        // +10 / -10 : pretend the animation already started for a quicker response to a scroll request\n        duration = duration + 10;\n        const startTime = Date.now() - 10;\n        return new SmoothScrollingOperation(from, to, startTime, duration);\n    }\n}\nfunction easeInCubic(t) {\n    return Math.pow(t, 3);\n}\nfunction easeOutCubic(t) {\n    return 1 - easeInCubic(1 - t);\n}\n"]},"metadata":{},"sourceType":"module"}