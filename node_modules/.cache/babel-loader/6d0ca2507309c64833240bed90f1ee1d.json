{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../base/browser/dom.js';\nimport { Selection } from '../../common/core/selection.js';\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { PointerHandler } from '../controller/pointerHandler.js';\nimport { TextAreaHandler } from '../controller/textAreaHandler.js';\nimport { ViewController } from './viewController.js';\nimport { ViewUserInputEvents } from './viewUserInputEvents.js';\nimport { ContentViewOverlays, MarginViewOverlays } from './viewOverlays.js';\nimport { PartFingerprints } from './viewPart.js';\nimport { ViewContentWidgets } from '../viewParts/contentWidgets/contentWidgets.js';\nimport { CurrentLineHighlightOverlay, CurrentLineMarginHighlightOverlay } from '../viewParts/currentLineHighlight/currentLineHighlight.js';\nimport { DecorationsOverlay } from '../viewParts/decorations/decorations.js';\nimport { EditorScrollbar } from '../viewParts/editorScrollbar/editorScrollbar.js';\nimport { GlyphMarginOverlay } from '../viewParts/glyphMargin/glyphMargin.js';\nimport { IndentGuidesOverlay } from '../viewParts/indentGuides/indentGuides.js';\nimport { LineNumbersOverlay } from '../viewParts/lineNumbers/lineNumbers.js';\nimport { ViewLines } from '../viewParts/lines/viewLines.js';\nimport { LinesDecorationsOverlay } from '../viewParts/linesDecorations/linesDecorations.js';\nimport { Margin } from '../viewParts/margin/margin.js';\nimport { MarginViewLineDecorationsOverlay } from '../viewParts/marginDecorations/marginDecorations.js';\nimport { Minimap } from '../viewParts/minimap/minimap.js';\nimport { ViewOverlayWidgets } from '../viewParts/overlayWidgets/overlayWidgets.js';\nimport { DecorationsOverviewRuler } from '../viewParts/overviewRuler/decorationsOverviewRuler.js';\nimport { OverviewRuler } from '../viewParts/overviewRuler/overviewRuler.js';\nimport { Rulers } from '../viewParts/rulers/rulers.js';\nimport { ScrollDecorationViewPart } from '../viewParts/scrollDecoration/scrollDecoration.js';\nimport { SelectionsOverlay } from '../viewParts/selections/selections.js';\nimport { ViewCursors } from '../viewParts/viewCursors/viewCursors.js';\nimport { ViewZones } from '../viewParts/viewZones/viewZones.js';\nimport { Position } from '../../common/core/position.js';\nimport { Range } from '../../common/core/range.js';\nimport { RenderingContext } from './renderingContext.js';\nimport { ViewContext } from '../../common/viewModel/viewContext.js';\nimport { ViewportData } from '../../common/viewLayout/viewLinesViewportData.js';\nimport { ViewEventHandler } from '../../common/viewModel/viewEventHandler.js';\nimport { getThemeTypeSelector } from '../../../platform/theme/common/themeService.js';\nimport { PointerHandlerLastRenderData } from '../controller/mouseTarget.js';\nexport class View extends ViewEventHandler {\n  constructor(commandDelegate, configuration, themeService, model, userInputEvents, overflowWidgetsDomNode) {\n    super();\n    this._selections = [new Selection(1, 1, 1, 1)];\n    this._renderAnimationFrame = null;\n    const viewController = new ViewController(configuration, model, userInputEvents, commandDelegate); // The view context is passed on to most classes (basically to reduce param. counts in ctors)\n\n    this._context = new ViewContext(configuration, themeService.getColorTheme(), model); // Ensure the view is the first event handler in order to update the layout\n\n    this._context.addEventHandler(this);\n\n    this._register(themeService.onDidColorThemeChange(theme => {\n      this._context.theme.update(theme);\n\n      this._context.model.onDidColorThemeChange();\n\n      this.render(true, false);\n    }));\n\n    this._viewParts = []; // Keyboard handler\n\n    this._textAreaHandler = new TextAreaHandler(this._context, viewController, this._createTextAreaHandlerHelper());\n\n    this._viewParts.push(this._textAreaHandler); // These two dom nodes must be constructed up front, since references are needed in the layout provider (scrolling & co.)\n\n\n    this._linesContent = createFastDomNode(document.createElement('div'));\n\n    this._linesContent.setClassName('lines-content' + ' monaco-editor-background');\n\n    this._linesContent.setPosition('absolute');\n\n    this.domNode = createFastDomNode(document.createElement('div'));\n    this.domNode.setClassName(this._getEditorClassName()); // Set role 'code' for better screen reader support https://github.com/microsoft/vscode/issues/93438\n\n    this.domNode.setAttribute('role', 'code');\n    this._overflowGuardContainer = createFastDomNode(document.createElement('div'));\n    PartFingerprints.write(this._overflowGuardContainer, 3\n    /* OverflowGuard */\n    );\n\n    this._overflowGuardContainer.setClassName('overflow-guard');\n\n    this._scrollbar = new EditorScrollbar(this._context, this._linesContent, this.domNode, this._overflowGuardContainer);\n\n    this._viewParts.push(this._scrollbar); // View Lines\n\n\n    this._viewLines = new ViewLines(this._context, this._linesContent); // View Zones\n\n    this._viewZones = new ViewZones(this._context);\n\n    this._viewParts.push(this._viewZones); // Decorations overview ruler\n\n\n    const decorationsOverviewRuler = new DecorationsOverviewRuler(this._context);\n\n    this._viewParts.push(decorationsOverviewRuler);\n\n    const scrollDecoration = new ScrollDecorationViewPart(this._context);\n\n    this._viewParts.push(scrollDecoration);\n\n    const contentViewOverlays = new ContentViewOverlays(this._context);\n\n    this._viewParts.push(contentViewOverlays);\n\n    contentViewOverlays.addDynamicOverlay(new CurrentLineHighlightOverlay(this._context));\n    contentViewOverlays.addDynamicOverlay(new SelectionsOverlay(this._context));\n    contentViewOverlays.addDynamicOverlay(new IndentGuidesOverlay(this._context));\n    contentViewOverlays.addDynamicOverlay(new DecorationsOverlay(this._context));\n    const marginViewOverlays = new MarginViewOverlays(this._context);\n\n    this._viewParts.push(marginViewOverlays);\n\n    marginViewOverlays.addDynamicOverlay(new CurrentLineMarginHighlightOverlay(this._context));\n    marginViewOverlays.addDynamicOverlay(new GlyphMarginOverlay(this._context));\n    marginViewOverlays.addDynamicOverlay(new MarginViewLineDecorationsOverlay(this._context));\n    marginViewOverlays.addDynamicOverlay(new LinesDecorationsOverlay(this._context));\n    marginViewOverlays.addDynamicOverlay(new LineNumbersOverlay(this._context));\n    const margin = new Margin(this._context);\n    margin.getDomNode().appendChild(this._viewZones.marginDomNode);\n    margin.getDomNode().appendChild(marginViewOverlays.getDomNode());\n\n    this._viewParts.push(margin); // Content widgets\n\n\n    this._contentWidgets = new ViewContentWidgets(this._context, this.domNode);\n\n    this._viewParts.push(this._contentWidgets);\n\n    this._viewCursors = new ViewCursors(this._context);\n\n    this._viewParts.push(this._viewCursors); // Overlay widgets\n\n\n    this._overlayWidgets = new ViewOverlayWidgets(this._context);\n\n    this._viewParts.push(this._overlayWidgets);\n\n    const rulers = new Rulers(this._context);\n\n    this._viewParts.push(rulers);\n\n    const minimap = new Minimap(this._context);\n\n    this._viewParts.push(minimap); // -------------- Wire dom nodes up\n\n\n    if (decorationsOverviewRuler) {\n      const overviewRulerData = this._scrollbar.getOverviewRulerLayoutInfo();\n\n      overviewRulerData.parent.insertBefore(decorationsOverviewRuler.getDomNode(), overviewRulerData.insertBefore);\n    }\n\n    this._linesContent.appendChild(contentViewOverlays.getDomNode());\n\n    this._linesContent.appendChild(rulers.domNode);\n\n    this._linesContent.appendChild(this._viewZones.domNode);\n\n    this._linesContent.appendChild(this._viewLines.getDomNode());\n\n    this._linesContent.appendChild(this._contentWidgets.domNode);\n\n    this._linesContent.appendChild(this._viewCursors.getDomNode());\n\n    this._overflowGuardContainer.appendChild(margin.getDomNode());\n\n    this._overflowGuardContainer.appendChild(this._scrollbar.getDomNode());\n\n    this._overflowGuardContainer.appendChild(scrollDecoration.getDomNode());\n\n    this._overflowGuardContainer.appendChild(this._textAreaHandler.textArea);\n\n    this._overflowGuardContainer.appendChild(this._textAreaHandler.textAreaCover);\n\n    this._overflowGuardContainer.appendChild(this._overlayWidgets.getDomNode());\n\n    this._overflowGuardContainer.appendChild(minimap.getDomNode());\n\n    this.domNode.appendChild(this._overflowGuardContainer);\n\n    if (overflowWidgetsDomNode) {\n      overflowWidgetsDomNode.appendChild(this._contentWidgets.overflowingContentWidgetsDomNode.domNode);\n    } else {\n      this.domNode.appendChild(this._contentWidgets.overflowingContentWidgetsDomNode);\n    }\n\n    this._applyLayout(); // Pointer handler\n\n\n    this._pointerHandler = this._register(new PointerHandler(this._context, viewController, this._createPointerHandlerHelper()));\n  }\n\n  _flushAccumulatedAndRenderNow() {\n    this._renderNow();\n  }\n\n  _createPointerHandlerHelper() {\n    return {\n      viewDomNode: this.domNode.domNode,\n      linesContentDomNode: this._linesContent.domNode,\n      focusTextArea: () => {\n        this.focus();\n      },\n      dispatchTextAreaEvent: event => {\n        this._textAreaHandler.textArea.domNode.dispatchEvent(event);\n      },\n      getLastRenderData: () => {\n        const lastViewCursorsRenderData = this._viewCursors.getLastRenderData() || [];\n\n        const lastTextareaPosition = this._textAreaHandler.getLastRenderData();\n\n        return new PointerHandlerLastRenderData(lastViewCursorsRenderData, lastTextareaPosition);\n      },\n      shouldSuppressMouseDownOnViewZone: viewZoneId => {\n        return this._viewZones.shouldSuppressMouseDownOnViewZone(viewZoneId);\n      },\n      shouldSuppressMouseDownOnWidget: widgetId => {\n        return this._contentWidgets.shouldSuppressMouseDownOnWidget(widgetId);\n      },\n      getPositionFromDOMInfo: (spanNode, offset) => {\n        this._flushAccumulatedAndRenderNow();\n\n        return this._viewLines.getPositionFromDOMInfo(spanNode, offset);\n      },\n      visibleRangeForPosition: (lineNumber, column) => {\n        this._flushAccumulatedAndRenderNow();\n\n        return this._viewLines.visibleRangeForPosition(new Position(lineNumber, column));\n      },\n      getLineWidth: lineNumber => {\n        this._flushAccumulatedAndRenderNow();\n\n        return this._viewLines.getLineWidth(lineNumber);\n      }\n    };\n  }\n\n  _createTextAreaHandlerHelper() {\n    return {\n      visibleRangeForPosition: position => {\n        this._flushAccumulatedAndRenderNow();\n\n        return this._viewLines.visibleRangeForPosition(position);\n      }\n    };\n  }\n\n  _applyLayout() {\n    const options = this._context.configuration.options;\n    const layoutInfo = options.get(131\n    /* layoutInfo */\n    );\n    this.domNode.setWidth(layoutInfo.width);\n    this.domNode.setHeight(layoutInfo.height);\n\n    this._overflowGuardContainer.setWidth(layoutInfo.width);\n\n    this._overflowGuardContainer.setHeight(layoutInfo.height);\n\n    this._linesContent.setWidth(1000000);\n\n    this._linesContent.setHeight(1000000);\n  }\n\n  _getEditorClassName() {\n    const focused = this._textAreaHandler.isFocused() ? ' focused' : '';\n    return this._context.configuration.options.get(128\n    /* editorClassName */\n    ) + ' ' + getThemeTypeSelector(this._context.theme.type) + focused;\n  } // --- begin event handlers\n\n\n  handleEvents(events) {\n    super.handleEvents(events);\n\n    this._scheduleRender();\n  }\n\n  onConfigurationChanged(e) {\n    this.domNode.setClassName(this._getEditorClassName());\n\n    this._applyLayout();\n\n    return false;\n  }\n\n  onCursorStateChanged(e) {\n    this._selections = e.selections;\n    return false;\n  }\n\n  onFocusChanged(e) {\n    this.domNode.setClassName(this._getEditorClassName());\n    return false;\n  }\n\n  onThemeChanged(e) {\n    this.domNode.setClassName(this._getEditorClassName());\n    return false;\n  } // --- end event handlers\n\n\n  dispose() {\n    if (this._renderAnimationFrame !== null) {\n      this._renderAnimationFrame.dispose();\n\n      this._renderAnimationFrame = null;\n    }\n\n    this._contentWidgets.overflowingContentWidgetsDomNode.domNode.remove();\n\n    this._context.removeEventHandler(this);\n\n    this._viewLines.dispose(); // Destroy view parts\n\n\n    for (const viewPart of this._viewParts) {\n      viewPart.dispose();\n    }\n\n    super.dispose();\n  }\n\n  _scheduleRender() {\n    if (this._renderAnimationFrame === null) {\n      this._renderAnimationFrame = dom.runAtThisOrScheduleAtNextAnimationFrame(this._onRenderScheduled.bind(this), 100);\n    }\n  }\n\n  _onRenderScheduled() {\n    this._renderAnimationFrame = null;\n\n    this._flushAccumulatedAndRenderNow();\n  }\n\n  _renderNow() {\n    safeInvokeNoArg(() => this._actualRender());\n  }\n\n  _getViewPartsToRender() {\n    const result = [];\n    let resultLen = 0;\n\n    for (const viewPart of this._viewParts) {\n      if (viewPart.shouldRender()) {\n        result[resultLen++] = viewPart;\n      }\n    }\n\n    return result;\n  }\n\n  _actualRender() {\n    if (!dom.isInDOM(this.domNode.domNode)) {\n      return;\n    }\n\n    let viewPartsToRender = this._getViewPartsToRender();\n\n    if (!this._viewLines.shouldRender() && viewPartsToRender.length === 0) {\n      // Nothing to render\n      return;\n    }\n\n    const partialViewportData = this._context.viewLayout.getLinesViewportData();\n\n    this._context.model.setViewport(partialViewportData.startLineNumber, partialViewportData.endLineNumber, partialViewportData.centeredLineNumber);\n\n    const viewportData = new ViewportData(this._selections, partialViewportData, this._context.viewLayout.getWhitespaceViewportData(), this._context.model);\n\n    if (this._contentWidgets.shouldRender()) {\n      // Give the content widgets a chance to set their max width before a possible synchronous layout\n      this._contentWidgets.onBeforeRender(viewportData);\n    }\n\n    if (this._viewLines.shouldRender()) {\n      this._viewLines.renderText(viewportData);\n\n      this._viewLines.onDidRender(); // Rendering of viewLines might cause scroll events to occur, so collect view parts to render again\n\n\n      viewPartsToRender = this._getViewPartsToRender();\n    }\n\n    const renderingContext = new RenderingContext(this._context.viewLayout, viewportData, this._viewLines); // Render the rest of the parts\n\n    for (const viewPart of viewPartsToRender) {\n      viewPart.prepareRender(renderingContext);\n    }\n\n    for (const viewPart of viewPartsToRender) {\n      viewPart.render(renderingContext);\n      viewPart.onDidRender();\n    }\n  } // --- BEGIN CodeEditor helpers\n\n\n  delegateVerticalScrollbarMouseDown(browserEvent) {\n    this._scrollbar.delegateVerticalScrollbarMouseDown(browserEvent);\n  }\n\n  restoreState(scrollPosition) {\n    this._context.model.setScrollPosition({\n      scrollTop: scrollPosition.scrollTop\n    }, 1\n    /* Immediate */\n    );\n\n    this._context.model.tokenizeViewport();\n\n    this._renderNow();\n\n    this._viewLines.updateLineWidths();\n\n    this._context.model.setScrollPosition({\n      scrollLeft: scrollPosition.scrollLeft\n    }, 1\n    /* Immediate */\n    );\n  }\n\n  getOffsetForColumn(modelLineNumber, modelColumn) {\n    const modelPosition = this._context.model.validateModelPosition({\n      lineNumber: modelLineNumber,\n      column: modelColumn\n    });\n\n    const viewPosition = this._context.model.coordinatesConverter.convertModelPositionToViewPosition(modelPosition);\n\n    this._flushAccumulatedAndRenderNow();\n\n    const visibleRange = this._viewLines.visibleRangeForPosition(new Position(viewPosition.lineNumber, viewPosition.column));\n\n    if (!visibleRange) {\n      return -1;\n    }\n\n    return visibleRange.left;\n  }\n\n  getTargetAtClientPoint(clientX, clientY) {\n    const mouseTarget = this._pointerHandler.getTargetAtClientPoint(clientX, clientY);\n\n    if (!mouseTarget) {\n      return null;\n    }\n\n    return ViewUserInputEvents.convertViewToModelMouseTarget(mouseTarget, this._context.model.coordinatesConverter);\n  }\n\n  createOverviewRuler(cssClassName) {\n    return new OverviewRuler(this._context, cssClassName);\n  }\n\n  change(callback) {\n    this._viewZones.changeViewZones(callback);\n\n    this._scheduleRender();\n  }\n\n  render(now, everything) {\n    if (everything) {\n      // Force everything to render...\n      this._viewLines.forceShouldRender();\n\n      for (const viewPart of this._viewParts) {\n        viewPart.forceShouldRender();\n      }\n    }\n\n    if (now) {\n      this._flushAccumulatedAndRenderNow();\n    } else {\n      this._scheduleRender();\n    }\n  }\n\n  focus() {\n    this._textAreaHandler.focusTextArea();\n  }\n\n  isFocused() {\n    return this._textAreaHandler.isFocused();\n  }\n\n  setAriaOptions(options) {\n    this._textAreaHandler.setAriaOptions(options);\n  }\n\n  addContentWidget(widgetData) {\n    this._contentWidgets.addWidget(widgetData.widget);\n\n    this.layoutContentWidget(widgetData);\n\n    this._scheduleRender();\n  }\n\n  layoutContentWidget(widgetData) {\n    let newRange = widgetData.position ? widgetData.position.range || null : null;\n\n    if (newRange === null) {\n      const newPosition = widgetData.position ? widgetData.position.position : null;\n\n      if (newPosition !== null) {\n        newRange = new Range(newPosition.lineNumber, newPosition.column, newPosition.lineNumber, newPosition.column);\n      }\n    }\n\n    const newPreference = widgetData.position ? widgetData.position.preference : null;\n\n    this._contentWidgets.setWidgetPosition(widgetData.widget, newRange, newPreference);\n\n    this._scheduleRender();\n  }\n\n  removeContentWidget(widgetData) {\n    this._contentWidgets.removeWidget(widgetData.widget);\n\n    this._scheduleRender();\n  }\n\n  addOverlayWidget(widgetData) {\n    this._overlayWidgets.addWidget(widgetData.widget);\n\n    this.layoutOverlayWidget(widgetData);\n\n    this._scheduleRender();\n  }\n\n  layoutOverlayWidget(widgetData) {\n    const newPreference = widgetData.position ? widgetData.position.preference : null;\n\n    const shouldRender = this._overlayWidgets.setWidgetPosition(widgetData.widget, newPreference);\n\n    if (shouldRender) {\n      this._scheduleRender();\n    }\n  }\n\n  removeOverlayWidget(widgetData) {\n    this._overlayWidgets.removeWidget(widgetData.widget);\n\n    this._scheduleRender();\n  }\n\n}\n\nfunction safeInvokeNoArg(func) {\n  try {\n    return func();\n  } catch (e) {\n    onUnexpectedError(e);\n  }\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/browser/view/view.js"],"names":["dom","Selection","createFastDomNode","onUnexpectedError","PointerHandler","TextAreaHandler","ViewController","ViewUserInputEvents","ContentViewOverlays","MarginViewOverlays","PartFingerprints","ViewContentWidgets","CurrentLineHighlightOverlay","CurrentLineMarginHighlightOverlay","DecorationsOverlay","EditorScrollbar","GlyphMarginOverlay","IndentGuidesOverlay","LineNumbersOverlay","ViewLines","LinesDecorationsOverlay","Margin","MarginViewLineDecorationsOverlay","Minimap","ViewOverlayWidgets","DecorationsOverviewRuler","OverviewRuler","Rulers","ScrollDecorationViewPart","SelectionsOverlay","ViewCursors","ViewZones","Position","Range","RenderingContext","ViewContext","ViewportData","ViewEventHandler","getThemeTypeSelector","PointerHandlerLastRenderData","View","constructor","commandDelegate","configuration","themeService","model","userInputEvents","overflowWidgetsDomNode","_selections","_renderAnimationFrame","viewController","_context","getColorTheme","addEventHandler","_register","onDidColorThemeChange","theme","update","render","_viewParts","_textAreaHandler","_createTextAreaHandlerHelper","push","_linesContent","document","createElement","setClassName","setPosition","domNode","_getEditorClassName","setAttribute","_overflowGuardContainer","write","_scrollbar","_viewLines","_viewZones","decorationsOverviewRuler","scrollDecoration","contentViewOverlays","addDynamicOverlay","marginViewOverlays","margin","getDomNode","appendChild","marginDomNode","_contentWidgets","_viewCursors","_overlayWidgets","rulers","minimap","overviewRulerData","getOverviewRulerLayoutInfo","parent","insertBefore","textArea","textAreaCover","overflowingContentWidgetsDomNode","_applyLayout","_pointerHandler","_createPointerHandlerHelper","_flushAccumulatedAndRenderNow","_renderNow","viewDomNode","linesContentDomNode","focusTextArea","focus","dispatchTextAreaEvent","event","dispatchEvent","getLastRenderData","lastViewCursorsRenderData","lastTextareaPosition","shouldSuppressMouseDownOnViewZone","viewZoneId","shouldSuppressMouseDownOnWidget","widgetId","getPositionFromDOMInfo","spanNode","offset","visibleRangeForPosition","lineNumber","column","getLineWidth","position","options","layoutInfo","get","setWidth","width","setHeight","height","focused","isFocused","type","handleEvents","events","_scheduleRender","onConfigurationChanged","e","onCursorStateChanged","selections","onFocusChanged","onThemeChanged","dispose","remove","removeEventHandler","viewPart","runAtThisOrScheduleAtNextAnimationFrame","_onRenderScheduled","bind","safeInvokeNoArg","_actualRender","_getViewPartsToRender","result","resultLen","shouldRender","isInDOM","viewPartsToRender","length","partialViewportData","viewLayout","getLinesViewportData","setViewport","startLineNumber","endLineNumber","centeredLineNumber","viewportData","getWhitespaceViewportData","onBeforeRender","renderText","onDidRender","renderingContext","prepareRender","delegateVerticalScrollbarMouseDown","browserEvent","restoreState","scrollPosition","setScrollPosition","scrollTop","tokenizeViewport","updateLineWidths","scrollLeft","getOffsetForColumn","modelLineNumber","modelColumn","modelPosition","validateModelPosition","viewPosition","coordinatesConverter","convertModelPositionToViewPosition","visibleRange","left","getTargetAtClientPoint","clientX","clientY","mouseTarget","convertViewToModelMouseTarget","createOverviewRuler","cssClassName","change","callback","changeViewZones","now","everything","forceShouldRender","setAriaOptions","addContentWidget","widgetData","addWidget","widget","layoutContentWidget","newRange","range","newPosition","newPreference","preference","setWidgetPosition","removeContentWidget","removeWidget","addOverlayWidget","layoutOverlayWidget","removeOverlayWidget","func"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../base/browser/dom.js';\nimport { Selection } from '../../common/core/selection.js';\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { PointerHandler } from '../controller/pointerHandler.js';\nimport { TextAreaHandler } from '../controller/textAreaHandler.js';\nimport { ViewController } from './viewController.js';\nimport { ViewUserInputEvents } from './viewUserInputEvents.js';\nimport { ContentViewOverlays, MarginViewOverlays } from './viewOverlays.js';\nimport { PartFingerprints } from './viewPart.js';\nimport { ViewContentWidgets } from '../viewParts/contentWidgets/contentWidgets.js';\nimport { CurrentLineHighlightOverlay, CurrentLineMarginHighlightOverlay } from '../viewParts/currentLineHighlight/currentLineHighlight.js';\nimport { DecorationsOverlay } from '../viewParts/decorations/decorations.js';\nimport { EditorScrollbar } from '../viewParts/editorScrollbar/editorScrollbar.js';\nimport { GlyphMarginOverlay } from '../viewParts/glyphMargin/glyphMargin.js';\nimport { IndentGuidesOverlay } from '../viewParts/indentGuides/indentGuides.js';\nimport { LineNumbersOverlay } from '../viewParts/lineNumbers/lineNumbers.js';\nimport { ViewLines } from '../viewParts/lines/viewLines.js';\nimport { LinesDecorationsOverlay } from '../viewParts/linesDecorations/linesDecorations.js';\nimport { Margin } from '../viewParts/margin/margin.js';\nimport { MarginViewLineDecorationsOverlay } from '../viewParts/marginDecorations/marginDecorations.js';\nimport { Minimap } from '../viewParts/minimap/minimap.js';\nimport { ViewOverlayWidgets } from '../viewParts/overlayWidgets/overlayWidgets.js';\nimport { DecorationsOverviewRuler } from '../viewParts/overviewRuler/decorationsOverviewRuler.js';\nimport { OverviewRuler } from '../viewParts/overviewRuler/overviewRuler.js';\nimport { Rulers } from '../viewParts/rulers/rulers.js';\nimport { ScrollDecorationViewPart } from '../viewParts/scrollDecoration/scrollDecoration.js';\nimport { SelectionsOverlay } from '../viewParts/selections/selections.js';\nimport { ViewCursors } from '../viewParts/viewCursors/viewCursors.js';\nimport { ViewZones } from '../viewParts/viewZones/viewZones.js';\nimport { Position } from '../../common/core/position.js';\nimport { Range } from '../../common/core/range.js';\nimport { RenderingContext } from './renderingContext.js';\nimport { ViewContext } from '../../common/viewModel/viewContext.js';\nimport { ViewportData } from '../../common/viewLayout/viewLinesViewportData.js';\nimport { ViewEventHandler } from '../../common/viewModel/viewEventHandler.js';\nimport { getThemeTypeSelector } from '../../../platform/theme/common/themeService.js';\nimport { PointerHandlerLastRenderData } from '../controller/mouseTarget.js';\nexport class View extends ViewEventHandler {\n    constructor(commandDelegate, configuration, themeService, model, userInputEvents, overflowWidgetsDomNode) {\n        super();\n        this._selections = [new Selection(1, 1, 1, 1)];\n        this._renderAnimationFrame = null;\n        const viewController = new ViewController(configuration, model, userInputEvents, commandDelegate);\n        // The view context is passed on to most classes (basically to reduce param. counts in ctors)\n        this._context = new ViewContext(configuration, themeService.getColorTheme(), model);\n        // Ensure the view is the first event handler in order to update the layout\n        this._context.addEventHandler(this);\n        this._register(themeService.onDidColorThemeChange(theme => {\n            this._context.theme.update(theme);\n            this._context.model.onDidColorThemeChange();\n            this.render(true, false);\n        }));\n        this._viewParts = [];\n        // Keyboard handler\n        this._textAreaHandler = new TextAreaHandler(this._context, viewController, this._createTextAreaHandlerHelper());\n        this._viewParts.push(this._textAreaHandler);\n        // These two dom nodes must be constructed up front, since references are needed in the layout provider (scrolling & co.)\n        this._linesContent = createFastDomNode(document.createElement('div'));\n        this._linesContent.setClassName('lines-content' + ' monaco-editor-background');\n        this._linesContent.setPosition('absolute');\n        this.domNode = createFastDomNode(document.createElement('div'));\n        this.domNode.setClassName(this._getEditorClassName());\n        // Set role 'code' for better screen reader support https://github.com/microsoft/vscode/issues/93438\n        this.domNode.setAttribute('role', 'code');\n        this._overflowGuardContainer = createFastDomNode(document.createElement('div'));\n        PartFingerprints.write(this._overflowGuardContainer, 3 /* OverflowGuard */);\n        this._overflowGuardContainer.setClassName('overflow-guard');\n        this._scrollbar = new EditorScrollbar(this._context, this._linesContent, this.domNode, this._overflowGuardContainer);\n        this._viewParts.push(this._scrollbar);\n        // View Lines\n        this._viewLines = new ViewLines(this._context, this._linesContent);\n        // View Zones\n        this._viewZones = new ViewZones(this._context);\n        this._viewParts.push(this._viewZones);\n        // Decorations overview ruler\n        const decorationsOverviewRuler = new DecorationsOverviewRuler(this._context);\n        this._viewParts.push(decorationsOverviewRuler);\n        const scrollDecoration = new ScrollDecorationViewPart(this._context);\n        this._viewParts.push(scrollDecoration);\n        const contentViewOverlays = new ContentViewOverlays(this._context);\n        this._viewParts.push(contentViewOverlays);\n        contentViewOverlays.addDynamicOverlay(new CurrentLineHighlightOverlay(this._context));\n        contentViewOverlays.addDynamicOverlay(new SelectionsOverlay(this._context));\n        contentViewOverlays.addDynamicOverlay(new IndentGuidesOverlay(this._context));\n        contentViewOverlays.addDynamicOverlay(new DecorationsOverlay(this._context));\n        const marginViewOverlays = new MarginViewOverlays(this._context);\n        this._viewParts.push(marginViewOverlays);\n        marginViewOverlays.addDynamicOverlay(new CurrentLineMarginHighlightOverlay(this._context));\n        marginViewOverlays.addDynamicOverlay(new GlyphMarginOverlay(this._context));\n        marginViewOverlays.addDynamicOverlay(new MarginViewLineDecorationsOverlay(this._context));\n        marginViewOverlays.addDynamicOverlay(new LinesDecorationsOverlay(this._context));\n        marginViewOverlays.addDynamicOverlay(new LineNumbersOverlay(this._context));\n        const margin = new Margin(this._context);\n        margin.getDomNode().appendChild(this._viewZones.marginDomNode);\n        margin.getDomNode().appendChild(marginViewOverlays.getDomNode());\n        this._viewParts.push(margin);\n        // Content widgets\n        this._contentWidgets = new ViewContentWidgets(this._context, this.domNode);\n        this._viewParts.push(this._contentWidgets);\n        this._viewCursors = new ViewCursors(this._context);\n        this._viewParts.push(this._viewCursors);\n        // Overlay widgets\n        this._overlayWidgets = new ViewOverlayWidgets(this._context);\n        this._viewParts.push(this._overlayWidgets);\n        const rulers = new Rulers(this._context);\n        this._viewParts.push(rulers);\n        const minimap = new Minimap(this._context);\n        this._viewParts.push(minimap);\n        // -------------- Wire dom nodes up\n        if (decorationsOverviewRuler) {\n            const overviewRulerData = this._scrollbar.getOverviewRulerLayoutInfo();\n            overviewRulerData.parent.insertBefore(decorationsOverviewRuler.getDomNode(), overviewRulerData.insertBefore);\n        }\n        this._linesContent.appendChild(contentViewOverlays.getDomNode());\n        this._linesContent.appendChild(rulers.domNode);\n        this._linesContent.appendChild(this._viewZones.domNode);\n        this._linesContent.appendChild(this._viewLines.getDomNode());\n        this._linesContent.appendChild(this._contentWidgets.domNode);\n        this._linesContent.appendChild(this._viewCursors.getDomNode());\n        this._overflowGuardContainer.appendChild(margin.getDomNode());\n        this._overflowGuardContainer.appendChild(this._scrollbar.getDomNode());\n        this._overflowGuardContainer.appendChild(scrollDecoration.getDomNode());\n        this._overflowGuardContainer.appendChild(this._textAreaHandler.textArea);\n        this._overflowGuardContainer.appendChild(this._textAreaHandler.textAreaCover);\n        this._overflowGuardContainer.appendChild(this._overlayWidgets.getDomNode());\n        this._overflowGuardContainer.appendChild(minimap.getDomNode());\n        this.domNode.appendChild(this._overflowGuardContainer);\n        if (overflowWidgetsDomNode) {\n            overflowWidgetsDomNode.appendChild(this._contentWidgets.overflowingContentWidgetsDomNode.domNode);\n        }\n        else {\n            this.domNode.appendChild(this._contentWidgets.overflowingContentWidgetsDomNode);\n        }\n        this._applyLayout();\n        // Pointer handler\n        this._pointerHandler = this._register(new PointerHandler(this._context, viewController, this._createPointerHandlerHelper()));\n    }\n    _flushAccumulatedAndRenderNow() {\n        this._renderNow();\n    }\n    _createPointerHandlerHelper() {\n        return {\n            viewDomNode: this.domNode.domNode,\n            linesContentDomNode: this._linesContent.domNode,\n            focusTextArea: () => {\n                this.focus();\n            },\n            dispatchTextAreaEvent: (event) => {\n                this._textAreaHandler.textArea.domNode.dispatchEvent(event);\n            },\n            getLastRenderData: () => {\n                const lastViewCursorsRenderData = this._viewCursors.getLastRenderData() || [];\n                const lastTextareaPosition = this._textAreaHandler.getLastRenderData();\n                return new PointerHandlerLastRenderData(lastViewCursorsRenderData, lastTextareaPosition);\n            },\n            shouldSuppressMouseDownOnViewZone: (viewZoneId) => {\n                return this._viewZones.shouldSuppressMouseDownOnViewZone(viewZoneId);\n            },\n            shouldSuppressMouseDownOnWidget: (widgetId) => {\n                return this._contentWidgets.shouldSuppressMouseDownOnWidget(widgetId);\n            },\n            getPositionFromDOMInfo: (spanNode, offset) => {\n                this._flushAccumulatedAndRenderNow();\n                return this._viewLines.getPositionFromDOMInfo(spanNode, offset);\n            },\n            visibleRangeForPosition: (lineNumber, column) => {\n                this._flushAccumulatedAndRenderNow();\n                return this._viewLines.visibleRangeForPosition(new Position(lineNumber, column));\n            },\n            getLineWidth: (lineNumber) => {\n                this._flushAccumulatedAndRenderNow();\n                return this._viewLines.getLineWidth(lineNumber);\n            }\n        };\n    }\n    _createTextAreaHandlerHelper() {\n        return {\n            visibleRangeForPosition: (position) => {\n                this._flushAccumulatedAndRenderNow();\n                return this._viewLines.visibleRangeForPosition(position);\n            }\n        };\n    }\n    _applyLayout() {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this.domNode.setWidth(layoutInfo.width);\n        this.domNode.setHeight(layoutInfo.height);\n        this._overflowGuardContainer.setWidth(layoutInfo.width);\n        this._overflowGuardContainer.setHeight(layoutInfo.height);\n        this._linesContent.setWidth(1000000);\n        this._linesContent.setHeight(1000000);\n    }\n    _getEditorClassName() {\n        const focused = this._textAreaHandler.isFocused() ? ' focused' : '';\n        return this._context.configuration.options.get(128 /* editorClassName */) + ' ' + getThemeTypeSelector(this._context.theme.type) + focused;\n    }\n    // --- begin event handlers\n    handleEvents(events) {\n        super.handleEvents(events);\n        this._scheduleRender();\n    }\n    onConfigurationChanged(e) {\n        this.domNode.setClassName(this._getEditorClassName());\n        this._applyLayout();\n        return false;\n    }\n    onCursorStateChanged(e) {\n        this._selections = e.selections;\n        return false;\n    }\n    onFocusChanged(e) {\n        this.domNode.setClassName(this._getEditorClassName());\n        return false;\n    }\n    onThemeChanged(e) {\n        this.domNode.setClassName(this._getEditorClassName());\n        return false;\n    }\n    // --- end event handlers\n    dispose() {\n        if (this._renderAnimationFrame !== null) {\n            this._renderAnimationFrame.dispose();\n            this._renderAnimationFrame = null;\n        }\n        this._contentWidgets.overflowingContentWidgetsDomNode.domNode.remove();\n        this._context.removeEventHandler(this);\n        this._viewLines.dispose();\n        // Destroy view parts\n        for (const viewPart of this._viewParts) {\n            viewPart.dispose();\n        }\n        super.dispose();\n    }\n    _scheduleRender() {\n        if (this._renderAnimationFrame === null) {\n            this._renderAnimationFrame = dom.runAtThisOrScheduleAtNextAnimationFrame(this._onRenderScheduled.bind(this), 100);\n        }\n    }\n    _onRenderScheduled() {\n        this._renderAnimationFrame = null;\n        this._flushAccumulatedAndRenderNow();\n    }\n    _renderNow() {\n        safeInvokeNoArg(() => this._actualRender());\n    }\n    _getViewPartsToRender() {\n        const result = [];\n        let resultLen = 0;\n        for (const viewPart of this._viewParts) {\n            if (viewPart.shouldRender()) {\n                result[resultLen++] = viewPart;\n            }\n        }\n        return result;\n    }\n    _actualRender() {\n        if (!dom.isInDOM(this.domNode.domNode)) {\n            return;\n        }\n        let viewPartsToRender = this._getViewPartsToRender();\n        if (!this._viewLines.shouldRender() && viewPartsToRender.length === 0) {\n            // Nothing to render\n            return;\n        }\n        const partialViewportData = this._context.viewLayout.getLinesViewportData();\n        this._context.model.setViewport(partialViewportData.startLineNumber, partialViewportData.endLineNumber, partialViewportData.centeredLineNumber);\n        const viewportData = new ViewportData(this._selections, partialViewportData, this._context.viewLayout.getWhitespaceViewportData(), this._context.model);\n        if (this._contentWidgets.shouldRender()) {\n            // Give the content widgets a chance to set their max width before a possible synchronous layout\n            this._contentWidgets.onBeforeRender(viewportData);\n        }\n        if (this._viewLines.shouldRender()) {\n            this._viewLines.renderText(viewportData);\n            this._viewLines.onDidRender();\n            // Rendering of viewLines might cause scroll events to occur, so collect view parts to render again\n            viewPartsToRender = this._getViewPartsToRender();\n        }\n        const renderingContext = new RenderingContext(this._context.viewLayout, viewportData, this._viewLines);\n        // Render the rest of the parts\n        for (const viewPart of viewPartsToRender) {\n            viewPart.prepareRender(renderingContext);\n        }\n        for (const viewPart of viewPartsToRender) {\n            viewPart.render(renderingContext);\n            viewPart.onDidRender();\n        }\n    }\n    // --- BEGIN CodeEditor helpers\n    delegateVerticalScrollbarMouseDown(browserEvent) {\n        this._scrollbar.delegateVerticalScrollbarMouseDown(browserEvent);\n    }\n    restoreState(scrollPosition) {\n        this._context.model.setScrollPosition({ scrollTop: scrollPosition.scrollTop }, 1 /* Immediate */);\n        this._context.model.tokenizeViewport();\n        this._renderNow();\n        this._viewLines.updateLineWidths();\n        this._context.model.setScrollPosition({ scrollLeft: scrollPosition.scrollLeft }, 1 /* Immediate */);\n    }\n    getOffsetForColumn(modelLineNumber, modelColumn) {\n        const modelPosition = this._context.model.validateModelPosition({\n            lineNumber: modelLineNumber,\n            column: modelColumn\n        });\n        const viewPosition = this._context.model.coordinatesConverter.convertModelPositionToViewPosition(modelPosition);\n        this._flushAccumulatedAndRenderNow();\n        const visibleRange = this._viewLines.visibleRangeForPosition(new Position(viewPosition.lineNumber, viewPosition.column));\n        if (!visibleRange) {\n            return -1;\n        }\n        return visibleRange.left;\n    }\n    getTargetAtClientPoint(clientX, clientY) {\n        const mouseTarget = this._pointerHandler.getTargetAtClientPoint(clientX, clientY);\n        if (!mouseTarget) {\n            return null;\n        }\n        return ViewUserInputEvents.convertViewToModelMouseTarget(mouseTarget, this._context.model.coordinatesConverter);\n    }\n    createOverviewRuler(cssClassName) {\n        return new OverviewRuler(this._context, cssClassName);\n    }\n    change(callback) {\n        this._viewZones.changeViewZones(callback);\n        this._scheduleRender();\n    }\n    render(now, everything) {\n        if (everything) {\n            // Force everything to render...\n            this._viewLines.forceShouldRender();\n            for (const viewPart of this._viewParts) {\n                viewPart.forceShouldRender();\n            }\n        }\n        if (now) {\n            this._flushAccumulatedAndRenderNow();\n        }\n        else {\n            this._scheduleRender();\n        }\n    }\n    focus() {\n        this._textAreaHandler.focusTextArea();\n    }\n    isFocused() {\n        return this._textAreaHandler.isFocused();\n    }\n    setAriaOptions(options) {\n        this._textAreaHandler.setAriaOptions(options);\n    }\n    addContentWidget(widgetData) {\n        this._contentWidgets.addWidget(widgetData.widget);\n        this.layoutContentWidget(widgetData);\n        this._scheduleRender();\n    }\n    layoutContentWidget(widgetData) {\n        let newRange = widgetData.position ? widgetData.position.range || null : null;\n        if (newRange === null) {\n            const newPosition = widgetData.position ? widgetData.position.position : null;\n            if (newPosition !== null) {\n                newRange = new Range(newPosition.lineNumber, newPosition.column, newPosition.lineNumber, newPosition.column);\n            }\n        }\n        const newPreference = widgetData.position ? widgetData.position.preference : null;\n        this._contentWidgets.setWidgetPosition(widgetData.widget, newRange, newPreference);\n        this._scheduleRender();\n    }\n    removeContentWidget(widgetData) {\n        this._contentWidgets.removeWidget(widgetData.widget);\n        this._scheduleRender();\n    }\n    addOverlayWidget(widgetData) {\n        this._overlayWidgets.addWidget(widgetData.widget);\n        this.layoutOverlayWidget(widgetData);\n        this._scheduleRender();\n    }\n    layoutOverlayWidget(widgetData) {\n        const newPreference = widgetData.position ? widgetData.position.preference : null;\n        const shouldRender = this._overlayWidgets.setWidgetPosition(widgetData.widget, newPreference);\n        if (shouldRender) {\n            this._scheduleRender();\n        }\n    }\n    removeOverlayWidget(widgetData) {\n        this._overlayWidgets.removeWidget(widgetData.widget);\n        this._scheduleRender();\n    }\n}\nfunction safeInvokeNoArg(func) {\n    try {\n        return func();\n    }\n    catch (e) {\n        onUnexpectedError(e);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}