{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Range } from '../../../common/core/range.js';\nexport class ReplaceAllCommand {\n  constructor(editorSelection, ranges, replaceStrings) {\n    this._editorSelection = editorSelection;\n    this._ranges = ranges;\n    this._replaceStrings = replaceStrings;\n    this._trackedEditorSelectionId = null;\n  }\n\n  getEditOperations(model, builder) {\n    if (this._ranges.length > 0) {\n      // Collect all edit operations\n      let ops = [];\n\n      for (let i = 0; i < this._ranges.length; i++) {\n        ops.push({\n          range: this._ranges[i],\n          text: this._replaceStrings[i]\n        });\n      } // Sort them in ascending order by range starts\n\n\n      ops.sort((o1, o2) => {\n        return Range.compareRangesUsingStarts(o1.range, o2.range);\n      }); // Merge operations that touch each other\n\n      let resultOps = [];\n      let previousOp = ops[0];\n\n      for (let i = 1; i < ops.length; i++) {\n        if (previousOp.range.endLineNumber === ops[i].range.startLineNumber && previousOp.range.endColumn === ops[i].range.startColumn) {\n          // These operations are one after another and can be merged\n          previousOp.range = previousOp.range.plusRange(ops[i].range);\n          previousOp.text = previousOp.text + ops[i].text;\n        } else {\n          resultOps.push(previousOp);\n          previousOp = ops[i];\n        }\n      }\n\n      resultOps.push(previousOp);\n\n      for (const op of resultOps) {\n        builder.addEditOperation(op.range, op.text);\n      }\n    }\n\n    this._trackedEditorSelectionId = builder.trackSelection(this._editorSelection);\n  }\n\n  computeCursorState(model, helper) {\n    return helper.getTrackedSelection(this._trackedEditorSelectionId);\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/contrib/find/browser/replaceAllCommand.js"],"names":["Range","ReplaceAllCommand","constructor","editorSelection","ranges","replaceStrings","_editorSelection","_ranges","_replaceStrings","_trackedEditorSelectionId","getEditOperations","model","builder","length","ops","i","push","range","text","sort","o1","o2","compareRangesUsingStarts","resultOps","previousOp","endLineNumber","startLineNumber","endColumn","startColumn","plusRange","op","addEditOperation","trackSelection","computeCursorState","helper","getTrackedSelection"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,KAAT,QAAsB,+BAAtB;AACA,OAAO,MAAMC,iBAAN,CAAwB;AAC3BC,EAAAA,WAAW,CAACC,eAAD,EAAkBC,MAAlB,EAA0BC,cAA1B,EAA0C;AACjD,SAAKC,gBAAL,GAAwBH,eAAxB;AACA,SAAKI,OAAL,GAAeH,MAAf;AACA,SAAKI,eAAL,GAAuBH,cAAvB;AACA,SAAKI,yBAAL,GAAiC,IAAjC;AACH;;AACDC,EAAAA,iBAAiB,CAACC,KAAD,EAAQC,OAAR,EAAiB;AAC9B,QAAI,KAAKL,OAAL,CAAaM,MAAb,GAAsB,CAA1B,EAA6B;AACzB;AACA,UAAIC,GAAG,GAAG,EAAV;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKR,OAAL,CAAaM,MAAjC,EAAyCE,CAAC,EAA1C,EAA8C;AAC1CD,QAAAA,GAAG,CAACE,IAAJ,CAAS;AACLC,UAAAA,KAAK,EAAE,KAAKV,OAAL,CAAaQ,CAAb,CADF;AAELG,UAAAA,IAAI,EAAE,KAAKV,eAAL,CAAqBO,CAArB;AAFD,SAAT;AAIH,OARwB,CASzB;;;AACAD,MAAAA,GAAG,CAACK,IAAJ,CAAS,CAACC,EAAD,EAAKC,EAAL,KAAY;AACjB,eAAOrB,KAAK,CAACsB,wBAAN,CAA+BF,EAAE,CAACH,KAAlC,EAAyCI,EAAE,CAACJ,KAA5C,CAAP;AACH,OAFD,EAVyB,CAazB;;AACA,UAAIM,SAAS,GAAG,EAAhB;AACA,UAAIC,UAAU,GAAGV,GAAG,CAAC,CAAD,CAApB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,GAAG,CAACD,MAAxB,EAAgCE,CAAC,EAAjC,EAAqC;AACjC,YAAIS,UAAU,CAACP,KAAX,CAAiBQ,aAAjB,KAAmCX,GAAG,CAACC,CAAD,CAAH,CAAOE,KAAP,CAAaS,eAAhD,IAAmEF,UAAU,CAACP,KAAX,CAAiBU,SAAjB,KAA+Bb,GAAG,CAACC,CAAD,CAAH,CAAOE,KAAP,CAAaW,WAAnH,EAAgI;AAC5H;AACAJ,UAAAA,UAAU,CAACP,KAAX,GAAmBO,UAAU,CAACP,KAAX,CAAiBY,SAAjB,CAA2Bf,GAAG,CAACC,CAAD,CAAH,CAAOE,KAAlC,CAAnB;AACAO,UAAAA,UAAU,CAACN,IAAX,GAAkBM,UAAU,CAACN,IAAX,GAAkBJ,GAAG,CAACC,CAAD,CAAH,CAAOG,IAA3C;AACH,SAJD,MAKK;AACDK,UAAAA,SAAS,CAACP,IAAV,CAAeQ,UAAf;AACAA,UAAAA,UAAU,GAAGV,GAAG,CAACC,CAAD,CAAhB;AACH;AACJ;;AACDQ,MAAAA,SAAS,CAACP,IAAV,CAAeQ,UAAf;;AACA,WAAK,MAAMM,EAAX,IAAiBP,SAAjB,EAA4B;AACxBX,QAAAA,OAAO,CAACmB,gBAAR,CAAyBD,EAAE,CAACb,KAA5B,EAAmCa,EAAE,CAACZ,IAAtC;AACH;AACJ;;AACD,SAAKT,yBAAL,GAAiCG,OAAO,CAACoB,cAAR,CAAuB,KAAK1B,gBAA5B,CAAjC;AACH;;AACD2B,EAAAA,kBAAkB,CAACtB,KAAD,EAAQuB,MAAR,EAAgB;AAC9B,WAAOA,MAAM,CAACC,mBAAP,CAA2B,KAAK1B,yBAAhC,CAAP;AACH;;AA5C0B","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Range } from '../../../common/core/range.js';\nexport class ReplaceAllCommand {\n    constructor(editorSelection, ranges, replaceStrings) {\n        this._editorSelection = editorSelection;\n        this._ranges = ranges;\n        this._replaceStrings = replaceStrings;\n        this._trackedEditorSelectionId = null;\n    }\n    getEditOperations(model, builder) {\n        if (this._ranges.length > 0) {\n            // Collect all edit operations\n            let ops = [];\n            for (let i = 0; i < this._ranges.length; i++) {\n                ops.push({\n                    range: this._ranges[i],\n                    text: this._replaceStrings[i]\n                });\n            }\n            // Sort them in ascending order by range starts\n            ops.sort((o1, o2) => {\n                return Range.compareRangesUsingStarts(o1.range, o2.range);\n            });\n            // Merge operations that touch each other\n            let resultOps = [];\n            let previousOp = ops[0];\n            for (let i = 1; i < ops.length; i++) {\n                if (previousOp.range.endLineNumber === ops[i].range.startLineNumber && previousOp.range.endColumn === ops[i].range.startColumn) {\n                    // These operations are one after another and can be merged\n                    previousOp.range = previousOp.range.plusRange(ops[i].range);\n                    previousOp.text = previousOp.text + ops[i].text;\n                }\n                else {\n                    resultOps.push(previousOp);\n                    previousOp = ops[i];\n                }\n            }\n            resultOps.push(previousOp);\n            for (const op of resultOps) {\n                builder.addEditOperation(op.range, op.text);\n            }\n        }\n        this._trackedEditorSelectionId = builder.trackSelection(this._editorSelection);\n    }\n    computeCursorState(model, helper) {\n        return helper.getTrackedSelection(this._trackedEditorSelectionId);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}