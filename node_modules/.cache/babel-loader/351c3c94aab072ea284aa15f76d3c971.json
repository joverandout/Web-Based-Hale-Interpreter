{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { asCSSPropertyValue, asCSSUrl } from '../../../base/browser/dom.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { getIconRegistry } from '../common/iconRegistry.js';\nimport { ThemeIcon } from '../common/themeService.js';\nexport function getIconsStyleSheet(themeService) {\n  const onDidChangeEmmiter = new Emitter();\n  const iconRegistry = getIconRegistry();\n  iconRegistry.onDidChange(() => onDidChangeEmmiter.fire());\n  themeService === null || themeService === void 0 ? void 0 : themeService.onDidProductIconThemeChange(() => onDidChangeEmmiter.fire());\n  return {\n    onDidChange: onDidChangeEmmiter.event,\n\n    getCSS() {\n      const productIconTheme = themeService ? themeService.getProductIconTheme() : new UnthemedProductIconTheme();\n      const usedFontIds = {};\n\n      const formatIconRule = contribution => {\n        const definition = productIconTheme.getIcon(contribution);\n\n        if (!definition) {\n          return undefined;\n        }\n\n        const fontContribution = definition.font;\n\n        if (fontContribution) {\n          usedFontIds[fontContribution.id] = fontContribution.getDefinition();\n          return `.codicon-${contribution.id}:before { content: '${definition.fontCharacter}'; font-family: ${asCSSPropertyValue(fontContribution.id)}; }`;\n        } // default font (codicon)\n\n\n        return `.codicon-${contribution.id}:before { content: '${definition.fontCharacter}'; }`;\n      };\n\n      const rules = [];\n\n      for (let contribution of iconRegistry.getIcons()) {\n        const rule = formatIconRule(contribution);\n\n        if (rule) {\n          rules.push(rule);\n        }\n      }\n\n      for (let id in usedFontIds) {\n        const definition = usedFontIds[id];\n\n        if (definition) {\n          const fontWeight = definition.weight ? `font-weight: ${definition.weight};` : '';\n          const fontStyle = definition.style ? `font-style: ${definition.style};` : '';\n          const src = definition.src.map(l => `${asCSSUrl(l.location)} format('${l.format}')`).join(', ');\n          rules.push(`@font-face { src: ${src}; font-family: ${asCSSPropertyValue(id)};${fontWeight}${fontStyle} font-display: block; }`);\n        }\n      }\n\n      return rules.join('\\n');\n    }\n\n  };\n}\nexport class UnthemedProductIconTheme {\n  getIcon(contribution) {\n    const iconRegistry = getIconRegistry();\n    let definition = contribution.defaults;\n\n    while (ThemeIcon.isThemeIcon(definition)) {\n      const c = iconRegistry.getIcon(definition.id);\n\n      if (!c) {\n        return undefined;\n      }\n\n      definition = c.defaults;\n    }\n\n    return definition;\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/platform/theme/browser/iconsStyleSheet.js"],"names":["asCSSPropertyValue","asCSSUrl","Emitter","getIconRegistry","ThemeIcon","getIconsStyleSheet","themeService","onDidChangeEmmiter","iconRegistry","onDidChange","fire","onDidProductIconThemeChange","event","getCSS","productIconTheme","getProductIconTheme","UnthemedProductIconTheme","usedFontIds","formatIconRule","contribution","definition","getIcon","undefined","fontContribution","font","id","getDefinition","fontCharacter","rules","getIcons","rule","push","fontWeight","weight","fontStyle","style","src","map","l","location","format","join","defaults","isThemeIcon","c"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,kBAAT,EAA6BC,QAA7B,QAA6C,8BAA7C;AACA,SAASC,OAAT,QAAwB,+BAAxB;AACA,SAASC,eAAT,QAAgC,2BAAhC;AACA,SAASC,SAAT,QAA0B,2BAA1B;AACA,OAAO,SAASC,kBAAT,CAA4BC,YAA5B,EAA0C;AAC7C,QAAMC,kBAAkB,GAAG,IAAIL,OAAJ,EAA3B;AACA,QAAMM,YAAY,GAAGL,eAAe,EAApC;AACAK,EAAAA,YAAY,CAACC,WAAb,CAAyB,MAAMF,kBAAkB,CAACG,IAAnB,EAA/B;AACAJ,EAAAA,YAAY,KAAK,IAAjB,IAAyBA,YAAY,KAAK,KAAK,CAA/C,GAAmD,KAAK,CAAxD,GAA4DA,YAAY,CAACK,2BAAb,CAAyC,MAAMJ,kBAAkB,CAACG,IAAnB,EAA/C,CAA5D;AACA,SAAO;AACHD,IAAAA,WAAW,EAAEF,kBAAkB,CAACK,KAD7B;;AAEHC,IAAAA,MAAM,GAAG;AACL,YAAMC,gBAAgB,GAAGR,YAAY,GAAGA,YAAY,CAACS,mBAAb,EAAH,GAAwC,IAAIC,wBAAJ,EAA7E;AACA,YAAMC,WAAW,GAAG,EAApB;;AACA,YAAMC,cAAc,GAAIC,YAAD,IAAkB;AACrC,cAAMC,UAAU,GAAGN,gBAAgB,CAACO,OAAjB,CAAyBF,YAAzB,CAAnB;;AACA,YAAI,CAACC,UAAL,EAAiB;AACb,iBAAOE,SAAP;AACH;;AACD,cAAMC,gBAAgB,GAAGH,UAAU,CAACI,IAApC;;AACA,YAAID,gBAAJ,EAAsB;AAClBN,UAAAA,WAAW,CAACM,gBAAgB,CAACE,EAAlB,CAAX,GAAmCF,gBAAgB,CAACG,aAAjB,EAAnC;AACA,iBAAQ,YAAWP,YAAY,CAACM,EAAG,uBAAsBL,UAAU,CAACO,aAAc,mBAAkB3B,kBAAkB,CAACuB,gBAAgB,CAACE,EAAlB,CAAsB,KAA5I;AACH,SAToC,CAUrC;;;AACA,eAAQ,YAAWN,YAAY,CAACM,EAAG,uBAAsBL,UAAU,CAACO,aAAc,MAAlF;AACH,OAZD;;AAaA,YAAMC,KAAK,GAAG,EAAd;;AACA,WAAK,IAAIT,YAAT,IAAyBX,YAAY,CAACqB,QAAb,EAAzB,EAAkD;AAC9C,cAAMC,IAAI,GAAGZ,cAAc,CAACC,YAAD,CAA3B;;AACA,YAAIW,IAAJ,EAAU;AACNF,UAAAA,KAAK,CAACG,IAAN,CAAWD,IAAX;AACH;AACJ;;AACD,WAAK,IAAIL,EAAT,IAAeR,WAAf,EAA4B;AACxB,cAAMG,UAAU,GAAGH,WAAW,CAACQ,EAAD,CAA9B;;AACA,YAAIL,UAAJ,EAAgB;AACZ,gBAAMY,UAAU,GAAGZ,UAAU,CAACa,MAAX,GAAqB,gBAAeb,UAAU,CAACa,MAAO,GAAtD,GAA2D,EAA9E;AACA,gBAAMC,SAAS,GAAGd,UAAU,CAACe,KAAX,GAAoB,eAAcf,UAAU,CAACe,KAAM,GAAnD,GAAwD,EAA1E;AACA,gBAAMC,GAAG,GAAGhB,UAAU,CAACgB,GAAX,CAAeC,GAAf,CAAmBC,CAAC,IAAK,GAAErC,QAAQ,CAACqC,CAAC,CAACC,QAAH,CAAa,YAAWD,CAAC,CAACE,MAAO,IAApE,EAAyEC,IAAzE,CAA8E,IAA9E,CAAZ;AACAb,UAAAA,KAAK,CAACG,IAAN,CAAY,qBAAoBK,GAAI,kBAAiBpC,kBAAkB,CAACyB,EAAD,CAAK,IAAGO,UAAW,GAAEE,SAAU,yBAAtG;AACH;AACJ;;AACD,aAAON,KAAK,CAACa,IAAN,CAAW,IAAX,CAAP;AACH;;AAnCE,GAAP;AAqCH;AACD,OAAO,MAAMzB,wBAAN,CAA+B;AAClCK,EAAAA,OAAO,CAACF,YAAD,EAAe;AAClB,UAAMX,YAAY,GAAGL,eAAe,EAApC;AACA,QAAIiB,UAAU,GAAGD,YAAY,CAACuB,QAA9B;;AACA,WAAOtC,SAAS,CAACuC,WAAV,CAAsBvB,UAAtB,CAAP,EAA0C;AACtC,YAAMwB,CAAC,GAAGpC,YAAY,CAACa,OAAb,CAAqBD,UAAU,CAACK,EAAhC,CAAV;;AACA,UAAI,CAACmB,CAAL,EAAQ;AACJ,eAAOtB,SAAP;AACH;;AACDF,MAAAA,UAAU,GAAGwB,CAAC,CAACF,QAAf;AACH;;AACD,WAAOtB,UAAP;AACH;;AAZiC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { asCSSPropertyValue, asCSSUrl } from '../../../base/browser/dom.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { getIconRegistry } from '../common/iconRegistry.js';\nimport { ThemeIcon } from '../common/themeService.js';\nexport function getIconsStyleSheet(themeService) {\n    const onDidChangeEmmiter = new Emitter();\n    const iconRegistry = getIconRegistry();\n    iconRegistry.onDidChange(() => onDidChangeEmmiter.fire());\n    themeService === null || themeService === void 0 ? void 0 : themeService.onDidProductIconThemeChange(() => onDidChangeEmmiter.fire());\n    return {\n        onDidChange: onDidChangeEmmiter.event,\n        getCSS() {\n            const productIconTheme = themeService ? themeService.getProductIconTheme() : new UnthemedProductIconTheme();\n            const usedFontIds = {};\n            const formatIconRule = (contribution) => {\n                const definition = productIconTheme.getIcon(contribution);\n                if (!definition) {\n                    return undefined;\n                }\n                const fontContribution = definition.font;\n                if (fontContribution) {\n                    usedFontIds[fontContribution.id] = fontContribution.getDefinition();\n                    return `.codicon-${contribution.id}:before { content: '${definition.fontCharacter}'; font-family: ${asCSSPropertyValue(fontContribution.id)}; }`;\n                }\n                // default font (codicon)\n                return `.codicon-${contribution.id}:before { content: '${definition.fontCharacter}'; }`;\n            };\n            const rules = [];\n            for (let contribution of iconRegistry.getIcons()) {\n                const rule = formatIconRule(contribution);\n                if (rule) {\n                    rules.push(rule);\n                }\n            }\n            for (let id in usedFontIds) {\n                const definition = usedFontIds[id];\n                if (definition) {\n                    const fontWeight = definition.weight ? `font-weight: ${definition.weight};` : '';\n                    const fontStyle = definition.style ? `font-style: ${definition.style};` : '';\n                    const src = definition.src.map(l => `${asCSSUrl(l.location)} format('${l.format}')`).join(', ');\n                    rules.push(`@font-face { src: ${src}; font-family: ${asCSSPropertyValue(id)};${fontWeight}${fontStyle} font-display: block; }`);\n                }\n            }\n            return rules.join('\\n');\n        }\n    };\n}\nexport class UnthemedProductIconTheme {\n    getIcon(contribution) {\n        const iconRegistry = getIconRegistry();\n        let definition = contribution.defaults;\n        while (ThemeIcon.isThemeIcon(definition)) {\n            const c = iconRegistry.getIcon(definition.id);\n            if (!c) {\n                return undefined;\n            }\n            definition = c.defaults;\n        }\n        return definition;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}