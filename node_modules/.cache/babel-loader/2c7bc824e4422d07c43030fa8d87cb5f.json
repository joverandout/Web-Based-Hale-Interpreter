{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { toErrorMessage } from '../../../base/common/errorMessage.js';\nimport { isCancellationError } from '../../../base/common/errors.js';\nimport { matchesContiguousSubString, matchesPrefix, matchesWords, or } from '../../../base/common/filters.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { LRUCache } from '../../../base/common/map.js';\nimport Severity from '../../../base/common/severity.js';\nimport { withNullAsUndefined } from '../../../base/common/types.js';\nimport { localize } from '../../../nls.js';\nimport { ICommandService } from '../../commands/common/commands.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { IDialogService } from '../../dialogs/common/dialogs.js';\nimport { IInstantiationService } from '../../instantiation/common/instantiation.js';\nimport { IKeybindingService } from '../../keybinding/common/keybinding.js';\nimport { PickerQuickAccessProvider } from './pickerQuickAccess.js';\nimport { IStorageService } from '../../storage/common/storage.js';\nimport { ITelemetryService } from '../../telemetry/common/telemetry.js';\nlet AbstractCommandsQuickAccessProvider = class AbstractCommandsQuickAccessProvider extends PickerQuickAccessProvider {\n  constructor(options, instantiationService, keybindingService, commandService, telemetryService, dialogService) {\n    super(AbstractCommandsQuickAccessProvider.PREFIX, options);\n    this.instantiationService = instantiationService;\n    this.keybindingService = keybindingService;\n    this.commandService = commandService;\n    this.telemetryService = telemetryService;\n    this.dialogService = dialogService;\n    this.commandsHistory = this._register(this.instantiationService.createInstance(CommandsHistory));\n    this.options = options;\n  }\n\n  _getPicks(filter, disposables, token) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Ask subclass for all command picks\n      const allCommandPicks = yield this.getCommandPicks(disposables, token);\n\n      if (token.isCancellationRequested) {\n        return [];\n      } // Filter\n\n\n      const filteredCommandPicks = [];\n\n      for (const commandPick of allCommandPicks) {\n        const labelHighlights = withNullAsUndefined(AbstractCommandsQuickAccessProvider.WORD_FILTER(filter, commandPick.label));\n        const aliasHighlights = commandPick.commandAlias ? withNullAsUndefined(AbstractCommandsQuickAccessProvider.WORD_FILTER(filter, commandPick.commandAlias)) : undefined; // Add if matching in label or alias\n\n        if (labelHighlights || aliasHighlights) {\n          commandPick.highlights = {\n            label: labelHighlights,\n            detail: this.options.showAlias ? aliasHighlights : undefined\n          };\n          filteredCommandPicks.push(commandPick);\n        } // Also add if we have a 100% command ID match\n        else if (filter === commandPick.commandId) {\n          filteredCommandPicks.push(commandPick);\n        }\n      } // Add description to commands that have duplicate labels\n\n\n      const mapLabelToCommand = new Map();\n\n      for (const commandPick of filteredCommandPicks) {\n        const existingCommandForLabel = mapLabelToCommand.get(commandPick.label);\n\n        if (existingCommandForLabel) {\n          commandPick.description = commandPick.commandId;\n          existingCommandForLabel.description = existingCommandForLabel.commandId;\n        } else {\n          mapLabelToCommand.set(commandPick.label, commandPick);\n        }\n      } // Sort by MRU order and fallback to name otherwise\n\n\n      filteredCommandPicks.sort((commandPickA, commandPickB) => {\n        const commandACounter = this.commandsHistory.peek(commandPickA.commandId);\n        const commandBCounter = this.commandsHistory.peek(commandPickB.commandId);\n\n        if (commandACounter && commandBCounter) {\n          return commandACounter > commandBCounter ? -1 : 1; // use more recently used command before older\n        }\n\n        if (commandACounter) {\n          return -1; // first command was used, so it wins over the non used one\n        }\n\n        if (commandBCounter) {\n          return 1; // other command was used so it wins over the command\n        } // both commands were never used, so we sort by name\n\n\n        return commandPickA.label.localeCompare(commandPickB.label);\n      });\n      const commandPicks = [];\n      let addSeparator = false;\n\n      for (let i = 0; i < filteredCommandPicks.length; i++) {\n        const commandPick = filteredCommandPicks[i];\n        const keybinding = this.keybindingService.lookupKeybinding(commandPick.commandId);\n        const ariaLabel = keybinding ? localize('commandPickAriaLabelWithKeybinding', \"{0}, {1}\", commandPick.label, keybinding.getAriaLabel()) : commandPick.label; // Separator: recently used\n\n        if (i === 0 && this.commandsHistory.peek(commandPick.commandId)) {\n          commandPicks.push({\n            type: 'separator',\n            label: localize('recentlyUsed', \"recently used\")\n          });\n          addSeparator = true;\n        } // Separator: other commands\n\n\n        if (i !== 0 && addSeparator && !this.commandsHistory.peek(commandPick.commandId)) {\n          commandPicks.push({\n            type: 'separator',\n            label: localize('morecCommands', \"other commands\")\n          });\n          addSeparator = false; // only once\n        } // Command\n\n\n        commandPicks.push(Object.assign(Object.assign({}, commandPick), {\n          ariaLabel,\n          detail: this.options.showAlias && commandPick.commandAlias !== commandPick.label ? commandPick.commandAlias : undefined,\n          keybinding,\n          accept: () => __awaiter(this, void 0, void 0, function* () {\n            // Add to history\n            this.commandsHistory.push(commandPick.commandId); // Telementry\n\n            this.telemetryService.publicLog2('workbenchActionExecuted', {\n              id: commandPick.commandId,\n              from: 'quick open'\n            }); // Run\n\n            try {\n              yield this.commandService.executeCommand(commandPick.commandId);\n            } catch (error) {\n              if (!isCancellationError(error)) {\n                this.dialogService.show(Severity.Error, localize('canNotRun', \"Command '{0}' resulted in an error ({1})\", commandPick.label, toErrorMessage(error)));\n              }\n            }\n          })\n        }));\n      }\n\n      return commandPicks;\n    });\n  }\n\n};\nAbstractCommandsQuickAccessProvider.PREFIX = '>';\nAbstractCommandsQuickAccessProvider.WORD_FILTER = or(matchesPrefix, matchesWords, matchesContiguousSubString);\nAbstractCommandsQuickAccessProvider = __decorate([__param(1, IInstantiationService), __param(2, IKeybindingService), __param(3, ICommandService), __param(4, ITelemetryService), __param(5, IDialogService)], AbstractCommandsQuickAccessProvider);\nexport { AbstractCommandsQuickAccessProvider };\nlet CommandsHistory = class CommandsHistory extends Disposable {\n  constructor(storageService, configurationService) {\n    super();\n    this.storageService = storageService;\n    this.configurationService = configurationService;\n    this.configuredCommandsHistoryLength = 0;\n    this.updateConfiguration();\n    this.load();\n    this.registerListeners();\n  }\n\n  registerListeners() {\n    this._register(this.configurationService.onDidChangeConfiguration(() => this.updateConfiguration()));\n  }\n\n  updateConfiguration() {\n    this.configuredCommandsHistoryLength = CommandsHistory.getConfiguredCommandHistoryLength(this.configurationService);\n\n    if (CommandsHistory.cache && CommandsHistory.cache.limit !== this.configuredCommandsHistoryLength) {\n      CommandsHistory.cache.limit = this.configuredCommandsHistoryLength;\n      CommandsHistory.saveState(this.storageService);\n    }\n  }\n\n  load() {\n    const raw = this.storageService.get(CommandsHistory.PREF_KEY_CACHE, 0\n    /* GLOBAL */\n    );\n    let serializedCache;\n\n    if (raw) {\n      try {\n        serializedCache = JSON.parse(raw);\n      } catch (error) {// invalid data\n      }\n    }\n\n    const cache = CommandsHistory.cache = new LRUCache(this.configuredCommandsHistoryLength, 1);\n\n    if (serializedCache) {\n      let entries;\n\n      if (serializedCache.usesLRU) {\n        entries = serializedCache.entries;\n      } else {\n        entries = serializedCache.entries.sort((a, b) => a.value - b.value);\n      }\n\n      entries.forEach(entry => cache.set(entry.key, entry.value));\n    }\n\n    CommandsHistory.counter = this.storageService.getNumber(CommandsHistory.PREF_KEY_COUNTER, 0\n    /* GLOBAL */\n    , CommandsHistory.counter);\n  }\n\n  push(commandId) {\n    if (!CommandsHistory.cache) {\n      return;\n    }\n\n    CommandsHistory.cache.set(commandId, CommandsHistory.counter++); // set counter to command\n\n    CommandsHistory.saveState(this.storageService);\n  }\n\n  peek(commandId) {\n    var _a;\n\n    return (_a = CommandsHistory.cache) === null || _a === void 0 ? void 0 : _a.peek(commandId);\n  }\n\n  static saveState(storageService) {\n    if (!CommandsHistory.cache) {\n      return;\n    }\n\n    const serializedCache = {\n      usesLRU: true,\n      entries: []\n    };\n    CommandsHistory.cache.forEach((value, key) => serializedCache.entries.push({\n      key,\n      value\n    }));\n    storageService.store(CommandsHistory.PREF_KEY_CACHE, JSON.stringify(serializedCache), 0\n    /* GLOBAL */\n    , 0\n    /* USER */\n    );\n    storageService.store(CommandsHistory.PREF_KEY_COUNTER, CommandsHistory.counter, 0\n    /* GLOBAL */\n    , 0\n    /* USER */\n    );\n  }\n\n  static getConfiguredCommandHistoryLength(configurationService) {\n    var _a, _b;\n\n    const config = configurationService.getValue();\n    const configuredCommandHistoryLength = (_b = (_a = config.workbench) === null || _a === void 0 ? void 0 : _a.commandPalette) === null || _b === void 0 ? void 0 : _b.history;\n\n    if (typeof configuredCommandHistoryLength === 'number') {\n      return configuredCommandHistoryLength;\n    }\n\n    return CommandsHistory.DEFAULT_COMMANDS_HISTORY_LENGTH;\n  }\n\n};\nCommandsHistory.DEFAULT_COMMANDS_HISTORY_LENGTH = 50;\nCommandsHistory.PREF_KEY_CACHE = 'commandPalette.mru.cache';\nCommandsHistory.PREF_KEY_COUNTER = 'commandPalette.mru.counter';\nCommandsHistory.counter = 1;\nCommandsHistory = __decorate([__param(0, IStorageService), __param(1, IConfigurationService)], CommandsHistory);\nexport { CommandsHistory };","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/platform/quickinput/browser/commandsQuickAccess.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","toErrorMessage","isCancellationError","matchesContiguousSubString","matchesPrefix","matchesWords","or","Disposable","LRUCache","Severity","withNullAsUndefined","localize","ICommandService","IConfigurationService","IDialogService","IInstantiationService","IKeybindingService","PickerQuickAccessProvider","IStorageService","ITelemetryService","AbstractCommandsQuickAccessProvider","constructor","options","instantiationService","keybindingService","commandService","telemetryService","dialogService","PREFIX","commandsHistory","_register","createInstance","CommandsHistory","_getPicks","filter","disposables","token","allCommandPicks","getCommandPicks","isCancellationRequested","filteredCommandPicks","commandPick","labelHighlights","WORD_FILTER","label","aliasHighlights","commandAlias","undefined","highlights","detail","showAlias","push","commandId","mapLabelToCommand","Map","existingCommandForLabel","get","description","set","sort","commandPickA","commandPickB","commandACounter","peek","commandBCounter","localeCompare","commandPicks","addSeparator","keybinding","lookupKeybinding","ariaLabel","getAriaLabel","type","assign","accept","publicLog2","id","from","executeCommand","error","show","Error","storageService","configurationService","configuredCommandsHistoryLength","updateConfiguration","load","registerListeners","onDidChangeConfiguration","getConfiguredCommandHistoryLength","cache","limit","saveState","raw","PREF_KEY_CACHE","serializedCache","JSON","parse","entries","usesLRU","a","b","forEach","entry","counter","getNumber","PREF_KEY_COUNTER","_a","store","stringify","_b","config","getValue","configuredCommandHistoryLength","workbench","commandPalette","history","DEFAULT_COMMANDS_HISTORY_LENGTH"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { toErrorMessage } from '../../../base/common/errorMessage.js';\nimport { isCancellationError } from '../../../base/common/errors.js';\nimport { matchesContiguousSubString, matchesPrefix, matchesWords, or } from '../../../base/common/filters.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { LRUCache } from '../../../base/common/map.js';\nimport Severity from '../../../base/common/severity.js';\nimport { withNullAsUndefined } from '../../../base/common/types.js';\nimport { localize } from '../../../nls.js';\nimport { ICommandService } from '../../commands/common/commands.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { IDialogService } from '../../dialogs/common/dialogs.js';\nimport { IInstantiationService } from '../../instantiation/common/instantiation.js';\nimport { IKeybindingService } from '../../keybinding/common/keybinding.js';\nimport { PickerQuickAccessProvider } from './pickerQuickAccess.js';\nimport { IStorageService } from '../../storage/common/storage.js';\nimport { ITelemetryService } from '../../telemetry/common/telemetry.js';\nlet AbstractCommandsQuickAccessProvider = class AbstractCommandsQuickAccessProvider extends PickerQuickAccessProvider {\n    constructor(options, instantiationService, keybindingService, commandService, telemetryService, dialogService) {\n        super(AbstractCommandsQuickAccessProvider.PREFIX, options);\n        this.instantiationService = instantiationService;\n        this.keybindingService = keybindingService;\n        this.commandService = commandService;\n        this.telemetryService = telemetryService;\n        this.dialogService = dialogService;\n        this.commandsHistory = this._register(this.instantiationService.createInstance(CommandsHistory));\n        this.options = options;\n    }\n    _getPicks(filter, disposables, token) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Ask subclass for all command picks\n            const allCommandPicks = yield this.getCommandPicks(disposables, token);\n            if (token.isCancellationRequested) {\n                return [];\n            }\n            // Filter\n            const filteredCommandPicks = [];\n            for (const commandPick of allCommandPicks) {\n                const labelHighlights = withNullAsUndefined(AbstractCommandsQuickAccessProvider.WORD_FILTER(filter, commandPick.label));\n                const aliasHighlights = commandPick.commandAlias ? withNullAsUndefined(AbstractCommandsQuickAccessProvider.WORD_FILTER(filter, commandPick.commandAlias)) : undefined;\n                // Add if matching in label or alias\n                if (labelHighlights || aliasHighlights) {\n                    commandPick.highlights = {\n                        label: labelHighlights,\n                        detail: this.options.showAlias ? aliasHighlights : undefined\n                    };\n                    filteredCommandPicks.push(commandPick);\n                }\n                // Also add if we have a 100% command ID match\n                else if (filter === commandPick.commandId) {\n                    filteredCommandPicks.push(commandPick);\n                }\n            }\n            // Add description to commands that have duplicate labels\n            const mapLabelToCommand = new Map();\n            for (const commandPick of filteredCommandPicks) {\n                const existingCommandForLabel = mapLabelToCommand.get(commandPick.label);\n                if (existingCommandForLabel) {\n                    commandPick.description = commandPick.commandId;\n                    existingCommandForLabel.description = existingCommandForLabel.commandId;\n                }\n                else {\n                    mapLabelToCommand.set(commandPick.label, commandPick);\n                }\n            }\n            // Sort by MRU order and fallback to name otherwise\n            filteredCommandPicks.sort((commandPickA, commandPickB) => {\n                const commandACounter = this.commandsHistory.peek(commandPickA.commandId);\n                const commandBCounter = this.commandsHistory.peek(commandPickB.commandId);\n                if (commandACounter && commandBCounter) {\n                    return commandACounter > commandBCounter ? -1 : 1; // use more recently used command before older\n                }\n                if (commandACounter) {\n                    return -1; // first command was used, so it wins over the non used one\n                }\n                if (commandBCounter) {\n                    return 1; // other command was used so it wins over the command\n                }\n                // both commands were never used, so we sort by name\n                return commandPickA.label.localeCompare(commandPickB.label);\n            });\n            const commandPicks = [];\n            let addSeparator = false;\n            for (let i = 0; i < filteredCommandPicks.length; i++) {\n                const commandPick = filteredCommandPicks[i];\n                const keybinding = this.keybindingService.lookupKeybinding(commandPick.commandId);\n                const ariaLabel = keybinding ?\n                    localize('commandPickAriaLabelWithKeybinding', \"{0}, {1}\", commandPick.label, keybinding.getAriaLabel()) :\n                    commandPick.label;\n                // Separator: recently used\n                if (i === 0 && this.commandsHistory.peek(commandPick.commandId)) {\n                    commandPicks.push({ type: 'separator', label: localize('recentlyUsed', \"recently used\") });\n                    addSeparator = true;\n                }\n                // Separator: other commands\n                if (i !== 0 && addSeparator && !this.commandsHistory.peek(commandPick.commandId)) {\n                    commandPicks.push({ type: 'separator', label: localize('morecCommands', \"other commands\") });\n                    addSeparator = false; // only once\n                }\n                // Command\n                commandPicks.push(Object.assign(Object.assign({}, commandPick), { ariaLabel, detail: this.options.showAlias && commandPick.commandAlias !== commandPick.label ? commandPick.commandAlias : undefined, keybinding, accept: () => __awaiter(this, void 0, void 0, function* () {\n                        // Add to history\n                        this.commandsHistory.push(commandPick.commandId);\n                        // Telementry\n                        this.telemetryService.publicLog2('workbenchActionExecuted', {\n                            id: commandPick.commandId,\n                            from: 'quick open'\n                        });\n                        // Run\n                        try {\n                            yield this.commandService.executeCommand(commandPick.commandId);\n                        }\n                        catch (error) {\n                            if (!isCancellationError(error)) {\n                                this.dialogService.show(Severity.Error, localize('canNotRun', \"Command '{0}' resulted in an error ({1})\", commandPick.label, toErrorMessage(error)));\n                            }\n                        }\n                    }) }));\n            }\n            return commandPicks;\n        });\n    }\n};\nAbstractCommandsQuickAccessProvider.PREFIX = '>';\nAbstractCommandsQuickAccessProvider.WORD_FILTER = or(matchesPrefix, matchesWords, matchesContiguousSubString);\nAbstractCommandsQuickAccessProvider = __decorate([\n    __param(1, IInstantiationService),\n    __param(2, IKeybindingService),\n    __param(3, ICommandService),\n    __param(4, ITelemetryService),\n    __param(5, IDialogService)\n], AbstractCommandsQuickAccessProvider);\nexport { AbstractCommandsQuickAccessProvider };\nlet CommandsHistory = class CommandsHistory extends Disposable {\n    constructor(storageService, configurationService) {\n        super();\n        this.storageService = storageService;\n        this.configurationService = configurationService;\n        this.configuredCommandsHistoryLength = 0;\n        this.updateConfiguration();\n        this.load();\n        this.registerListeners();\n    }\n    registerListeners() {\n        this._register(this.configurationService.onDidChangeConfiguration(() => this.updateConfiguration()));\n    }\n    updateConfiguration() {\n        this.configuredCommandsHistoryLength = CommandsHistory.getConfiguredCommandHistoryLength(this.configurationService);\n        if (CommandsHistory.cache && CommandsHistory.cache.limit !== this.configuredCommandsHistoryLength) {\n            CommandsHistory.cache.limit = this.configuredCommandsHistoryLength;\n            CommandsHistory.saveState(this.storageService);\n        }\n    }\n    load() {\n        const raw = this.storageService.get(CommandsHistory.PREF_KEY_CACHE, 0 /* GLOBAL */);\n        let serializedCache;\n        if (raw) {\n            try {\n                serializedCache = JSON.parse(raw);\n            }\n            catch (error) {\n                // invalid data\n            }\n        }\n        const cache = CommandsHistory.cache = new LRUCache(this.configuredCommandsHistoryLength, 1);\n        if (serializedCache) {\n            let entries;\n            if (serializedCache.usesLRU) {\n                entries = serializedCache.entries;\n            }\n            else {\n                entries = serializedCache.entries.sort((a, b) => a.value - b.value);\n            }\n            entries.forEach(entry => cache.set(entry.key, entry.value));\n        }\n        CommandsHistory.counter = this.storageService.getNumber(CommandsHistory.PREF_KEY_COUNTER, 0 /* GLOBAL */, CommandsHistory.counter);\n    }\n    push(commandId) {\n        if (!CommandsHistory.cache) {\n            return;\n        }\n        CommandsHistory.cache.set(commandId, CommandsHistory.counter++); // set counter to command\n        CommandsHistory.saveState(this.storageService);\n    }\n    peek(commandId) {\n        var _a;\n        return (_a = CommandsHistory.cache) === null || _a === void 0 ? void 0 : _a.peek(commandId);\n    }\n    static saveState(storageService) {\n        if (!CommandsHistory.cache) {\n            return;\n        }\n        const serializedCache = { usesLRU: true, entries: [] };\n        CommandsHistory.cache.forEach((value, key) => serializedCache.entries.push({ key, value }));\n        storageService.store(CommandsHistory.PREF_KEY_CACHE, JSON.stringify(serializedCache), 0 /* GLOBAL */, 0 /* USER */);\n        storageService.store(CommandsHistory.PREF_KEY_COUNTER, CommandsHistory.counter, 0 /* GLOBAL */, 0 /* USER */);\n    }\n    static getConfiguredCommandHistoryLength(configurationService) {\n        var _a, _b;\n        const config = configurationService.getValue();\n        const configuredCommandHistoryLength = (_b = (_a = config.workbench) === null || _a === void 0 ? void 0 : _a.commandPalette) === null || _b === void 0 ? void 0 : _b.history;\n        if (typeof configuredCommandHistoryLength === 'number') {\n            return configuredCommandHistoryLength;\n        }\n        return CommandsHistory.DEFAULT_COMMANDS_HISTORY_LENGTH;\n    }\n};\nCommandsHistory.DEFAULT_COMMANDS_HISTORY_LENGTH = 50;\nCommandsHistory.PREF_KEY_CACHE = 'commandPalette.mru.cache';\nCommandsHistory.PREF_KEY_COUNTER = 'commandPalette.mru.counter';\nCommandsHistory.counter = 1;\nCommandsHistory = __decorate([\n    __param(0, IStorageService),\n    __param(1, IConfigurationService)\n], CommandsHistory);\nexport { CommandsHistory };\n"]},"metadata":{},"sourceType":"module"}