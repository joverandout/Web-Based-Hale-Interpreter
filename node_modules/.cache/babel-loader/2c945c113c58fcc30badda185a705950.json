{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { EditorAction, registerEditorAction } from '../../../browser/editorExtensions.js';\nimport { ReplaceCommand } from '../../../common/commands/replaceCommand.js';\nimport { MoveOperations } from '../../../common/cursor/cursorMoveOperations.js';\nimport { Range } from '../../../common/core/range.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport * as nls from '../../../../nls.js';\n\nclass TransposeLettersAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.transposeLetters',\n      label: nls.localize('transposeLetters.label', \"Transpose Letters\"),\n      alias: 'Transpose Letters',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.textInputFocus,\n        primary: 0,\n        mac: {\n          primary: 256\n          /* WinCtrl */\n          | 50\n          /* KeyT */\n\n        },\n        weight: 100\n        /* EditorContrib */\n\n      }\n    });\n  }\n\n  run(accessor, editor) {\n    if (!editor.hasModel()) {\n      return;\n    }\n\n    let model = editor.getModel();\n    let commands = [];\n    let selections = editor.getSelections();\n\n    for (let selection of selections) {\n      if (!selection.isEmpty()) {\n        continue;\n      }\n\n      let lineNumber = selection.startLineNumber;\n      let column = selection.startColumn;\n      let lastColumn = model.getLineMaxColumn(lineNumber);\n\n      if (lineNumber === 1 && (column === 1 || column === 2 && lastColumn === 2)) {\n        // at beginning of file, nothing to do\n        continue;\n      } // handle special case: when at end of line, transpose left two chars\n      // otherwise, transpose left and right chars\n\n\n      let endPosition = column === lastColumn ? selection.getPosition() : MoveOperations.rightPosition(model, selection.getPosition().lineNumber, selection.getPosition().column);\n      let middlePosition = MoveOperations.leftPosition(model, endPosition);\n      let beginPosition = MoveOperations.leftPosition(model, middlePosition);\n      let leftChar = model.getValueInRange(Range.fromPositions(beginPosition, middlePosition));\n      let rightChar = model.getValueInRange(Range.fromPositions(middlePosition, endPosition));\n      let replaceRange = Range.fromPositions(beginPosition, endPosition);\n      commands.push(new ReplaceCommand(replaceRange, rightChar + leftChar));\n    }\n\n    if (commands.length > 0) {\n      editor.pushUndoStop();\n      editor.executeCommands(this.id, commands);\n      editor.pushUndoStop();\n    }\n  }\n\n}\n\nregisterEditorAction(TransposeLettersAction);","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/contrib/caretOperations/browser/transpose.js"],"names":["EditorAction","registerEditorAction","ReplaceCommand","MoveOperations","Range","EditorContextKeys","nls","TransposeLettersAction","constructor","id","label","localize","alias","precondition","writable","kbOpts","kbExpr","textInputFocus","primary","mac","weight","run","accessor","editor","hasModel","model","getModel","commands","selections","getSelections","selection","isEmpty","lineNumber","startLineNumber","column","startColumn","lastColumn","getLineMaxColumn","endPosition","getPosition","rightPosition","middlePosition","leftPosition","beginPosition","leftChar","getValueInRange","fromPositions","rightChar","replaceRange","push","length","pushUndoStop","executeCommands"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { EditorAction, registerEditorAction } from '../../../browser/editorExtensions.js';\nimport { ReplaceCommand } from '../../../common/commands/replaceCommand.js';\nimport { MoveOperations } from '../../../common/cursor/cursorMoveOperations.js';\nimport { Range } from '../../../common/core/range.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport * as nls from '../../../../nls.js';\nclass TransposeLettersAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.transposeLetters',\n            label: nls.localize('transposeLetters.label', \"Transpose Letters\"),\n            alias: 'Transpose Letters',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.textInputFocus,\n                primary: 0,\n                mac: {\n                    primary: 256 /* WinCtrl */ | 50 /* KeyT */\n                },\n                weight: 100 /* EditorContrib */\n            }\n        });\n    }\n    run(accessor, editor) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        let model = editor.getModel();\n        let commands = [];\n        let selections = editor.getSelections();\n        for (let selection of selections) {\n            if (!selection.isEmpty()) {\n                continue;\n            }\n            let lineNumber = selection.startLineNumber;\n            let column = selection.startColumn;\n            let lastColumn = model.getLineMaxColumn(lineNumber);\n            if (lineNumber === 1 && (column === 1 || (column === 2 && lastColumn === 2))) {\n                // at beginning of file, nothing to do\n                continue;\n            }\n            // handle special case: when at end of line, transpose left two chars\n            // otherwise, transpose left and right chars\n            let endPosition = (column === lastColumn) ?\n                selection.getPosition() :\n                MoveOperations.rightPosition(model, selection.getPosition().lineNumber, selection.getPosition().column);\n            let middlePosition = MoveOperations.leftPosition(model, endPosition);\n            let beginPosition = MoveOperations.leftPosition(model, middlePosition);\n            let leftChar = model.getValueInRange(Range.fromPositions(beginPosition, middlePosition));\n            let rightChar = model.getValueInRange(Range.fromPositions(middlePosition, endPosition));\n            let replaceRange = Range.fromPositions(beginPosition, endPosition);\n            commands.push(new ReplaceCommand(replaceRange, rightChar + leftChar));\n        }\n        if (commands.length > 0) {\n            editor.pushUndoStop();\n            editor.executeCommands(this.id, commands);\n            editor.pushUndoStop();\n        }\n    }\n}\nregisterEditorAction(TransposeLettersAction);\n"]},"metadata":{},"sourceType":"module"}