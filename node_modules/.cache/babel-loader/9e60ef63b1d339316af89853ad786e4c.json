{"ast":null,"code":"import * as React from 'react';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport SceneView from './SceneView';\nimport useNavigationCache from './useNavigationCache';\nimport useRouteCache from './useRouteCache';\n/**\n * Hook to create descriptor objects for the child routes.\n *\n * A descriptor object provides 3 things:\n * - Helper method to render a screen\n * - Options specified by the screen for the navigator\n * - Navigation object intended for the route\n */\n\nexport default function useDescriptors(_ref) {\n  let {\n    state,\n    screens,\n    navigation,\n    screenOptions,\n    defaultScreenOptions,\n    onAction,\n    getState,\n    setState,\n    addListener,\n    addKeyedListener,\n    onRouteFocus,\n    router,\n    emitter\n  } = _ref;\n  const [options, setOptions] = React.useState({});\n  const {\n    onDispatchAction,\n    onOptionsChange,\n    stackRef\n  } = React.useContext(NavigationBuilderContext);\n  const context = React.useMemo(() => ({\n    navigation,\n    onAction,\n    addListener,\n    addKeyedListener,\n    onRouteFocus,\n    onDispatchAction,\n    onOptionsChange,\n    stackRef\n  }), [navigation, onAction, addListener, addKeyedListener, onRouteFocus, onDispatchAction, onOptionsChange, stackRef]);\n  const navigations = useNavigationCache({\n    state,\n    getState,\n    navigation,\n    setOptions,\n    router,\n    emitter\n  });\n  const routes = useRouteCache(state.routes);\n  return routes.reduce((acc, route, i) => {\n    const config = screens[route.name];\n    const screen = config.props;\n    const navigation = navigations[route.key];\n    const optionsList = [// The default `screenOptions` passed to the navigator\n    screenOptions, // The `screenOptions` props passed to `Group` elements\n    ...(config.options ? config.options.filter(Boolean) : []), // The `options` prop passed to `Screen` elements,\n    screen.options, // The options set via `navigation.setOptions`\n    options[route.key]];\n    const customOptions = optionsList.reduce((acc, curr) => Object.assign(acc, typeof curr !== 'function' ? curr : curr({\n      route,\n      navigation\n    })), {});\n    const mergedOptions = { ...(typeof defaultScreenOptions === 'function' ? // @ts-expect-error: ts gives incorrect error here\n      defaultScreenOptions({\n        route,\n        navigation,\n        options: customOptions\n      }) : defaultScreenOptions),\n      ...customOptions\n    };\n\n    const clearOptions = () => setOptions(o => {\n      if (route.key in o) {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const {\n          [route.key]: _,\n          ...rest\n        } = o;\n        return rest;\n      }\n\n      return o;\n    });\n\n    acc[route.key] = {\n      route,\n      // @ts-expect-error: it's missing action helpers, fix later\n      navigation,\n\n      render() {\n        return /*#__PURE__*/React.createElement(NavigationBuilderContext.Provider, {\n          key: route.key,\n          value: context\n        }, /*#__PURE__*/React.createElement(NavigationContext.Provider, {\n          value: navigation\n        }, /*#__PURE__*/React.createElement(NavigationRouteContext.Provider, {\n          value: route\n        }, /*#__PURE__*/React.createElement(SceneView, {\n          navigation: navigation,\n          route: route,\n          screen: screen,\n          routeState: state.routes[i].state,\n          getState: getState,\n          setState: setState,\n          options: mergedOptions,\n          clearOptions: clearOptions\n        }))));\n      },\n\n      options: mergedOptions\n    };\n    return acc;\n  }, {});\n}","map":{"version":3,"sources":["useDescriptors.tsx"],"names":["emitter","React","stackRef","context","navigations","useNavigationCache","routes","useRouteCache","state","config","screens","route","screen","navigation","optionsList","options","customOptions","curr","mergedOptions","defaultScreenOptions","clearOptions","setOptions","o","rest","acc","render"],"mappings":"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","sourcesContent":["import type {\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext, {\n  AddKeyedListener,\n  AddListener,\n} from './NavigationBuilderContext';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport SceneView from './SceneView';\nimport type {\n  Descriptor,\n  EventMapBase,\n  NavigationHelpers,\n  NavigationProp,\n  RouteConfig,\n  RouteProp,\n} from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\nimport useNavigationCache from './useNavigationCache';\nimport useRouteCache from './useRouteCache';\n\nexport type ScreenConfigWithParent<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n> = {\n  keys: (string | undefined)[];\n  options: (ScreenOptionsOrCallback<ScreenOptions> | undefined)[] | undefined;\n  props: RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>;\n};\n\ntype ScreenOptionsOrCallback<ScreenOptions extends {}> =\n  | ScreenOptions\n  | ((props: {\n      route: RouteProp<ParamListBase, string>;\n      navigation: any;\n    }) => ScreenOptions);\n\ntype Options<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n> = {\n  state: State;\n  screens: Record<\n    string,\n    ScreenConfigWithParent<State, ScreenOptions, EventMap>\n  >;\n  navigation: NavigationHelpers<ParamListBase>;\n  screenOptions?: ScreenOptionsOrCallback<ScreenOptions>;\n  defaultScreenOptions?:\n    | ScreenOptions\n    | ((props: {\n        route: RouteProp<ParamListBase>;\n        navigation: any;\n        options: ScreenOptions;\n      }) => ScreenOptions);\n  onAction: (action: NavigationAction) => boolean;\n  getState: () => State;\n  setState: (state: State) => void;\n  addListener: AddListener;\n  addKeyedListener: AddKeyedListener;\n  onRouteFocus: (key: string) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<EventMap>;\n};\n\n/**\n * Hook to create descriptor objects for the child routes.\n *\n * A descriptor object provides 3 things:\n * - Helper method to render a screen\n * - Options specified by the screen for the navigator\n * - Navigation object intended for the route\n */\nexport default function useDescriptors<\n  State extends NavigationState,\n  ActionHelpers extends Record<string, () => void>,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>({\n  state,\n  screens,\n  navigation,\n  screenOptions,\n  defaultScreenOptions,\n  onAction,\n  getState,\n  setState,\n  addListener,\n  addKeyedListener,\n  onRouteFocus,\n  router,\n  emitter,\n}: Options<State, ScreenOptions, EventMap>) {\n  const [options, setOptions] = React.useState<Record<string, object>>({});\n  const { onDispatchAction, onOptionsChange, stackRef } = React.useContext(\n    NavigationBuilderContext\n  );\n\n  const context = React.useMemo(\n    () => ({\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n      stackRef,\n    }),\n    [\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n      stackRef,\n    ]\n  );\n\n  const navigations = useNavigationCache<State, ScreenOptions, EventMap>({\n    state,\n    getState,\n    navigation,\n    setOptions,\n    router,\n    emitter,\n  });\n\n  const routes = useRouteCache(state.routes);\n\n  return routes.reduce<\n    Record<\n      string,\n      Descriptor<\n        ScreenOptions,\n        NavigationProp<ParamListBase, string, State, ScreenOptions, EventMap> &\n          ActionHelpers,\n        RouteProp<ParamListBase>\n      >\n    >\n  >((acc, route, i) => {\n    const config = screens[route.name];\n    const screen = config.props;\n    const navigation = navigations[route.key];\n\n    const optionsList = [\n      // The default `screenOptions` passed to the navigator\n      screenOptions,\n      // The `screenOptions` props passed to `Group` elements\n      ...((config.options\n        ? config.options.filter(Boolean)\n        : []) as ScreenOptionsOrCallback<ScreenOptions>[]),\n      // The `options` prop passed to `Screen` elements,\n      screen.options,\n      // The options set via `navigation.setOptions`\n      options[route.key],\n    ];\n\n    const customOptions = optionsList.reduce<ScreenOptions>(\n      (acc, curr) =>\n        Object.assign(\n          acc,\n          typeof curr !== 'function' ? curr : curr({ route, navigation })\n        ),\n      {} as ScreenOptions\n    );\n\n    const mergedOptions = {\n      ...(typeof defaultScreenOptions === 'function'\n        ? // @ts-expect-error: ts gives incorrect error here\n          defaultScreenOptions({\n            route,\n            navigation,\n            options: customOptions,\n          })\n        : defaultScreenOptions),\n      ...customOptions,\n    };\n\n    const clearOptions = () =>\n      setOptions((o) => {\n        if (route.key in o) {\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const { [route.key]: _, ...rest } = o;\n          return rest;\n        }\n\n        return o;\n      });\n\n    acc[route.key] = {\n      route,\n      // @ts-expect-error: it's missing action helpers, fix later\n      navigation,\n      render() {\n        return (\n          <NavigationBuilderContext.Provider key={route.key} value={context}>\n            <NavigationContext.Provider value={navigation}>\n              <NavigationRouteContext.Provider value={route}>\n                <SceneView\n                  navigation={navigation}\n                  route={route}\n                  screen={screen}\n                  routeState={state.routes[i].state}\n                  getState={getState}\n                  setState={setState}\n                  options={mergedOptions}\n                  clearOptions={clearOptions}\n                />\n              </NavigationRouteContext.Provider>\n            </NavigationContext.Provider>\n          </NavigationBuilderContext.Provider>\n        );\n      },\n      options: mergedOptions as ScreenOptions,\n    };\n\n    return acc;\n  }, {});\n}\n"]},"metadata":{},"sourceType":"module"}