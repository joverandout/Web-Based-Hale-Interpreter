{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class CodeActionKind {\n  constructor(value) {\n    this.value = value;\n  }\n\n  equals(other) {\n    return this.value === other.value;\n  }\n\n  contains(other) {\n    return this.equals(other) || this.value === '' || other.value.startsWith(this.value + CodeActionKind.sep);\n  }\n\n  intersects(other) {\n    return this.contains(other) || other.contains(this);\n  }\n\n  append(part) {\n    return new CodeActionKind(this.value + CodeActionKind.sep + part);\n  }\n\n}\nCodeActionKind.sep = '.';\nCodeActionKind.None = new CodeActionKind('@@none@@'); // Special code action that contains nothing\n\nCodeActionKind.Empty = new CodeActionKind('');\nCodeActionKind.QuickFix = new CodeActionKind('quickfix');\nCodeActionKind.Refactor = new CodeActionKind('refactor');\nCodeActionKind.Source = new CodeActionKind('source');\nCodeActionKind.SourceOrganizeImports = CodeActionKind.Source.append('organizeImports');\nCodeActionKind.SourceFixAll = CodeActionKind.Source.append('fixAll');\nexport function mayIncludeActionsOfKind(filter, providedKind) {\n  // A provided kind may be a subset or superset of our filtered kind.\n  if (filter.include && !filter.include.intersects(providedKind)) {\n    return false;\n  }\n\n  if (filter.excludes) {\n    if (filter.excludes.some(exclude => excludesAction(providedKind, exclude, filter.include))) {\n      return false;\n    }\n  } // Don't return source actions unless they are explicitly requested\n\n\n  if (!filter.includeSourceActions && CodeActionKind.Source.contains(providedKind)) {\n    return false;\n  }\n\n  return true;\n}\nexport function filtersAction(filter, action) {\n  const actionKind = action.kind ? new CodeActionKind(action.kind) : undefined; // Filter out actions by kind\n\n  if (filter.include) {\n    if (!actionKind || !filter.include.contains(actionKind)) {\n      return false;\n    }\n  }\n\n  if (filter.excludes) {\n    if (actionKind && filter.excludes.some(exclude => excludesAction(actionKind, exclude, filter.include))) {\n      return false;\n    }\n  } // Don't return source actions unless they are explicitly requested\n\n\n  if (!filter.includeSourceActions) {\n    if (actionKind && CodeActionKind.Source.contains(actionKind)) {\n      return false;\n    }\n  }\n\n  if (filter.onlyIncludePreferredActions) {\n    if (!action.isPreferred) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction excludesAction(providedKind, exclude, include) {\n  if (!exclude.contains(providedKind)) {\n    return false;\n  }\n\n  if (include && exclude.contains(include)) {\n    // The include is more specific, don't filter out\n    return false;\n  }\n\n  return true;\n}\n\nexport class CodeActionCommandArgs {\n  constructor(kind, apply, preferred) {\n    this.kind = kind;\n    this.apply = apply;\n    this.preferred = preferred;\n  }\n\n  static fromUser(arg, defaults) {\n    if (!arg || typeof arg !== 'object') {\n      return new CodeActionCommandArgs(defaults.kind, defaults.apply, false);\n    }\n\n    return new CodeActionCommandArgs(CodeActionCommandArgs.getKindFromUser(arg, defaults.kind), CodeActionCommandArgs.getApplyFromUser(arg, defaults.apply), CodeActionCommandArgs.getPreferredUser(arg));\n  }\n\n  static getApplyFromUser(arg, defaultAutoApply) {\n    switch (typeof arg.apply === 'string' ? arg.apply.toLowerCase() : '') {\n      case 'first':\n        return \"first\"\n        /* First */\n        ;\n\n      case 'never':\n        return \"never\"\n        /* Never */\n        ;\n\n      case 'ifsingle':\n        return \"ifSingle\"\n        /* IfSingle */\n        ;\n\n      default:\n        return defaultAutoApply;\n    }\n  }\n\n  static getKindFromUser(arg, defaultKind) {\n    return typeof arg.kind === 'string' ? new CodeActionKind(arg.kind) : defaultKind;\n  }\n\n  static getPreferredUser(arg) {\n    return typeof arg.preferred === 'boolean' ? arg.preferred : false;\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/contrib/codeAction/browser/types.js"],"names":["CodeActionKind","constructor","value","equals","other","contains","startsWith","sep","intersects","append","part","None","Empty","QuickFix","Refactor","Source","SourceOrganizeImports","SourceFixAll","mayIncludeActionsOfKind","filter","providedKind","include","excludes","some","exclude","excludesAction","includeSourceActions","filtersAction","action","actionKind","kind","undefined","onlyIncludePreferredActions","isPreferred","CodeActionCommandArgs","apply","preferred","fromUser","arg","defaults","getKindFromUser","getApplyFromUser","getPreferredUser","defaultAutoApply","toLowerCase","defaultKind"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class CodeActionKind {\n    constructor(value) {\n        this.value = value;\n    }\n    equals(other) {\n        return this.value === other.value;\n    }\n    contains(other) {\n        return this.equals(other) || this.value === '' || other.value.startsWith(this.value + CodeActionKind.sep);\n    }\n    intersects(other) {\n        return this.contains(other) || other.contains(this);\n    }\n    append(part) {\n        return new CodeActionKind(this.value + CodeActionKind.sep + part);\n    }\n}\nCodeActionKind.sep = '.';\nCodeActionKind.None = new CodeActionKind('@@none@@'); // Special code action that contains nothing\nCodeActionKind.Empty = new CodeActionKind('');\nCodeActionKind.QuickFix = new CodeActionKind('quickfix');\nCodeActionKind.Refactor = new CodeActionKind('refactor');\nCodeActionKind.Source = new CodeActionKind('source');\nCodeActionKind.SourceOrganizeImports = CodeActionKind.Source.append('organizeImports');\nCodeActionKind.SourceFixAll = CodeActionKind.Source.append('fixAll');\nexport function mayIncludeActionsOfKind(filter, providedKind) {\n    // A provided kind may be a subset or superset of our filtered kind.\n    if (filter.include && !filter.include.intersects(providedKind)) {\n        return false;\n    }\n    if (filter.excludes) {\n        if (filter.excludes.some(exclude => excludesAction(providedKind, exclude, filter.include))) {\n            return false;\n        }\n    }\n    // Don't return source actions unless they are explicitly requested\n    if (!filter.includeSourceActions && CodeActionKind.Source.contains(providedKind)) {\n        return false;\n    }\n    return true;\n}\nexport function filtersAction(filter, action) {\n    const actionKind = action.kind ? new CodeActionKind(action.kind) : undefined;\n    // Filter out actions by kind\n    if (filter.include) {\n        if (!actionKind || !filter.include.contains(actionKind)) {\n            return false;\n        }\n    }\n    if (filter.excludes) {\n        if (actionKind && filter.excludes.some(exclude => excludesAction(actionKind, exclude, filter.include))) {\n            return false;\n        }\n    }\n    // Don't return source actions unless they are explicitly requested\n    if (!filter.includeSourceActions) {\n        if (actionKind && CodeActionKind.Source.contains(actionKind)) {\n            return false;\n        }\n    }\n    if (filter.onlyIncludePreferredActions) {\n        if (!action.isPreferred) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction excludesAction(providedKind, exclude, include) {\n    if (!exclude.contains(providedKind)) {\n        return false;\n    }\n    if (include && exclude.contains(include)) {\n        // The include is more specific, don't filter out\n        return false;\n    }\n    return true;\n}\nexport class CodeActionCommandArgs {\n    constructor(kind, apply, preferred) {\n        this.kind = kind;\n        this.apply = apply;\n        this.preferred = preferred;\n    }\n    static fromUser(arg, defaults) {\n        if (!arg || typeof arg !== 'object') {\n            return new CodeActionCommandArgs(defaults.kind, defaults.apply, false);\n        }\n        return new CodeActionCommandArgs(CodeActionCommandArgs.getKindFromUser(arg, defaults.kind), CodeActionCommandArgs.getApplyFromUser(arg, defaults.apply), CodeActionCommandArgs.getPreferredUser(arg));\n    }\n    static getApplyFromUser(arg, defaultAutoApply) {\n        switch (typeof arg.apply === 'string' ? arg.apply.toLowerCase() : '') {\n            case 'first': return \"first\" /* First */;\n            case 'never': return \"never\" /* Never */;\n            case 'ifsingle': return \"ifSingle\" /* IfSingle */;\n            default: return defaultAutoApply;\n        }\n    }\n    static getKindFromUser(arg, defaultKind) {\n        return typeof arg.kind === 'string'\n            ? new CodeActionKind(arg.kind)\n            : defaultKind;\n    }\n    static getPreferredUser(arg) {\n        return typeof arg.preferred === 'boolean'\n            ? arg.preferred\n            : false;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}