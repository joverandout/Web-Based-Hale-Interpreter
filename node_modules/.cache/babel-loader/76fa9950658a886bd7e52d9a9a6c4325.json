{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/**\n * An event describing that a model has been reset to a new value.\n * @internal\n */\nexport class ModelRawFlush {\n  constructor() {\n    this.changeType = 1\n    /* Flush */\n    ;\n  }\n\n}\n/**\n * Represents text injected on a line\n * @internal\n */\n\nexport class LineInjectedText {\n  constructor(ownerId, lineNumber, column, options, order) {\n    this.ownerId = ownerId;\n    this.lineNumber = lineNumber;\n    this.column = column;\n    this.options = options;\n    this.order = order;\n  }\n\n  static applyInjectedText(lineText, injectedTexts) {\n    if (!injectedTexts || injectedTexts.length === 0) {\n      return lineText;\n    }\n\n    let result = '';\n    let lastOriginalOffset = 0;\n\n    for (const injectedText of injectedTexts) {\n      result += lineText.substring(lastOriginalOffset, injectedText.column - 1);\n      lastOriginalOffset = injectedText.column - 1;\n      result += injectedText.options.content;\n    }\n\n    result += lineText.substring(lastOriginalOffset);\n    return result;\n  }\n\n  static fromDecorations(decorations) {\n    const result = [];\n\n    for (const decoration of decorations) {\n      if (decoration.options.before && decoration.options.before.content.length > 0) {\n        result.push(new LineInjectedText(decoration.ownerId, decoration.range.startLineNumber, decoration.range.startColumn, decoration.options.before, 0));\n      }\n\n      if (decoration.options.after && decoration.options.after.content.length > 0) {\n        result.push(new LineInjectedText(decoration.ownerId, decoration.range.endLineNumber, decoration.range.endColumn, decoration.options.after, 1));\n      }\n    }\n\n    result.sort((a, b) => {\n      if (a.lineNumber === b.lineNumber) {\n        if (a.column === b.column) {\n          return a.order - b.order;\n        }\n\n        return a.column - b.column;\n      }\n\n      return a.lineNumber - b.lineNumber;\n    });\n    return result;\n  }\n\n}\n/**\n * An event describing that a line has changed in a model.\n * @internal\n */\n\nexport class ModelRawLineChanged {\n  constructor(lineNumber, detail, injectedText) {\n    this.changeType = 2\n    /* LineChanged */\n    ;\n    this.lineNumber = lineNumber;\n    this.detail = detail;\n    this.injectedText = injectedText;\n  }\n\n}\n/**\n * An event describing that line(s) have been deleted in a model.\n * @internal\n */\n\nexport class ModelRawLinesDeleted {\n  constructor(fromLineNumber, toLineNumber) {\n    this.changeType = 3\n    /* LinesDeleted */\n    ;\n    this.fromLineNumber = fromLineNumber;\n    this.toLineNumber = toLineNumber;\n  }\n\n}\n/**\n * An event describing that line(s) have been inserted in a model.\n * @internal\n */\n\nexport class ModelRawLinesInserted {\n  constructor(fromLineNumber, toLineNumber, detail, injectedTexts) {\n    this.changeType = 4\n    /* LinesInserted */\n    ;\n    this.injectedTexts = injectedTexts;\n    this.fromLineNumber = fromLineNumber;\n    this.toLineNumber = toLineNumber;\n    this.detail = detail;\n  }\n\n}\n/**\n * An event describing that a model has had its EOL changed.\n * @internal\n */\n\nexport class ModelRawEOLChanged {\n  constructor() {\n    this.changeType = 5\n    /* EOLChanged */\n    ;\n  }\n\n}\n/**\n * An event describing a change in the text of a model.\n * @internal\n */\n\nexport class ModelRawContentChangedEvent {\n  constructor(changes, versionId, isUndoing, isRedoing) {\n    this.changes = changes;\n    this.versionId = versionId;\n    this.isUndoing = isUndoing;\n    this.isRedoing = isRedoing;\n    this.resultingSelection = null;\n  }\n\n  containsEvent(type) {\n    for (let i = 0, len = this.changes.length; i < len; i++) {\n      const change = this.changes[i];\n\n      if (change.changeType === type) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  static merge(a, b) {\n    const changes = [].concat(a.changes).concat(b.changes);\n    const versionId = b.versionId;\n    const isUndoing = a.isUndoing || b.isUndoing;\n    const isRedoing = a.isRedoing || b.isRedoing;\n    return new ModelRawContentChangedEvent(changes, versionId, isUndoing, isRedoing);\n  }\n\n}\n/**\n * An event describing a change in injected text.\n * @internal\n */\n\nexport class ModelInjectedTextChangedEvent {\n  constructor(changes) {\n    this.changes = changes;\n  }\n\n}\n/**\n * @internal\n */\n\nexport class InternalModelContentChangeEvent {\n  constructor(rawContentChangedEvent, contentChangedEvent) {\n    this.rawContentChangedEvent = rawContentChangedEvent;\n    this.contentChangedEvent = contentChangedEvent;\n  }\n\n  merge(other) {\n    const rawContentChangedEvent = ModelRawContentChangedEvent.merge(this.rawContentChangedEvent, other.rawContentChangedEvent);\n\n    const contentChangedEvent = InternalModelContentChangeEvent._mergeChangeEvents(this.contentChangedEvent, other.contentChangedEvent);\n\n    return new InternalModelContentChangeEvent(rawContentChangedEvent, contentChangedEvent);\n  }\n\n  static _mergeChangeEvents(a, b) {\n    const changes = [].concat(a.changes).concat(b.changes);\n    const eol = b.eol;\n    const versionId = b.versionId;\n    const isUndoing = a.isUndoing || b.isUndoing;\n    const isRedoing = a.isRedoing || b.isRedoing;\n    const isFlush = a.isFlush || b.isFlush;\n    return {\n      changes: changes,\n      eol: eol,\n      versionId: versionId,\n      isUndoing: isUndoing,\n      isRedoing: isRedoing,\n      isFlush: isFlush\n    };\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/common/textModelEvents.js"],"names":["ModelRawFlush","constructor","changeType","LineInjectedText","ownerId","lineNumber","column","options","order","applyInjectedText","lineText","injectedTexts","length","result","lastOriginalOffset","injectedText","substring","content","fromDecorations","decorations","decoration","before","push","range","startLineNumber","startColumn","after","endLineNumber","endColumn","sort","a","b","ModelRawLineChanged","detail","ModelRawLinesDeleted","fromLineNumber","toLineNumber","ModelRawLinesInserted","ModelRawEOLChanged","ModelRawContentChangedEvent","changes","versionId","isUndoing","isRedoing","resultingSelection","containsEvent","type","i","len","change","merge","concat","ModelInjectedTextChangedEvent","InternalModelContentChangeEvent","rawContentChangedEvent","contentChangedEvent","other","_mergeChangeEvents","eol","isFlush"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * An event describing that a model has been reset to a new value.\n * @internal\n */\nexport class ModelRawFlush {\n    constructor() {\n        this.changeType = 1 /* Flush */;\n    }\n}\n/**\n * Represents text injected on a line\n * @internal\n */\nexport class LineInjectedText {\n    constructor(ownerId, lineNumber, column, options, order) {\n        this.ownerId = ownerId;\n        this.lineNumber = lineNumber;\n        this.column = column;\n        this.options = options;\n        this.order = order;\n    }\n    static applyInjectedText(lineText, injectedTexts) {\n        if (!injectedTexts || injectedTexts.length === 0) {\n            return lineText;\n        }\n        let result = '';\n        let lastOriginalOffset = 0;\n        for (const injectedText of injectedTexts) {\n            result += lineText.substring(lastOriginalOffset, injectedText.column - 1);\n            lastOriginalOffset = injectedText.column - 1;\n            result += injectedText.options.content;\n        }\n        result += lineText.substring(lastOriginalOffset);\n        return result;\n    }\n    static fromDecorations(decorations) {\n        const result = [];\n        for (const decoration of decorations) {\n            if (decoration.options.before && decoration.options.before.content.length > 0) {\n                result.push(new LineInjectedText(decoration.ownerId, decoration.range.startLineNumber, decoration.range.startColumn, decoration.options.before, 0));\n            }\n            if (decoration.options.after && decoration.options.after.content.length > 0) {\n                result.push(new LineInjectedText(decoration.ownerId, decoration.range.endLineNumber, decoration.range.endColumn, decoration.options.after, 1));\n            }\n        }\n        result.sort((a, b) => {\n            if (a.lineNumber === b.lineNumber) {\n                if (a.column === b.column) {\n                    return a.order - b.order;\n                }\n                return a.column - b.column;\n            }\n            return a.lineNumber - b.lineNumber;\n        });\n        return result;\n    }\n}\n/**\n * An event describing that a line has changed in a model.\n * @internal\n */\nexport class ModelRawLineChanged {\n    constructor(lineNumber, detail, injectedText) {\n        this.changeType = 2 /* LineChanged */;\n        this.lineNumber = lineNumber;\n        this.detail = detail;\n        this.injectedText = injectedText;\n    }\n}\n/**\n * An event describing that line(s) have been deleted in a model.\n * @internal\n */\nexport class ModelRawLinesDeleted {\n    constructor(fromLineNumber, toLineNumber) {\n        this.changeType = 3 /* LinesDeleted */;\n        this.fromLineNumber = fromLineNumber;\n        this.toLineNumber = toLineNumber;\n    }\n}\n/**\n * An event describing that line(s) have been inserted in a model.\n * @internal\n */\nexport class ModelRawLinesInserted {\n    constructor(fromLineNumber, toLineNumber, detail, injectedTexts) {\n        this.changeType = 4 /* LinesInserted */;\n        this.injectedTexts = injectedTexts;\n        this.fromLineNumber = fromLineNumber;\n        this.toLineNumber = toLineNumber;\n        this.detail = detail;\n    }\n}\n/**\n * An event describing that a model has had its EOL changed.\n * @internal\n */\nexport class ModelRawEOLChanged {\n    constructor() {\n        this.changeType = 5 /* EOLChanged */;\n    }\n}\n/**\n * An event describing a change in the text of a model.\n * @internal\n */\nexport class ModelRawContentChangedEvent {\n    constructor(changes, versionId, isUndoing, isRedoing) {\n        this.changes = changes;\n        this.versionId = versionId;\n        this.isUndoing = isUndoing;\n        this.isRedoing = isRedoing;\n        this.resultingSelection = null;\n    }\n    containsEvent(type) {\n        for (let i = 0, len = this.changes.length; i < len; i++) {\n            const change = this.changes[i];\n            if (change.changeType === type) {\n                return true;\n            }\n        }\n        return false;\n    }\n    static merge(a, b) {\n        const changes = [].concat(a.changes).concat(b.changes);\n        const versionId = b.versionId;\n        const isUndoing = (a.isUndoing || b.isUndoing);\n        const isRedoing = (a.isRedoing || b.isRedoing);\n        return new ModelRawContentChangedEvent(changes, versionId, isUndoing, isRedoing);\n    }\n}\n/**\n * An event describing a change in injected text.\n * @internal\n */\nexport class ModelInjectedTextChangedEvent {\n    constructor(changes) {\n        this.changes = changes;\n    }\n}\n/**\n * @internal\n */\nexport class InternalModelContentChangeEvent {\n    constructor(rawContentChangedEvent, contentChangedEvent) {\n        this.rawContentChangedEvent = rawContentChangedEvent;\n        this.contentChangedEvent = contentChangedEvent;\n    }\n    merge(other) {\n        const rawContentChangedEvent = ModelRawContentChangedEvent.merge(this.rawContentChangedEvent, other.rawContentChangedEvent);\n        const contentChangedEvent = InternalModelContentChangeEvent._mergeChangeEvents(this.contentChangedEvent, other.contentChangedEvent);\n        return new InternalModelContentChangeEvent(rawContentChangedEvent, contentChangedEvent);\n    }\n    static _mergeChangeEvents(a, b) {\n        const changes = [].concat(a.changes).concat(b.changes);\n        const eol = b.eol;\n        const versionId = b.versionId;\n        const isUndoing = (a.isUndoing || b.isUndoing);\n        const isRedoing = (a.isRedoing || b.isRedoing);\n        const isFlush = (a.isFlush || b.isFlush);\n        return {\n            changes: changes,\n            eol: eol,\n            versionId: versionId,\n            isUndoing: isUndoing,\n            isRedoing: isRedoing,\n            isFlush: isFlush\n        };\n    }\n}\n"]},"metadata":{},"sourceType":"module"}