{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../nls.js';\nexport class ModifierLabelProvider {\n  constructor(mac, windows, linux = windows) {\n    this.modifierLabels = [null]; // index 0 will never me accessed.\n\n    this.modifierLabels[2\n    /* Macintosh */\n    ] = mac;\n    this.modifierLabels[1\n    /* Windows */\n    ] = windows;\n    this.modifierLabels[3\n    /* Linux */\n    ] = linux;\n  }\n\n  toLabel(OS, parts, keyLabelProvider) {\n    if (parts.length === 0) {\n      return null;\n    }\n\n    const result = [];\n\n    for (let i = 0, len = parts.length; i < len; i++) {\n      const part = parts[i];\n      const keyLabel = keyLabelProvider(part);\n\n      if (keyLabel === null) {\n        // this keybinding cannot be expressed...\n        return null;\n      }\n\n      result[i] = _simpleAsString(part, keyLabel, this.modifierLabels[OS]);\n    }\n\n    return result.join(' ');\n  }\n\n}\n/**\n * A label provider that prints modifiers in a suitable format for displaying in the UI.\n */\n\nexport const UILabelProvider = new ModifierLabelProvider({\n  ctrlKey: '\\u2303',\n  shiftKey: '⇧',\n  altKey: '⌥',\n  metaKey: '⌘',\n  separator: ''\n}, {\n  ctrlKey: nls.localize({\n    key: 'ctrlKey',\n    comment: ['This is the short form for the Control key on the keyboard']\n  }, \"Ctrl\"),\n  shiftKey: nls.localize({\n    key: 'shiftKey',\n    comment: ['This is the short form for the Shift key on the keyboard']\n  }, \"Shift\"),\n  altKey: nls.localize({\n    key: 'altKey',\n    comment: ['This is the short form for the Alt key on the keyboard']\n  }, \"Alt\"),\n  metaKey: nls.localize({\n    key: 'windowsKey',\n    comment: ['This is the short form for the Windows key on the keyboard']\n  }, \"Windows\"),\n  separator: '+'\n}, {\n  ctrlKey: nls.localize({\n    key: 'ctrlKey',\n    comment: ['This is the short form for the Control key on the keyboard']\n  }, \"Ctrl\"),\n  shiftKey: nls.localize({\n    key: 'shiftKey',\n    comment: ['This is the short form for the Shift key on the keyboard']\n  }, \"Shift\"),\n  altKey: nls.localize({\n    key: 'altKey',\n    comment: ['This is the short form for the Alt key on the keyboard']\n  }, \"Alt\"),\n  metaKey: nls.localize({\n    key: 'superKey',\n    comment: ['This is the short form for the Super key on the keyboard']\n  }, \"Super\"),\n  separator: '+'\n});\n/**\n * A label provider that prints modifiers in a suitable format for ARIA.\n */\n\nexport const AriaLabelProvider = new ModifierLabelProvider({\n  ctrlKey: nls.localize({\n    key: 'ctrlKey.long',\n    comment: ['This is the long form for the Control key on the keyboard']\n  }, \"Control\"),\n  shiftKey: nls.localize({\n    key: 'shiftKey.long',\n    comment: ['This is the long form for the Shift key on the keyboard']\n  }, \"Shift\"),\n  altKey: nls.localize({\n    key: 'optKey.long',\n    comment: ['This is the long form for the Alt/Option key on the keyboard']\n  }, \"Option\"),\n  metaKey: nls.localize({\n    key: 'cmdKey.long',\n    comment: ['This is the long form for the Command key on the keyboard']\n  }, \"Command\"),\n  separator: '+'\n}, {\n  ctrlKey: nls.localize({\n    key: 'ctrlKey.long',\n    comment: ['This is the long form for the Control key on the keyboard']\n  }, \"Control\"),\n  shiftKey: nls.localize({\n    key: 'shiftKey.long',\n    comment: ['This is the long form for the Shift key on the keyboard']\n  }, \"Shift\"),\n  altKey: nls.localize({\n    key: 'altKey.long',\n    comment: ['This is the long form for the Alt key on the keyboard']\n  }, \"Alt\"),\n  metaKey: nls.localize({\n    key: 'windowsKey.long',\n    comment: ['This is the long form for the Windows key on the keyboard']\n  }, \"Windows\"),\n  separator: '+'\n}, {\n  ctrlKey: nls.localize({\n    key: 'ctrlKey.long',\n    comment: ['This is the long form for the Control key on the keyboard']\n  }, \"Control\"),\n  shiftKey: nls.localize({\n    key: 'shiftKey.long',\n    comment: ['This is the long form for the Shift key on the keyboard']\n  }, \"Shift\"),\n  altKey: nls.localize({\n    key: 'altKey.long',\n    comment: ['This is the long form for the Alt key on the keyboard']\n  }, \"Alt\"),\n  metaKey: nls.localize({\n    key: 'superKey.long',\n    comment: ['This is the long form for the Super key on the keyboard']\n  }, \"Super\"),\n  separator: '+'\n});\n/**\n * A label provider that prints modifiers in a suitable format for Electron Accelerators.\n * See https://github.com/electron/electron/blob/master/docs/api/accelerator.md\n */\n\nexport const ElectronAcceleratorLabelProvider = new ModifierLabelProvider({\n  ctrlKey: 'Ctrl',\n  shiftKey: 'Shift',\n  altKey: 'Alt',\n  metaKey: 'Cmd',\n  separator: '+'\n}, {\n  ctrlKey: 'Ctrl',\n  shiftKey: 'Shift',\n  altKey: 'Alt',\n  metaKey: 'Super',\n  separator: '+'\n});\n/**\n * A label provider that prints modifiers in a suitable format for user settings.\n */\n\nexport const UserSettingsLabelProvider = new ModifierLabelProvider({\n  ctrlKey: 'ctrl',\n  shiftKey: 'shift',\n  altKey: 'alt',\n  metaKey: 'cmd',\n  separator: '+'\n}, {\n  ctrlKey: 'ctrl',\n  shiftKey: 'shift',\n  altKey: 'alt',\n  metaKey: 'win',\n  separator: '+'\n}, {\n  ctrlKey: 'ctrl',\n  shiftKey: 'shift',\n  altKey: 'alt',\n  metaKey: 'meta',\n  separator: '+'\n});\n\nfunction _simpleAsString(modifiers, key, labels) {\n  if (key === null) {\n    return '';\n  }\n\n  const result = []; // translate modifier keys: Ctrl-Shift-Alt-Meta\n\n  if (modifiers.ctrlKey) {\n    result.push(labels.ctrlKey);\n  }\n\n  if (modifiers.shiftKey) {\n    result.push(labels.shiftKey);\n  }\n\n  if (modifiers.altKey) {\n    result.push(labels.altKey);\n  }\n\n  if (modifiers.metaKey) {\n    result.push(labels.metaKey);\n  } // the actual key\n\n\n  if (key !== '') {\n    result.push(key);\n  }\n\n  return result.join(labels.separator);\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/base/common/keybindingLabels.js"],"names":["nls","ModifierLabelProvider","constructor","mac","windows","linux","modifierLabels","toLabel","OS","parts","keyLabelProvider","length","result","i","len","part","keyLabel","_simpleAsString","join","UILabelProvider","ctrlKey","shiftKey","altKey","metaKey","separator","localize","key","comment","AriaLabelProvider","ElectronAcceleratorLabelProvider","UserSettingsLabelProvider","modifiers","labels","push"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../nls.js';\nexport class ModifierLabelProvider {\n    constructor(mac, windows, linux = windows) {\n        this.modifierLabels = [null]; // index 0 will never me accessed.\n        this.modifierLabels[2 /* Macintosh */] = mac;\n        this.modifierLabels[1 /* Windows */] = windows;\n        this.modifierLabels[3 /* Linux */] = linux;\n    }\n    toLabel(OS, parts, keyLabelProvider) {\n        if (parts.length === 0) {\n            return null;\n        }\n        const result = [];\n        for (let i = 0, len = parts.length; i < len; i++) {\n            const part = parts[i];\n            const keyLabel = keyLabelProvider(part);\n            if (keyLabel === null) {\n                // this keybinding cannot be expressed...\n                return null;\n            }\n            result[i] = _simpleAsString(part, keyLabel, this.modifierLabels[OS]);\n        }\n        return result.join(' ');\n    }\n}\n/**\n * A label provider that prints modifiers in a suitable format for displaying in the UI.\n */\nexport const UILabelProvider = new ModifierLabelProvider({\n    ctrlKey: '\\u2303',\n    shiftKey: '⇧',\n    altKey: '⌥',\n    metaKey: '⌘',\n    separator: '',\n}, {\n    ctrlKey: nls.localize({ key: 'ctrlKey', comment: ['This is the short form for the Control key on the keyboard'] }, \"Ctrl\"),\n    shiftKey: nls.localize({ key: 'shiftKey', comment: ['This is the short form for the Shift key on the keyboard'] }, \"Shift\"),\n    altKey: nls.localize({ key: 'altKey', comment: ['This is the short form for the Alt key on the keyboard'] }, \"Alt\"),\n    metaKey: nls.localize({ key: 'windowsKey', comment: ['This is the short form for the Windows key on the keyboard'] }, \"Windows\"),\n    separator: '+',\n}, {\n    ctrlKey: nls.localize({ key: 'ctrlKey', comment: ['This is the short form for the Control key on the keyboard'] }, \"Ctrl\"),\n    shiftKey: nls.localize({ key: 'shiftKey', comment: ['This is the short form for the Shift key on the keyboard'] }, \"Shift\"),\n    altKey: nls.localize({ key: 'altKey', comment: ['This is the short form for the Alt key on the keyboard'] }, \"Alt\"),\n    metaKey: nls.localize({ key: 'superKey', comment: ['This is the short form for the Super key on the keyboard'] }, \"Super\"),\n    separator: '+',\n});\n/**\n * A label provider that prints modifiers in a suitable format for ARIA.\n */\nexport const AriaLabelProvider = new ModifierLabelProvider({\n    ctrlKey: nls.localize({ key: 'ctrlKey.long', comment: ['This is the long form for the Control key on the keyboard'] }, \"Control\"),\n    shiftKey: nls.localize({ key: 'shiftKey.long', comment: ['This is the long form for the Shift key on the keyboard'] }, \"Shift\"),\n    altKey: nls.localize({ key: 'optKey.long', comment: ['This is the long form for the Alt/Option key on the keyboard'] }, \"Option\"),\n    metaKey: nls.localize({ key: 'cmdKey.long', comment: ['This is the long form for the Command key on the keyboard'] }, \"Command\"),\n    separator: '+',\n}, {\n    ctrlKey: nls.localize({ key: 'ctrlKey.long', comment: ['This is the long form for the Control key on the keyboard'] }, \"Control\"),\n    shiftKey: nls.localize({ key: 'shiftKey.long', comment: ['This is the long form for the Shift key on the keyboard'] }, \"Shift\"),\n    altKey: nls.localize({ key: 'altKey.long', comment: ['This is the long form for the Alt key on the keyboard'] }, \"Alt\"),\n    metaKey: nls.localize({ key: 'windowsKey.long', comment: ['This is the long form for the Windows key on the keyboard'] }, \"Windows\"),\n    separator: '+',\n}, {\n    ctrlKey: nls.localize({ key: 'ctrlKey.long', comment: ['This is the long form for the Control key on the keyboard'] }, \"Control\"),\n    shiftKey: nls.localize({ key: 'shiftKey.long', comment: ['This is the long form for the Shift key on the keyboard'] }, \"Shift\"),\n    altKey: nls.localize({ key: 'altKey.long', comment: ['This is the long form for the Alt key on the keyboard'] }, \"Alt\"),\n    metaKey: nls.localize({ key: 'superKey.long', comment: ['This is the long form for the Super key on the keyboard'] }, \"Super\"),\n    separator: '+',\n});\n/**\n * A label provider that prints modifiers in a suitable format for Electron Accelerators.\n * See https://github.com/electron/electron/blob/master/docs/api/accelerator.md\n */\nexport const ElectronAcceleratorLabelProvider = new ModifierLabelProvider({\n    ctrlKey: 'Ctrl',\n    shiftKey: 'Shift',\n    altKey: 'Alt',\n    metaKey: 'Cmd',\n    separator: '+',\n}, {\n    ctrlKey: 'Ctrl',\n    shiftKey: 'Shift',\n    altKey: 'Alt',\n    metaKey: 'Super',\n    separator: '+',\n});\n/**\n * A label provider that prints modifiers in a suitable format for user settings.\n */\nexport const UserSettingsLabelProvider = new ModifierLabelProvider({\n    ctrlKey: 'ctrl',\n    shiftKey: 'shift',\n    altKey: 'alt',\n    metaKey: 'cmd',\n    separator: '+',\n}, {\n    ctrlKey: 'ctrl',\n    shiftKey: 'shift',\n    altKey: 'alt',\n    metaKey: 'win',\n    separator: '+',\n}, {\n    ctrlKey: 'ctrl',\n    shiftKey: 'shift',\n    altKey: 'alt',\n    metaKey: 'meta',\n    separator: '+',\n});\nfunction _simpleAsString(modifiers, key, labels) {\n    if (key === null) {\n        return '';\n    }\n    const result = [];\n    // translate modifier keys: Ctrl-Shift-Alt-Meta\n    if (modifiers.ctrlKey) {\n        result.push(labels.ctrlKey);\n    }\n    if (modifiers.shiftKey) {\n        result.push(labels.shiftKey);\n    }\n    if (modifiers.altKey) {\n        result.push(labels.altKey);\n    }\n    if (modifiers.metaKey) {\n        result.push(labels.metaKey);\n    }\n    // the actual key\n    if (key !== '') {\n        result.push(key);\n    }\n    return result.join(labels.separator);\n}\n"]},"metadata":{},"sourceType":"module"}