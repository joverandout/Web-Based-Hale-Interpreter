{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { normalizeDriveLetter } from '../../../../base/common/labels.js';\nimport * as path from '../../../../base/common/path.js';\nimport { dirname } from '../../../../base/common/resources.js';\nimport { commonPrefixLength, getLeadingWhitespace, isFalsyOrWhitespace, splitLines } from '../../../../base/common/strings.js';\nimport { generateUuid } from '../../../../base/common/uuid.js';\nimport { LanguageConfigurationRegistry } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { Text } from './snippetParser.js';\nimport * as nls from '../../../../nls.js';\nimport { isSingleFolderWorkspaceIdentifier, toWorkspaceIdentifier, WORKSPACE_EXTENSION } from '../../../../platform/workspaces/common/workspaces.js';\nexport const KnownSnippetVariableNames = Object.freeze({\n  'CURRENT_YEAR': true,\n  'CURRENT_YEAR_SHORT': true,\n  'CURRENT_MONTH': true,\n  'CURRENT_DATE': true,\n  'CURRENT_HOUR': true,\n  'CURRENT_MINUTE': true,\n  'CURRENT_SECOND': true,\n  'CURRENT_DAY_NAME': true,\n  'CURRENT_DAY_NAME_SHORT': true,\n  'CURRENT_MONTH_NAME': true,\n  'CURRENT_MONTH_NAME_SHORT': true,\n  'CURRENT_SECONDS_UNIX': true,\n  'SELECTION': true,\n  'CLIPBOARD': true,\n  'TM_SELECTED_TEXT': true,\n  'TM_CURRENT_LINE': true,\n  'TM_CURRENT_WORD': true,\n  'TM_LINE_INDEX': true,\n  'TM_LINE_NUMBER': true,\n  'TM_FILENAME': true,\n  'TM_FILENAME_BASE': true,\n  'TM_DIRECTORY': true,\n  'TM_FILEPATH': true,\n  'RELATIVE_FILEPATH': true,\n  'BLOCK_COMMENT_START': true,\n  'BLOCK_COMMENT_END': true,\n  'LINE_COMMENT': true,\n  'WORKSPACE_NAME': true,\n  'WORKSPACE_FOLDER': true,\n  'RANDOM': true,\n  'RANDOM_HEX': true,\n  'UUID': true\n});\nexport class CompositeSnippetVariableResolver {\n  constructor(_delegates) {\n    this._delegates = _delegates; //\n  }\n\n  resolve(variable) {\n    for (const delegate of this._delegates) {\n      let value = delegate.resolve(variable);\n\n      if (value !== undefined) {\n        return value;\n      }\n    }\n\n    return undefined;\n  }\n\n}\nexport class SelectionBasedVariableResolver {\n  constructor(_model, _selection, _selectionIdx, _overtypingCapturer) {\n    this._model = _model;\n    this._selection = _selection;\n    this._selectionIdx = _selectionIdx;\n    this._overtypingCapturer = _overtypingCapturer; //\n  }\n\n  resolve(variable) {\n    const {\n      name\n    } = variable;\n\n    if (name === 'SELECTION' || name === 'TM_SELECTED_TEXT') {\n      let value = this._model.getValueInRange(this._selection) || undefined;\n      let isMultiline = this._selection.startLineNumber !== this._selection.endLineNumber; // If there was no selected text, try to get last overtyped text\n\n      if (!value && this._overtypingCapturer) {\n        const info = this._overtypingCapturer.getLastOvertypedInfo(this._selectionIdx);\n\n        if (info) {\n          value = info.value;\n          isMultiline = info.multiline;\n        }\n      }\n\n      if (value && isMultiline && variable.snippet) {\n        // Selection is a multiline string which we indentation we now\n        // need to adjust. We compare the indentation of this variable\n        // with the indentation at the editor position and add potential\n        // extra indentation to the value\n        const line = this._model.getLineContent(this._selection.startLineNumber);\n\n        const lineLeadingWhitespace = getLeadingWhitespace(line, 0, this._selection.startColumn - 1);\n        let varLeadingWhitespace = lineLeadingWhitespace;\n        variable.snippet.walk(marker => {\n          if (marker === variable) {\n            return false;\n          }\n\n          if (marker instanceof Text) {\n            varLeadingWhitespace = getLeadingWhitespace(splitLines(marker.value).pop());\n          }\n\n          return true;\n        });\n        const whitespaceCommonLength = commonPrefixLength(varLeadingWhitespace, lineLeadingWhitespace);\n        value = value.replace(/(\\r\\n|\\r|\\n)(.*)/g, (m, newline, rest) => `${newline}${varLeadingWhitespace.substr(whitespaceCommonLength)}${rest}`);\n      }\n\n      return value;\n    } else if (name === 'TM_CURRENT_LINE') {\n      return this._model.getLineContent(this._selection.positionLineNumber);\n    } else if (name === 'TM_CURRENT_WORD') {\n      const info = this._model.getWordAtPosition({\n        lineNumber: this._selection.positionLineNumber,\n        column: this._selection.positionColumn\n      });\n\n      return info && info.word || undefined;\n    } else if (name === 'TM_LINE_INDEX') {\n      return String(this._selection.positionLineNumber - 1);\n    } else if (name === 'TM_LINE_NUMBER') {\n      return String(this._selection.positionLineNumber);\n    }\n\n    return undefined;\n  }\n\n}\nexport class ModelBasedVariableResolver {\n  constructor(_labelService, _model) {\n    this._labelService = _labelService;\n    this._model = _model; //\n  }\n\n  resolve(variable) {\n    const {\n      name\n    } = variable;\n\n    if (name === 'TM_FILENAME') {\n      return path.basename(this._model.uri.fsPath);\n    } else if (name === 'TM_FILENAME_BASE') {\n      const name = path.basename(this._model.uri.fsPath);\n      const idx = name.lastIndexOf('.');\n\n      if (idx <= 0) {\n        return name;\n      } else {\n        return name.slice(0, idx);\n      }\n    } else if (name === 'TM_DIRECTORY') {\n      if (path.dirname(this._model.uri.fsPath) === '.') {\n        return '';\n      }\n\n      return this._labelService.getUriLabel(dirname(this._model.uri));\n    } else if (name === 'TM_FILEPATH') {\n      return this._labelService.getUriLabel(this._model.uri);\n    } else if (name === 'RELATIVE_FILEPATH') {\n      return this._labelService.getUriLabel(this._model.uri, {\n        relative: true,\n        noPrefix: true\n      });\n    }\n\n    return undefined;\n  }\n\n}\nexport class ClipboardBasedVariableResolver {\n  constructor(_readClipboardText, _selectionIdx, _selectionCount, _spread) {\n    this._readClipboardText = _readClipboardText;\n    this._selectionIdx = _selectionIdx;\n    this._selectionCount = _selectionCount;\n    this._spread = _spread; //\n  }\n\n  resolve(variable) {\n    if (variable.name !== 'CLIPBOARD') {\n      return undefined;\n    }\n\n    const clipboardText = this._readClipboardText();\n\n    if (!clipboardText) {\n      return undefined;\n    } // `spread` is assigning each cursor a line of the clipboard\n    // text whenever there the line count equals the cursor count\n    // and when enabled\n\n\n    if (this._spread) {\n      const lines = clipboardText.split(/\\r\\n|\\n|\\r/).filter(s => !isFalsyOrWhitespace(s));\n\n      if (lines.length === this._selectionCount) {\n        return lines[this._selectionIdx];\n      }\n    }\n\n    return clipboardText;\n  }\n\n}\nexport class CommentBasedVariableResolver {\n  constructor(_model, _selection) {\n    this._model = _model;\n    this._selection = _selection; //\n  }\n\n  resolve(variable) {\n    const {\n      name\n    } = variable;\n\n    const langId = this._model.getLanguageIdAtPosition(this._selection.selectionStartLineNumber, this._selection.selectionStartColumn);\n\n    const config = LanguageConfigurationRegistry.getComments(langId);\n\n    if (!config) {\n      return undefined;\n    }\n\n    if (name === 'LINE_COMMENT') {\n      return config.lineCommentToken || undefined;\n    } else if (name === 'BLOCK_COMMENT_START') {\n      return config.blockCommentStartToken || undefined;\n    } else if (name === 'BLOCK_COMMENT_END') {\n      return config.blockCommentEndToken || undefined;\n    }\n\n    return undefined;\n  }\n\n}\nexport class TimeBasedVariableResolver {\n  constructor() {\n    this._date = new Date();\n  }\n\n  resolve(variable) {\n    const {\n      name\n    } = variable;\n\n    if (name === 'CURRENT_YEAR') {\n      return String(this._date.getFullYear());\n    } else if (name === 'CURRENT_YEAR_SHORT') {\n      return String(this._date.getFullYear()).slice(-2);\n    } else if (name === 'CURRENT_MONTH') {\n      return String(this._date.getMonth().valueOf() + 1).padStart(2, '0');\n    } else if (name === 'CURRENT_DATE') {\n      return String(this._date.getDate().valueOf()).padStart(2, '0');\n    } else if (name === 'CURRENT_HOUR') {\n      return String(this._date.getHours().valueOf()).padStart(2, '0');\n    } else if (name === 'CURRENT_MINUTE') {\n      return String(this._date.getMinutes().valueOf()).padStart(2, '0');\n    } else if (name === 'CURRENT_SECOND') {\n      return String(this._date.getSeconds().valueOf()).padStart(2, '0');\n    } else if (name === 'CURRENT_DAY_NAME') {\n      return TimeBasedVariableResolver.dayNames[this._date.getDay()];\n    } else if (name === 'CURRENT_DAY_NAME_SHORT') {\n      return TimeBasedVariableResolver.dayNamesShort[this._date.getDay()];\n    } else if (name === 'CURRENT_MONTH_NAME') {\n      return TimeBasedVariableResolver.monthNames[this._date.getMonth()];\n    } else if (name === 'CURRENT_MONTH_NAME_SHORT') {\n      return TimeBasedVariableResolver.monthNamesShort[this._date.getMonth()];\n    } else if (name === 'CURRENT_SECONDS_UNIX') {\n      return String(Math.floor(this._date.getTime() / 1000));\n    }\n\n    return undefined;\n  }\n\n}\nTimeBasedVariableResolver.dayNames = [nls.localize('Sunday', \"Sunday\"), nls.localize('Monday', \"Monday\"), nls.localize('Tuesday', \"Tuesday\"), nls.localize('Wednesday', \"Wednesday\"), nls.localize('Thursday', \"Thursday\"), nls.localize('Friday', \"Friday\"), nls.localize('Saturday', \"Saturday\")];\nTimeBasedVariableResolver.dayNamesShort = [nls.localize('SundayShort', \"Sun\"), nls.localize('MondayShort', \"Mon\"), nls.localize('TuesdayShort', \"Tue\"), nls.localize('WednesdayShort', \"Wed\"), nls.localize('ThursdayShort', \"Thu\"), nls.localize('FridayShort', \"Fri\"), nls.localize('SaturdayShort', \"Sat\")];\nTimeBasedVariableResolver.monthNames = [nls.localize('January', \"January\"), nls.localize('February', \"February\"), nls.localize('March', \"March\"), nls.localize('April', \"April\"), nls.localize('May', \"May\"), nls.localize('June', \"June\"), nls.localize('July', \"July\"), nls.localize('August', \"August\"), nls.localize('September', \"September\"), nls.localize('October', \"October\"), nls.localize('November', \"November\"), nls.localize('December', \"December\")];\nTimeBasedVariableResolver.monthNamesShort = [nls.localize('JanuaryShort', \"Jan\"), nls.localize('FebruaryShort', \"Feb\"), nls.localize('MarchShort', \"Mar\"), nls.localize('AprilShort', \"Apr\"), nls.localize('MayShort', \"May\"), nls.localize('JuneShort', \"Jun\"), nls.localize('JulyShort', \"Jul\"), nls.localize('AugustShort', \"Aug\"), nls.localize('SeptemberShort', \"Sep\"), nls.localize('OctoberShort', \"Oct\"), nls.localize('NovemberShort', \"Nov\"), nls.localize('DecemberShort', \"Dec\")];\nexport class WorkspaceBasedVariableResolver {\n  constructor(_workspaceService) {\n    this._workspaceService = _workspaceService; //\n  }\n\n  resolve(variable) {\n    if (!this._workspaceService) {\n      return undefined;\n    }\n\n    const workspaceIdentifier = toWorkspaceIdentifier(this._workspaceService.getWorkspace());\n\n    if (!workspaceIdentifier) {\n      return undefined;\n    }\n\n    if (variable.name === 'WORKSPACE_NAME') {\n      return this._resolveWorkspaceName(workspaceIdentifier);\n    } else if (variable.name === 'WORKSPACE_FOLDER') {\n      return this._resoveWorkspacePath(workspaceIdentifier);\n    }\n\n    return undefined;\n  }\n\n  _resolveWorkspaceName(workspaceIdentifier) {\n    if (isSingleFolderWorkspaceIdentifier(workspaceIdentifier)) {\n      return path.basename(workspaceIdentifier.uri.path);\n    }\n\n    let filename = path.basename(workspaceIdentifier.configPath.path);\n\n    if (filename.endsWith(WORKSPACE_EXTENSION)) {\n      filename = filename.substr(0, filename.length - WORKSPACE_EXTENSION.length - 1);\n    }\n\n    return filename;\n  }\n\n  _resoveWorkspacePath(workspaceIdentifier) {\n    if (isSingleFolderWorkspaceIdentifier(workspaceIdentifier)) {\n      return normalizeDriveLetter(workspaceIdentifier.uri.fsPath);\n    }\n\n    let filename = path.basename(workspaceIdentifier.configPath.path);\n    let folderpath = workspaceIdentifier.configPath.fsPath;\n\n    if (folderpath.endsWith(filename)) {\n      folderpath = folderpath.substr(0, folderpath.length - filename.length - 1);\n    }\n\n    return folderpath ? normalizeDriveLetter(folderpath) : '/';\n  }\n\n}\nexport class RandomBasedVariableResolver {\n  resolve(variable) {\n    const {\n      name\n    } = variable;\n\n    if (name === 'RANDOM') {\n      return Math.random().toString().slice(-6);\n    } else if (name === 'RANDOM_HEX') {\n      return Math.random().toString(16).slice(-6);\n    } else if (name === 'UUID') {\n      return generateUuid();\n    }\n\n    return undefined;\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/contrib/snippet/browser/snippetVariables.js"],"names":["normalizeDriveLetter","path","dirname","commonPrefixLength","getLeadingWhitespace","isFalsyOrWhitespace","splitLines","generateUuid","LanguageConfigurationRegistry","Text","nls","isSingleFolderWorkspaceIdentifier","toWorkspaceIdentifier","WORKSPACE_EXTENSION","KnownSnippetVariableNames","Object","freeze","CompositeSnippetVariableResolver","constructor","_delegates","resolve","variable","delegate","value","undefined","SelectionBasedVariableResolver","_model","_selection","_selectionIdx","_overtypingCapturer","name","getValueInRange","isMultiline","startLineNumber","endLineNumber","info","getLastOvertypedInfo","multiline","snippet","line","getLineContent","lineLeadingWhitespace","startColumn","varLeadingWhitespace","walk","marker","pop","whitespaceCommonLength","replace","m","newline","rest","substr","positionLineNumber","getWordAtPosition","lineNumber","column","positionColumn","word","String","ModelBasedVariableResolver","_labelService","basename","uri","fsPath","idx","lastIndexOf","slice","getUriLabel","relative","noPrefix","ClipboardBasedVariableResolver","_readClipboardText","_selectionCount","_spread","clipboardText","lines","split","filter","s","length","CommentBasedVariableResolver","langId","getLanguageIdAtPosition","selectionStartLineNumber","selectionStartColumn","config","getComments","lineCommentToken","blockCommentStartToken","blockCommentEndToken","TimeBasedVariableResolver","_date","Date","getFullYear","getMonth","valueOf","padStart","getDate","getHours","getMinutes","getSeconds","dayNames","getDay","dayNamesShort","monthNames","monthNamesShort","Math","floor","getTime","localize","WorkspaceBasedVariableResolver","_workspaceService","workspaceIdentifier","getWorkspace","_resolveWorkspaceName","_resoveWorkspacePath","filename","configPath","endsWith","folderpath","RandomBasedVariableResolver","random","toString"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,oBAAT,QAAqC,mCAArC;AACA,OAAO,KAAKC,IAAZ,MAAsB,iCAAtB;AACA,SAASC,OAAT,QAAwB,sCAAxB;AACA,SAASC,kBAAT,EAA6BC,oBAA7B,EAAmDC,mBAAnD,EAAwEC,UAAxE,QAA0F,oCAA1F;AACA,SAASC,YAAT,QAA6B,iCAA7B;AACA,SAASC,6BAAT,QAA8C,4DAA9C;AACA,SAASC,IAAT,QAAqB,oBAArB;AACA,OAAO,KAAKC,GAAZ,MAAqB,oBAArB;AACA,SAASC,iCAAT,EAA4CC,qBAA5C,EAAmEC,mBAAnE,QAA8F,sDAA9F;AACA,OAAO,MAAMC,yBAAyB,GAAGC,MAAM,CAACC,MAAP,CAAc;AACnD,kBAAgB,IADmC;AAEnD,wBAAsB,IAF6B;AAGnD,mBAAiB,IAHkC;AAInD,kBAAgB,IAJmC;AAKnD,kBAAgB,IALmC;AAMnD,oBAAkB,IANiC;AAOnD,oBAAkB,IAPiC;AAQnD,sBAAoB,IAR+B;AASnD,4BAA0B,IATyB;AAUnD,wBAAsB,IAV6B;AAWnD,8BAA4B,IAXuB;AAYnD,0BAAwB,IAZ2B;AAanD,eAAa,IAbsC;AAcnD,eAAa,IAdsC;AAenD,sBAAoB,IAf+B;AAgBnD,qBAAmB,IAhBgC;AAiBnD,qBAAmB,IAjBgC;AAkBnD,mBAAiB,IAlBkC;AAmBnD,oBAAkB,IAnBiC;AAoBnD,iBAAe,IApBoC;AAqBnD,sBAAoB,IArB+B;AAsBnD,kBAAgB,IAtBmC;AAuBnD,iBAAe,IAvBoC;AAwBnD,uBAAqB,IAxB8B;AAyBnD,yBAAuB,IAzB4B;AA0BnD,uBAAqB,IA1B8B;AA2BnD,kBAAgB,IA3BmC;AA4BnD,oBAAkB,IA5BiC;AA6BnD,sBAAoB,IA7B+B;AA8BnD,YAAU,IA9ByC;AA+BnD,gBAAc,IA/BqC;AAgCnD,UAAQ;AAhC2C,CAAd,CAAlC;AAkCP,OAAO,MAAMC,gCAAN,CAAuC;AAC1CC,EAAAA,WAAW,CAACC,UAAD,EAAa;AACpB,SAAKA,UAAL,GAAkBA,UAAlB,CADoB,CAEpB;AACH;;AACDC,EAAAA,OAAO,CAACC,QAAD,EAAW;AACd,SAAK,MAAMC,QAAX,IAAuB,KAAKH,UAA5B,EAAwC;AACpC,UAAII,KAAK,GAAGD,QAAQ,CAACF,OAAT,CAAiBC,QAAjB,CAAZ;;AACA,UAAIE,KAAK,KAAKC,SAAd,EAAyB;AACrB,eAAOD,KAAP;AACH;AACJ;;AACD,WAAOC,SAAP;AACH;;AAbyC;AAe9C,OAAO,MAAMC,8BAAN,CAAqC;AACxCP,EAAAA,WAAW,CAACQ,MAAD,EAASC,UAAT,EAAqBC,aAArB,EAAoCC,mBAApC,EAAyD;AAChE,SAAKH,MAAL,GAAcA,MAAd;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,aAAL,GAAqBA,aAArB;AACA,SAAKC,mBAAL,GAA2BA,mBAA3B,CAJgE,CAKhE;AACH;;AACDT,EAAAA,OAAO,CAACC,QAAD,EAAW;AACd,UAAM;AAAES,MAAAA;AAAF,QAAWT,QAAjB;;AACA,QAAIS,IAAI,KAAK,WAAT,IAAwBA,IAAI,KAAK,kBAArC,EAAyD;AACrD,UAAIP,KAAK,GAAG,KAAKG,MAAL,CAAYK,eAAZ,CAA4B,KAAKJ,UAAjC,KAAgDH,SAA5D;AACA,UAAIQ,WAAW,GAAG,KAAKL,UAAL,CAAgBM,eAAhB,KAAoC,KAAKN,UAAL,CAAgBO,aAAtE,CAFqD,CAGrD;;AACA,UAAI,CAACX,KAAD,IAAU,KAAKM,mBAAnB,EAAwC;AACpC,cAAMM,IAAI,GAAG,KAAKN,mBAAL,CAAyBO,oBAAzB,CAA8C,KAAKR,aAAnD,CAAb;;AACA,YAAIO,IAAJ,EAAU;AACNZ,UAAAA,KAAK,GAAGY,IAAI,CAACZ,KAAb;AACAS,UAAAA,WAAW,GAAGG,IAAI,CAACE,SAAnB;AACH;AACJ;;AACD,UAAId,KAAK,IAAIS,WAAT,IAAwBX,QAAQ,CAACiB,OAArC,EAA8C;AAC1C;AACA;AACA;AACA;AACA,cAAMC,IAAI,GAAG,KAAKb,MAAL,CAAYc,cAAZ,CAA2B,KAAKb,UAAL,CAAgBM,eAA3C,CAAb;;AACA,cAAMQ,qBAAqB,GAAGrC,oBAAoB,CAACmC,IAAD,EAAO,CAAP,EAAU,KAAKZ,UAAL,CAAgBe,WAAhB,GAA8B,CAAxC,CAAlD;AACA,YAAIC,oBAAoB,GAAGF,qBAA3B;AACApB,QAAAA,QAAQ,CAACiB,OAAT,CAAiBM,IAAjB,CAAsBC,MAAM,IAAI;AAC5B,cAAIA,MAAM,KAAKxB,QAAf,EAAyB;AACrB,mBAAO,KAAP;AACH;;AACD,cAAIwB,MAAM,YAAYpC,IAAtB,EAA4B;AACxBkC,YAAAA,oBAAoB,GAAGvC,oBAAoB,CAACE,UAAU,CAACuC,MAAM,CAACtB,KAAR,CAAV,CAAyBuB,GAAzB,EAAD,CAA3C;AACH;;AACD,iBAAO,IAAP;AACH,SARD;AASA,cAAMC,sBAAsB,GAAG5C,kBAAkB,CAACwC,oBAAD,EAAuBF,qBAAvB,CAAjD;AACAlB,QAAAA,KAAK,GAAGA,KAAK,CAACyB,OAAN,CAAc,mBAAd,EAAmC,CAACC,CAAD,EAAIC,OAAJ,EAAaC,IAAb,KAAuB,GAAED,OAAQ,GAAEP,oBAAoB,CAACS,MAArB,CAA4BL,sBAA5B,CAAoD,GAAEI,IAAK,EAAjI,CAAR;AACH;;AACD,aAAO5B,KAAP;AACH,KAhCD,MAiCK,IAAIO,IAAI,KAAK,iBAAb,EAAgC;AACjC,aAAO,KAAKJ,MAAL,CAAYc,cAAZ,CAA2B,KAAKb,UAAL,CAAgB0B,kBAA3C,CAAP;AACH,KAFI,MAGA,IAAIvB,IAAI,KAAK,iBAAb,EAAgC;AACjC,YAAMK,IAAI,GAAG,KAAKT,MAAL,CAAY4B,iBAAZ,CAA8B;AACvCC,QAAAA,UAAU,EAAE,KAAK5B,UAAL,CAAgB0B,kBADW;AAEvCG,QAAAA,MAAM,EAAE,KAAK7B,UAAL,CAAgB8B;AAFe,OAA9B,CAAb;;AAIA,aAAOtB,IAAI,IAAIA,IAAI,CAACuB,IAAb,IAAqBlC,SAA5B;AACH,KANI,MAOA,IAAIM,IAAI,KAAK,eAAb,EAA8B;AAC/B,aAAO6B,MAAM,CAAC,KAAKhC,UAAL,CAAgB0B,kBAAhB,GAAqC,CAAtC,CAAb;AACH,KAFI,MAGA,IAAIvB,IAAI,KAAK,gBAAb,EAA+B;AAChC,aAAO6B,MAAM,CAAC,KAAKhC,UAAL,CAAgB0B,kBAAjB,CAAb;AACH;;AACD,WAAO7B,SAAP;AACH;;AA5DuC;AA8D5C,OAAO,MAAMoC,0BAAN,CAAiC;AACpC1C,EAAAA,WAAW,CAAC2C,aAAD,EAAgBnC,MAAhB,EAAwB;AAC/B,SAAKmC,aAAL,GAAqBA,aAArB;AACA,SAAKnC,MAAL,GAAcA,MAAd,CAF+B,CAG/B;AACH;;AACDN,EAAAA,OAAO,CAACC,QAAD,EAAW;AACd,UAAM;AAAES,MAAAA;AAAF,QAAWT,QAAjB;;AACA,QAAIS,IAAI,KAAK,aAAb,EAA4B;AACxB,aAAO7B,IAAI,CAAC6D,QAAL,CAAc,KAAKpC,MAAL,CAAYqC,GAAZ,CAAgBC,MAA9B,CAAP;AACH,KAFD,MAGK,IAAIlC,IAAI,KAAK,kBAAb,EAAiC;AAClC,YAAMA,IAAI,GAAG7B,IAAI,CAAC6D,QAAL,CAAc,KAAKpC,MAAL,CAAYqC,GAAZ,CAAgBC,MAA9B,CAAb;AACA,YAAMC,GAAG,GAAGnC,IAAI,CAACoC,WAAL,CAAiB,GAAjB,CAAZ;;AACA,UAAID,GAAG,IAAI,CAAX,EAAc;AACV,eAAOnC,IAAP;AACH,OAFD,MAGK;AACD,eAAOA,IAAI,CAACqC,KAAL,CAAW,CAAX,EAAcF,GAAd,CAAP;AACH;AACJ,KATI,MAUA,IAAInC,IAAI,KAAK,cAAb,EAA6B;AAC9B,UAAI7B,IAAI,CAACC,OAAL,CAAa,KAAKwB,MAAL,CAAYqC,GAAZ,CAAgBC,MAA7B,MAAyC,GAA7C,EAAkD;AAC9C,eAAO,EAAP;AACH;;AACD,aAAO,KAAKH,aAAL,CAAmBO,WAAnB,CAA+BlE,OAAO,CAAC,KAAKwB,MAAL,CAAYqC,GAAb,CAAtC,CAAP;AACH,KALI,MAMA,IAAIjC,IAAI,KAAK,aAAb,EAA4B;AAC7B,aAAO,KAAK+B,aAAL,CAAmBO,WAAnB,CAA+B,KAAK1C,MAAL,CAAYqC,GAA3C,CAAP;AACH,KAFI,MAGA,IAAIjC,IAAI,KAAK,mBAAb,EAAkC;AACnC,aAAO,KAAK+B,aAAL,CAAmBO,WAAnB,CAA+B,KAAK1C,MAAL,CAAYqC,GAA3C,EAAgD;AAAEM,QAAAA,QAAQ,EAAE,IAAZ;AAAkBC,QAAAA,QAAQ,EAAE;AAA5B,OAAhD,CAAP;AACH;;AACD,WAAO9C,SAAP;AACH;;AAlCmC;AAoCxC,OAAO,MAAM+C,8BAAN,CAAqC;AACxCrD,EAAAA,WAAW,CAACsD,kBAAD,EAAqB5C,aAArB,EAAoC6C,eAApC,EAAqDC,OAArD,EAA8D;AACrE,SAAKF,kBAAL,GAA0BA,kBAA1B;AACA,SAAK5C,aAAL,GAAqBA,aAArB;AACA,SAAK6C,eAAL,GAAuBA,eAAvB;AACA,SAAKC,OAAL,GAAeA,OAAf,CAJqE,CAKrE;AACH;;AACDtD,EAAAA,OAAO,CAACC,QAAD,EAAW;AACd,QAAIA,QAAQ,CAACS,IAAT,KAAkB,WAAtB,EAAmC;AAC/B,aAAON,SAAP;AACH;;AACD,UAAMmD,aAAa,GAAG,KAAKH,kBAAL,EAAtB;;AACA,QAAI,CAACG,aAAL,EAAoB;AAChB,aAAOnD,SAAP;AACH,KAPa,CAQd;AACA;AACA;;;AACA,QAAI,KAAKkD,OAAT,EAAkB;AACd,YAAME,KAAK,GAAGD,aAAa,CAACE,KAAd,CAAoB,YAApB,EAAkCC,MAAlC,CAAyCC,CAAC,IAAI,CAAC1E,mBAAmB,CAAC0E,CAAD,CAAlE,CAAd;;AACA,UAAIH,KAAK,CAACI,MAAN,KAAiB,KAAKP,eAA1B,EAA2C;AACvC,eAAOG,KAAK,CAAC,KAAKhD,aAAN,CAAZ;AACH;AACJ;;AACD,WAAO+C,aAAP;AACH;;AA1BuC;AA4B5C,OAAO,MAAMM,4BAAN,CAAmC;AACtC/D,EAAAA,WAAW,CAACQ,MAAD,EAASC,UAAT,EAAqB;AAC5B,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,UAAL,GAAkBA,UAAlB,CAF4B,CAG5B;AACH;;AACDP,EAAAA,OAAO,CAACC,QAAD,EAAW;AACd,UAAM;AAAES,MAAAA;AAAF,QAAWT,QAAjB;;AACA,UAAM6D,MAAM,GAAG,KAAKxD,MAAL,CAAYyD,uBAAZ,CAAoC,KAAKxD,UAAL,CAAgByD,wBAApD,EAA8E,KAAKzD,UAAL,CAAgB0D,oBAA9F,CAAf;;AACA,UAAMC,MAAM,GAAG9E,6BAA6B,CAAC+E,WAA9B,CAA0CL,MAA1C,CAAf;;AACA,QAAI,CAACI,MAAL,EAAa;AACT,aAAO9D,SAAP;AACH;;AACD,QAAIM,IAAI,KAAK,cAAb,EAA6B;AACzB,aAAOwD,MAAM,CAACE,gBAAP,IAA2BhE,SAAlC;AACH,KAFD,MAGK,IAAIM,IAAI,KAAK,qBAAb,EAAoC;AACrC,aAAOwD,MAAM,CAACG,sBAAP,IAAiCjE,SAAxC;AACH,KAFI,MAGA,IAAIM,IAAI,KAAK,mBAAb,EAAkC;AACnC,aAAOwD,MAAM,CAACI,oBAAP,IAA+BlE,SAAtC;AACH;;AACD,WAAOA,SAAP;AACH;;AAvBqC;AAyB1C,OAAO,MAAMmE,yBAAN,CAAgC;AACnCzE,EAAAA,WAAW,GAAG;AACV,SAAK0E,KAAL,GAAa,IAAIC,IAAJ,EAAb;AACH;;AACDzE,EAAAA,OAAO,CAACC,QAAD,EAAW;AACd,UAAM;AAAES,MAAAA;AAAF,QAAWT,QAAjB;;AACA,QAAIS,IAAI,KAAK,cAAb,EAA6B;AACzB,aAAO6B,MAAM,CAAC,KAAKiC,KAAL,CAAWE,WAAX,EAAD,CAAb;AACH,KAFD,MAGK,IAAIhE,IAAI,KAAK,oBAAb,EAAmC;AACpC,aAAO6B,MAAM,CAAC,KAAKiC,KAAL,CAAWE,WAAX,EAAD,CAAN,CAAiC3B,KAAjC,CAAuC,CAAC,CAAxC,CAAP;AACH,KAFI,MAGA,IAAIrC,IAAI,KAAK,eAAb,EAA8B;AAC/B,aAAO6B,MAAM,CAAC,KAAKiC,KAAL,CAAWG,QAAX,GAAsBC,OAAtB,KAAkC,CAAnC,CAAN,CAA4CC,QAA5C,CAAqD,CAArD,EAAwD,GAAxD,CAAP;AACH,KAFI,MAGA,IAAInE,IAAI,KAAK,cAAb,EAA6B;AAC9B,aAAO6B,MAAM,CAAC,KAAKiC,KAAL,CAAWM,OAAX,GAAqBF,OAArB,EAAD,CAAN,CAAuCC,QAAvC,CAAgD,CAAhD,EAAmD,GAAnD,CAAP;AACH,KAFI,MAGA,IAAInE,IAAI,KAAK,cAAb,EAA6B;AAC9B,aAAO6B,MAAM,CAAC,KAAKiC,KAAL,CAAWO,QAAX,GAAsBH,OAAtB,EAAD,CAAN,CAAwCC,QAAxC,CAAiD,CAAjD,EAAoD,GAApD,CAAP;AACH,KAFI,MAGA,IAAInE,IAAI,KAAK,gBAAb,EAA+B;AAChC,aAAO6B,MAAM,CAAC,KAAKiC,KAAL,CAAWQ,UAAX,GAAwBJ,OAAxB,EAAD,CAAN,CAA0CC,QAA1C,CAAmD,CAAnD,EAAsD,GAAtD,CAAP;AACH,KAFI,MAGA,IAAInE,IAAI,KAAK,gBAAb,EAA+B;AAChC,aAAO6B,MAAM,CAAC,KAAKiC,KAAL,CAAWS,UAAX,GAAwBL,OAAxB,EAAD,CAAN,CAA0CC,QAA1C,CAAmD,CAAnD,EAAsD,GAAtD,CAAP;AACH,KAFI,MAGA,IAAInE,IAAI,KAAK,kBAAb,EAAiC;AAClC,aAAO6D,yBAAyB,CAACW,QAA1B,CAAmC,KAAKV,KAAL,CAAWW,MAAX,EAAnC,CAAP;AACH,KAFI,MAGA,IAAIzE,IAAI,KAAK,wBAAb,EAAuC;AACxC,aAAO6D,yBAAyB,CAACa,aAA1B,CAAwC,KAAKZ,KAAL,CAAWW,MAAX,EAAxC,CAAP;AACH,KAFI,MAGA,IAAIzE,IAAI,KAAK,oBAAb,EAAmC;AACpC,aAAO6D,yBAAyB,CAACc,UAA1B,CAAqC,KAAKb,KAAL,CAAWG,QAAX,EAArC,CAAP;AACH,KAFI,MAGA,IAAIjE,IAAI,KAAK,0BAAb,EAAyC;AAC1C,aAAO6D,yBAAyB,CAACe,eAA1B,CAA0C,KAAKd,KAAL,CAAWG,QAAX,EAA1C,CAAP;AACH,KAFI,MAGA,IAAIjE,IAAI,KAAK,sBAAb,EAAqC;AACtC,aAAO6B,MAAM,CAACgD,IAAI,CAACC,KAAL,CAAW,KAAKhB,KAAL,CAAWiB,OAAX,KAAuB,IAAlC,CAAD,CAAb;AACH;;AACD,WAAOrF,SAAP;AACH;;AA3CkC;AA6CvCmE,yBAAyB,CAACW,QAA1B,GAAqC,CAAC5F,GAAG,CAACoG,QAAJ,CAAa,QAAb,EAAuB,QAAvB,CAAD,EAAmCpG,GAAG,CAACoG,QAAJ,CAAa,QAAb,EAAuB,QAAvB,CAAnC,EAAqEpG,GAAG,CAACoG,QAAJ,CAAa,SAAb,EAAwB,SAAxB,CAArE,EAAyGpG,GAAG,CAACoG,QAAJ,CAAa,WAAb,EAA0B,WAA1B,CAAzG,EAAiJpG,GAAG,CAACoG,QAAJ,CAAa,UAAb,EAAyB,UAAzB,CAAjJ,EAAuLpG,GAAG,CAACoG,QAAJ,CAAa,QAAb,EAAuB,QAAvB,CAAvL,EAAyNpG,GAAG,CAACoG,QAAJ,CAAa,UAAb,EAAyB,UAAzB,CAAzN,CAArC;AACAnB,yBAAyB,CAACa,aAA1B,GAA0C,CAAC9F,GAAG,CAACoG,QAAJ,CAAa,aAAb,EAA4B,KAA5B,CAAD,EAAqCpG,GAAG,CAACoG,QAAJ,CAAa,aAAb,EAA4B,KAA5B,CAArC,EAAyEpG,GAAG,CAACoG,QAAJ,CAAa,cAAb,EAA6B,KAA7B,CAAzE,EAA8GpG,GAAG,CAACoG,QAAJ,CAAa,gBAAb,EAA+B,KAA/B,CAA9G,EAAqJpG,GAAG,CAACoG,QAAJ,CAAa,eAAb,EAA8B,KAA9B,CAArJ,EAA2LpG,GAAG,CAACoG,QAAJ,CAAa,aAAb,EAA4B,KAA5B,CAA3L,EAA+NpG,GAAG,CAACoG,QAAJ,CAAa,eAAb,EAA8B,KAA9B,CAA/N,CAA1C;AACAnB,yBAAyB,CAACc,UAA1B,GAAuC,CAAC/F,GAAG,CAACoG,QAAJ,CAAa,SAAb,EAAwB,SAAxB,CAAD,EAAqCpG,GAAG,CAACoG,QAAJ,CAAa,UAAb,EAAyB,UAAzB,CAArC,EAA2EpG,GAAG,CAACoG,QAAJ,CAAa,OAAb,EAAsB,OAAtB,CAA3E,EAA2GpG,GAAG,CAACoG,QAAJ,CAAa,OAAb,EAAsB,OAAtB,CAA3G,EAA2IpG,GAAG,CAACoG,QAAJ,CAAa,KAAb,EAAoB,KAApB,CAA3I,EAAuKpG,GAAG,CAACoG,QAAJ,CAAa,MAAb,EAAqB,MAArB,CAAvK,EAAqMpG,GAAG,CAACoG,QAAJ,CAAa,MAAb,EAAqB,MAArB,CAArM,EAAmOpG,GAAG,CAACoG,QAAJ,CAAa,QAAb,EAAuB,QAAvB,CAAnO,EAAqQpG,GAAG,CAACoG,QAAJ,CAAa,WAAb,EAA0B,WAA1B,CAArQ,EAA6SpG,GAAG,CAACoG,QAAJ,CAAa,SAAb,EAAwB,SAAxB,CAA7S,EAAiVpG,GAAG,CAACoG,QAAJ,CAAa,UAAb,EAAyB,UAAzB,CAAjV,EAAuXpG,GAAG,CAACoG,QAAJ,CAAa,UAAb,EAAyB,UAAzB,CAAvX,CAAvC;AACAnB,yBAAyB,CAACe,eAA1B,GAA4C,CAAChG,GAAG,CAACoG,QAAJ,CAAa,cAAb,EAA6B,KAA7B,CAAD,EAAsCpG,GAAG,CAACoG,QAAJ,CAAa,eAAb,EAA8B,KAA9B,CAAtC,EAA4EpG,GAAG,CAACoG,QAAJ,CAAa,YAAb,EAA2B,KAA3B,CAA5E,EAA+GpG,GAAG,CAACoG,QAAJ,CAAa,YAAb,EAA2B,KAA3B,CAA/G,EAAkJpG,GAAG,CAACoG,QAAJ,CAAa,UAAb,EAAyB,KAAzB,CAAlJ,EAAmLpG,GAAG,CAACoG,QAAJ,CAAa,WAAb,EAA0B,KAA1B,CAAnL,EAAqNpG,GAAG,CAACoG,QAAJ,CAAa,WAAb,EAA0B,KAA1B,CAArN,EAAuPpG,GAAG,CAACoG,QAAJ,CAAa,aAAb,EAA4B,KAA5B,CAAvP,EAA2RpG,GAAG,CAACoG,QAAJ,CAAa,gBAAb,EAA+B,KAA/B,CAA3R,EAAkUpG,GAAG,CAACoG,QAAJ,CAAa,cAAb,EAA6B,KAA7B,CAAlU,EAAuWpG,GAAG,CAACoG,QAAJ,CAAa,eAAb,EAA8B,KAA9B,CAAvW,EAA6YpG,GAAG,CAACoG,QAAJ,CAAa,eAAb,EAA8B,KAA9B,CAA7Y,CAA5C;AACA,OAAO,MAAMC,8BAAN,CAAqC;AACxC7F,EAAAA,WAAW,CAAC8F,iBAAD,EAAoB;AAC3B,SAAKA,iBAAL,GAAyBA,iBAAzB,CAD2B,CAE3B;AACH;;AACD5F,EAAAA,OAAO,CAACC,QAAD,EAAW;AACd,QAAI,CAAC,KAAK2F,iBAAV,EAA6B;AACzB,aAAOxF,SAAP;AACH;;AACD,UAAMyF,mBAAmB,GAAGrG,qBAAqB,CAAC,KAAKoG,iBAAL,CAAuBE,YAAvB,EAAD,CAAjD;;AACA,QAAI,CAACD,mBAAL,EAA0B;AACtB,aAAOzF,SAAP;AACH;;AACD,QAAIH,QAAQ,CAACS,IAAT,KAAkB,gBAAtB,EAAwC;AACpC,aAAO,KAAKqF,qBAAL,CAA2BF,mBAA3B,CAAP;AACH,KAFD,MAGK,IAAI5F,QAAQ,CAACS,IAAT,KAAkB,kBAAtB,EAA0C;AAC3C,aAAO,KAAKsF,oBAAL,CAA0BH,mBAA1B,CAAP;AACH;;AACD,WAAOzF,SAAP;AACH;;AACD2F,EAAAA,qBAAqB,CAACF,mBAAD,EAAsB;AACvC,QAAItG,iCAAiC,CAACsG,mBAAD,CAArC,EAA4D;AACxD,aAAOhH,IAAI,CAAC6D,QAAL,CAAcmD,mBAAmB,CAAClD,GAApB,CAAwB9D,IAAtC,CAAP;AACH;;AACD,QAAIoH,QAAQ,GAAGpH,IAAI,CAAC6D,QAAL,CAAcmD,mBAAmB,CAACK,UAApB,CAA+BrH,IAA7C,CAAf;;AACA,QAAIoH,QAAQ,CAACE,QAAT,CAAkB1G,mBAAlB,CAAJ,EAA4C;AACxCwG,MAAAA,QAAQ,GAAGA,QAAQ,CAACjE,MAAT,CAAgB,CAAhB,EAAmBiE,QAAQ,CAACrC,MAAT,GAAkBnE,mBAAmB,CAACmE,MAAtC,GAA+C,CAAlE,CAAX;AACH;;AACD,WAAOqC,QAAP;AACH;;AACDD,EAAAA,oBAAoB,CAACH,mBAAD,EAAsB;AACtC,QAAItG,iCAAiC,CAACsG,mBAAD,CAArC,EAA4D;AACxD,aAAOjH,oBAAoB,CAACiH,mBAAmB,CAAClD,GAApB,CAAwBC,MAAzB,CAA3B;AACH;;AACD,QAAIqD,QAAQ,GAAGpH,IAAI,CAAC6D,QAAL,CAAcmD,mBAAmB,CAACK,UAApB,CAA+BrH,IAA7C,CAAf;AACA,QAAIuH,UAAU,GAAGP,mBAAmB,CAACK,UAApB,CAA+BtD,MAAhD;;AACA,QAAIwD,UAAU,CAACD,QAAX,CAAoBF,QAApB,CAAJ,EAAmC;AAC/BG,MAAAA,UAAU,GAAGA,UAAU,CAACpE,MAAX,CAAkB,CAAlB,EAAqBoE,UAAU,CAACxC,MAAX,GAAoBqC,QAAQ,CAACrC,MAA7B,GAAsC,CAA3D,CAAb;AACH;;AACD,WAAQwC,UAAU,GAAGxH,oBAAoB,CAACwH,UAAD,CAAvB,GAAsC,GAAxD;AACH;;AAzCuC;AA2C5C,OAAO,MAAMC,2BAAN,CAAkC;AACrCrG,EAAAA,OAAO,CAACC,QAAD,EAAW;AACd,UAAM;AAAES,MAAAA;AAAF,QAAWT,QAAjB;;AACA,QAAIS,IAAI,KAAK,QAAb,EAAuB;AACnB,aAAO6E,IAAI,CAACe,MAAL,GAAcC,QAAd,GAAyBxD,KAAzB,CAA+B,CAAC,CAAhC,CAAP;AACH,KAFD,MAGK,IAAIrC,IAAI,KAAK,YAAb,EAA2B;AAC5B,aAAO6E,IAAI,CAACe,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BxD,KAA3B,CAAiC,CAAC,CAAlC,CAAP;AACH,KAFI,MAGA,IAAIrC,IAAI,KAAK,MAAb,EAAqB;AACtB,aAAOvB,YAAY,EAAnB;AACH;;AACD,WAAOiB,SAAP;AACH;;AAboC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { normalizeDriveLetter } from '../../../../base/common/labels.js';\nimport * as path from '../../../../base/common/path.js';\nimport { dirname } from '../../../../base/common/resources.js';\nimport { commonPrefixLength, getLeadingWhitespace, isFalsyOrWhitespace, splitLines } from '../../../../base/common/strings.js';\nimport { generateUuid } from '../../../../base/common/uuid.js';\nimport { LanguageConfigurationRegistry } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { Text } from './snippetParser.js';\nimport * as nls from '../../../../nls.js';\nimport { isSingleFolderWorkspaceIdentifier, toWorkspaceIdentifier, WORKSPACE_EXTENSION } from '../../../../platform/workspaces/common/workspaces.js';\nexport const KnownSnippetVariableNames = Object.freeze({\n    'CURRENT_YEAR': true,\n    'CURRENT_YEAR_SHORT': true,\n    'CURRENT_MONTH': true,\n    'CURRENT_DATE': true,\n    'CURRENT_HOUR': true,\n    'CURRENT_MINUTE': true,\n    'CURRENT_SECOND': true,\n    'CURRENT_DAY_NAME': true,\n    'CURRENT_DAY_NAME_SHORT': true,\n    'CURRENT_MONTH_NAME': true,\n    'CURRENT_MONTH_NAME_SHORT': true,\n    'CURRENT_SECONDS_UNIX': true,\n    'SELECTION': true,\n    'CLIPBOARD': true,\n    'TM_SELECTED_TEXT': true,\n    'TM_CURRENT_LINE': true,\n    'TM_CURRENT_WORD': true,\n    'TM_LINE_INDEX': true,\n    'TM_LINE_NUMBER': true,\n    'TM_FILENAME': true,\n    'TM_FILENAME_BASE': true,\n    'TM_DIRECTORY': true,\n    'TM_FILEPATH': true,\n    'RELATIVE_FILEPATH': true,\n    'BLOCK_COMMENT_START': true,\n    'BLOCK_COMMENT_END': true,\n    'LINE_COMMENT': true,\n    'WORKSPACE_NAME': true,\n    'WORKSPACE_FOLDER': true,\n    'RANDOM': true,\n    'RANDOM_HEX': true,\n    'UUID': true\n});\nexport class CompositeSnippetVariableResolver {\n    constructor(_delegates) {\n        this._delegates = _delegates;\n        //\n    }\n    resolve(variable) {\n        for (const delegate of this._delegates) {\n            let value = delegate.resolve(variable);\n            if (value !== undefined) {\n                return value;\n            }\n        }\n        return undefined;\n    }\n}\nexport class SelectionBasedVariableResolver {\n    constructor(_model, _selection, _selectionIdx, _overtypingCapturer) {\n        this._model = _model;\n        this._selection = _selection;\n        this._selectionIdx = _selectionIdx;\n        this._overtypingCapturer = _overtypingCapturer;\n        //\n    }\n    resolve(variable) {\n        const { name } = variable;\n        if (name === 'SELECTION' || name === 'TM_SELECTED_TEXT') {\n            let value = this._model.getValueInRange(this._selection) || undefined;\n            let isMultiline = this._selection.startLineNumber !== this._selection.endLineNumber;\n            // If there was no selected text, try to get last overtyped text\n            if (!value && this._overtypingCapturer) {\n                const info = this._overtypingCapturer.getLastOvertypedInfo(this._selectionIdx);\n                if (info) {\n                    value = info.value;\n                    isMultiline = info.multiline;\n                }\n            }\n            if (value && isMultiline && variable.snippet) {\n                // Selection is a multiline string which we indentation we now\n                // need to adjust. We compare the indentation of this variable\n                // with the indentation at the editor position and add potential\n                // extra indentation to the value\n                const line = this._model.getLineContent(this._selection.startLineNumber);\n                const lineLeadingWhitespace = getLeadingWhitespace(line, 0, this._selection.startColumn - 1);\n                let varLeadingWhitespace = lineLeadingWhitespace;\n                variable.snippet.walk(marker => {\n                    if (marker === variable) {\n                        return false;\n                    }\n                    if (marker instanceof Text) {\n                        varLeadingWhitespace = getLeadingWhitespace(splitLines(marker.value).pop());\n                    }\n                    return true;\n                });\n                const whitespaceCommonLength = commonPrefixLength(varLeadingWhitespace, lineLeadingWhitespace);\n                value = value.replace(/(\\r\\n|\\r|\\n)(.*)/g, (m, newline, rest) => `${newline}${varLeadingWhitespace.substr(whitespaceCommonLength)}${rest}`);\n            }\n            return value;\n        }\n        else if (name === 'TM_CURRENT_LINE') {\n            return this._model.getLineContent(this._selection.positionLineNumber);\n        }\n        else if (name === 'TM_CURRENT_WORD') {\n            const info = this._model.getWordAtPosition({\n                lineNumber: this._selection.positionLineNumber,\n                column: this._selection.positionColumn\n            });\n            return info && info.word || undefined;\n        }\n        else if (name === 'TM_LINE_INDEX') {\n            return String(this._selection.positionLineNumber - 1);\n        }\n        else if (name === 'TM_LINE_NUMBER') {\n            return String(this._selection.positionLineNumber);\n        }\n        return undefined;\n    }\n}\nexport class ModelBasedVariableResolver {\n    constructor(_labelService, _model) {\n        this._labelService = _labelService;\n        this._model = _model;\n        //\n    }\n    resolve(variable) {\n        const { name } = variable;\n        if (name === 'TM_FILENAME') {\n            return path.basename(this._model.uri.fsPath);\n        }\n        else if (name === 'TM_FILENAME_BASE') {\n            const name = path.basename(this._model.uri.fsPath);\n            const idx = name.lastIndexOf('.');\n            if (idx <= 0) {\n                return name;\n            }\n            else {\n                return name.slice(0, idx);\n            }\n        }\n        else if (name === 'TM_DIRECTORY') {\n            if (path.dirname(this._model.uri.fsPath) === '.') {\n                return '';\n            }\n            return this._labelService.getUriLabel(dirname(this._model.uri));\n        }\n        else if (name === 'TM_FILEPATH') {\n            return this._labelService.getUriLabel(this._model.uri);\n        }\n        else if (name === 'RELATIVE_FILEPATH') {\n            return this._labelService.getUriLabel(this._model.uri, { relative: true, noPrefix: true });\n        }\n        return undefined;\n    }\n}\nexport class ClipboardBasedVariableResolver {\n    constructor(_readClipboardText, _selectionIdx, _selectionCount, _spread) {\n        this._readClipboardText = _readClipboardText;\n        this._selectionIdx = _selectionIdx;\n        this._selectionCount = _selectionCount;\n        this._spread = _spread;\n        //\n    }\n    resolve(variable) {\n        if (variable.name !== 'CLIPBOARD') {\n            return undefined;\n        }\n        const clipboardText = this._readClipboardText();\n        if (!clipboardText) {\n            return undefined;\n        }\n        // `spread` is assigning each cursor a line of the clipboard\n        // text whenever there the line count equals the cursor count\n        // and when enabled\n        if (this._spread) {\n            const lines = clipboardText.split(/\\r\\n|\\n|\\r/).filter(s => !isFalsyOrWhitespace(s));\n            if (lines.length === this._selectionCount) {\n                return lines[this._selectionIdx];\n            }\n        }\n        return clipboardText;\n    }\n}\nexport class CommentBasedVariableResolver {\n    constructor(_model, _selection) {\n        this._model = _model;\n        this._selection = _selection;\n        //\n    }\n    resolve(variable) {\n        const { name } = variable;\n        const langId = this._model.getLanguageIdAtPosition(this._selection.selectionStartLineNumber, this._selection.selectionStartColumn);\n        const config = LanguageConfigurationRegistry.getComments(langId);\n        if (!config) {\n            return undefined;\n        }\n        if (name === 'LINE_COMMENT') {\n            return config.lineCommentToken || undefined;\n        }\n        else if (name === 'BLOCK_COMMENT_START') {\n            return config.blockCommentStartToken || undefined;\n        }\n        else if (name === 'BLOCK_COMMENT_END') {\n            return config.blockCommentEndToken || undefined;\n        }\n        return undefined;\n    }\n}\nexport class TimeBasedVariableResolver {\n    constructor() {\n        this._date = new Date();\n    }\n    resolve(variable) {\n        const { name } = variable;\n        if (name === 'CURRENT_YEAR') {\n            return String(this._date.getFullYear());\n        }\n        else if (name === 'CURRENT_YEAR_SHORT') {\n            return String(this._date.getFullYear()).slice(-2);\n        }\n        else if (name === 'CURRENT_MONTH') {\n            return String(this._date.getMonth().valueOf() + 1).padStart(2, '0');\n        }\n        else if (name === 'CURRENT_DATE') {\n            return String(this._date.getDate().valueOf()).padStart(2, '0');\n        }\n        else if (name === 'CURRENT_HOUR') {\n            return String(this._date.getHours().valueOf()).padStart(2, '0');\n        }\n        else if (name === 'CURRENT_MINUTE') {\n            return String(this._date.getMinutes().valueOf()).padStart(2, '0');\n        }\n        else if (name === 'CURRENT_SECOND') {\n            return String(this._date.getSeconds().valueOf()).padStart(2, '0');\n        }\n        else if (name === 'CURRENT_DAY_NAME') {\n            return TimeBasedVariableResolver.dayNames[this._date.getDay()];\n        }\n        else if (name === 'CURRENT_DAY_NAME_SHORT') {\n            return TimeBasedVariableResolver.dayNamesShort[this._date.getDay()];\n        }\n        else if (name === 'CURRENT_MONTH_NAME') {\n            return TimeBasedVariableResolver.monthNames[this._date.getMonth()];\n        }\n        else if (name === 'CURRENT_MONTH_NAME_SHORT') {\n            return TimeBasedVariableResolver.monthNamesShort[this._date.getMonth()];\n        }\n        else if (name === 'CURRENT_SECONDS_UNIX') {\n            return String(Math.floor(this._date.getTime() / 1000));\n        }\n        return undefined;\n    }\n}\nTimeBasedVariableResolver.dayNames = [nls.localize('Sunday', \"Sunday\"), nls.localize('Monday', \"Monday\"), nls.localize('Tuesday', \"Tuesday\"), nls.localize('Wednesday', \"Wednesday\"), nls.localize('Thursday', \"Thursday\"), nls.localize('Friday', \"Friday\"), nls.localize('Saturday', \"Saturday\")];\nTimeBasedVariableResolver.dayNamesShort = [nls.localize('SundayShort', \"Sun\"), nls.localize('MondayShort', \"Mon\"), nls.localize('TuesdayShort', \"Tue\"), nls.localize('WednesdayShort', \"Wed\"), nls.localize('ThursdayShort', \"Thu\"), nls.localize('FridayShort', \"Fri\"), nls.localize('SaturdayShort', \"Sat\")];\nTimeBasedVariableResolver.monthNames = [nls.localize('January', \"January\"), nls.localize('February', \"February\"), nls.localize('March', \"March\"), nls.localize('April', \"April\"), nls.localize('May', \"May\"), nls.localize('June', \"June\"), nls.localize('July', \"July\"), nls.localize('August', \"August\"), nls.localize('September', \"September\"), nls.localize('October', \"October\"), nls.localize('November', \"November\"), nls.localize('December', \"December\")];\nTimeBasedVariableResolver.monthNamesShort = [nls.localize('JanuaryShort', \"Jan\"), nls.localize('FebruaryShort', \"Feb\"), nls.localize('MarchShort', \"Mar\"), nls.localize('AprilShort', \"Apr\"), nls.localize('MayShort', \"May\"), nls.localize('JuneShort', \"Jun\"), nls.localize('JulyShort', \"Jul\"), nls.localize('AugustShort', \"Aug\"), nls.localize('SeptemberShort', \"Sep\"), nls.localize('OctoberShort', \"Oct\"), nls.localize('NovemberShort', \"Nov\"), nls.localize('DecemberShort', \"Dec\")];\nexport class WorkspaceBasedVariableResolver {\n    constructor(_workspaceService) {\n        this._workspaceService = _workspaceService;\n        //\n    }\n    resolve(variable) {\n        if (!this._workspaceService) {\n            return undefined;\n        }\n        const workspaceIdentifier = toWorkspaceIdentifier(this._workspaceService.getWorkspace());\n        if (!workspaceIdentifier) {\n            return undefined;\n        }\n        if (variable.name === 'WORKSPACE_NAME') {\n            return this._resolveWorkspaceName(workspaceIdentifier);\n        }\n        else if (variable.name === 'WORKSPACE_FOLDER') {\n            return this._resoveWorkspacePath(workspaceIdentifier);\n        }\n        return undefined;\n    }\n    _resolveWorkspaceName(workspaceIdentifier) {\n        if (isSingleFolderWorkspaceIdentifier(workspaceIdentifier)) {\n            return path.basename(workspaceIdentifier.uri.path);\n        }\n        let filename = path.basename(workspaceIdentifier.configPath.path);\n        if (filename.endsWith(WORKSPACE_EXTENSION)) {\n            filename = filename.substr(0, filename.length - WORKSPACE_EXTENSION.length - 1);\n        }\n        return filename;\n    }\n    _resoveWorkspacePath(workspaceIdentifier) {\n        if (isSingleFolderWorkspaceIdentifier(workspaceIdentifier)) {\n            return normalizeDriveLetter(workspaceIdentifier.uri.fsPath);\n        }\n        let filename = path.basename(workspaceIdentifier.configPath.path);\n        let folderpath = workspaceIdentifier.configPath.fsPath;\n        if (folderpath.endsWith(filename)) {\n            folderpath = folderpath.substr(0, folderpath.length - filename.length - 1);\n        }\n        return (folderpath ? normalizeDriveLetter(folderpath) : '/');\n    }\n}\nexport class RandomBasedVariableResolver {\n    resolve(variable) {\n        const { name } = variable;\n        if (name === 'RANDOM') {\n            return Math.random().toString().slice(-6);\n        }\n        else if (name === 'RANDOM_HEX') {\n            return Math.random().toString(16).slice(-6);\n        }\n        else if (name === 'UUID') {\n            return generateUuid();\n        }\n        return undefined;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}