{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as browser from './browser.js';\nimport { EVENT_KEY_CODE_MAP, KeyCodeUtils } from '../common/keyCodes.js';\nimport { SimpleKeybinding } from '../common/keybindings.js';\nimport * as platform from '../common/platform.js';\n\nfunction extractKeyCode(e) {\n  if (e.charCode) {\n    // \"keypress\" events mostly\n    let char = String.fromCharCode(e.charCode).toUpperCase();\n    return KeyCodeUtils.fromString(char);\n  }\n\n  const keyCode = e.keyCode; // browser quirks\n\n  if (keyCode === 3) {\n    return 7\n    /* PauseBreak */\n    ;\n  } else if (browser.isFirefox) {\n    if (keyCode === 59) {\n      return 80\n      /* Semicolon */\n      ;\n    } else if (keyCode === 107) {\n      return 81\n      /* Equal */\n      ;\n    } else if (keyCode === 109) {\n      return 83\n      /* Minus */\n      ;\n    } else if (platform.isMacintosh && keyCode === 224) {\n      return 57\n      /* Meta */\n      ;\n    }\n  } else if (browser.isWebKit) {\n    if (keyCode === 91) {\n      return 57\n      /* Meta */\n      ;\n    } else if (platform.isMacintosh && keyCode === 93) {\n      // the two meta keys in the Mac have different key codes (91 and 93)\n      return 57\n      /* Meta */\n      ;\n    } else if (!platform.isMacintosh && keyCode === 92) {\n      return 57\n      /* Meta */\n      ;\n    }\n  } // cross browser keycodes:\n\n\n  return EVENT_KEY_CODE_MAP[keyCode] || 0\n  /* Unknown */\n  ;\n}\n\nconst ctrlKeyMod = platform.isMacintosh ? 256\n/* WinCtrl */\n: 2048\n/* CtrlCmd */\n;\nconst altKeyMod = 512\n/* Alt */\n;\nconst shiftKeyMod = 1024\n/* Shift */\n;\nconst metaKeyMod = platform.isMacintosh ? 2048\n/* CtrlCmd */\n: 256\n/* WinCtrl */\n;\nexport class StandardKeyboardEvent {\n  constructor(source) {\n    this._standardKeyboardEventBrand = true;\n    let e = source;\n    this.browserEvent = e;\n    this.target = e.target;\n    this.ctrlKey = e.ctrlKey;\n    this.shiftKey = e.shiftKey;\n    this.altKey = e.altKey;\n    this.metaKey = e.metaKey;\n    this.keyCode = extractKeyCode(e);\n    this.code = e.code; // console.info(e.type + \": keyCode: \" + e.keyCode + \", which: \" + e.which + \", charCode: \" + e.charCode + \", detail: \" + e.detail + \" ====> \" + this.keyCode + ' -- ' + KeyCode[this.keyCode]);\n\n    this.ctrlKey = this.ctrlKey || this.keyCode === 5\n    /* Ctrl */\n    ;\n    this.altKey = this.altKey || this.keyCode === 6\n    /* Alt */\n    ;\n    this.shiftKey = this.shiftKey || this.keyCode === 4\n    /* Shift */\n    ;\n    this.metaKey = this.metaKey || this.keyCode === 57\n    /* Meta */\n    ;\n    this._asKeybinding = this._computeKeybinding();\n    this._asRuntimeKeybinding = this._computeRuntimeKeybinding(); // console.log(`code: ${e.code}, keyCode: ${e.keyCode}, key: ${e.key}`);\n  }\n\n  preventDefault() {\n    if (this.browserEvent && this.browserEvent.preventDefault) {\n      this.browserEvent.preventDefault();\n    }\n  }\n\n  stopPropagation() {\n    if (this.browserEvent && this.browserEvent.stopPropagation) {\n      this.browserEvent.stopPropagation();\n    }\n  }\n\n  toKeybinding() {\n    return this._asRuntimeKeybinding;\n  }\n\n  equals(other) {\n    return this._asKeybinding === other;\n  }\n\n  _computeKeybinding() {\n    let key = 0\n    /* Unknown */\n    ;\n\n    if (this.keyCode !== 5\n    /* Ctrl */\n    && this.keyCode !== 4\n    /* Shift */\n    && this.keyCode !== 6\n    /* Alt */\n    && this.keyCode !== 57\n    /* Meta */\n    ) {\n      key = this.keyCode;\n    }\n\n    let result = 0;\n\n    if (this.ctrlKey) {\n      result |= ctrlKeyMod;\n    }\n\n    if (this.altKey) {\n      result |= altKeyMod;\n    }\n\n    if (this.shiftKey) {\n      result |= shiftKeyMod;\n    }\n\n    if (this.metaKey) {\n      result |= metaKeyMod;\n    }\n\n    result |= key;\n    return result;\n  }\n\n  _computeRuntimeKeybinding() {\n    let key = 0\n    /* Unknown */\n    ;\n\n    if (this.keyCode !== 5\n    /* Ctrl */\n    && this.keyCode !== 4\n    /* Shift */\n    && this.keyCode !== 6\n    /* Alt */\n    && this.keyCode !== 57\n    /* Meta */\n    ) {\n      key = this.keyCode;\n    }\n\n    return new SimpleKeybinding(this.ctrlKey, this.shiftKey, this.altKey, this.metaKey, key);\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/base/browser/keyboardEvent.js"],"names":["browser","EVENT_KEY_CODE_MAP","KeyCodeUtils","SimpleKeybinding","platform","extractKeyCode","e","charCode","char","String","fromCharCode","toUpperCase","fromString","keyCode","isFirefox","isMacintosh","isWebKit","ctrlKeyMod","altKeyMod","shiftKeyMod","metaKeyMod","StandardKeyboardEvent","constructor","source","_standardKeyboardEventBrand","browserEvent","target","ctrlKey","shiftKey","altKey","metaKey","code","_asKeybinding","_computeKeybinding","_asRuntimeKeybinding","_computeRuntimeKeybinding","preventDefault","stopPropagation","toKeybinding","equals","other","key","result"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as browser from './browser.js';\nimport { EVENT_KEY_CODE_MAP, KeyCodeUtils } from '../common/keyCodes.js';\nimport { SimpleKeybinding } from '../common/keybindings.js';\nimport * as platform from '../common/platform.js';\nfunction extractKeyCode(e) {\n    if (e.charCode) {\n        // \"keypress\" events mostly\n        let char = String.fromCharCode(e.charCode).toUpperCase();\n        return KeyCodeUtils.fromString(char);\n    }\n    const keyCode = e.keyCode;\n    // browser quirks\n    if (keyCode === 3) {\n        return 7 /* PauseBreak */;\n    }\n    else if (browser.isFirefox) {\n        if (keyCode === 59) {\n            return 80 /* Semicolon */;\n        }\n        else if (keyCode === 107) {\n            return 81 /* Equal */;\n        }\n        else if (keyCode === 109) {\n            return 83 /* Minus */;\n        }\n        else if (platform.isMacintosh && keyCode === 224) {\n            return 57 /* Meta */;\n        }\n    }\n    else if (browser.isWebKit) {\n        if (keyCode === 91) {\n            return 57 /* Meta */;\n        }\n        else if (platform.isMacintosh && keyCode === 93) {\n            // the two meta keys in the Mac have different key codes (91 and 93)\n            return 57 /* Meta */;\n        }\n        else if (!platform.isMacintosh && keyCode === 92) {\n            return 57 /* Meta */;\n        }\n    }\n    // cross browser keycodes:\n    return EVENT_KEY_CODE_MAP[keyCode] || 0 /* Unknown */;\n}\nconst ctrlKeyMod = (platform.isMacintosh ? 256 /* WinCtrl */ : 2048 /* CtrlCmd */);\nconst altKeyMod = 512 /* Alt */;\nconst shiftKeyMod = 1024 /* Shift */;\nconst metaKeyMod = (platform.isMacintosh ? 2048 /* CtrlCmd */ : 256 /* WinCtrl */);\nexport class StandardKeyboardEvent {\n    constructor(source) {\n        this._standardKeyboardEventBrand = true;\n        let e = source;\n        this.browserEvent = e;\n        this.target = e.target;\n        this.ctrlKey = e.ctrlKey;\n        this.shiftKey = e.shiftKey;\n        this.altKey = e.altKey;\n        this.metaKey = e.metaKey;\n        this.keyCode = extractKeyCode(e);\n        this.code = e.code;\n        // console.info(e.type + \": keyCode: \" + e.keyCode + \", which: \" + e.which + \", charCode: \" + e.charCode + \", detail: \" + e.detail + \" ====> \" + this.keyCode + ' -- ' + KeyCode[this.keyCode]);\n        this.ctrlKey = this.ctrlKey || this.keyCode === 5 /* Ctrl */;\n        this.altKey = this.altKey || this.keyCode === 6 /* Alt */;\n        this.shiftKey = this.shiftKey || this.keyCode === 4 /* Shift */;\n        this.metaKey = this.metaKey || this.keyCode === 57 /* Meta */;\n        this._asKeybinding = this._computeKeybinding();\n        this._asRuntimeKeybinding = this._computeRuntimeKeybinding();\n        // console.log(`code: ${e.code}, keyCode: ${e.keyCode}, key: ${e.key}`);\n    }\n    preventDefault() {\n        if (this.browserEvent && this.browserEvent.preventDefault) {\n            this.browserEvent.preventDefault();\n        }\n    }\n    stopPropagation() {\n        if (this.browserEvent && this.browserEvent.stopPropagation) {\n            this.browserEvent.stopPropagation();\n        }\n    }\n    toKeybinding() {\n        return this._asRuntimeKeybinding;\n    }\n    equals(other) {\n        return this._asKeybinding === other;\n    }\n    _computeKeybinding() {\n        let key = 0 /* Unknown */;\n        if (this.keyCode !== 5 /* Ctrl */ && this.keyCode !== 4 /* Shift */ && this.keyCode !== 6 /* Alt */ && this.keyCode !== 57 /* Meta */) {\n            key = this.keyCode;\n        }\n        let result = 0;\n        if (this.ctrlKey) {\n            result |= ctrlKeyMod;\n        }\n        if (this.altKey) {\n            result |= altKeyMod;\n        }\n        if (this.shiftKey) {\n            result |= shiftKeyMod;\n        }\n        if (this.metaKey) {\n            result |= metaKeyMod;\n        }\n        result |= key;\n        return result;\n    }\n    _computeRuntimeKeybinding() {\n        let key = 0 /* Unknown */;\n        if (this.keyCode !== 5 /* Ctrl */ && this.keyCode !== 4 /* Shift */ && this.keyCode !== 6 /* Alt */ && this.keyCode !== 57 /* Meta */) {\n            key = this.keyCode;\n        }\n        return new SimpleKeybinding(this.ctrlKey, this.shiftKey, this.altKey, this.metaKey, key);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}