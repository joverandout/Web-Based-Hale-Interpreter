{"ast":null,"code":"/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\n\nvar __reExport = (target, module, copyDefault, desc) => {\n  if (module && typeof module === \"object\" || typeof module === \"function\") {\n    for (let key of __getOwnPropNames(module)) if (!__hasOwnProp.call(target, key) && (copyDefault || key !== \"default\")) __defProp(target, key, {\n      get: () => module[key],\n      enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable\n    });\n  }\n\n  return target;\n}; // src/fillers/monaco-editor-core.ts\n\n\nvar monaco_editor_core_exports = {};\n\n__reExport(monaco_editor_core_exports, monaco_editor_core_star);\n\nimport * as monaco_editor_core_star from \"../../editor/editor.api.js\"; // src/basic-languages/typescript/typescript.ts\n\nvar conf = {\n  wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"]],\n  onEnterRules: [{\n    beforeText: /^\\s*\\/\\*\\*(?!\\/)([^\\*]|\\*(?!\\/))*$/,\n    afterText: /^\\s*\\*\\/$/,\n    action: {\n      indentAction: monaco_editor_core_exports.languages.IndentAction.IndentOutdent,\n      appendText: \" * \"\n    }\n  }, {\n    beforeText: /^\\s*\\/\\*\\*(?!\\/)([^\\*]|\\*(?!\\/))*$/,\n    action: {\n      indentAction: monaco_editor_core_exports.languages.IndentAction.None,\n      appendText: \" * \"\n    }\n  }, {\n    beforeText: /^(\\t|(\\ \\ ))*\\ \\*(\\ ([^\\*]|\\*(?!\\/))*)?$/,\n    action: {\n      indentAction: monaco_editor_core_exports.languages.IndentAction.None,\n      appendText: \"* \"\n    }\n  }, {\n    beforeText: /^(\\t|(\\ \\ ))*\\ \\*\\/\\s*$/,\n    action: {\n      indentAction: monaco_editor_core_exports.languages.IndentAction.None,\n      removeText: 1\n    }\n  }],\n  autoClosingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: '\"',\n    close: '\"',\n    notIn: [\"string\"]\n  }, {\n    open: \"'\",\n    close: \"'\",\n    notIn: [\"string\", \"comment\"]\n  }, {\n    open: \"`\",\n    close: \"`\",\n    notIn: [\"string\", \"comment\"]\n  }, {\n    open: \"/**\",\n    close: \" */\",\n    notIn: [\"string\"]\n  }],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*//\\\\s*#?region\\\\b\"),\n      end: new RegExp(\"^\\\\s*//\\\\s*#?endregion\\\\b\")\n    }\n  }\n};\nvar language = {\n  defaultToken: \"invalid\",\n  tokenPostfix: \".ts\",\n  keywords: [\"abstract\", \"any\", \"as\", \"asserts\", \"bigint\", \"boolean\", \"break\", \"case\", \"catch\", \"class\", \"continue\", \"const\", \"constructor\", \"debugger\", \"declare\", \"default\", \"delete\", \"do\", \"else\", \"enum\", \"export\", \"extends\", \"false\", \"finally\", \"for\", \"from\", \"function\", \"get\", \"if\", \"implements\", \"import\", \"in\", \"infer\", \"instanceof\", \"interface\", \"is\", \"keyof\", \"let\", \"module\", \"namespace\", \"never\", \"new\", \"null\", \"number\", \"object\", \"package\", \"private\", \"protected\", \"public\", \"override\", \"readonly\", \"require\", \"global\", \"return\", \"set\", \"static\", \"string\", \"super\", \"switch\", \"symbol\", \"this\", \"throw\", \"true\", \"try\", \"type\", \"typeof\", \"undefined\", \"unique\", \"unknown\", \"var\", \"void\", \"while\", \"with\", \"yield\", \"async\", \"await\", \"of\"],\n  operators: [\"<=\", \">=\", \"==\", \"!=\", \"===\", \"!==\", \"=>\", \"+\", \"-\", \"**\", \"*\", \"/\", \"%\", \"++\", \"--\", \"<<\", \"</\", \">>\", \">>>\", \"&\", \"|\", \"^\", \"!\", \"~\", \"&&\", \"||\", \"??\", \"?\", \":\", \"=\", \"+=\", \"-=\", \"*=\", \"**=\", \"/=\", \"%=\", \"<<=\", \">>=\", \">>>=\", \"&=\", \"|=\", \"^=\", \"@\"],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  digits: /\\d+(_+\\d+)*/,\n  octaldigits: /[0-7]+(_+[0-7]+)*/,\n  binarydigits: /[0-1]+(_+[0-1]+)*/,\n  hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,\n  regexpctl: /[(){}\\[\\]\\$\\^|\\-*+?\\.]/,\n  regexpesc: /\\\\(?:[bBdDfnrstvwWn0\\\\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})/,\n  tokenizer: {\n    root: [[/[{}]/, \"delimiter.bracket\"], {\n      include: \"common\"\n    }],\n    common: [[/[a-z_$][\\w$]*/, {\n      cases: {\n        \"@keywords\": \"keyword\",\n        \"@default\": \"identifier\"\n      }\n    }], [/[A-Z][\\w\\$]*/, \"type.identifier\"], {\n      include: \"@whitespace\"\n    }, [/\\/(?=([^\\\\\\/]|\\\\.)+\\/([dgimsuy]*)(\\s*)(\\.|;|,|\\)|\\]|\\}|$))/, {\n      token: \"regexp\",\n      bracket: \"@open\",\n      next: \"@regexp\"\n    }], [/[()\\[\\]]/, \"@brackets\"], [/[<>](?!@symbols)/, \"@brackets\"], [/!(?=([^=]|$))/, \"delimiter\"], [/@symbols/, {\n      cases: {\n        \"@operators\": \"delimiter\",\n        \"@default\": \"\"\n      }\n    }], [/(@digits)[eE]([\\-+]?(@digits))?/, \"number.float\"], [/(@digits)\\.(@digits)([eE][\\-+]?(@digits))?/, \"number.float\"], [/0[xX](@hexdigits)n?/, \"number.hex\"], [/0[oO]?(@octaldigits)n?/, \"number.octal\"], [/0[bB](@binarydigits)n?/, \"number.binary\"], [/(@digits)n?/, \"number\"], [/[;,.]/, \"delimiter\"], [/\"([^\"\\\\]|\\\\.)*$/, \"string.invalid\"], [/'([^'\\\\]|\\\\.)*$/, \"string.invalid\"], [/\"/, \"string\", \"@string_double\"], [/'/, \"string\", \"@string_single\"], [/`/, \"string\", \"@string_backtick\"]],\n    whitespace: [[/[ \\t\\r\\n]+/, \"\"], [/\\/\\*\\*(?!\\/)/, \"comment.doc\", \"@jsdoc\"], [/\\/\\*/, \"comment\", \"@comment\"], [/\\/\\/.*$/, \"comment\"]],\n    comment: [[/[^\\/*]+/, \"comment\"], [/\\*\\//, \"comment\", \"@pop\"], [/[\\/*]/, \"comment\"]],\n    jsdoc: [[/[^\\/*]+/, \"comment.doc\"], [/\\*\\//, \"comment.doc\", \"@pop\"], [/[\\/*]/, \"comment.doc\"]],\n    regexp: [[/(\\{)(\\d+(?:,\\d*)?)(\\})/, [\"regexp.escape.control\", \"regexp.escape.control\", \"regexp.escape.control\"]], [/(\\[)(\\^?)(?=(?:[^\\]\\\\\\/]|\\\\.)+)/, [\"regexp.escape.control\", {\n      token: \"regexp.escape.control\",\n      next: \"@regexrange\"\n    }]], [/(\\()(\\?:|\\?=|\\?!)/, [\"regexp.escape.control\", \"regexp.escape.control\"]], [/[()]/, \"regexp.escape.control\"], [/@regexpctl/, \"regexp.escape.control\"], [/[^\\\\\\/]/, \"regexp\"], [/@regexpesc/, \"regexp.escape\"], [/\\\\\\./, \"regexp.invalid\"], [/(\\/)([dgimsuy]*)/, [{\n      token: \"regexp\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }, \"keyword.other\"]]],\n    regexrange: [[/-/, \"regexp.escape.control\"], [/\\^/, \"regexp.invalid\"], [/@regexpesc/, \"regexp.escape\"], [/[^\\]]/, \"regexp\"], [/\\]/, {\n      token: \"regexp.escape.control\",\n      next: \"@pop\",\n      bracket: \"@close\"\n    }]],\n    string_double: [[/[^\\\\\"]+/, \"string\"], [/@escapes/, \"string.escape\"], [/\\\\./, \"string.escape.invalid\"], [/\"/, \"string\", \"@pop\"]],\n    string_single: [[/[^\\\\']+/, \"string\"], [/@escapes/, \"string.escape\"], [/\\\\./, \"string.escape.invalid\"], [/'/, \"string\", \"@pop\"]],\n    string_backtick: [[/\\$\\{/, {\n      token: \"delimiter.bracket\",\n      next: \"@bracketCounting\"\n    }], [/[^\\\\`$]+/, \"string\"], [/@escapes/, \"string.escape\"], [/\\\\./, \"string.escape.invalid\"], [/`/, \"string\", \"@pop\"]],\n    bracketCounting: [[/\\{/, \"delimiter.bracket\", \"@bracketCounting\"], [/\\}/, \"delimiter.bracket\", \"@pop\"], {\n      include: \"common\"\n    }]\n  }\n};\nexport { conf, language };","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/basic-languages/typescript/typescript.js"],"names":["__defProp","Object","defineProperty","__getOwnPropDesc","getOwnPropertyDescriptor","__getOwnPropNames","getOwnPropertyNames","__hasOwnProp","prototype","hasOwnProperty","__reExport","target","module","copyDefault","desc","key","call","get","enumerable","monaco_editor_core_exports","monaco_editor_core_star","conf","wordPattern","comments","lineComment","blockComment","brackets","onEnterRules","beforeText","afterText","action","indentAction","languages","IndentAction","IndentOutdent","appendText","None","removeText","autoClosingPairs","open","close","notIn","folding","markers","start","RegExp","end","language","defaultToken","tokenPostfix","keywords","operators","symbols","escapes","digits","octaldigits","binarydigits","hexdigits","regexpctl","regexpesc","tokenizer","root","include","common","cases","token","bracket","next","whitespace","comment","jsdoc","regexp","regexrange","string_double","string_single","string_backtick","bracketCounting"],"mappings":"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","sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __reExport = (target, module, copyDefault, desc) => {\n  if (module && typeof module === \"object\" || typeof module === \"function\") {\n    for (let key of __getOwnPropNames(module))\n      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== \"default\"))\n        __defProp(target, key, { get: () => module[key], enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable });\n  }\n  return target;\n};\n\n// src/fillers/monaco-editor-core.ts\nvar monaco_editor_core_exports = {};\n__reExport(monaco_editor_core_exports, monaco_editor_core_star);\nimport * as monaco_editor_core_star from \"../../editor/editor.api.js\";\n\n// src/basic-languages/typescript/typescript.ts\nvar conf = {\n  wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"]\n  ],\n  onEnterRules: [\n    {\n      beforeText: /^\\s*\\/\\*\\*(?!\\/)([^\\*]|\\*(?!\\/))*$/,\n      afterText: /^\\s*\\*\\/$/,\n      action: {\n        indentAction: monaco_editor_core_exports.languages.IndentAction.IndentOutdent,\n        appendText: \" * \"\n      }\n    },\n    {\n      beforeText: /^\\s*\\/\\*\\*(?!\\/)([^\\*]|\\*(?!\\/))*$/,\n      action: {\n        indentAction: monaco_editor_core_exports.languages.IndentAction.None,\n        appendText: \" * \"\n      }\n    },\n    {\n      beforeText: /^(\\t|(\\ \\ ))*\\ \\*(\\ ([^\\*]|\\*(?!\\/))*)?$/,\n      action: {\n        indentAction: monaco_editor_core_exports.languages.IndentAction.None,\n        appendText: \"* \"\n      }\n    },\n    {\n      beforeText: /^(\\t|(\\ \\ ))*\\ \\*\\/\\s*$/,\n      action: {\n        indentAction: monaco_editor_core_exports.languages.IndentAction.None,\n        removeText: 1\n      }\n    }\n  ],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"', notIn: [\"string\"] },\n    { open: \"'\", close: \"'\", notIn: [\"string\", \"comment\"] },\n    { open: \"`\", close: \"`\", notIn: [\"string\", \"comment\"] },\n    { open: \"/**\", close: \" */\", notIn: [\"string\"] }\n  ],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*//\\\\s*#?region\\\\b\"),\n      end: new RegExp(\"^\\\\s*//\\\\s*#?endregion\\\\b\")\n    }\n  }\n};\nvar language = {\n  defaultToken: \"invalid\",\n  tokenPostfix: \".ts\",\n  keywords: [\n    \"abstract\",\n    \"any\",\n    \"as\",\n    \"asserts\",\n    \"bigint\",\n    \"boolean\",\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"class\",\n    \"continue\",\n    \"const\",\n    \"constructor\",\n    \"debugger\",\n    \"declare\",\n    \"default\",\n    \"delete\",\n    \"do\",\n    \"else\",\n    \"enum\",\n    \"export\",\n    \"extends\",\n    \"false\",\n    \"finally\",\n    \"for\",\n    \"from\",\n    \"function\",\n    \"get\",\n    \"if\",\n    \"implements\",\n    \"import\",\n    \"in\",\n    \"infer\",\n    \"instanceof\",\n    \"interface\",\n    \"is\",\n    \"keyof\",\n    \"let\",\n    \"module\",\n    \"namespace\",\n    \"never\",\n    \"new\",\n    \"null\",\n    \"number\",\n    \"object\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"override\",\n    \"readonly\",\n    \"require\",\n    \"global\",\n    \"return\",\n    \"set\",\n    \"static\",\n    \"string\",\n    \"super\",\n    \"switch\",\n    \"symbol\",\n    \"this\",\n    \"throw\",\n    \"true\",\n    \"try\",\n    \"type\",\n    \"typeof\",\n    \"undefined\",\n    \"unique\",\n    \"unknown\",\n    \"var\",\n    \"void\",\n    \"while\",\n    \"with\",\n    \"yield\",\n    \"async\",\n    \"await\",\n    \"of\"\n  ],\n  operators: [\n    \"<=\",\n    \">=\",\n    \"==\",\n    \"!=\",\n    \"===\",\n    \"!==\",\n    \"=>\",\n    \"+\",\n    \"-\",\n    \"**\",\n    \"*\",\n    \"/\",\n    \"%\",\n    \"++\",\n    \"--\",\n    \"<<\",\n    \"</\",\n    \">>\",\n    \">>>\",\n    \"&\",\n    \"|\",\n    \"^\",\n    \"!\",\n    \"~\",\n    \"&&\",\n    \"||\",\n    \"??\",\n    \"?\",\n    \":\",\n    \"=\",\n    \"+=\",\n    \"-=\",\n    \"*=\",\n    \"**=\",\n    \"/=\",\n    \"%=\",\n    \"<<=\",\n    \">>=\",\n    \">>>=\",\n    \"&=\",\n    \"|=\",\n    \"^=\",\n    \"@\"\n  ],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  digits: /\\d+(_+\\d+)*/,\n  octaldigits: /[0-7]+(_+[0-7]+)*/,\n  binarydigits: /[0-1]+(_+[0-1]+)*/,\n  hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,\n  regexpctl: /[(){}\\[\\]\\$\\^|\\-*+?\\.]/,\n  regexpesc: /\\\\(?:[bBdDfnrstvwWn0\\\\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})/,\n  tokenizer: {\n    root: [[/[{}]/, \"delimiter.bracket\"], { include: \"common\" }],\n    common: [\n      [\n        /[a-z_$][\\w$]*/,\n        {\n          cases: {\n            \"@keywords\": \"keyword\",\n            \"@default\": \"identifier\"\n          }\n        }\n      ],\n      [/[A-Z][\\w\\$]*/, \"type.identifier\"],\n      { include: \"@whitespace\" },\n      [\n        /\\/(?=([^\\\\\\/]|\\\\.)+\\/([dgimsuy]*)(\\s*)(\\.|;|,|\\)|\\]|\\}|$))/,\n        { token: \"regexp\", bracket: \"@open\", next: \"@regexp\" }\n      ],\n      [/[()\\[\\]]/, \"@brackets\"],\n      [/[<>](?!@symbols)/, \"@brackets\"],\n      [/!(?=([^=]|$))/, \"delimiter\"],\n      [\n        /@symbols/,\n        {\n          cases: {\n            \"@operators\": \"delimiter\",\n            \"@default\": \"\"\n          }\n        }\n      ],\n      [/(@digits)[eE]([\\-+]?(@digits))?/, \"number.float\"],\n      [/(@digits)\\.(@digits)([eE][\\-+]?(@digits))?/, \"number.float\"],\n      [/0[xX](@hexdigits)n?/, \"number.hex\"],\n      [/0[oO]?(@octaldigits)n?/, \"number.octal\"],\n      [/0[bB](@binarydigits)n?/, \"number.binary\"],\n      [/(@digits)n?/, \"number\"],\n      [/[;,.]/, \"delimiter\"],\n      [/\"([^\"\\\\]|\\\\.)*$/, \"string.invalid\"],\n      [/'([^'\\\\]|\\\\.)*$/, \"string.invalid\"],\n      [/\"/, \"string\", \"@string_double\"],\n      [/'/, \"string\", \"@string_single\"],\n      [/`/, \"string\", \"@string_backtick\"]\n    ],\n    whitespace: [\n      [/[ \\t\\r\\n]+/, \"\"],\n      [/\\/\\*\\*(?!\\/)/, \"comment.doc\", \"@jsdoc\"],\n      [/\\/\\*/, \"comment\", \"@comment\"],\n      [/\\/\\/.*$/, \"comment\"]\n    ],\n    comment: [\n      [/[^\\/*]+/, \"comment\"],\n      [/\\*\\//, \"comment\", \"@pop\"],\n      [/[\\/*]/, \"comment\"]\n    ],\n    jsdoc: [\n      [/[^\\/*]+/, \"comment.doc\"],\n      [/\\*\\//, \"comment.doc\", \"@pop\"],\n      [/[\\/*]/, \"comment.doc\"]\n    ],\n    regexp: [\n      [\n        /(\\{)(\\d+(?:,\\d*)?)(\\})/,\n        [\"regexp.escape.control\", \"regexp.escape.control\", \"regexp.escape.control\"]\n      ],\n      [\n        /(\\[)(\\^?)(?=(?:[^\\]\\\\\\/]|\\\\.)+)/,\n        [\"regexp.escape.control\", { token: \"regexp.escape.control\", next: \"@regexrange\" }]\n      ],\n      [/(\\()(\\?:|\\?=|\\?!)/, [\"regexp.escape.control\", \"regexp.escape.control\"]],\n      [/[()]/, \"regexp.escape.control\"],\n      [/@regexpctl/, \"regexp.escape.control\"],\n      [/[^\\\\\\/]/, \"regexp\"],\n      [/@regexpesc/, \"regexp.escape\"],\n      [/\\\\\\./, \"regexp.invalid\"],\n      [/(\\/)([dgimsuy]*)/, [{ token: \"regexp\", bracket: \"@close\", next: \"@pop\" }, \"keyword.other\"]]\n    ],\n    regexrange: [\n      [/-/, \"regexp.escape.control\"],\n      [/\\^/, \"regexp.invalid\"],\n      [/@regexpesc/, \"regexp.escape\"],\n      [/[^\\]]/, \"regexp\"],\n      [\n        /\\]/,\n        {\n          token: \"regexp.escape.control\",\n          next: \"@pop\",\n          bracket: \"@close\"\n        }\n      ]\n    ],\n    string_double: [\n      [/[^\\\\\"]+/, \"string\"],\n      [/@escapes/, \"string.escape\"],\n      [/\\\\./, \"string.escape.invalid\"],\n      [/\"/, \"string\", \"@pop\"]\n    ],\n    string_single: [\n      [/[^\\\\']+/, \"string\"],\n      [/@escapes/, \"string.escape\"],\n      [/\\\\./, \"string.escape.invalid\"],\n      [/'/, \"string\", \"@pop\"]\n    ],\n    string_backtick: [\n      [/\\$\\{/, { token: \"delimiter.bracket\", next: \"@bracketCounting\" }],\n      [/[^\\\\`$]+/, \"string\"],\n      [/@escapes/, \"string.escape\"],\n      [/\\\\./, \"string.escape.invalid\"],\n      [/`/, \"string\", \"@pop\"]\n    ],\n    bracketCounting: [\n      [/\\{/, \"delimiter.bracket\", \"@bracketCounting\"],\n      [/\\}/, \"delimiter.bracket\", \"@pop\"],\n      { include: \"common\" }\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"]},"metadata":{},"sourceType":"module"}