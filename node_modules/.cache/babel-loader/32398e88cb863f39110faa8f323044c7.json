{"ast":null,"code":"/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n// src/basic-languages/sb/sb.ts\nvar conf = {\n  comments: {\n    lineComment: \"'\"\n  },\n  brackets: [[\"(\", \")\"], [\"[\", \"]\"], [\"If\", \"EndIf\"], [\"While\", \"EndWhile\"], [\"For\", \"EndFor\"], [\"Sub\", \"EndSub\"]],\n  autoClosingPairs: [{\n    open: '\"',\n    close: '\"',\n    notIn: [\"string\", \"comment\"]\n  }, {\n    open: \"(\",\n    close: \")\",\n    notIn: [\"string\", \"comment\"]\n  }, {\n    open: \"[\",\n    close: \"]\",\n    notIn: [\"string\", \"comment\"]\n  }]\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".sb\",\n  ignoreCase: true,\n  brackets: [{\n    token: \"delimiter.array\",\n    open: \"[\",\n    close: \"]\"\n  }, {\n    token: \"delimiter.parenthesis\",\n    open: \"(\",\n    close: \")\"\n  }, {\n    token: \"keyword.tag-if\",\n    open: \"If\",\n    close: \"EndIf\"\n  }, {\n    token: \"keyword.tag-while\",\n    open: \"While\",\n    close: \"EndWhile\"\n  }, {\n    token: \"keyword.tag-for\",\n    open: \"For\",\n    close: \"EndFor\"\n  }, {\n    token: \"keyword.tag-sub\",\n    open: \"Sub\",\n    close: \"EndSub\"\n  }],\n  keywords: [\"Else\", \"ElseIf\", \"EndFor\", \"EndIf\", \"EndSub\", \"EndWhile\", \"For\", \"Goto\", \"If\", \"Step\", \"Sub\", \"Then\", \"To\", \"While\"],\n  tagwords: [\"If\", \"Sub\", \"While\", \"For\"],\n  operators: [\">\", \"<\", \"<>\", \"<=\", \">=\", \"And\", \"Or\", \"+\", \"-\", \"*\", \"/\", \"=\"],\n  identifier: /[a-zA-Z_][\\w]*/,\n  symbols: /[=><:+\\-*\\/%\\.,]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  tokenizer: {\n    root: [{\n      include: \"@whitespace\"\n    }, [/(@identifier)(?=[.])/, \"type\"], [/@identifier/, {\n      cases: {\n        \"@keywords\": {\n          token: \"keyword.$0\"\n        },\n        \"@operators\": \"operator\",\n        \"@default\": \"variable.name\"\n      }\n    }], [/([.])(@identifier)/, {\n      cases: {\n        $2: [\"delimiter\", \"type.member\"],\n        \"@default\": \"\"\n      }\n    }], [/\\d*\\.\\d+/, \"number.float\"], [/\\d+/, \"number\"], [/[()\\[\\]]/, \"@brackets\"], [/@symbols/, {\n      cases: {\n        \"@operators\": \"operator\",\n        \"@default\": \"delimiter\"\n      }\n    }], [/\"([^\"\\\\]|\\\\.)*$/, \"string.invalid\"], [/\"/, \"string\", \"@string\"]],\n    whitespace: [[/[ \\t\\r\\n]+/, \"\"], [/(\\').*$/, \"comment\"]],\n    string: [[/[^\\\\\"]+/, \"string\"], [/@escapes/, \"string.escape\"], [/\\\\./, \"string.escape.invalid\"], [/\"C?/, \"string\", \"@pop\"]]\n  }\n};\nexport { conf, language };","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/basic-languages/sb/sb.js"],"names":["conf","comments","lineComment","brackets","autoClosingPairs","open","close","notIn","language","defaultToken","tokenPostfix","ignoreCase","token","keywords","tagwords","operators","identifier","symbols","escapes","tokenizer","root","include","cases","$2","whitespace","string"],"mappings":"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","sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/sb/sb.ts\nvar conf = {\n  comments: {\n    lineComment: \"'\"\n  },\n  brackets: [\n    [\"(\", \")\"],\n    [\"[\", \"]\"],\n    [\"If\", \"EndIf\"],\n    [\"While\", \"EndWhile\"],\n    [\"For\", \"EndFor\"],\n    [\"Sub\", \"EndSub\"]\n  ],\n  autoClosingPairs: [\n    { open: '\"', close: '\"', notIn: [\"string\", \"comment\"] },\n    { open: \"(\", close: \")\", notIn: [\"string\", \"comment\"] },\n    { open: \"[\", close: \"]\", notIn: [\"string\", \"comment\"] }\n  ]\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".sb\",\n  ignoreCase: true,\n  brackets: [\n    { token: \"delimiter.array\", open: \"[\", close: \"]\" },\n    { token: \"delimiter.parenthesis\", open: \"(\", close: \")\" },\n    { token: \"keyword.tag-if\", open: \"If\", close: \"EndIf\" },\n    { token: \"keyword.tag-while\", open: \"While\", close: \"EndWhile\" },\n    { token: \"keyword.tag-for\", open: \"For\", close: \"EndFor\" },\n    { token: \"keyword.tag-sub\", open: \"Sub\", close: \"EndSub\" }\n  ],\n  keywords: [\n    \"Else\",\n    \"ElseIf\",\n    \"EndFor\",\n    \"EndIf\",\n    \"EndSub\",\n    \"EndWhile\",\n    \"For\",\n    \"Goto\",\n    \"If\",\n    \"Step\",\n    \"Sub\",\n    \"Then\",\n    \"To\",\n    \"While\"\n  ],\n  tagwords: [\"If\", \"Sub\", \"While\", \"For\"],\n  operators: [\">\", \"<\", \"<>\", \"<=\", \">=\", \"And\", \"Or\", \"+\", \"-\", \"*\", \"/\", \"=\"],\n  identifier: /[a-zA-Z_][\\w]*/,\n  symbols: /[=><:+\\-*\\/%\\.,]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  tokenizer: {\n    root: [\n      { include: \"@whitespace\" },\n      [/(@identifier)(?=[.])/, \"type\"],\n      [\n        /@identifier/,\n        {\n          cases: {\n            \"@keywords\": { token: \"keyword.$0\" },\n            \"@operators\": \"operator\",\n            \"@default\": \"variable.name\"\n          }\n        }\n      ],\n      [\n        /([.])(@identifier)/,\n        {\n          cases: {\n            $2: [\"delimiter\", \"type.member\"],\n            \"@default\": \"\"\n          }\n        }\n      ],\n      [/\\d*\\.\\d+/, \"number.float\"],\n      [/\\d+/, \"number\"],\n      [/[()\\[\\]]/, \"@brackets\"],\n      [\n        /@symbols/,\n        {\n          cases: {\n            \"@operators\": \"operator\",\n            \"@default\": \"delimiter\"\n          }\n        }\n      ],\n      [/\"([^\"\\\\]|\\\\.)*$/, \"string.invalid\"],\n      [/\"/, \"string\", \"@string\"]\n    ],\n    whitespace: [\n      [/[ \\t\\r\\n]+/, \"\"],\n      [/(\\').*$/, \"comment\"]\n    ],\n    string: [\n      [/[^\\\\\"]+/, \"string\"],\n      [/@escapes/, \"string.escape\"],\n      [/\\\\./, \"string.escape.invalid\"],\n      [/\"C?/, \"string\", \"@pop\"]\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"]},"metadata":{},"sourceType":"module"}