{"ast":null,"code":"/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n// src/basic-languages/csharp/csharp.ts\nvar conf = {\n  wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\#\\$\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"]],\n  autoClosingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: \"'\",\n    close: \"'\",\n    notIn: [\"string\", \"comment\"]\n  }, {\n    open: '\"',\n    close: '\"',\n    notIn: [\"string\", \"comment\"]\n  }],\n  surroundingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: \"<\",\n    close: \">\"\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*#region\\\\b\"),\n      end: new RegExp(\"^\\\\s*#endregion\\\\b\")\n    }\n  }\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".cs\",\n  brackets: [{\n    open: \"{\",\n    close: \"}\",\n    token: \"delimiter.curly\"\n  }, {\n    open: \"[\",\n    close: \"]\",\n    token: \"delimiter.square\"\n  }, {\n    open: \"(\",\n    close: \")\",\n    token: \"delimiter.parenthesis\"\n  }, {\n    open: \"<\",\n    close: \">\",\n    token: \"delimiter.angle\"\n  }],\n  keywords: [\"extern\", \"alias\", \"using\", \"bool\", \"decimal\", \"sbyte\", \"byte\", \"short\", \"ushort\", \"int\", \"uint\", \"long\", \"ulong\", \"char\", \"float\", \"double\", \"object\", \"dynamic\", \"string\", \"assembly\", \"is\", \"as\", \"ref\", \"out\", \"this\", \"base\", \"new\", \"typeof\", \"void\", \"checked\", \"unchecked\", \"default\", \"delegate\", \"var\", \"const\", \"if\", \"else\", \"switch\", \"case\", \"while\", \"do\", \"for\", \"foreach\", \"in\", \"break\", \"continue\", \"goto\", \"return\", \"throw\", \"try\", \"catch\", \"finally\", \"lock\", \"yield\", \"from\", \"let\", \"where\", \"join\", \"on\", \"equals\", \"into\", \"orderby\", \"ascending\", \"descending\", \"select\", \"group\", \"by\", \"namespace\", \"partial\", \"class\", \"field\", \"event\", \"method\", \"param\", \"public\", \"protected\", \"internal\", \"private\", \"abstract\", \"sealed\", \"static\", \"struct\", \"readonly\", \"volatile\", \"virtual\", \"override\", \"params\", \"get\", \"set\", \"add\", \"remove\", \"operator\", \"true\", \"false\", \"implicit\", \"explicit\", \"interface\", \"enum\", \"null\", \"async\", \"await\", \"fixed\", \"sizeof\", \"stackalloc\", \"unsafe\", \"nameof\", \"when\"],\n  namespaceFollows: [\"namespace\", \"using\"],\n  parenFollows: [\"if\", \"for\", \"while\", \"switch\", \"foreach\", \"using\", \"catch\", \"when\"],\n  operators: [\"=\", \"??\", \"||\", \"&&\", \"|\", \"^\", \"&\", \"==\", \"!=\", \"<=\", \">=\", \"<<\", \"+\", \"-\", \"*\", \"/\", \"%\", \"!\", \"~\", \"++\", \"--\", \"+=\", \"-=\", \"*=\", \"/=\", \"%=\", \"&=\", \"|=\", \"^=\", \"<<=\", \">>=\", \">>\", \"=>\"],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  tokenizer: {\n    root: [[/\\@?[a-zA-Z_]\\w*/, {\n      cases: {\n        \"@namespaceFollows\": {\n          token: \"keyword.$0\",\n          next: \"@namespace\"\n        },\n        \"@keywords\": {\n          token: \"keyword.$0\",\n          next: \"@qualified\"\n        },\n        \"@default\": {\n          token: \"identifier\",\n          next: \"@qualified\"\n        }\n      }\n    }], {\n      include: \"@whitespace\"\n    }, [/}/, {\n      cases: {\n        \"$S2==interpolatedstring\": {\n          token: \"string.quote\",\n          next: \"@pop\"\n        },\n        \"$S2==litinterpstring\": {\n          token: \"string.quote\",\n          next: \"@pop\"\n        },\n        \"@default\": \"@brackets\"\n      }\n    }], [/[{}()\\[\\]]/, \"@brackets\"], [/[<>](?!@symbols)/, \"@brackets\"], [/@symbols/, {\n      cases: {\n        \"@operators\": \"delimiter\",\n        \"@default\": \"\"\n      }\n    }], [/[0-9_]*\\.[0-9_]+([eE][\\-+]?\\d+)?[fFdD]?/, \"number.float\"], [/0[xX][0-9a-fA-F_]+/, \"number.hex\"], [/0[bB][01_]+/, \"number.hex\"], [/[0-9_]+/, \"number\"], [/[;,.]/, \"delimiter\"], [/\"([^\"\\\\]|\\\\.)*$/, \"string.invalid\"], [/\"/, {\n      token: \"string.quote\",\n      next: \"@string\"\n    }], [/\\$\\@\"/, {\n      token: \"string.quote\",\n      next: \"@litinterpstring\"\n    }], [/\\@\"/, {\n      token: \"string.quote\",\n      next: \"@litstring\"\n    }], [/\\$\"/, {\n      token: \"string.quote\",\n      next: \"@interpolatedstring\"\n    }], [/'[^\\\\']'/, \"string\"], [/(')(@escapes)(')/, [\"string\", \"string.escape\", \"string\"]], [/'/, \"string.invalid\"]],\n    qualified: [[/[a-zA-Z_][\\w]*/, {\n      cases: {\n        \"@keywords\": {\n          token: \"keyword.$0\"\n        },\n        \"@default\": \"identifier\"\n      }\n    }], [/\\./, \"delimiter\"], [\"\", \"\", \"@pop\"]],\n    namespace: [{\n      include: \"@whitespace\"\n    }, [/[A-Z]\\w*/, \"namespace\"], [/[\\.=]/, \"delimiter\"], [\"\", \"\", \"@pop\"]],\n    comment: [[/[^\\/*]+/, \"comment\"], [\"\\\\*/\", \"comment\", \"@pop\"], [/[\\/*]/, \"comment\"]],\n    string: [[/[^\\\\\"]+/, \"string\"], [/@escapes/, \"string.escape\"], [/\\\\./, \"string.escape.invalid\"], [/\"/, {\n      token: \"string.quote\",\n      next: \"@pop\"\n    }]],\n    litstring: [[/[^\"]+/, \"string\"], [/\"\"/, \"string.escape\"], [/\"/, {\n      token: \"string.quote\",\n      next: \"@pop\"\n    }]],\n    litinterpstring: [[/[^\"{]+/, \"string\"], [/\"\"/, \"string.escape\"], [/{{/, \"string.escape\"], [/}}/, \"string.escape\"], [/{/, {\n      token: \"string.quote\",\n      next: \"root.litinterpstring\"\n    }], [/\"/, {\n      token: \"string.quote\",\n      next: \"@pop\"\n    }]],\n    interpolatedstring: [[/[^\\\\\"{]+/, \"string\"], [/@escapes/, \"string.escape\"], [/\\\\./, \"string.escape.invalid\"], [/{{/, \"string.escape\"], [/}}/, \"string.escape\"], [/{/, {\n      token: \"string.quote\",\n      next: \"root.interpolatedstring\"\n    }], [/\"/, {\n      token: \"string.quote\",\n      next: \"@pop\"\n    }]],\n    whitespace: [[/^[ \\t\\v\\f]*#((r)|(load))(?=\\s)/, \"directive.csx\"], [/^[ \\t\\v\\f]*#\\w.*$/, \"namespace.cpp\"], [/[ \\t\\v\\f\\r\\n]+/, \"\"], [/\\/\\*/, \"comment\", \"@comment\"], [/\\/\\/.*$/, \"comment\"]]\n  }\n};\nexport { conf, language };","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/basic-languages/csharp/csharp.js"],"names":["conf","wordPattern","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","folding","markers","start","RegExp","end","language","defaultToken","tokenPostfix","token","keywords","namespaceFollows","parenFollows","operators","symbols","escapes","tokenizer","root","cases","next","include","qualified","namespace","comment","string","litstring","litinterpstring","interpolatedstring","whitespace"],"mappings":"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","sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/csharp/csharp.ts\nvar conf = {\n  wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\#\\$\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"]\n  ],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"'\", close: \"'\", notIn: [\"string\", \"comment\"] },\n    { open: '\"', close: '\"', notIn: [\"string\", \"comment\"] }\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"<\", close: \">\" },\n    { open: \"'\", close: \"'\" },\n    { open: '\"', close: '\"' }\n  ],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*#region\\\\b\"),\n      end: new RegExp(\"^\\\\s*#endregion\\\\b\")\n    }\n  }\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".cs\",\n  brackets: [\n    { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\n    { open: \"[\", close: \"]\", token: \"delimiter.square\" },\n    { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"<\", close: \">\", token: \"delimiter.angle\" }\n  ],\n  keywords: [\n    \"extern\",\n    \"alias\",\n    \"using\",\n    \"bool\",\n    \"decimal\",\n    \"sbyte\",\n    \"byte\",\n    \"short\",\n    \"ushort\",\n    \"int\",\n    \"uint\",\n    \"long\",\n    \"ulong\",\n    \"char\",\n    \"float\",\n    \"double\",\n    \"object\",\n    \"dynamic\",\n    \"string\",\n    \"assembly\",\n    \"is\",\n    \"as\",\n    \"ref\",\n    \"out\",\n    \"this\",\n    \"base\",\n    \"new\",\n    \"typeof\",\n    \"void\",\n    \"checked\",\n    \"unchecked\",\n    \"default\",\n    \"delegate\",\n    \"var\",\n    \"const\",\n    \"if\",\n    \"else\",\n    \"switch\",\n    \"case\",\n    \"while\",\n    \"do\",\n    \"for\",\n    \"foreach\",\n    \"in\",\n    \"break\",\n    \"continue\",\n    \"goto\",\n    \"return\",\n    \"throw\",\n    \"try\",\n    \"catch\",\n    \"finally\",\n    \"lock\",\n    \"yield\",\n    \"from\",\n    \"let\",\n    \"where\",\n    \"join\",\n    \"on\",\n    \"equals\",\n    \"into\",\n    \"orderby\",\n    \"ascending\",\n    \"descending\",\n    \"select\",\n    \"group\",\n    \"by\",\n    \"namespace\",\n    \"partial\",\n    \"class\",\n    \"field\",\n    \"event\",\n    \"method\",\n    \"param\",\n    \"public\",\n    \"protected\",\n    \"internal\",\n    \"private\",\n    \"abstract\",\n    \"sealed\",\n    \"static\",\n    \"struct\",\n    \"readonly\",\n    \"volatile\",\n    \"virtual\",\n    \"override\",\n    \"params\",\n    \"get\",\n    \"set\",\n    \"add\",\n    \"remove\",\n    \"operator\",\n    \"true\",\n    \"false\",\n    \"implicit\",\n    \"explicit\",\n    \"interface\",\n    \"enum\",\n    \"null\",\n    \"async\",\n    \"await\",\n    \"fixed\",\n    \"sizeof\",\n    \"stackalloc\",\n    \"unsafe\",\n    \"nameof\",\n    \"when\"\n  ],\n  namespaceFollows: [\"namespace\", \"using\"],\n  parenFollows: [\"if\", \"for\", \"while\", \"switch\", \"foreach\", \"using\", \"catch\", \"when\"],\n  operators: [\n    \"=\",\n    \"??\",\n    \"||\",\n    \"&&\",\n    \"|\",\n    \"^\",\n    \"&\",\n    \"==\",\n    \"!=\",\n    \"<=\",\n    \">=\",\n    \"<<\",\n    \"+\",\n    \"-\",\n    \"*\",\n    \"/\",\n    \"%\",\n    \"!\",\n    \"~\",\n    \"++\",\n    \"--\",\n    \"+=\",\n    \"-=\",\n    \"*=\",\n    \"/=\",\n    \"%=\",\n    \"&=\",\n    \"|=\",\n    \"^=\",\n    \"<<=\",\n    \">>=\",\n    \">>\",\n    \"=>\"\n  ],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  tokenizer: {\n    root: [\n      [\n        /\\@?[a-zA-Z_]\\w*/,\n        {\n          cases: {\n            \"@namespaceFollows\": {\n              token: \"keyword.$0\",\n              next: \"@namespace\"\n            },\n            \"@keywords\": {\n              token: \"keyword.$0\",\n              next: \"@qualified\"\n            },\n            \"@default\": { token: \"identifier\", next: \"@qualified\" }\n          }\n        }\n      ],\n      { include: \"@whitespace\" },\n      [\n        /}/,\n        {\n          cases: {\n            \"$S2==interpolatedstring\": {\n              token: \"string.quote\",\n              next: \"@pop\"\n            },\n            \"$S2==litinterpstring\": {\n              token: \"string.quote\",\n              next: \"@pop\"\n            },\n            \"@default\": \"@brackets\"\n          }\n        }\n      ],\n      [/[{}()\\[\\]]/, \"@brackets\"],\n      [/[<>](?!@symbols)/, \"@brackets\"],\n      [\n        /@symbols/,\n        {\n          cases: {\n            \"@operators\": \"delimiter\",\n            \"@default\": \"\"\n          }\n        }\n      ],\n      [/[0-9_]*\\.[0-9_]+([eE][\\-+]?\\d+)?[fFdD]?/, \"number.float\"],\n      [/0[xX][0-9a-fA-F_]+/, \"number.hex\"],\n      [/0[bB][01_]+/, \"number.hex\"],\n      [/[0-9_]+/, \"number\"],\n      [/[;,.]/, \"delimiter\"],\n      [/\"([^\"\\\\]|\\\\.)*$/, \"string.invalid\"],\n      [/\"/, { token: \"string.quote\", next: \"@string\" }],\n      [/\\$\\@\"/, { token: \"string.quote\", next: \"@litinterpstring\" }],\n      [/\\@\"/, { token: \"string.quote\", next: \"@litstring\" }],\n      [/\\$\"/, { token: \"string.quote\", next: \"@interpolatedstring\" }],\n      [/'[^\\\\']'/, \"string\"],\n      [/(')(@escapes)(')/, [\"string\", \"string.escape\", \"string\"]],\n      [/'/, \"string.invalid\"]\n    ],\n    qualified: [\n      [\n        /[a-zA-Z_][\\w]*/,\n        {\n          cases: {\n            \"@keywords\": { token: \"keyword.$0\" },\n            \"@default\": \"identifier\"\n          }\n        }\n      ],\n      [/\\./, \"delimiter\"],\n      [\"\", \"\", \"@pop\"]\n    ],\n    namespace: [\n      { include: \"@whitespace\" },\n      [/[A-Z]\\w*/, \"namespace\"],\n      [/[\\.=]/, \"delimiter\"],\n      [\"\", \"\", \"@pop\"]\n    ],\n    comment: [\n      [/[^\\/*]+/, \"comment\"],\n      [\"\\\\*/\", \"comment\", \"@pop\"],\n      [/[\\/*]/, \"comment\"]\n    ],\n    string: [\n      [/[^\\\\\"]+/, \"string\"],\n      [/@escapes/, \"string.escape\"],\n      [/\\\\./, \"string.escape.invalid\"],\n      [/\"/, { token: \"string.quote\", next: \"@pop\" }]\n    ],\n    litstring: [\n      [/[^\"]+/, \"string\"],\n      [/\"\"/, \"string.escape\"],\n      [/\"/, { token: \"string.quote\", next: \"@pop\" }]\n    ],\n    litinterpstring: [\n      [/[^\"{]+/, \"string\"],\n      [/\"\"/, \"string.escape\"],\n      [/{{/, \"string.escape\"],\n      [/}}/, \"string.escape\"],\n      [/{/, { token: \"string.quote\", next: \"root.litinterpstring\" }],\n      [/\"/, { token: \"string.quote\", next: \"@pop\" }]\n    ],\n    interpolatedstring: [\n      [/[^\\\\\"{]+/, \"string\"],\n      [/@escapes/, \"string.escape\"],\n      [/\\\\./, \"string.escape.invalid\"],\n      [/{{/, \"string.escape\"],\n      [/}}/, \"string.escape\"],\n      [/{/, { token: \"string.quote\", next: \"root.interpolatedstring\" }],\n      [/\"/, { token: \"string.quote\", next: \"@pop\" }]\n    ],\n    whitespace: [\n      [/^[ \\t\\v\\f]*#((r)|(load))(?=\\s)/, \"directive.csx\"],\n      [/^[ \\t\\v\\f]*#\\w.*$/, \"namespace.cpp\"],\n      [/[ \\t\\v\\f\\r\\n]+/, \"\"],\n      [/\\/\\*/, \"comment\", \"@comment\"],\n      [/\\/\\/.*$/, \"comment\"]\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"]},"metadata":{},"sourceType":"module"}