{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CharacterClassifier } from './characterClassifier.js';\nexport class WordCharacterClassifier extends CharacterClassifier {\n  constructor(wordSeparators) {\n    super(0\n    /* Regular */\n    );\n\n    for (let i = 0, len = wordSeparators.length; i < len; i++) {\n      this.set(wordSeparators.charCodeAt(i), 2\n      /* WordSeparator */\n      );\n    }\n\n    this.set(32\n    /* Space */\n    , 1\n    /* Whitespace */\n    );\n    this.set(9\n    /* Tab */\n    , 1\n    /* Whitespace */\n    );\n  }\n\n}\n\nfunction once(computeFn) {\n  const cache = {}; // TODO@Alex unbounded cache\n\n  return input => {\n    if (!cache.hasOwnProperty(input)) {\n      cache[input] = computeFn(input);\n    }\n\n    return cache[input];\n  };\n}\n\nexport const getMapForWordSeparators = once(input => new WordCharacterClassifier(input));","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/common/core/wordCharacterClassifier.js"],"names":["CharacterClassifier","WordCharacterClassifier","constructor","wordSeparators","i","len","length","set","charCodeAt","once","computeFn","cache","input","hasOwnProperty","getMapForWordSeparators"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,mBAAT,QAAoC,0BAApC;AACA,OAAO,MAAMC,uBAAN,SAAsCD,mBAAtC,CAA0D;AAC7DE,EAAAA,WAAW,CAACC,cAAD,EAAiB;AACxB,UAAM;AAAE;AAAR;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGF,cAAc,CAACG,MAArC,EAA6CF,CAAC,GAAGC,GAAjD,EAAsDD,CAAC,EAAvD,EAA2D;AACvD,WAAKG,GAAL,CAASJ,cAAc,CAACK,UAAf,CAA0BJ,CAA1B,CAAT,EAAuC;AAAE;AAAzC;AACH;;AACD,SAAKG,GAAL,CAAS;AAAG;AAAZ,MAAyB;AAAE;AAA3B;AACA,SAAKA,GAAL,CAAS;AAAE;AAAX,MAAsB;AAAE;AAAxB;AACH;;AAR4D;;AAUjE,SAASE,IAAT,CAAcC,SAAd,EAAyB;AACrB,QAAMC,KAAK,GAAG,EAAd,CADqB,CACH;;AAClB,SAAQC,KAAD,IAAW;AACd,QAAI,CAACD,KAAK,CAACE,cAAN,CAAqBD,KAArB,CAAL,EAAkC;AAC9BD,MAAAA,KAAK,CAACC,KAAD,CAAL,GAAeF,SAAS,CAACE,KAAD,CAAxB;AACH;;AACD,WAAOD,KAAK,CAACC,KAAD,CAAZ;AACH,GALD;AAMH;;AACD,OAAO,MAAME,uBAAuB,GAAGL,IAAI,CAAEG,KAAD,IAAW,IAAIX,uBAAJ,CAA4BW,KAA5B,CAAZ,CAApC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CharacterClassifier } from './characterClassifier.js';\nexport class WordCharacterClassifier extends CharacterClassifier {\n    constructor(wordSeparators) {\n        super(0 /* Regular */);\n        for (let i = 0, len = wordSeparators.length; i < len; i++) {\n            this.set(wordSeparators.charCodeAt(i), 2 /* WordSeparator */);\n        }\n        this.set(32 /* Space */, 1 /* Whitespace */);\n        this.set(9 /* Tab */, 1 /* Whitespace */);\n    }\n}\nfunction once(computeFn) {\n    const cache = {}; // TODO@Alex unbounded cache\n    return (input) => {\n        if (!cache.hasOwnProperty(input)) {\n            cache[input] = computeFn(input);\n        }\n        return cache[input];\n    };\n}\nexport const getMapForWordSeparators = once((input) => new WordCharacterClassifier(input));\n"]},"metadata":{},"sourceType":"module"}