{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { IndentAction } from '../languageConfiguration.js';\nexport class OnEnterSupport {\n  constructor(opts) {\n    opts = opts || {};\n    opts.brackets = opts.brackets || [['(', ')'], ['{', '}'], ['[', ']']];\n    this._brackets = [];\n    opts.brackets.forEach(bracket => {\n      const openRegExp = OnEnterSupport._createOpenBracketRegExp(bracket[0]);\n\n      const closeRegExp = OnEnterSupport._createCloseBracketRegExp(bracket[1]);\n\n      if (openRegExp && closeRegExp) {\n        this._brackets.push({\n          open: bracket[0],\n          openRegExp: openRegExp,\n          close: bracket[1],\n          closeRegExp: closeRegExp\n        });\n      }\n    });\n    this._regExpRules = opts.onEnterRules || [];\n  }\n\n  onEnter(autoIndent, previousLineText, beforeEnterText, afterEnterText) {\n    // (1): `regExpRules`\n    if (autoIndent >= 3\n    /* Advanced */\n    ) {\n      for (let i = 0, len = this._regExpRules.length; i < len; i++) {\n        const rule = this._regExpRules[i];\n        const regResult = [{\n          reg: rule.beforeText,\n          text: beforeEnterText\n        }, {\n          reg: rule.afterText,\n          text: afterEnterText\n        }, {\n          reg: rule.previousLineText,\n          text: previousLineText\n        }].every(obj => {\n          if (!obj.reg) {\n            return true;\n          }\n\n          obj.reg.lastIndex = 0; // To disable the effect of the \"g\" flag.\n\n          return obj.reg.test(obj.text);\n        });\n\n        if (regResult) {\n          return rule.action;\n        }\n      }\n    } // (2): Special indent-outdent\n\n\n    if (autoIndent >= 2\n    /* Brackets */\n    ) {\n      if (beforeEnterText.length > 0 && afterEnterText.length > 0) {\n        for (let i = 0, len = this._brackets.length; i < len; i++) {\n          const bracket = this._brackets[i];\n\n          if (bracket.openRegExp.test(beforeEnterText) && bracket.closeRegExp.test(afterEnterText)) {\n            return {\n              indentAction: IndentAction.IndentOutdent\n            };\n          }\n        }\n      }\n    } // (4): Open bracket based logic\n\n\n    if (autoIndent >= 2\n    /* Brackets */\n    ) {\n      if (beforeEnterText.length > 0) {\n        for (let i = 0, len = this._brackets.length; i < len; i++) {\n          const bracket = this._brackets[i];\n\n          if (bracket.openRegExp.test(beforeEnterText)) {\n            return {\n              indentAction: IndentAction.Indent\n            };\n          }\n        }\n      }\n    }\n\n    return null;\n  }\n\n  static _createOpenBracketRegExp(bracket) {\n    let str = strings.escapeRegExpCharacters(bracket);\n\n    if (!/\\B/.test(str.charAt(0))) {\n      str = '\\\\b' + str;\n    }\n\n    str += '\\\\s*$';\n    return OnEnterSupport._safeRegExp(str);\n  }\n\n  static _createCloseBracketRegExp(bracket) {\n    let str = strings.escapeRegExpCharacters(bracket);\n\n    if (!/\\B/.test(str.charAt(str.length - 1))) {\n      str = str + '\\\\b';\n    }\n\n    str = '^\\\\s*' + str;\n    return OnEnterSupport._safeRegExp(str);\n  }\n\n  static _safeRegExp(def) {\n    try {\n      return new RegExp(def);\n    } catch (err) {\n      onUnexpectedError(err);\n      return null;\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/common/languages/supports/onEnter.js"],"names":["onUnexpectedError","strings","IndentAction","OnEnterSupport","constructor","opts","brackets","_brackets","forEach","bracket","openRegExp","_createOpenBracketRegExp","closeRegExp","_createCloseBracketRegExp","push","open","close","_regExpRules","onEnterRules","onEnter","autoIndent","previousLineText","beforeEnterText","afterEnterText","i","len","length","rule","regResult","reg","beforeText","text","afterText","every","obj","lastIndex","test","action","indentAction","IndentOutdent","Indent","str","escapeRegExpCharacters","charAt","_safeRegExp","def","RegExp","err"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { IndentAction } from '../languageConfiguration.js';\nexport class OnEnterSupport {\n    constructor(opts) {\n        opts = opts || {};\n        opts.brackets = opts.brackets || [\n            ['(', ')'],\n            ['{', '}'],\n            ['[', ']']\n        ];\n        this._brackets = [];\n        opts.brackets.forEach((bracket) => {\n            const openRegExp = OnEnterSupport._createOpenBracketRegExp(bracket[0]);\n            const closeRegExp = OnEnterSupport._createCloseBracketRegExp(bracket[1]);\n            if (openRegExp && closeRegExp) {\n                this._brackets.push({\n                    open: bracket[0],\n                    openRegExp: openRegExp,\n                    close: bracket[1],\n                    closeRegExp: closeRegExp,\n                });\n            }\n        });\n        this._regExpRules = opts.onEnterRules || [];\n    }\n    onEnter(autoIndent, previousLineText, beforeEnterText, afterEnterText) {\n        // (1): `regExpRules`\n        if (autoIndent >= 3 /* Advanced */) {\n            for (let i = 0, len = this._regExpRules.length; i < len; i++) {\n                const rule = this._regExpRules[i];\n                const regResult = [{\n                        reg: rule.beforeText,\n                        text: beforeEnterText\n                    }, {\n                        reg: rule.afterText,\n                        text: afterEnterText\n                    }, {\n                        reg: rule.previousLineText,\n                        text: previousLineText\n                    }].every((obj) => {\n                    if (!obj.reg) {\n                        return true;\n                    }\n                    obj.reg.lastIndex = 0; // To disable the effect of the \"g\" flag.\n                    return obj.reg.test(obj.text);\n                });\n                if (regResult) {\n                    return rule.action;\n                }\n            }\n        }\n        // (2): Special indent-outdent\n        if (autoIndent >= 2 /* Brackets */) {\n            if (beforeEnterText.length > 0 && afterEnterText.length > 0) {\n                for (let i = 0, len = this._brackets.length; i < len; i++) {\n                    const bracket = this._brackets[i];\n                    if (bracket.openRegExp.test(beforeEnterText) && bracket.closeRegExp.test(afterEnterText)) {\n                        return { indentAction: IndentAction.IndentOutdent };\n                    }\n                }\n            }\n        }\n        // (4): Open bracket based logic\n        if (autoIndent >= 2 /* Brackets */) {\n            if (beforeEnterText.length > 0) {\n                for (let i = 0, len = this._brackets.length; i < len; i++) {\n                    const bracket = this._brackets[i];\n                    if (bracket.openRegExp.test(beforeEnterText)) {\n                        return { indentAction: IndentAction.Indent };\n                    }\n                }\n            }\n        }\n        return null;\n    }\n    static _createOpenBracketRegExp(bracket) {\n        let str = strings.escapeRegExpCharacters(bracket);\n        if (!/\\B/.test(str.charAt(0))) {\n            str = '\\\\b' + str;\n        }\n        str += '\\\\s*$';\n        return OnEnterSupport._safeRegExp(str);\n    }\n    static _createCloseBracketRegExp(bracket) {\n        let str = strings.escapeRegExpCharacters(bracket);\n        if (!/\\B/.test(str.charAt(str.length - 1))) {\n            str = str + '\\\\b';\n        }\n        str = '^\\\\s*' + str;\n        return OnEnterSupport._safeRegExp(str);\n    }\n    static _safeRegExp(def) {\n        try {\n            return new RegExp(def);\n        }\n        catch (err) {\n            onUnexpectedError(err);\n            return null;\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}