{"ast":null,"code":"const formatToList = items => items.map(key => `- ${key}`).join('\\n');\n\nexport default function validatePathConfig(config) {\n  let root = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  const validKeys = ['initialRouteName', 'screens'];\n\n  if (!root) {\n    validKeys.push('path', 'exact', 'stringify', 'parse');\n  }\n\n  const invalidKeys = Object.keys(config).filter(key => !validKeys.includes(key));\n\n  if (invalidKeys.length) {\n    throw new Error(`Found invalid properties in the configuration:\\n${formatToList(invalidKeys)}\\n\\nDid you forget to specify them under a 'screens' property?\\n\\nYou can only specify the following properties:\\n${formatToList(validKeys)}\\n\\nSee https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.`);\n  }\n\n  if (config.screens) {\n    Object.entries(config.screens).forEach(_ref => {\n      let [_, value] = _ref;\n\n      if (typeof value !== 'string') {\n        validatePathConfig(value, false);\n      }\n    });\n  }\n}","map":{"version":3,"sources":["validatePathConfig.tsx"],"names":["formatToList","items","key","root","validKeys","invalidKeys","Object","config","validatePathConfig"],"mappings":"AAAA,MAAMA,YAAY,GAAIC,KAAD,IACnBA,KAAK,CAALA,GAAAA,CAAWC,GAAD,IAAU,KAAIA,GAAxBD,EAAAA,EAAAA,IAAAA,CADF,IACEA,CADF;;AAGA,eAAe,SAAA,kBAAA,CAAA,MAAA,EAAsD;AAAA,MAAbE,IAAa,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAN,IAAM;AACnE,QAAMC,SAAS,GAAG,CAAA,kBAAA,EAAlB,SAAkB,CAAlB;;AAEA,MAAI,CAAJ,IAAA,EAAW;AACTA,IAAAA,SAAS,CAATA,IAAAA,CAAAA,MAAAA,EAAAA,OAAAA,EAAAA,WAAAA,EAAAA,OAAAA;AACD;;AAED,QAAMC,WAAW,GAAGC,MAAM,CAANA,IAAAA,CAAAA,MAAAA,EAAAA,MAAAA,CACjBJ,GAAD,IAAS,CAACE,SAAS,CAATA,QAAAA,CADZ,GACYA,CADQE,CAApB;;AAIA,MAAID,WAAW,CAAf,MAAA,EAAwB;AACtB,UAAM,IAAA,KAAA,CACH,mDAAkDL,YAAY,CAAA,WAAA,CAE7D,qHAAoHA,YAAY,CAAA,SAAA,CAHpI,wHAAM,CAAN;AAOD;;AAED,MAAIO,MAAM,CAAV,OAAA,EAAoB;AAClBD,IAAAA,MAAM,CAANA,OAAAA,CAAeC,MAAM,CAArBD,OAAAA,EAAAA,OAAAA,CAAuC,IAAA,IAAgB;AAAA,UAAf,CAAA,CAAA,EAAA,KAAA,IAAe,IAAA;;AACrD,UAAI,OAAA,KAAA,KAAJ,QAAA,EAA+B;AAC7BE,QAAAA,kBAAkB,CAAA,KAAA,EAAlBA,KAAkB,CAAlBA;AACD;AAHHF,KAAAA;AAKD;AACF","sourcesContent":["const formatToList = (items: string[]) =>\n  items.map((key) => `- ${key}`).join('\\n');\n\nexport default function validatePathConfig(config: any, root = true) {\n  const validKeys = ['initialRouteName', 'screens'];\n\n  if (!root) {\n    validKeys.push('path', 'exact', 'stringify', 'parse');\n  }\n\n  const invalidKeys = Object.keys(config).filter(\n    (key) => !validKeys.includes(key)\n  );\n\n  if (invalidKeys.length) {\n    throw new Error(\n      `Found invalid properties in the configuration:\\n${formatToList(\n        invalidKeys\n      )}\\n\\nDid you forget to specify them under a 'screens' property?\\n\\nYou can only specify the following properties:\\n${formatToList(\n        validKeys\n      )}\\n\\nSee https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.`\n    );\n  }\n\n  if (config.screens) {\n    Object.entries(config.screens).forEach(([_, value]) => {\n      if (typeof value !== 'string') {\n        validatePathConfig(value, false);\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}