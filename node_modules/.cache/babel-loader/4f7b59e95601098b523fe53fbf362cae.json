{"ast":null,"code":"import { CommonActions } from '@react-navigation/routers';\nimport * as React from 'react';\nimport checkDuplicateRouteNames from './checkDuplicateRouteNames';\nimport checkSerializable from './checkSerializable';\nimport { NOT_INITIALIZED_ERROR } from './createNavigationContainerRef';\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport findFocusedRoute from './findFocusedRoute';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport NavigationContainerRefContext from './NavigationContainerRefContext';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport NavigationStateContext from './NavigationStateContext';\nimport UnhandledActionContext from './UnhandledActionContext';\nimport useChildListeners from './useChildListeners';\nimport useEventEmitter from './useEventEmitter';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useOptionsGetters from './useOptionsGetters';\nimport { ScheduleUpdateContext } from './useScheduleUpdate';\nimport useSyncState from './useSyncState';\nconst serializableWarnings = [];\nconst duplicateNameWarnings = [];\n/**\n * Remove `key` and `routeNames` from the state objects recursively to get partial state.\n *\n * @param state Initial state object.\n */\n\nconst getPartialState = state => {\n  if (state === undefined) {\n    return;\n  } // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  const {\n    key,\n    routeNames,\n    ...partialState\n  } = state;\n  return { ...partialState,\n    stale: true,\n    routes: state.routes.map(route => {\n      if (route.state === undefined) {\n        return route;\n      }\n\n      return { ...route,\n        state: getPartialState(route.state)\n      };\n    })\n  };\n};\n/**\n * Container component which holds the navigation state.\n * This should be rendered at the root wrapping the whole app.\n *\n * @param props.initialState Initial state object for the navigation tree.\n * @param props.onStateChange Callback which is called with the latest navigation state when it changes.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which refers to the navigation object containing helper methods.\n */\n\n\nconst BaseNavigationContainer = /*#__PURE__*/React.forwardRef(function BaseNavigationContainer(_ref, ref) {\n  let {\n    initialState,\n    onStateChange,\n    onUnhandledAction,\n    independent,\n    children\n  } = _ref;\n  const parent = React.useContext(NavigationStateContext);\n\n  if (!parent.isDefault && !independent) {\n    throw new Error(\"Looks like you have nested a 'NavigationContainer' inside another. Normally you need only one container at the root of the app, so this was probably an error. If this was intentional, pass 'independent={true}' explicitly. Note that this will make the child navigators disconnected from the parent and you won't be able to navigate between them.\");\n  }\n\n  const [state, getState, setState, scheduleUpdate, flushUpdates] = useSyncState(() => getPartialState(initialState == null ? undefined : initialState));\n  const isFirstMountRef = React.useRef(true);\n  const navigatorKeyRef = React.useRef();\n  const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n  const setKey = React.useCallback(key => {\n    navigatorKeyRef.current = key;\n  }, []);\n  const {\n    listeners,\n    addListener\n  } = useChildListeners();\n  const {\n    keyedListeners,\n    addKeyedListener\n  } = useKeyedChildListeners();\n  const dispatch = React.useCallback(action => {\n    if (listeners.focus[0] == null) {\n      console.error(NOT_INITIALIZED_ERROR);\n    } else {\n      listeners.focus[0](navigation => navigation.dispatch(action));\n    }\n  }, [listeners.focus]);\n  const canGoBack = React.useCallback(() => {\n    if (listeners.focus[0] == null) {\n      return false;\n    }\n\n    const {\n      result,\n      handled\n    } = listeners.focus[0](navigation => navigation.canGoBack());\n\n    if (handled) {\n      return result;\n    } else {\n      return false;\n    }\n  }, [listeners.focus]);\n  const resetRoot = React.useCallback(state => {\n    var _state$key, _keyedListeners$getSt, _keyedListeners$getSt2;\n\n    const target = (_state$key = state === null || state === void 0 ? void 0 : state.key) !== null && _state$key !== void 0 ? _state$key : (_keyedListeners$getSt = (_keyedListeners$getSt2 = keyedListeners.getState).root) === null || _keyedListeners$getSt === void 0 ? void 0 : _keyedListeners$getSt.call(_keyedListeners$getSt2).key;\n\n    if (target == null) {\n      console.error(NOT_INITIALIZED_ERROR);\n    } else {\n      listeners.focus[0](navigation => navigation.dispatch({ ...CommonActions.reset(state),\n        target\n      }));\n    }\n  }, [keyedListeners.getState, listeners.focus]);\n  const getRootState = React.useCallback(() => {\n    var _keyedListeners$getSt3, _keyedListeners$getSt4;\n\n    return (_keyedListeners$getSt3 = (_keyedListeners$getSt4 = keyedListeners.getState).root) === null || _keyedListeners$getSt3 === void 0 ? void 0 : _keyedListeners$getSt3.call(_keyedListeners$getSt4);\n  }, [keyedListeners.getState]);\n  const getCurrentRoute = React.useCallback(() => {\n    const state = getRootState();\n\n    if (state == null) {\n      return undefined;\n    }\n\n    const route = findFocusedRoute(state);\n    return route;\n  }, [getRootState]);\n  const emitter = useEventEmitter();\n  const {\n    addOptionsGetter,\n    getCurrentOptions\n  } = useOptionsGetters({});\n  const navigation = React.useMemo(() => ({ ...Object.keys(CommonActions).reduce((acc, name) => {\n      acc[name] = function () {\n        return (// @ts-expect-error: this is ok\n          dispatch(CommonActions[name](...arguments))\n        );\n      };\n\n      return acc;\n    }, {}),\n    ...emitter.create('root'),\n    dispatch,\n    resetRoot,\n    isFocused: () => true,\n    canGoBack,\n    getParent: () => undefined,\n    getState: () => stateRef.current,\n    getRootState,\n    getCurrentRoute,\n    getCurrentOptions,\n    isReady: () => listeners.focus[0] != null\n  }), [canGoBack, dispatch, emitter, getCurrentOptions, getCurrentRoute, getRootState, listeners.focus, resetRoot]);\n  React.useImperativeHandle(ref, () => navigation, [navigation]);\n  const onDispatchAction = React.useCallback((action, noop) => {\n    emitter.emit({\n      type: '__unsafe_action__',\n      data: {\n        action,\n        noop,\n        stack: stackRef.current\n      }\n    });\n  }, [emitter]);\n  const lastEmittedOptionsRef = React.useRef();\n  const onOptionsChange = React.useCallback(options => {\n    if (lastEmittedOptionsRef.current === options) {\n      return;\n    }\n\n    lastEmittedOptionsRef.current = options;\n    emitter.emit({\n      type: 'options',\n      data: {\n        options\n      }\n    });\n  }, [emitter]);\n  const stackRef = React.useRef();\n  const builderContext = React.useMemo(() => ({\n    addListener,\n    addKeyedListener,\n    onDispatchAction,\n    onOptionsChange,\n    stackRef\n  }), [addListener, addKeyedListener, onDispatchAction, onOptionsChange]);\n  const scheduleContext = React.useMemo(() => ({\n    scheduleUpdate,\n    flushUpdates\n  }), [scheduleUpdate, flushUpdates]);\n  const isInitialRef = React.useRef(true);\n  const getIsInitial = React.useCallback(() => isInitialRef.current, []);\n  const context = React.useMemo(() => ({\n    state,\n    getState,\n    setState,\n    getKey,\n    setKey,\n    getIsInitial,\n    addOptionsGetter\n  }), [state, getState, setState, getKey, setKey, getIsInitial, addOptionsGetter]);\n  const onStateChangeRef = React.useRef(onStateChange);\n  const stateRef = React.useRef(state);\n  React.useEffect(() => {\n    isInitialRef.current = false;\n    onStateChangeRef.current = onStateChange;\n    stateRef.current = state;\n  });\n  React.useEffect(() => {\n    const hydratedState = getRootState();\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (hydratedState !== undefined) {\n        const serializableResult = checkSerializable(hydratedState);\n\n        if (!serializableResult.serializable) {\n          const {\n            location,\n            reason\n          } = serializableResult;\n          let path = '';\n          let pointer = hydratedState;\n          let params = false;\n\n          for (let i = 0; i < location.length; i++) {\n            const curr = location[i];\n            const prev = location[i - 1];\n            pointer = pointer[curr];\n\n            if (!params && curr === 'state') {\n              continue;\n            } else if (!params && curr === 'routes') {\n              if (path) {\n                path += ' > ';\n              }\n            } else if (!params && typeof curr === 'number' && prev === 'routes') {\n              var _pointer;\n\n              path += (_pointer = pointer) === null || _pointer === void 0 ? void 0 : _pointer.name;\n            } else if (!params) {\n              path += ` > ${curr}`;\n              params = true;\n            } else {\n              if (typeof curr === 'number' || /^[0-9]+$/.test(curr)) {\n                path += `[${curr}]`;\n              } else if (/^[a-z$_]+$/i.test(curr)) {\n                path += `.${curr}`;\n              } else {\n                path += `[${JSON.stringify(curr)}]`;\n              }\n            }\n          }\n\n          const message = `Non-serializable values were found in the navigation state. Check:\\n\\n${path} (${reason})\\n\\nThis can break usage such as persisting and restoring state. This might happen if you passed non-serializable values such as function, class instances etc. in params. If you need to use components with callbacks in your options, you can use 'navigation.setOptions' instead. See https://reactnavigation.org/docs/troubleshooting#i-get-the-warning-non-serializable-values-were-found-in-the-navigation-state for more details.`;\n\n          if (!serializableWarnings.includes(message)) {\n            serializableWarnings.push(message);\n            console.warn(message);\n          }\n        }\n\n        const duplicateRouteNamesResult = checkDuplicateRouteNames(hydratedState);\n\n        if (duplicateRouteNamesResult.length) {\n          const message = `Found screens with the same name nested inside one another. Check:\\n${duplicateRouteNamesResult.map(locations => `\\n${locations.join(', ')}`)}\\n\\nThis can cause confusing behavior during navigation. Consider using unique names for each screen instead.`;\n\n          if (!duplicateNameWarnings.includes(message)) {\n            duplicateNameWarnings.push(message);\n            console.warn(message);\n          }\n        }\n      }\n    }\n\n    emitter.emit({\n      type: 'state',\n      data: {\n        state\n      }\n    });\n\n    if (!isFirstMountRef.current && onStateChangeRef.current) {\n      onStateChangeRef.current(hydratedState);\n    }\n\n    isFirstMountRef.current = false;\n  }, [getRootState, emitter, state]);\n  const defaultOnUnhandledAction = React.useCallback(action => {\n    if (process.env.NODE_ENV === 'production') {\n      return;\n    }\n\n    const payload = action.payload;\n    let message = `The action '${action.type}'${payload ? ` with payload ${JSON.stringify(action.payload)}` : ''} was not handled by any navigator.`;\n\n    switch (action.type) {\n      case 'NAVIGATE':\n      case 'PUSH':\n      case 'REPLACE':\n      case 'JUMP_TO':\n        if (payload !== null && payload !== void 0 && payload.name) {\n          message += `\\n\\nDo you have a screen named '${payload.name}'?\\n\\nIf you're trying to navigate to a screen in a nested navigator, see https://reactnavigation.org/docs/nesting-navigators#navigating-to-a-screen-in-a-nested-navigator.`;\n        } else {\n          message += `\\n\\nYou need to pass the name of the screen to navigate to.\\n\\nSee https://reactnavigation.org/docs/navigation-actions for usage.`;\n        }\n\n        break;\n\n      case 'GO_BACK':\n      case 'POP':\n      case 'POP_TO_TOP':\n        message += `\\n\\nIs there any screen to go back to?`;\n        break;\n\n      case 'OPEN_DRAWER':\n      case 'CLOSE_DRAWER':\n      case 'TOGGLE_DRAWER':\n        message += `\\n\\nIs your screen inside a Drawer navigator?`;\n        break;\n    }\n\n    message += `\\n\\nThis is a development-only warning and won't be shown in production.`;\n    console.error(message);\n  }, []);\n  let element = /*#__PURE__*/React.createElement(NavigationContainerRefContext.Provider, {\n    value: navigation\n  }, /*#__PURE__*/React.createElement(ScheduleUpdateContext.Provider, {\n    value: scheduleContext\n  }, /*#__PURE__*/React.createElement(NavigationBuilderContext.Provider, {\n    value: builderContext\n  }, /*#__PURE__*/React.createElement(NavigationStateContext.Provider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(UnhandledActionContext.Provider, {\n    value: onUnhandledAction !== null && onUnhandledAction !== void 0 ? onUnhandledAction : defaultOnUnhandledAction\n  }, /*#__PURE__*/React.createElement(EnsureSingleNavigator, null, children))))));\n\n  if (independent) {\n    // We need to clear any existing contexts for nested independent container to work correctly\n    element = /*#__PURE__*/React.createElement(NavigationRouteContext.Provider, {\n      value: undefined\n    }, /*#__PURE__*/React.createElement(NavigationContext.Provider, {\n      value: undefined\n    }, element));\n  }\n\n  return element;\n});\nexport default BaseNavigationContainer;","map":{"version":3,"sources":["BaseNavigationContainer.tsx"],"names":["serializableWarnings","duplicateNameWarnings","getPartialState","state","partialState","stale","routes","route","BaseNavigationContainer","children","parent","React","useSyncState","initialState","isFirstMountRef","navigatorKeyRef","getKey","setKey","key","addListener","useChildListeners","addKeyedListener","useKeyedChildListeners","dispatch","action","listeners","console","navigation","canGoBack","handled","resetRoot","target","CommonActions","keyedListeners","getRootState","getCurrentRoute","findFocusedRoute","emitter","useEventEmitter","getCurrentOptions","useOptionsGetters","acc","isFocused","getParent","getState","stateRef","isReady","onDispatchAction","type","data","stack","stackRef","current","lastEmittedOptionsRef","onOptionsChange","options","builderContext","scheduleContext","flushUpdates","isInitialRef","getIsInitial","context","addOptionsGetter","onStateChangeRef","hydratedState","process","serializableResult","checkSerializable","reason","path","pointer","params","i","location","curr","prev","JSON","message","duplicateRouteNamesResult","checkDuplicateRouteNames","locations","defaultOnUnhandledAction","payload","name","element","onUnhandledAction","undefined"],"mappings":"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","sourcesContent":["import {\n  CommonActions,\n  InitialState,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport checkDuplicateRouteNames from './checkDuplicateRouteNames';\nimport checkSerializable from './checkSerializable';\nimport { NOT_INITIALIZED_ERROR } from './createNavigationContainerRef';\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport findFocusedRoute from './findFocusedRoute';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport NavigationContainerRefContext from './NavigationContainerRefContext';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport NavigationStateContext from './NavigationStateContext';\nimport type {\n  NavigationContainerEventMap,\n  NavigationContainerProps,\n  NavigationContainerRef,\n} from './types';\nimport UnhandledActionContext from './UnhandledActionContext';\nimport useChildListeners from './useChildListeners';\nimport useEventEmitter from './useEventEmitter';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useOptionsGetters from './useOptionsGetters';\nimport { ScheduleUpdateContext } from './useScheduleUpdate';\nimport useSyncState from './useSyncState';\n\ntype State = NavigationState | PartialState<NavigationState> | undefined;\n\nconst serializableWarnings: string[] = [];\nconst duplicateNameWarnings: string[] = [];\n\n/**\n * Remove `key` and `routeNames` from the state objects recursively to get partial state.\n *\n * @param state Initial state object.\n */\nconst getPartialState = (\n  state: InitialState | undefined\n): PartialState<NavigationState> | undefined => {\n  if (state === undefined) {\n    return;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { key, routeNames, ...partialState } = state;\n\n  return {\n    ...partialState,\n    stale: true,\n    routes: state.routes.map((route) => {\n      if (route.state === undefined) {\n        return route as Route<string> & {\n          state?: PartialState<NavigationState>;\n        };\n      }\n\n      return { ...route, state: getPartialState(route.state) };\n    }),\n  };\n};\n\n/**\n * Container component which holds the navigation state.\n * This should be rendered at the root wrapping the whole app.\n *\n * @param props.initialState Initial state object for the navigation tree.\n * @param props.onStateChange Callback which is called with the latest navigation state when it changes.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which refers to the navigation object containing helper methods.\n */\nconst BaseNavigationContainer = React.forwardRef(\n  function BaseNavigationContainer(\n    {\n      initialState,\n      onStateChange,\n      onUnhandledAction,\n      independent,\n      children,\n    }: NavigationContainerProps,\n    ref?: React.Ref<NavigationContainerRef<ParamListBase>>\n  ) {\n    const parent = React.useContext(NavigationStateContext);\n\n    if (!parent.isDefault && !independent) {\n      throw new Error(\n        \"Looks like you have nested a 'NavigationContainer' inside another. Normally you need only one container at the root of the app, so this was probably an error. If this was intentional, pass 'independent={true}' explicitly. Note that this will make the child navigators disconnected from the parent and you won't be able to navigate between them.\"\n      );\n    }\n\n    const [state, getState, setState, scheduleUpdate, flushUpdates] =\n      useSyncState<State>(() =>\n        getPartialState(initialState == null ? undefined : initialState)\n      );\n\n    const isFirstMountRef = React.useRef<boolean>(true);\n\n    const navigatorKeyRef = React.useRef<string | undefined>();\n\n    const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n\n    const setKey = React.useCallback((key: string) => {\n      navigatorKeyRef.current = key;\n    }, []);\n\n    const { listeners, addListener } = useChildListeners();\n\n    const { keyedListeners, addKeyedListener } = useKeyedChildListeners();\n\n    const dispatch = React.useCallback(\n      (\n        action:\n          | NavigationAction\n          | ((state: NavigationState) => NavigationAction)\n      ) => {\n        if (listeners.focus[0] == null) {\n          console.error(NOT_INITIALIZED_ERROR);\n        } else {\n          listeners.focus[0]((navigation) => navigation.dispatch(action));\n        }\n      },\n      [listeners.focus]\n    );\n\n    const canGoBack = React.useCallback(() => {\n      if (listeners.focus[0] == null) {\n        return false;\n      }\n\n      const { result, handled } = listeners.focus[0]((navigation) =>\n        navigation.canGoBack()\n      );\n\n      if (handled) {\n        return result;\n      } else {\n        return false;\n      }\n    }, [listeners.focus]);\n\n    const resetRoot = React.useCallback(\n      (state?: PartialState<NavigationState> | NavigationState) => {\n        const target = state?.key ?? keyedListeners.getState.root?.().key;\n\n        if (target == null) {\n          console.error(NOT_INITIALIZED_ERROR);\n        } else {\n          listeners.focus[0]((navigation) =>\n            navigation.dispatch({\n              ...CommonActions.reset(state),\n              target,\n            })\n          );\n        }\n      },\n      [keyedListeners.getState, listeners.focus]\n    );\n\n    const getRootState = React.useCallback(() => {\n      return keyedListeners.getState.root?.();\n    }, [keyedListeners.getState]);\n\n    const getCurrentRoute = React.useCallback(() => {\n      const state = getRootState();\n\n      if (state == null) {\n        return undefined;\n      }\n\n      const route = findFocusedRoute(state);\n\n      return route as Route<string> | undefined;\n    }, [getRootState]);\n\n    const emitter = useEventEmitter<NavigationContainerEventMap>();\n\n    const { addOptionsGetter, getCurrentOptions } = useOptionsGetters({});\n\n    const navigation: NavigationContainerRef<ParamListBase> = React.useMemo(\n      () => ({\n        ...Object.keys(CommonActions).reduce<any>((acc, name) => {\n          acc[name] = (...args: any[]) =>\n            // @ts-expect-error: this is ok\n            dispatch(CommonActions[name](...args));\n          return acc;\n        }, {}),\n        ...emitter.create('root'),\n        dispatch,\n        resetRoot,\n        isFocused: () => true,\n        canGoBack,\n        getParent: () => undefined,\n        getState: () => stateRef.current,\n        getRootState,\n        getCurrentRoute,\n        getCurrentOptions,\n        isReady: () => listeners.focus[0] != null,\n      }),\n      [\n        canGoBack,\n        dispatch,\n        emitter,\n        getCurrentOptions,\n        getCurrentRoute,\n        getRootState,\n        listeners.focus,\n        resetRoot,\n      ]\n    );\n\n    React.useImperativeHandle(ref, () => navigation, [navigation]);\n\n    const onDispatchAction = React.useCallback(\n      (action: NavigationAction, noop: boolean) => {\n        emitter.emit({\n          type: '__unsafe_action__',\n          data: { action, noop, stack: stackRef.current },\n        });\n      },\n      [emitter]\n    );\n\n    const lastEmittedOptionsRef = React.useRef<object | undefined>();\n\n    const onOptionsChange = React.useCallback(\n      (options) => {\n        if (lastEmittedOptionsRef.current === options) {\n          return;\n        }\n\n        lastEmittedOptionsRef.current = options;\n\n        emitter.emit({\n          type: 'options',\n          data: { options },\n        });\n      },\n      [emitter]\n    );\n\n    const stackRef = React.useRef<string | undefined>();\n\n    const builderContext = React.useMemo(\n      () => ({\n        addListener,\n        addKeyedListener,\n        onDispatchAction,\n        onOptionsChange,\n        stackRef,\n      }),\n      [addListener, addKeyedListener, onDispatchAction, onOptionsChange]\n    );\n\n    const scheduleContext = React.useMemo(\n      () => ({ scheduleUpdate, flushUpdates }),\n      [scheduleUpdate, flushUpdates]\n    );\n\n    const isInitialRef = React.useRef(true);\n\n    const getIsInitial = React.useCallback(() => isInitialRef.current, []);\n\n    const context = React.useMemo(\n      () => ({\n        state,\n        getState,\n        setState,\n        getKey,\n        setKey,\n        getIsInitial,\n        addOptionsGetter,\n      }),\n      [\n        state,\n        getState,\n        setState,\n        getKey,\n        setKey,\n        getIsInitial,\n        addOptionsGetter,\n      ]\n    );\n\n    const onStateChangeRef = React.useRef(onStateChange);\n    const stateRef = React.useRef(state);\n\n    React.useEffect(() => {\n      isInitialRef.current = false;\n      onStateChangeRef.current = onStateChange;\n      stateRef.current = state;\n    });\n\n    React.useEffect(() => {\n      const hydratedState = getRootState();\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (hydratedState !== undefined) {\n          const serializableResult = checkSerializable(hydratedState);\n\n          if (!serializableResult.serializable) {\n            const { location, reason } = serializableResult;\n\n            let path = '';\n            let pointer: Record<any, any> = hydratedState;\n            let params = false;\n\n            for (let i = 0; i < location.length; i++) {\n              const curr = location[i];\n              const prev = location[i - 1];\n\n              pointer = pointer[curr];\n\n              if (!params && curr === 'state') {\n                continue;\n              } else if (!params && curr === 'routes') {\n                if (path) {\n                  path += ' > ';\n                }\n              } else if (\n                !params &&\n                typeof curr === 'number' &&\n                prev === 'routes'\n              ) {\n                path += pointer?.name;\n              } else if (!params) {\n                path += ` > ${curr}`;\n                params = true;\n              } else {\n                if (typeof curr === 'number' || /^[0-9]+$/.test(curr)) {\n                  path += `[${curr}]`;\n                } else if (/^[a-z$_]+$/i.test(curr)) {\n                  path += `.${curr}`;\n                } else {\n                  path += `[${JSON.stringify(curr)}]`;\n                }\n              }\n            }\n\n            const message = `Non-serializable values were found in the navigation state. Check:\\n\\n${path} (${reason})\\n\\nThis can break usage such as persisting and restoring state. This might happen if you passed non-serializable values such as function, class instances etc. in params. If you need to use components with callbacks in your options, you can use 'navigation.setOptions' instead. See https://reactnavigation.org/docs/troubleshooting#i-get-the-warning-non-serializable-values-were-found-in-the-navigation-state for more details.`;\n\n            if (!serializableWarnings.includes(message)) {\n              serializableWarnings.push(message);\n              console.warn(message);\n            }\n          }\n\n          const duplicateRouteNamesResult =\n            checkDuplicateRouteNames(hydratedState);\n\n          if (duplicateRouteNamesResult.length) {\n            const message = `Found screens with the same name nested inside one another. Check:\\n${duplicateRouteNamesResult.map(\n              (locations) => `\\n${locations.join(', ')}`\n            )}\\n\\nThis can cause confusing behavior during navigation. Consider using unique names for each screen instead.`;\n\n            if (!duplicateNameWarnings.includes(message)) {\n              duplicateNameWarnings.push(message);\n              console.warn(message);\n            }\n          }\n        }\n      }\n\n      emitter.emit({ type: 'state', data: { state } });\n\n      if (!isFirstMountRef.current && onStateChangeRef.current) {\n        onStateChangeRef.current(hydratedState);\n      }\n\n      isFirstMountRef.current = false;\n    }, [getRootState, emitter, state]);\n\n    const defaultOnUnhandledAction = React.useCallback(\n      (action: NavigationAction) => {\n        if (process.env.NODE_ENV === 'production') {\n          return;\n        }\n\n        const payload: Record<string, any> | undefined = action.payload;\n\n        let message = `The action '${action.type}'${\n          payload ? ` with payload ${JSON.stringify(action.payload)}` : ''\n        } was not handled by any navigator.`;\n\n        switch (action.type) {\n          case 'NAVIGATE':\n          case 'PUSH':\n          case 'REPLACE':\n          case 'JUMP_TO':\n            if (payload?.name) {\n              message += `\\n\\nDo you have a screen named '${payload.name}'?\\n\\nIf you're trying to navigate to a screen in a nested navigator, see https://reactnavigation.org/docs/nesting-navigators#navigating-to-a-screen-in-a-nested-navigator.`;\n            } else {\n              message += `\\n\\nYou need to pass the name of the screen to navigate to.\\n\\nSee https://reactnavigation.org/docs/navigation-actions for usage.`;\n            }\n\n            break;\n          case 'GO_BACK':\n          case 'POP':\n          case 'POP_TO_TOP':\n            message += `\\n\\nIs there any screen to go back to?`;\n            break;\n          case 'OPEN_DRAWER':\n          case 'CLOSE_DRAWER':\n          case 'TOGGLE_DRAWER':\n            message += `\\n\\nIs your screen inside a Drawer navigator?`;\n            break;\n        }\n\n        message += `\\n\\nThis is a development-only warning and won't be shown in production.`;\n\n        console.error(message);\n      },\n      []\n    );\n\n    let element = (\n      <NavigationContainerRefContext.Provider value={navigation}>\n        <ScheduleUpdateContext.Provider value={scheduleContext}>\n          <NavigationBuilderContext.Provider value={builderContext}>\n            <NavigationStateContext.Provider value={context}>\n              <UnhandledActionContext.Provider\n                value={onUnhandledAction ?? defaultOnUnhandledAction}\n              >\n                <EnsureSingleNavigator>{children}</EnsureSingleNavigator>\n              </UnhandledActionContext.Provider>\n            </NavigationStateContext.Provider>\n          </NavigationBuilderContext.Provider>\n        </ScheduleUpdateContext.Provider>\n      </NavigationContainerRefContext.Provider>\n    );\n\n    if (independent) {\n      // We need to clear any existing contexts for nested independent container to work correctly\n      element = (\n        <NavigationRouteContext.Provider value={undefined}>\n          <NavigationContext.Provider value={undefined}>\n            {element}\n          </NavigationContext.Provider>\n        </NavigationRouteContext.Provider>\n      );\n    }\n\n    return element;\n  }\n);\n\nexport default BaseNavigationContainer;\n"]},"metadata":{},"sourceType":"module"}