{"ast":null,"code":"/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n// src/basic-languages/go/go.ts\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"]],\n  autoClosingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: \"`\",\n    close: \"`\",\n    notIn: [\"string\"]\n  }, {\n    open: '\"',\n    close: '\"',\n    notIn: [\"string\"]\n  }, {\n    open: \"'\",\n    close: \"'\",\n    notIn: [\"string\", \"comment\"]\n  }],\n  surroundingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: \"`\",\n    close: \"`\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }]\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".go\",\n  keywords: [\"break\", \"case\", \"chan\", \"const\", \"continue\", \"default\", \"defer\", \"else\", \"fallthrough\", \"for\", \"func\", \"go\", \"goto\", \"if\", \"import\", \"interface\", \"map\", \"package\", \"range\", \"return\", \"select\", \"struct\", \"switch\", \"type\", \"var\", \"bool\", \"true\", \"false\", \"uint8\", \"uint16\", \"uint32\", \"uint64\", \"int8\", \"int16\", \"int32\", \"int64\", \"float32\", \"float64\", \"complex64\", \"complex128\", \"byte\", \"rune\", \"uint\", \"int\", \"uintptr\", \"string\", \"nil\"],\n  operators: [\"+\", \"-\", \"*\", \"/\", \"%\", \"&\", \"|\", \"^\", \"<<\", \">>\", \"&^\", \"+=\", \"-=\", \"*=\", \"/=\", \"%=\", \"&=\", \"|=\", \"^=\", \"<<=\", \">>=\", \"&^=\", \"&&\", \"||\", \"<-\", \"++\", \"--\", \"==\", \"<\", \">\", \"=\", \"!\", \"!=\", \"<=\", \">=\", \":=\", \"...\", \"(\", \")\", \"\", \"]\", \"{\", \"}\", \",\", \";\", \".\", \":\"],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  tokenizer: {\n    root: [[/[a-zA-Z_]\\w*/, {\n      cases: {\n        \"@keywords\": {\n          token: \"keyword.$0\"\n        },\n        \"@default\": \"identifier\"\n      }\n    }], {\n      include: \"@whitespace\"\n    }, [/\\[\\[.*\\]\\]/, \"annotation\"], [/^\\s*#\\w+/, \"keyword\"], [/[{}()\\[\\]]/, \"@brackets\"], [/[<>](?!@symbols)/, \"@brackets\"], [/@symbols/, {\n      cases: {\n        \"@operators\": \"delimiter\",\n        \"@default\": \"\"\n      }\n    }], [/\\d*\\d+[eE]([\\-+]?\\d+)?/, \"number.float\"], [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, \"number.float\"], [/0[xX][0-9a-fA-F']*[0-9a-fA-F]/, \"number.hex\"], [/0[0-7']*[0-7]/, \"number.octal\"], [/0[bB][0-1']*[0-1]/, \"number.binary\"], [/\\d[\\d']*/, \"number\"], [/\\d/, \"number\"], [/[;,.]/, \"delimiter\"], [/\"([^\"\\\\]|\\\\.)*$/, \"string.invalid\"], [/\"/, \"string\", \"@string\"], [/`/, \"string\", \"@rawstring\"], [/'[^\\\\']'/, \"string\"], [/(')(@escapes)(')/, [\"string\", \"string.escape\", \"string\"]], [/'/, \"string.invalid\"]],\n    whitespace: [[/[ \\t\\r\\n]+/, \"\"], [/\\/\\*\\*(?!\\/)/, \"comment.doc\", \"@doccomment\"], [/\\/\\*/, \"comment\", \"@comment\"], [/\\/\\/.*$/, \"comment\"]],\n    comment: [[/[^\\/*]+/, \"comment\"], [/\\*\\//, \"comment\", \"@pop\"], [/[\\/*]/, \"comment\"]],\n    doccomment: [[/[^\\/*]+/, \"comment.doc\"], [/\\/\\*/, \"comment.doc.invalid\"], [/\\*\\//, \"comment.doc\", \"@pop\"], [/[\\/*]/, \"comment.doc\"]],\n    string: [[/[^\\\\\"]+/, \"string\"], [/@escapes/, \"string.escape\"], [/\\\\./, \"string.escape.invalid\"], [/\"/, \"string\", \"@pop\"]],\n    rawstring: [[/[^\\`]/, \"string\"], [/`/, \"string\", \"@pop\"]]\n  }\n};\nexport { conf, language };","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/basic-languages/go/go.js"],"names":["conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","language","defaultToken","tokenPostfix","keywords","operators","symbols","escapes","tokenizer","root","cases","token","include","whitespace","comment","doccomment","string","rawstring"],"mappings":"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","sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/go/go.ts\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"]\n  ],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"`\", close: \"`\", notIn: [\"string\"] },\n    { open: '\"', close: '\"', notIn: [\"string\"] },\n    { open: \"'\", close: \"'\", notIn: [\"string\", \"comment\"] }\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"`\", close: \"`\" },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" }\n  ]\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".go\",\n  keywords: [\n    \"break\",\n    \"case\",\n    \"chan\",\n    \"const\",\n    \"continue\",\n    \"default\",\n    \"defer\",\n    \"else\",\n    \"fallthrough\",\n    \"for\",\n    \"func\",\n    \"go\",\n    \"goto\",\n    \"if\",\n    \"import\",\n    \"interface\",\n    \"map\",\n    \"package\",\n    \"range\",\n    \"return\",\n    \"select\",\n    \"struct\",\n    \"switch\",\n    \"type\",\n    \"var\",\n    \"bool\",\n    \"true\",\n    \"false\",\n    \"uint8\",\n    \"uint16\",\n    \"uint32\",\n    \"uint64\",\n    \"int8\",\n    \"int16\",\n    \"int32\",\n    \"int64\",\n    \"float32\",\n    \"float64\",\n    \"complex64\",\n    \"complex128\",\n    \"byte\",\n    \"rune\",\n    \"uint\",\n    \"int\",\n    \"uintptr\",\n    \"string\",\n    \"nil\"\n  ],\n  operators: [\n    \"+\",\n    \"-\",\n    \"*\",\n    \"/\",\n    \"%\",\n    \"&\",\n    \"|\",\n    \"^\",\n    \"<<\",\n    \">>\",\n    \"&^\",\n    \"+=\",\n    \"-=\",\n    \"*=\",\n    \"/=\",\n    \"%=\",\n    \"&=\",\n    \"|=\",\n    \"^=\",\n    \"<<=\",\n    \">>=\",\n    \"&^=\",\n    \"&&\",\n    \"||\",\n    \"<-\",\n    \"++\",\n    \"--\",\n    \"==\",\n    \"<\",\n    \">\",\n    \"=\",\n    \"!\",\n    \"!=\",\n    \"<=\",\n    \">=\",\n    \":=\",\n    \"...\",\n    \"(\",\n    \")\",\n    \"\",\n    \"]\",\n    \"{\",\n    \"}\",\n    \",\",\n    \";\",\n    \".\",\n    \":\"\n  ],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  tokenizer: {\n    root: [\n      [\n        /[a-zA-Z_]\\w*/,\n        {\n          cases: {\n            \"@keywords\": { token: \"keyword.$0\" },\n            \"@default\": \"identifier\"\n          }\n        }\n      ],\n      { include: \"@whitespace\" },\n      [/\\[\\[.*\\]\\]/, \"annotation\"],\n      [/^\\s*#\\w+/, \"keyword\"],\n      [/[{}()\\[\\]]/, \"@brackets\"],\n      [/[<>](?!@symbols)/, \"@brackets\"],\n      [\n        /@symbols/,\n        {\n          cases: {\n            \"@operators\": \"delimiter\",\n            \"@default\": \"\"\n          }\n        }\n      ],\n      [/\\d*\\d+[eE]([\\-+]?\\d+)?/, \"number.float\"],\n      [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, \"number.float\"],\n      [/0[xX][0-9a-fA-F']*[0-9a-fA-F]/, \"number.hex\"],\n      [/0[0-7']*[0-7]/, \"number.octal\"],\n      [/0[bB][0-1']*[0-1]/, \"number.binary\"],\n      [/\\d[\\d']*/, \"number\"],\n      [/\\d/, \"number\"],\n      [/[;,.]/, \"delimiter\"],\n      [/\"([^\"\\\\]|\\\\.)*$/, \"string.invalid\"],\n      [/\"/, \"string\", \"@string\"],\n      [/`/, \"string\", \"@rawstring\"],\n      [/'[^\\\\']'/, \"string\"],\n      [/(')(@escapes)(')/, [\"string\", \"string.escape\", \"string\"]],\n      [/'/, \"string.invalid\"]\n    ],\n    whitespace: [\n      [/[ \\t\\r\\n]+/, \"\"],\n      [/\\/\\*\\*(?!\\/)/, \"comment.doc\", \"@doccomment\"],\n      [/\\/\\*/, \"comment\", \"@comment\"],\n      [/\\/\\/.*$/, \"comment\"]\n    ],\n    comment: [\n      [/[^\\/*]+/, \"comment\"],\n      [/\\*\\//, \"comment\", \"@pop\"],\n      [/[\\/*]/, \"comment\"]\n    ],\n    doccomment: [\n      [/[^\\/*]+/, \"comment.doc\"],\n      [/\\/\\*/, \"comment.doc.invalid\"],\n      [/\\*\\//, \"comment.doc\", \"@pop\"],\n      [/[\\/*]/, \"comment.doc\"]\n    ],\n    string: [\n      [/[^\\\\\"]+/, \"string\"],\n      [/@escapes/, \"string.escape\"],\n      [/\\\\./, \"string.escape.invalid\"],\n      [/\"/, \"string\", \"@pop\"]\n    ],\n    rawstring: [\n      [/[^\\`]/, \"string\"],\n      [/`/, \"string\", \"@pop\"]\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"]},"metadata":{},"sourceType":"module"}