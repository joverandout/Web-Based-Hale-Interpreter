{"ast":null,"code":"var SqlString = exports;\nvar ID_GLOBAL_REGEXP = /`/g;\nvar QUAL_GLOBAL_REGEXP = /\\./g;\nvar CHARS_GLOBAL_REGEXP = /[\\0\\b\\t\\n\\r\\x1a\\\"\\'\\\\]/g; // eslint-disable-line no-control-regex\n\nvar CHARS_ESCAPE_MAP = {\n  '\\0': '\\\\0',\n  '\\b': '\\\\b',\n  '\\t': '\\\\t',\n  '\\n': '\\\\n',\n  '\\r': '\\\\r',\n  '\\x1a': '\\\\Z',\n  '\"': '\\\\\"',\n  '\\'': '\\\\\\'',\n  '\\\\': '\\\\\\\\'\n};\n\nSqlString.escapeId = function escapeId(val, forbidQualified) {\n  if (Array.isArray(val)) {\n    var sql = '';\n\n    for (var i = 0; i < val.length; i++) {\n      sql += (i === 0 ? '' : ', ') + SqlString.escapeId(val[i], forbidQualified);\n    }\n\n    return sql;\n  } else if (forbidQualified) {\n    return '`' + String(val).replace(ID_GLOBAL_REGEXP, '``') + '`';\n  } else {\n    return '`' + String(val).replace(ID_GLOBAL_REGEXP, '``').replace(QUAL_GLOBAL_REGEXP, '`.`') + '`';\n  }\n};\n\nSqlString.escape = function escape(val, stringifyObjects, timeZone) {\n  if (val === undefined || val === null) {\n    return 'NULL';\n  }\n\n  switch (typeof val) {\n    case 'boolean':\n      return val ? 'true' : 'false';\n\n    case 'number':\n      return val + '';\n\n    case 'object':\n      if (val instanceof Date) {\n        return SqlString.dateToString(val, timeZone || 'local');\n      } else if (Array.isArray(val)) {\n        return SqlString.arrayToList(val, timeZone);\n      } else if (Buffer.isBuffer(val)) {\n        return SqlString.bufferToString(val);\n      } else if (typeof val.toSqlString === 'function') {\n        return String(val.toSqlString());\n      } else if (stringifyObjects) {\n        return escapeString(val.toString());\n      } else {\n        return SqlString.objectToValues(val, timeZone);\n      }\n\n    default:\n      return escapeString(val);\n  }\n};\n\nSqlString.arrayToList = function arrayToList(array, timeZone) {\n  var sql = '';\n\n  for (var i = 0; i < array.length; i++) {\n    var val = array[i];\n\n    if (Array.isArray(val)) {\n      sql += (i === 0 ? '' : ', ') + '(' + SqlString.arrayToList(val, timeZone) + ')';\n    } else {\n      sql += (i === 0 ? '' : ', ') + SqlString.escape(val, true, timeZone);\n    }\n  }\n\n  return sql;\n};\n\nSqlString.format = function format(sql, values, stringifyObjects, timeZone) {\n  if (values == null) {\n    return sql;\n  }\n\n  if (!(values instanceof Array || Array.isArray(values))) {\n    values = [values];\n  }\n\n  var chunkIndex = 0;\n  var placeholdersRegex = /\\?+/g;\n  var result = '';\n  var valuesIndex = 0;\n  var match;\n\n  while (valuesIndex < values.length && (match = placeholdersRegex.exec(sql))) {\n    var len = match[0].length;\n\n    if (len > 2) {\n      continue;\n    }\n\n    var value = len === 2 ? SqlString.escapeId(values[valuesIndex]) : SqlString.escape(values[valuesIndex], stringifyObjects, timeZone);\n    result += sql.slice(chunkIndex, match.index) + value;\n    chunkIndex = placeholdersRegex.lastIndex;\n    valuesIndex++;\n  }\n\n  if (chunkIndex === 0) {\n    // Nothing was replaced\n    return sql;\n  }\n\n  if (chunkIndex < sql.length) {\n    return result + sql.slice(chunkIndex);\n  }\n\n  return result;\n};\n\nSqlString.dateToString = function dateToString(date, timeZone) {\n  var dt = new Date(date);\n\n  if (isNaN(dt.getTime())) {\n    return 'NULL';\n  }\n\n  var year;\n  var month;\n  var day;\n  var hour;\n  var minute;\n  var second;\n  var millisecond;\n\n  if (timeZone === 'local') {\n    year = dt.getFullYear();\n    month = dt.getMonth() + 1;\n    day = dt.getDate();\n    hour = dt.getHours();\n    minute = dt.getMinutes();\n    second = dt.getSeconds();\n    millisecond = dt.getMilliseconds();\n  } else {\n    var tz = convertTimezone(timeZone);\n\n    if (tz !== false && tz !== 0) {\n      dt.setTime(dt.getTime() + tz * 60000);\n    }\n\n    year = dt.getUTCFullYear();\n    month = dt.getUTCMonth() + 1;\n    day = dt.getUTCDate();\n    hour = dt.getUTCHours();\n    minute = dt.getUTCMinutes();\n    second = dt.getUTCSeconds();\n    millisecond = dt.getUTCMilliseconds();\n  } // YYYY-MM-DD HH:mm:ss.mmm\n\n\n  var str = zeroPad(year, 4) + '-' + zeroPad(month, 2) + '-' + zeroPad(day, 2) + ' ' + zeroPad(hour, 2) + ':' + zeroPad(minute, 2) + ':' + zeroPad(second, 2) + '.' + zeroPad(millisecond, 3);\n  return escapeString(str);\n};\n\nSqlString.bufferToString = function bufferToString(buffer) {\n  return 'X' + escapeString(buffer.toString('hex'));\n};\n\nSqlString.objectToValues = function objectToValues(object, timeZone) {\n  var sql = '';\n\n  for (var key in object) {\n    var val = object[key];\n\n    if (typeof val === 'function') {\n      continue;\n    }\n\n    sql += (sql.length === 0 ? '' : ', ') + SqlString.escapeId(key) + ' = ' + SqlString.escape(val, true, timeZone);\n  }\n\n  return sql;\n};\n\nSqlString.raw = function raw(sql) {\n  if (typeof sql !== 'string') {\n    throw new TypeError('argument sql must be a string');\n  }\n\n  return {\n    toSqlString: function toSqlString() {\n      return sql;\n    }\n  };\n};\n\nfunction escapeString(val) {\n  var chunkIndex = CHARS_GLOBAL_REGEXP.lastIndex = 0;\n  var escapedVal = '';\n  var match;\n\n  while (match = CHARS_GLOBAL_REGEXP.exec(val)) {\n    escapedVal += val.slice(chunkIndex, match.index) + CHARS_ESCAPE_MAP[match[0]];\n    chunkIndex = CHARS_GLOBAL_REGEXP.lastIndex;\n  }\n\n  if (chunkIndex === 0) {\n    // Nothing was escaped\n    return \"'\" + val + \"'\";\n  }\n\n  if (chunkIndex < val.length) {\n    return \"'\" + escapedVal + val.slice(chunkIndex) + \"'\";\n  }\n\n  return \"'\" + escapedVal + \"'\";\n}\n\nfunction zeroPad(number, length) {\n  number = number.toString();\n\n  while (number.length < length) {\n    number = '0' + number;\n  }\n\n  return number;\n}\n\nfunction convertTimezone(tz) {\n  if (tz === 'Z') {\n    return 0;\n  }\n\n  var m = tz.match(/([\\+\\-\\s])(\\d\\d):?(\\d\\d)?/);\n\n  if (m) {\n    return (m[1] === '-' ? -1 : 1) * (parseInt(m[2], 10) + (m[3] ? parseInt(m[3], 10) : 0) / 60) * 60;\n  }\n\n  return false;\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/sqlstring/lib/SqlString.js"],"names":["SqlString","exports","ID_GLOBAL_REGEXP","QUAL_GLOBAL_REGEXP","CHARS_GLOBAL_REGEXP","CHARS_ESCAPE_MAP","escapeId","val","forbidQualified","Array","isArray","sql","i","length","String","replace","escape","stringifyObjects","timeZone","undefined","Date","dateToString","arrayToList","Buffer","isBuffer","bufferToString","toSqlString","escapeString","toString","objectToValues","array","format","values","chunkIndex","placeholdersRegex","result","valuesIndex","match","exec","len","value","slice","index","lastIndex","date","dt","isNaN","getTime","year","month","day","hour","minute","second","millisecond","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","tz","convertTimezone","setTime","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","str","zeroPad","buffer","object","key","raw","TypeError","escapedVal","number","m","parseInt"],"mappings":"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","sourcesContent":["var SqlString  = exports;\n\nvar ID_GLOBAL_REGEXP    = /`/g;\nvar QUAL_GLOBAL_REGEXP  = /\\./g;\nvar CHARS_GLOBAL_REGEXP = /[\\0\\b\\t\\n\\r\\x1a\\\"\\'\\\\]/g; // eslint-disable-line no-control-regex\nvar CHARS_ESCAPE_MAP    = {\n  '\\0'   : '\\\\0',\n  '\\b'   : '\\\\b',\n  '\\t'   : '\\\\t',\n  '\\n'   : '\\\\n',\n  '\\r'   : '\\\\r',\n  '\\x1a' : '\\\\Z',\n  '\"'    : '\\\\\"',\n  '\\''   : '\\\\\\'',\n  '\\\\'   : '\\\\\\\\'\n};\n\nSqlString.escapeId = function escapeId(val, forbidQualified) {\n  if (Array.isArray(val)) {\n    var sql = '';\n\n    for (var i = 0; i < val.length; i++) {\n      sql += (i === 0 ? '' : ', ') + SqlString.escapeId(val[i], forbidQualified);\n    }\n\n    return sql;\n  } else if (forbidQualified) {\n    return '`' + String(val).replace(ID_GLOBAL_REGEXP, '``') + '`';\n  } else {\n    return '`' + String(val).replace(ID_GLOBAL_REGEXP, '``').replace(QUAL_GLOBAL_REGEXP, '`.`') + '`';\n  }\n};\n\nSqlString.escape = function escape(val, stringifyObjects, timeZone) {\n  if (val === undefined || val === null) {\n    return 'NULL';\n  }\n\n  switch (typeof val) {\n    case 'boolean': return (val) ? 'true' : 'false';\n    case 'number': return val + '';\n    case 'object':\n      if (val instanceof Date) {\n        return SqlString.dateToString(val, timeZone || 'local');\n      } else if (Array.isArray(val)) {\n        return SqlString.arrayToList(val, timeZone);\n      } else if (Buffer.isBuffer(val)) {\n        return SqlString.bufferToString(val);\n      } else if (typeof val.toSqlString === 'function') {\n        return String(val.toSqlString());\n      } else if (stringifyObjects) {\n        return escapeString(val.toString());\n      } else {\n        return SqlString.objectToValues(val, timeZone);\n      }\n    default: return escapeString(val);\n  }\n};\n\nSqlString.arrayToList = function arrayToList(array, timeZone) {\n  var sql = '';\n\n  for (var i = 0; i < array.length; i++) {\n    var val = array[i];\n\n    if (Array.isArray(val)) {\n      sql += (i === 0 ? '' : ', ') + '(' + SqlString.arrayToList(val, timeZone) + ')';\n    } else {\n      sql += (i === 0 ? '' : ', ') + SqlString.escape(val, true, timeZone);\n    }\n  }\n\n  return sql;\n};\n\nSqlString.format = function format(sql, values, stringifyObjects, timeZone) {\n  if (values == null) {\n    return sql;\n  }\n\n  if (!(values instanceof Array || Array.isArray(values))) {\n    values = [values];\n  }\n\n  var chunkIndex        = 0;\n  var placeholdersRegex = /\\?+/g;\n  var result            = '';\n  var valuesIndex       = 0;\n  var match;\n\n  while (valuesIndex < values.length && (match = placeholdersRegex.exec(sql))) {\n    var len = match[0].length;\n\n    if (len > 2) {\n      continue;\n    }\n\n    var value = len === 2\n      ? SqlString.escapeId(values[valuesIndex])\n      : SqlString.escape(values[valuesIndex], stringifyObjects, timeZone);\n\n    result += sql.slice(chunkIndex, match.index) + value;\n    chunkIndex = placeholdersRegex.lastIndex;\n    valuesIndex++;\n  }\n\n  if (chunkIndex === 0) {\n    // Nothing was replaced\n    return sql;\n  }\n\n  if (chunkIndex < sql.length) {\n    return result + sql.slice(chunkIndex);\n  }\n\n  return result;\n};\n\nSqlString.dateToString = function dateToString(date, timeZone) {\n  var dt = new Date(date);\n\n  if (isNaN(dt.getTime())) {\n    return 'NULL';\n  }\n\n  var year;\n  var month;\n  var day;\n  var hour;\n  var minute;\n  var second;\n  var millisecond;\n\n  if (timeZone === 'local') {\n    year        = dt.getFullYear();\n    month       = dt.getMonth() + 1;\n    day         = dt.getDate();\n    hour        = dt.getHours();\n    minute      = dt.getMinutes();\n    second      = dt.getSeconds();\n    millisecond = dt.getMilliseconds();\n  } else {\n    var tz = convertTimezone(timeZone);\n\n    if (tz !== false && tz !== 0) {\n      dt.setTime(dt.getTime() + (tz * 60000));\n    }\n\n    year       = dt.getUTCFullYear();\n    month       = dt.getUTCMonth() + 1;\n    day         = dt.getUTCDate();\n    hour        = dt.getUTCHours();\n    minute      = dt.getUTCMinutes();\n    second      = dt.getUTCSeconds();\n    millisecond = dt.getUTCMilliseconds();\n  }\n\n  // YYYY-MM-DD HH:mm:ss.mmm\n  var str = zeroPad(year, 4) + '-' + zeroPad(month, 2) + '-' + zeroPad(day, 2) + ' ' +\n    zeroPad(hour, 2) + ':' + zeroPad(minute, 2) + ':' + zeroPad(second, 2) + '.' +\n    zeroPad(millisecond, 3);\n\n  return escapeString(str);\n};\n\nSqlString.bufferToString = function bufferToString(buffer) {\n  return 'X' + escapeString(buffer.toString('hex'));\n};\n\nSqlString.objectToValues = function objectToValues(object, timeZone) {\n  var sql = '';\n\n  for (var key in object) {\n    var val = object[key];\n\n    if (typeof val === 'function') {\n      continue;\n    }\n\n    sql += (sql.length === 0 ? '' : ', ') + SqlString.escapeId(key) + ' = ' + SqlString.escape(val, true, timeZone);\n  }\n\n  return sql;\n};\n\nSqlString.raw = function raw(sql) {\n  if (typeof sql !== 'string') {\n    throw new TypeError('argument sql must be a string');\n  }\n\n  return {\n    toSqlString: function toSqlString() { return sql; }\n  };\n};\n\nfunction escapeString(val) {\n  var chunkIndex = CHARS_GLOBAL_REGEXP.lastIndex = 0;\n  var escapedVal = '';\n  var match;\n\n  while ((match = CHARS_GLOBAL_REGEXP.exec(val))) {\n    escapedVal += val.slice(chunkIndex, match.index) + CHARS_ESCAPE_MAP[match[0]];\n    chunkIndex = CHARS_GLOBAL_REGEXP.lastIndex;\n  }\n\n  if (chunkIndex === 0) {\n    // Nothing was escaped\n    return \"'\" + val + \"'\";\n  }\n\n  if (chunkIndex < val.length) {\n    return \"'\" + escapedVal + val.slice(chunkIndex) + \"'\";\n  }\n\n  return \"'\" + escapedVal + \"'\";\n}\n\nfunction zeroPad(number, length) {\n  number = number.toString();\n  while (number.length < length) {\n    number = '0' + number;\n  }\n\n  return number;\n}\n\nfunction convertTimezone(tz) {\n  if (tz === 'Z') {\n    return 0;\n  }\n\n  var m = tz.match(/([\\+\\-\\s])(\\d\\d):?(\\d\\d)?/);\n  if (m) {\n    return (m[1] === '-' ? -1 : 1) * (parseInt(m[2], 10) + ((m[3] ? parseInt(m[3], 10) : 0) / 60)) * 60;\n  }\n  return false;\n}\n"]},"metadata":{},"sourceType":"script"}