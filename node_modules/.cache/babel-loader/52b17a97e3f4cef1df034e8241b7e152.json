{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { SmoothScrollableElement } from '../../../../base/browser/ui/scrollbar/scrollableElement.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nimport { registerThemingParticipant, getThemeTypeSelector } from '../../../../platform/theme/common/themeService.js';\nimport { scrollbarShadow, scrollbarSliderActiveBackground, scrollbarSliderBackground, scrollbarSliderHoverBackground } from '../../../../platform/theme/common/colorRegistry.js';\nexport class EditorScrollbar extends ViewPart {\n  constructor(context, linesContent, viewDomNode, overflowGuardDomNode) {\n    super(context);\n    const options = this._context.configuration.options;\n    const scrollbar = options.get(92\n    /* scrollbar */\n    );\n    const mouseWheelScrollSensitivity = options.get(67\n    /* mouseWheelScrollSensitivity */\n    );\n    const fastScrollSensitivity = options.get(34\n    /* fastScrollSensitivity */\n    );\n    const scrollPredominantAxis = options.get(95\n    /* scrollPredominantAxis */\n    );\n    const scrollbarOptions = {\n      listenOnDomNode: viewDomNode.domNode,\n      className: 'editor-scrollable' + ' ' + getThemeTypeSelector(context.theme.type),\n      useShadows: false,\n      lazyRender: true,\n      vertical: scrollbar.vertical,\n      horizontal: scrollbar.horizontal,\n      verticalHasArrows: scrollbar.verticalHasArrows,\n      horizontalHasArrows: scrollbar.horizontalHasArrows,\n      verticalScrollbarSize: scrollbar.verticalScrollbarSize,\n      verticalSliderSize: scrollbar.verticalSliderSize,\n      horizontalScrollbarSize: scrollbar.horizontalScrollbarSize,\n      horizontalSliderSize: scrollbar.horizontalSliderSize,\n      handleMouseWheel: scrollbar.handleMouseWheel,\n      alwaysConsumeMouseWheel: scrollbar.alwaysConsumeMouseWheel,\n      arrowSize: scrollbar.arrowSize,\n      mouseWheelScrollSensitivity: mouseWheelScrollSensitivity,\n      fastScrollSensitivity: fastScrollSensitivity,\n      scrollPredominantAxis: scrollPredominantAxis,\n      scrollByPage: scrollbar.scrollByPage\n    };\n    this.scrollbar = this._register(new SmoothScrollableElement(linesContent.domNode, scrollbarOptions, this._context.viewLayout.getScrollable()));\n    PartFingerprints.write(this.scrollbar.getDomNode(), 5\n    /* ScrollableElement */\n    );\n    this.scrollbarDomNode = createFastDomNode(this.scrollbar.getDomNode());\n    this.scrollbarDomNode.setPosition('absolute');\n\n    this._setLayout(); // When having a zone widget that calls .focus() on one of its dom elements,\n    // the browser will try desperately to reveal that dom node, unexpectedly\n    // changing the .scrollTop of this.linesContent\n\n\n    const onBrowserDesperateReveal = (domNode, lookAtScrollTop, lookAtScrollLeft) => {\n      const newScrollPosition = {};\n\n      if (lookAtScrollTop) {\n        const deltaTop = domNode.scrollTop;\n\n        if (deltaTop) {\n          newScrollPosition.scrollTop = this._context.viewLayout.getCurrentScrollTop() + deltaTop;\n          domNode.scrollTop = 0;\n        }\n      }\n\n      if (lookAtScrollLeft) {\n        const deltaLeft = domNode.scrollLeft;\n\n        if (deltaLeft) {\n          newScrollPosition.scrollLeft = this._context.viewLayout.getCurrentScrollLeft() + deltaLeft;\n          domNode.scrollLeft = 0;\n        }\n      }\n\n      this._context.model.setScrollPosition(newScrollPosition, 1\n      /* Immediate */\n      );\n    }; // I've seen this happen both on the view dom node & on the lines content dom node.\n\n\n    this._register(dom.addDisposableListener(viewDomNode.domNode, 'scroll', e => onBrowserDesperateReveal(viewDomNode.domNode, true, true)));\n\n    this._register(dom.addDisposableListener(linesContent.domNode, 'scroll', e => onBrowserDesperateReveal(linesContent.domNode, true, false)));\n\n    this._register(dom.addDisposableListener(overflowGuardDomNode.domNode, 'scroll', e => onBrowserDesperateReveal(overflowGuardDomNode.domNode, true, false)));\n\n    this._register(dom.addDisposableListener(this.scrollbarDomNode.domNode, 'scroll', e => onBrowserDesperateReveal(this.scrollbarDomNode.domNode, true, false)));\n  }\n\n  dispose() {\n    super.dispose();\n  }\n\n  _setLayout() {\n    const options = this._context.configuration.options;\n    const layoutInfo = options.get(131\n    /* layoutInfo */\n    );\n    this.scrollbarDomNode.setLeft(layoutInfo.contentLeft);\n    const minimap = options.get(65\n    /* minimap */\n    );\n    const side = minimap.side;\n\n    if (side === 'right') {\n      this.scrollbarDomNode.setWidth(layoutInfo.contentWidth + layoutInfo.minimap.minimapWidth);\n    } else {\n      this.scrollbarDomNode.setWidth(layoutInfo.contentWidth);\n    }\n\n    this.scrollbarDomNode.setHeight(layoutInfo.height);\n  }\n\n  getOverviewRulerLayoutInfo() {\n    return this.scrollbar.getOverviewRulerLayoutInfo();\n  }\n\n  getDomNode() {\n    return this.scrollbarDomNode;\n  }\n\n  delegateVerticalScrollbarMouseDown(browserEvent) {\n    this.scrollbar.delegateVerticalScrollbarMouseDown(browserEvent);\n  } // --- begin event handlers\n\n\n  onConfigurationChanged(e) {\n    if (e.hasChanged(92\n    /* scrollbar */\n    ) || e.hasChanged(67\n    /* mouseWheelScrollSensitivity */\n    ) || e.hasChanged(34\n    /* fastScrollSensitivity */\n    )) {\n      const options = this._context.configuration.options;\n      const scrollbar = options.get(92\n      /* scrollbar */\n      );\n      const mouseWheelScrollSensitivity = options.get(67\n      /* mouseWheelScrollSensitivity */\n      );\n      const fastScrollSensitivity = options.get(34\n      /* fastScrollSensitivity */\n      );\n      const scrollPredominantAxis = options.get(95\n      /* scrollPredominantAxis */\n      );\n      const newOpts = {\n        vertical: scrollbar.vertical,\n        horizontal: scrollbar.horizontal,\n        verticalScrollbarSize: scrollbar.verticalScrollbarSize,\n        horizontalScrollbarSize: scrollbar.horizontalScrollbarSize,\n        scrollByPage: scrollbar.scrollByPage,\n        handleMouseWheel: scrollbar.handleMouseWheel,\n        mouseWheelScrollSensitivity: mouseWheelScrollSensitivity,\n        fastScrollSensitivity: fastScrollSensitivity,\n        scrollPredominantAxis: scrollPredominantAxis\n      };\n      this.scrollbar.updateOptions(newOpts);\n    }\n\n    if (e.hasChanged(131\n    /* layoutInfo */\n    )) {\n      this._setLayout();\n    }\n\n    return true;\n  }\n\n  onScrollChanged(e) {\n    return true;\n  }\n\n  onThemeChanged(e) {\n    this.scrollbar.updateClassName('editor-scrollable' + ' ' + getThemeTypeSelector(this._context.theme.type));\n    return true;\n  } // --- end event handlers\n\n\n  prepareRender(ctx) {// Nothing to do\n  }\n\n  render(ctx) {\n    this.scrollbar.renderNow();\n  }\n\n}\nregisterThemingParticipant((theme, collector) => {\n  // Scrollbars\n  const scrollbarShadowColor = theme.getColor(scrollbarShadow);\n\n  if (scrollbarShadowColor) {\n    collector.addRule(`\n\t\t\t.monaco-scrollable-element > .shadow.top {\n\t\t\t\tbox-shadow: ${scrollbarShadowColor} 0 6px 6px -6px inset;\n\t\t\t}\n\n\t\t\t.monaco-scrollable-element > .shadow.left {\n\t\t\t\tbox-shadow: ${scrollbarShadowColor} 6px 0 6px -6px inset;\n\t\t\t}\n\n\t\t\t.monaco-scrollable-element > .shadow.top.left {\n\t\t\t\tbox-shadow: ${scrollbarShadowColor} 6px 6px 6px -6px inset;\n\t\t\t}\n\t\t`);\n  }\n\n  const scrollbarSliderBackgroundColor = theme.getColor(scrollbarSliderBackground);\n\n  if (scrollbarSliderBackgroundColor) {\n    collector.addRule(`\n\t\t\t.monaco-scrollable-element > .scrollbar > .slider {\n\t\t\t\tbackground: ${scrollbarSliderBackgroundColor};\n\t\t\t}\n\t\t`);\n  }\n\n  const scrollbarSliderHoverBackgroundColor = theme.getColor(scrollbarSliderHoverBackground);\n\n  if (scrollbarSliderHoverBackgroundColor) {\n    collector.addRule(`\n\t\t\t.monaco-scrollable-element > .scrollbar > .slider:hover {\n\t\t\t\tbackground: ${scrollbarSliderHoverBackgroundColor};\n\t\t\t}\n\t\t`);\n  }\n\n  const scrollbarSliderActiveBackgroundColor = theme.getColor(scrollbarSliderActiveBackground);\n\n  if (scrollbarSliderActiveBackgroundColor) {\n    collector.addRule(`\n\t\t\t.monaco-scrollable-element > .scrollbar > .slider.active {\n\t\t\t\tbackground: ${scrollbarSliderActiveBackgroundColor};\n\t\t\t}\n\t\t`);\n  }\n});","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/editorScrollbar/editorScrollbar.js"],"names":["dom","createFastDomNode","SmoothScrollableElement","PartFingerprints","ViewPart","registerThemingParticipant","getThemeTypeSelector","scrollbarShadow","scrollbarSliderActiveBackground","scrollbarSliderBackground","scrollbarSliderHoverBackground","EditorScrollbar","constructor","context","linesContent","viewDomNode","overflowGuardDomNode","options","_context","configuration","scrollbar","get","mouseWheelScrollSensitivity","fastScrollSensitivity","scrollPredominantAxis","scrollbarOptions","listenOnDomNode","domNode","className","theme","type","useShadows","lazyRender","vertical","horizontal","verticalHasArrows","horizontalHasArrows","verticalScrollbarSize","verticalSliderSize","horizontalScrollbarSize","horizontalSliderSize","handleMouseWheel","alwaysConsumeMouseWheel","arrowSize","scrollByPage","_register","viewLayout","getScrollable","write","getDomNode","scrollbarDomNode","setPosition","_setLayout","onBrowserDesperateReveal","lookAtScrollTop","lookAtScrollLeft","newScrollPosition","deltaTop","scrollTop","getCurrentScrollTop","deltaLeft","scrollLeft","getCurrentScrollLeft","model","setScrollPosition","addDisposableListener","e","dispose","layoutInfo","setLeft","contentLeft","minimap","side","setWidth","contentWidth","minimapWidth","setHeight","height","getOverviewRulerLayoutInfo","delegateVerticalScrollbarMouseDown","browserEvent","onConfigurationChanged","hasChanged","newOpts","updateOptions","onScrollChanged","onThemeChanged","updateClassName","prepareRender","ctx","render","renderNow","collector","scrollbarShadowColor","getColor","addRule","scrollbarSliderBackgroundColor","scrollbarSliderHoverBackgroundColor","scrollbarSliderActiveBackgroundColor"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { SmoothScrollableElement } from '../../../../base/browser/ui/scrollbar/scrollableElement.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nimport { registerThemingParticipant, getThemeTypeSelector } from '../../../../platform/theme/common/themeService.js';\nimport { scrollbarShadow, scrollbarSliderActiveBackground, scrollbarSliderBackground, scrollbarSliderHoverBackground } from '../../../../platform/theme/common/colorRegistry.js';\nexport class EditorScrollbar extends ViewPart {\n    constructor(context, linesContent, viewDomNode, overflowGuardDomNode) {\n        super(context);\n        const options = this._context.configuration.options;\n        const scrollbar = options.get(92 /* scrollbar */);\n        const mouseWheelScrollSensitivity = options.get(67 /* mouseWheelScrollSensitivity */);\n        const fastScrollSensitivity = options.get(34 /* fastScrollSensitivity */);\n        const scrollPredominantAxis = options.get(95 /* scrollPredominantAxis */);\n        const scrollbarOptions = {\n            listenOnDomNode: viewDomNode.domNode,\n            className: 'editor-scrollable' + ' ' + getThemeTypeSelector(context.theme.type),\n            useShadows: false,\n            lazyRender: true,\n            vertical: scrollbar.vertical,\n            horizontal: scrollbar.horizontal,\n            verticalHasArrows: scrollbar.verticalHasArrows,\n            horizontalHasArrows: scrollbar.horizontalHasArrows,\n            verticalScrollbarSize: scrollbar.verticalScrollbarSize,\n            verticalSliderSize: scrollbar.verticalSliderSize,\n            horizontalScrollbarSize: scrollbar.horizontalScrollbarSize,\n            horizontalSliderSize: scrollbar.horizontalSliderSize,\n            handleMouseWheel: scrollbar.handleMouseWheel,\n            alwaysConsumeMouseWheel: scrollbar.alwaysConsumeMouseWheel,\n            arrowSize: scrollbar.arrowSize,\n            mouseWheelScrollSensitivity: mouseWheelScrollSensitivity,\n            fastScrollSensitivity: fastScrollSensitivity,\n            scrollPredominantAxis: scrollPredominantAxis,\n            scrollByPage: scrollbar.scrollByPage,\n        };\n        this.scrollbar = this._register(new SmoothScrollableElement(linesContent.domNode, scrollbarOptions, this._context.viewLayout.getScrollable()));\n        PartFingerprints.write(this.scrollbar.getDomNode(), 5 /* ScrollableElement */);\n        this.scrollbarDomNode = createFastDomNode(this.scrollbar.getDomNode());\n        this.scrollbarDomNode.setPosition('absolute');\n        this._setLayout();\n        // When having a zone widget that calls .focus() on one of its dom elements,\n        // the browser will try desperately to reveal that dom node, unexpectedly\n        // changing the .scrollTop of this.linesContent\n        const onBrowserDesperateReveal = (domNode, lookAtScrollTop, lookAtScrollLeft) => {\n            const newScrollPosition = {};\n            if (lookAtScrollTop) {\n                const deltaTop = domNode.scrollTop;\n                if (deltaTop) {\n                    newScrollPosition.scrollTop = this._context.viewLayout.getCurrentScrollTop() + deltaTop;\n                    domNode.scrollTop = 0;\n                }\n            }\n            if (lookAtScrollLeft) {\n                const deltaLeft = domNode.scrollLeft;\n                if (deltaLeft) {\n                    newScrollPosition.scrollLeft = this._context.viewLayout.getCurrentScrollLeft() + deltaLeft;\n                    domNode.scrollLeft = 0;\n                }\n            }\n            this._context.model.setScrollPosition(newScrollPosition, 1 /* Immediate */);\n        };\n        // I've seen this happen both on the view dom node & on the lines content dom node.\n        this._register(dom.addDisposableListener(viewDomNode.domNode, 'scroll', (e) => onBrowserDesperateReveal(viewDomNode.domNode, true, true)));\n        this._register(dom.addDisposableListener(linesContent.domNode, 'scroll', (e) => onBrowserDesperateReveal(linesContent.domNode, true, false)));\n        this._register(dom.addDisposableListener(overflowGuardDomNode.domNode, 'scroll', (e) => onBrowserDesperateReveal(overflowGuardDomNode.domNode, true, false)));\n        this._register(dom.addDisposableListener(this.scrollbarDomNode.domNode, 'scroll', (e) => onBrowserDesperateReveal(this.scrollbarDomNode.domNode, true, false)));\n    }\n    dispose() {\n        super.dispose();\n    }\n    _setLayout() {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this.scrollbarDomNode.setLeft(layoutInfo.contentLeft);\n        const minimap = options.get(65 /* minimap */);\n        const side = minimap.side;\n        if (side === 'right') {\n            this.scrollbarDomNode.setWidth(layoutInfo.contentWidth + layoutInfo.minimap.minimapWidth);\n        }\n        else {\n            this.scrollbarDomNode.setWidth(layoutInfo.contentWidth);\n        }\n        this.scrollbarDomNode.setHeight(layoutInfo.height);\n    }\n    getOverviewRulerLayoutInfo() {\n        return this.scrollbar.getOverviewRulerLayoutInfo();\n    }\n    getDomNode() {\n        return this.scrollbarDomNode;\n    }\n    delegateVerticalScrollbarMouseDown(browserEvent) {\n        this.scrollbar.delegateVerticalScrollbarMouseDown(browserEvent);\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        if (e.hasChanged(92 /* scrollbar */)\n            || e.hasChanged(67 /* mouseWheelScrollSensitivity */)\n            || e.hasChanged(34 /* fastScrollSensitivity */)) {\n            const options = this._context.configuration.options;\n            const scrollbar = options.get(92 /* scrollbar */);\n            const mouseWheelScrollSensitivity = options.get(67 /* mouseWheelScrollSensitivity */);\n            const fastScrollSensitivity = options.get(34 /* fastScrollSensitivity */);\n            const scrollPredominantAxis = options.get(95 /* scrollPredominantAxis */);\n            const newOpts = {\n                vertical: scrollbar.vertical,\n                horizontal: scrollbar.horizontal,\n                verticalScrollbarSize: scrollbar.verticalScrollbarSize,\n                horizontalScrollbarSize: scrollbar.horizontalScrollbarSize,\n                scrollByPage: scrollbar.scrollByPage,\n                handleMouseWheel: scrollbar.handleMouseWheel,\n                mouseWheelScrollSensitivity: mouseWheelScrollSensitivity,\n                fastScrollSensitivity: fastScrollSensitivity,\n                scrollPredominantAxis: scrollPredominantAxis\n            };\n            this.scrollbar.updateOptions(newOpts);\n        }\n        if (e.hasChanged(131 /* layoutInfo */)) {\n            this._setLayout();\n        }\n        return true;\n    }\n    onScrollChanged(e) {\n        return true;\n    }\n    onThemeChanged(e) {\n        this.scrollbar.updateClassName('editor-scrollable' + ' ' + getThemeTypeSelector(this._context.theme.type));\n        return true;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        // Nothing to do\n    }\n    render(ctx) {\n        this.scrollbar.renderNow();\n    }\n}\nregisterThemingParticipant((theme, collector) => {\n    // Scrollbars\n    const scrollbarShadowColor = theme.getColor(scrollbarShadow);\n    if (scrollbarShadowColor) {\n        collector.addRule(`\n\t\t\t.monaco-scrollable-element > .shadow.top {\n\t\t\t\tbox-shadow: ${scrollbarShadowColor} 0 6px 6px -6px inset;\n\t\t\t}\n\n\t\t\t.monaco-scrollable-element > .shadow.left {\n\t\t\t\tbox-shadow: ${scrollbarShadowColor} 6px 0 6px -6px inset;\n\t\t\t}\n\n\t\t\t.monaco-scrollable-element > .shadow.top.left {\n\t\t\t\tbox-shadow: ${scrollbarShadowColor} 6px 6px 6px -6px inset;\n\t\t\t}\n\t\t`);\n    }\n    const scrollbarSliderBackgroundColor = theme.getColor(scrollbarSliderBackground);\n    if (scrollbarSliderBackgroundColor) {\n        collector.addRule(`\n\t\t\t.monaco-scrollable-element > .scrollbar > .slider {\n\t\t\t\tbackground: ${scrollbarSliderBackgroundColor};\n\t\t\t}\n\t\t`);\n    }\n    const scrollbarSliderHoverBackgroundColor = theme.getColor(scrollbarSliderHoverBackground);\n    if (scrollbarSliderHoverBackgroundColor) {\n        collector.addRule(`\n\t\t\t.monaco-scrollable-element > .scrollbar > .slider:hover {\n\t\t\t\tbackground: ${scrollbarSliderHoverBackgroundColor};\n\t\t\t}\n\t\t`);\n    }\n    const scrollbarSliderActiveBackgroundColor = theme.getColor(scrollbarSliderActiveBackground);\n    if (scrollbarSliderActiveBackgroundColor) {\n        collector.addRule(`\n\t\t\t.monaco-scrollable-element > .scrollbar > .slider.active {\n\t\t\t\tbackground: ${scrollbarSliderActiveBackgroundColor};\n\t\t\t}\n\t\t`);\n    }\n});\n"]},"metadata":{},"sourceType":"module"}