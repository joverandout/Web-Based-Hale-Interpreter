{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nexport const IConfigurationService = createDecorator('configurationService');\nexport function toValuesTree(properties, conflictReporter) {\n  const root = Object.create(null);\n\n  for (let key in properties) {\n    addToValueTree(root, key, properties[key], conflictReporter);\n  }\n\n  return root;\n}\nexport function addToValueTree(settingsTreeRoot, key, value, conflictReporter) {\n  const segments = key.split('.');\n  const last = segments.pop();\n  let curr = settingsTreeRoot;\n\n  for (let i = 0; i < segments.length; i++) {\n    let s = segments[i];\n    let obj = curr[s];\n\n    switch (typeof obj) {\n      case 'undefined':\n        obj = curr[s] = Object.create(null);\n        break;\n\n      case 'object':\n        break;\n\n      default:\n        conflictReporter(`Ignoring ${key} as ${segments.slice(0, i + 1).join('.')} is ${JSON.stringify(obj)}`);\n        return;\n    }\n\n    curr = obj;\n  }\n\n  if (typeof curr === 'object' && curr !== null) {\n    try {\n      curr[last] = value; // workaround https://github.com/microsoft/vscode/issues/13606\n    } catch (e) {\n      conflictReporter(`Ignoring ${key} as ${segments.join('.')} is ${JSON.stringify(curr)}`);\n    }\n  } else {\n    conflictReporter(`Ignoring ${key} as ${segments.join('.')} is ${JSON.stringify(curr)}`);\n  }\n}\nexport function removeFromValueTree(valueTree, key) {\n  const segments = key.split('.');\n  doRemoveFromValueTree(valueTree, segments);\n}\n\nfunction doRemoveFromValueTree(valueTree, segments) {\n  const first = segments.shift();\n\n  if (segments.length === 0) {\n    // Reached last segment\n    delete valueTree[first];\n    return;\n  }\n\n  if (Object.keys(valueTree).indexOf(first) !== -1) {\n    const value = valueTree[first];\n\n    if (typeof value === 'object' && !Array.isArray(value)) {\n      doRemoveFromValueTree(value, segments);\n\n      if (Object.keys(value).length === 0) {\n        delete valueTree[first];\n      }\n    }\n  }\n}\n/**\n * A helper function to get the configuration value with a specific settings path (e.g. config.some.setting)\n */\n\n\nexport function getConfigurationValue(config, settingPath, defaultValue) {\n  function accessSetting(config, path) {\n    let current = config;\n\n    for (const component of path) {\n      if (typeof current !== 'object' || current === null) {\n        return undefined;\n      }\n\n      current = current[component];\n    }\n\n    return current;\n  }\n\n  const path = settingPath.split('.');\n  const result = accessSetting(config, path);\n  return typeof result === 'undefined' ? defaultValue : result;\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/platform/configuration/common/configuration.js"],"names":["createDecorator","IConfigurationService","toValuesTree","properties","conflictReporter","root","Object","create","key","addToValueTree","settingsTreeRoot","value","segments","split","last","pop","curr","i","length","s","obj","slice","join","JSON","stringify","e","removeFromValueTree","valueTree","doRemoveFromValueTree","first","shift","keys","indexOf","Array","isArray","getConfigurationValue","config","settingPath","defaultValue","accessSetting","path","current","component","undefined","result"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nexport const IConfigurationService = createDecorator('configurationService');\nexport function toValuesTree(properties, conflictReporter) {\n    const root = Object.create(null);\n    for (let key in properties) {\n        addToValueTree(root, key, properties[key], conflictReporter);\n    }\n    return root;\n}\nexport function addToValueTree(settingsTreeRoot, key, value, conflictReporter) {\n    const segments = key.split('.');\n    const last = segments.pop();\n    let curr = settingsTreeRoot;\n    for (let i = 0; i < segments.length; i++) {\n        let s = segments[i];\n        let obj = curr[s];\n        switch (typeof obj) {\n            case 'undefined':\n                obj = curr[s] = Object.create(null);\n                break;\n            case 'object':\n                break;\n            default:\n                conflictReporter(`Ignoring ${key} as ${segments.slice(0, i + 1).join('.')} is ${JSON.stringify(obj)}`);\n                return;\n        }\n        curr = obj;\n    }\n    if (typeof curr === 'object' && curr !== null) {\n        try {\n            curr[last] = value; // workaround https://github.com/microsoft/vscode/issues/13606\n        }\n        catch (e) {\n            conflictReporter(`Ignoring ${key} as ${segments.join('.')} is ${JSON.stringify(curr)}`);\n        }\n    }\n    else {\n        conflictReporter(`Ignoring ${key} as ${segments.join('.')} is ${JSON.stringify(curr)}`);\n    }\n}\nexport function removeFromValueTree(valueTree, key) {\n    const segments = key.split('.');\n    doRemoveFromValueTree(valueTree, segments);\n}\nfunction doRemoveFromValueTree(valueTree, segments) {\n    const first = segments.shift();\n    if (segments.length === 0) {\n        // Reached last segment\n        delete valueTree[first];\n        return;\n    }\n    if (Object.keys(valueTree).indexOf(first) !== -1) {\n        const value = valueTree[first];\n        if (typeof value === 'object' && !Array.isArray(value)) {\n            doRemoveFromValueTree(value, segments);\n            if (Object.keys(value).length === 0) {\n                delete valueTree[first];\n            }\n        }\n    }\n}\n/**\n * A helper function to get the configuration value with a specific settings path (e.g. config.some.setting)\n */\nexport function getConfigurationValue(config, settingPath, defaultValue) {\n    function accessSetting(config, path) {\n        let current = config;\n        for (const component of path) {\n            if (typeof current !== 'object' || current === null) {\n                return undefined;\n            }\n            current = current[component];\n        }\n        return current;\n    }\n    const path = settingPath.split('.');\n    const result = accessSetting(config, path);\n    return typeof result === 'undefined' ? defaultValue : result;\n}\n"]},"metadata":{},"sourceType":"module"}