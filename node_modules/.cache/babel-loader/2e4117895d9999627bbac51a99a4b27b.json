{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { InlineDecoration, ViewModelDecoration } from './viewModel.js';\nimport { filterValidationDecorations } from '../config/editorOptions.js';\nexport class ViewModelDecorations {\n  constructor(editorId, model, configuration, linesCollection, coordinatesConverter) {\n    this.editorId = editorId;\n    this.model = model;\n    this.configuration = configuration;\n    this._linesCollection = linesCollection;\n    this._coordinatesConverter = coordinatesConverter;\n    this._decorationsCache = Object.create(null);\n    this._cachedModelDecorationsResolver = null;\n    this._cachedModelDecorationsResolverViewRange = null;\n  }\n\n  _clearCachedModelDecorationsResolver() {\n    this._cachedModelDecorationsResolver = null;\n    this._cachedModelDecorationsResolverViewRange = null;\n  }\n\n  dispose() {\n    this._decorationsCache = Object.create(null);\n\n    this._clearCachedModelDecorationsResolver();\n  }\n\n  reset() {\n    this._decorationsCache = Object.create(null);\n\n    this._clearCachedModelDecorationsResolver();\n  }\n\n  onModelDecorationsChanged() {\n    this._decorationsCache = Object.create(null);\n\n    this._clearCachedModelDecorationsResolver();\n  }\n\n  onLineMappingChanged() {\n    this._decorationsCache = Object.create(null);\n\n    this._clearCachedModelDecorationsResolver();\n  }\n\n  _getOrCreateViewModelDecoration(modelDecoration) {\n    const id = modelDecoration.id;\n    let r = this._decorationsCache[id];\n\n    if (!r) {\n      const modelRange = modelDecoration.range;\n      const options = modelDecoration.options;\n      let viewRange;\n\n      if (options.isWholeLine) {\n        const start = this._coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.startLineNumber, 1), 0\n        /* Left */\n        );\n\n        const end = this._coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.endLineNumber, this.model.getLineMaxColumn(modelRange.endLineNumber)), 1\n        /* Right */\n        );\n\n        viewRange = new Range(start.lineNumber, start.column, end.lineNumber, end.column);\n      } else {\n        // For backwards compatibility reasons, we want injected text before any decoration.\n        // Thus, move decorations to the right.\n        viewRange = this._coordinatesConverter.convertModelRangeToViewRange(modelRange, 1\n        /* Right */\n        );\n      }\n\n      r = new ViewModelDecoration(viewRange, options);\n      this._decorationsCache[id] = r;\n    }\n\n    return r;\n  }\n\n  getDecorationsViewportData(viewRange) {\n    let cacheIsValid = this._cachedModelDecorationsResolver !== null;\n    cacheIsValid = cacheIsValid && viewRange.equalsRange(this._cachedModelDecorationsResolverViewRange);\n\n    if (!cacheIsValid) {\n      this._cachedModelDecorationsResolver = this._getDecorationsViewportData(viewRange);\n      this._cachedModelDecorationsResolverViewRange = viewRange;\n    }\n\n    return this._cachedModelDecorationsResolver;\n  }\n\n  _getDecorationsViewportData(viewportRange) {\n    const modelDecorations = this._linesCollection.getDecorationsInRange(viewportRange, this.editorId, filterValidationDecorations(this.configuration.options));\n\n    const startLineNumber = viewportRange.startLineNumber;\n    const endLineNumber = viewportRange.endLineNumber;\n    const decorationsInViewport = [];\n    let decorationsInViewportLen = 0;\n    const inlineDecorations = [];\n\n    for (let j = startLineNumber; j <= endLineNumber; j++) {\n      inlineDecorations[j - startLineNumber] = [];\n    }\n\n    for (let i = 0, len = modelDecorations.length; i < len; i++) {\n      const modelDecoration = modelDecorations[i];\n      const decorationOptions = modelDecoration.options;\n\n      if (!isModelDecorationVisible(this.model, modelDecoration)) {\n        continue;\n      }\n\n      const viewModelDecoration = this._getOrCreateViewModelDecoration(modelDecoration);\n\n      const viewRange = viewModelDecoration.range;\n      decorationsInViewport[decorationsInViewportLen++] = viewModelDecoration;\n\n      if (decorationOptions.inlineClassName) {\n        const inlineDecoration = new InlineDecoration(viewRange, decorationOptions.inlineClassName, decorationOptions.inlineClassNameAffectsLetterSpacing ? 3\n        /* RegularAffectingLetterSpacing */\n        : 0\n        /* Regular */\n        );\n        const intersectedStartLineNumber = Math.max(startLineNumber, viewRange.startLineNumber);\n        const intersectedEndLineNumber = Math.min(endLineNumber, viewRange.endLineNumber);\n\n        for (let j = intersectedStartLineNumber; j <= intersectedEndLineNumber; j++) {\n          inlineDecorations[j - startLineNumber].push(inlineDecoration);\n        }\n      }\n\n      if (decorationOptions.beforeContentClassName) {\n        if (startLineNumber <= viewRange.startLineNumber && viewRange.startLineNumber <= endLineNumber) {\n          const inlineDecoration = new InlineDecoration(new Range(viewRange.startLineNumber, viewRange.startColumn, viewRange.startLineNumber, viewRange.startColumn), decorationOptions.beforeContentClassName, 1\n          /* Before */\n          );\n          inlineDecorations[viewRange.startLineNumber - startLineNumber].push(inlineDecoration);\n        }\n      }\n\n      if (decorationOptions.afterContentClassName) {\n        if (startLineNumber <= viewRange.endLineNumber && viewRange.endLineNumber <= endLineNumber) {\n          const inlineDecoration = new InlineDecoration(new Range(viewRange.endLineNumber, viewRange.endColumn, viewRange.endLineNumber, viewRange.endColumn), decorationOptions.afterContentClassName, 2\n          /* After */\n          );\n          inlineDecorations[viewRange.endLineNumber - startLineNumber].push(inlineDecoration);\n        }\n      }\n    }\n\n    return {\n      decorations: decorationsInViewport,\n      inlineDecorations: inlineDecorations\n    };\n  }\n\n}\nexport function isModelDecorationVisible(model, decoration) {\n  if (decoration.options.hideInCommentTokens && isModelDecorationInComment(model, decoration)) {\n    return false;\n  }\n\n  if (decoration.options.hideInStringTokens && isModelDecorationInString(model, decoration)) {\n    return false;\n  }\n\n  return true;\n}\nexport function isModelDecorationInComment(model, decoration) {\n  return testTokensInRange(model, decoration.range, tokenType => tokenType === 1\n  /* Comment */\n  );\n}\nexport function isModelDecorationInString(model, decoration) {\n  return testTokensInRange(model, decoration.range, tokenType => tokenType === 2\n  /* String */\n  );\n}\n/**\n * Calls the callback for every token that intersects the range.\n * If the callback returns `false`, iteration stops and `false` is returned.\n * Otherwise, `true` is returned.\n */\n\nfunction testTokensInRange(model, range, callback) {\n  for (let lineNumber = range.startLineNumber; lineNumber <= range.endLineNumber; lineNumber++) {\n    const lineTokens = model.getLineTokens(lineNumber);\n    const isFirstLine = lineNumber === range.startLineNumber;\n    const isEndLine = lineNumber === range.endLineNumber;\n    let tokenIdx = isFirstLine ? lineTokens.findTokenIndexAtOffset(range.startColumn - 1) : 0;\n\n    while (tokenIdx < lineTokens.getCount()) {\n      if (isEndLine) {\n        const startOffset = lineTokens.getStartOffset(tokenIdx);\n\n        if (startOffset > range.endColumn - 1) {\n          break;\n        }\n      }\n\n      const callbackResult = callback(lineTokens.getStandardTokenType(tokenIdx));\n\n      if (!callbackResult) {\n        return false;\n      }\n\n      tokenIdx++;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/common/viewModel/viewModelDecorations.js"],"names":["Position","Range","InlineDecoration","ViewModelDecoration","filterValidationDecorations","ViewModelDecorations","constructor","editorId","model","configuration","linesCollection","coordinatesConverter","_linesCollection","_coordinatesConverter","_decorationsCache","Object","create","_cachedModelDecorationsResolver","_cachedModelDecorationsResolverViewRange","_clearCachedModelDecorationsResolver","dispose","reset","onModelDecorationsChanged","onLineMappingChanged","_getOrCreateViewModelDecoration","modelDecoration","id","r","modelRange","range","options","viewRange","isWholeLine","start","convertModelPositionToViewPosition","startLineNumber","end","endLineNumber","getLineMaxColumn","lineNumber","column","convertModelRangeToViewRange","getDecorationsViewportData","cacheIsValid","equalsRange","_getDecorationsViewportData","viewportRange","modelDecorations","getDecorationsInRange","decorationsInViewport","decorationsInViewportLen","inlineDecorations","j","i","len","length","decorationOptions","isModelDecorationVisible","viewModelDecoration","inlineClassName","inlineDecoration","inlineClassNameAffectsLetterSpacing","intersectedStartLineNumber","Math","max","intersectedEndLineNumber","min","push","beforeContentClassName","startColumn","afterContentClassName","endColumn","decorations","decoration","hideInCommentTokens","isModelDecorationInComment","hideInStringTokens","isModelDecorationInString","testTokensInRange","tokenType","callback","lineTokens","getLineTokens","isFirstLine","isEndLine","tokenIdx","findTokenIndexAtOffset","getCount","startOffset","getStartOffset","callbackResult","getStandardTokenType"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { InlineDecoration, ViewModelDecoration } from './viewModel.js';\nimport { filterValidationDecorations } from '../config/editorOptions.js';\nexport class ViewModelDecorations {\n    constructor(editorId, model, configuration, linesCollection, coordinatesConverter) {\n        this.editorId = editorId;\n        this.model = model;\n        this.configuration = configuration;\n        this._linesCollection = linesCollection;\n        this._coordinatesConverter = coordinatesConverter;\n        this._decorationsCache = Object.create(null);\n        this._cachedModelDecorationsResolver = null;\n        this._cachedModelDecorationsResolverViewRange = null;\n    }\n    _clearCachedModelDecorationsResolver() {\n        this._cachedModelDecorationsResolver = null;\n        this._cachedModelDecorationsResolverViewRange = null;\n    }\n    dispose() {\n        this._decorationsCache = Object.create(null);\n        this._clearCachedModelDecorationsResolver();\n    }\n    reset() {\n        this._decorationsCache = Object.create(null);\n        this._clearCachedModelDecorationsResolver();\n    }\n    onModelDecorationsChanged() {\n        this._decorationsCache = Object.create(null);\n        this._clearCachedModelDecorationsResolver();\n    }\n    onLineMappingChanged() {\n        this._decorationsCache = Object.create(null);\n        this._clearCachedModelDecorationsResolver();\n    }\n    _getOrCreateViewModelDecoration(modelDecoration) {\n        const id = modelDecoration.id;\n        let r = this._decorationsCache[id];\n        if (!r) {\n            const modelRange = modelDecoration.range;\n            const options = modelDecoration.options;\n            let viewRange;\n            if (options.isWholeLine) {\n                const start = this._coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.startLineNumber, 1), 0 /* Left */);\n                const end = this._coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.endLineNumber, this.model.getLineMaxColumn(modelRange.endLineNumber)), 1 /* Right */);\n                viewRange = new Range(start.lineNumber, start.column, end.lineNumber, end.column);\n            }\n            else {\n                // For backwards compatibility reasons, we want injected text before any decoration.\n                // Thus, move decorations to the right.\n                viewRange = this._coordinatesConverter.convertModelRangeToViewRange(modelRange, 1 /* Right */);\n            }\n            r = new ViewModelDecoration(viewRange, options);\n            this._decorationsCache[id] = r;\n        }\n        return r;\n    }\n    getDecorationsViewportData(viewRange) {\n        let cacheIsValid = (this._cachedModelDecorationsResolver !== null);\n        cacheIsValid = cacheIsValid && (viewRange.equalsRange(this._cachedModelDecorationsResolverViewRange));\n        if (!cacheIsValid) {\n            this._cachedModelDecorationsResolver = this._getDecorationsViewportData(viewRange);\n            this._cachedModelDecorationsResolverViewRange = viewRange;\n        }\n        return this._cachedModelDecorationsResolver;\n    }\n    _getDecorationsViewportData(viewportRange) {\n        const modelDecorations = this._linesCollection.getDecorationsInRange(viewportRange, this.editorId, filterValidationDecorations(this.configuration.options));\n        const startLineNumber = viewportRange.startLineNumber;\n        const endLineNumber = viewportRange.endLineNumber;\n        const decorationsInViewport = [];\n        let decorationsInViewportLen = 0;\n        const inlineDecorations = [];\n        for (let j = startLineNumber; j <= endLineNumber; j++) {\n            inlineDecorations[j - startLineNumber] = [];\n        }\n        for (let i = 0, len = modelDecorations.length; i < len; i++) {\n            const modelDecoration = modelDecorations[i];\n            const decorationOptions = modelDecoration.options;\n            if (!isModelDecorationVisible(this.model, modelDecoration)) {\n                continue;\n            }\n            const viewModelDecoration = this._getOrCreateViewModelDecoration(modelDecoration);\n            const viewRange = viewModelDecoration.range;\n            decorationsInViewport[decorationsInViewportLen++] = viewModelDecoration;\n            if (decorationOptions.inlineClassName) {\n                const inlineDecoration = new InlineDecoration(viewRange, decorationOptions.inlineClassName, decorationOptions.inlineClassNameAffectsLetterSpacing ? 3 /* RegularAffectingLetterSpacing */ : 0 /* Regular */);\n                const intersectedStartLineNumber = Math.max(startLineNumber, viewRange.startLineNumber);\n                const intersectedEndLineNumber = Math.min(endLineNumber, viewRange.endLineNumber);\n                for (let j = intersectedStartLineNumber; j <= intersectedEndLineNumber; j++) {\n                    inlineDecorations[j - startLineNumber].push(inlineDecoration);\n                }\n            }\n            if (decorationOptions.beforeContentClassName) {\n                if (startLineNumber <= viewRange.startLineNumber && viewRange.startLineNumber <= endLineNumber) {\n                    const inlineDecoration = new InlineDecoration(new Range(viewRange.startLineNumber, viewRange.startColumn, viewRange.startLineNumber, viewRange.startColumn), decorationOptions.beforeContentClassName, 1 /* Before */);\n                    inlineDecorations[viewRange.startLineNumber - startLineNumber].push(inlineDecoration);\n                }\n            }\n            if (decorationOptions.afterContentClassName) {\n                if (startLineNumber <= viewRange.endLineNumber && viewRange.endLineNumber <= endLineNumber) {\n                    const inlineDecoration = new InlineDecoration(new Range(viewRange.endLineNumber, viewRange.endColumn, viewRange.endLineNumber, viewRange.endColumn), decorationOptions.afterContentClassName, 2 /* After */);\n                    inlineDecorations[viewRange.endLineNumber - startLineNumber].push(inlineDecoration);\n                }\n            }\n        }\n        return {\n            decorations: decorationsInViewport,\n            inlineDecorations: inlineDecorations\n        };\n    }\n}\nexport function isModelDecorationVisible(model, decoration) {\n    if (decoration.options.hideInCommentTokens && isModelDecorationInComment(model, decoration)) {\n        return false;\n    }\n    if (decoration.options.hideInStringTokens && isModelDecorationInString(model, decoration)) {\n        return false;\n    }\n    return true;\n}\nexport function isModelDecorationInComment(model, decoration) {\n    return testTokensInRange(model, decoration.range, (tokenType) => tokenType === 1 /* Comment */);\n}\nexport function isModelDecorationInString(model, decoration) {\n    return testTokensInRange(model, decoration.range, (tokenType) => tokenType === 2 /* String */);\n}\n/**\n * Calls the callback for every token that intersects the range.\n * If the callback returns `false`, iteration stops and `false` is returned.\n * Otherwise, `true` is returned.\n */\nfunction testTokensInRange(model, range, callback) {\n    for (let lineNumber = range.startLineNumber; lineNumber <= range.endLineNumber; lineNumber++) {\n        const lineTokens = model.getLineTokens(lineNumber);\n        const isFirstLine = lineNumber === range.startLineNumber;\n        const isEndLine = lineNumber === range.endLineNumber;\n        let tokenIdx = isFirstLine ? lineTokens.findTokenIndexAtOffset(range.startColumn - 1) : 0;\n        while (tokenIdx < lineTokens.getCount()) {\n            if (isEndLine) {\n                const startOffset = lineTokens.getStartOffset(tokenIdx);\n                if (startOffset > range.endColumn - 1) {\n                    break;\n                }\n            }\n            const callbackResult = callback(lineTokens.getStandardTokenType(tokenIdx));\n            if (!callbackResult) {\n                return false;\n            }\n            tokenIdx++;\n        }\n    }\n    return true;\n}\n"]},"metadata":{},"sourceType":"module"}