{"ast":null,"code":"import * as React from 'react';\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport NavigationStateContext from './NavigationStateContext';\nimport StaticContainer from './StaticContainer';\nimport useOptionsGetters from './useOptionsGetters';\n/**\n * Component which takes care of rendering the screen for a route.\n * It provides all required contexts and applies optimizations when applicable.\n */\n\nexport default function SceneView(_ref) {\n  let {\n    screen,\n    route,\n    navigation,\n    routeState,\n    getState,\n    setState,\n    options,\n    clearOptions\n  } = _ref;\n  const navigatorKeyRef = React.useRef();\n  const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n  const {\n    addOptionsGetter\n  } = useOptionsGetters({\n    key: route.key,\n    options,\n    navigation\n  });\n  const setKey = React.useCallback(key => {\n    navigatorKeyRef.current = key;\n  }, []);\n  const getCurrentState = React.useCallback(() => {\n    const state = getState();\n    const currentRoute = state.routes.find(r => r.key === route.key);\n    return currentRoute ? currentRoute.state : undefined;\n  }, [getState, route.key]);\n  const setCurrentState = React.useCallback(child => {\n    const state = getState();\n    setState({ ...state,\n      routes: state.routes.map(r => r.key === route.key ? { ...r,\n        state: child\n      } : r)\n    });\n  }, [getState, route.key, setState]);\n  const isInitialRef = React.useRef(true);\n  React.useEffect(() => {\n    isInitialRef.current = false;\n  }); // Clear options set by this screen when it is unmounted\n\n  React.useEffect(() => {\n    return clearOptions; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const getIsInitial = React.useCallback(() => isInitialRef.current, []);\n  const context = React.useMemo(() => ({\n    state: routeState,\n    getState: getCurrentState,\n    setState: setCurrentState,\n    getKey,\n    setKey,\n    getIsInitial,\n    addOptionsGetter\n  }), [routeState, getCurrentState, setCurrentState, getKey, setKey, getIsInitial, addOptionsGetter]);\n  const ScreenComponent = screen.getComponent ? screen.getComponent() : screen.component;\n  return /*#__PURE__*/React.createElement(NavigationStateContext.Provider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(EnsureSingleNavigator, null, /*#__PURE__*/React.createElement(StaticContainer, {\n    name: screen.name,\n    render: ScreenComponent || screen.children,\n    navigation: navigation,\n    route: route\n  }, ScreenComponent !== undefined ? /*#__PURE__*/React.createElement(ScreenComponent, {\n    navigation: navigation,\n    route: route\n  }) : screen.children !== undefined ? screen.children({\n    navigation,\n    route\n  }) : null)));\n}","map":{"version":3,"sources":["SceneView.tsx"],"names":["clearOptions","navigatorKeyRef","React","getKey","addOptionsGetter","useOptionsGetters","key","route","navigation","setKey","getCurrentState","state","getState","currentRoute","r","setCurrentState","child","setState","routes","isInitialRef","getIsInitial","context","ScreenComponent","screen"],"mappings":"AAMA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,OAAA,qBAAA,MAAA,yBAAA;AACA,OAAA,sBAAA,MAAA,0BAAA;AACA,OAAA,eAAA,MAAA,mBAAA;AAEA,OAAA,iBAAA,MAAA,qBAAA;AAaA;AACA;AACA;AACA;;AACA,eAAe,SAAA,SAAA,CAAA,IAAA,EAYiB;AAAA,MAT9B;AAAA,IAAA,MAAA;AAAA,IAAA,KAAA;AAAA,IAAA,UAAA;AAAA,IAAA,UAAA;AAAA,IAAA,QAAA;AAAA,IAAA,QAAA;AAAA,IAAA,OAAA;AAQAA,IAAAA;AARA,MAS8B,IAAA;AAC9B,QAAMC,eAAe,GAAGC,KAAK,CAA7B,MAAwBA,EAAxB;AACA,QAAMC,MAAM,GAAGD,KAAK,CAALA,WAAAA,CAAkB,MAAMD,eAAe,CAAvCC,OAAAA,EAAf,EAAeA,CAAf;AAEA,QAAM;AAAEE,IAAAA;AAAF,MAAuBC,iBAAiB,CAAC;AAC7CC,IAAAA,GAAG,EAAEC,KAAK,CADmC,GAAA;AAAA,IAAA,OAAA;AAG7CC,IAAAA;AAH6C,GAAD,CAA9C;AAMA,QAAMC,MAAM,GAAG,KAAK,CAAL,WAAA,CAAmBH,GAAD,IAAiB;AAChDL,IAAAA,eAAe,CAAfA,OAAAA,GAAAA,GAAAA;AADa,GAAA,EAAf,EAAe,CAAf;AAIA,QAAMS,eAAe,GAAG,KAAK,CAAL,WAAA,CAAkB,MAAM;AAC9C,UAAMC,KAAK,GAAGC,QAAd,EAAA;AACA,UAAMC,YAAY,GAAGF,KAAK,CAALA,MAAAA,CAAAA,IAAAA,CAAmBG,CAAD,IAAOA,CAAC,CAADA,GAAAA,KAAUP,KAAK,CAA7D,GAAqBI,CAArB;AAEA,WAAOE,YAAY,GAAGA,YAAY,CAAf,KAAA,GAAnB,SAAA;AAJsB,GAAA,EAKrB,CAAA,QAAA,EAAWN,KAAK,CALnB,GAKG,CALqB,CAAxB;AAOA,QAAMQ,eAAe,GAAG,KAAK,CAAL,WAAA,CACrBC,KAAD,IAAwE;AACtE,UAAML,KAAK,GAAGC,QAAd,EAAA;AAEAK,IAAAA,QAAQ,CAAC,EACP,GADO,KAAA;AAEPC,MAAAA,MAAM,EAAE,KAAK,CAAL,MAAA,CAAA,GAAA,CAAkBJ,CAAD,IACvB,CAAC,CAAD,GAAA,KAAUP,KAAK,CAAf,GAAA,GAAsB,EAAE,GAAF,CAAA;AAAQI,QAAAA,KAAK,EAAEK;AAAf,OAAtB,GADM,CAAA;AAFD,KAAD,CAARC;AAJoB,GAAA,EAWtB,CAAA,QAAA,EAAWV,KAAK,CAAhB,GAAA,EAXF,QAWE,CAXsB,CAAxB;AAcA,QAAMY,YAAY,GAAGjB,KAAK,CAALA,MAAAA,CAArB,IAAqBA,CAArB;AAEAA,EAAAA,KAAK,CAALA,SAAAA,CAAgB,MAAM;AACpBiB,IAAAA,YAAY,CAAZA,OAAAA,GAAAA,KAAAA;AAtC4B,GAqC9BjB,EArC8B,CAyC9B;;AACAA,EAAAA,KAAK,CAALA,SAAAA,CAAgB,MAAM;AACpB,WADoB,YACpB,CADoB,CAEpB;AAFFA,GAAAA,EAAAA,EAAAA;AAKA,QAAMkB,YAAY,GAAGlB,KAAK,CAALA,WAAAA,CAAkB,MAAMiB,YAAY,CAApCjB,OAAAA,EAArB,EAAqBA,CAArB;AAEA,QAAMmB,OAAO,GAAG,KAAK,CAAL,OAAA,CACd,OAAO;AACLV,IAAAA,KAAK,EADA,UAAA;AAELC,IAAAA,QAAQ,EAFH,eAAA;AAGLK,IAAAA,QAAQ,EAHH,eAAA;AAAA,IAAA,MAAA;AAAA,IAAA,MAAA;AAAA,IAAA,YAAA;AAOLb,IAAAA;AAPK,GAAP,CADc,EAUd,CAAA,UAAA,EAAA,eAAA,EAAA,eAAA,EAAA,MAAA,EAAA,MAAA,EAAA,YAAA,EAVF,gBAUE,CAVc,CAAhB;AAqBA,QAAMkB,eAAe,GAAGC,MAAM,CAANA,YAAAA,GACpBA,MAAM,CADcA,YACpBA,EADoBA,GAEpBA,MAAM,CAFV,SAAA;AAIA,SAAA,aACE,KAAA,CAAA,aAAA,CAAC,sBAAD,CAAA,QAAA,EAAA;AAAiC,IAAA,KAAK,EAAEF;AAAxC,GAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,qBAAA,EAAA,IAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,eAAA,EAAA;AACE,IAAA,IAAI,EAAEE,MAAM,CADd,IAAA;AAEE,IAAA,MAAM,EAAED,eAAe,IAAIC,MAAM,CAFnC,QAAA;AAGE,IAAA,UAAU,EAHZ,UAAA;AAIE,IAAA,KAAK,EAAEhB;AAJT,GAAA,EAMG,eAAe,KAAf,SAAA,GAAA,aACC,KAAA,CAAA,aAAA,CAAA,eAAA,EAAA;AAAiB,IAAA,UAAU,EAA3B,UAAA;AAAyC,IAAA,KAAK,EAAEA;AAAhD,GAAA,CADD,GAEG,MAAM,CAAN,QAAA,KAAA,SAAA,GACF,MAAM,CAAN,QAAA,CAAgB;AAAA,IAAA,UAAA;AAAcA,IAAAA;AAAd,GAAhB,CADE,GAXZ,IAGM,CADF,CADF,CADF;AAkBD","sourcesContent":["import type {\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport NavigationStateContext from './NavigationStateContext';\nimport StaticContainer from './StaticContainer';\nimport type { NavigationProp, RouteConfigComponent } from './types';\nimport useOptionsGetters from './useOptionsGetters';\n\ntype Props<State extends NavigationState, ScreenOptions extends {}> = {\n  screen: RouteConfigComponent<ParamListBase, string> & { name: string };\n  navigation: NavigationProp<ParamListBase, string, State, ScreenOptions>;\n  route: Route<string>;\n  routeState: NavigationState | PartialState<NavigationState> | undefined;\n  getState: () => State;\n  setState: (state: State) => void;\n  options: object;\n  clearOptions: () => void;\n};\n\n/**\n * Component which takes care of rendering the screen for a route.\n * It provides all required contexts and applies optimizations when applicable.\n */\nexport default function SceneView<\n  State extends NavigationState,\n  ScreenOptions extends {}\n>({\n  screen,\n  route,\n  navigation,\n  routeState,\n  getState,\n  setState,\n  options,\n  clearOptions,\n}: Props<State, ScreenOptions>) {\n  const navigatorKeyRef = React.useRef<string | undefined>();\n  const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n\n  const { addOptionsGetter } = useOptionsGetters({\n    key: route.key,\n    options,\n    navigation,\n  });\n\n  const setKey = React.useCallback((key: string) => {\n    navigatorKeyRef.current = key;\n  }, []);\n\n  const getCurrentState = React.useCallback(() => {\n    const state = getState();\n    const currentRoute = state.routes.find((r) => r.key === route.key);\n\n    return currentRoute ? currentRoute.state : undefined;\n  }, [getState, route.key]);\n\n  const setCurrentState = React.useCallback(\n    (child: NavigationState | PartialState<NavigationState> | undefined) => {\n      const state = getState();\n\n      setState({\n        ...state,\n        routes: state.routes.map((r) =>\n          r.key === route.key ? { ...r, state: child } : r\n        ),\n      });\n    },\n    [getState, route.key, setState]\n  );\n\n  const isInitialRef = React.useRef(true);\n\n  React.useEffect(() => {\n    isInitialRef.current = false;\n  });\n\n  // Clear options set by this screen when it is unmounted\n  React.useEffect(() => {\n    return clearOptions;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const getIsInitial = React.useCallback(() => isInitialRef.current, []);\n\n  const context = React.useMemo(\n    () => ({\n      state: routeState,\n      getState: getCurrentState,\n      setState: setCurrentState,\n      getKey,\n      setKey,\n      getIsInitial,\n      addOptionsGetter,\n    }),\n    [\n      routeState,\n      getCurrentState,\n      setCurrentState,\n      getKey,\n      setKey,\n      getIsInitial,\n      addOptionsGetter,\n    ]\n  );\n\n  const ScreenComponent = screen.getComponent\n    ? screen.getComponent()\n    : screen.component;\n\n  return (\n    <NavigationStateContext.Provider value={context}>\n      <EnsureSingleNavigator>\n        <StaticContainer\n          name={screen.name}\n          render={ScreenComponent || screen.children}\n          navigation={navigation}\n          route={route}\n        >\n          {ScreenComponent !== undefined ? (\n            <ScreenComponent navigation={navigation} route={route} />\n          ) : screen.children !== undefined ? (\n            screen.children({ navigation, route })\n          ) : null}\n        </StaticContainer>\n      </EnsureSingleNavigator>\n    </NavigationStateContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}