{"ast":null,"code":"import * as React from 'react';\nimport isArrayEqual from './isArrayEqual';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nexport default function useOnGetState(_ref) {\n  let {\n    getState,\n    getStateListeners\n  } = _ref;\n  const {\n    addKeyedListener\n  } = React.useContext(NavigationBuilderContext);\n  const route = React.useContext(NavigationRouteContext);\n  const key = route ? route.key : 'root';\n  const getRehydratedState = React.useCallback(() => {\n    const state = getState(); // Avoid returning new route objects if we don't need to\n\n    const routes = state.routes.map(route => {\n      var _getStateListeners$ro;\n\n      const childState = (_getStateListeners$ro = getStateListeners[route.key]) === null || _getStateListeners$ro === void 0 ? void 0 : _getStateListeners$ro.call(getStateListeners);\n\n      if (route.state === childState) {\n        return route;\n      }\n\n      return { ...route,\n        state: childState\n      };\n    });\n\n    if (isArrayEqual(state.routes, routes)) {\n      return state;\n    }\n\n    return { ...state,\n      routes\n    };\n  }, [getState, getStateListeners]);\n  React.useEffect(() => {\n    return addKeyedListener === null || addKeyedListener === void 0 ? void 0 : addKeyedListener('getState', key, getRehydratedState);\n  }, [addKeyedListener, getRehydratedState, key]);\n}","map":{"version":3,"sources":["useOnGetState.tsx"],"names":["getStateListeners","addKeyedListener","React","route","key","getRehydratedState","state","getState","routes","childState","isArrayEqual"],"mappings":"AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,OAAA,YAAA,MAAA,gBAAA;AACA,OAAA,wBAAA,MAAA,4BAAA;AAGA,OAAA,sBAAA,MAAA,0BAAA;AAOA,eAAe,SAAA,aAAA,CAAA,IAAA,EAGH;AAAA,MAH0B;AAAA,IAAA,QAAA;AAEpCA,IAAAA;AAFoC,MAG1B,IAAA;AACV,QAAM;AAAEC,IAAAA;AAAF,MAAuBC,KAAK,CAALA,UAAAA,CAA7B,wBAA6BA,CAA7B;AACA,QAAMC,KAAK,GAAGD,KAAK,CAALA,UAAAA,CAAd,sBAAcA,CAAd;AACA,QAAME,GAAG,GAAGD,KAAK,GAAGA,KAAK,CAAR,GAAA,GAAjB,MAAA;AAEA,QAAME,kBAAkB,GAAG,KAAK,CAAL,WAAA,CAAkB,MAAM;AACjD,UAAMC,KAAK,GAAGC,QADmC,EACjD,CADiD,CAGjD;;AACA,UAAMC,MAAM,GAAG,KAAK,CAAL,MAAA,CAAA,GAAA,CAAkBL,KAAD,IAAW;AAAA,UAAA,qBAAA;;AACzC,YAAMM,UAAU,GAAA,CAAA,qBAAA,GAAGT,iBAAiB,CAACG,KAAK,CAA1B,GAAoB,CAApB,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAGH,qBAAAA,CAAAA,IAAAA,CAAnB,iBAAmBA,CAAnB;;AAEA,UAAIG,KAAK,CAALA,KAAAA,KAAJ,UAAA,EAAgC;AAC9B,eAAA,KAAA;AACD;;AAED,aAAO,EAAE,GAAF,KAAA;AAAYG,QAAAA,KAAK,EAAEG;AAAnB,OAAP;AAPF,KAAe,CAAf;;AAUA,QAAIC,YAAY,CAACJ,KAAK,CAAN,MAAA,EAAhB,MAAgB,CAAhB,EAAwC;AACtC,aAAA,KAAA;AACD;;AAED,WAAO,EAAE,GAAF,KAAA;AAAYE,MAAAA;AAAZ,KAAP;AAlByB,GAAA,EAmBxB,CAAA,QAAA,EAnBH,iBAmBG,CAnBwB,CAA3B;AAqBAN,EAAAA,KAAK,CAALA,SAAAA,CAAgB,MAAM;AACpB,WAAOD,gBAAP,KAAA,IAAOA,IAAAA,gBAAP,KAAA,KAAA,CAAOA,GAAP,KAAA,CAAOA,GAAAA,gBAAgB,CAAA,UAAA,EAAA,GAAA,EAAvB,kBAAuB,CAAvB;AADFC,GAAAA,EAEG,CAAA,gBAAA,EAAA,kBAAA,EAFHA,GAEG,CAFHA;AAGD","sourcesContent":["import type { NavigationState } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport isArrayEqual from './isArrayEqual';\nimport NavigationBuilderContext, {\n  GetStateListener,\n} from './NavigationBuilderContext';\nimport NavigationRouteContext from './NavigationRouteContext';\n\ntype Options = {\n  getState: () => NavigationState;\n  getStateListeners: Record<string, GetStateListener | undefined>;\n};\n\nexport default function useOnGetState({\n  getState,\n  getStateListeners,\n}: Options) {\n  const { addKeyedListener } = React.useContext(NavigationBuilderContext);\n  const route = React.useContext(NavigationRouteContext);\n  const key = route ? route.key : 'root';\n\n  const getRehydratedState = React.useCallback(() => {\n    const state = getState();\n\n    // Avoid returning new route objects if we don't need to\n    const routes = state.routes.map((route) => {\n      const childState = getStateListeners[route.key]?.();\n\n      if (route.state === childState) {\n        return route;\n      }\n\n      return { ...route, state: childState };\n    });\n\n    if (isArrayEqual(state.routes, routes)) {\n      return state;\n    }\n\n    return { ...state, routes };\n  }, [getState, getStateListeners]);\n\n  React.useEffect(() => {\n    return addKeyedListener?.('getState', key, getRehydratedState);\n  }, [addKeyedListener, getRehydratedState, key]);\n}\n"]},"metadata":{},"sourceType":"module"}