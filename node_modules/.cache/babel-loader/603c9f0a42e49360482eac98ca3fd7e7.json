{"ast":null,"code":"'use strict';\n\nconst strictUriEncode = require('strict-uri-encode');\n\nconst decodeComponent = require('decode-uri-component');\n\nconst splitOnFirst = require('split-on-first');\n\nconst filterObject = require('filter-obj');\n\nconst isNullOrUndefined = value => value === null || value === undefined;\n\nconst encodeFragmentIdentifier = Symbol('encodeFragmentIdentifier');\n\nfunction encoderForArrayFormat(options) {\n  switch (options.arrayFormat) {\n    case 'index':\n      return key => (result, value) => {\n        const index = result.length;\n\n        if (value === undefined || options.skipNull && value === null || options.skipEmptyString && value === '') {\n          return result;\n        }\n\n        if (value === null) {\n          return [...result, [encode(key, options), '[', index, ']'].join('')];\n        }\n\n        return [...result, [encode(key, options), '[', encode(index, options), ']=', encode(value, options)].join('')];\n      };\n\n    case 'bracket':\n      return key => (result, value) => {\n        if (value === undefined || options.skipNull && value === null || options.skipEmptyString && value === '') {\n          return result;\n        }\n\n        if (value === null) {\n          return [...result, [encode(key, options), '[]'].join('')];\n        }\n\n        return [...result, [encode(key, options), '[]=', encode(value, options)].join('')];\n      };\n\n    case 'colon-list-separator':\n      return key => (result, value) => {\n        if (value === undefined || options.skipNull && value === null || options.skipEmptyString && value === '') {\n          return result;\n        }\n\n        if (value === null) {\n          return [...result, [encode(key, options), ':list='].join('')];\n        }\n\n        return [...result, [encode(key, options), ':list=', encode(value, options)].join('')];\n      };\n\n    case 'comma':\n    case 'separator':\n    case 'bracket-separator':\n      {\n        const keyValueSep = options.arrayFormat === 'bracket-separator' ? '[]=' : '=';\n        return key => (result, value) => {\n          if (value === undefined || options.skipNull && value === null || options.skipEmptyString && value === '') {\n            return result;\n          } // Translate null to an empty string so that it doesn't serialize as 'null'\n\n\n          value = value === null ? '' : value;\n\n          if (result.length === 0) {\n            return [[encode(key, options), keyValueSep, encode(value, options)].join('')];\n          }\n\n          return [[result, encode(value, options)].join(options.arrayFormatSeparator)];\n        };\n      }\n\n    default:\n      return key => (result, value) => {\n        if (value === undefined || options.skipNull && value === null || options.skipEmptyString && value === '') {\n          return result;\n        }\n\n        if (value === null) {\n          return [...result, encode(key, options)];\n        }\n\n        return [...result, [encode(key, options), '=', encode(value, options)].join('')];\n      };\n  }\n}\n\nfunction parserForArrayFormat(options) {\n  let result;\n\n  switch (options.arrayFormat) {\n    case 'index':\n      return (key, value, accumulator) => {\n        result = /\\[(\\d*)\\]$/.exec(key);\n        key = key.replace(/\\[\\d*\\]$/, '');\n\n        if (!result) {\n          accumulator[key] = value;\n          return;\n        }\n\n        if (accumulator[key] === undefined) {\n          accumulator[key] = {};\n        }\n\n        accumulator[key][result[1]] = value;\n      };\n\n    case 'bracket':\n      return (key, value, accumulator) => {\n        result = /(\\[\\])$/.exec(key);\n        key = key.replace(/\\[\\]$/, '');\n\n        if (!result) {\n          accumulator[key] = value;\n          return;\n        }\n\n        if (accumulator[key] === undefined) {\n          accumulator[key] = [value];\n          return;\n        }\n\n        accumulator[key] = [].concat(accumulator[key], value);\n      };\n\n    case 'colon-list-separator':\n      return (key, value, accumulator) => {\n        result = /(:list)$/.exec(key);\n        key = key.replace(/:list$/, '');\n\n        if (!result) {\n          accumulator[key] = value;\n          return;\n        }\n\n        if (accumulator[key] === undefined) {\n          accumulator[key] = [value];\n          return;\n        }\n\n        accumulator[key] = [].concat(accumulator[key], value);\n      };\n\n    case 'comma':\n    case 'separator':\n      return (key, value, accumulator) => {\n        const isArray = typeof value === 'string' && value.includes(options.arrayFormatSeparator);\n        const isEncodedArray = typeof value === 'string' && !isArray && decode(value, options).includes(options.arrayFormatSeparator);\n        value = isEncodedArray ? decode(value, options) : value;\n        const newValue = isArray || isEncodedArray ? value.split(options.arrayFormatSeparator).map(item => decode(item, options)) : value === null ? value : decode(value, options);\n        accumulator[key] = newValue;\n      };\n\n    case 'bracket-separator':\n      return (key, value, accumulator) => {\n        const isArray = /(\\[\\])$/.test(key);\n        key = key.replace(/\\[\\]$/, '');\n\n        if (!isArray) {\n          accumulator[key] = value ? decode(value, options) : value;\n          return;\n        }\n\n        const arrayValue = value === null ? [] : value.split(options.arrayFormatSeparator).map(item => decode(item, options));\n\n        if (accumulator[key] === undefined) {\n          accumulator[key] = arrayValue;\n          return;\n        }\n\n        accumulator[key] = [].concat(accumulator[key], arrayValue);\n      };\n\n    default:\n      return (key, value, accumulator) => {\n        if (accumulator[key] === undefined) {\n          accumulator[key] = value;\n          return;\n        }\n\n        accumulator[key] = [].concat(accumulator[key], value);\n      };\n  }\n}\n\nfunction validateArrayFormatSeparator(value) {\n  if (typeof value !== 'string' || value.length !== 1) {\n    throw new TypeError('arrayFormatSeparator must be single character string');\n  }\n}\n\nfunction encode(value, options) {\n  if (options.encode) {\n    return options.strict ? strictUriEncode(value) : encodeURIComponent(value);\n  }\n\n  return value;\n}\n\nfunction decode(value, options) {\n  if (options.decode) {\n    return decodeComponent(value);\n  }\n\n  return value;\n}\n\nfunction keysSorter(input) {\n  if (Array.isArray(input)) {\n    return input.sort();\n  }\n\n  if (typeof input === 'object') {\n    return keysSorter(Object.keys(input)).sort((a, b) => Number(a) - Number(b)).map(key => input[key]);\n  }\n\n  return input;\n}\n\nfunction removeHash(input) {\n  const hashStart = input.indexOf('#');\n\n  if (hashStart !== -1) {\n    input = input.slice(0, hashStart);\n  }\n\n  return input;\n}\n\nfunction getHash(url) {\n  let hash = '';\n  const hashStart = url.indexOf('#');\n\n  if (hashStart !== -1) {\n    hash = url.slice(hashStart);\n  }\n\n  return hash;\n}\n\nfunction extract(input) {\n  input = removeHash(input);\n  const queryStart = input.indexOf('?');\n\n  if (queryStart === -1) {\n    return '';\n  }\n\n  return input.slice(queryStart + 1);\n}\n\nfunction parseValue(value, options) {\n  if (options.parseNumbers && !Number.isNaN(Number(value)) && typeof value === 'string' && value.trim() !== '') {\n    value = Number(value);\n  } else if (options.parseBooleans && value !== null && (value.toLowerCase() === 'true' || value.toLowerCase() === 'false')) {\n    value = value.toLowerCase() === 'true';\n  }\n\n  return value;\n}\n\nfunction parse(query, options) {\n  options = Object.assign({\n    decode: true,\n    sort: true,\n    arrayFormat: 'none',\n    arrayFormatSeparator: ',',\n    parseNumbers: false,\n    parseBooleans: false\n  }, options);\n  validateArrayFormatSeparator(options.arrayFormatSeparator);\n  const formatter = parserForArrayFormat(options); // Create an object with no prototype\n\n  const ret = Object.create(null);\n\n  if (typeof query !== 'string') {\n    return ret;\n  }\n\n  query = query.trim().replace(/^[?#&]/, '');\n\n  if (!query) {\n    return ret;\n  }\n\n  for (const param of query.split('&')) {\n    if (param === '') {\n      continue;\n    }\n\n    let [key, value] = splitOnFirst(options.decode ? param.replace(/\\+/g, ' ') : param, '='); // Missing `=` should be `null`:\n    // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n\n    value = value === undefined ? null : ['comma', 'separator', 'bracket-separator'].includes(options.arrayFormat) ? value : decode(value, options);\n    formatter(decode(key, options), value, ret);\n  }\n\n  for (const key of Object.keys(ret)) {\n    const value = ret[key];\n\n    if (typeof value === 'object' && value !== null) {\n      for (const k of Object.keys(value)) {\n        value[k] = parseValue(value[k], options);\n      }\n    } else {\n      ret[key] = parseValue(value, options);\n    }\n  }\n\n  if (options.sort === false) {\n    return ret;\n  }\n\n  return (options.sort === true ? Object.keys(ret).sort() : Object.keys(ret).sort(options.sort)).reduce((result, key) => {\n    const value = ret[key];\n\n    if (Boolean(value) && typeof value === 'object' && !Array.isArray(value)) {\n      // Sort object keys, not values\n      result[key] = keysSorter(value);\n    } else {\n      result[key] = value;\n    }\n\n    return result;\n  }, Object.create(null));\n}\n\nexports.extract = extract;\nexports.parse = parse;\n\nexports.stringify = (object, options) => {\n  if (!object) {\n    return '';\n  }\n\n  options = Object.assign({\n    encode: true,\n    strict: true,\n    arrayFormat: 'none',\n    arrayFormatSeparator: ','\n  }, options);\n  validateArrayFormatSeparator(options.arrayFormatSeparator);\n\n  const shouldFilter = key => options.skipNull && isNullOrUndefined(object[key]) || options.skipEmptyString && object[key] === '';\n\n  const formatter = encoderForArrayFormat(options);\n  const objectCopy = {};\n\n  for (const key of Object.keys(object)) {\n    if (!shouldFilter(key)) {\n      objectCopy[key] = object[key];\n    }\n  }\n\n  const keys = Object.keys(objectCopy);\n\n  if (options.sort !== false) {\n    keys.sort(options.sort);\n  }\n\n  return keys.map(key => {\n    const value = object[key];\n\n    if (value === undefined) {\n      return '';\n    }\n\n    if (value === null) {\n      return encode(key, options);\n    }\n\n    if (Array.isArray(value)) {\n      if (value.length === 0 && options.arrayFormat === 'bracket-separator') {\n        return encode(key, options) + '[]';\n      }\n\n      return value.reduce(formatter(key), []).join('&');\n    }\n\n    return encode(key, options) + '=' + encode(value, options);\n  }).filter(x => x.length > 0).join('&');\n};\n\nexports.parseUrl = (url, options) => {\n  options = Object.assign({\n    decode: true\n  }, options);\n  const [url_, hash] = splitOnFirst(url, '#');\n  return Object.assign({\n    url: url_.split('?')[0] || '',\n    query: parse(extract(url), options)\n  }, options && options.parseFragmentIdentifier && hash ? {\n    fragmentIdentifier: decode(hash, options)\n  } : {});\n};\n\nexports.stringifyUrl = (object, options) => {\n  options = Object.assign({\n    encode: true,\n    strict: true,\n    [encodeFragmentIdentifier]: true\n  }, options);\n  const url = removeHash(object.url).split('?')[0] || '';\n  const queryFromUrl = exports.extract(object.url);\n  const parsedQueryFromUrl = exports.parse(queryFromUrl, {\n    sort: false\n  });\n  const query = Object.assign(parsedQueryFromUrl, object.query);\n  let queryString = exports.stringify(query, options);\n\n  if (queryString) {\n    queryString = `?${queryString}`;\n  }\n\n  let hash = getHash(object.url);\n\n  if (object.fragmentIdentifier) {\n    hash = `#${options[encodeFragmentIdentifier] ? encode(object.fragmentIdentifier, options) : object.fragmentIdentifier}`;\n  }\n\n  return `${url}${queryString}${hash}`;\n};\n\nexports.pick = (input, filter, options) => {\n  options = Object.assign({\n    parseFragmentIdentifier: true,\n    [encodeFragmentIdentifier]: false\n  }, options);\n  const {\n    url,\n    query,\n    fragmentIdentifier\n  } = exports.parseUrl(input, options);\n  return exports.stringifyUrl({\n    url,\n    query: filterObject(query, filter),\n    fragmentIdentifier\n  }, options);\n};\n\nexports.exclude = (input, filter, options) => {\n  const exclusionFilter = Array.isArray(filter) ? key => !filter.includes(key) : (key, value) => !filter(key, value);\n  return exports.pick(input, exclusionFilter, options);\n};","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/query-string/index.js"],"names":["strictUriEncode","require","decodeComponent","splitOnFirst","filterObject","isNullOrUndefined","value","undefined","encodeFragmentIdentifier","Symbol","encoderForArrayFormat","options","arrayFormat","key","result","index","length","skipNull","skipEmptyString","encode","join","keyValueSep","arrayFormatSeparator","parserForArrayFormat","accumulator","exec","replace","concat","isArray","includes","isEncodedArray","decode","newValue","split","map","item","test","arrayValue","validateArrayFormatSeparator","TypeError","strict","encodeURIComponent","keysSorter","input","Array","sort","Object","keys","a","b","Number","removeHash","hashStart","indexOf","slice","getHash","url","hash","extract","queryStart","parseValue","parseNumbers","isNaN","trim","parseBooleans","toLowerCase","parse","query","assign","formatter","ret","create","param","k","reduce","Boolean","exports","stringify","object","shouldFilter","objectCopy","filter","x","parseUrl","url_","parseFragmentIdentifier","fragmentIdentifier","stringifyUrl","queryFromUrl","parsedQueryFromUrl","queryString","pick","exclude","exclusionFilter"],"mappings":"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","sourcesContent":["'use strict';\nconst strictUriEncode = require('strict-uri-encode');\nconst decodeComponent = require('decode-uri-component');\nconst splitOnFirst = require('split-on-first');\nconst filterObject = require('filter-obj');\n\nconst isNullOrUndefined = value => value === null || value === undefined;\n\nconst encodeFragmentIdentifier = Symbol('encodeFragmentIdentifier');\n\nfunction encoderForArrayFormat(options) {\n\tswitch (options.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn key => (result, value) => {\n\t\t\t\tconst index = result.length;\n\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, [encode(key, options), '[', index, ']'].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [\n\t\t\t\t\t...result,\n\t\t\t\t\t[encode(key, options), '[', encode(index, options), ']=', encode(value, options)].join('')\n\t\t\t\t];\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, [encode(key, options), '[]'].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [...result, [encode(key, options), '[]=', encode(value, options)].join('')];\n\t\t\t};\n\n\t\tcase 'colon-list-separator':\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, [encode(key, options), ':list='].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [...result, [encode(key, options), ':list=', encode(value, options)].join('')];\n\t\t\t};\n\n\t\tcase 'comma':\n\t\tcase 'separator':\n\t\tcase 'bracket-separator': {\n\t\t\tconst keyValueSep = options.arrayFormat === 'bracket-separator' ?\n\t\t\t\t'[]=' :\n\t\t\t\t'=';\n\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\t// Translate null to an empty string so that it doesn't serialize as 'null'\n\t\t\t\tvalue = value === null ? '' : value;\n\n\t\t\t\tif (result.length === 0) {\n\t\t\t\t\treturn [[encode(key, options), keyValueSep, encode(value, options)].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [[result, encode(value, options)].join(options.arrayFormatSeparator)];\n\t\t\t};\n\t\t}\n\n\t\tdefault:\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, encode(key, options)];\n\t\t\t\t}\n\n\t\t\t\treturn [...result, [encode(key, options), '=', encode(value, options)].join('')];\n\t\t\t};\n\t}\n}\n\nfunction parserForArrayFormat(options) {\n\tlet result;\n\n\tswitch (options.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /\\[(\\d*)\\]$/.exec(key);\n\n\t\t\t\tkey = key.replace(/\\[\\d*\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = {};\n\t\t\t\t}\n\n\t\t\t\taccumulator[key][result[1]] = value;\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /(\\[\\])$/.exec(key);\n\t\t\t\tkey = key.replace(/\\[\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\n\t\tcase 'colon-list-separator':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /(:list)$/.exec(key);\n\t\t\t\tkey = key.replace(/:list$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\n\t\tcase 'comma':\n\t\tcase 'separator':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tconst isArray = typeof value === 'string' && value.includes(options.arrayFormatSeparator);\n\t\t\t\tconst isEncodedArray = (typeof value === 'string' && !isArray && decode(value, options).includes(options.arrayFormatSeparator));\n\t\t\t\tvalue = isEncodedArray ? decode(value, options) : value;\n\t\t\t\tconst newValue = isArray || isEncodedArray ? value.split(options.arrayFormatSeparator).map(item => decode(item, options)) : value === null ? value : decode(value, options);\n\t\t\t\taccumulator[key] = newValue;\n\t\t\t};\n\n\t\tcase 'bracket-separator':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tconst isArray = /(\\[\\])$/.test(key);\n\t\t\t\tkey = key.replace(/\\[\\]$/, '');\n\n\t\t\t\tif (!isArray) {\n\t\t\t\t\taccumulator[key] = value ? decode(value, options) : value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst arrayValue = value === null ?\n\t\t\t\t\t[] :\n\t\t\t\t\tvalue.split(options.arrayFormatSeparator).map(item => decode(item, options));\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = arrayValue;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], arrayValue);\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\t}\n}\n\nfunction validateArrayFormatSeparator(value) {\n\tif (typeof value !== 'string' || value.length !== 1) {\n\t\tthrow new TypeError('arrayFormatSeparator must be single character string');\n\t}\n}\n\nfunction encode(value, options) {\n\tif (options.encode) {\n\t\treturn options.strict ? strictUriEncode(value) : encodeURIComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction decode(value, options) {\n\tif (options.decode) {\n\t\treturn decodeComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction keysSorter(input) {\n\tif (Array.isArray(input)) {\n\t\treturn input.sort();\n\t}\n\n\tif (typeof input === 'object') {\n\t\treturn keysSorter(Object.keys(input))\n\t\t\t.sort((a, b) => Number(a) - Number(b))\n\t\t\t.map(key => input[key]);\n\t}\n\n\treturn input;\n}\n\nfunction removeHash(input) {\n\tconst hashStart = input.indexOf('#');\n\tif (hashStart !== -1) {\n\t\tinput = input.slice(0, hashStart);\n\t}\n\n\treturn input;\n}\n\nfunction getHash(url) {\n\tlet hash = '';\n\tconst hashStart = url.indexOf('#');\n\tif (hashStart !== -1) {\n\t\thash = url.slice(hashStart);\n\t}\n\n\treturn hash;\n}\n\nfunction extract(input) {\n\tinput = removeHash(input);\n\tconst queryStart = input.indexOf('?');\n\tif (queryStart === -1) {\n\t\treturn '';\n\t}\n\n\treturn input.slice(queryStart + 1);\n}\n\nfunction parseValue(value, options) {\n\tif (options.parseNumbers && !Number.isNaN(Number(value)) && (typeof value === 'string' && value.trim() !== '')) {\n\t\tvalue = Number(value);\n\t} else if (options.parseBooleans && value !== null && (value.toLowerCase() === 'true' || value.toLowerCase() === 'false')) {\n\t\tvalue = value.toLowerCase() === 'true';\n\t}\n\n\treturn value;\n}\n\nfunction parse(query, options) {\n\toptions = Object.assign({\n\t\tdecode: true,\n\t\tsort: true,\n\t\tarrayFormat: 'none',\n\t\tarrayFormatSeparator: ',',\n\t\tparseNumbers: false,\n\t\tparseBooleans: false\n\t}, options);\n\n\tvalidateArrayFormatSeparator(options.arrayFormatSeparator);\n\n\tconst formatter = parserForArrayFormat(options);\n\n\t// Create an object with no prototype\n\tconst ret = Object.create(null);\n\n\tif (typeof query !== 'string') {\n\t\treturn ret;\n\t}\n\n\tquery = query.trim().replace(/^[?#&]/, '');\n\n\tif (!query) {\n\t\treturn ret;\n\t}\n\n\tfor (const param of query.split('&')) {\n\t\tif (param === '') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet [key, value] = splitOnFirst(options.decode ? param.replace(/\\+/g, ' ') : param, '=');\n\n\t\t// Missing `=` should be `null`:\n\t\t// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n\t\tvalue = value === undefined ? null : ['comma', 'separator', 'bracket-separator'].includes(options.arrayFormat) ? value : decode(value, options);\n\t\tformatter(decode(key, options), value, ret);\n\t}\n\n\tfor (const key of Object.keys(ret)) {\n\t\tconst value = ret[key];\n\t\tif (typeof value === 'object' && value !== null) {\n\t\t\tfor (const k of Object.keys(value)) {\n\t\t\t\tvalue[k] = parseValue(value[k], options);\n\t\t\t}\n\t\t} else {\n\t\t\tret[key] = parseValue(value, options);\n\t\t}\n\t}\n\n\tif (options.sort === false) {\n\t\treturn ret;\n\t}\n\n\treturn (options.sort === true ? Object.keys(ret).sort() : Object.keys(ret).sort(options.sort)).reduce((result, key) => {\n\t\tconst value = ret[key];\n\t\tif (Boolean(value) && typeof value === 'object' && !Array.isArray(value)) {\n\t\t\t// Sort object keys, not values\n\t\t\tresult[key] = keysSorter(value);\n\t\t} else {\n\t\t\tresult[key] = value;\n\t\t}\n\n\t\treturn result;\n\t}, Object.create(null));\n}\n\nexports.extract = extract;\nexports.parse = parse;\n\nexports.stringify = (object, options) => {\n\tif (!object) {\n\t\treturn '';\n\t}\n\n\toptions = Object.assign({\n\t\tencode: true,\n\t\tstrict: true,\n\t\tarrayFormat: 'none',\n\t\tarrayFormatSeparator: ','\n\t}, options);\n\n\tvalidateArrayFormatSeparator(options.arrayFormatSeparator);\n\n\tconst shouldFilter = key => (\n\t\t(options.skipNull && isNullOrUndefined(object[key])) ||\n\t\t(options.skipEmptyString && object[key] === '')\n\t);\n\n\tconst formatter = encoderForArrayFormat(options);\n\n\tconst objectCopy = {};\n\n\tfor (const key of Object.keys(object)) {\n\t\tif (!shouldFilter(key)) {\n\t\t\tobjectCopy[key] = object[key];\n\t\t}\n\t}\n\n\tconst keys = Object.keys(objectCopy);\n\n\tif (options.sort !== false) {\n\t\tkeys.sort(options.sort);\n\t}\n\n\treturn keys.map(key => {\n\t\tconst value = object[key];\n\n\t\tif (value === undefined) {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (value === null) {\n\t\t\treturn encode(key, options);\n\t\t}\n\n\t\tif (Array.isArray(value)) {\n\t\t\tif (value.length === 0 && options.arrayFormat === 'bracket-separator') {\n\t\t\t\treturn encode(key, options) + '[]';\n\t\t\t}\n\n\t\t\treturn value\n\t\t\t\t.reduce(formatter(key), [])\n\t\t\t\t.join('&');\n\t\t}\n\n\t\treturn encode(key, options) + '=' + encode(value, options);\n\t}).filter(x => x.length > 0).join('&');\n};\n\nexports.parseUrl = (url, options) => {\n\toptions = Object.assign({\n\t\tdecode: true\n\t}, options);\n\n\tconst [url_, hash] = splitOnFirst(url, '#');\n\n\treturn Object.assign(\n\t\t{\n\t\t\turl: url_.split('?')[0] || '',\n\t\t\tquery: parse(extract(url), options)\n\t\t},\n\t\toptions && options.parseFragmentIdentifier && hash ? {fragmentIdentifier: decode(hash, options)} : {}\n\t);\n};\n\nexports.stringifyUrl = (object, options) => {\n\toptions = Object.assign({\n\t\tencode: true,\n\t\tstrict: true,\n\t\t[encodeFragmentIdentifier]: true\n\t}, options);\n\n\tconst url = removeHash(object.url).split('?')[0] || '';\n\tconst queryFromUrl = exports.extract(object.url);\n\tconst parsedQueryFromUrl = exports.parse(queryFromUrl, {sort: false});\n\n\tconst query = Object.assign(parsedQueryFromUrl, object.query);\n\tlet queryString = exports.stringify(query, options);\n\tif (queryString) {\n\t\tqueryString = `?${queryString}`;\n\t}\n\n\tlet hash = getHash(object.url);\n\tif (object.fragmentIdentifier) {\n\t\thash = `#${options[encodeFragmentIdentifier] ? encode(object.fragmentIdentifier, options) : object.fragmentIdentifier}`;\n\t}\n\n\treturn `${url}${queryString}${hash}`;\n};\n\nexports.pick = (input, filter, options) => {\n\toptions = Object.assign({\n\t\tparseFragmentIdentifier: true,\n\t\t[encodeFragmentIdentifier]: false\n\t}, options);\n\n\tconst {url, query, fragmentIdentifier} = exports.parseUrl(input, options);\n\treturn exports.stringifyUrl({\n\t\turl,\n\t\tquery: filterObject(query, filter),\n\t\tfragmentIdentifier\n\t}, options);\n};\n\nexports.exclude = (input, filter, options) => {\n\tconst exclusionFilter = Array.isArray(filter) ? key => !filter.includes(key) : (key, value) => !filter(key, value);\n\n\treturn exports.pick(input, exclusionFilter, options);\n};\n"]},"metadata":{},"sourceType":"script"}