{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { applyFontInfo } from '../../config/domFontInfo.js';\nimport { TextEditorCursorStyle } from '../../../common/config/editorOptions.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { MOUSE_CURSOR_TEXT_CSS_CLASS_NAME } from '../../../../base/browser/ui/mouseCursor/mouseCursor.js';\n\nclass ViewCursorRenderData {\n  constructor(top, left, width, height, textContent, textContentClassName) {\n    this.top = top;\n    this.left = left;\n    this.width = width;\n    this.height = height;\n    this.textContent = textContent;\n    this.textContentClassName = textContentClassName;\n  }\n\n}\n\nexport class ViewCursor {\n  constructor(context) {\n    this._context = context;\n    const options = this._context.configuration.options;\n    const fontInfo = options.get(44\n    /* fontInfo */\n    );\n    this._cursorStyle = options.get(24\n    /* cursorStyle */\n    );\n    this._lineHeight = options.get(59\n    /* lineHeight */\n    );\n    this._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n    this._lineCursorWidth = Math.min(options.get(27\n    /* cursorWidth */\n    ), this._typicalHalfwidthCharacterWidth);\n    this._isVisible = true; // Create the dom node\n\n    this._domNode = createFastDomNode(document.createElement('div'));\n\n    this._domNode.setClassName(`cursor ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`);\n\n    this._domNode.setHeight(this._lineHeight);\n\n    this._domNode.setTop(0);\n\n    this._domNode.setLeft(0);\n\n    applyFontInfo(this._domNode, fontInfo);\n\n    this._domNode.setDisplay('none');\n\n    this._position = new Position(1, 1);\n    this._lastRenderedContent = '';\n    this._renderData = null;\n  }\n\n  getDomNode() {\n    return this._domNode;\n  }\n\n  getPosition() {\n    return this._position;\n  }\n\n  show() {\n    if (!this._isVisible) {\n      this._domNode.setVisibility('inherit');\n\n      this._isVisible = true;\n    }\n  }\n\n  hide() {\n    if (this._isVisible) {\n      this._domNode.setVisibility('hidden');\n\n      this._isVisible = false;\n    }\n  }\n\n  onConfigurationChanged(e) {\n    const options = this._context.configuration.options;\n    const fontInfo = options.get(44\n    /* fontInfo */\n    );\n    this._cursorStyle = options.get(24\n    /* cursorStyle */\n    );\n    this._lineHeight = options.get(59\n    /* lineHeight */\n    );\n    this._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n    this._lineCursorWidth = Math.min(options.get(27\n    /* cursorWidth */\n    ), this._typicalHalfwidthCharacterWidth);\n    applyFontInfo(this._domNode, fontInfo);\n    return true;\n  }\n\n  onCursorPositionChanged(position) {\n    this._position = position;\n    return true;\n  }\n  /**\n   * If `this._position` is inside a grapheme, returns the position where the grapheme starts.\n   * Also returns the next grapheme.\n   */\n\n\n  _getGraphemeAwarePosition() {\n    const {\n      lineNumber,\n      column\n    } = this._position;\n\n    const lineContent = this._context.model.getLineContent(lineNumber);\n\n    const [startOffset, endOffset] = strings.getCharContainingOffset(lineContent, column - 1);\n    return [new Position(lineNumber, startOffset + 1), lineContent.substring(startOffset, endOffset)];\n  }\n\n  _prepareRender(ctx) {\n    let textContent = '';\n\n    const [position, nextGrapheme] = this._getGraphemeAwarePosition();\n\n    if (this._cursorStyle === TextEditorCursorStyle.Line || this._cursorStyle === TextEditorCursorStyle.LineThin) {\n      const visibleRange = ctx.visibleRangeForPosition(position);\n\n      if (!visibleRange || visibleRange.outsideRenderedLine) {\n        // Outside viewport\n        return null;\n      }\n\n      let width;\n\n      if (this._cursorStyle === TextEditorCursorStyle.Line) {\n        width = dom.computeScreenAwareSize(this._lineCursorWidth > 0 ? this._lineCursorWidth : 2);\n\n        if (width > 2) {\n          textContent = nextGrapheme;\n        }\n      } else {\n        width = dom.computeScreenAwareSize(1);\n      }\n\n      let left = visibleRange.left;\n\n      if (width >= 2 && left >= 1) {\n        // try to center cursor\n        left -= 1;\n      }\n\n      const top = ctx.getVerticalOffsetForLineNumber(position.lineNumber) - ctx.bigNumbersDelta;\n      return new ViewCursorRenderData(top, left, width, this._lineHeight, textContent, '');\n    }\n\n    const visibleRangeForCharacter = ctx.linesVisibleRangesForRange(new Range(position.lineNumber, position.column, position.lineNumber, position.column + nextGrapheme.length), false);\n\n    if (!visibleRangeForCharacter || visibleRangeForCharacter.length === 0) {\n      // Outside viewport\n      return null;\n    }\n\n    const firstVisibleRangeForCharacter = visibleRangeForCharacter[0];\n\n    if (firstVisibleRangeForCharacter.outsideRenderedLine || firstVisibleRangeForCharacter.ranges.length === 0) {\n      // Outside viewport\n      return null;\n    }\n\n    const range = firstVisibleRangeForCharacter.ranges[0];\n    const width = range.width < 1 ? this._typicalHalfwidthCharacterWidth : range.width;\n    let textContentClassName = '';\n\n    if (this._cursorStyle === TextEditorCursorStyle.Block) {\n      const lineData = this._context.model.getViewLineData(position.lineNumber);\n\n      textContent = nextGrapheme;\n      const tokenIndex = lineData.tokens.findTokenIndexAtOffset(position.column - 1);\n      textContentClassName = lineData.tokens.getClassName(tokenIndex);\n    }\n\n    let top = ctx.getVerticalOffsetForLineNumber(position.lineNumber) - ctx.bigNumbersDelta;\n    let height = this._lineHeight; // Underline might interfere with clicking\n\n    if (this._cursorStyle === TextEditorCursorStyle.Underline || this._cursorStyle === TextEditorCursorStyle.UnderlineThin) {\n      top += this._lineHeight - 2;\n      height = 2;\n    }\n\n    return new ViewCursorRenderData(top, range.left, width, height, textContent, textContentClassName);\n  }\n\n  prepareRender(ctx) {\n    this._renderData = this._prepareRender(ctx);\n  }\n\n  render(ctx) {\n    if (!this._renderData) {\n      this._domNode.setDisplay('none');\n\n      return null;\n    }\n\n    if (this._lastRenderedContent !== this._renderData.textContent) {\n      this._lastRenderedContent = this._renderData.textContent;\n      this._domNode.domNode.textContent = this._lastRenderedContent;\n    }\n\n    this._domNode.setClassName(`cursor ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME} ${this._renderData.textContentClassName}`);\n\n    this._domNode.setDisplay('block');\n\n    this._domNode.setTop(this._renderData.top);\n\n    this._domNode.setLeft(this._renderData.left);\n\n    this._domNode.setWidth(this._renderData.width);\n\n    this._domNode.setLineHeight(this._renderData.height);\n\n    this._domNode.setHeight(this._renderData.height);\n\n    return {\n      domNode: this._domNode.domNode,\n      position: this._position,\n      contentLeft: this._renderData.left,\n      height: this._renderData.height,\n      width: 2\n    };\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/viewCursors/viewCursor.js"],"names":["dom","createFastDomNode","strings","applyFontInfo","TextEditorCursorStyle","Position","Range","MOUSE_CURSOR_TEXT_CSS_CLASS_NAME","ViewCursorRenderData","constructor","top","left","width","height","textContent","textContentClassName","ViewCursor","context","_context","options","configuration","fontInfo","get","_cursorStyle","_lineHeight","_typicalHalfwidthCharacterWidth","typicalHalfwidthCharacterWidth","_lineCursorWidth","Math","min","_isVisible","_domNode","document","createElement","setClassName","setHeight","setTop","setLeft","setDisplay","_position","_lastRenderedContent","_renderData","getDomNode","getPosition","show","setVisibility","hide","onConfigurationChanged","e","onCursorPositionChanged","position","_getGraphemeAwarePosition","lineNumber","column","lineContent","model","getLineContent","startOffset","endOffset","getCharContainingOffset","substring","_prepareRender","ctx","nextGrapheme","Line","LineThin","visibleRange","visibleRangeForPosition","outsideRenderedLine","computeScreenAwareSize","getVerticalOffsetForLineNumber","bigNumbersDelta","visibleRangeForCharacter","linesVisibleRangesForRange","length","firstVisibleRangeForCharacter","ranges","range","Block","lineData","getViewLineData","tokenIndex","tokens","findTokenIndexAtOffset","getClassName","Underline","UnderlineThin","prepareRender","render","domNode","setWidth","setLineHeight","contentLeft"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { applyFontInfo } from '../../config/domFontInfo.js';\nimport { TextEditorCursorStyle } from '../../../common/config/editorOptions.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { MOUSE_CURSOR_TEXT_CSS_CLASS_NAME } from '../../../../base/browser/ui/mouseCursor/mouseCursor.js';\nclass ViewCursorRenderData {\n    constructor(top, left, width, height, textContent, textContentClassName) {\n        this.top = top;\n        this.left = left;\n        this.width = width;\n        this.height = height;\n        this.textContent = textContent;\n        this.textContentClassName = textContentClassName;\n    }\n}\nexport class ViewCursor {\n    constructor(context) {\n        this._context = context;\n        const options = this._context.configuration.options;\n        const fontInfo = options.get(44 /* fontInfo */);\n        this._cursorStyle = options.get(24 /* cursorStyle */);\n        this._lineHeight = options.get(59 /* lineHeight */);\n        this._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        this._lineCursorWidth = Math.min(options.get(27 /* cursorWidth */), this._typicalHalfwidthCharacterWidth);\n        this._isVisible = true;\n        // Create the dom node\n        this._domNode = createFastDomNode(document.createElement('div'));\n        this._domNode.setClassName(`cursor ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`);\n        this._domNode.setHeight(this._lineHeight);\n        this._domNode.setTop(0);\n        this._domNode.setLeft(0);\n        applyFontInfo(this._domNode, fontInfo);\n        this._domNode.setDisplay('none');\n        this._position = new Position(1, 1);\n        this._lastRenderedContent = '';\n        this._renderData = null;\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    getPosition() {\n        return this._position;\n    }\n    show() {\n        if (!this._isVisible) {\n            this._domNode.setVisibility('inherit');\n            this._isVisible = true;\n        }\n    }\n    hide() {\n        if (this._isVisible) {\n            this._domNode.setVisibility('hidden');\n            this._isVisible = false;\n        }\n    }\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const fontInfo = options.get(44 /* fontInfo */);\n        this._cursorStyle = options.get(24 /* cursorStyle */);\n        this._lineHeight = options.get(59 /* lineHeight */);\n        this._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        this._lineCursorWidth = Math.min(options.get(27 /* cursorWidth */), this._typicalHalfwidthCharacterWidth);\n        applyFontInfo(this._domNode, fontInfo);\n        return true;\n    }\n    onCursorPositionChanged(position) {\n        this._position = position;\n        return true;\n    }\n    /**\n     * If `this._position` is inside a grapheme, returns the position where the grapheme starts.\n     * Also returns the next grapheme.\n     */\n    _getGraphemeAwarePosition() {\n        const { lineNumber, column } = this._position;\n        const lineContent = this._context.model.getLineContent(lineNumber);\n        const [startOffset, endOffset] = strings.getCharContainingOffset(lineContent, column - 1);\n        return [new Position(lineNumber, startOffset + 1), lineContent.substring(startOffset, endOffset)];\n    }\n    _prepareRender(ctx) {\n        let textContent = '';\n        const [position, nextGrapheme] = this._getGraphemeAwarePosition();\n        if (this._cursorStyle === TextEditorCursorStyle.Line || this._cursorStyle === TextEditorCursorStyle.LineThin) {\n            const visibleRange = ctx.visibleRangeForPosition(position);\n            if (!visibleRange || visibleRange.outsideRenderedLine) {\n                // Outside viewport\n                return null;\n            }\n            let width;\n            if (this._cursorStyle === TextEditorCursorStyle.Line) {\n                width = dom.computeScreenAwareSize(this._lineCursorWidth > 0 ? this._lineCursorWidth : 2);\n                if (width > 2) {\n                    textContent = nextGrapheme;\n                }\n            }\n            else {\n                width = dom.computeScreenAwareSize(1);\n            }\n            let left = visibleRange.left;\n            if (width >= 2 && left >= 1) {\n                // try to center cursor\n                left -= 1;\n            }\n            const top = ctx.getVerticalOffsetForLineNumber(position.lineNumber) - ctx.bigNumbersDelta;\n            return new ViewCursorRenderData(top, left, width, this._lineHeight, textContent, '');\n        }\n        const visibleRangeForCharacter = ctx.linesVisibleRangesForRange(new Range(position.lineNumber, position.column, position.lineNumber, position.column + nextGrapheme.length), false);\n        if (!visibleRangeForCharacter || visibleRangeForCharacter.length === 0) {\n            // Outside viewport\n            return null;\n        }\n        const firstVisibleRangeForCharacter = visibleRangeForCharacter[0];\n        if (firstVisibleRangeForCharacter.outsideRenderedLine || firstVisibleRangeForCharacter.ranges.length === 0) {\n            // Outside viewport\n            return null;\n        }\n        const range = firstVisibleRangeForCharacter.ranges[0];\n        const width = range.width < 1 ? this._typicalHalfwidthCharacterWidth : range.width;\n        let textContentClassName = '';\n        if (this._cursorStyle === TextEditorCursorStyle.Block) {\n            const lineData = this._context.model.getViewLineData(position.lineNumber);\n            textContent = nextGrapheme;\n            const tokenIndex = lineData.tokens.findTokenIndexAtOffset(position.column - 1);\n            textContentClassName = lineData.tokens.getClassName(tokenIndex);\n        }\n        let top = ctx.getVerticalOffsetForLineNumber(position.lineNumber) - ctx.bigNumbersDelta;\n        let height = this._lineHeight;\n        // Underline might interfere with clicking\n        if (this._cursorStyle === TextEditorCursorStyle.Underline || this._cursorStyle === TextEditorCursorStyle.UnderlineThin) {\n            top += this._lineHeight - 2;\n            height = 2;\n        }\n        return new ViewCursorRenderData(top, range.left, width, height, textContent, textContentClassName);\n    }\n    prepareRender(ctx) {\n        this._renderData = this._prepareRender(ctx);\n    }\n    render(ctx) {\n        if (!this._renderData) {\n            this._domNode.setDisplay('none');\n            return null;\n        }\n        if (this._lastRenderedContent !== this._renderData.textContent) {\n            this._lastRenderedContent = this._renderData.textContent;\n            this._domNode.domNode.textContent = this._lastRenderedContent;\n        }\n        this._domNode.setClassName(`cursor ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME} ${this._renderData.textContentClassName}`);\n        this._domNode.setDisplay('block');\n        this._domNode.setTop(this._renderData.top);\n        this._domNode.setLeft(this._renderData.left);\n        this._domNode.setWidth(this._renderData.width);\n        this._domNode.setLineHeight(this._renderData.height);\n        this._domNode.setHeight(this._renderData.height);\n        return {\n            domNode: this._domNode.domNode,\n            position: this._position,\n            contentLeft: this._renderData.left,\n            height: this._renderData.height,\n            width: 2\n        };\n    }\n}\n"]},"metadata":{},"sourceType":"module"}