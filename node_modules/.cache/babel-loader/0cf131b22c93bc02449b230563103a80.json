{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport function isFuzzyActionArr(what) {\n  return Array.isArray(what);\n}\nexport function isFuzzyAction(what) {\n  return !isFuzzyActionArr(what);\n}\nexport function isString(what) {\n  return typeof what === 'string';\n}\nexport function isIAction(what) {\n  return !isString(what);\n} // Small helper functions\n\n/**\n * Is a string null, undefined, or empty?\n */\n\nexport function empty(s) {\n  return s ? false : true;\n}\n/**\n * Puts a string to lower case if 'ignoreCase' is set.\n */\n\nexport function fixCase(lexer, str) {\n  return lexer.ignoreCase && str ? str.toLowerCase() : str;\n}\n/**\n * Ensures there are no bad characters in a CSS token class.\n */\n\nexport function sanitize(s) {\n  return s.replace(/[&<>'\"_]/g, '-'); // used on all output token CSS classes\n} // Logging\n\n/**\n * Logs a message.\n */\n\nexport function log(lexer, msg) {\n  console.log(`${lexer.languageId}: ${msg}`);\n} // Throwing errors\n\nexport function createError(lexer, msg) {\n  return new Error(`${lexer.languageId}: ${msg}`);\n} // Helper functions for rule finding and substitution\n\n/**\n * substituteMatches is used on lexer strings and can substitutes predefined patterns:\n * \t\t$$  => $\n * \t\t$#  => id\n * \t\t$n  => matched entry n\n * \t\t@attr => contents of lexer[attr]\n *\n * See documentation for more info\n */\n\nexport function substituteMatches(lexer, str, id, matches, state) {\n  const re = /\\$((\\$)|(#)|(\\d\\d?)|[sS](\\d\\d?)|@(\\w+))/g;\n  let stateMatches = null;\n  return str.replace(re, function (full, sub, dollar, hash, n, s, attr, ofs, total) {\n    if (!empty(dollar)) {\n      return '$'; // $$\n    }\n\n    if (!empty(hash)) {\n      return fixCase(lexer, id); // default $#\n    }\n\n    if (!empty(n) && n < matches.length) {\n      return fixCase(lexer, matches[n]); // $n\n    }\n\n    if (!empty(attr) && lexer && typeof lexer[attr] === 'string') {\n      return lexer[attr]; //@attribute\n    }\n\n    if (stateMatches === null) {\n      // split state on demand\n      stateMatches = state.split('.');\n      stateMatches.unshift(state);\n    }\n\n    if (!empty(s) && s < stateMatches.length) {\n      return fixCase(lexer, stateMatches[s]); //$Sn\n    }\n\n    return '';\n  });\n}\n/**\n * Find the tokenizer rules for a specific state (i.e. next action)\n */\n\nexport function findRules(lexer, inState) {\n  let state = inState;\n\n  while (state && state.length > 0) {\n    const rules = lexer.tokenizer[state];\n\n    if (rules) {\n      return rules;\n    }\n\n    const idx = state.lastIndexOf('.');\n\n    if (idx < 0) {\n      state = null; // no further parent\n    } else {\n      state = state.substr(0, idx);\n    }\n  }\n\n  return null;\n}\n/**\n * Is a certain state defined? In contrast to 'findRules' this works on a ILexerMin.\n * This is used during compilation where we may know the defined states\n * but not yet whether the corresponding rules are correct.\n */\n\nexport function stateExists(lexer, inState) {\n  let state = inState;\n\n  while (state && state.length > 0) {\n    const exist = lexer.stateNames[state];\n\n    if (exist) {\n      return true;\n    }\n\n    const idx = state.lastIndexOf('.');\n\n    if (idx < 0) {\n      state = null; // no further parent\n    } else {\n      state = state.substr(0, idx);\n    }\n  }\n\n  return false;\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/standalone/common/monarch/monarchCommon.js"],"names":["isFuzzyActionArr","what","Array","isArray","isFuzzyAction","isString","isIAction","empty","s","fixCase","lexer","str","ignoreCase","toLowerCase","sanitize","replace","log","msg","console","languageId","createError","Error","substituteMatches","id","matches","state","re","stateMatches","full","sub","dollar","hash","n","attr","ofs","total","length","split","unshift","findRules","inState","rules","tokenizer","idx","lastIndexOf","substr","stateExists","exist","stateNames"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport function isFuzzyActionArr(what) {\n    return (Array.isArray(what));\n}\nexport function isFuzzyAction(what) {\n    return !isFuzzyActionArr(what);\n}\nexport function isString(what) {\n    return (typeof what === 'string');\n}\nexport function isIAction(what) {\n    return !isString(what);\n}\n// Small helper functions\n/**\n * Is a string null, undefined, or empty?\n */\nexport function empty(s) {\n    return (s ? false : true);\n}\n/**\n * Puts a string to lower case if 'ignoreCase' is set.\n */\nexport function fixCase(lexer, str) {\n    return (lexer.ignoreCase && str ? str.toLowerCase() : str);\n}\n/**\n * Ensures there are no bad characters in a CSS token class.\n */\nexport function sanitize(s) {\n    return s.replace(/[&<>'\"_]/g, '-'); // used on all output token CSS classes\n}\n// Logging\n/**\n * Logs a message.\n */\nexport function log(lexer, msg) {\n    console.log(`${lexer.languageId}: ${msg}`);\n}\n// Throwing errors\nexport function createError(lexer, msg) {\n    return new Error(`${lexer.languageId}: ${msg}`);\n}\n// Helper functions for rule finding and substitution\n/**\n * substituteMatches is used on lexer strings and can substitutes predefined patterns:\n * \t\t$$  => $\n * \t\t$#  => id\n * \t\t$n  => matched entry n\n * \t\t@attr => contents of lexer[attr]\n *\n * See documentation for more info\n */\nexport function substituteMatches(lexer, str, id, matches, state) {\n    const re = /\\$((\\$)|(#)|(\\d\\d?)|[sS](\\d\\d?)|@(\\w+))/g;\n    let stateMatches = null;\n    return str.replace(re, function (full, sub, dollar, hash, n, s, attr, ofs, total) {\n        if (!empty(dollar)) {\n            return '$'; // $$\n        }\n        if (!empty(hash)) {\n            return fixCase(lexer, id); // default $#\n        }\n        if (!empty(n) && n < matches.length) {\n            return fixCase(lexer, matches[n]); // $n\n        }\n        if (!empty(attr) && lexer && typeof (lexer[attr]) === 'string') {\n            return lexer[attr]; //@attribute\n        }\n        if (stateMatches === null) { // split state on demand\n            stateMatches = state.split('.');\n            stateMatches.unshift(state);\n        }\n        if (!empty(s) && s < stateMatches.length) {\n            return fixCase(lexer, stateMatches[s]); //$Sn\n        }\n        return '';\n    });\n}\n/**\n * Find the tokenizer rules for a specific state (i.e. next action)\n */\nexport function findRules(lexer, inState) {\n    let state = inState;\n    while (state && state.length > 0) {\n        const rules = lexer.tokenizer[state];\n        if (rules) {\n            return rules;\n        }\n        const idx = state.lastIndexOf('.');\n        if (idx < 0) {\n            state = null; // no further parent\n        }\n        else {\n            state = state.substr(0, idx);\n        }\n    }\n    return null;\n}\n/**\n * Is a certain state defined? In contrast to 'findRules' this works on a ILexerMin.\n * This is used during compilation where we may know the defined states\n * but not yet whether the corresponding rules are correct.\n */\nexport function stateExists(lexer, inState) {\n    let state = inState;\n    while (state && state.length > 0) {\n        const exist = lexer.stateNames[state];\n        if (exist) {\n            return true;\n        }\n        const idx = state.lastIndexOf('.');\n        if (idx < 0) {\n            state = null; // no further parent\n        }\n        else {\n            state = state.substr(0, idx);\n        }\n    }\n    return false;\n}\n"]},"metadata":{},"sourceType":"module"}