{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { Selection } from '../core/selection.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { TextChange, compressConsecutiveTextChanges } from '../core/textChange.js';\nimport * as buffer from '../../../base/common/buffer.js';\nimport { basename } from '../../../base/common/resources.js';\n\nfunction uriGetComparisonKey(resource) {\n  return resource.toString();\n}\n\nexport class SingleModelEditStackData {\n  constructor(beforeVersionId, afterVersionId, beforeEOL, afterEOL, beforeCursorState, afterCursorState, changes) {\n    this.beforeVersionId = beforeVersionId;\n    this.afterVersionId = afterVersionId;\n    this.beforeEOL = beforeEOL;\n    this.afterEOL = afterEOL;\n    this.beforeCursorState = beforeCursorState;\n    this.afterCursorState = afterCursorState;\n    this.changes = changes;\n  }\n\n  static create(model, beforeCursorState) {\n    const alternativeVersionId = model.getAlternativeVersionId();\n    const eol = getModelEOL(model);\n    return new SingleModelEditStackData(alternativeVersionId, alternativeVersionId, eol, eol, beforeCursorState, beforeCursorState, []);\n  }\n\n  append(model, textChanges, afterEOL, afterVersionId, afterCursorState) {\n    if (textChanges.length > 0) {\n      this.changes = compressConsecutiveTextChanges(this.changes, textChanges);\n    }\n\n    this.afterEOL = afterEOL;\n    this.afterVersionId = afterVersionId;\n    this.afterCursorState = afterCursorState;\n  }\n\n  static _writeSelectionsSize(selections) {\n    return 4 + 4 * 4 * (selections ? selections.length : 0);\n  }\n\n  static _writeSelections(b, selections, offset) {\n    buffer.writeUInt32BE(b, selections ? selections.length : 0, offset);\n    offset += 4;\n\n    if (selections) {\n      for (const selection of selections) {\n        buffer.writeUInt32BE(b, selection.selectionStartLineNumber, offset);\n        offset += 4;\n        buffer.writeUInt32BE(b, selection.selectionStartColumn, offset);\n        offset += 4;\n        buffer.writeUInt32BE(b, selection.positionLineNumber, offset);\n        offset += 4;\n        buffer.writeUInt32BE(b, selection.positionColumn, offset);\n        offset += 4;\n      }\n    }\n\n    return offset;\n  }\n\n  static _readSelections(b, offset, dest) {\n    const count = buffer.readUInt32BE(b, offset);\n    offset += 4;\n\n    for (let i = 0; i < count; i++) {\n      const selectionStartLineNumber = buffer.readUInt32BE(b, offset);\n      offset += 4;\n      const selectionStartColumn = buffer.readUInt32BE(b, offset);\n      offset += 4;\n      const positionLineNumber = buffer.readUInt32BE(b, offset);\n      offset += 4;\n      const positionColumn = buffer.readUInt32BE(b, offset);\n      offset += 4;\n      dest.push(new Selection(selectionStartLineNumber, selectionStartColumn, positionLineNumber, positionColumn));\n    }\n\n    return offset;\n  }\n\n  serialize() {\n    let necessarySize = +4 // beforeVersionId\n    + 4 // afterVersionId\n    + 1 // beforeEOL\n    + 1 // afterEOL\n    + SingleModelEditStackData._writeSelectionsSize(this.beforeCursorState) + SingleModelEditStackData._writeSelectionsSize(this.afterCursorState) + 4 // change count\n    ;\n\n    for (const change of this.changes) {\n      necessarySize += change.writeSize();\n    }\n\n    const b = new Uint8Array(necessarySize);\n    let offset = 0;\n    buffer.writeUInt32BE(b, this.beforeVersionId, offset);\n    offset += 4;\n    buffer.writeUInt32BE(b, this.afterVersionId, offset);\n    offset += 4;\n    buffer.writeUInt8(b, this.beforeEOL, offset);\n    offset += 1;\n    buffer.writeUInt8(b, this.afterEOL, offset);\n    offset += 1;\n    offset = SingleModelEditStackData._writeSelections(b, this.beforeCursorState, offset);\n    offset = SingleModelEditStackData._writeSelections(b, this.afterCursorState, offset);\n    buffer.writeUInt32BE(b, this.changes.length, offset);\n    offset += 4;\n\n    for (const change of this.changes) {\n      offset = change.write(b, offset);\n    }\n\n    return b.buffer;\n  }\n\n  static deserialize(source) {\n    const b = new Uint8Array(source);\n    let offset = 0;\n    const beforeVersionId = buffer.readUInt32BE(b, offset);\n    offset += 4;\n    const afterVersionId = buffer.readUInt32BE(b, offset);\n    offset += 4;\n    const beforeEOL = buffer.readUInt8(b, offset);\n    offset += 1;\n    const afterEOL = buffer.readUInt8(b, offset);\n    offset += 1;\n    const beforeCursorState = [];\n    offset = SingleModelEditStackData._readSelections(b, offset, beforeCursorState);\n    const afterCursorState = [];\n    offset = SingleModelEditStackData._readSelections(b, offset, afterCursorState);\n    const changeCount = buffer.readUInt32BE(b, offset);\n    offset += 4;\n    const changes = [];\n\n    for (let i = 0; i < changeCount; i++) {\n      offset = TextChange.read(b, offset, changes);\n    }\n\n    return new SingleModelEditStackData(beforeVersionId, afterVersionId, beforeEOL, afterEOL, beforeCursorState, afterCursorState, changes);\n  }\n\n}\nexport class SingleModelEditStackElement {\n  constructor(model, beforeCursorState) {\n    this.model = model;\n    this._data = SingleModelEditStackData.create(model, beforeCursorState);\n  }\n\n  get type() {\n    return 0\n    /* Resource */\n    ;\n  }\n\n  get resource() {\n    if (URI.isUri(this.model)) {\n      return this.model;\n    }\n\n    return this.model.uri;\n  }\n\n  get label() {\n    return nls.localize('edit', \"Typing\");\n  }\n\n  toString() {\n    const data = this._data instanceof SingleModelEditStackData ? this._data : SingleModelEditStackData.deserialize(this._data);\n    return data.changes.map(change => change.toString()).join(', ');\n  }\n\n  matchesResource(resource) {\n    const uri = URI.isUri(this.model) ? this.model : this.model.uri;\n    return uri.toString() === resource.toString();\n  }\n\n  setModel(model) {\n    this.model = model;\n  }\n\n  canAppend(model) {\n    return this.model === model && this._data instanceof SingleModelEditStackData;\n  }\n\n  append(model, textChanges, afterEOL, afterVersionId, afterCursorState) {\n    if (this._data instanceof SingleModelEditStackData) {\n      this._data.append(model, textChanges, afterEOL, afterVersionId, afterCursorState);\n    }\n  }\n\n  close() {\n    if (this._data instanceof SingleModelEditStackData) {\n      this._data = this._data.serialize();\n    }\n  }\n\n  open() {\n    if (!(this._data instanceof SingleModelEditStackData)) {\n      this._data = SingleModelEditStackData.deserialize(this._data);\n    }\n  }\n\n  undo() {\n    if (URI.isUri(this.model)) {\n      // don't have a model\n      throw new Error(`Invalid SingleModelEditStackElement`);\n    }\n\n    if (this._data instanceof SingleModelEditStackData) {\n      this._data = this._data.serialize();\n    }\n\n    const data = SingleModelEditStackData.deserialize(this._data);\n\n    this.model._applyUndo(data.changes, data.beforeEOL, data.beforeVersionId, data.beforeCursorState);\n  }\n\n  redo() {\n    if (URI.isUri(this.model)) {\n      // don't have a model\n      throw new Error(`Invalid SingleModelEditStackElement`);\n    }\n\n    if (this._data instanceof SingleModelEditStackData) {\n      this._data = this._data.serialize();\n    }\n\n    const data = SingleModelEditStackData.deserialize(this._data);\n\n    this.model._applyRedo(data.changes, data.afterEOL, data.afterVersionId, data.afterCursorState);\n  }\n\n  heapSize() {\n    if (this._data instanceof SingleModelEditStackData) {\n      this._data = this._data.serialize();\n    }\n\n    return this._data.byteLength + 168\n    /*heap overhead*/\n    ;\n  }\n\n}\nexport class MultiModelEditStackElement {\n  constructor(label, editStackElements) {\n    this.type = 1\n    /* Workspace */\n    ;\n    this.label = label;\n    this._isOpen = true;\n    this._editStackElementsArr = editStackElements.slice(0);\n    this._editStackElementsMap = new Map();\n\n    for (const editStackElement of this._editStackElementsArr) {\n      const key = uriGetComparisonKey(editStackElement.resource);\n\n      this._editStackElementsMap.set(key, editStackElement);\n    }\n\n    this._delegate = null;\n  }\n\n  get resources() {\n    return this._editStackElementsArr.map(editStackElement => editStackElement.resource);\n  }\n\n  prepareUndoRedo() {\n    if (this._delegate) {\n      return this._delegate.prepareUndoRedo(this);\n    }\n  }\n\n  matchesResource(resource) {\n    const key = uriGetComparisonKey(resource);\n    return this._editStackElementsMap.has(key);\n  }\n\n  setModel(model) {\n    const key = uriGetComparisonKey(URI.isUri(model) ? model : model.uri);\n\n    if (this._editStackElementsMap.has(key)) {\n      this._editStackElementsMap.get(key).setModel(model);\n    }\n  }\n\n  canAppend(model) {\n    if (!this._isOpen) {\n      return false;\n    }\n\n    const key = uriGetComparisonKey(model.uri);\n\n    if (this._editStackElementsMap.has(key)) {\n      const editStackElement = this._editStackElementsMap.get(key);\n\n      return editStackElement.canAppend(model);\n    }\n\n    return false;\n  }\n\n  append(model, textChanges, afterEOL, afterVersionId, afterCursorState) {\n    const key = uriGetComparisonKey(model.uri);\n\n    const editStackElement = this._editStackElementsMap.get(key);\n\n    editStackElement.append(model, textChanges, afterEOL, afterVersionId, afterCursorState);\n  }\n\n  close() {\n    this._isOpen = false;\n  }\n\n  open() {// cannot reopen\n  }\n\n  undo() {\n    this._isOpen = false;\n\n    for (const editStackElement of this._editStackElementsArr) {\n      editStackElement.undo();\n    }\n  }\n\n  redo() {\n    for (const editStackElement of this._editStackElementsArr) {\n      editStackElement.redo();\n    }\n  }\n\n  heapSize(resource) {\n    const key = uriGetComparisonKey(resource);\n\n    if (this._editStackElementsMap.has(key)) {\n      const editStackElement = this._editStackElementsMap.get(key);\n\n      return editStackElement.heapSize();\n    }\n\n    return 0;\n  }\n\n  split() {\n    return this._editStackElementsArr;\n  }\n\n  toString() {\n    let result = [];\n\n    for (const editStackElement of this._editStackElementsArr) {\n      result.push(`${basename(editStackElement.resource)}: ${editStackElement}`);\n    }\n\n    return `{${result.join(', ')}}`;\n  }\n\n}\n\nfunction getModelEOL(model) {\n  const eol = model.getEOL();\n\n  if (eol === '\\n') {\n    return 0\n    /* LF */\n    ;\n  } else {\n    return 1\n    /* CRLF */\n    ;\n  }\n}\n\nexport function isEditStackElement(element) {\n  if (!element) {\n    return false;\n  }\n\n  return element instanceof SingleModelEditStackElement || element instanceof MultiModelEditStackElement;\n}\nexport class EditStack {\n  constructor(model, undoRedoService) {\n    this._model = model;\n    this._undoRedoService = undoRedoService;\n  }\n\n  pushStackElement() {\n    const lastElement = this._undoRedoService.getLastElement(this._model.uri);\n\n    if (isEditStackElement(lastElement)) {\n      lastElement.close();\n    }\n  }\n\n  popStackElement() {\n    const lastElement = this._undoRedoService.getLastElement(this._model.uri);\n\n    if (isEditStackElement(lastElement)) {\n      lastElement.open();\n    }\n  }\n\n  clear() {\n    this._undoRedoService.removeElements(this._model.uri);\n  }\n\n  _getOrCreateEditStackElement(beforeCursorState) {\n    const lastElement = this._undoRedoService.getLastElement(this._model.uri);\n\n    if (isEditStackElement(lastElement) && lastElement.canAppend(this._model)) {\n      return lastElement;\n    }\n\n    const newElement = new SingleModelEditStackElement(this._model, beforeCursorState);\n\n    this._undoRedoService.pushElement(newElement);\n\n    return newElement;\n  }\n\n  pushEOL(eol) {\n    const editStackElement = this._getOrCreateEditStackElement(null);\n\n    this._model.setEOL(eol);\n\n    editStackElement.append(this._model, [], getModelEOL(this._model), this._model.getAlternativeVersionId(), null);\n  }\n\n  pushEditOperation(beforeCursorState, editOperations, cursorStateComputer) {\n    const editStackElement = this._getOrCreateEditStackElement(beforeCursorState);\n\n    const inverseEditOperations = this._model.applyEdits(editOperations, true);\n\n    const afterCursorState = EditStack._computeCursorState(cursorStateComputer, inverseEditOperations);\n\n    const textChanges = inverseEditOperations.map((op, index) => ({\n      index: index,\n      textChange: op.textChange\n    }));\n    textChanges.sort((a, b) => {\n      if (a.textChange.oldPosition === b.textChange.oldPosition) {\n        return a.index - b.index;\n      }\n\n      return a.textChange.oldPosition - b.textChange.oldPosition;\n    });\n    editStackElement.append(this._model, textChanges.map(op => op.textChange), getModelEOL(this._model), this._model.getAlternativeVersionId(), afterCursorState);\n    return afterCursorState;\n  }\n\n  static _computeCursorState(cursorStateComputer, inverseEditOperations) {\n    try {\n      return cursorStateComputer ? cursorStateComputer(inverseEditOperations) : null;\n    } catch (e) {\n      onUnexpectedError(e);\n      return null;\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/common/model/editStack.js"],"names":["nls","onUnexpectedError","Selection","URI","TextChange","compressConsecutiveTextChanges","buffer","basename","uriGetComparisonKey","resource","toString","SingleModelEditStackData","constructor","beforeVersionId","afterVersionId","beforeEOL","afterEOL","beforeCursorState","afterCursorState","changes","create","model","alternativeVersionId","getAlternativeVersionId","eol","getModelEOL","append","textChanges","length","_writeSelectionsSize","selections","_writeSelections","b","offset","writeUInt32BE","selection","selectionStartLineNumber","selectionStartColumn","positionLineNumber","positionColumn","_readSelections","dest","count","readUInt32BE","i","push","serialize","necessarySize","change","writeSize","Uint8Array","writeUInt8","write","deserialize","source","readUInt8","changeCount","read","SingleModelEditStackElement","_data","type","isUri","uri","label","localize","data","map","join","matchesResource","setModel","canAppend","close","open","undo","Error","_applyUndo","redo","_applyRedo","heapSize","byteLength","MultiModelEditStackElement","editStackElements","_isOpen","_editStackElementsArr","slice","_editStackElementsMap","Map","editStackElement","key","set","_delegate","resources","prepareUndoRedo","has","get","split","result","getEOL","isEditStackElement","element","EditStack","undoRedoService","_model","_undoRedoService","pushStackElement","lastElement","getLastElement","popStackElement","clear","removeElements","_getOrCreateEditStackElement","newElement","pushElement","pushEOL","setEOL","pushEditOperation","editOperations","cursorStateComputer","inverseEditOperations","applyEdits","_computeCursorState","op","index","textChange","sort","a","oldPosition","e"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { Selection } from '../core/selection.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { TextChange, compressConsecutiveTextChanges } from '../core/textChange.js';\nimport * as buffer from '../../../base/common/buffer.js';\nimport { basename } from '../../../base/common/resources.js';\nfunction uriGetComparisonKey(resource) {\n    return resource.toString();\n}\nexport class SingleModelEditStackData {\n    constructor(beforeVersionId, afterVersionId, beforeEOL, afterEOL, beforeCursorState, afterCursorState, changes) {\n        this.beforeVersionId = beforeVersionId;\n        this.afterVersionId = afterVersionId;\n        this.beforeEOL = beforeEOL;\n        this.afterEOL = afterEOL;\n        this.beforeCursorState = beforeCursorState;\n        this.afterCursorState = afterCursorState;\n        this.changes = changes;\n    }\n    static create(model, beforeCursorState) {\n        const alternativeVersionId = model.getAlternativeVersionId();\n        const eol = getModelEOL(model);\n        return new SingleModelEditStackData(alternativeVersionId, alternativeVersionId, eol, eol, beforeCursorState, beforeCursorState, []);\n    }\n    append(model, textChanges, afterEOL, afterVersionId, afterCursorState) {\n        if (textChanges.length > 0) {\n            this.changes = compressConsecutiveTextChanges(this.changes, textChanges);\n        }\n        this.afterEOL = afterEOL;\n        this.afterVersionId = afterVersionId;\n        this.afterCursorState = afterCursorState;\n    }\n    static _writeSelectionsSize(selections) {\n        return 4 + 4 * 4 * (selections ? selections.length : 0);\n    }\n    static _writeSelections(b, selections, offset) {\n        buffer.writeUInt32BE(b, (selections ? selections.length : 0), offset);\n        offset += 4;\n        if (selections) {\n            for (const selection of selections) {\n                buffer.writeUInt32BE(b, selection.selectionStartLineNumber, offset);\n                offset += 4;\n                buffer.writeUInt32BE(b, selection.selectionStartColumn, offset);\n                offset += 4;\n                buffer.writeUInt32BE(b, selection.positionLineNumber, offset);\n                offset += 4;\n                buffer.writeUInt32BE(b, selection.positionColumn, offset);\n                offset += 4;\n            }\n        }\n        return offset;\n    }\n    static _readSelections(b, offset, dest) {\n        const count = buffer.readUInt32BE(b, offset);\n        offset += 4;\n        for (let i = 0; i < count; i++) {\n            const selectionStartLineNumber = buffer.readUInt32BE(b, offset);\n            offset += 4;\n            const selectionStartColumn = buffer.readUInt32BE(b, offset);\n            offset += 4;\n            const positionLineNumber = buffer.readUInt32BE(b, offset);\n            offset += 4;\n            const positionColumn = buffer.readUInt32BE(b, offset);\n            offset += 4;\n            dest.push(new Selection(selectionStartLineNumber, selectionStartColumn, positionLineNumber, positionColumn));\n        }\n        return offset;\n    }\n    serialize() {\n        let necessarySize = (+4 // beforeVersionId\n            + 4 // afterVersionId\n            + 1 // beforeEOL\n            + 1 // afterEOL\n            + SingleModelEditStackData._writeSelectionsSize(this.beforeCursorState)\n            + SingleModelEditStackData._writeSelectionsSize(this.afterCursorState)\n            + 4 // change count\n        );\n        for (const change of this.changes) {\n            necessarySize += change.writeSize();\n        }\n        const b = new Uint8Array(necessarySize);\n        let offset = 0;\n        buffer.writeUInt32BE(b, this.beforeVersionId, offset);\n        offset += 4;\n        buffer.writeUInt32BE(b, this.afterVersionId, offset);\n        offset += 4;\n        buffer.writeUInt8(b, this.beforeEOL, offset);\n        offset += 1;\n        buffer.writeUInt8(b, this.afterEOL, offset);\n        offset += 1;\n        offset = SingleModelEditStackData._writeSelections(b, this.beforeCursorState, offset);\n        offset = SingleModelEditStackData._writeSelections(b, this.afterCursorState, offset);\n        buffer.writeUInt32BE(b, this.changes.length, offset);\n        offset += 4;\n        for (const change of this.changes) {\n            offset = change.write(b, offset);\n        }\n        return b.buffer;\n    }\n    static deserialize(source) {\n        const b = new Uint8Array(source);\n        let offset = 0;\n        const beforeVersionId = buffer.readUInt32BE(b, offset);\n        offset += 4;\n        const afterVersionId = buffer.readUInt32BE(b, offset);\n        offset += 4;\n        const beforeEOL = buffer.readUInt8(b, offset);\n        offset += 1;\n        const afterEOL = buffer.readUInt8(b, offset);\n        offset += 1;\n        const beforeCursorState = [];\n        offset = SingleModelEditStackData._readSelections(b, offset, beforeCursorState);\n        const afterCursorState = [];\n        offset = SingleModelEditStackData._readSelections(b, offset, afterCursorState);\n        const changeCount = buffer.readUInt32BE(b, offset);\n        offset += 4;\n        const changes = [];\n        for (let i = 0; i < changeCount; i++) {\n            offset = TextChange.read(b, offset, changes);\n        }\n        return new SingleModelEditStackData(beforeVersionId, afterVersionId, beforeEOL, afterEOL, beforeCursorState, afterCursorState, changes);\n    }\n}\nexport class SingleModelEditStackElement {\n    constructor(model, beforeCursorState) {\n        this.model = model;\n        this._data = SingleModelEditStackData.create(model, beforeCursorState);\n    }\n    get type() {\n        return 0 /* Resource */;\n    }\n    get resource() {\n        if (URI.isUri(this.model)) {\n            return this.model;\n        }\n        return this.model.uri;\n    }\n    get label() {\n        return nls.localize('edit', \"Typing\");\n    }\n    toString() {\n        const data = (this._data instanceof SingleModelEditStackData ? this._data : SingleModelEditStackData.deserialize(this._data));\n        return data.changes.map(change => change.toString()).join(', ');\n    }\n    matchesResource(resource) {\n        const uri = (URI.isUri(this.model) ? this.model : this.model.uri);\n        return (uri.toString() === resource.toString());\n    }\n    setModel(model) {\n        this.model = model;\n    }\n    canAppend(model) {\n        return (this.model === model && this._data instanceof SingleModelEditStackData);\n    }\n    append(model, textChanges, afterEOL, afterVersionId, afterCursorState) {\n        if (this._data instanceof SingleModelEditStackData) {\n            this._data.append(model, textChanges, afterEOL, afterVersionId, afterCursorState);\n        }\n    }\n    close() {\n        if (this._data instanceof SingleModelEditStackData) {\n            this._data = this._data.serialize();\n        }\n    }\n    open() {\n        if (!(this._data instanceof SingleModelEditStackData)) {\n            this._data = SingleModelEditStackData.deserialize(this._data);\n        }\n    }\n    undo() {\n        if (URI.isUri(this.model)) {\n            // don't have a model\n            throw new Error(`Invalid SingleModelEditStackElement`);\n        }\n        if (this._data instanceof SingleModelEditStackData) {\n            this._data = this._data.serialize();\n        }\n        const data = SingleModelEditStackData.deserialize(this._data);\n        this.model._applyUndo(data.changes, data.beforeEOL, data.beforeVersionId, data.beforeCursorState);\n    }\n    redo() {\n        if (URI.isUri(this.model)) {\n            // don't have a model\n            throw new Error(`Invalid SingleModelEditStackElement`);\n        }\n        if (this._data instanceof SingleModelEditStackData) {\n            this._data = this._data.serialize();\n        }\n        const data = SingleModelEditStackData.deserialize(this._data);\n        this.model._applyRedo(data.changes, data.afterEOL, data.afterVersionId, data.afterCursorState);\n    }\n    heapSize() {\n        if (this._data instanceof SingleModelEditStackData) {\n            this._data = this._data.serialize();\n        }\n        return this._data.byteLength + 168 /*heap overhead*/;\n    }\n}\nexport class MultiModelEditStackElement {\n    constructor(label, editStackElements) {\n        this.type = 1 /* Workspace */;\n        this.label = label;\n        this._isOpen = true;\n        this._editStackElementsArr = editStackElements.slice(0);\n        this._editStackElementsMap = new Map();\n        for (const editStackElement of this._editStackElementsArr) {\n            const key = uriGetComparisonKey(editStackElement.resource);\n            this._editStackElementsMap.set(key, editStackElement);\n        }\n        this._delegate = null;\n    }\n    get resources() {\n        return this._editStackElementsArr.map(editStackElement => editStackElement.resource);\n    }\n    prepareUndoRedo() {\n        if (this._delegate) {\n            return this._delegate.prepareUndoRedo(this);\n        }\n    }\n    matchesResource(resource) {\n        const key = uriGetComparisonKey(resource);\n        return (this._editStackElementsMap.has(key));\n    }\n    setModel(model) {\n        const key = uriGetComparisonKey(URI.isUri(model) ? model : model.uri);\n        if (this._editStackElementsMap.has(key)) {\n            this._editStackElementsMap.get(key).setModel(model);\n        }\n    }\n    canAppend(model) {\n        if (!this._isOpen) {\n            return false;\n        }\n        const key = uriGetComparisonKey(model.uri);\n        if (this._editStackElementsMap.has(key)) {\n            const editStackElement = this._editStackElementsMap.get(key);\n            return editStackElement.canAppend(model);\n        }\n        return false;\n    }\n    append(model, textChanges, afterEOL, afterVersionId, afterCursorState) {\n        const key = uriGetComparisonKey(model.uri);\n        const editStackElement = this._editStackElementsMap.get(key);\n        editStackElement.append(model, textChanges, afterEOL, afterVersionId, afterCursorState);\n    }\n    close() {\n        this._isOpen = false;\n    }\n    open() {\n        // cannot reopen\n    }\n    undo() {\n        this._isOpen = false;\n        for (const editStackElement of this._editStackElementsArr) {\n            editStackElement.undo();\n        }\n    }\n    redo() {\n        for (const editStackElement of this._editStackElementsArr) {\n            editStackElement.redo();\n        }\n    }\n    heapSize(resource) {\n        const key = uriGetComparisonKey(resource);\n        if (this._editStackElementsMap.has(key)) {\n            const editStackElement = this._editStackElementsMap.get(key);\n            return editStackElement.heapSize();\n        }\n        return 0;\n    }\n    split() {\n        return this._editStackElementsArr;\n    }\n    toString() {\n        let result = [];\n        for (const editStackElement of this._editStackElementsArr) {\n            result.push(`${basename(editStackElement.resource)}: ${editStackElement}`);\n        }\n        return `{${result.join(', ')}}`;\n    }\n}\nfunction getModelEOL(model) {\n    const eol = model.getEOL();\n    if (eol === '\\n') {\n        return 0 /* LF */;\n    }\n    else {\n        return 1 /* CRLF */;\n    }\n}\nexport function isEditStackElement(element) {\n    if (!element) {\n        return false;\n    }\n    return ((element instanceof SingleModelEditStackElement) || (element instanceof MultiModelEditStackElement));\n}\nexport class EditStack {\n    constructor(model, undoRedoService) {\n        this._model = model;\n        this._undoRedoService = undoRedoService;\n    }\n    pushStackElement() {\n        const lastElement = this._undoRedoService.getLastElement(this._model.uri);\n        if (isEditStackElement(lastElement)) {\n            lastElement.close();\n        }\n    }\n    popStackElement() {\n        const lastElement = this._undoRedoService.getLastElement(this._model.uri);\n        if (isEditStackElement(lastElement)) {\n            lastElement.open();\n        }\n    }\n    clear() {\n        this._undoRedoService.removeElements(this._model.uri);\n    }\n    _getOrCreateEditStackElement(beforeCursorState) {\n        const lastElement = this._undoRedoService.getLastElement(this._model.uri);\n        if (isEditStackElement(lastElement) && lastElement.canAppend(this._model)) {\n            return lastElement;\n        }\n        const newElement = new SingleModelEditStackElement(this._model, beforeCursorState);\n        this._undoRedoService.pushElement(newElement);\n        return newElement;\n    }\n    pushEOL(eol) {\n        const editStackElement = this._getOrCreateEditStackElement(null);\n        this._model.setEOL(eol);\n        editStackElement.append(this._model, [], getModelEOL(this._model), this._model.getAlternativeVersionId(), null);\n    }\n    pushEditOperation(beforeCursorState, editOperations, cursorStateComputer) {\n        const editStackElement = this._getOrCreateEditStackElement(beforeCursorState);\n        const inverseEditOperations = this._model.applyEdits(editOperations, true);\n        const afterCursorState = EditStack._computeCursorState(cursorStateComputer, inverseEditOperations);\n        const textChanges = inverseEditOperations.map((op, index) => ({ index: index, textChange: op.textChange }));\n        textChanges.sort((a, b) => {\n            if (a.textChange.oldPosition === b.textChange.oldPosition) {\n                return a.index - b.index;\n            }\n            return a.textChange.oldPosition - b.textChange.oldPosition;\n        });\n        editStackElement.append(this._model, textChanges.map(op => op.textChange), getModelEOL(this._model), this._model.getAlternativeVersionId(), afterCursorState);\n        return afterCursorState;\n    }\n    static _computeCursorState(cursorStateComputer, inverseEditOperations) {\n        try {\n            return cursorStateComputer ? cursorStateComputer(inverseEditOperations) : null;\n        }\n        catch (e) {\n            onUnexpectedError(e);\n            return null;\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}