{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { createCancelablePromise, RunOnceScheduler } from '../../../../base/common/async.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { MutableDisposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { InlineCompletionTriggerKind } from '../../../common/languages.js';\nimport { BaseGhostTextWidgetModel, GhostText } from './ghostText.js';\nimport { minimizeInlineCompletion, provideInlineCompletions, UpdateOperation } from './inlineCompletionsModel.js';\nimport { inlineCompletionToGhostText } from './inlineCompletionToGhostText.js';\nimport { SuggestWidgetInlineCompletionProvider } from './suggestWidgetInlineCompletionProvider.js';\nexport class SuggestWidgetPreviewModel extends BaseGhostTextWidgetModel {\n  constructor(editor, cache) {\n    super(editor);\n    this.cache = cache;\n    this.suggestionInlineCompletionSource = this._register(new SuggestWidgetInlineCompletionProvider(this.editor, // Use the first cache item (if any) as preselection.\n    () => {\n      var _a, _b;\n\n      return (_b = (_a = this.cache.value) === null || _a === void 0 ? void 0 : _a.completions[0]) === null || _b === void 0 ? void 0 : _b.toLiveInlineCompletion();\n    }));\n    this.updateOperation = this._register(new MutableDisposable());\n    this.updateCacheSoon = this._register(new RunOnceScheduler(() => this.updateCache(), 50));\n    this.minReservedLineCount = 0;\n\n    this._register(this.suggestionInlineCompletionSource.onDidChange(() => {\n      this.updateCacheSoon.schedule();\n      const suggestWidgetState = this.suggestionInlineCompletionSource.state;\n\n      if (!suggestWidgetState) {\n        this.minReservedLineCount = 0;\n      }\n\n      const newGhostText = this.ghostText;\n\n      if (newGhostText) {\n        this.minReservedLineCount = Math.max(this.minReservedLineCount, sum(newGhostText.parts.map(p => p.lines.length - 1)));\n      }\n\n      if (this.minReservedLineCount >= 1) {\n        this.suggestionInlineCompletionSource.forceRenderingAbove();\n      } else {\n        this.suggestionInlineCompletionSource.stopForceRenderingAbove();\n      }\n\n      this.onDidChangeEmitter.fire();\n    }));\n\n    this._register(this.cache.onDidChange(() => {\n      this.onDidChangeEmitter.fire();\n    }));\n\n    this._register(this.editor.onDidChangeCursorPosition(e => {\n      this.minReservedLineCount = 0;\n      this.updateCacheSoon.schedule();\n      this.onDidChangeEmitter.fire();\n    }));\n\n    this._register(toDisposable(() => this.suggestionInlineCompletionSource.stopForceRenderingAbove()));\n  }\n\n  get isActive() {\n    return this.suggestionInlineCompletionSource.state !== undefined;\n  }\n\n  isSuggestionPreviewEnabled() {\n    const suggestOptions = this.editor.getOption(106\n    /* suggest */\n    );\n    return suggestOptions.preview;\n  }\n\n  updateCache() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const state = this.suggestionInlineCompletionSource.state;\n\n      if (!state || !state.selectedItem) {\n        return;\n      }\n\n      const info = {\n        text: state.selectedItem.normalizedInlineCompletion.text,\n        range: state.selectedItem.normalizedInlineCompletion.range,\n        isSnippetText: state.selectedItem.isSnippetText,\n        completionKind: state.selectedItem.completionItemKind\n      };\n      const position = this.editor.getPosition();\n      const promise = createCancelablePromise(token => __awaiter(this, void 0, void 0, function* () {\n        let result;\n\n        try {\n          result = yield provideInlineCompletions(position, this.editor.getModel(), {\n            triggerKind: InlineCompletionTriggerKind.Automatic,\n            selectedSuggestionInfo: info\n          }, token);\n        } catch (e) {\n          onUnexpectedError(e);\n          return;\n        }\n\n        if (token.isCancellationRequested) {\n          return;\n        }\n\n        this.cache.setValue(this.editor, result, InlineCompletionTriggerKind.Automatic);\n        this.onDidChangeEmitter.fire();\n      }));\n      const operation = new UpdateOperation(promise, InlineCompletionTriggerKind.Automatic);\n      this.updateOperation.value = operation;\n      yield promise;\n\n      if (this.updateOperation.value === operation) {\n        this.updateOperation.clear();\n      }\n    });\n  }\n\n  get ghostText() {\n    var _a, _b, _c;\n\n    const isSuggestionPreviewEnabled = this.isSuggestionPreviewEnabled();\n    const augmentedCompletion = minimizeInlineCompletion(this.editor.getModel(), (_b = (_a = this.cache.value) === null || _a === void 0 ? void 0 : _a.completions[0]) === null || _b === void 0 ? void 0 : _b.toLiveInlineCompletion());\n    const suggestWidgetState = this.suggestionInlineCompletionSource.state;\n    const suggestInlineCompletion = minimizeInlineCompletion(this.editor.getModel(), (_c = suggestWidgetState === null || suggestWidgetState === void 0 ? void 0 : suggestWidgetState.selectedItem) === null || _c === void 0 ? void 0 : _c.normalizedInlineCompletion);\n    const isAugmentedCompletionValid = augmentedCompletion && suggestInlineCompletion && augmentedCompletion.text.startsWith(suggestInlineCompletion.text) && augmentedCompletion.range.equalsRange(suggestInlineCompletion.range);\n\n    if (!isSuggestionPreviewEnabled && !isAugmentedCompletionValid) {\n      return undefined;\n    } // If the augmented completion is not valid and there is no suggest inline completion, we still show the augmented completion.\n\n\n    const finalCompletion = isAugmentedCompletionValid ? augmentedCompletion : suggestInlineCompletion || augmentedCompletion;\n    const inlineCompletionPreviewLength = isAugmentedCompletionValid ? finalCompletion.text.length - suggestInlineCompletion.text.length : 0;\n    const newGhostText = this.toGhostText(finalCompletion, inlineCompletionPreviewLength);\n    return newGhostText;\n  }\n\n  toGhostText(completion, inlineCompletionPreviewLength) {\n    const mode = this.editor.getOptions().get(106\n    /* suggest */\n    ).previewMode;\n    return completion ? inlineCompletionToGhostText(completion, this.editor.getModel(), mode, this.editor.getPosition(), inlineCompletionPreviewLength) || // Show an invisible ghost text to reserve space\n    new GhostText(completion.range.endLineNumber, [], this.minReservedLineCount) : undefined;\n  }\n\n}\n\nfunction sum(arr) {\n  return arr.reduce((a, b) => a + b, 0);\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/contrib/inlineCompletions/browser/suggestWidgetPreviewModel.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","createCancelablePromise","RunOnceScheduler","onUnexpectedError","MutableDisposable","toDisposable","InlineCompletionTriggerKind","BaseGhostTextWidgetModel","GhostText","minimizeInlineCompletion","provideInlineCompletions","UpdateOperation","inlineCompletionToGhostText","SuggestWidgetInlineCompletionProvider","SuggestWidgetPreviewModel","constructor","editor","cache","suggestionInlineCompletionSource","_register","_a","_b","completions","toLiveInlineCompletion","updateOperation","updateCacheSoon","updateCache","minReservedLineCount","onDidChange","schedule","suggestWidgetState","state","newGhostText","ghostText","Math","max","sum","parts","map","p","lines","length","forceRenderingAbove","stopForceRenderingAbove","onDidChangeEmitter","fire","onDidChangeCursorPosition","isActive","undefined","isSuggestionPreviewEnabled","suggestOptions","getOption","preview","selectedItem","info","text","normalizedInlineCompletion","range","isSnippetText","completionKind","completionItemKind","position","getPosition","promise","token","getModel","triggerKind","Automatic","selectedSuggestionInfo","isCancellationRequested","setValue","operation","clear","_c","augmentedCompletion","suggestInlineCompletion","isAugmentedCompletionValid","startsWith","equalsRange","finalCompletion","inlineCompletionPreviewLength","toGhostText","completion","mode","getOptions","get","previewMode","endLineNumber","arr","reduce","a","b"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { createCancelablePromise, RunOnceScheduler } from '../../../../base/common/async.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { MutableDisposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { InlineCompletionTriggerKind } from '../../../common/languages.js';\nimport { BaseGhostTextWidgetModel, GhostText } from './ghostText.js';\nimport { minimizeInlineCompletion, provideInlineCompletions, UpdateOperation } from './inlineCompletionsModel.js';\nimport { inlineCompletionToGhostText } from './inlineCompletionToGhostText.js';\nimport { SuggestWidgetInlineCompletionProvider } from './suggestWidgetInlineCompletionProvider.js';\nexport class SuggestWidgetPreviewModel extends BaseGhostTextWidgetModel {\n    constructor(editor, cache) {\n        super(editor);\n        this.cache = cache;\n        this.suggestionInlineCompletionSource = this._register(new SuggestWidgetInlineCompletionProvider(this.editor, \n        // Use the first cache item (if any) as preselection.\n        () => { var _a, _b; return (_b = (_a = this.cache.value) === null || _a === void 0 ? void 0 : _a.completions[0]) === null || _b === void 0 ? void 0 : _b.toLiveInlineCompletion(); }));\n        this.updateOperation = this._register(new MutableDisposable());\n        this.updateCacheSoon = this._register(new RunOnceScheduler(() => this.updateCache(), 50));\n        this.minReservedLineCount = 0;\n        this._register(this.suggestionInlineCompletionSource.onDidChange(() => {\n            this.updateCacheSoon.schedule();\n            const suggestWidgetState = this.suggestionInlineCompletionSource.state;\n            if (!suggestWidgetState) {\n                this.minReservedLineCount = 0;\n            }\n            const newGhostText = this.ghostText;\n            if (newGhostText) {\n                this.minReservedLineCount = Math.max(this.minReservedLineCount, sum(newGhostText.parts.map(p => p.lines.length - 1)));\n            }\n            if (this.minReservedLineCount >= 1) {\n                this.suggestionInlineCompletionSource.forceRenderingAbove();\n            }\n            else {\n                this.suggestionInlineCompletionSource.stopForceRenderingAbove();\n            }\n            this.onDidChangeEmitter.fire();\n        }));\n        this._register(this.cache.onDidChange(() => {\n            this.onDidChangeEmitter.fire();\n        }));\n        this._register(this.editor.onDidChangeCursorPosition((e) => {\n            this.minReservedLineCount = 0;\n            this.updateCacheSoon.schedule();\n            this.onDidChangeEmitter.fire();\n        }));\n        this._register(toDisposable(() => this.suggestionInlineCompletionSource.stopForceRenderingAbove()));\n    }\n    get isActive() {\n        return this.suggestionInlineCompletionSource.state !== undefined;\n    }\n    isSuggestionPreviewEnabled() {\n        const suggestOptions = this.editor.getOption(106 /* suggest */);\n        return suggestOptions.preview;\n    }\n    updateCache() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const state = this.suggestionInlineCompletionSource.state;\n            if (!state || !state.selectedItem) {\n                return;\n            }\n            const info = {\n                text: state.selectedItem.normalizedInlineCompletion.text,\n                range: state.selectedItem.normalizedInlineCompletion.range,\n                isSnippetText: state.selectedItem.isSnippetText,\n                completionKind: state.selectedItem.completionItemKind,\n            };\n            const position = this.editor.getPosition();\n            const promise = createCancelablePromise((token) => __awaiter(this, void 0, void 0, function* () {\n                let result;\n                try {\n                    result = yield provideInlineCompletions(position, this.editor.getModel(), { triggerKind: InlineCompletionTriggerKind.Automatic, selectedSuggestionInfo: info }, token);\n                }\n                catch (e) {\n                    onUnexpectedError(e);\n                    return;\n                }\n                if (token.isCancellationRequested) {\n                    return;\n                }\n                this.cache.setValue(this.editor, result, InlineCompletionTriggerKind.Automatic);\n                this.onDidChangeEmitter.fire();\n            }));\n            const operation = new UpdateOperation(promise, InlineCompletionTriggerKind.Automatic);\n            this.updateOperation.value = operation;\n            yield promise;\n            if (this.updateOperation.value === operation) {\n                this.updateOperation.clear();\n            }\n        });\n    }\n    get ghostText() {\n        var _a, _b, _c;\n        const isSuggestionPreviewEnabled = this.isSuggestionPreviewEnabled();\n        const augmentedCompletion = minimizeInlineCompletion(this.editor.getModel(), (_b = (_a = this.cache.value) === null || _a === void 0 ? void 0 : _a.completions[0]) === null || _b === void 0 ? void 0 : _b.toLiveInlineCompletion());\n        const suggestWidgetState = this.suggestionInlineCompletionSource.state;\n        const suggestInlineCompletion = minimizeInlineCompletion(this.editor.getModel(), (_c = suggestWidgetState === null || suggestWidgetState === void 0 ? void 0 : suggestWidgetState.selectedItem) === null || _c === void 0 ? void 0 : _c.normalizedInlineCompletion);\n        const isAugmentedCompletionValid = augmentedCompletion\n            && suggestInlineCompletion\n            && augmentedCompletion.text.startsWith(suggestInlineCompletion.text)\n            && augmentedCompletion.range.equalsRange(suggestInlineCompletion.range);\n        if (!isSuggestionPreviewEnabled && !isAugmentedCompletionValid) {\n            return undefined;\n        }\n        // If the augmented completion is not valid and there is no suggest inline completion, we still show the augmented completion.\n        const finalCompletion = isAugmentedCompletionValid ? augmentedCompletion : (suggestInlineCompletion || augmentedCompletion);\n        const inlineCompletionPreviewLength = isAugmentedCompletionValid ? finalCompletion.text.length - suggestInlineCompletion.text.length : 0;\n        const newGhostText = this.toGhostText(finalCompletion, inlineCompletionPreviewLength);\n        return newGhostText;\n    }\n    toGhostText(completion, inlineCompletionPreviewLength) {\n        const mode = this.editor.getOptions().get(106 /* suggest */).previewMode;\n        return completion\n            ? (inlineCompletionToGhostText(completion, this.editor.getModel(), mode, this.editor.getPosition(), inlineCompletionPreviewLength) ||\n                // Show an invisible ghost text to reserve space\n                new GhostText(completion.range.endLineNumber, [], this.minReservedLineCount))\n            : undefined;\n    }\n}\nfunction sum(arr) {\n    return arr.reduce((a, b) => a + b, 0);\n}\n"]},"metadata":{},"sourceType":"module"}