{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../nls.js';\nimport { RawContextKey } from '../../platform/contextkey/common/contextkey.js';\nexport var EditorContextKeys;\n\n(function (EditorContextKeys) {\n  EditorContextKeys.editorSimpleInput = new RawContextKey('editorSimpleInput', false, true);\n  /**\n   * A context key that is set when the editor's text has focus (cursor is blinking).\n   * Is false when focus is in simple editor widgets (repl input, scm commit input).\n   */\n\n  EditorContextKeys.editorTextFocus = new RawContextKey('editorTextFocus', false, nls.localize('editorTextFocus', \"Whether the editor text has focus (cursor is blinking)\"));\n  /**\n   * A context key that is set when the editor's text or an editor's widget has focus.\n   */\n\n  EditorContextKeys.focus = new RawContextKey('editorFocus', false, nls.localize('editorFocus', \"Whether the editor or an editor widget has focus (e.g. focus is in the find widget)\"));\n  /**\n   * A context key that is set when any editor input has focus (regular editor, repl input...).\n   */\n\n  EditorContextKeys.textInputFocus = new RawContextKey('textInputFocus', false, nls.localize('textInputFocus', \"Whether an editor or a rich text input has focus (cursor is blinking)\"));\n  EditorContextKeys.readOnly = new RawContextKey('editorReadonly', false, nls.localize('editorReadonly', \"Whether the editor is read only\"));\n  EditorContextKeys.inDiffEditor = new RawContextKey('inDiffEditor', false, nls.localize('inDiffEditor', \"Whether the context is a diff editor\"));\n  EditorContextKeys.columnSelection = new RawContextKey('editorColumnSelection', false, nls.localize('editorColumnSelection', \"Whether `editor.columnSelection` is enabled\"));\n  EditorContextKeys.writable = EditorContextKeys.readOnly.toNegated();\n  EditorContextKeys.hasNonEmptySelection = new RawContextKey('editorHasSelection', false, nls.localize('editorHasSelection', \"Whether the editor has text selected\"));\n  EditorContextKeys.hasOnlyEmptySelection = EditorContextKeys.hasNonEmptySelection.toNegated();\n  EditorContextKeys.hasMultipleSelections = new RawContextKey('editorHasMultipleSelections', false, nls.localize('editorHasMultipleSelections', \"Whether the editor has multiple selections\"));\n  EditorContextKeys.hasSingleSelection = EditorContextKeys.hasMultipleSelections.toNegated();\n  EditorContextKeys.tabMovesFocus = new RawContextKey('editorTabMovesFocus', false, nls.localize('editorTabMovesFocus', \"Whether `Tab` will move focus out of the editor\"));\n  EditorContextKeys.tabDoesNotMoveFocus = EditorContextKeys.tabMovesFocus.toNegated();\n  EditorContextKeys.isInWalkThroughSnippet = new RawContextKey('isInEmbeddedEditor', false, true);\n  EditorContextKeys.canUndo = new RawContextKey('canUndo', false, true);\n  EditorContextKeys.canRedo = new RawContextKey('canRedo', false, true);\n  EditorContextKeys.hoverVisible = new RawContextKey('editorHoverVisible', false, nls.localize('editorHoverVisible', \"Whether the editor hover is visible\"));\n  /**\n   * A context key that is set when an editor is part of a larger editor, like notebooks or\n   * (future) a diff editor\n   */\n\n  EditorContextKeys.inCompositeEditor = new RawContextKey('inCompositeEditor', undefined, nls.localize('inCompositeEditor', \"Whether the editor is part of a larger editor (e.g. notebooks)\"));\n  EditorContextKeys.notInCompositeEditor = EditorContextKeys.inCompositeEditor.toNegated(); // -- mode context keys\n\n  EditorContextKeys.languageId = new RawContextKey('editorLangId', '', nls.localize('editorLangId', \"The language identifier of the editor\"));\n  EditorContextKeys.hasCompletionItemProvider = new RawContextKey('editorHasCompletionItemProvider', false, nls.localize('editorHasCompletionItemProvider', \"Whether the editor has a completion item provider\"));\n  EditorContextKeys.hasCodeActionsProvider = new RawContextKey('editorHasCodeActionsProvider', false, nls.localize('editorHasCodeActionsProvider', \"Whether the editor has a code actions provider\"));\n  EditorContextKeys.hasCodeLensProvider = new RawContextKey('editorHasCodeLensProvider', false, nls.localize('editorHasCodeLensProvider', \"Whether the editor has a code lens provider\"));\n  EditorContextKeys.hasDefinitionProvider = new RawContextKey('editorHasDefinitionProvider', false, nls.localize('editorHasDefinitionProvider', \"Whether the editor has a definition provider\"));\n  EditorContextKeys.hasDeclarationProvider = new RawContextKey('editorHasDeclarationProvider', false, nls.localize('editorHasDeclarationProvider', \"Whether the editor has a declaration provider\"));\n  EditorContextKeys.hasImplementationProvider = new RawContextKey('editorHasImplementationProvider', false, nls.localize('editorHasImplementationProvider', \"Whether the editor has an implementation provider\"));\n  EditorContextKeys.hasTypeDefinitionProvider = new RawContextKey('editorHasTypeDefinitionProvider', false, nls.localize('editorHasTypeDefinitionProvider', \"Whether the editor has a type definition provider\"));\n  EditorContextKeys.hasHoverProvider = new RawContextKey('editorHasHoverProvider', false, nls.localize('editorHasHoverProvider', \"Whether the editor has a hover provider\"));\n  EditorContextKeys.hasDocumentHighlightProvider = new RawContextKey('editorHasDocumentHighlightProvider', false, nls.localize('editorHasDocumentHighlightProvider', \"Whether the editor has a document highlight provider\"));\n  EditorContextKeys.hasDocumentSymbolProvider = new RawContextKey('editorHasDocumentSymbolProvider', false, nls.localize('editorHasDocumentSymbolProvider', \"Whether the editor has a document symbol provider\"));\n  EditorContextKeys.hasReferenceProvider = new RawContextKey('editorHasReferenceProvider', false, nls.localize('editorHasReferenceProvider', \"Whether the editor has a reference provider\"));\n  EditorContextKeys.hasRenameProvider = new RawContextKey('editorHasRenameProvider', false, nls.localize('editorHasRenameProvider', \"Whether the editor has a rename provider\"));\n  EditorContextKeys.hasSignatureHelpProvider = new RawContextKey('editorHasSignatureHelpProvider', false, nls.localize('editorHasSignatureHelpProvider', \"Whether the editor has a signature help provider\"));\n  EditorContextKeys.hasInlayHintsProvider = new RawContextKey('editorHasInlayHintsProvider', false, nls.localize('editorHasInlayHintsProvider', \"Whether the editor has an inline hints provider\")); // -- mode context keys: formatting\n\n  EditorContextKeys.hasDocumentFormattingProvider = new RawContextKey('editorHasDocumentFormattingProvider', false, nls.localize('editorHasDocumentFormattingProvider', \"Whether the editor has a document formatting provider\"));\n  EditorContextKeys.hasDocumentSelectionFormattingProvider = new RawContextKey('editorHasDocumentSelectionFormattingProvider', false, nls.localize('editorHasDocumentSelectionFormattingProvider', \"Whether the editor has a document selection formatting provider\"));\n  EditorContextKeys.hasMultipleDocumentFormattingProvider = new RawContextKey('editorHasMultipleDocumentFormattingProvider', false, nls.localize('editorHasMultipleDocumentFormattingProvider', \"Whether the editor has multiple document formatting providers\"));\n  EditorContextKeys.hasMultipleDocumentSelectionFormattingProvider = new RawContextKey('editorHasMultipleDocumentSelectionFormattingProvider', false, nls.localize('editorHasMultipleDocumentSelectionFormattingProvider', \"Whether the editor has multiple document selection formatting providers\"));\n})(EditorContextKeys || (EditorContextKeys = {}));","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/common/editorContextKeys.js"],"names":["nls","RawContextKey","EditorContextKeys","editorSimpleInput","editorTextFocus","localize","focus","textInputFocus","readOnly","inDiffEditor","columnSelection","writable","toNegated","hasNonEmptySelection","hasOnlyEmptySelection","hasMultipleSelections","hasSingleSelection","tabMovesFocus","tabDoesNotMoveFocus","isInWalkThroughSnippet","canUndo","canRedo","hoverVisible","inCompositeEditor","undefined","notInCompositeEditor","languageId","hasCompletionItemProvider","hasCodeActionsProvider","hasCodeLensProvider","hasDefinitionProvider","hasDeclarationProvider","hasImplementationProvider","hasTypeDefinitionProvider","hasHoverProvider","hasDocumentHighlightProvider","hasDocumentSymbolProvider","hasReferenceProvider","hasRenameProvider","hasSignatureHelpProvider","hasInlayHintsProvider","hasDocumentFormattingProvider","hasDocumentSelectionFormattingProvider","hasMultipleDocumentFormattingProvider","hasMultipleDocumentSelectionFormattingProvider"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../nls.js';\nimport { RawContextKey } from '../../platform/contextkey/common/contextkey.js';\nexport var EditorContextKeys;\n(function (EditorContextKeys) {\n    EditorContextKeys.editorSimpleInput = new RawContextKey('editorSimpleInput', false, true);\n    /**\n     * A context key that is set when the editor's text has focus (cursor is blinking).\n     * Is false when focus is in simple editor widgets (repl input, scm commit input).\n     */\n    EditorContextKeys.editorTextFocus = new RawContextKey('editorTextFocus', false, nls.localize('editorTextFocus', \"Whether the editor text has focus (cursor is blinking)\"));\n    /**\n     * A context key that is set when the editor's text or an editor's widget has focus.\n     */\n    EditorContextKeys.focus = new RawContextKey('editorFocus', false, nls.localize('editorFocus', \"Whether the editor or an editor widget has focus (e.g. focus is in the find widget)\"));\n    /**\n     * A context key that is set when any editor input has focus (regular editor, repl input...).\n     */\n    EditorContextKeys.textInputFocus = new RawContextKey('textInputFocus', false, nls.localize('textInputFocus', \"Whether an editor or a rich text input has focus (cursor is blinking)\"));\n    EditorContextKeys.readOnly = new RawContextKey('editorReadonly', false, nls.localize('editorReadonly', \"Whether the editor is read only\"));\n    EditorContextKeys.inDiffEditor = new RawContextKey('inDiffEditor', false, nls.localize('inDiffEditor', \"Whether the context is a diff editor\"));\n    EditorContextKeys.columnSelection = new RawContextKey('editorColumnSelection', false, nls.localize('editorColumnSelection', \"Whether `editor.columnSelection` is enabled\"));\n    EditorContextKeys.writable = EditorContextKeys.readOnly.toNegated();\n    EditorContextKeys.hasNonEmptySelection = new RawContextKey('editorHasSelection', false, nls.localize('editorHasSelection', \"Whether the editor has text selected\"));\n    EditorContextKeys.hasOnlyEmptySelection = EditorContextKeys.hasNonEmptySelection.toNegated();\n    EditorContextKeys.hasMultipleSelections = new RawContextKey('editorHasMultipleSelections', false, nls.localize('editorHasMultipleSelections', \"Whether the editor has multiple selections\"));\n    EditorContextKeys.hasSingleSelection = EditorContextKeys.hasMultipleSelections.toNegated();\n    EditorContextKeys.tabMovesFocus = new RawContextKey('editorTabMovesFocus', false, nls.localize('editorTabMovesFocus', \"Whether `Tab` will move focus out of the editor\"));\n    EditorContextKeys.tabDoesNotMoveFocus = EditorContextKeys.tabMovesFocus.toNegated();\n    EditorContextKeys.isInWalkThroughSnippet = new RawContextKey('isInEmbeddedEditor', false, true);\n    EditorContextKeys.canUndo = new RawContextKey('canUndo', false, true);\n    EditorContextKeys.canRedo = new RawContextKey('canRedo', false, true);\n    EditorContextKeys.hoverVisible = new RawContextKey('editorHoverVisible', false, nls.localize('editorHoverVisible', \"Whether the editor hover is visible\"));\n    /**\n     * A context key that is set when an editor is part of a larger editor, like notebooks or\n     * (future) a diff editor\n     */\n    EditorContextKeys.inCompositeEditor = new RawContextKey('inCompositeEditor', undefined, nls.localize('inCompositeEditor', \"Whether the editor is part of a larger editor (e.g. notebooks)\"));\n    EditorContextKeys.notInCompositeEditor = EditorContextKeys.inCompositeEditor.toNegated();\n    // -- mode context keys\n    EditorContextKeys.languageId = new RawContextKey('editorLangId', '', nls.localize('editorLangId', \"The language identifier of the editor\"));\n    EditorContextKeys.hasCompletionItemProvider = new RawContextKey('editorHasCompletionItemProvider', false, nls.localize('editorHasCompletionItemProvider', \"Whether the editor has a completion item provider\"));\n    EditorContextKeys.hasCodeActionsProvider = new RawContextKey('editorHasCodeActionsProvider', false, nls.localize('editorHasCodeActionsProvider', \"Whether the editor has a code actions provider\"));\n    EditorContextKeys.hasCodeLensProvider = new RawContextKey('editorHasCodeLensProvider', false, nls.localize('editorHasCodeLensProvider', \"Whether the editor has a code lens provider\"));\n    EditorContextKeys.hasDefinitionProvider = new RawContextKey('editorHasDefinitionProvider', false, nls.localize('editorHasDefinitionProvider', \"Whether the editor has a definition provider\"));\n    EditorContextKeys.hasDeclarationProvider = new RawContextKey('editorHasDeclarationProvider', false, nls.localize('editorHasDeclarationProvider', \"Whether the editor has a declaration provider\"));\n    EditorContextKeys.hasImplementationProvider = new RawContextKey('editorHasImplementationProvider', false, nls.localize('editorHasImplementationProvider', \"Whether the editor has an implementation provider\"));\n    EditorContextKeys.hasTypeDefinitionProvider = new RawContextKey('editorHasTypeDefinitionProvider', false, nls.localize('editorHasTypeDefinitionProvider', \"Whether the editor has a type definition provider\"));\n    EditorContextKeys.hasHoverProvider = new RawContextKey('editorHasHoverProvider', false, nls.localize('editorHasHoverProvider', \"Whether the editor has a hover provider\"));\n    EditorContextKeys.hasDocumentHighlightProvider = new RawContextKey('editorHasDocumentHighlightProvider', false, nls.localize('editorHasDocumentHighlightProvider', \"Whether the editor has a document highlight provider\"));\n    EditorContextKeys.hasDocumentSymbolProvider = new RawContextKey('editorHasDocumentSymbolProvider', false, nls.localize('editorHasDocumentSymbolProvider', \"Whether the editor has a document symbol provider\"));\n    EditorContextKeys.hasReferenceProvider = new RawContextKey('editorHasReferenceProvider', false, nls.localize('editorHasReferenceProvider', \"Whether the editor has a reference provider\"));\n    EditorContextKeys.hasRenameProvider = new RawContextKey('editorHasRenameProvider', false, nls.localize('editorHasRenameProvider', \"Whether the editor has a rename provider\"));\n    EditorContextKeys.hasSignatureHelpProvider = new RawContextKey('editorHasSignatureHelpProvider', false, nls.localize('editorHasSignatureHelpProvider', \"Whether the editor has a signature help provider\"));\n    EditorContextKeys.hasInlayHintsProvider = new RawContextKey('editorHasInlayHintsProvider', false, nls.localize('editorHasInlayHintsProvider', \"Whether the editor has an inline hints provider\"));\n    // -- mode context keys: formatting\n    EditorContextKeys.hasDocumentFormattingProvider = new RawContextKey('editorHasDocumentFormattingProvider', false, nls.localize('editorHasDocumentFormattingProvider', \"Whether the editor has a document formatting provider\"));\n    EditorContextKeys.hasDocumentSelectionFormattingProvider = new RawContextKey('editorHasDocumentSelectionFormattingProvider', false, nls.localize('editorHasDocumentSelectionFormattingProvider', \"Whether the editor has a document selection formatting provider\"));\n    EditorContextKeys.hasMultipleDocumentFormattingProvider = new RawContextKey('editorHasMultipleDocumentFormattingProvider', false, nls.localize('editorHasMultipleDocumentFormattingProvider', \"Whether the editor has multiple document formatting providers\"));\n    EditorContextKeys.hasMultipleDocumentSelectionFormattingProvider = new RawContextKey('editorHasMultipleDocumentSelectionFormattingProvider', false, nls.localize('editorHasMultipleDocumentSelectionFormattingProvider', \"Whether the editor has multiple document selection formatting providers\"));\n})(EditorContextKeys || (EditorContextKeys = {}));\n"]},"metadata":{},"sourceType":"module"}