{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nvar _a;\n\nimport './media/diffEditor.css';\nimport * as nls from '../../../nls.js';\nimport * as dom from '../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\nimport { Sash } from '../../../base/browser/ui/sash/sash.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { applyFontInfo } from '../config/domFontInfo.js';\nimport { StableEditorScrollState } from '../stableEditorScroll.js';\nimport { ICodeEditorService } from '../services/codeEditorService.js';\nimport { CodeEditorWidget } from './codeEditorWidget.js';\nimport { DiffReview } from './diffReview.js';\nimport { EditorOptions, EditorFontLigatures, stringSet as validateStringSetOption, boolean as validateBooleanOption, clampedInt } from '../../common/config/editorOptions.js';\nimport { Range } from '../../common/core/range.js';\nimport { createStringBuilder } from '../../common/core/stringBuilder.js';\nimport * as editorCommon from '../../common/editorCommon.js';\nimport { ModelDecorationOptions } from '../../common/model/textModel.js';\nimport { IEditorWorkerService } from '../../common/services/editorWorker.js';\nimport { OverviewRulerZone } from '../../common/viewModel/overviewZoneManager.js';\nimport { LineDecoration } from '../../common/viewLayout/lineDecorations.js';\nimport { RenderLineInput, renderViewLine } from '../../common/viewLayout/viewLineRenderer.js';\nimport { InlineDecoration, ViewLineRenderingData } from '../../common/viewModel/viewModel.js';\nimport { IContextKeyService } from '../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../../platform/instantiation/common/instantiation.js';\nimport { ServiceCollection } from '../../../platform/instantiation/common/serviceCollection.js';\nimport { INotificationService } from '../../../platform/notification/common/notification.js';\nimport { defaultInsertColor, defaultRemoveColor, diffBorder, diffInserted, diffInsertedOutline, diffRemoved, diffRemovedOutline, scrollbarShadow, scrollbarSliderBackground, scrollbarSliderHoverBackground, scrollbarSliderActiveBackground, diffDiagonalFill } from '../../../platform/theme/common/colorRegistry.js';\nimport { IThemeService, getThemeTypeSelector, registerThemingParticipant, ThemeIcon } from '../../../platform/theme/common/themeService.js';\nimport { IContextMenuService } from '../../../platform/contextview/browser/contextView.js';\nimport { InlineDiffMargin } from './inlineDiffMargin.js';\nimport { IClipboardService } from '../../../platform/clipboard/common/clipboardService.js';\nimport { EditorExtensionsRegistry } from '../editorExtensions.js';\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { IEditorProgressService } from '../../../platform/progress/common/progress.js';\nimport { ElementSizeObserver } from '../config/elementSizeObserver.js';\nimport { Codicon } from '../../../base/common/codicons.js';\nimport { MOUSE_CURSOR_TEXT_CSS_CLASS_NAME } from '../../../base/browser/ui/mouseCursor/mouseCursor.js';\nimport { registerIcon } from '../../../platform/theme/common/iconRegistry.js';\n\nclass VisualEditorState {\n  constructor(_contextMenuService, _clipboardService) {\n    this._contextMenuService = _contextMenuService;\n    this._clipboardService = _clipboardService;\n    this._zones = [];\n    this._inlineDiffMargins = [];\n    this._zonesMap = {};\n    this._decorations = [];\n  }\n\n  getForeignViewZones(allViewZones) {\n    return allViewZones.filter(z => !this._zonesMap[String(z.id)]);\n  }\n\n  clean(editor) {\n    // (1) View zones\n    if (this._zones.length > 0) {\n      editor.changeViewZones(viewChangeAccessor => {\n        for (const zoneId of this._zones) {\n          viewChangeAccessor.removeZone(zoneId);\n        }\n      });\n    }\n\n    this._zones = [];\n    this._zonesMap = {}; // (2) Model decorations\n\n    this._decorations = editor.deltaDecorations(this._decorations, []);\n  }\n\n  apply(editor, overviewRuler, newDecorations, restoreScrollState) {\n    const scrollState = restoreScrollState ? StableEditorScrollState.capture(editor) : null; // view zones\n\n    editor.changeViewZones(viewChangeAccessor => {\n      var _a;\n\n      for (const zoneId of this._zones) {\n        viewChangeAccessor.removeZone(zoneId);\n      }\n\n      for (const inlineDiffMargin of this._inlineDiffMargins) {\n        inlineDiffMargin.dispose();\n      }\n\n      this._zones = [];\n      this._zonesMap = {};\n      this._inlineDiffMargins = [];\n\n      for (let i = 0, length = newDecorations.zones.length; i < length; i++) {\n        const viewZone = newDecorations.zones[i];\n        viewZone.suppressMouseDown = true;\n        const zoneId = viewChangeAccessor.addZone(viewZone);\n\n        this._zones.push(zoneId);\n\n        this._zonesMap[String(zoneId)] = true;\n\n        if (newDecorations.zones[i].diff && viewZone.marginDomNode) {\n          viewZone.suppressMouseDown = false;\n\n          if (((_a = newDecorations.zones[i].diff) === null || _a === void 0 ? void 0 : _a.originalModel.getValueLength()) !== 0) {\n            // do not contribute diff margin actions for newly created files\n            this._inlineDiffMargins.push(new InlineDiffMargin(zoneId, viewZone.marginDomNode, editor, newDecorations.zones[i].diff, this._contextMenuService, this._clipboardService));\n          }\n        }\n      }\n    });\n\n    if (scrollState) {\n      scrollState.restore(editor);\n    } // decorations\n\n\n    this._decorations = editor.deltaDecorations(this._decorations, newDecorations.decorations); // overview ruler\n\n    if (overviewRuler) {\n      overviewRuler.setZones(newDecorations.overviewZones);\n    }\n  }\n\n}\n\nlet DIFF_EDITOR_ID = 0;\nconst diffInsertIcon = registerIcon('diff-insert', Codicon.add, nls.localize('diffInsertIcon', 'Line decoration for inserts in the diff editor.'));\nconst diffRemoveIcon = registerIcon('diff-remove', Codicon.remove, nls.localize('diffRemoveIcon', 'Line decoration for removals in the diff editor.'));\nconst ttPolicy = (_a = window.trustedTypes) === null || _a === void 0 ? void 0 : _a.createPolicy('diffEditorWidget', {\n  createHTML: value => value\n});\nlet DiffEditorWidget = class DiffEditorWidget extends Disposable {\n  constructor(domElement, options, codeEditorWidgetOptions, clipboardService, editorWorkerService, contextKeyService, instantiationService, codeEditorService, themeService, notificationService, contextMenuService, _editorProgressService) {\n    super();\n    this._editorProgressService = _editorProgressService;\n    this._onDidDispose = this._register(new Emitter());\n    this.onDidDispose = this._onDidDispose.event;\n    this._onDidUpdateDiff = this._register(new Emitter());\n    this.onDidUpdateDiff = this._onDidUpdateDiff.event;\n    this._onDidContentSizeChange = this._register(new Emitter());\n    this._lastOriginalWarning = null;\n    this._lastModifiedWarning = null;\n    this._editorWorkerService = editorWorkerService;\n    this._codeEditorService = codeEditorService;\n    this._contextKeyService = this._register(contextKeyService.createScoped(domElement));\n    this._instantiationService = instantiationService.createChild(new ServiceCollection([IContextKeyService, this._contextKeyService]));\n\n    this._contextKeyService.createKey('isInDiffEditor', true);\n\n    this._themeService = themeService;\n    this._notificationService = notificationService;\n    this._id = ++DIFF_EDITOR_ID;\n    this._state = 0\n    /* Idle */\n    ;\n    this._updatingDiffProgress = null;\n    this._domElement = domElement;\n    options = options || {};\n    this._options = validateDiffEditorOptions(options, {\n      enableSplitViewResizing: true,\n      renderSideBySide: true,\n      maxComputationTime: 5000,\n      maxFileSize: 50,\n      ignoreTrimWhitespace: true,\n      renderIndicators: true,\n      originalEditable: false,\n      diffCodeLens: false,\n      renderOverviewRuler: true,\n      diffWordWrap: 'inherit'\n    });\n\n    if (typeof options.isInEmbeddedEditor !== 'undefined') {\n      this._contextKeyService.createKey('isInEmbeddedDiffEditor', options.isInEmbeddedEditor);\n    } else {\n      this._contextKeyService.createKey('isInEmbeddedDiffEditor', false);\n    }\n\n    this._updateDecorationsRunner = this._register(new RunOnceScheduler(() => this._updateDecorations(), 0));\n    this._containerDomElement = document.createElement('div');\n    this._containerDomElement.className = DiffEditorWidget._getClassName(this._themeService.getColorTheme(), this._options.renderSideBySide);\n    this._containerDomElement.style.position = 'relative';\n    this._containerDomElement.style.height = '100%';\n\n    this._domElement.appendChild(this._containerDomElement);\n\n    this._overviewViewportDomElement = createFastDomNode(document.createElement('div'));\n\n    this._overviewViewportDomElement.setClassName('diffViewport');\n\n    this._overviewViewportDomElement.setPosition('absolute');\n\n    this._overviewDomElement = document.createElement('div');\n    this._overviewDomElement.className = 'diffOverview';\n    this._overviewDomElement.style.position = 'absolute';\n\n    this._overviewDomElement.appendChild(this._overviewViewportDomElement.domNode);\n\n    this._register(dom.addStandardDisposableListener(this._overviewDomElement, 'mousedown', e => {\n      this._modifiedEditor.delegateVerticalScrollbarMouseDown(e);\n    }));\n\n    if (this._options.renderOverviewRuler) {\n      this._containerDomElement.appendChild(this._overviewDomElement);\n    } // Create left side\n\n\n    this._originalDomNode = document.createElement('div');\n    this._originalDomNode.className = 'editor original';\n    this._originalDomNode.style.position = 'absolute';\n    this._originalDomNode.style.height = '100%';\n\n    this._containerDomElement.appendChild(this._originalDomNode); // Create right side\n\n\n    this._modifiedDomNode = document.createElement('div');\n    this._modifiedDomNode.className = 'editor modified';\n    this._modifiedDomNode.style.position = 'absolute';\n    this._modifiedDomNode.style.height = '100%';\n\n    this._containerDomElement.appendChild(this._modifiedDomNode);\n\n    this._beginUpdateDecorationsTimeout = -1;\n    this._currentlyChangingViewZones = false;\n    this._diffComputationToken = 0;\n    this._originalEditorState = new VisualEditorState(contextMenuService, clipboardService);\n    this._modifiedEditorState = new VisualEditorState(contextMenuService, clipboardService);\n    this._isVisible = true;\n    this._isHandlingScrollEvent = false;\n    this._elementSizeObserver = this._register(new ElementSizeObserver(this._containerDomElement, options.dimension));\n\n    this._register(this._elementSizeObserver.onDidChange(() => this._onDidContainerSizeChanged()));\n\n    if (options.automaticLayout) {\n      this._elementSizeObserver.startObserving();\n    }\n\n    this._diffComputationResult = null;\n    this._originalEditor = this._createLeftHandSideEditor(options, codeEditorWidgetOptions.originalEditor || {});\n    this._modifiedEditor = this._createRightHandSideEditor(options, codeEditorWidgetOptions.modifiedEditor || {});\n    this._originalOverviewRuler = null;\n    this._modifiedOverviewRuler = null;\n    this._reviewPane = instantiationService.createInstance(DiffReview, this);\n\n    this._containerDomElement.appendChild(this._reviewPane.domNode.domNode);\n\n    this._containerDomElement.appendChild(this._reviewPane.shadow.domNode);\n\n    this._containerDomElement.appendChild(this._reviewPane.actionBarContainer.domNode);\n\n    if (this._options.renderSideBySide) {\n      this._setStrategy(new DiffEditorWidgetSideBySide(this._createDataSource(), this._options.enableSplitViewResizing));\n    } else {\n      this._setStrategy(new DiffEditorWidgetInline(this._createDataSource(), this._options.enableSplitViewResizing));\n    }\n\n    this._register(themeService.onDidColorThemeChange(t => {\n      if (this._strategy && this._strategy.applyColors(t)) {\n        this._updateDecorationsRunner.schedule();\n      }\n\n      this._containerDomElement.className = DiffEditorWidget._getClassName(this._themeService.getColorTheme(), this._options.renderSideBySide);\n    }));\n\n    const contributions = EditorExtensionsRegistry.getDiffEditorContributions();\n\n    for (const desc of contributions) {\n      try {\n        this._register(instantiationService.createInstance(desc.ctor, this));\n      } catch (err) {\n        onUnexpectedError(err);\n      }\n    }\n\n    this._codeEditorService.addDiffEditor(this);\n  }\n\n  _setState(newState) {\n    if (this._state === newState) {\n      return;\n    }\n\n    this._state = newState;\n\n    if (this._updatingDiffProgress) {\n      this._updatingDiffProgress.done();\n\n      this._updatingDiffProgress = null;\n    }\n\n    if (this._state === 1\n    /* ComputingDiff */\n    ) {\n      this._updatingDiffProgress = this._editorProgressService.show(true, 1000);\n    }\n  }\n\n  diffReviewNext() {\n    this._reviewPane.next();\n  }\n\n  diffReviewPrev() {\n    this._reviewPane.prev();\n  }\n\n  static _getClassName(theme, renderSideBySide) {\n    let result = 'monaco-diff-editor monaco-editor-background ';\n\n    if (renderSideBySide) {\n      result += 'side-by-side ';\n    }\n\n    result += getThemeTypeSelector(theme.type);\n    return result;\n  }\n\n  _recreateOverviewRulers() {\n    if (!this._options.renderOverviewRuler) {\n      return;\n    }\n\n    if (this._originalOverviewRuler) {\n      this._overviewDomElement.removeChild(this._originalOverviewRuler.getDomNode());\n\n      this._originalOverviewRuler.dispose();\n    }\n\n    if (this._originalEditor.hasModel()) {\n      this._originalOverviewRuler = this._originalEditor.createOverviewRuler('original diffOverviewRuler');\n\n      this._overviewDomElement.appendChild(this._originalOverviewRuler.getDomNode());\n    }\n\n    if (this._modifiedOverviewRuler) {\n      this._overviewDomElement.removeChild(this._modifiedOverviewRuler.getDomNode());\n\n      this._modifiedOverviewRuler.dispose();\n    }\n\n    if (this._modifiedEditor.hasModel()) {\n      this._modifiedOverviewRuler = this._modifiedEditor.createOverviewRuler('modified diffOverviewRuler');\n\n      this._overviewDomElement.appendChild(this._modifiedOverviewRuler.getDomNode());\n    }\n\n    this._layoutOverviewRulers();\n  }\n\n  _createLeftHandSideEditor(options, codeEditorWidgetOptions) {\n    const editor = this._createInnerEditor(this._instantiationService, this._originalDomNode, this._adjustOptionsForLeftHandSide(options), codeEditorWidgetOptions);\n\n    this._register(editor.onDidScrollChange(e => {\n      if (this._isHandlingScrollEvent) {\n        return;\n      }\n\n      if (!e.scrollTopChanged && !e.scrollLeftChanged && !e.scrollHeightChanged) {\n        return;\n      }\n\n      this._isHandlingScrollEvent = true;\n\n      this._modifiedEditor.setScrollPosition({\n        scrollLeft: e.scrollLeft,\n        scrollTop: e.scrollTop\n      });\n\n      this._isHandlingScrollEvent = false;\n\n      this._layoutOverviewViewport();\n    }));\n\n    this._register(editor.onDidChangeViewZones(() => {\n      this._onViewZonesChanged();\n    }));\n\n    this._register(editor.onDidChangeConfiguration(e => {\n      if (!editor.getModel()) {\n        return;\n      }\n\n      if (e.hasChanged(44\n      /* fontInfo */\n      )) {\n        this._updateDecorationsRunner.schedule();\n      }\n\n      if (e.hasChanged(132\n      /* wrappingInfo */\n      )) {\n        this._updateDecorationsRunner.cancel();\n\n        this._updateDecorations();\n      }\n    }));\n\n    this._register(editor.onDidChangeHiddenAreas(() => {\n      this._updateDecorationsRunner.cancel();\n\n      this._updateDecorations();\n    }));\n\n    this._register(editor.onDidChangeModelContent(() => {\n      if (this._isVisible) {\n        this._beginUpdateDecorationsSoon();\n      }\n    }));\n\n    const isInDiffLeftEditorKey = this._contextKeyService.createKey('isInDiffLeftEditor', editor.hasWidgetFocus());\n\n    this._register(editor.onDidFocusEditorWidget(() => isInDiffLeftEditorKey.set(true)));\n\n    this._register(editor.onDidBlurEditorWidget(() => isInDiffLeftEditorKey.set(false)));\n\n    this._register(editor.onDidContentSizeChange(e => {\n      const width = this._originalEditor.getContentWidth() + this._modifiedEditor.getContentWidth() + DiffEditorWidget.ONE_OVERVIEW_WIDTH;\n      const height = Math.max(this._modifiedEditor.getContentHeight(), this._originalEditor.getContentHeight());\n\n      this._onDidContentSizeChange.fire({\n        contentHeight: height,\n        contentWidth: width,\n        contentHeightChanged: e.contentHeightChanged,\n        contentWidthChanged: e.contentWidthChanged\n      });\n    }));\n\n    return editor;\n  }\n\n  _createRightHandSideEditor(options, codeEditorWidgetOptions) {\n    const editor = this._createInnerEditor(this._instantiationService, this._modifiedDomNode, this._adjustOptionsForRightHandSide(options), codeEditorWidgetOptions);\n\n    this._register(editor.onDidScrollChange(e => {\n      if (this._isHandlingScrollEvent) {\n        return;\n      }\n\n      if (!e.scrollTopChanged && !e.scrollLeftChanged && !e.scrollHeightChanged) {\n        return;\n      }\n\n      this._isHandlingScrollEvent = true;\n\n      this._originalEditor.setScrollPosition({\n        scrollLeft: e.scrollLeft,\n        scrollTop: e.scrollTop\n      });\n\n      this._isHandlingScrollEvent = false;\n\n      this._layoutOverviewViewport();\n    }));\n\n    this._register(editor.onDidChangeViewZones(() => {\n      this._onViewZonesChanged();\n    }));\n\n    this._register(editor.onDidChangeConfiguration(e => {\n      if (!editor.getModel()) {\n        return;\n      }\n\n      if (e.hasChanged(44\n      /* fontInfo */\n      )) {\n        this._updateDecorationsRunner.schedule();\n      }\n\n      if (e.hasChanged(132\n      /* wrappingInfo */\n      )) {\n        this._updateDecorationsRunner.cancel();\n\n        this._updateDecorations();\n      }\n    }));\n\n    this._register(editor.onDidChangeHiddenAreas(() => {\n      this._updateDecorationsRunner.cancel();\n\n      this._updateDecorations();\n    }));\n\n    this._register(editor.onDidChangeModelContent(() => {\n      if (this._isVisible) {\n        this._beginUpdateDecorationsSoon();\n      }\n    }));\n\n    this._register(editor.onDidChangeModelOptions(e => {\n      if (e.tabSize) {\n        this._updateDecorationsRunner.schedule();\n      }\n    }));\n\n    const isInDiffRightEditorKey = this._contextKeyService.createKey('isInDiffRightEditor', editor.hasWidgetFocus());\n\n    this._register(editor.onDidFocusEditorWidget(() => isInDiffRightEditorKey.set(true)));\n\n    this._register(editor.onDidBlurEditorWidget(() => isInDiffRightEditorKey.set(false)));\n\n    this._register(editor.onDidContentSizeChange(e => {\n      const width = this._originalEditor.getContentWidth() + this._modifiedEditor.getContentWidth() + DiffEditorWidget.ONE_OVERVIEW_WIDTH;\n      const height = Math.max(this._modifiedEditor.getContentHeight(), this._originalEditor.getContentHeight());\n\n      this._onDidContentSizeChange.fire({\n        contentHeight: height,\n        contentWidth: width,\n        contentHeightChanged: e.contentHeightChanged,\n        contentWidthChanged: e.contentWidthChanged\n      });\n    }));\n\n    return editor;\n  }\n\n  _createInnerEditor(instantiationService, container, options, editorWidgetOptions) {\n    return instantiationService.createInstance(CodeEditorWidget, container, options, editorWidgetOptions);\n  }\n\n  dispose() {\n    this._codeEditorService.removeDiffEditor(this);\n\n    if (this._beginUpdateDecorationsTimeout !== -1) {\n      window.clearTimeout(this._beginUpdateDecorationsTimeout);\n      this._beginUpdateDecorationsTimeout = -1;\n    }\n\n    this._cleanViewZonesAndDecorations();\n\n    if (this._originalOverviewRuler) {\n      this._overviewDomElement.removeChild(this._originalOverviewRuler.getDomNode());\n\n      this._originalOverviewRuler.dispose();\n    }\n\n    if (this._modifiedOverviewRuler) {\n      this._overviewDomElement.removeChild(this._modifiedOverviewRuler.getDomNode());\n\n      this._modifiedOverviewRuler.dispose();\n    }\n\n    this._overviewDomElement.removeChild(this._overviewViewportDomElement.domNode);\n\n    if (this._options.renderOverviewRuler) {\n      this._containerDomElement.removeChild(this._overviewDomElement);\n    }\n\n    this._containerDomElement.removeChild(this._originalDomNode);\n\n    this._originalEditor.dispose();\n\n    this._containerDomElement.removeChild(this._modifiedDomNode);\n\n    this._modifiedEditor.dispose();\n\n    this._strategy.dispose();\n\n    this._containerDomElement.removeChild(this._reviewPane.domNode.domNode);\n\n    this._containerDomElement.removeChild(this._reviewPane.shadow.domNode);\n\n    this._containerDomElement.removeChild(this._reviewPane.actionBarContainer.domNode);\n\n    this._reviewPane.dispose();\n\n    this._domElement.removeChild(this._containerDomElement);\n\n    this._onDidDispose.fire();\n\n    super.dispose();\n  } //------------ begin IDiffEditor methods\n\n\n  getId() {\n    return this.getEditorType() + ':' + this._id;\n  }\n\n  getEditorType() {\n    return editorCommon.EditorType.IDiffEditor;\n  }\n\n  getLineChanges() {\n    if (!this._diffComputationResult) {\n      return null;\n    }\n\n    return this._diffComputationResult.changes;\n  }\n\n  getOriginalEditor() {\n    return this._originalEditor;\n  }\n\n  getModifiedEditor() {\n    return this._modifiedEditor;\n  }\n\n  updateOptions(_newOptions) {\n    const newOptions = validateDiffEditorOptions(_newOptions, this._options);\n    const changed = changedDiffEditorOptions(this._options, newOptions);\n    this._options = newOptions;\n    const beginUpdateDecorations = changed.ignoreTrimWhitespace || changed.renderIndicators;\n    const beginUpdateDecorationsSoon = this._isVisible && (changed.maxComputationTime || changed.maxFileSize);\n\n    if (beginUpdateDecorations) {\n      this._beginUpdateDecorations();\n    } else if (beginUpdateDecorationsSoon) {\n      this._beginUpdateDecorationsSoon();\n    }\n\n    this._modifiedEditor.updateOptions(this._adjustOptionsForRightHandSide(_newOptions));\n\n    this._originalEditor.updateOptions(this._adjustOptionsForLeftHandSide(_newOptions)); // enableSplitViewResizing\n\n\n    this._strategy.setEnableSplitViewResizing(this._options.enableSplitViewResizing); // renderSideBySide\n\n\n    if (changed.renderSideBySide) {\n      if (this._options.renderSideBySide) {\n        this._setStrategy(new DiffEditorWidgetSideBySide(this._createDataSource(), this._options.enableSplitViewResizing));\n      } else {\n        this._setStrategy(new DiffEditorWidgetInline(this._createDataSource(), this._options.enableSplitViewResizing));\n      } // Update class name\n\n\n      this._containerDomElement.className = DiffEditorWidget._getClassName(this._themeService.getColorTheme(), this._options.renderSideBySide);\n    } // renderOverviewRuler\n\n\n    if (changed.renderOverviewRuler) {\n      if (this._options.renderOverviewRuler) {\n        this._containerDomElement.appendChild(this._overviewDomElement);\n      } else {\n        this._containerDomElement.removeChild(this._overviewDomElement);\n      }\n    }\n  }\n\n  getModel() {\n    return {\n      original: this._originalEditor.getModel(),\n      modified: this._modifiedEditor.getModel()\n    };\n  }\n\n  setModel(model) {\n    // Guard us against partial null model\n    if (model && (!model.original || !model.modified)) {\n      throw new Error(!model.original ? 'DiffEditorWidget.setModel: Original model is null' : 'DiffEditorWidget.setModel: Modified model is null');\n    } // Remove all view zones & decorations\n\n\n    this._cleanViewZonesAndDecorations(); // Update code editor models\n\n\n    this._originalEditor.setModel(model ? model.original : null);\n\n    this._modifiedEditor.setModel(model ? model.modified : null);\n\n    this._updateDecorationsRunner.cancel(); // this.originalEditor.onDidChangeModelOptions\n\n\n    if (model) {\n      this._originalEditor.setScrollTop(0);\n\n      this._modifiedEditor.setScrollTop(0);\n    } // Disable any diff computations that will come in\n\n\n    this._diffComputationResult = null;\n    this._diffComputationToken++;\n\n    this._setState(0\n    /* Idle */\n    );\n\n    if (model) {\n      this._recreateOverviewRulers(); // Begin comparing\n\n\n      this._beginUpdateDecorations();\n    }\n\n    this._layoutOverviewViewport();\n  }\n\n  getContainerDomNode() {\n    return this._domElement;\n  }\n\n  getVisibleColumnFromPosition(position) {\n    return this._modifiedEditor.getVisibleColumnFromPosition(position);\n  }\n\n  getPosition() {\n    return this._modifiedEditor.getPosition();\n  }\n\n  setPosition(position) {\n    this._modifiedEditor.setPosition(position);\n  }\n\n  revealLine(lineNumber, scrollType = 0\n  /* Smooth */\n  ) {\n    this._modifiedEditor.revealLine(lineNumber, scrollType);\n  }\n\n  revealLineInCenter(lineNumber, scrollType = 0\n  /* Smooth */\n  ) {\n    this._modifiedEditor.revealLineInCenter(lineNumber, scrollType);\n  }\n\n  revealLineInCenterIfOutsideViewport(lineNumber, scrollType = 0\n  /* Smooth */\n  ) {\n    this._modifiedEditor.revealLineInCenterIfOutsideViewport(lineNumber, scrollType);\n  }\n\n  revealLineNearTop(lineNumber, scrollType = 0\n  /* Smooth */\n  ) {\n    this._modifiedEditor.revealLineNearTop(lineNumber, scrollType);\n  }\n\n  revealPosition(position, scrollType = 0\n  /* Smooth */\n  ) {\n    this._modifiedEditor.revealPosition(position, scrollType);\n  }\n\n  revealPositionInCenter(position, scrollType = 0\n  /* Smooth */\n  ) {\n    this._modifiedEditor.revealPositionInCenter(position, scrollType);\n  }\n\n  revealPositionInCenterIfOutsideViewport(position, scrollType = 0\n  /* Smooth */\n  ) {\n    this._modifiedEditor.revealPositionInCenterIfOutsideViewport(position, scrollType);\n  }\n\n  revealPositionNearTop(position, scrollType = 0\n  /* Smooth */\n  ) {\n    this._modifiedEditor.revealPositionNearTop(position, scrollType);\n  }\n\n  getSelection() {\n    return this._modifiedEditor.getSelection();\n  }\n\n  getSelections() {\n    return this._modifiedEditor.getSelections();\n  }\n\n  setSelection(something) {\n    this._modifiedEditor.setSelection(something);\n  }\n\n  setSelections(ranges) {\n    this._modifiedEditor.setSelections(ranges);\n  }\n\n  revealLines(startLineNumber, endLineNumber, scrollType = 0\n  /* Smooth */\n  ) {\n    this._modifiedEditor.revealLines(startLineNumber, endLineNumber, scrollType);\n  }\n\n  revealLinesInCenter(startLineNumber, endLineNumber, scrollType = 0\n  /* Smooth */\n  ) {\n    this._modifiedEditor.revealLinesInCenter(startLineNumber, endLineNumber, scrollType);\n  }\n\n  revealLinesInCenterIfOutsideViewport(startLineNumber, endLineNumber, scrollType = 0\n  /* Smooth */\n  ) {\n    this._modifiedEditor.revealLinesInCenterIfOutsideViewport(startLineNumber, endLineNumber, scrollType);\n  }\n\n  revealLinesNearTop(startLineNumber, endLineNumber, scrollType = 0\n  /* Smooth */\n  ) {\n    this._modifiedEditor.revealLinesNearTop(startLineNumber, endLineNumber, scrollType);\n  }\n\n  revealRange(range, scrollType = 0\n  /* Smooth */\n  , revealVerticalInCenter = false, revealHorizontal = true) {\n    this._modifiedEditor.revealRange(range, scrollType, revealVerticalInCenter, revealHorizontal);\n  }\n\n  revealRangeInCenter(range, scrollType = 0\n  /* Smooth */\n  ) {\n    this._modifiedEditor.revealRangeInCenter(range, scrollType);\n  }\n\n  revealRangeInCenterIfOutsideViewport(range, scrollType = 0\n  /* Smooth */\n  ) {\n    this._modifiedEditor.revealRangeInCenterIfOutsideViewport(range, scrollType);\n  }\n\n  revealRangeNearTop(range, scrollType = 0\n  /* Smooth */\n  ) {\n    this._modifiedEditor.revealRangeNearTop(range, scrollType);\n  }\n\n  revealRangeNearTopIfOutsideViewport(range, scrollType = 0\n  /* Smooth */\n  ) {\n    this._modifiedEditor.revealRangeNearTopIfOutsideViewport(range, scrollType);\n  }\n\n  revealRangeAtTop(range, scrollType = 0\n  /* Smooth */\n  ) {\n    this._modifiedEditor.revealRangeAtTop(range, scrollType);\n  }\n\n  getSupportedActions() {\n    return this._modifiedEditor.getSupportedActions();\n  }\n\n  saveViewState() {\n    const originalViewState = this._originalEditor.saveViewState();\n\n    const modifiedViewState = this._modifiedEditor.saveViewState();\n\n    return {\n      original: originalViewState,\n      modified: modifiedViewState\n    };\n  }\n\n  restoreViewState(s) {\n    if (s && s.original && s.modified) {\n      const diffEditorState = s;\n\n      this._originalEditor.restoreViewState(diffEditorState.original);\n\n      this._modifiedEditor.restoreViewState(diffEditorState.modified);\n    }\n  }\n\n  layout(dimension) {\n    this._elementSizeObserver.observe(dimension);\n  }\n\n  focus() {\n    this._modifiedEditor.focus();\n  }\n\n  hasTextFocus() {\n    return this._originalEditor.hasTextFocus() || this._modifiedEditor.hasTextFocus();\n  }\n\n  trigger(source, handlerId, payload) {\n    this._modifiedEditor.trigger(source, handlerId, payload);\n  }\n\n  changeDecorations(callback) {\n    return this._modifiedEditor.changeDecorations(callback);\n  } //------------ end IDiffEditor methods\n  //------------ begin layouting methods\n\n\n  _onDidContainerSizeChanged() {\n    this._doLayout();\n  }\n\n  _getReviewHeight() {\n    return this._reviewPane.isVisible() ? this._elementSizeObserver.getHeight() : 0;\n  }\n\n  _layoutOverviewRulers() {\n    if (!this._options.renderOverviewRuler) {\n      return;\n    }\n\n    if (!this._originalOverviewRuler || !this._modifiedOverviewRuler) {\n      return;\n    }\n\n    const height = this._elementSizeObserver.getHeight();\n\n    const reviewHeight = this._getReviewHeight();\n\n    const freeSpace = DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH - 2 * DiffEditorWidget.ONE_OVERVIEW_WIDTH;\n\n    const layoutInfo = this._modifiedEditor.getLayoutInfo();\n\n    if (layoutInfo) {\n      this._originalOverviewRuler.setLayout({\n        top: 0,\n        width: DiffEditorWidget.ONE_OVERVIEW_WIDTH,\n        right: freeSpace + DiffEditorWidget.ONE_OVERVIEW_WIDTH,\n        height: height - reviewHeight\n      });\n\n      this._modifiedOverviewRuler.setLayout({\n        top: 0,\n        right: 0,\n        width: DiffEditorWidget.ONE_OVERVIEW_WIDTH,\n        height: height - reviewHeight\n      });\n    }\n  } //------------ end layouting methods\n\n\n  _onViewZonesChanged() {\n    if (this._currentlyChangingViewZones) {\n      return;\n    }\n\n    this._updateDecorationsRunner.schedule();\n  }\n\n  _beginUpdateDecorationsSoon() {\n    // Clear previous timeout if necessary\n    if (this._beginUpdateDecorationsTimeout !== -1) {\n      window.clearTimeout(this._beginUpdateDecorationsTimeout);\n      this._beginUpdateDecorationsTimeout = -1;\n    }\n\n    this._beginUpdateDecorationsTimeout = window.setTimeout(() => this._beginUpdateDecorations(), DiffEditorWidget.UPDATE_DIFF_DECORATIONS_DELAY);\n  }\n\n  static _equals(a, b) {\n    if (!a && !b) {\n      return true;\n    }\n\n    if (!a || !b) {\n      return false;\n    }\n\n    return a.toString() === b.toString();\n  }\n\n  _beginUpdateDecorations() {\n    this._beginUpdateDecorationsTimeout = -1;\n\n    const currentOriginalModel = this._originalEditor.getModel();\n\n    const currentModifiedModel = this._modifiedEditor.getModel();\n\n    if (!currentOriginalModel || !currentModifiedModel) {\n      return;\n    } // Prevent old diff requests to come if a new request has been initiated\n    // The best method would be to call cancel on the Promise, but this is not\n    // yet supported, so using tokens for now.\n\n\n    this._diffComputationToken++;\n    const currentToken = this._diffComputationToken;\n    const diffLimit = this._options.maxFileSize * 1024 * 1024; // MB\n\n    const canSyncModelForDiff = model => {\n      const bufferTextLength = model.getValueLength();\n      return diffLimit === 0 || bufferTextLength <= diffLimit;\n    };\n\n    if (!canSyncModelForDiff(currentOriginalModel) || !canSyncModelForDiff(currentModifiedModel)) {\n      if (!DiffEditorWidget._equals(currentOriginalModel.uri, this._lastOriginalWarning) || !DiffEditorWidget._equals(currentModifiedModel.uri, this._lastModifiedWarning)) {\n        this._lastOriginalWarning = currentOriginalModel.uri;\n        this._lastModifiedWarning = currentModifiedModel.uri;\n\n        this._notificationService.warn(nls.localize(\"diff.tooLarge\", \"Cannot compare files because one file is too large.\"));\n      }\n\n      return;\n    }\n\n    this._setState(1\n    /* ComputingDiff */\n    );\n\n    this._editorWorkerService.computeDiff(currentOriginalModel.uri, currentModifiedModel.uri, this._options.ignoreTrimWhitespace, this._options.maxComputationTime).then(result => {\n      if (currentToken === this._diffComputationToken && currentOriginalModel === this._originalEditor.getModel() && currentModifiedModel === this._modifiedEditor.getModel()) {\n        this._setState(2\n        /* DiffComputed */\n        );\n\n        this._diffComputationResult = result;\n\n        this._updateDecorationsRunner.schedule();\n\n        this._onDidUpdateDiff.fire();\n      }\n    }, error => {\n      if (currentToken === this._diffComputationToken && currentOriginalModel === this._originalEditor.getModel() && currentModifiedModel === this._modifiedEditor.getModel()) {\n        this._setState(2\n        /* DiffComputed */\n        );\n\n        this._diffComputationResult = null;\n\n        this._updateDecorationsRunner.schedule();\n      }\n    });\n  }\n\n  _cleanViewZonesAndDecorations() {\n    this._originalEditorState.clean(this._originalEditor);\n\n    this._modifiedEditorState.clean(this._modifiedEditor);\n  }\n\n  _updateDecorations() {\n    if (!this._originalEditor.getModel() || !this._modifiedEditor.getModel()) {\n      return;\n    }\n\n    const lineChanges = this._diffComputationResult ? this._diffComputationResult.changes : [];\n\n    const foreignOriginal = this._originalEditorState.getForeignViewZones(this._originalEditor.getWhitespaces());\n\n    const foreignModified = this._modifiedEditorState.getForeignViewZones(this._modifiedEditor.getWhitespaces());\n\n    const diffDecorations = this._strategy.getEditorsDiffDecorations(lineChanges, this._options.ignoreTrimWhitespace, this._options.renderIndicators, foreignOriginal, foreignModified);\n\n    try {\n      this._currentlyChangingViewZones = true;\n\n      this._originalEditorState.apply(this._originalEditor, this._originalOverviewRuler, diffDecorations.original, false);\n\n      this._modifiedEditorState.apply(this._modifiedEditor, this._modifiedOverviewRuler, diffDecorations.modified, true);\n    } finally {\n      this._currentlyChangingViewZones = false;\n    }\n  }\n\n  _adjustOptionsForSubEditor(options) {\n    const clonedOptions = Object.assign({}, options);\n    clonedOptions.inDiffEditor = true;\n    clonedOptions.automaticLayout = false; // Clone scrollbar options before changing them\n\n    clonedOptions.scrollbar = Object.assign({}, clonedOptions.scrollbar || {});\n    clonedOptions.scrollbar.vertical = 'visible';\n    clonedOptions.folding = false;\n    clonedOptions.codeLens = this._options.diffCodeLens;\n    clonedOptions.fixedOverflowWidgets = true; // clonedOptions.lineDecorationsWidth = '2ch';\n    // Clone minimap options before changing them\n\n    clonedOptions.minimap = Object.assign({}, clonedOptions.minimap || {});\n    clonedOptions.minimap.enabled = false;\n    return clonedOptions;\n  }\n\n  _adjustOptionsForLeftHandSide(options) {\n    const result = this._adjustOptionsForSubEditor(options);\n\n    if (!this._options.renderSideBySide) {\n      // never wrap hidden editor\n      result.wordWrapOverride1 = 'off';\n    } else {\n      result.wordWrapOverride1 = this._options.diffWordWrap;\n    }\n\n    if (options.originalAriaLabel) {\n      result.ariaLabel = options.originalAriaLabel;\n    }\n\n    result.readOnly = !this._options.originalEditable;\n    result.extraEditorClassName = 'original-in-monaco-diff-editor';\n    return Object.assign(Object.assign({}, result), {\n      dimension: {\n        height: 0,\n        width: 0\n      }\n    });\n  }\n\n  _adjustOptionsForRightHandSide(options) {\n    const result = this._adjustOptionsForSubEditor(options);\n\n    if (options.modifiedAriaLabel) {\n      result.ariaLabel = options.modifiedAriaLabel;\n    }\n\n    result.wordWrapOverride1 = this._options.diffWordWrap;\n    result.revealHorizontalRightPadding = EditorOptions.revealHorizontalRightPadding.defaultValue + DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH;\n    result.scrollbar.verticalHasArrows = false;\n    result.extraEditorClassName = 'modified-in-monaco-diff-editor';\n    return Object.assign(Object.assign({}, result), {\n      dimension: {\n        height: 0,\n        width: 0\n      }\n    });\n  }\n\n  doLayout() {\n    this._elementSizeObserver.observe();\n\n    this._doLayout();\n  }\n\n  _doLayout() {\n    const width = this._elementSizeObserver.getWidth();\n\n    const height = this._elementSizeObserver.getHeight();\n\n    const reviewHeight = this._getReviewHeight();\n\n    const splitPoint = this._strategy.layout();\n\n    this._originalDomNode.style.width = splitPoint + 'px';\n    this._originalDomNode.style.left = '0px';\n    this._modifiedDomNode.style.width = width - splitPoint + 'px';\n    this._modifiedDomNode.style.left = splitPoint + 'px';\n    this._overviewDomElement.style.top = '0px';\n    this._overviewDomElement.style.height = height - reviewHeight + 'px';\n    this._overviewDomElement.style.width = DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH + 'px';\n    this._overviewDomElement.style.left = width - DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH + 'px';\n\n    this._overviewViewportDomElement.setWidth(DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH);\n\n    this._overviewViewportDomElement.setHeight(30);\n\n    this._originalEditor.layout({\n      width: splitPoint,\n      height: height - reviewHeight\n    });\n\n    this._modifiedEditor.layout({\n      width: width - splitPoint - (this._options.renderOverviewRuler ? DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH : 0),\n      height: height - reviewHeight\n    });\n\n    if (this._originalOverviewRuler || this._modifiedOverviewRuler) {\n      this._layoutOverviewRulers();\n    }\n\n    this._reviewPane.layout(height - reviewHeight, width, reviewHeight);\n\n    this._layoutOverviewViewport();\n  }\n\n  _layoutOverviewViewport() {\n    const layout = this._computeOverviewViewport();\n\n    if (!layout) {\n      this._overviewViewportDomElement.setTop(0);\n\n      this._overviewViewportDomElement.setHeight(0);\n    } else {\n      this._overviewViewportDomElement.setTop(layout.top);\n\n      this._overviewViewportDomElement.setHeight(layout.height);\n    }\n  }\n\n  _computeOverviewViewport() {\n    const layoutInfo = this._modifiedEditor.getLayoutInfo();\n\n    if (!layoutInfo) {\n      return null;\n    }\n\n    const scrollTop = this._modifiedEditor.getScrollTop();\n\n    const scrollHeight = this._modifiedEditor.getScrollHeight();\n\n    const computedAvailableSize = Math.max(0, layoutInfo.height);\n    const computedRepresentableSize = Math.max(0, computedAvailableSize - 2 * 0);\n    const computedRatio = scrollHeight > 0 ? computedRepresentableSize / scrollHeight : 0;\n    const computedSliderSize = Math.max(0, Math.floor(layoutInfo.height * computedRatio));\n    const computedSliderPosition = Math.floor(scrollTop * computedRatio);\n    return {\n      height: computedSliderSize,\n      top: computedSliderPosition\n    };\n  }\n\n  _createDataSource() {\n    return {\n      getWidth: () => {\n        return this._elementSizeObserver.getWidth();\n      },\n      getHeight: () => {\n        return this._elementSizeObserver.getHeight() - this._getReviewHeight();\n      },\n      getOptions: () => {\n        return {\n          renderOverviewRuler: this._options.renderOverviewRuler\n        };\n      },\n      getContainerDomNode: () => {\n        return this._containerDomElement;\n      },\n      relayoutEditors: () => {\n        this._doLayout();\n      },\n      getOriginalEditor: () => {\n        return this._originalEditor;\n      },\n      getModifiedEditor: () => {\n        return this._modifiedEditor;\n      }\n    };\n  }\n\n  _setStrategy(newStrategy) {\n    if (this._strategy) {\n      this._strategy.dispose();\n    }\n\n    this._strategy = newStrategy;\n    newStrategy.applyColors(this._themeService.getColorTheme());\n\n    if (this._diffComputationResult) {\n      this._updateDecorations();\n    } // Just do a layout, the strategy might need it\n\n\n    this._doLayout();\n  }\n\n  _getLineChangeAtOrBeforeLineNumber(lineNumber, startLineNumberExtractor) {\n    const lineChanges = this._diffComputationResult ? this._diffComputationResult.changes : [];\n\n    if (lineChanges.length === 0 || lineNumber < startLineNumberExtractor(lineChanges[0])) {\n      // There are no changes or `lineNumber` is before the first change\n      return null;\n    }\n\n    let min = 0;\n    let max = lineChanges.length - 1;\n\n    while (min < max) {\n      const mid = Math.floor((min + max) / 2);\n      const midStart = startLineNumberExtractor(lineChanges[mid]);\n      const midEnd = mid + 1 <= max ? startLineNumberExtractor(lineChanges[mid + 1]) : 1073741824\n      /* MAX_SAFE_SMALL_INTEGER */\n      ;\n\n      if (lineNumber < midStart) {\n        max = mid - 1;\n      } else if (lineNumber >= midEnd) {\n        min = mid + 1;\n      } else {\n        // HIT!\n        min = mid;\n        max = mid;\n      }\n    }\n\n    return lineChanges[min];\n  }\n\n  _getEquivalentLineForOriginalLineNumber(lineNumber) {\n    const lineChange = this._getLineChangeAtOrBeforeLineNumber(lineNumber, lineChange => lineChange.originalStartLineNumber);\n\n    if (!lineChange) {\n      return lineNumber;\n    }\n\n    const originalEquivalentLineNumber = lineChange.originalStartLineNumber + (lineChange.originalEndLineNumber > 0 ? -1 : 0);\n    const modifiedEquivalentLineNumber = lineChange.modifiedStartLineNumber + (lineChange.modifiedEndLineNumber > 0 ? -1 : 0);\n    const lineChangeOriginalLength = lineChange.originalEndLineNumber > 0 ? lineChange.originalEndLineNumber - lineChange.originalStartLineNumber + 1 : 0;\n    const lineChangeModifiedLength = lineChange.modifiedEndLineNumber > 0 ? lineChange.modifiedEndLineNumber - lineChange.modifiedStartLineNumber + 1 : 0;\n    const delta = lineNumber - originalEquivalentLineNumber;\n\n    if (delta <= lineChangeOriginalLength) {\n      return modifiedEquivalentLineNumber + Math.min(delta, lineChangeModifiedLength);\n    }\n\n    return modifiedEquivalentLineNumber + lineChangeModifiedLength - lineChangeOriginalLength + delta;\n  }\n\n  _getEquivalentLineForModifiedLineNumber(lineNumber) {\n    const lineChange = this._getLineChangeAtOrBeforeLineNumber(lineNumber, lineChange => lineChange.modifiedStartLineNumber);\n\n    if (!lineChange) {\n      return lineNumber;\n    }\n\n    const originalEquivalentLineNumber = lineChange.originalStartLineNumber + (lineChange.originalEndLineNumber > 0 ? -1 : 0);\n    const modifiedEquivalentLineNumber = lineChange.modifiedStartLineNumber + (lineChange.modifiedEndLineNumber > 0 ? -1 : 0);\n    const lineChangeOriginalLength = lineChange.originalEndLineNumber > 0 ? lineChange.originalEndLineNumber - lineChange.originalStartLineNumber + 1 : 0;\n    const lineChangeModifiedLength = lineChange.modifiedEndLineNumber > 0 ? lineChange.modifiedEndLineNumber - lineChange.modifiedStartLineNumber + 1 : 0;\n    const delta = lineNumber - modifiedEquivalentLineNumber;\n\n    if (delta <= lineChangeModifiedLength) {\n      return originalEquivalentLineNumber + Math.min(delta, lineChangeOriginalLength);\n    }\n\n    return originalEquivalentLineNumber + lineChangeOriginalLength - lineChangeModifiedLength + delta;\n  }\n\n  getDiffLineInformationForOriginal(lineNumber) {\n    if (!this._diffComputationResult) {\n      // Cannot answer that which I don't know\n      return null;\n    }\n\n    return {\n      equivalentLineNumber: this._getEquivalentLineForOriginalLineNumber(lineNumber)\n    };\n  }\n\n  getDiffLineInformationForModified(lineNumber) {\n    if (!this._diffComputationResult) {\n      // Cannot answer that which I don't know\n      return null;\n    }\n\n    return {\n      equivalentLineNumber: this._getEquivalentLineForModifiedLineNumber(lineNumber)\n    };\n  }\n\n};\nDiffEditorWidget.ONE_OVERVIEW_WIDTH = 15;\nDiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH = 30;\nDiffEditorWidget.UPDATE_DIFF_DECORATIONS_DELAY = 200; // ms\n\nDiffEditorWidget = __decorate([__param(3, IClipboardService), __param(4, IEditorWorkerService), __param(5, IContextKeyService), __param(6, IInstantiationService), __param(7, ICodeEditorService), __param(8, IThemeService), __param(9, INotificationService), __param(10, IContextMenuService), __param(11, IEditorProgressService)], DiffEditorWidget);\nexport { DiffEditorWidget };\n\nclass DiffEditorWidgetStyle extends Disposable {\n  constructor(dataSource) {\n    super();\n    this._dataSource = dataSource;\n    this._insertColor = null;\n    this._removeColor = null;\n  }\n\n  applyColors(theme) {\n    const newInsertColor = (theme.getColor(diffInserted) || defaultInsertColor).transparent(2);\n    const newRemoveColor = (theme.getColor(diffRemoved) || defaultRemoveColor).transparent(2);\n    const hasChanges = !newInsertColor.equals(this._insertColor) || !newRemoveColor.equals(this._removeColor);\n    this._insertColor = newInsertColor;\n    this._removeColor = newRemoveColor;\n    return hasChanges;\n  }\n\n  getEditorsDiffDecorations(lineChanges, ignoreTrimWhitespace, renderIndicators, originalWhitespaces, modifiedWhitespaces) {\n    // Get view zones\n    modifiedWhitespaces = modifiedWhitespaces.sort((a, b) => {\n      return a.afterLineNumber - b.afterLineNumber;\n    });\n    originalWhitespaces = originalWhitespaces.sort((a, b) => {\n      return a.afterLineNumber - b.afterLineNumber;\n    });\n\n    const zones = this._getViewZones(lineChanges, originalWhitespaces, modifiedWhitespaces, renderIndicators); // Get decorations & overview ruler zones\n\n\n    const originalDecorations = this._getOriginalEditorDecorations(lineChanges, ignoreTrimWhitespace, renderIndicators);\n\n    const modifiedDecorations = this._getModifiedEditorDecorations(lineChanges, ignoreTrimWhitespace, renderIndicators);\n\n    return {\n      original: {\n        decorations: originalDecorations.decorations,\n        overviewZones: originalDecorations.overviewZones,\n        zones: zones.original\n      },\n      modified: {\n        decorations: modifiedDecorations.decorations,\n        overviewZones: modifiedDecorations.overviewZones,\n        zones: zones.modified\n      }\n    };\n  }\n\n}\n\nclass ForeignViewZonesIterator {\n  constructor(source) {\n    this._source = source;\n    this._index = -1;\n    this.current = null;\n    this.advance();\n  }\n\n  advance() {\n    this._index++;\n\n    if (this._index < this._source.length) {\n      this.current = this._source[this._index];\n    } else {\n      this.current = null;\n    }\n  }\n\n}\n\nclass ViewZonesComputer {\n  constructor(_lineChanges, _originalForeignVZ, _modifiedForeignVZ, _originalEditor, _modifiedEditor) {\n    this._lineChanges = _lineChanges;\n    this._originalForeignVZ = _originalForeignVZ;\n    this._modifiedForeignVZ = _modifiedForeignVZ;\n    this._originalEditor = _originalEditor;\n    this._modifiedEditor = _modifiedEditor;\n  }\n\n  static _getViewLineCount(editor, startLineNumber, endLineNumber) {\n    const model = editor.getModel();\n\n    const viewModel = editor._getViewModel();\n\n    if (model && viewModel) {\n      const viewRange = getViewRange(model, viewModel, startLineNumber, endLineNumber);\n      return viewRange.endLineNumber - viewRange.startLineNumber + 1;\n    }\n\n    return endLineNumber - startLineNumber + 1;\n  }\n\n  getViewZones() {\n    const originalLineHeight = this._originalEditor.getOption(59\n    /* lineHeight */\n    );\n\n    const modifiedLineHeight = this._modifiedEditor.getOption(59\n    /* lineHeight */\n    );\n\n    const originalHasWrapping = this._originalEditor.getOption(132\n    /* wrappingInfo */\n    ).wrappingColumn !== -1;\n    const modifiedHasWrapping = this._modifiedEditor.getOption(132\n    /* wrappingInfo */\n    ).wrappingColumn !== -1;\n    const hasWrapping = originalHasWrapping || modifiedHasWrapping;\n\n    const originalModel = this._originalEditor.getModel();\n\n    const originalCoordinatesConverter = this._originalEditor._getViewModel().coordinatesConverter;\n\n    const modifiedCoordinatesConverter = this._modifiedEditor._getViewModel().coordinatesConverter;\n\n    const result = {\n      original: [],\n      modified: []\n    };\n    let lineChangeModifiedLength = 0;\n    let lineChangeOriginalLength = 0;\n    let originalEquivalentLineNumber = 0;\n    let modifiedEquivalentLineNumber = 0;\n    let originalEndEquivalentLineNumber = 0;\n    let modifiedEndEquivalentLineNumber = 0;\n\n    const sortMyViewZones = (a, b) => {\n      return a.afterLineNumber - b.afterLineNumber;\n    };\n\n    const addAndCombineIfPossible = (destination, item) => {\n      if (item.domNode === null && destination.length > 0) {\n        const lastItem = destination[destination.length - 1];\n\n        if (lastItem.afterLineNumber === item.afterLineNumber && lastItem.domNode === null) {\n          lastItem.heightInLines += item.heightInLines;\n          return;\n        }\n      }\n\n      destination.push(item);\n    };\n\n    const modifiedForeignVZ = new ForeignViewZonesIterator(this._modifiedForeignVZ);\n    const originalForeignVZ = new ForeignViewZonesIterator(this._originalForeignVZ);\n    let lastOriginalLineNumber = 1;\n    let lastModifiedLineNumber = 1; // In order to include foreign view zones after the last line change, the for loop will iterate once more after the end of the `lineChanges` array\n\n    for (let i = 0, length = this._lineChanges.length; i <= length; i++) {\n      const lineChange = i < length ? this._lineChanges[i] : null;\n\n      if (lineChange !== null) {\n        originalEquivalentLineNumber = lineChange.originalStartLineNumber + (lineChange.originalEndLineNumber > 0 ? -1 : 0);\n        modifiedEquivalentLineNumber = lineChange.modifiedStartLineNumber + (lineChange.modifiedEndLineNumber > 0 ? -1 : 0);\n        lineChangeOriginalLength = lineChange.originalEndLineNumber > 0 ? ViewZonesComputer._getViewLineCount(this._originalEditor, lineChange.originalStartLineNumber, lineChange.originalEndLineNumber) : 0;\n        lineChangeModifiedLength = lineChange.modifiedEndLineNumber > 0 ? ViewZonesComputer._getViewLineCount(this._modifiedEditor, lineChange.modifiedStartLineNumber, lineChange.modifiedEndLineNumber) : 0;\n        originalEndEquivalentLineNumber = Math.max(lineChange.originalStartLineNumber, lineChange.originalEndLineNumber);\n        modifiedEndEquivalentLineNumber = Math.max(lineChange.modifiedStartLineNumber, lineChange.modifiedEndLineNumber);\n      } else {\n        // Increase to very large value to get the producing tests of foreign view zones running\n        originalEquivalentLineNumber += 10000000 + lineChangeOriginalLength;\n        modifiedEquivalentLineNumber += 10000000 + lineChangeModifiedLength;\n        originalEndEquivalentLineNumber = originalEquivalentLineNumber;\n        modifiedEndEquivalentLineNumber = modifiedEquivalentLineNumber;\n      } // Each step produces view zones, and after producing them, we try to cancel them out, to avoid empty-empty view zone cases\n\n\n      let stepOriginal = [];\n      let stepModified = []; // ---------------------------- PRODUCE VIEW ZONES\n      // [PRODUCE] View zones due to line mapping differences (equal lines but wrapped differently)\n\n      if (hasWrapping) {\n        let count;\n\n        if (lineChange) {\n          if (lineChange.originalEndLineNumber > 0) {\n            count = lineChange.originalStartLineNumber - lastOriginalLineNumber;\n          } else {\n            count = lineChange.modifiedStartLineNumber - lastModifiedLineNumber;\n          }\n        } else {\n          count = originalModel.getLineCount() - lastOriginalLineNumber;\n        }\n\n        for (let i = 0; i < count; i++) {\n          const originalLineNumber = lastOriginalLineNumber + i;\n          const modifiedLineNumber = lastModifiedLineNumber + i;\n          const originalViewLineCount = originalCoordinatesConverter.getModelLineViewLineCount(originalLineNumber);\n          const modifiedViewLineCount = modifiedCoordinatesConverter.getModelLineViewLineCount(modifiedLineNumber);\n\n          if (originalViewLineCount < modifiedViewLineCount) {\n            stepOriginal.push({\n              afterLineNumber: originalLineNumber,\n              heightInLines: modifiedViewLineCount - originalViewLineCount,\n              domNode: null,\n              marginDomNode: null\n            });\n          } else if (originalViewLineCount > modifiedViewLineCount) {\n            stepModified.push({\n              afterLineNumber: modifiedLineNumber,\n              heightInLines: originalViewLineCount - modifiedViewLineCount,\n              domNode: null,\n              marginDomNode: null\n            });\n          }\n        }\n\n        if (lineChange) {\n          lastOriginalLineNumber = (lineChange.originalEndLineNumber > 0 ? lineChange.originalEndLineNumber : lineChange.originalStartLineNumber) + 1;\n          lastModifiedLineNumber = (lineChange.modifiedEndLineNumber > 0 ? lineChange.modifiedEndLineNumber : lineChange.modifiedStartLineNumber) + 1;\n        }\n      } // [PRODUCE] View zone(s) in original-side due to foreign view zone(s) in modified-side\n\n\n      while (modifiedForeignVZ.current && modifiedForeignVZ.current.afterLineNumber <= modifiedEndEquivalentLineNumber) {\n        let viewZoneLineNumber;\n\n        if (modifiedForeignVZ.current.afterLineNumber <= modifiedEquivalentLineNumber) {\n          viewZoneLineNumber = originalEquivalentLineNumber - modifiedEquivalentLineNumber + modifiedForeignVZ.current.afterLineNumber;\n        } else {\n          viewZoneLineNumber = originalEndEquivalentLineNumber;\n        }\n\n        let marginDomNode = null;\n\n        if (lineChange && lineChange.modifiedStartLineNumber <= modifiedForeignVZ.current.afterLineNumber && modifiedForeignVZ.current.afterLineNumber <= lineChange.modifiedEndLineNumber) {\n          marginDomNode = this._createOriginalMarginDomNodeForModifiedForeignViewZoneInAddedRegion();\n        }\n\n        stepOriginal.push({\n          afterLineNumber: viewZoneLineNumber,\n          heightInLines: modifiedForeignVZ.current.height / modifiedLineHeight,\n          domNode: null,\n          marginDomNode: marginDomNode\n        });\n        modifiedForeignVZ.advance();\n      } // [PRODUCE] View zone(s) in modified-side due to foreign view zone(s) in original-side\n\n\n      while (originalForeignVZ.current && originalForeignVZ.current.afterLineNumber <= originalEndEquivalentLineNumber) {\n        let viewZoneLineNumber;\n\n        if (originalForeignVZ.current.afterLineNumber <= originalEquivalentLineNumber) {\n          viewZoneLineNumber = modifiedEquivalentLineNumber - originalEquivalentLineNumber + originalForeignVZ.current.afterLineNumber;\n        } else {\n          viewZoneLineNumber = modifiedEndEquivalentLineNumber;\n        }\n\n        stepModified.push({\n          afterLineNumber: viewZoneLineNumber,\n          heightInLines: originalForeignVZ.current.height / originalLineHeight,\n          domNode: null\n        });\n        originalForeignVZ.advance();\n      }\n\n      if (lineChange !== null && isChangeOrInsert(lineChange)) {\n        const r = this._produceOriginalFromDiff(lineChange, lineChangeOriginalLength, lineChangeModifiedLength);\n\n        if (r) {\n          stepOriginal.push(r);\n        }\n      }\n\n      if (lineChange !== null && isChangeOrDelete(lineChange)) {\n        const r = this._produceModifiedFromDiff(lineChange, lineChangeOriginalLength, lineChangeModifiedLength);\n\n        if (r) {\n          stepModified.push(r);\n        }\n      } // ---------------------------- END PRODUCE VIEW ZONES\n      // ---------------------------- EMIT MINIMAL VIEW ZONES\n      // [CANCEL & EMIT] Try to cancel view zones out\n\n\n      let stepOriginalIndex = 0;\n      let stepModifiedIndex = 0;\n      stepOriginal = stepOriginal.sort(sortMyViewZones);\n      stepModified = stepModified.sort(sortMyViewZones);\n\n      while (stepOriginalIndex < stepOriginal.length && stepModifiedIndex < stepModified.length) {\n        const original = stepOriginal[stepOriginalIndex];\n        const modified = stepModified[stepModifiedIndex];\n        const originalDelta = original.afterLineNumber - originalEquivalentLineNumber;\n        const modifiedDelta = modified.afterLineNumber - modifiedEquivalentLineNumber;\n\n        if (originalDelta < modifiedDelta) {\n          addAndCombineIfPossible(result.original, original);\n          stepOriginalIndex++;\n        } else if (modifiedDelta < originalDelta) {\n          addAndCombineIfPossible(result.modified, modified);\n          stepModifiedIndex++;\n        } else if (original.shouldNotShrink) {\n          addAndCombineIfPossible(result.original, original);\n          stepOriginalIndex++;\n        } else if (modified.shouldNotShrink) {\n          addAndCombineIfPossible(result.modified, modified);\n          stepModifiedIndex++;\n        } else {\n          if (original.heightInLines >= modified.heightInLines) {\n            // modified view zone gets removed\n            original.heightInLines -= modified.heightInLines;\n            stepModifiedIndex++;\n          } else {\n            // original view zone gets removed\n            modified.heightInLines -= original.heightInLines;\n            stepOriginalIndex++;\n          }\n        }\n      } // [EMIT] Remaining original view zones\n\n\n      while (stepOriginalIndex < stepOriginal.length) {\n        addAndCombineIfPossible(result.original, stepOriginal[stepOriginalIndex]);\n        stepOriginalIndex++;\n      } // [EMIT] Remaining modified view zones\n\n\n      while (stepModifiedIndex < stepModified.length) {\n        addAndCombineIfPossible(result.modified, stepModified[stepModifiedIndex]);\n        stepModifiedIndex++;\n      } // ---------------------------- END EMIT MINIMAL VIEW ZONES\n\n    }\n\n    return {\n      original: ViewZonesComputer._ensureDomNodes(result.original),\n      modified: ViewZonesComputer._ensureDomNodes(result.modified)\n    };\n  }\n\n  static _ensureDomNodes(zones) {\n    return zones.map(z => {\n      if (!z.domNode) {\n        z.domNode = createFakeLinesDiv();\n      }\n\n      return z;\n    });\n  }\n\n}\n\nfunction createDecoration(startLineNumber, startColumn, endLineNumber, endColumn, options) {\n  return {\n    range: new Range(startLineNumber, startColumn, endLineNumber, endColumn),\n    options: options\n  };\n}\n\nconst DECORATIONS = {\n  charDelete: ModelDecorationOptions.register({\n    description: 'diff-editor-char-delete',\n    className: 'char-delete'\n  }),\n  charDeleteWholeLine: ModelDecorationOptions.register({\n    description: 'diff-editor-char-delete-whole-line',\n    className: 'char-delete',\n    isWholeLine: true\n  }),\n  charInsert: ModelDecorationOptions.register({\n    description: 'diff-editor-char-insert',\n    className: 'char-insert'\n  }),\n  charInsertWholeLine: ModelDecorationOptions.register({\n    description: 'diff-editor-char-insert-whole-line',\n    className: 'char-insert',\n    isWholeLine: true\n  }),\n  lineInsert: ModelDecorationOptions.register({\n    description: 'diff-editor-line-insert',\n    className: 'line-insert',\n    marginClassName: 'line-insert',\n    isWholeLine: true\n  }),\n  lineInsertWithSign: ModelDecorationOptions.register({\n    description: 'diff-editor-line-insert-with-sign',\n    className: 'line-insert',\n    linesDecorationsClassName: 'insert-sign ' + ThemeIcon.asClassName(diffInsertIcon),\n    marginClassName: 'line-insert',\n    isWholeLine: true\n  }),\n  lineDelete: ModelDecorationOptions.register({\n    description: 'diff-editor-line-delete',\n    className: 'line-delete',\n    marginClassName: 'line-delete',\n    isWholeLine: true\n  }),\n  lineDeleteWithSign: ModelDecorationOptions.register({\n    description: 'diff-editor-line-delete-with-sign',\n    className: 'line-delete',\n    linesDecorationsClassName: 'delete-sign ' + ThemeIcon.asClassName(diffRemoveIcon),\n    marginClassName: 'line-delete',\n    isWholeLine: true\n  }),\n  lineDeleteMargin: ModelDecorationOptions.register({\n    description: 'diff-editor-line-delete-margin',\n    marginClassName: 'line-delete'\n  })\n};\n\nclass DiffEditorWidgetSideBySide extends DiffEditorWidgetStyle {\n  constructor(dataSource, enableSplitViewResizing) {\n    super(dataSource);\n    this._disableSash = enableSplitViewResizing === false;\n    this._sashRatio = null;\n    this._sashPosition = null;\n    this._startSashPosition = null;\n    this._sash = this._register(new Sash(this._dataSource.getContainerDomNode(), this, {\n      orientation: 0\n      /* VERTICAL */\n\n    }));\n\n    if (this._disableSash) {\n      this._sash.state = 0\n      /* Disabled */\n      ;\n    }\n\n    this._sash.onDidStart(() => this._onSashDragStart());\n\n    this._sash.onDidChange(e => this._onSashDrag(e));\n\n    this._sash.onDidEnd(() => this._onSashDragEnd());\n\n    this._sash.onDidReset(() => this._onSashReset());\n  }\n\n  setEnableSplitViewResizing(enableSplitViewResizing) {\n    const newDisableSash = enableSplitViewResizing === false;\n\n    if (this._disableSash !== newDisableSash) {\n      this._disableSash = newDisableSash;\n      this._sash.state = this._disableSash ? 0\n      /* Disabled */\n      : 3\n      /* Enabled */\n      ;\n    }\n  }\n\n  layout(sashRatio = this._sashRatio) {\n    const w = this._dataSource.getWidth();\n\n    const contentWidth = w - (this._dataSource.getOptions().renderOverviewRuler ? DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH : 0);\n    let sashPosition = Math.floor((sashRatio || 0.5) * contentWidth);\n    const midPoint = Math.floor(0.5 * contentWidth);\n    sashPosition = this._disableSash ? midPoint : sashPosition || midPoint;\n\n    if (contentWidth > DiffEditorWidgetSideBySide.MINIMUM_EDITOR_WIDTH * 2) {\n      if (sashPosition < DiffEditorWidgetSideBySide.MINIMUM_EDITOR_WIDTH) {\n        sashPosition = DiffEditorWidgetSideBySide.MINIMUM_EDITOR_WIDTH;\n      }\n\n      if (sashPosition > contentWidth - DiffEditorWidgetSideBySide.MINIMUM_EDITOR_WIDTH) {\n        sashPosition = contentWidth - DiffEditorWidgetSideBySide.MINIMUM_EDITOR_WIDTH;\n      }\n    } else {\n      sashPosition = midPoint;\n    }\n\n    if (this._sashPosition !== sashPosition) {\n      this._sashPosition = sashPosition;\n\n      this._sash.layout();\n    }\n\n    return this._sashPosition;\n  }\n\n  _onSashDragStart() {\n    this._startSashPosition = this._sashPosition;\n  }\n\n  _onSashDrag(e) {\n    const w = this._dataSource.getWidth();\n\n    const contentWidth = w - (this._dataSource.getOptions().renderOverviewRuler ? DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH : 0);\n    const sashPosition = this.layout((this._startSashPosition + (e.currentX - e.startX)) / contentWidth);\n    this._sashRatio = sashPosition / contentWidth;\n\n    this._dataSource.relayoutEditors();\n  }\n\n  _onSashDragEnd() {\n    this._sash.layout();\n  }\n\n  _onSashReset() {\n    this._sashRatio = 0.5;\n\n    this._dataSource.relayoutEditors();\n\n    this._sash.layout();\n  }\n\n  getVerticalSashTop(sash) {\n    return 0;\n  }\n\n  getVerticalSashLeft(sash) {\n    return this._sashPosition;\n  }\n\n  getVerticalSashHeight(sash) {\n    return this._dataSource.getHeight();\n  }\n\n  _getViewZones(lineChanges, originalForeignVZ, modifiedForeignVZ) {\n    const originalEditor = this._dataSource.getOriginalEditor();\n\n    const modifiedEditor = this._dataSource.getModifiedEditor();\n\n    const c = new SideBySideViewZonesComputer(lineChanges, originalForeignVZ, modifiedForeignVZ, originalEditor, modifiedEditor);\n    return c.getViewZones();\n  }\n\n  _getOriginalEditorDecorations(lineChanges, ignoreTrimWhitespace, renderIndicators) {\n    const originalEditor = this._dataSource.getOriginalEditor();\n\n    const overviewZoneColor = String(this._removeColor);\n    const result = {\n      decorations: [],\n      overviewZones: []\n    };\n    const originalModel = originalEditor.getModel();\n\n    const originalViewModel = originalEditor._getViewModel();\n\n    for (const lineChange of lineChanges) {\n      if (isChangeOrDelete(lineChange)) {\n        result.decorations.push({\n          range: new Range(lineChange.originalStartLineNumber, 1, lineChange.originalEndLineNumber, 1073741824\n          /* MAX_SAFE_SMALL_INTEGER */\n          ),\n          options: renderIndicators ? DECORATIONS.lineDeleteWithSign : DECORATIONS.lineDelete\n        });\n\n        if (!isChangeOrInsert(lineChange) || !lineChange.charChanges) {\n          result.decorations.push(createDecoration(lineChange.originalStartLineNumber, 1, lineChange.originalEndLineNumber, 1073741824\n          /* MAX_SAFE_SMALL_INTEGER */\n          , DECORATIONS.charDeleteWholeLine));\n        }\n\n        const viewRange = getViewRange(originalModel, originalViewModel, lineChange.originalStartLineNumber, lineChange.originalEndLineNumber);\n        result.overviewZones.push(new OverviewRulerZone(viewRange.startLineNumber, viewRange.endLineNumber, overviewZoneColor));\n\n        if (lineChange.charChanges) {\n          for (const charChange of lineChange.charChanges) {\n            if (isChangeOrDelete(charChange)) {\n              if (ignoreTrimWhitespace) {\n                for (let lineNumber = charChange.originalStartLineNumber; lineNumber <= charChange.originalEndLineNumber; lineNumber++) {\n                  let startColumn;\n                  let endColumn;\n\n                  if (lineNumber === charChange.originalStartLineNumber) {\n                    startColumn = charChange.originalStartColumn;\n                  } else {\n                    startColumn = originalModel.getLineFirstNonWhitespaceColumn(lineNumber);\n                  }\n\n                  if (lineNumber === charChange.originalEndLineNumber) {\n                    endColumn = charChange.originalEndColumn;\n                  } else {\n                    endColumn = originalModel.getLineLastNonWhitespaceColumn(lineNumber);\n                  }\n\n                  result.decorations.push(createDecoration(lineNumber, startColumn, lineNumber, endColumn, DECORATIONS.charDelete));\n                }\n              } else {\n                result.decorations.push(createDecoration(charChange.originalStartLineNumber, charChange.originalStartColumn, charChange.originalEndLineNumber, charChange.originalEndColumn, DECORATIONS.charDelete));\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return result;\n  }\n\n  _getModifiedEditorDecorations(lineChanges, ignoreTrimWhitespace, renderIndicators) {\n    const modifiedEditor = this._dataSource.getModifiedEditor();\n\n    const overviewZoneColor = String(this._insertColor);\n    const result = {\n      decorations: [],\n      overviewZones: []\n    };\n    const modifiedModel = modifiedEditor.getModel();\n\n    const modifiedViewModel = modifiedEditor._getViewModel();\n\n    for (const lineChange of lineChanges) {\n      if (isChangeOrInsert(lineChange)) {\n        result.decorations.push({\n          range: new Range(lineChange.modifiedStartLineNumber, 1, lineChange.modifiedEndLineNumber, 1073741824\n          /* MAX_SAFE_SMALL_INTEGER */\n          ),\n          options: renderIndicators ? DECORATIONS.lineInsertWithSign : DECORATIONS.lineInsert\n        });\n\n        if (!isChangeOrDelete(lineChange) || !lineChange.charChanges) {\n          result.decorations.push(createDecoration(lineChange.modifiedStartLineNumber, 1, lineChange.modifiedEndLineNumber, 1073741824\n          /* MAX_SAFE_SMALL_INTEGER */\n          , DECORATIONS.charInsertWholeLine));\n        }\n\n        const viewRange = getViewRange(modifiedModel, modifiedViewModel, lineChange.modifiedStartLineNumber, lineChange.modifiedEndLineNumber);\n        result.overviewZones.push(new OverviewRulerZone(viewRange.startLineNumber, viewRange.endLineNumber, overviewZoneColor));\n\n        if (lineChange.charChanges) {\n          for (const charChange of lineChange.charChanges) {\n            if (isChangeOrInsert(charChange)) {\n              if (ignoreTrimWhitespace) {\n                for (let lineNumber = charChange.modifiedStartLineNumber; lineNumber <= charChange.modifiedEndLineNumber; lineNumber++) {\n                  let startColumn;\n                  let endColumn;\n\n                  if (lineNumber === charChange.modifiedStartLineNumber) {\n                    startColumn = charChange.modifiedStartColumn;\n                  } else {\n                    startColumn = modifiedModel.getLineFirstNonWhitespaceColumn(lineNumber);\n                  }\n\n                  if (lineNumber === charChange.modifiedEndLineNumber) {\n                    endColumn = charChange.modifiedEndColumn;\n                  } else {\n                    endColumn = modifiedModel.getLineLastNonWhitespaceColumn(lineNumber);\n                  }\n\n                  result.decorations.push(createDecoration(lineNumber, startColumn, lineNumber, endColumn, DECORATIONS.charInsert));\n                }\n              } else {\n                result.decorations.push(createDecoration(charChange.modifiedStartLineNumber, charChange.modifiedStartColumn, charChange.modifiedEndLineNumber, charChange.modifiedEndColumn, DECORATIONS.charInsert));\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return result;\n  }\n\n}\n\nDiffEditorWidgetSideBySide.MINIMUM_EDITOR_WIDTH = 100;\n\nclass SideBySideViewZonesComputer extends ViewZonesComputer {\n  constructor(lineChanges, originalForeignVZ, modifiedForeignVZ, originalEditor, modifiedEditor) {\n    super(lineChanges, originalForeignVZ, modifiedForeignVZ, originalEditor, modifiedEditor);\n  }\n\n  _createOriginalMarginDomNodeForModifiedForeignViewZoneInAddedRegion() {\n    return null;\n  }\n\n  _produceOriginalFromDiff(lineChange, lineChangeOriginalLength, lineChangeModifiedLength) {\n    if (lineChangeModifiedLength > lineChangeOriginalLength) {\n      return {\n        afterLineNumber: Math.max(lineChange.originalStartLineNumber, lineChange.originalEndLineNumber),\n        heightInLines: lineChangeModifiedLength - lineChangeOriginalLength,\n        domNode: null\n      };\n    }\n\n    return null;\n  }\n\n  _produceModifiedFromDiff(lineChange, lineChangeOriginalLength, lineChangeModifiedLength) {\n    if (lineChangeOriginalLength > lineChangeModifiedLength) {\n      return {\n        afterLineNumber: Math.max(lineChange.modifiedStartLineNumber, lineChange.modifiedEndLineNumber),\n        heightInLines: lineChangeOriginalLength - lineChangeModifiedLength,\n        domNode: null\n      };\n    }\n\n    return null;\n  }\n\n}\n\nclass DiffEditorWidgetInline extends DiffEditorWidgetStyle {\n  constructor(dataSource, enableSplitViewResizing) {\n    super(dataSource);\n    this._decorationsLeft = dataSource.getOriginalEditor().getLayoutInfo().decorationsLeft;\n\n    this._register(dataSource.getOriginalEditor().onDidLayoutChange(layoutInfo => {\n      if (this._decorationsLeft !== layoutInfo.decorationsLeft) {\n        this._decorationsLeft = layoutInfo.decorationsLeft;\n        dataSource.relayoutEditors();\n      }\n    }));\n  }\n\n  setEnableSplitViewResizing(enableSplitViewResizing) {// Nothing to do..\n  }\n\n  _getViewZones(lineChanges, originalForeignVZ, modifiedForeignVZ, renderIndicators) {\n    const originalEditor = this._dataSource.getOriginalEditor();\n\n    const modifiedEditor = this._dataSource.getModifiedEditor();\n\n    const computer = new InlineViewZonesComputer(lineChanges, originalForeignVZ, modifiedForeignVZ, originalEditor, modifiedEditor, renderIndicators);\n    return computer.getViewZones();\n  }\n\n  _getOriginalEditorDecorations(lineChanges, ignoreTrimWhitespace, renderIndicators) {\n    const overviewZoneColor = String(this._removeColor);\n    const result = {\n      decorations: [],\n      overviewZones: []\n    };\n\n    const originalEditor = this._dataSource.getOriginalEditor();\n\n    const originalModel = originalEditor.getModel();\n\n    const originalViewModel = originalEditor._getViewModel();\n\n    for (const lineChange of lineChanges) {\n      // Add overview zones in the overview ruler\n      if (isChangeOrDelete(lineChange)) {\n        result.decorations.push({\n          range: new Range(lineChange.originalStartLineNumber, 1, lineChange.originalEndLineNumber, 1073741824\n          /* MAX_SAFE_SMALL_INTEGER */\n          ),\n          options: DECORATIONS.lineDeleteMargin\n        });\n        const viewRange = getViewRange(originalModel, originalViewModel, lineChange.originalStartLineNumber, lineChange.originalEndLineNumber);\n        result.overviewZones.push(new OverviewRulerZone(viewRange.startLineNumber, viewRange.endLineNumber, overviewZoneColor));\n      }\n    }\n\n    return result;\n  }\n\n  _getModifiedEditorDecorations(lineChanges, ignoreTrimWhitespace, renderIndicators) {\n    const modifiedEditor = this._dataSource.getModifiedEditor();\n\n    const overviewZoneColor = String(this._insertColor);\n    const result = {\n      decorations: [],\n      overviewZones: []\n    };\n    const modifiedModel = modifiedEditor.getModel();\n\n    const modifiedViewModel = modifiedEditor._getViewModel();\n\n    for (const lineChange of lineChanges) {\n      // Add decorations & overview zones\n      if (isChangeOrInsert(lineChange)) {\n        result.decorations.push({\n          range: new Range(lineChange.modifiedStartLineNumber, 1, lineChange.modifiedEndLineNumber, 1073741824\n          /* MAX_SAFE_SMALL_INTEGER */\n          ),\n          options: renderIndicators ? DECORATIONS.lineInsertWithSign : DECORATIONS.lineInsert\n        });\n        const viewRange = getViewRange(modifiedModel, modifiedViewModel, lineChange.modifiedStartLineNumber, lineChange.modifiedEndLineNumber);\n        result.overviewZones.push(new OverviewRulerZone(viewRange.startLineNumber, viewRange.endLineNumber, overviewZoneColor));\n\n        if (lineChange.charChanges) {\n          for (const charChange of lineChange.charChanges) {\n            if (isChangeOrInsert(charChange)) {\n              if (ignoreTrimWhitespace) {\n                for (let lineNumber = charChange.modifiedStartLineNumber; lineNumber <= charChange.modifiedEndLineNumber; lineNumber++) {\n                  let startColumn;\n                  let endColumn;\n\n                  if (lineNumber === charChange.modifiedStartLineNumber) {\n                    startColumn = charChange.modifiedStartColumn;\n                  } else {\n                    startColumn = modifiedModel.getLineFirstNonWhitespaceColumn(lineNumber);\n                  }\n\n                  if (lineNumber === charChange.modifiedEndLineNumber) {\n                    endColumn = charChange.modifiedEndColumn;\n                  } else {\n                    endColumn = modifiedModel.getLineLastNonWhitespaceColumn(lineNumber);\n                  }\n\n                  result.decorations.push(createDecoration(lineNumber, startColumn, lineNumber, endColumn, DECORATIONS.charInsert));\n                }\n              } else {\n                result.decorations.push(createDecoration(charChange.modifiedStartLineNumber, charChange.modifiedStartColumn, charChange.modifiedEndLineNumber, charChange.modifiedEndColumn, DECORATIONS.charInsert));\n              }\n            }\n          }\n        } else {\n          result.decorations.push(createDecoration(lineChange.modifiedStartLineNumber, 1, lineChange.modifiedEndLineNumber, 1073741824\n          /* MAX_SAFE_SMALL_INTEGER */\n          , DECORATIONS.charInsertWholeLine));\n        }\n      }\n    }\n\n    return result;\n  }\n\n  layout() {\n    // An editor should not be smaller than 5px\n    return Math.max(5, this._decorationsLeft);\n  }\n\n}\n\nclass InlineViewZonesComputer extends ViewZonesComputer {\n  constructor(lineChanges, originalForeignVZ, modifiedForeignVZ, originalEditor, modifiedEditor, renderIndicators) {\n    super(lineChanges, originalForeignVZ, modifiedForeignVZ, originalEditor, modifiedEditor);\n    this._originalModel = originalEditor.getModel();\n    this._renderIndicators = renderIndicators;\n    this._pendingLineChange = [];\n    this._pendingViewZones = [];\n    this._lineBreaksComputer = this._modifiedEditor._getViewModel().createLineBreaksComputer();\n  }\n\n  getViewZones() {\n    const result = super.getViewZones();\n\n    this._finalize(result);\n\n    return result;\n  }\n\n  _createOriginalMarginDomNodeForModifiedForeignViewZoneInAddedRegion() {\n    const result = document.createElement('div');\n    result.className = 'inline-added-margin-view-zone';\n    return result;\n  }\n\n  _produceOriginalFromDiff(lineChange, lineChangeOriginalLength, lineChangeModifiedLength) {\n    const marginDomNode = document.createElement('div');\n    marginDomNode.className = 'inline-added-margin-view-zone';\n    return {\n      afterLineNumber: Math.max(lineChange.originalStartLineNumber, lineChange.originalEndLineNumber),\n      heightInLines: lineChangeModifiedLength,\n      domNode: document.createElement('div'),\n      marginDomNode: marginDomNode\n    };\n  }\n\n  _produceModifiedFromDiff(lineChange, lineChangeOriginalLength, lineChangeModifiedLength) {\n    const domNode = document.createElement('div');\n    domNode.className = `view-lines line-delete ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`;\n    const marginDomNode = document.createElement('div');\n    marginDomNode.className = 'inline-deleted-margin-view-zone';\n    const viewZone = {\n      shouldNotShrink: true,\n      afterLineNumber: lineChange.modifiedEndLineNumber === 0 ? lineChange.modifiedStartLineNumber : lineChange.modifiedStartLineNumber - 1,\n      heightInLines: lineChangeOriginalLength,\n      minWidthInPx: 0,\n      domNode: domNode,\n      marginDomNode: marginDomNode,\n      diff: {\n        originalStartLineNumber: lineChange.originalStartLineNumber,\n        originalEndLineNumber: lineChange.originalEndLineNumber,\n        modifiedStartLineNumber: lineChange.modifiedStartLineNumber,\n        modifiedEndLineNumber: lineChange.modifiedEndLineNumber,\n        originalModel: this._originalModel,\n        viewLineCounts: null\n      }\n    };\n\n    for (let lineNumber = lineChange.originalStartLineNumber; lineNumber <= lineChange.originalEndLineNumber; lineNumber++) {\n      this._lineBreaksComputer.addRequest(this._originalModel.getLineContent(lineNumber), null, null);\n    }\n\n    this._pendingLineChange.push(lineChange);\n\n    this._pendingViewZones.push(viewZone);\n\n    return viewZone;\n  }\n\n  _finalize(result) {\n    const modifiedEditorOptions = this._modifiedEditor.getOptions();\n\n    const tabSize = this._modifiedEditor.getModel().getOptions().tabSize;\n\n    const fontInfo = modifiedEditorOptions.get(44\n    /* fontInfo */\n    );\n    const disableMonospaceOptimizations = modifiedEditorOptions.get(29\n    /* disableMonospaceOptimizations */\n    );\n    const typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n    const scrollBeyondLastColumn = modifiedEditorOptions.get(93\n    /* scrollBeyondLastColumn */\n    );\n\n    const mightContainNonBasicASCII = this._originalModel.mightContainNonBasicASCII();\n\n    const mightContainRTL = this._originalModel.mightContainRTL();\n\n    const lineHeight = modifiedEditorOptions.get(59\n    /* lineHeight */\n    );\n    const layoutInfo = modifiedEditorOptions.get(131\n    /* layoutInfo */\n    );\n    const lineDecorationsWidth = layoutInfo.decorationsWidth;\n    const stopRenderingLineAfter = modifiedEditorOptions.get(105\n    /* stopRenderingLineAfter */\n    );\n    const renderWhitespace = modifiedEditorOptions.get(88\n    /* renderWhitespace */\n    );\n    const renderControlCharacters = modifiedEditorOptions.get(83\n    /* renderControlCharacters */\n    );\n    const fontLigatures = modifiedEditorOptions.get(45\n    /* fontLigatures */\n    );\n\n    const lineBreaks = this._lineBreaksComputer.finalize();\n\n    let lineBreakIndex = 0;\n\n    for (let i = 0; i < this._pendingLineChange.length; i++) {\n      const lineChange = this._pendingLineChange[i];\n      const viewZone = this._pendingViewZones[i];\n      const domNode = viewZone.domNode;\n      applyFontInfo(domNode, fontInfo);\n      const marginDomNode = viewZone.marginDomNode;\n      applyFontInfo(marginDomNode, fontInfo);\n      const decorations = [];\n\n      if (lineChange.charChanges) {\n        for (const charChange of lineChange.charChanges) {\n          if (isChangeOrDelete(charChange)) {\n            decorations.push(new InlineDecoration(new Range(charChange.originalStartLineNumber, charChange.originalStartColumn, charChange.originalEndLineNumber, charChange.originalEndColumn), 'char-delete', 0\n            /* Regular */\n            ));\n          }\n        }\n      }\n\n      const hasCharChanges = decorations.length > 0;\n      const sb = createStringBuilder(10000);\n      let maxCharsPerLine = 0;\n      let renderedLineCount = 0;\n      let viewLineCounts = null;\n\n      for (let lineNumber = lineChange.originalStartLineNumber; lineNumber <= lineChange.originalEndLineNumber; lineNumber++) {\n        const lineIndex = lineNumber - lineChange.originalStartLineNumber;\n\n        const lineTokens = this._originalModel.getLineTokens(lineNumber);\n\n        const lineContent = lineTokens.getLineContent();\n        const lineBreakData = lineBreaks[lineBreakIndex++];\n        const actualDecorations = LineDecoration.filter(decorations, lineNumber, 1, lineContent.length + 1);\n\n        if (lineBreakData) {\n          let lastBreakOffset = 0;\n\n          for (const breakOffset of lineBreakData.breakOffsets) {\n            const viewLineTokens = lineTokens.sliceAndInflate(lastBreakOffset, breakOffset, 0);\n            const viewLineContent = lineContent.substring(lastBreakOffset, breakOffset);\n            maxCharsPerLine = Math.max(maxCharsPerLine, this._renderOriginalLine(renderedLineCount++, viewLineContent, viewLineTokens, LineDecoration.extractWrapped(actualDecorations, lastBreakOffset, breakOffset), hasCharChanges, mightContainNonBasicASCII, mightContainRTL, fontInfo, disableMonospaceOptimizations, lineHeight, lineDecorationsWidth, stopRenderingLineAfter, renderWhitespace, renderControlCharacters, fontLigatures, tabSize, sb, marginDomNode));\n            lastBreakOffset = breakOffset;\n          }\n\n          if (!viewLineCounts) {\n            viewLineCounts = [];\n          } // make sure all lines before this one have an entry in `viewLineCounts`\n\n\n          while (viewLineCounts.length < lineIndex) {\n            viewLineCounts[viewLineCounts.length] = 1;\n          }\n\n          viewLineCounts[lineIndex] = lineBreakData.breakOffsets.length;\n          viewZone.heightInLines += lineBreakData.breakOffsets.length - 1;\n          const marginDomNode2 = document.createElement('div');\n          marginDomNode2.className = 'line-delete';\n          result.original.push({\n            afterLineNumber: lineNumber,\n            afterColumn: 0,\n            heightInLines: lineBreakData.breakOffsets.length - 1,\n            domNode: createFakeLinesDiv(),\n            marginDomNode: marginDomNode2\n          });\n        } else {\n          maxCharsPerLine = Math.max(maxCharsPerLine, this._renderOriginalLine(renderedLineCount++, lineContent, lineTokens, actualDecorations, hasCharChanges, mightContainNonBasicASCII, mightContainRTL, fontInfo, disableMonospaceOptimizations, lineHeight, lineDecorationsWidth, stopRenderingLineAfter, renderWhitespace, renderControlCharacters, fontLigatures, tabSize, sb, marginDomNode));\n        }\n      }\n\n      maxCharsPerLine += scrollBeyondLastColumn;\n      const html = sb.build();\n      const trustedhtml = ttPolicy ? ttPolicy.createHTML(html) : html;\n      domNode.innerHTML = trustedhtml;\n      viewZone.minWidthInPx = maxCharsPerLine * typicalHalfwidthCharacterWidth;\n\n      if (viewLineCounts) {\n        // make sure all lines have an entry in `viewLineCounts`\n        const cnt = lineChange.originalEndLineNumber - lineChange.originalStartLineNumber;\n\n        while (viewLineCounts.length <= cnt) {\n          viewLineCounts[viewLineCounts.length] = 1;\n        }\n      }\n\n      viewZone.diff.viewLineCounts = viewLineCounts;\n    }\n\n    result.original.sort((a, b) => {\n      return a.afterLineNumber - b.afterLineNumber;\n    });\n  }\n\n  _renderOriginalLine(renderedLineCount, lineContent, lineTokens, decorations, hasCharChanges, mightContainNonBasicASCII, mightContainRTL, fontInfo, disableMonospaceOptimizations, lineHeight, lineDecorationsWidth, stopRenderingLineAfter, renderWhitespace, renderControlCharacters, fontLigatures, tabSize, sb, marginDomNode) {\n    sb.appendASCIIString('<div class=\"view-line');\n\n    if (!hasCharChanges) {\n      // No char changes\n      sb.appendASCIIString(' char-delete');\n    }\n\n    sb.appendASCIIString('\" style=\"top:');\n    sb.appendASCIIString(String(renderedLineCount * lineHeight));\n    sb.appendASCIIString('px;width:1000000px;\">');\n    const isBasicASCII = ViewLineRenderingData.isBasicASCII(lineContent, mightContainNonBasicASCII);\n    const containsRTL = ViewLineRenderingData.containsRTL(lineContent, isBasicASCII, mightContainRTL);\n    const output = renderViewLine(new RenderLineInput(fontInfo.isMonospace && !disableMonospaceOptimizations, fontInfo.canUseHalfwidthRightwardsArrow, lineContent, false, isBasicASCII, containsRTL, 0, lineTokens, decorations, tabSize, 0, fontInfo.spaceWidth, fontInfo.middotWidth, fontInfo.wsmiddotWidth, stopRenderingLineAfter, renderWhitespace, renderControlCharacters, fontLigatures !== EditorFontLigatures.OFF, null // Send no selections, original line cannot be selected\n    ), sb);\n    sb.appendASCIIString('</div>');\n\n    if (this._renderIndicators) {\n      const marginElement = document.createElement('div');\n      marginElement.className = `delete-sign ${ThemeIcon.asClassName(diffRemoveIcon)}`;\n      marginElement.setAttribute('style', `position:absolute;top:${renderedLineCount * lineHeight}px;width:${lineDecorationsWidth}px;height:${lineHeight}px;right:0;`);\n      marginDomNode.appendChild(marginElement);\n    }\n\n    return output.characterMapping.getAbsoluteOffset(output.characterMapping.length);\n  }\n\n}\n\nfunction validateDiffWordWrap(value, defaultValue) {\n  return validateStringSetOption(value, defaultValue, ['off', 'on', 'inherit']);\n}\n\nfunction isChangeOrInsert(lineChange) {\n  return lineChange.modifiedEndLineNumber > 0;\n}\n\nfunction isChangeOrDelete(lineChange) {\n  return lineChange.originalEndLineNumber > 0;\n}\n\nfunction createFakeLinesDiv() {\n  const r = document.createElement('div');\n  r.className = 'diagonal-fill';\n  return r;\n}\n\nfunction getViewRange(model, viewModel, startLineNumber, endLineNumber) {\n  const lineCount = model.getLineCount();\n  startLineNumber = Math.min(lineCount, Math.max(1, startLineNumber));\n  endLineNumber = Math.min(lineCount, Math.max(1, endLineNumber));\n  return viewModel.coordinatesConverter.convertModelRangeToViewRange(new Range(startLineNumber, model.getLineMinColumn(startLineNumber), endLineNumber, model.getLineMaxColumn(endLineNumber)));\n}\n\nfunction validateDiffEditorOptions(options, defaults) {\n  return {\n    enableSplitViewResizing: validateBooleanOption(options.enableSplitViewResizing, defaults.enableSplitViewResizing),\n    renderSideBySide: validateBooleanOption(options.renderSideBySide, defaults.renderSideBySide),\n    maxComputationTime: clampedInt(options.maxComputationTime, defaults.maxComputationTime, 0, 1073741824\n    /* MAX_SAFE_SMALL_INTEGER */\n    ),\n    maxFileSize: clampedInt(options.maxFileSize, defaults.maxFileSize, 0, 1073741824\n    /* MAX_SAFE_SMALL_INTEGER */\n    ),\n    ignoreTrimWhitespace: validateBooleanOption(options.ignoreTrimWhitespace, defaults.ignoreTrimWhitespace),\n    renderIndicators: validateBooleanOption(options.renderIndicators, defaults.renderIndicators),\n    originalEditable: validateBooleanOption(options.originalEditable, defaults.originalEditable),\n    diffCodeLens: validateBooleanOption(options.diffCodeLens, defaults.diffCodeLens),\n    renderOverviewRuler: validateBooleanOption(options.renderOverviewRuler, defaults.renderOverviewRuler),\n    diffWordWrap: validateDiffWordWrap(options.diffWordWrap, defaults.diffWordWrap)\n  };\n}\n\nfunction changedDiffEditorOptions(a, b) {\n  return {\n    enableSplitViewResizing: a.enableSplitViewResizing !== b.enableSplitViewResizing,\n    renderSideBySide: a.renderSideBySide !== b.renderSideBySide,\n    maxComputationTime: a.maxComputationTime !== b.maxComputationTime,\n    maxFileSize: a.maxFileSize !== b.maxFileSize,\n    ignoreTrimWhitespace: a.ignoreTrimWhitespace !== b.ignoreTrimWhitespace,\n    renderIndicators: a.renderIndicators !== b.renderIndicators,\n    originalEditable: a.originalEditable !== b.originalEditable,\n    diffCodeLens: a.diffCodeLens !== b.diffCodeLens,\n    renderOverviewRuler: a.renderOverviewRuler !== b.renderOverviewRuler,\n    diffWordWrap: a.diffWordWrap !== b.diffWordWrap\n  };\n}\n\nregisterThemingParticipant((theme, collector) => {\n  const added = theme.getColor(diffInserted);\n\n  if (added) {\n    collector.addRule(`.monaco-editor .line-insert, .monaco-editor .char-insert { background-color: ${added}; }`);\n    collector.addRule(`.monaco-diff-editor .line-insert, .monaco-diff-editor .char-insert { background-color: ${added}; }`);\n    collector.addRule(`.monaco-editor .inline-added-margin-view-zone { background-color: ${added}; }`);\n  }\n\n  const removed = theme.getColor(diffRemoved);\n\n  if (removed) {\n    collector.addRule(`.monaco-editor .line-delete, .monaco-editor .char-delete { background-color: ${removed}; }`);\n    collector.addRule(`.monaco-diff-editor .line-delete, .monaco-diff-editor .char-delete { background-color: ${removed}; }`);\n    collector.addRule(`.monaco-editor .inline-deleted-margin-view-zone { background-color: ${removed}; }`);\n  }\n\n  const addedOutline = theme.getColor(diffInsertedOutline);\n\n  if (addedOutline) {\n    collector.addRule(`.monaco-editor .line-insert, .monaco-editor .char-insert { border: 1px ${theme.type === 'hc' ? 'dashed' : 'solid'} ${addedOutline}; }`);\n  }\n\n  const removedOutline = theme.getColor(diffRemovedOutline);\n\n  if (removedOutline) {\n    collector.addRule(`.monaco-editor .line-delete, .monaco-editor .char-delete { border: 1px ${theme.type === 'hc' ? 'dashed' : 'solid'} ${removedOutline}; }`);\n  }\n\n  const shadow = theme.getColor(scrollbarShadow);\n\n  if (shadow) {\n    collector.addRule(`.monaco-diff-editor.side-by-side .editor.modified { box-shadow: -6px 0 5px -5px ${shadow}; }`);\n  }\n\n  const border = theme.getColor(diffBorder);\n\n  if (border) {\n    collector.addRule(`.monaco-diff-editor.side-by-side .editor.modified { border-left: 1px solid ${border}; }`);\n  }\n\n  const scrollbarSliderBackgroundColor = theme.getColor(scrollbarSliderBackground);\n\n  if (scrollbarSliderBackgroundColor) {\n    collector.addRule(`\n\t\t\t.monaco-diff-editor .diffViewport {\n\t\t\t\tbackground: ${scrollbarSliderBackgroundColor};\n\t\t\t}\n\t\t`);\n  }\n\n  const scrollbarSliderHoverBackgroundColor = theme.getColor(scrollbarSliderHoverBackground);\n\n  if (scrollbarSliderHoverBackgroundColor) {\n    collector.addRule(`\n\t\t\t.monaco-diff-editor .diffViewport:hover {\n\t\t\t\tbackground: ${scrollbarSliderHoverBackgroundColor};\n\t\t\t}\n\t\t`);\n  }\n\n  const scrollbarSliderActiveBackgroundColor = theme.getColor(scrollbarSliderActiveBackground);\n\n  if (scrollbarSliderActiveBackgroundColor) {\n    collector.addRule(`\n\t\t\t.monaco-diff-editor .diffViewport:active {\n\t\t\t\tbackground: ${scrollbarSliderActiveBackgroundColor};\n\t\t\t}\n\t\t`);\n  }\n\n  const diffDiagonalFillColor = theme.getColor(diffDiagonalFill);\n  collector.addRule(`\n\t.monaco-editor .diagonal-fill {\n\t\tbackground-image: linear-gradient(\n\t\t\t-45deg,\n\t\t\t${diffDiagonalFillColor} 12.5%,\n\t\t\t#0000 12.5%, #0000 50%,\n\t\t\t${diffDiagonalFillColor} 50%, ${diffDiagonalFillColor} 62.5%,\n\t\t\t#0000 62.5%, #0000 100%\n\t\t);\n\t\tbackground-size: 8px 8px;\n\t}\n\t`);\n});","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/browser/widget/diffEditorWidget.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","_a","nls","dom","createFastDomNode","Sash","RunOnceScheduler","Emitter","Disposable","applyFontInfo","StableEditorScrollState","ICodeEditorService","CodeEditorWidget","DiffReview","EditorOptions","EditorFontLigatures","stringSet","validateStringSetOption","boolean","validateBooleanOption","clampedInt","Range","createStringBuilder","editorCommon","ModelDecorationOptions","IEditorWorkerService","OverviewRulerZone","LineDecoration","RenderLineInput","renderViewLine","InlineDecoration","ViewLineRenderingData","IContextKeyService","IInstantiationService","ServiceCollection","INotificationService","defaultInsertColor","defaultRemoveColor","diffBorder","diffInserted","diffInsertedOutline","diffRemoved","diffRemovedOutline","scrollbarShadow","scrollbarSliderBackground","scrollbarSliderHoverBackground","scrollbarSliderActiveBackground","diffDiagonalFill","IThemeService","getThemeTypeSelector","registerThemingParticipant","ThemeIcon","IContextMenuService","InlineDiffMargin","IClipboardService","EditorExtensionsRegistry","onUnexpectedError","IEditorProgressService","ElementSizeObserver","Codicon","MOUSE_CURSOR_TEXT_CSS_CLASS_NAME","registerIcon","VisualEditorState","constructor","_contextMenuService","_clipboardService","_zones","_inlineDiffMargins","_zonesMap","_decorations","getForeignViewZones","allViewZones","filter","z","String","id","clean","editor","changeViewZones","viewChangeAccessor","zoneId","removeZone","deltaDecorations","apply","overviewRuler","newDecorations","restoreScrollState","scrollState","capture","inlineDiffMargin","dispose","zones","viewZone","suppressMouseDown","addZone","push","diff","marginDomNode","originalModel","getValueLength","restore","decorations","setZones","overviewZones","DIFF_EDITOR_ID","diffInsertIcon","add","localize","diffRemoveIcon","remove","ttPolicy","window","trustedTypes","createPolicy","createHTML","value","DiffEditorWidget","domElement","options","codeEditorWidgetOptions","clipboardService","editorWorkerService","contextKeyService","instantiationService","codeEditorService","themeService","notificationService","contextMenuService","_editorProgressService","_onDidDispose","_register","onDidDispose","event","_onDidUpdateDiff","onDidUpdateDiff","_onDidContentSizeChange","_lastOriginalWarning","_lastModifiedWarning","_editorWorkerService","_codeEditorService","_contextKeyService","createScoped","_instantiationService","createChild","createKey","_themeService","_notificationService","_id","_state","_updatingDiffProgress","_domElement","_options","validateDiffEditorOptions","enableSplitViewResizing","renderSideBySide","maxComputationTime","maxFileSize","ignoreTrimWhitespace","renderIndicators","originalEditable","diffCodeLens","renderOverviewRuler","diffWordWrap","isInEmbeddedEditor","_updateDecorationsRunner","_updateDecorations","_containerDomElement","document","createElement","className","_getClassName","getColorTheme","style","position","height","appendChild","_overviewViewportDomElement","setClassName","setPosition","_overviewDomElement","domNode","addStandardDisposableListener","e","_modifiedEditor","delegateVerticalScrollbarMouseDown","_originalDomNode","_modifiedDomNode","_beginUpdateDecorationsTimeout","_currentlyChangingViewZones","_diffComputationToken","_originalEditorState","_modifiedEditorState","_isVisible","_isHandlingScrollEvent","_elementSizeObserver","dimension","onDidChange","_onDidContainerSizeChanged","automaticLayout","startObserving","_diffComputationResult","_originalEditor","_createLeftHandSideEditor","originalEditor","_createRightHandSideEditor","modifiedEditor","_originalOverviewRuler","_modifiedOverviewRuler","_reviewPane","createInstance","shadow","actionBarContainer","_setStrategy","DiffEditorWidgetSideBySide","_createDataSource","DiffEditorWidgetInline","onDidColorThemeChange","t","_strategy","applyColors","schedule","contributions","getDiffEditorContributions","ctor","err","addDiffEditor","_setState","newState","done","show","diffReviewNext","next","diffReviewPrev","prev","theme","result","type","_recreateOverviewRulers","removeChild","getDomNode","hasModel","createOverviewRuler","_layoutOverviewRulers","_createInnerEditor","_adjustOptionsForLeftHandSide","onDidScrollChange","scrollTopChanged","scrollLeftChanged","scrollHeightChanged","setScrollPosition","scrollLeft","scrollTop","_layoutOverviewViewport","onDidChangeViewZones","_onViewZonesChanged","onDidChangeConfiguration","getModel","hasChanged","cancel","onDidChangeHiddenAreas","onDidChangeModelContent","_beginUpdateDecorationsSoon","isInDiffLeftEditorKey","hasWidgetFocus","onDidFocusEditorWidget","set","onDidBlurEditorWidget","onDidContentSizeChange","width","getContentWidth","ONE_OVERVIEW_WIDTH","Math","max","getContentHeight","fire","contentHeight","contentWidth","contentHeightChanged","contentWidthChanged","_adjustOptionsForRightHandSide","onDidChangeModelOptions","tabSize","isInDiffRightEditorKey","container","editorWidgetOptions","removeDiffEditor","clearTimeout","_cleanViewZonesAndDecorations","getId","getEditorType","EditorType","IDiffEditor","getLineChanges","changes","getOriginalEditor","getModifiedEditor","updateOptions","_newOptions","newOptions","changed","changedDiffEditorOptions","beginUpdateDecorations","beginUpdateDecorationsSoon","_beginUpdateDecorations","setEnableSplitViewResizing","original","modified","setModel","model","Error","setScrollTop","getContainerDomNode","getVisibleColumnFromPosition","getPosition","revealLine","lineNumber","scrollType","revealLineInCenter","revealLineInCenterIfOutsideViewport","revealLineNearTop","revealPosition","revealPositionInCenter","revealPositionInCenterIfOutsideViewport","revealPositionNearTop","getSelection","getSelections","setSelection","something","setSelections","ranges","revealLines","startLineNumber","endLineNumber","revealLinesInCenter","revealLinesInCenterIfOutsideViewport","revealLinesNearTop","revealRange","range","revealVerticalInCenter","revealHorizontal","revealRangeInCenter","revealRangeInCenterIfOutsideViewport","revealRangeNearTop","revealRangeNearTopIfOutsideViewport","revealRangeAtTop","getSupportedActions","saveViewState","originalViewState","modifiedViewState","restoreViewState","s","diffEditorState","layout","observe","focus","hasTextFocus","trigger","source","handlerId","payload","changeDecorations","callback","_doLayout","_getReviewHeight","isVisible","getHeight","reviewHeight","freeSpace","ENTIRE_DIFF_OVERVIEW_WIDTH","layoutInfo","getLayoutInfo","setLayout","top","right","setTimeout","UPDATE_DIFF_DECORATIONS_DELAY","_equals","a","b","toString","currentOriginalModel","currentModifiedModel","currentToken","diffLimit","canSyncModelForDiff","bufferTextLength","uri","warn","computeDiff","then","error","lineChanges","foreignOriginal","getWhitespaces","foreignModified","diffDecorations","getEditorsDiffDecorations","_adjustOptionsForSubEditor","clonedOptions","assign","inDiffEditor","scrollbar","vertical","folding","codeLens","fixedOverflowWidgets","minimap","enabled","wordWrapOverride1","originalAriaLabel","ariaLabel","readOnly","extraEditorClassName","modifiedAriaLabel","revealHorizontalRightPadding","defaultValue","verticalHasArrows","doLayout","getWidth","splitPoint","left","setWidth","setHeight","_computeOverviewViewport","setTop","getScrollTop","scrollHeight","getScrollHeight","computedAvailableSize","computedRepresentableSize","computedRatio","computedSliderSize","floor","computedSliderPosition","getOptions","relayoutEditors","newStrategy","_getLineChangeAtOrBeforeLineNumber","startLineNumberExtractor","min","mid","midStart","midEnd","_getEquivalentLineForOriginalLineNumber","lineChange","originalStartLineNumber","originalEquivalentLineNumber","originalEndLineNumber","modifiedEquivalentLineNumber","modifiedStartLineNumber","modifiedEndLineNumber","lineChangeOriginalLength","lineChangeModifiedLength","delta","_getEquivalentLineForModifiedLineNumber","getDiffLineInformationForOriginal","equivalentLineNumber","getDiffLineInformationForModified","DiffEditorWidgetStyle","dataSource","_dataSource","_insertColor","_removeColor","newInsertColor","getColor","transparent","newRemoveColor","hasChanges","equals","originalWhitespaces","modifiedWhitespaces","sort","afterLineNumber","_getViewZones","originalDecorations","_getOriginalEditorDecorations","modifiedDecorations","_getModifiedEditorDecorations","ForeignViewZonesIterator","_source","_index","current","advance","ViewZonesComputer","_lineChanges","_originalForeignVZ","_modifiedForeignVZ","_getViewLineCount","viewModel","_getViewModel","viewRange","getViewRange","getViewZones","originalLineHeight","getOption","modifiedLineHeight","originalHasWrapping","wrappingColumn","modifiedHasWrapping","hasWrapping","originalCoordinatesConverter","coordinatesConverter","modifiedCoordinatesConverter","originalEndEquivalentLineNumber","modifiedEndEquivalentLineNumber","sortMyViewZones","addAndCombineIfPossible","destination","item","lastItem","heightInLines","modifiedForeignVZ","originalForeignVZ","lastOriginalLineNumber","lastModifiedLineNumber","stepOriginal","stepModified","count","getLineCount","originalLineNumber","modifiedLineNumber","originalViewLineCount","getModelLineViewLineCount","modifiedViewLineCount","viewZoneLineNumber","_createOriginalMarginDomNodeForModifiedForeignViewZoneInAddedRegion","isChangeOrInsert","_produceOriginalFromDiff","isChangeOrDelete","_produceModifiedFromDiff","stepOriginalIndex","stepModifiedIndex","originalDelta","modifiedDelta","shouldNotShrink","_ensureDomNodes","map","createFakeLinesDiv","createDecoration","startColumn","endColumn","DECORATIONS","charDelete","register","description","charDeleteWholeLine","isWholeLine","charInsert","charInsertWholeLine","lineInsert","marginClassName","lineInsertWithSign","linesDecorationsClassName","asClassName","lineDelete","lineDeleteWithSign","lineDeleteMargin","_disableSash","_sashRatio","_sashPosition","_startSashPosition","_sash","orientation","state","onDidStart","_onSashDragStart","_onSashDrag","onDidEnd","_onSashDragEnd","onDidReset","_onSashReset","newDisableSash","sashRatio","w","sashPosition","midPoint","MINIMUM_EDITOR_WIDTH","currentX","startX","getVerticalSashTop","sash","getVerticalSashLeft","getVerticalSashHeight","SideBySideViewZonesComputer","overviewZoneColor","originalViewModel","charChanges","charChange","originalStartColumn","getLineFirstNonWhitespaceColumn","originalEndColumn","getLineLastNonWhitespaceColumn","modifiedModel","modifiedViewModel","modifiedStartColumn","modifiedEndColumn","_decorationsLeft","decorationsLeft","onDidLayoutChange","computer","InlineViewZonesComputer","_originalModel","_renderIndicators","_pendingLineChange","_pendingViewZones","_lineBreaksComputer","createLineBreaksComputer","_finalize","minWidthInPx","viewLineCounts","addRequest","getLineContent","modifiedEditorOptions","fontInfo","get","disableMonospaceOptimizations","typicalHalfwidthCharacterWidth","scrollBeyondLastColumn","mightContainNonBasicASCII","mightContainRTL","lineHeight","lineDecorationsWidth","decorationsWidth","stopRenderingLineAfter","renderWhitespace","renderControlCharacters","fontLigatures","lineBreaks","finalize","lineBreakIndex","hasCharChanges","sb","maxCharsPerLine","renderedLineCount","lineIndex","lineTokens","getLineTokens","lineContent","lineBreakData","actualDecorations","lastBreakOffset","breakOffset","breakOffsets","viewLineTokens","sliceAndInflate","viewLineContent","substring","_renderOriginalLine","extractWrapped","marginDomNode2","afterColumn","html","build","trustedhtml","innerHTML","cnt","appendASCIIString","isBasicASCII","containsRTL","output","isMonospace","canUseHalfwidthRightwardsArrow","spaceWidth","middotWidth","wsmiddotWidth","OFF","marginElement","setAttribute","characterMapping","getAbsoluteOffset","validateDiffWordWrap","lineCount","convertModelRangeToViewRange","getLineMinColumn","getLineMaxColumn","defaults","collector","added","addRule","removed","addedOutline","removedOutline","border","scrollbarSliderBackgroundColor","scrollbarSliderHoverBackgroundColor","scrollbarSliderActiveBackgroundColor","diffDiagonalFillColor"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar _a;\nimport './media/diffEditor.css';\nimport * as nls from '../../../nls.js';\nimport * as dom from '../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\nimport { Sash } from '../../../base/browser/ui/sash/sash.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { applyFontInfo } from '../config/domFontInfo.js';\nimport { StableEditorScrollState } from '../stableEditorScroll.js';\nimport { ICodeEditorService } from '../services/codeEditorService.js';\nimport { CodeEditorWidget } from './codeEditorWidget.js';\nimport { DiffReview } from './diffReview.js';\nimport { EditorOptions, EditorFontLigatures, stringSet as validateStringSetOption, boolean as validateBooleanOption, clampedInt } from '../../common/config/editorOptions.js';\nimport { Range } from '../../common/core/range.js';\nimport { createStringBuilder } from '../../common/core/stringBuilder.js';\nimport * as editorCommon from '../../common/editorCommon.js';\nimport { ModelDecorationOptions } from '../../common/model/textModel.js';\nimport { IEditorWorkerService } from '../../common/services/editorWorker.js';\nimport { OverviewRulerZone } from '../../common/viewModel/overviewZoneManager.js';\nimport { LineDecoration } from '../../common/viewLayout/lineDecorations.js';\nimport { RenderLineInput, renderViewLine } from '../../common/viewLayout/viewLineRenderer.js';\nimport { InlineDecoration, ViewLineRenderingData } from '../../common/viewModel/viewModel.js';\nimport { IContextKeyService } from '../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../../platform/instantiation/common/instantiation.js';\nimport { ServiceCollection } from '../../../platform/instantiation/common/serviceCollection.js';\nimport { INotificationService } from '../../../platform/notification/common/notification.js';\nimport { defaultInsertColor, defaultRemoveColor, diffBorder, diffInserted, diffInsertedOutline, diffRemoved, diffRemovedOutline, scrollbarShadow, scrollbarSliderBackground, scrollbarSliderHoverBackground, scrollbarSliderActiveBackground, diffDiagonalFill } from '../../../platform/theme/common/colorRegistry.js';\nimport { IThemeService, getThemeTypeSelector, registerThemingParticipant, ThemeIcon } from '../../../platform/theme/common/themeService.js';\nimport { IContextMenuService } from '../../../platform/contextview/browser/contextView.js';\nimport { InlineDiffMargin } from './inlineDiffMargin.js';\nimport { IClipboardService } from '../../../platform/clipboard/common/clipboardService.js';\nimport { EditorExtensionsRegistry } from '../editorExtensions.js';\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { IEditorProgressService } from '../../../platform/progress/common/progress.js';\nimport { ElementSizeObserver } from '../config/elementSizeObserver.js';\nimport { Codicon } from '../../../base/common/codicons.js';\nimport { MOUSE_CURSOR_TEXT_CSS_CLASS_NAME } from '../../../base/browser/ui/mouseCursor/mouseCursor.js';\nimport { registerIcon } from '../../../platform/theme/common/iconRegistry.js';\nclass VisualEditorState {\n    constructor(_contextMenuService, _clipboardService) {\n        this._contextMenuService = _contextMenuService;\n        this._clipboardService = _clipboardService;\n        this._zones = [];\n        this._inlineDiffMargins = [];\n        this._zonesMap = {};\n        this._decorations = [];\n    }\n    getForeignViewZones(allViewZones) {\n        return allViewZones.filter((z) => !this._zonesMap[String(z.id)]);\n    }\n    clean(editor) {\n        // (1) View zones\n        if (this._zones.length > 0) {\n            editor.changeViewZones((viewChangeAccessor) => {\n                for (const zoneId of this._zones) {\n                    viewChangeAccessor.removeZone(zoneId);\n                }\n            });\n        }\n        this._zones = [];\n        this._zonesMap = {};\n        // (2) Model decorations\n        this._decorations = editor.deltaDecorations(this._decorations, []);\n    }\n    apply(editor, overviewRuler, newDecorations, restoreScrollState) {\n        const scrollState = restoreScrollState ? StableEditorScrollState.capture(editor) : null;\n        // view zones\n        editor.changeViewZones((viewChangeAccessor) => {\n            var _a;\n            for (const zoneId of this._zones) {\n                viewChangeAccessor.removeZone(zoneId);\n            }\n            for (const inlineDiffMargin of this._inlineDiffMargins) {\n                inlineDiffMargin.dispose();\n            }\n            this._zones = [];\n            this._zonesMap = {};\n            this._inlineDiffMargins = [];\n            for (let i = 0, length = newDecorations.zones.length; i < length; i++) {\n                const viewZone = newDecorations.zones[i];\n                viewZone.suppressMouseDown = true;\n                const zoneId = viewChangeAccessor.addZone(viewZone);\n                this._zones.push(zoneId);\n                this._zonesMap[String(zoneId)] = true;\n                if (newDecorations.zones[i].diff && viewZone.marginDomNode) {\n                    viewZone.suppressMouseDown = false;\n                    if (((_a = newDecorations.zones[i].diff) === null || _a === void 0 ? void 0 : _a.originalModel.getValueLength()) !== 0) {\n                        // do not contribute diff margin actions for newly created files\n                        this._inlineDiffMargins.push(new InlineDiffMargin(zoneId, viewZone.marginDomNode, editor, newDecorations.zones[i].diff, this._contextMenuService, this._clipboardService));\n                    }\n                }\n            }\n        });\n        if (scrollState) {\n            scrollState.restore(editor);\n        }\n        // decorations\n        this._decorations = editor.deltaDecorations(this._decorations, newDecorations.decorations);\n        // overview ruler\n        if (overviewRuler) {\n            overviewRuler.setZones(newDecorations.overviewZones);\n        }\n    }\n}\nlet DIFF_EDITOR_ID = 0;\nconst diffInsertIcon = registerIcon('diff-insert', Codicon.add, nls.localize('diffInsertIcon', 'Line decoration for inserts in the diff editor.'));\nconst diffRemoveIcon = registerIcon('diff-remove', Codicon.remove, nls.localize('diffRemoveIcon', 'Line decoration for removals in the diff editor.'));\nconst ttPolicy = (_a = window.trustedTypes) === null || _a === void 0 ? void 0 : _a.createPolicy('diffEditorWidget', { createHTML: value => value });\nlet DiffEditorWidget = class DiffEditorWidget extends Disposable {\n    constructor(domElement, options, codeEditorWidgetOptions, clipboardService, editorWorkerService, contextKeyService, instantiationService, codeEditorService, themeService, notificationService, contextMenuService, _editorProgressService) {\n        super();\n        this._editorProgressService = _editorProgressService;\n        this._onDidDispose = this._register(new Emitter());\n        this.onDidDispose = this._onDidDispose.event;\n        this._onDidUpdateDiff = this._register(new Emitter());\n        this.onDidUpdateDiff = this._onDidUpdateDiff.event;\n        this._onDidContentSizeChange = this._register(new Emitter());\n        this._lastOriginalWarning = null;\n        this._lastModifiedWarning = null;\n        this._editorWorkerService = editorWorkerService;\n        this._codeEditorService = codeEditorService;\n        this._contextKeyService = this._register(contextKeyService.createScoped(domElement));\n        this._instantiationService = instantiationService.createChild(new ServiceCollection([IContextKeyService, this._contextKeyService]));\n        this._contextKeyService.createKey('isInDiffEditor', true);\n        this._themeService = themeService;\n        this._notificationService = notificationService;\n        this._id = (++DIFF_EDITOR_ID);\n        this._state = 0 /* Idle */;\n        this._updatingDiffProgress = null;\n        this._domElement = domElement;\n        options = options || {};\n        this._options = validateDiffEditorOptions(options, {\n            enableSplitViewResizing: true,\n            renderSideBySide: true,\n            maxComputationTime: 5000,\n            maxFileSize: 50,\n            ignoreTrimWhitespace: true,\n            renderIndicators: true,\n            originalEditable: false,\n            diffCodeLens: false,\n            renderOverviewRuler: true,\n            diffWordWrap: 'inherit'\n        });\n        if (typeof options.isInEmbeddedEditor !== 'undefined') {\n            this._contextKeyService.createKey('isInEmbeddedDiffEditor', options.isInEmbeddedEditor);\n        }\n        else {\n            this._contextKeyService.createKey('isInEmbeddedDiffEditor', false);\n        }\n        this._updateDecorationsRunner = this._register(new RunOnceScheduler(() => this._updateDecorations(), 0));\n        this._containerDomElement = document.createElement('div');\n        this._containerDomElement.className = DiffEditorWidget._getClassName(this._themeService.getColorTheme(), this._options.renderSideBySide);\n        this._containerDomElement.style.position = 'relative';\n        this._containerDomElement.style.height = '100%';\n        this._domElement.appendChild(this._containerDomElement);\n        this._overviewViewportDomElement = createFastDomNode(document.createElement('div'));\n        this._overviewViewportDomElement.setClassName('diffViewport');\n        this._overviewViewportDomElement.setPosition('absolute');\n        this._overviewDomElement = document.createElement('div');\n        this._overviewDomElement.className = 'diffOverview';\n        this._overviewDomElement.style.position = 'absolute';\n        this._overviewDomElement.appendChild(this._overviewViewportDomElement.domNode);\n        this._register(dom.addStandardDisposableListener(this._overviewDomElement, 'mousedown', (e) => {\n            this._modifiedEditor.delegateVerticalScrollbarMouseDown(e);\n        }));\n        if (this._options.renderOverviewRuler) {\n            this._containerDomElement.appendChild(this._overviewDomElement);\n        }\n        // Create left side\n        this._originalDomNode = document.createElement('div');\n        this._originalDomNode.className = 'editor original';\n        this._originalDomNode.style.position = 'absolute';\n        this._originalDomNode.style.height = '100%';\n        this._containerDomElement.appendChild(this._originalDomNode);\n        // Create right side\n        this._modifiedDomNode = document.createElement('div');\n        this._modifiedDomNode.className = 'editor modified';\n        this._modifiedDomNode.style.position = 'absolute';\n        this._modifiedDomNode.style.height = '100%';\n        this._containerDomElement.appendChild(this._modifiedDomNode);\n        this._beginUpdateDecorationsTimeout = -1;\n        this._currentlyChangingViewZones = false;\n        this._diffComputationToken = 0;\n        this._originalEditorState = new VisualEditorState(contextMenuService, clipboardService);\n        this._modifiedEditorState = new VisualEditorState(contextMenuService, clipboardService);\n        this._isVisible = true;\n        this._isHandlingScrollEvent = false;\n        this._elementSizeObserver = this._register(new ElementSizeObserver(this._containerDomElement, options.dimension));\n        this._register(this._elementSizeObserver.onDidChange(() => this._onDidContainerSizeChanged()));\n        if (options.automaticLayout) {\n            this._elementSizeObserver.startObserving();\n        }\n        this._diffComputationResult = null;\n        this._originalEditor = this._createLeftHandSideEditor(options, codeEditorWidgetOptions.originalEditor || {});\n        this._modifiedEditor = this._createRightHandSideEditor(options, codeEditorWidgetOptions.modifiedEditor || {});\n        this._originalOverviewRuler = null;\n        this._modifiedOverviewRuler = null;\n        this._reviewPane = instantiationService.createInstance(DiffReview, this);\n        this._containerDomElement.appendChild(this._reviewPane.domNode.domNode);\n        this._containerDomElement.appendChild(this._reviewPane.shadow.domNode);\n        this._containerDomElement.appendChild(this._reviewPane.actionBarContainer.domNode);\n        if (this._options.renderSideBySide) {\n            this._setStrategy(new DiffEditorWidgetSideBySide(this._createDataSource(), this._options.enableSplitViewResizing));\n        }\n        else {\n            this._setStrategy(new DiffEditorWidgetInline(this._createDataSource(), this._options.enableSplitViewResizing));\n        }\n        this._register(themeService.onDidColorThemeChange(t => {\n            if (this._strategy && this._strategy.applyColors(t)) {\n                this._updateDecorationsRunner.schedule();\n            }\n            this._containerDomElement.className = DiffEditorWidget._getClassName(this._themeService.getColorTheme(), this._options.renderSideBySide);\n        }));\n        const contributions = EditorExtensionsRegistry.getDiffEditorContributions();\n        for (const desc of contributions) {\n            try {\n                this._register(instantiationService.createInstance(desc.ctor, this));\n            }\n            catch (err) {\n                onUnexpectedError(err);\n            }\n        }\n        this._codeEditorService.addDiffEditor(this);\n    }\n    _setState(newState) {\n        if (this._state === newState) {\n            return;\n        }\n        this._state = newState;\n        if (this._updatingDiffProgress) {\n            this._updatingDiffProgress.done();\n            this._updatingDiffProgress = null;\n        }\n        if (this._state === 1 /* ComputingDiff */) {\n            this._updatingDiffProgress = this._editorProgressService.show(true, 1000);\n        }\n    }\n    diffReviewNext() {\n        this._reviewPane.next();\n    }\n    diffReviewPrev() {\n        this._reviewPane.prev();\n    }\n    static _getClassName(theme, renderSideBySide) {\n        let result = 'monaco-diff-editor monaco-editor-background ';\n        if (renderSideBySide) {\n            result += 'side-by-side ';\n        }\n        result += getThemeTypeSelector(theme.type);\n        return result;\n    }\n    _recreateOverviewRulers() {\n        if (!this._options.renderOverviewRuler) {\n            return;\n        }\n        if (this._originalOverviewRuler) {\n            this._overviewDomElement.removeChild(this._originalOverviewRuler.getDomNode());\n            this._originalOverviewRuler.dispose();\n        }\n        if (this._originalEditor.hasModel()) {\n            this._originalOverviewRuler = this._originalEditor.createOverviewRuler('original diffOverviewRuler');\n            this._overviewDomElement.appendChild(this._originalOverviewRuler.getDomNode());\n        }\n        if (this._modifiedOverviewRuler) {\n            this._overviewDomElement.removeChild(this._modifiedOverviewRuler.getDomNode());\n            this._modifiedOverviewRuler.dispose();\n        }\n        if (this._modifiedEditor.hasModel()) {\n            this._modifiedOverviewRuler = this._modifiedEditor.createOverviewRuler('modified diffOverviewRuler');\n            this._overviewDomElement.appendChild(this._modifiedOverviewRuler.getDomNode());\n        }\n        this._layoutOverviewRulers();\n    }\n    _createLeftHandSideEditor(options, codeEditorWidgetOptions) {\n        const editor = this._createInnerEditor(this._instantiationService, this._originalDomNode, this._adjustOptionsForLeftHandSide(options), codeEditorWidgetOptions);\n        this._register(editor.onDidScrollChange((e) => {\n            if (this._isHandlingScrollEvent) {\n                return;\n            }\n            if (!e.scrollTopChanged && !e.scrollLeftChanged && !e.scrollHeightChanged) {\n                return;\n            }\n            this._isHandlingScrollEvent = true;\n            this._modifiedEditor.setScrollPosition({\n                scrollLeft: e.scrollLeft,\n                scrollTop: e.scrollTop\n            });\n            this._isHandlingScrollEvent = false;\n            this._layoutOverviewViewport();\n        }));\n        this._register(editor.onDidChangeViewZones(() => {\n            this._onViewZonesChanged();\n        }));\n        this._register(editor.onDidChangeConfiguration((e) => {\n            if (!editor.getModel()) {\n                return;\n            }\n            if (e.hasChanged(44 /* fontInfo */)) {\n                this._updateDecorationsRunner.schedule();\n            }\n            if (e.hasChanged(132 /* wrappingInfo */)) {\n                this._updateDecorationsRunner.cancel();\n                this._updateDecorations();\n            }\n        }));\n        this._register(editor.onDidChangeHiddenAreas(() => {\n            this._updateDecorationsRunner.cancel();\n            this._updateDecorations();\n        }));\n        this._register(editor.onDidChangeModelContent(() => {\n            if (this._isVisible) {\n                this._beginUpdateDecorationsSoon();\n            }\n        }));\n        const isInDiffLeftEditorKey = this._contextKeyService.createKey('isInDiffLeftEditor', editor.hasWidgetFocus());\n        this._register(editor.onDidFocusEditorWidget(() => isInDiffLeftEditorKey.set(true)));\n        this._register(editor.onDidBlurEditorWidget(() => isInDiffLeftEditorKey.set(false)));\n        this._register(editor.onDidContentSizeChange(e => {\n            const width = this._originalEditor.getContentWidth() + this._modifiedEditor.getContentWidth() + DiffEditorWidget.ONE_OVERVIEW_WIDTH;\n            const height = Math.max(this._modifiedEditor.getContentHeight(), this._originalEditor.getContentHeight());\n            this._onDidContentSizeChange.fire({\n                contentHeight: height,\n                contentWidth: width,\n                contentHeightChanged: e.contentHeightChanged,\n                contentWidthChanged: e.contentWidthChanged\n            });\n        }));\n        return editor;\n    }\n    _createRightHandSideEditor(options, codeEditorWidgetOptions) {\n        const editor = this._createInnerEditor(this._instantiationService, this._modifiedDomNode, this._adjustOptionsForRightHandSide(options), codeEditorWidgetOptions);\n        this._register(editor.onDidScrollChange((e) => {\n            if (this._isHandlingScrollEvent) {\n                return;\n            }\n            if (!e.scrollTopChanged && !e.scrollLeftChanged && !e.scrollHeightChanged) {\n                return;\n            }\n            this._isHandlingScrollEvent = true;\n            this._originalEditor.setScrollPosition({\n                scrollLeft: e.scrollLeft,\n                scrollTop: e.scrollTop\n            });\n            this._isHandlingScrollEvent = false;\n            this._layoutOverviewViewport();\n        }));\n        this._register(editor.onDidChangeViewZones(() => {\n            this._onViewZonesChanged();\n        }));\n        this._register(editor.onDidChangeConfiguration((e) => {\n            if (!editor.getModel()) {\n                return;\n            }\n            if (e.hasChanged(44 /* fontInfo */)) {\n                this._updateDecorationsRunner.schedule();\n            }\n            if (e.hasChanged(132 /* wrappingInfo */)) {\n                this._updateDecorationsRunner.cancel();\n                this._updateDecorations();\n            }\n        }));\n        this._register(editor.onDidChangeHiddenAreas(() => {\n            this._updateDecorationsRunner.cancel();\n            this._updateDecorations();\n        }));\n        this._register(editor.onDidChangeModelContent(() => {\n            if (this._isVisible) {\n                this._beginUpdateDecorationsSoon();\n            }\n        }));\n        this._register(editor.onDidChangeModelOptions((e) => {\n            if (e.tabSize) {\n                this._updateDecorationsRunner.schedule();\n            }\n        }));\n        const isInDiffRightEditorKey = this._contextKeyService.createKey('isInDiffRightEditor', editor.hasWidgetFocus());\n        this._register(editor.onDidFocusEditorWidget(() => isInDiffRightEditorKey.set(true)));\n        this._register(editor.onDidBlurEditorWidget(() => isInDiffRightEditorKey.set(false)));\n        this._register(editor.onDidContentSizeChange(e => {\n            const width = this._originalEditor.getContentWidth() + this._modifiedEditor.getContentWidth() + DiffEditorWidget.ONE_OVERVIEW_WIDTH;\n            const height = Math.max(this._modifiedEditor.getContentHeight(), this._originalEditor.getContentHeight());\n            this._onDidContentSizeChange.fire({\n                contentHeight: height,\n                contentWidth: width,\n                contentHeightChanged: e.contentHeightChanged,\n                contentWidthChanged: e.contentWidthChanged\n            });\n        }));\n        return editor;\n    }\n    _createInnerEditor(instantiationService, container, options, editorWidgetOptions) {\n        return instantiationService.createInstance(CodeEditorWidget, container, options, editorWidgetOptions);\n    }\n    dispose() {\n        this._codeEditorService.removeDiffEditor(this);\n        if (this._beginUpdateDecorationsTimeout !== -1) {\n            window.clearTimeout(this._beginUpdateDecorationsTimeout);\n            this._beginUpdateDecorationsTimeout = -1;\n        }\n        this._cleanViewZonesAndDecorations();\n        if (this._originalOverviewRuler) {\n            this._overviewDomElement.removeChild(this._originalOverviewRuler.getDomNode());\n            this._originalOverviewRuler.dispose();\n        }\n        if (this._modifiedOverviewRuler) {\n            this._overviewDomElement.removeChild(this._modifiedOverviewRuler.getDomNode());\n            this._modifiedOverviewRuler.dispose();\n        }\n        this._overviewDomElement.removeChild(this._overviewViewportDomElement.domNode);\n        if (this._options.renderOverviewRuler) {\n            this._containerDomElement.removeChild(this._overviewDomElement);\n        }\n        this._containerDomElement.removeChild(this._originalDomNode);\n        this._originalEditor.dispose();\n        this._containerDomElement.removeChild(this._modifiedDomNode);\n        this._modifiedEditor.dispose();\n        this._strategy.dispose();\n        this._containerDomElement.removeChild(this._reviewPane.domNode.domNode);\n        this._containerDomElement.removeChild(this._reviewPane.shadow.domNode);\n        this._containerDomElement.removeChild(this._reviewPane.actionBarContainer.domNode);\n        this._reviewPane.dispose();\n        this._domElement.removeChild(this._containerDomElement);\n        this._onDidDispose.fire();\n        super.dispose();\n    }\n    //------------ begin IDiffEditor methods\n    getId() {\n        return this.getEditorType() + ':' + this._id;\n    }\n    getEditorType() {\n        return editorCommon.EditorType.IDiffEditor;\n    }\n    getLineChanges() {\n        if (!this._diffComputationResult) {\n            return null;\n        }\n        return this._diffComputationResult.changes;\n    }\n    getOriginalEditor() {\n        return this._originalEditor;\n    }\n    getModifiedEditor() {\n        return this._modifiedEditor;\n    }\n    updateOptions(_newOptions) {\n        const newOptions = validateDiffEditorOptions(_newOptions, this._options);\n        const changed = changedDiffEditorOptions(this._options, newOptions);\n        this._options = newOptions;\n        const beginUpdateDecorations = (changed.ignoreTrimWhitespace || changed.renderIndicators);\n        const beginUpdateDecorationsSoon = (this._isVisible && (changed.maxComputationTime || changed.maxFileSize));\n        if (beginUpdateDecorations) {\n            this._beginUpdateDecorations();\n        }\n        else if (beginUpdateDecorationsSoon) {\n            this._beginUpdateDecorationsSoon();\n        }\n        this._modifiedEditor.updateOptions(this._adjustOptionsForRightHandSide(_newOptions));\n        this._originalEditor.updateOptions(this._adjustOptionsForLeftHandSide(_newOptions));\n        // enableSplitViewResizing\n        this._strategy.setEnableSplitViewResizing(this._options.enableSplitViewResizing);\n        // renderSideBySide\n        if (changed.renderSideBySide) {\n            if (this._options.renderSideBySide) {\n                this._setStrategy(new DiffEditorWidgetSideBySide(this._createDataSource(), this._options.enableSplitViewResizing));\n            }\n            else {\n                this._setStrategy(new DiffEditorWidgetInline(this._createDataSource(), this._options.enableSplitViewResizing));\n            }\n            // Update class name\n            this._containerDomElement.className = DiffEditorWidget._getClassName(this._themeService.getColorTheme(), this._options.renderSideBySide);\n        }\n        // renderOverviewRuler\n        if (changed.renderOverviewRuler) {\n            if (this._options.renderOverviewRuler) {\n                this._containerDomElement.appendChild(this._overviewDomElement);\n            }\n            else {\n                this._containerDomElement.removeChild(this._overviewDomElement);\n            }\n        }\n    }\n    getModel() {\n        return {\n            original: this._originalEditor.getModel(),\n            modified: this._modifiedEditor.getModel()\n        };\n    }\n    setModel(model) {\n        // Guard us against partial null model\n        if (model && (!model.original || !model.modified)) {\n            throw new Error(!model.original ? 'DiffEditorWidget.setModel: Original model is null' : 'DiffEditorWidget.setModel: Modified model is null');\n        }\n        // Remove all view zones & decorations\n        this._cleanViewZonesAndDecorations();\n        // Update code editor models\n        this._originalEditor.setModel(model ? model.original : null);\n        this._modifiedEditor.setModel(model ? model.modified : null);\n        this._updateDecorationsRunner.cancel();\n        // this.originalEditor.onDidChangeModelOptions\n        if (model) {\n            this._originalEditor.setScrollTop(0);\n            this._modifiedEditor.setScrollTop(0);\n        }\n        // Disable any diff computations that will come in\n        this._diffComputationResult = null;\n        this._diffComputationToken++;\n        this._setState(0 /* Idle */);\n        if (model) {\n            this._recreateOverviewRulers();\n            // Begin comparing\n            this._beginUpdateDecorations();\n        }\n        this._layoutOverviewViewport();\n    }\n    getContainerDomNode() {\n        return this._domElement;\n    }\n    getVisibleColumnFromPosition(position) {\n        return this._modifiedEditor.getVisibleColumnFromPosition(position);\n    }\n    getPosition() {\n        return this._modifiedEditor.getPosition();\n    }\n    setPosition(position) {\n        this._modifiedEditor.setPosition(position);\n    }\n    revealLine(lineNumber, scrollType = 0 /* Smooth */) {\n        this._modifiedEditor.revealLine(lineNumber, scrollType);\n    }\n    revealLineInCenter(lineNumber, scrollType = 0 /* Smooth */) {\n        this._modifiedEditor.revealLineInCenter(lineNumber, scrollType);\n    }\n    revealLineInCenterIfOutsideViewport(lineNumber, scrollType = 0 /* Smooth */) {\n        this._modifiedEditor.revealLineInCenterIfOutsideViewport(lineNumber, scrollType);\n    }\n    revealLineNearTop(lineNumber, scrollType = 0 /* Smooth */) {\n        this._modifiedEditor.revealLineNearTop(lineNumber, scrollType);\n    }\n    revealPosition(position, scrollType = 0 /* Smooth */) {\n        this._modifiedEditor.revealPosition(position, scrollType);\n    }\n    revealPositionInCenter(position, scrollType = 0 /* Smooth */) {\n        this._modifiedEditor.revealPositionInCenter(position, scrollType);\n    }\n    revealPositionInCenterIfOutsideViewport(position, scrollType = 0 /* Smooth */) {\n        this._modifiedEditor.revealPositionInCenterIfOutsideViewport(position, scrollType);\n    }\n    revealPositionNearTop(position, scrollType = 0 /* Smooth */) {\n        this._modifiedEditor.revealPositionNearTop(position, scrollType);\n    }\n    getSelection() {\n        return this._modifiedEditor.getSelection();\n    }\n    getSelections() {\n        return this._modifiedEditor.getSelections();\n    }\n    setSelection(something) {\n        this._modifiedEditor.setSelection(something);\n    }\n    setSelections(ranges) {\n        this._modifiedEditor.setSelections(ranges);\n    }\n    revealLines(startLineNumber, endLineNumber, scrollType = 0 /* Smooth */) {\n        this._modifiedEditor.revealLines(startLineNumber, endLineNumber, scrollType);\n    }\n    revealLinesInCenter(startLineNumber, endLineNumber, scrollType = 0 /* Smooth */) {\n        this._modifiedEditor.revealLinesInCenter(startLineNumber, endLineNumber, scrollType);\n    }\n    revealLinesInCenterIfOutsideViewport(startLineNumber, endLineNumber, scrollType = 0 /* Smooth */) {\n        this._modifiedEditor.revealLinesInCenterIfOutsideViewport(startLineNumber, endLineNumber, scrollType);\n    }\n    revealLinesNearTop(startLineNumber, endLineNumber, scrollType = 0 /* Smooth */) {\n        this._modifiedEditor.revealLinesNearTop(startLineNumber, endLineNumber, scrollType);\n    }\n    revealRange(range, scrollType = 0 /* Smooth */, revealVerticalInCenter = false, revealHorizontal = true) {\n        this._modifiedEditor.revealRange(range, scrollType, revealVerticalInCenter, revealHorizontal);\n    }\n    revealRangeInCenter(range, scrollType = 0 /* Smooth */) {\n        this._modifiedEditor.revealRangeInCenter(range, scrollType);\n    }\n    revealRangeInCenterIfOutsideViewport(range, scrollType = 0 /* Smooth */) {\n        this._modifiedEditor.revealRangeInCenterIfOutsideViewport(range, scrollType);\n    }\n    revealRangeNearTop(range, scrollType = 0 /* Smooth */) {\n        this._modifiedEditor.revealRangeNearTop(range, scrollType);\n    }\n    revealRangeNearTopIfOutsideViewport(range, scrollType = 0 /* Smooth */) {\n        this._modifiedEditor.revealRangeNearTopIfOutsideViewport(range, scrollType);\n    }\n    revealRangeAtTop(range, scrollType = 0 /* Smooth */) {\n        this._modifiedEditor.revealRangeAtTop(range, scrollType);\n    }\n    getSupportedActions() {\n        return this._modifiedEditor.getSupportedActions();\n    }\n    saveViewState() {\n        const originalViewState = this._originalEditor.saveViewState();\n        const modifiedViewState = this._modifiedEditor.saveViewState();\n        return {\n            original: originalViewState,\n            modified: modifiedViewState\n        };\n    }\n    restoreViewState(s) {\n        if (s && s.original && s.modified) {\n            const diffEditorState = s;\n            this._originalEditor.restoreViewState(diffEditorState.original);\n            this._modifiedEditor.restoreViewState(diffEditorState.modified);\n        }\n    }\n    layout(dimension) {\n        this._elementSizeObserver.observe(dimension);\n    }\n    focus() {\n        this._modifiedEditor.focus();\n    }\n    hasTextFocus() {\n        return this._originalEditor.hasTextFocus() || this._modifiedEditor.hasTextFocus();\n    }\n    trigger(source, handlerId, payload) {\n        this._modifiedEditor.trigger(source, handlerId, payload);\n    }\n    changeDecorations(callback) {\n        return this._modifiedEditor.changeDecorations(callback);\n    }\n    //------------ end IDiffEditor methods\n    //------------ begin layouting methods\n    _onDidContainerSizeChanged() {\n        this._doLayout();\n    }\n    _getReviewHeight() {\n        return this._reviewPane.isVisible() ? this._elementSizeObserver.getHeight() : 0;\n    }\n    _layoutOverviewRulers() {\n        if (!this._options.renderOverviewRuler) {\n            return;\n        }\n        if (!this._originalOverviewRuler || !this._modifiedOverviewRuler) {\n            return;\n        }\n        const height = this._elementSizeObserver.getHeight();\n        const reviewHeight = this._getReviewHeight();\n        const freeSpace = DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH - 2 * DiffEditorWidget.ONE_OVERVIEW_WIDTH;\n        const layoutInfo = this._modifiedEditor.getLayoutInfo();\n        if (layoutInfo) {\n            this._originalOverviewRuler.setLayout({\n                top: 0,\n                width: DiffEditorWidget.ONE_OVERVIEW_WIDTH,\n                right: freeSpace + DiffEditorWidget.ONE_OVERVIEW_WIDTH,\n                height: (height - reviewHeight)\n            });\n            this._modifiedOverviewRuler.setLayout({\n                top: 0,\n                right: 0,\n                width: DiffEditorWidget.ONE_OVERVIEW_WIDTH,\n                height: (height - reviewHeight)\n            });\n        }\n    }\n    //------------ end layouting methods\n    _onViewZonesChanged() {\n        if (this._currentlyChangingViewZones) {\n            return;\n        }\n        this._updateDecorationsRunner.schedule();\n    }\n    _beginUpdateDecorationsSoon() {\n        // Clear previous timeout if necessary\n        if (this._beginUpdateDecorationsTimeout !== -1) {\n            window.clearTimeout(this._beginUpdateDecorationsTimeout);\n            this._beginUpdateDecorationsTimeout = -1;\n        }\n        this._beginUpdateDecorationsTimeout = window.setTimeout(() => this._beginUpdateDecorations(), DiffEditorWidget.UPDATE_DIFF_DECORATIONS_DELAY);\n    }\n    static _equals(a, b) {\n        if (!a && !b) {\n            return true;\n        }\n        if (!a || !b) {\n            return false;\n        }\n        return (a.toString() === b.toString());\n    }\n    _beginUpdateDecorations() {\n        this._beginUpdateDecorationsTimeout = -1;\n        const currentOriginalModel = this._originalEditor.getModel();\n        const currentModifiedModel = this._modifiedEditor.getModel();\n        if (!currentOriginalModel || !currentModifiedModel) {\n            return;\n        }\n        // Prevent old diff requests to come if a new request has been initiated\n        // The best method would be to call cancel on the Promise, but this is not\n        // yet supported, so using tokens for now.\n        this._diffComputationToken++;\n        const currentToken = this._diffComputationToken;\n        const diffLimit = this._options.maxFileSize * 1024 * 1024; // MB\n        const canSyncModelForDiff = (model) => {\n            const bufferTextLength = model.getValueLength();\n            return (diffLimit === 0 || bufferTextLength <= diffLimit);\n        };\n        if (!canSyncModelForDiff(currentOriginalModel) || !canSyncModelForDiff(currentModifiedModel)) {\n            if (!DiffEditorWidget._equals(currentOriginalModel.uri, this._lastOriginalWarning)\n                || !DiffEditorWidget._equals(currentModifiedModel.uri, this._lastModifiedWarning)) {\n                this._lastOriginalWarning = currentOriginalModel.uri;\n                this._lastModifiedWarning = currentModifiedModel.uri;\n                this._notificationService.warn(nls.localize(\"diff.tooLarge\", \"Cannot compare files because one file is too large.\"));\n            }\n            return;\n        }\n        this._setState(1 /* ComputingDiff */);\n        this._editorWorkerService.computeDiff(currentOriginalModel.uri, currentModifiedModel.uri, this._options.ignoreTrimWhitespace, this._options.maxComputationTime).then((result) => {\n            if (currentToken === this._diffComputationToken\n                && currentOriginalModel === this._originalEditor.getModel()\n                && currentModifiedModel === this._modifiedEditor.getModel()) {\n                this._setState(2 /* DiffComputed */);\n                this._diffComputationResult = result;\n                this._updateDecorationsRunner.schedule();\n                this._onDidUpdateDiff.fire();\n            }\n        }, (error) => {\n            if (currentToken === this._diffComputationToken\n                && currentOriginalModel === this._originalEditor.getModel()\n                && currentModifiedModel === this._modifiedEditor.getModel()) {\n                this._setState(2 /* DiffComputed */);\n                this._diffComputationResult = null;\n                this._updateDecorationsRunner.schedule();\n            }\n        });\n    }\n    _cleanViewZonesAndDecorations() {\n        this._originalEditorState.clean(this._originalEditor);\n        this._modifiedEditorState.clean(this._modifiedEditor);\n    }\n    _updateDecorations() {\n        if (!this._originalEditor.getModel() || !this._modifiedEditor.getModel()) {\n            return;\n        }\n        const lineChanges = (this._diffComputationResult ? this._diffComputationResult.changes : []);\n        const foreignOriginal = this._originalEditorState.getForeignViewZones(this._originalEditor.getWhitespaces());\n        const foreignModified = this._modifiedEditorState.getForeignViewZones(this._modifiedEditor.getWhitespaces());\n        const diffDecorations = this._strategy.getEditorsDiffDecorations(lineChanges, this._options.ignoreTrimWhitespace, this._options.renderIndicators, foreignOriginal, foreignModified);\n        try {\n            this._currentlyChangingViewZones = true;\n            this._originalEditorState.apply(this._originalEditor, this._originalOverviewRuler, diffDecorations.original, false);\n            this._modifiedEditorState.apply(this._modifiedEditor, this._modifiedOverviewRuler, diffDecorations.modified, true);\n        }\n        finally {\n            this._currentlyChangingViewZones = false;\n        }\n    }\n    _adjustOptionsForSubEditor(options) {\n        const clonedOptions = Object.assign({}, options);\n        clonedOptions.inDiffEditor = true;\n        clonedOptions.automaticLayout = false;\n        // Clone scrollbar options before changing them\n        clonedOptions.scrollbar = Object.assign({}, (clonedOptions.scrollbar || {}));\n        clonedOptions.scrollbar.vertical = 'visible';\n        clonedOptions.folding = false;\n        clonedOptions.codeLens = this._options.diffCodeLens;\n        clonedOptions.fixedOverflowWidgets = true;\n        // clonedOptions.lineDecorationsWidth = '2ch';\n        // Clone minimap options before changing them\n        clonedOptions.minimap = Object.assign({}, (clonedOptions.minimap || {}));\n        clonedOptions.minimap.enabled = false;\n        return clonedOptions;\n    }\n    _adjustOptionsForLeftHandSide(options) {\n        const result = this._adjustOptionsForSubEditor(options);\n        if (!this._options.renderSideBySide) {\n            // never wrap hidden editor\n            result.wordWrapOverride1 = 'off';\n        }\n        else {\n            result.wordWrapOverride1 = this._options.diffWordWrap;\n        }\n        if (options.originalAriaLabel) {\n            result.ariaLabel = options.originalAriaLabel;\n        }\n        result.readOnly = !this._options.originalEditable;\n        result.extraEditorClassName = 'original-in-monaco-diff-editor';\n        return Object.assign(Object.assign({}, result), { dimension: {\n                height: 0,\n                width: 0\n            } });\n    }\n    _adjustOptionsForRightHandSide(options) {\n        const result = this._adjustOptionsForSubEditor(options);\n        if (options.modifiedAriaLabel) {\n            result.ariaLabel = options.modifiedAriaLabel;\n        }\n        result.wordWrapOverride1 = this._options.diffWordWrap;\n        result.revealHorizontalRightPadding = EditorOptions.revealHorizontalRightPadding.defaultValue + DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH;\n        result.scrollbar.verticalHasArrows = false;\n        result.extraEditorClassName = 'modified-in-monaco-diff-editor';\n        return Object.assign(Object.assign({}, result), { dimension: {\n                height: 0,\n                width: 0\n            } });\n    }\n    doLayout() {\n        this._elementSizeObserver.observe();\n        this._doLayout();\n    }\n    _doLayout() {\n        const width = this._elementSizeObserver.getWidth();\n        const height = this._elementSizeObserver.getHeight();\n        const reviewHeight = this._getReviewHeight();\n        const splitPoint = this._strategy.layout();\n        this._originalDomNode.style.width = splitPoint + 'px';\n        this._originalDomNode.style.left = '0px';\n        this._modifiedDomNode.style.width = (width - splitPoint) + 'px';\n        this._modifiedDomNode.style.left = splitPoint + 'px';\n        this._overviewDomElement.style.top = '0px';\n        this._overviewDomElement.style.height = (height - reviewHeight) + 'px';\n        this._overviewDomElement.style.width = DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH + 'px';\n        this._overviewDomElement.style.left = (width - DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH) + 'px';\n        this._overviewViewportDomElement.setWidth(DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH);\n        this._overviewViewportDomElement.setHeight(30);\n        this._originalEditor.layout({ width: splitPoint, height: (height - reviewHeight) });\n        this._modifiedEditor.layout({ width: width - splitPoint - (this._options.renderOverviewRuler ? DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH : 0), height: (height - reviewHeight) });\n        if (this._originalOverviewRuler || this._modifiedOverviewRuler) {\n            this._layoutOverviewRulers();\n        }\n        this._reviewPane.layout(height - reviewHeight, width, reviewHeight);\n        this._layoutOverviewViewport();\n    }\n    _layoutOverviewViewport() {\n        const layout = this._computeOverviewViewport();\n        if (!layout) {\n            this._overviewViewportDomElement.setTop(0);\n            this._overviewViewportDomElement.setHeight(0);\n        }\n        else {\n            this._overviewViewportDomElement.setTop(layout.top);\n            this._overviewViewportDomElement.setHeight(layout.height);\n        }\n    }\n    _computeOverviewViewport() {\n        const layoutInfo = this._modifiedEditor.getLayoutInfo();\n        if (!layoutInfo) {\n            return null;\n        }\n        const scrollTop = this._modifiedEditor.getScrollTop();\n        const scrollHeight = this._modifiedEditor.getScrollHeight();\n        const computedAvailableSize = Math.max(0, layoutInfo.height);\n        const computedRepresentableSize = Math.max(0, computedAvailableSize - 2 * 0);\n        const computedRatio = scrollHeight > 0 ? (computedRepresentableSize / scrollHeight) : 0;\n        const computedSliderSize = Math.max(0, Math.floor(layoutInfo.height * computedRatio));\n        const computedSliderPosition = Math.floor(scrollTop * computedRatio);\n        return {\n            height: computedSliderSize,\n            top: computedSliderPosition\n        };\n    }\n    _createDataSource() {\n        return {\n            getWidth: () => {\n                return this._elementSizeObserver.getWidth();\n            },\n            getHeight: () => {\n                return (this._elementSizeObserver.getHeight() - this._getReviewHeight());\n            },\n            getOptions: () => {\n                return {\n                    renderOverviewRuler: this._options.renderOverviewRuler\n                };\n            },\n            getContainerDomNode: () => {\n                return this._containerDomElement;\n            },\n            relayoutEditors: () => {\n                this._doLayout();\n            },\n            getOriginalEditor: () => {\n                return this._originalEditor;\n            },\n            getModifiedEditor: () => {\n                return this._modifiedEditor;\n            }\n        };\n    }\n    _setStrategy(newStrategy) {\n        if (this._strategy) {\n            this._strategy.dispose();\n        }\n        this._strategy = newStrategy;\n        newStrategy.applyColors(this._themeService.getColorTheme());\n        if (this._diffComputationResult) {\n            this._updateDecorations();\n        }\n        // Just do a layout, the strategy might need it\n        this._doLayout();\n    }\n    _getLineChangeAtOrBeforeLineNumber(lineNumber, startLineNumberExtractor) {\n        const lineChanges = (this._diffComputationResult ? this._diffComputationResult.changes : []);\n        if (lineChanges.length === 0 || lineNumber < startLineNumberExtractor(lineChanges[0])) {\n            // There are no changes or `lineNumber` is before the first change\n            return null;\n        }\n        let min = 0;\n        let max = lineChanges.length - 1;\n        while (min < max) {\n            const mid = Math.floor((min + max) / 2);\n            const midStart = startLineNumberExtractor(lineChanges[mid]);\n            const midEnd = (mid + 1 <= max ? startLineNumberExtractor(lineChanges[mid + 1]) : 1073741824 /* MAX_SAFE_SMALL_INTEGER */);\n            if (lineNumber < midStart) {\n                max = mid - 1;\n            }\n            else if (lineNumber >= midEnd) {\n                min = mid + 1;\n            }\n            else {\n                // HIT!\n                min = mid;\n                max = mid;\n            }\n        }\n        return lineChanges[min];\n    }\n    _getEquivalentLineForOriginalLineNumber(lineNumber) {\n        const lineChange = this._getLineChangeAtOrBeforeLineNumber(lineNumber, (lineChange) => lineChange.originalStartLineNumber);\n        if (!lineChange) {\n            return lineNumber;\n        }\n        const originalEquivalentLineNumber = lineChange.originalStartLineNumber + (lineChange.originalEndLineNumber > 0 ? -1 : 0);\n        const modifiedEquivalentLineNumber = lineChange.modifiedStartLineNumber + (lineChange.modifiedEndLineNumber > 0 ? -1 : 0);\n        const lineChangeOriginalLength = (lineChange.originalEndLineNumber > 0 ? (lineChange.originalEndLineNumber - lineChange.originalStartLineNumber + 1) : 0);\n        const lineChangeModifiedLength = (lineChange.modifiedEndLineNumber > 0 ? (lineChange.modifiedEndLineNumber - lineChange.modifiedStartLineNumber + 1) : 0);\n        const delta = lineNumber - originalEquivalentLineNumber;\n        if (delta <= lineChangeOriginalLength) {\n            return modifiedEquivalentLineNumber + Math.min(delta, lineChangeModifiedLength);\n        }\n        return modifiedEquivalentLineNumber + lineChangeModifiedLength - lineChangeOriginalLength + delta;\n    }\n    _getEquivalentLineForModifiedLineNumber(lineNumber) {\n        const lineChange = this._getLineChangeAtOrBeforeLineNumber(lineNumber, (lineChange) => lineChange.modifiedStartLineNumber);\n        if (!lineChange) {\n            return lineNumber;\n        }\n        const originalEquivalentLineNumber = lineChange.originalStartLineNumber + (lineChange.originalEndLineNumber > 0 ? -1 : 0);\n        const modifiedEquivalentLineNumber = lineChange.modifiedStartLineNumber + (lineChange.modifiedEndLineNumber > 0 ? -1 : 0);\n        const lineChangeOriginalLength = (lineChange.originalEndLineNumber > 0 ? (lineChange.originalEndLineNumber - lineChange.originalStartLineNumber + 1) : 0);\n        const lineChangeModifiedLength = (lineChange.modifiedEndLineNumber > 0 ? (lineChange.modifiedEndLineNumber - lineChange.modifiedStartLineNumber + 1) : 0);\n        const delta = lineNumber - modifiedEquivalentLineNumber;\n        if (delta <= lineChangeModifiedLength) {\n            return originalEquivalentLineNumber + Math.min(delta, lineChangeOriginalLength);\n        }\n        return originalEquivalentLineNumber + lineChangeOriginalLength - lineChangeModifiedLength + delta;\n    }\n    getDiffLineInformationForOriginal(lineNumber) {\n        if (!this._diffComputationResult) {\n            // Cannot answer that which I don't know\n            return null;\n        }\n        return {\n            equivalentLineNumber: this._getEquivalentLineForOriginalLineNumber(lineNumber)\n        };\n    }\n    getDiffLineInformationForModified(lineNumber) {\n        if (!this._diffComputationResult) {\n            // Cannot answer that which I don't know\n            return null;\n        }\n        return {\n            equivalentLineNumber: this._getEquivalentLineForModifiedLineNumber(lineNumber)\n        };\n    }\n};\nDiffEditorWidget.ONE_OVERVIEW_WIDTH = 15;\nDiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH = 30;\nDiffEditorWidget.UPDATE_DIFF_DECORATIONS_DELAY = 200; // ms\nDiffEditorWidget = __decorate([\n    __param(3, IClipboardService),\n    __param(4, IEditorWorkerService),\n    __param(5, IContextKeyService),\n    __param(6, IInstantiationService),\n    __param(7, ICodeEditorService),\n    __param(8, IThemeService),\n    __param(9, INotificationService),\n    __param(10, IContextMenuService),\n    __param(11, IEditorProgressService)\n], DiffEditorWidget);\nexport { DiffEditorWidget };\nclass DiffEditorWidgetStyle extends Disposable {\n    constructor(dataSource) {\n        super();\n        this._dataSource = dataSource;\n        this._insertColor = null;\n        this._removeColor = null;\n    }\n    applyColors(theme) {\n        const newInsertColor = (theme.getColor(diffInserted) || defaultInsertColor).transparent(2);\n        const newRemoveColor = (theme.getColor(diffRemoved) || defaultRemoveColor).transparent(2);\n        const hasChanges = !newInsertColor.equals(this._insertColor) || !newRemoveColor.equals(this._removeColor);\n        this._insertColor = newInsertColor;\n        this._removeColor = newRemoveColor;\n        return hasChanges;\n    }\n    getEditorsDiffDecorations(lineChanges, ignoreTrimWhitespace, renderIndicators, originalWhitespaces, modifiedWhitespaces) {\n        // Get view zones\n        modifiedWhitespaces = modifiedWhitespaces.sort((a, b) => {\n            return a.afterLineNumber - b.afterLineNumber;\n        });\n        originalWhitespaces = originalWhitespaces.sort((a, b) => {\n            return a.afterLineNumber - b.afterLineNumber;\n        });\n        const zones = this._getViewZones(lineChanges, originalWhitespaces, modifiedWhitespaces, renderIndicators);\n        // Get decorations & overview ruler zones\n        const originalDecorations = this._getOriginalEditorDecorations(lineChanges, ignoreTrimWhitespace, renderIndicators);\n        const modifiedDecorations = this._getModifiedEditorDecorations(lineChanges, ignoreTrimWhitespace, renderIndicators);\n        return {\n            original: {\n                decorations: originalDecorations.decorations,\n                overviewZones: originalDecorations.overviewZones,\n                zones: zones.original\n            },\n            modified: {\n                decorations: modifiedDecorations.decorations,\n                overviewZones: modifiedDecorations.overviewZones,\n                zones: zones.modified\n            }\n        };\n    }\n}\nclass ForeignViewZonesIterator {\n    constructor(source) {\n        this._source = source;\n        this._index = -1;\n        this.current = null;\n        this.advance();\n    }\n    advance() {\n        this._index++;\n        if (this._index < this._source.length) {\n            this.current = this._source[this._index];\n        }\n        else {\n            this.current = null;\n        }\n    }\n}\nclass ViewZonesComputer {\n    constructor(_lineChanges, _originalForeignVZ, _modifiedForeignVZ, _originalEditor, _modifiedEditor) {\n        this._lineChanges = _lineChanges;\n        this._originalForeignVZ = _originalForeignVZ;\n        this._modifiedForeignVZ = _modifiedForeignVZ;\n        this._originalEditor = _originalEditor;\n        this._modifiedEditor = _modifiedEditor;\n    }\n    static _getViewLineCount(editor, startLineNumber, endLineNumber) {\n        const model = editor.getModel();\n        const viewModel = editor._getViewModel();\n        if (model && viewModel) {\n            const viewRange = getViewRange(model, viewModel, startLineNumber, endLineNumber);\n            return (viewRange.endLineNumber - viewRange.startLineNumber + 1);\n        }\n        return (endLineNumber - startLineNumber + 1);\n    }\n    getViewZones() {\n        const originalLineHeight = this._originalEditor.getOption(59 /* lineHeight */);\n        const modifiedLineHeight = this._modifiedEditor.getOption(59 /* lineHeight */);\n        const originalHasWrapping = (this._originalEditor.getOption(132 /* wrappingInfo */).wrappingColumn !== -1);\n        const modifiedHasWrapping = (this._modifiedEditor.getOption(132 /* wrappingInfo */).wrappingColumn !== -1);\n        const hasWrapping = (originalHasWrapping || modifiedHasWrapping);\n        const originalModel = this._originalEditor.getModel();\n        const originalCoordinatesConverter = this._originalEditor._getViewModel().coordinatesConverter;\n        const modifiedCoordinatesConverter = this._modifiedEditor._getViewModel().coordinatesConverter;\n        const result = {\n            original: [],\n            modified: []\n        };\n        let lineChangeModifiedLength = 0;\n        let lineChangeOriginalLength = 0;\n        let originalEquivalentLineNumber = 0;\n        let modifiedEquivalentLineNumber = 0;\n        let originalEndEquivalentLineNumber = 0;\n        let modifiedEndEquivalentLineNumber = 0;\n        const sortMyViewZones = (a, b) => {\n            return a.afterLineNumber - b.afterLineNumber;\n        };\n        const addAndCombineIfPossible = (destination, item) => {\n            if (item.domNode === null && destination.length > 0) {\n                const lastItem = destination[destination.length - 1];\n                if (lastItem.afterLineNumber === item.afterLineNumber && lastItem.domNode === null) {\n                    lastItem.heightInLines += item.heightInLines;\n                    return;\n                }\n            }\n            destination.push(item);\n        };\n        const modifiedForeignVZ = new ForeignViewZonesIterator(this._modifiedForeignVZ);\n        const originalForeignVZ = new ForeignViewZonesIterator(this._originalForeignVZ);\n        let lastOriginalLineNumber = 1;\n        let lastModifiedLineNumber = 1;\n        // In order to include foreign view zones after the last line change, the for loop will iterate once more after the end of the `lineChanges` array\n        for (let i = 0, length = this._lineChanges.length; i <= length; i++) {\n            const lineChange = (i < length ? this._lineChanges[i] : null);\n            if (lineChange !== null) {\n                originalEquivalentLineNumber = lineChange.originalStartLineNumber + (lineChange.originalEndLineNumber > 0 ? -1 : 0);\n                modifiedEquivalentLineNumber = lineChange.modifiedStartLineNumber + (lineChange.modifiedEndLineNumber > 0 ? -1 : 0);\n                lineChangeOriginalLength = (lineChange.originalEndLineNumber > 0 ? ViewZonesComputer._getViewLineCount(this._originalEditor, lineChange.originalStartLineNumber, lineChange.originalEndLineNumber) : 0);\n                lineChangeModifiedLength = (lineChange.modifiedEndLineNumber > 0 ? ViewZonesComputer._getViewLineCount(this._modifiedEditor, lineChange.modifiedStartLineNumber, lineChange.modifiedEndLineNumber) : 0);\n                originalEndEquivalentLineNumber = Math.max(lineChange.originalStartLineNumber, lineChange.originalEndLineNumber);\n                modifiedEndEquivalentLineNumber = Math.max(lineChange.modifiedStartLineNumber, lineChange.modifiedEndLineNumber);\n            }\n            else {\n                // Increase to very large value to get the producing tests of foreign view zones running\n                originalEquivalentLineNumber += 10000000 + lineChangeOriginalLength;\n                modifiedEquivalentLineNumber += 10000000 + lineChangeModifiedLength;\n                originalEndEquivalentLineNumber = originalEquivalentLineNumber;\n                modifiedEndEquivalentLineNumber = modifiedEquivalentLineNumber;\n            }\n            // Each step produces view zones, and after producing them, we try to cancel them out, to avoid empty-empty view zone cases\n            let stepOriginal = [];\n            let stepModified = [];\n            // ---------------------------- PRODUCE VIEW ZONES\n            // [PRODUCE] View zones due to line mapping differences (equal lines but wrapped differently)\n            if (hasWrapping) {\n                let count;\n                if (lineChange) {\n                    if (lineChange.originalEndLineNumber > 0) {\n                        count = lineChange.originalStartLineNumber - lastOriginalLineNumber;\n                    }\n                    else {\n                        count = lineChange.modifiedStartLineNumber - lastModifiedLineNumber;\n                    }\n                }\n                else {\n                    count = originalModel.getLineCount() - lastOriginalLineNumber;\n                }\n                for (let i = 0; i < count; i++) {\n                    const originalLineNumber = lastOriginalLineNumber + i;\n                    const modifiedLineNumber = lastModifiedLineNumber + i;\n                    const originalViewLineCount = originalCoordinatesConverter.getModelLineViewLineCount(originalLineNumber);\n                    const modifiedViewLineCount = modifiedCoordinatesConverter.getModelLineViewLineCount(modifiedLineNumber);\n                    if (originalViewLineCount < modifiedViewLineCount) {\n                        stepOriginal.push({\n                            afterLineNumber: originalLineNumber,\n                            heightInLines: modifiedViewLineCount - originalViewLineCount,\n                            domNode: null,\n                            marginDomNode: null\n                        });\n                    }\n                    else if (originalViewLineCount > modifiedViewLineCount) {\n                        stepModified.push({\n                            afterLineNumber: modifiedLineNumber,\n                            heightInLines: originalViewLineCount - modifiedViewLineCount,\n                            domNode: null,\n                            marginDomNode: null\n                        });\n                    }\n                }\n                if (lineChange) {\n                    lastOriginalLineNumber = (lineChange.originalEndLineNumber > 0 ? lineChange.originalEndLineNumber : lineChange.originalStartLineNumber) + 1;\n                    lastModifiedLineNumber = (lineChange.modifiedEndLineNumber > 0 ? lineChange.modifiedEndLineNumber : lineChange.modifiedStartLineNumber) + 1;\n                }\n            }\n            // [PRODUCE] View zone(s) in original-side due to foreign view zone(s) in modified-side\n            while (modifiedForeignVZ.current && modifiedForeignVZ.current.afterLineNumber <= modifiedEndEquivalentLineNumber) {\n                let viewZoneLineNumber;\n                if (modifiedForeignVZ.current.afterLineNumber <= modifiedEquivalentLineNumber) {\n                    viewZoneLineNumber = originalEquivalentLineNumber - modifiedEquivalentLineNumber + modifiedForeignVZ.current.afterLineNumber;\n                }\n                else {\n                    viewZoneLineNumber = originalEndEquivalentLineNumber;\n                }\n                let marginDomNode = null;\n                if (lineChange && lineChange.modifiedStartLineNumber <= modifiedForeignVZ.current.afterLineNumber && modifiedForeignVZ.current.afterLineNumber <= lineChange.modifiedEndLineNumber) {\n                    marginDomNode = this._createOriginalMarginDomNodeForModifiedForeignViewZoneInAddedRegion();\n                }\n                stepOriginal.push({\n                    afterLineNumber: viewZoneLineNumber,\n                    heightInLines: modifiedForeignVZ.current.height / modifiedLineHeight,\n                    domNode: null,\n                    marginDomNode: marginDomNode\n                });\n                modifiedForeignVZ.advance();\n            }\n            // [PRODUCE] View zone(s) in modified-side due to foreign view zone(s) in original-side\n            while (originalForeignVZ.current && originalForeignVZ.current.afterLineNumber <= originalEndEquivalentLineNumber) {\n                let viewZoneLineNumber;\n                if (originalForeignVZ.current.afterLineNumber <= originalEquivalentLineNumber) {\n                    viewZoneLineNumber = modifiedEquivalentLineNumber - originalEquivalentLineNumber + originalForeignVZ.current.afterLineNumber;\n                }\n                else {\n                    viewZoneLineNumber = modifiedEndEquivalentLineNumber;\n                }\n                stepModified.push({\n                    afterLineNumber: viewZoneLineNumber,\n                    heightInLines: originalForeignVZ.current.height / originalLineHeight,\n                    domNode: null\n                });\n                originalForeignVZ.advance();\n            }\n            if (lineChange !== null && isChangeOrInsert(lineChange)) {\n                const r = this._produceOriginalFromDiff(lineChange, lineChangeOriginalLength, lineChangeModifiedLength);\n                if (r) {\n                    stepOriginal.push(r);\n                }\n            }\n            if (lineChange !== null && isChangeOrDelete(lineChange)) {\n                const r = this._produceModifiedFromDiff(lineChange, lineChangeOriginalLength, lineChangeModifiedLength);\n                if (r) {\n                    stepModified.push(r);\n                }\n            }\n            // ---------------------------- END PRODUCE VIEW ZONES\n            // ---------------------------- EMIT MINIMAL VIEW ZONES\n            // [CANCEL & EMIT] Try to cancel view zones out\n            let stepOriginalIndex = 0;\n            let stepModifiedIndex = 0;\n            stepOriginal = stepOriginal.sort(sortMyViewZones);\n            stepModified = stepModified.sort(sortMyViewZones);\n            while (stepOriginalIndex < stepOriginal.length && stepModifiedIndex < stepModified.length) {\n                const original = stepOriginal[stepOriginalIndex];\n                const modified = stepModified[stepModifiedIndex];\n                const originalDelta = original.afterLineNumber - originalEquivalentLineNumber;\n                const modifiedDelta = modified.afterLineNumber - modifiedEquivalentLineNumber;\n                if (originalDelta < modifiedDelta) {\n                    addAndCombineIfPossible(result.original, original);\n                    stepOriginalIndex++;\n                }\n                else if (modifiedDelta < originalDelta) {\n                    addAndCombineIfPossible(result.modified, modified);\n                    stepModifiedIndex++;\n                }\n                else if (original.shouldNotShrink) {\n                    addAndCombineIfPossible(result.original, original);\n                    stepOriginalIndex++;\n                }\n                else if (modified.shouldNotShrink) {\n                    addAndCombineIfPossible(result.modified, modified);\n                    stepModifiedIndex++;\n                }\n                else {\n                    if (original.heightInLines >= modified.heightInLines) {\n                        // modified view zone gets removed\n                        original.heightInLines -= modified.heightInLines;\n                        stepModifiedIndex++;\n                    }\n                    else {\n                        // original view zone gets removed\n                        modified.heightInLines -= original.heightInLines;\n                        stepOriginalIndex++;\n                    }\n                }\n            }\n            // [EMIT] Remaining original view zones\n            while (stepOriginalIndex < stepOriginal.length) {\n                addAndCombineIfPossible(result.original, stepOriginal[stepOriginalIndex]);\n                stepOriginalIndex++;\n            }\n            // [EMIT] Remaining modified view zones\n            while (stepModifiedIndex < stepModified.length) {\n                addAndCombineIfPossible(result.modified, stepModified[stepModifiedIndex]);\n                stepModifiedIndex++;\n            }\n            // ---------------------------- END EMIT MINIMAL VIEW ZONES\n        }\n        return {\n            original: ViewZonesComputer._ensureDomNodes(result.original),\n            modified: ViewZonesComputer._ensureDomNodes(result.modified),\n        };\n    }\n    static _ensureDomNodes(zones) {\n        return zones.map((z) => {\n            if (!z.domNode) {\n                z.domNode = createFakeLinesDiv();\n            }\n            return z;\n        });\n    }\n}\nfunction createDecoration(startLineNumber, startColumn, endLineNumber, endColumn, options) {\n    return {\n        range: new Range(startLineNumber, startColumn, endLineNumber, endColumn),\n        options: options\n    };\n}\nconst DECORATIONS = {\n    charDelete: ModelDecorationOptions.register({\n        description: 'diff-editor-char-delete',\n        className: 'char-delete'\n    }),\n    charDeleteWholeLine: ModelDecorationOptions.register({\n        description: 'diff-editor-char-delete-whole-line',\n        className: 'char-delete',\n        isWholeLine: true\n    }),\n    charInsert: ModelDecorationOptions.register({\n        description: 'diff-editor-char-insert',\n        className: 'char-insert'\n    }),\n    charInsertWholeLine: ModelDecorationOptions.register({\n        description: 'diff-editor-char-insert-whole-line',\n        className: 'char-insert',\n        isWholeLine: true\n    }),\n    lineInsert: ModelDecorationOptions.register({\n        description: 'diff-editor-line-insert',\n        className: 'line-insert',\n        marginClassName: 'line-insert',\n        isWholeLine: true\n    }),\n    lineInsertWithSign: ModelDecorationOptions.register({\n        description: 'diff-editor-line-insert-with-sign',\n        className: 'line-insert',\n        linesDecorationsClassName: 'insert-sign ' + ThemeIcon.asClassName(diffInsertIcon),\n        marginClassName: 'line-insert',\n        isWholeLine: true\n    }),\n    lineDelete: ModelDecorationOptions.register({\n        description: 'diff-editor-line-delete',\n        className: 'line-delete',\n        marginClassName: 'line-delete',\n        isWholeLine: true\n    }),\n    lineDeleteWithSign: ModelDecorationOptions.register({\n        description: 'diff-editor-line-delete-with-sign',\n        className: 'line-delete',\n        linesDecorationsClassName: 'delete-sign ' + ThemeIcon.asClassName(diffRemoveIcon),\n        marginClassName: 'line-delete',\n        isWholeLine: true\n    }),\n    lineDeleteMargin: ModelDecorationOptions.register({\n        description: 'diff-editor-line-delete-margin',\n        marginClassName: 'line-delete',\n    })\n};\nclass DiffEditorWidgetSideBySide extends DiffEditorWidgetStyle {\n    constructor(dataSource, enableSplitViewResizing) {\n        super(dataSource);\n        this._disableSash = (enableSplitViewResizing === false);\n        this._sashRatio = null;\n        this._sashPosition = null;\n        this._startSashPosition = null;\n        this._sash = this._register(new Sash(this._dataSource.getContainerDomNode(), this, { orientation: 0 /* VERTICAL */ }));\n        if (this._disableSash) {\n            this._sash.state = 0 /* Disabled */;\n        }\n        this._sash.onDidStart(() => this._onSashDragStart());\n        this._sash.onDidChange((e) => this._onSashDrag(e));\n        this._sash.onDidEnd(() => this._onSashDragEnd());\n        this._sash.onDidReset(() => this._onSashReset());\n    }\n    setEnableSplitViewResizing(enableSplitViewResizing) {\n        const newDisableSash = (enableSplitViewResizing === false);\n        if (this._disableSash !== newDisableSash) {\n            this._disableSash = newDisableSash;\n            this._sash.state = this._disableSash ? 0 /* Disabled */ : 3 /* Enabled */;\n        }\n    }\n    layout(sashRatio = this._sashRatio) {\n        const w = this._dataSource.getWidth();\n        const contentWidth = w - (this._dataSource.getOptions().renderOverviewRuler ? DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH : 0);\n        let sashPosition = Math.floor((sashRatio || 0.5) * contentWidth);\n        const midPoint = Math.floor(0.5 * contentWidth);\n        sashPosition = this._disableSash ? midPoint : sashPosition || midPoint;\n        if (contentWidth > DiffEditorWidgetSideBySide.MINIMUM_EDITOR_WIDTH * 2) {\n            if (sashPosition < DiffEditorWidgetSideBySide.MINIMUM_EDITOR_WIDTH) {\n                sashPosition = DiffEditorWidgetSideBySide.MINIMUM_EDITOR_WIDTH;\n            }\n            if (sashPosition > contentWidth - DiffEditorWidgetSideBySide.MINIMUM_EDITOR_WIDTH) {\n                sashPosition = contentWidth - DiffEditorWidgetSideBySide.MINIMUM_EDITOR_WIDTH;\n            }\n        }\n        else {\n            sashPosition = midPoint;\n        }\n        if (this._sashPosition !== sashPosition) {\n            this._sashPosition = sashPosition;\n            this._sash.layout();\n        }\n        return this._sashPosition;\n    }\n    _onSashDragStart() {\n        this._startSashPosition = this._sashPosition;\n    }\n    _onSashDrag(e) {\n        const w = this._dataSource.getWidth();\n        const contentWidth = w - (this._dataSource.getOptions().renderOverviewRuler ? DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH : 0);\n        const sashPosition = this.layout((this._startSashPosition + (e.currentX - e.startX)) / contentWidth);\n        this._sashRatio = sashPosition / contentWidth;\n        this._dataSource.relayoutEditors();\n    }\n    _onSashDragEnd() {\n        this._sash.layout();\n    }\n    _onSashReset() {\n        this._sashRatio = 0.5;\n        this._dataSource.relayoutEditors();\n        this._sash.layout();\n    }\n    getVerticalSashTop(sash) {\n        return 0;\n    }\n    getVerticalSashLeft(sash) {\n        return this._sashPosition;\n    }\n    getVerticalSashHeight(sash) {\n        return this._dataSource.getHeight();\n    }\n    _getViewZones(lineChanges, originalForeignVZ, modifiedForeignVZ) {\n        const originalEditor = this._dataSource.getOriginalEditor();\n        const modifiedEditor = this._dataSource.getModifiedEditor();\n        const c = new SideBySideViewZonesComputer(lineChanges, originalForeignVZ, modifiedForeignVZ, originalEditor, modifiedEditor);\n        return c.getViewZones();\n    }\n    _getOriginalEditorDecorations(lineChanges, ignoreTrimWhitespace, renderIndicators) {\n        const originalEditor = this._dataSource.getOriginalEditor();\n        const overviewZoneColor = String(this._removeColor);\n        const result = {\n            decorations: [],\n            overviewZones: []\n        };\n        const originalModel = originalEditor.getModel();\n        const originalViewModel = originalEditor._getViewModel();\n        for (const lineChange of lineChanges) {\n            if (isChangeOrDelete(lineChange)) {\n                result.decorations.push({\n                    range: new Range(lineChange.originalStartLineNumber, 1, lineChange.originalEndLineNumber, 1073741824 /* MAX_SAFE_SMALL_INTEGER */),\n                    options: (renderIndicators ? DECORATIONS.lineDeleteWithSign : DECORATIONS.lineDelete)\n                });\n                if (!isChangeOrInsert(lineChange) || !lineChange.charChanges) {\n                    result.decorations.push(createDecoration(lineChange.originalStartLineNumber, 1, lineChange.originalEndLineNumber, 1073741824 /* MAX_SAFE_SMALL_INTEGER */, DECORATIONS.charDeleteWholeLine));\n                }\n                const viewRange = getViewRange(originalModel, originalViewModel, lineChange.originalStartLineNumber, lineChange.originalEndLineNumber);\n                result.overviewZones.push(new OverviewRulerZone(viewRange.startLineNumber, viewRange.endLineNumber, overviewZoneColor));\n                if (lineChange.charChanges) {\n                    for (const charChange of lineChange.charChanges) {\n                        if (isChangeOrDelete(charChange)) {\n                            if (ignoreTrimWhitespace) {\n                                for (let lineNumber = charChange.originalStartLineNumber; lineNumber <= charChange.originalEndLineNumber; lineNumber++) {\n                                    let startColumn;\n                                    let endColumn;\n                                    if (lineNumber === charChange.originalStartLineNumber) {\n                                        startColumn = charChange.originalStartColumn;\n                                    }\n                                    else {\n                                        startColumn = originalModel.getLineFirstNonWhitespaceColumn(lineNumber);\n                                    }\n                                    if (lineNumber === charChange.originalEndLineNumber) {\n                                        endColumn = charChange.originalEndColumn;\n                                    }\n                                    else {\n                                        endColumn = originalModel.getLineLastNonWhitespaceColumn(lineNumber);\n                                    }\n                                    result.decorations.push(createDecoration(lineNumber, startColumn, lineNumber, endColumn, DECORATIONS.charDelete));\n                                }\n                            }\n                            else {\n                                result.decorations.push(createDecoration(charChange.originalStartLineNumber, charChange.originalStartColumn, charChange.originalEndLineNumber, charChange.originalEndColumn, DECORATIONS.charDelete));\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return result;\n    }\n    _getModifiedEditorDecorations(lineChanges, ignoreTrimWhitespace, renderIndicators) {\n        const modifiedEditor = this._dataSource.getModifiedEditor();\n        const overviewZoneColor = String(this._insertColor);\n        const result = {\n            decorations: [],\n            overviewZones: []\n        };\n        const modifiedModel = modifiedEditor.getModel();\n        const modifiedViewModel = modifiedEditor._getViewModel();\n        for (const lineChange of lineChanges) {\n            if (isChangeOrInsert(lineChange)) {\n                result.decorations.push({\n                    range: new Range(lineChange.modifiedStartLineNumber, 1, lineChange.modifiedEndLineNumber, 1073741824 /* MAX_SAFE_SMALL_INTEGER */),\n                    options: (renderIndicators ? DECORATIONS.lineInsertWithSign : DECORATIONS.lineInsert)\n                });\n                if (!isChangeOrDelete(lineChange) || !lineChange.charChanges) {\n                    result.decorations.push(createDecoration(lineChange.modifiedStartLineNumber, 1, lineChange.modifiedEndLineNumber, 1073741824 /* MAX_SAFE_SMALL_INTEGER */, DECORATIONS.charInsertWholeLine));\n                }\n                const viewRange = getViewRange(modifiedModel, modifiedViewModel, lineChange.modifiedStartLineNumber, lineChange.modifiedEndLineNumber);\n                result.overviewZones.push(new OverviewRulerZone(viewRange.startLineNumber, viewRange.endLineNumber, overviewZoneColor));\n                if (lineChange.charChanges) {\n                    for (const charChange of lineChange.charChanges) {\n                        if (isChangeOrInsert(charChange)) {\n                            if (ignoreTrimWhitespace) {\n                                for (let lineNumber = charChange.modifiedStartLineNumber; lineNumber <= charChange.modifiedEndLineNumber; lineNumber++) {\n                                    let startColumn;\n                                    let endColumn;\n                                    if (lineNumber === charChange.modifiedStartLineNumber) {\n                                        startColumn = charChange.modifiedStartColumn;\n                                    }\n                                    else {\n                                        startColumn = modifiedModel.getLineFirstNonWhitespaceColumn(lineNumber);\n                                    }\n                                    if (lineNumber === charChange.modifiedEndLineNumber) {\n                                        endColumn = charChange.modifiedEndColumn;\n                                    }\n                                    else {\n                                        endColumn = modifiedModel.getLineLastNonWhitespaceColumn(lineNumber);\n                                    }\n                                    result.decorations.push(createDecoration(lineNumber, startColumn, lineNumber, endColumn, DECORATIONS.charInsert));\n                                }\n                            }\n                            else {\n                                result.decorations.push(createDecoration(charChange.modifiedStartLineNumber, charChange.modifiedStartColumn, charChange.modifiedEndLineNumber, charChange.modifiedEndColumn, DECORATIONS.charInsert));\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}\nDiffEditorWidgetSideBySide.MINIMUM_EDITOR_WIDTH = 100;\nclass SideBySideViewZonesComputer extends ViewZonesComputer {\n    constructor(lineChanges, originalForeignVZ, modifiedForeignVZ, originalEditor, modifiedEditor) {\n        super(lineChanges, originalForeignVZ, modifiedForeignVZ, originalEditor, modifiedEditor);\n    }\n    _createOriginalMarginDomNodeForModifiedForeignViewZoneInAddedRegion() {\n        return null;\n    }\n    _produceOriginalFromDiff(lineChange, lineChangeOriginalLength, lineChangeModifiedLength) {\n        if (lineChangeModifiedLength > lineChangeOriginalLength) {\n            return {\n                afterLineNumber: Math.max(lineChange.originalStartLineNumber, lineChange.originalEndLineNumber),\n                heightInLines: (lineChangeModifiedLength - lineChangeOriginalLength),\n                domNode: null\n            };\n        }\n        return null;\n    }\n    _produceModifiedFromDiff(lineChange, lineChangeOriginalLength, lineChangeModifiedLength) {\n        if (lineChangeOriginalLength > lineChangeModifiedLength) {\n            return {\n                afterLineNumber: Math.max(lineChange.modifiedStartLineNumber, lineChange.modifiedEndLineNumber),\n                heightInLines: (lineChangeOriginalLength - lineChangeModifiedLength),\n                domNode: null\n            };\n        }\n        return null;\n    }\n}\nclass DiffEditorWidgetInline extends DiffEditorWidgetStyle {\n    constructor(dataSource, enableSplitViewResizing) {\n        super(dataSource);\n        this._decorationsLeft = dataSource.getOriginalEditor().getLayoutInfo().decorationsLeft;\n        this._register(dataSource.getOriginalEditor().onDidLayoutChange((layoutInfo) => {\n            if (this._decorationsLeft !== layoutInfo.decorationsLeft) {\n                this._decorationsLeft = layoutInfo.decorationsLeft;\n                dataSource.relayoutEditors();\n            }\n        }));\n    }\n    setEnableSplitViewResizing(enableSplitViewResizing) {\n        // Nothing to do..\n    }\n    _getViewZones(lineChanges, originalForeignVZ, modifiedForeignVZ, renderIndicators) {\n        const originalEditor = this._dataSource.getOriginalEditor();\n        const modifiedEditor = this._dataSource.getModifiedEditor();\n        const computer = new InlineViewZonesComputer(lineChanges, originalForeignVZ, modifiedForeignVZ, originalEditor, modifiedEditor, renderIndicators);\n        return computer.getViewZones();\n    }\n    _getOriginalEditorDecorations(lineChanges, ignoreTrimWhitespace, renderIndicators) {\n        const overviewZoneColor = String(this._removeColor);\n        const result = {\n            decorations: [],\n            overviewZones: []\n        };\n        const originalEditor = this._dataSource.getOriginalEditor();\n        const originalModel = originalEditor.getModel();\n        const originalViewModel = originalEditor._getViewModel();\n        for (const lineChange of lineChanges) {\n            // Add overview zones in the overview ruler\n            if (isChangeOrDelete(lineChange)) {\n                result.decorations.push({\n                    range: new Range(lineChange.originalStartLineNumber, 1, lineChange.originalEndLineNumber, 1073741824 /* MAX_SAFE_SMALL_INTEGER */),\n                    options: DECORATIONS.lineDeleteMargin\n                });\n                const viewRange = getViewRange(originalModel, originalViewModel, lineChange.originalStartLineNumber, lineChange.originalEndLineNumber);\n                result.overviewZones.push(new OverviewRulerZone(viewRange.startLineNumber, viewRange.endLineNumber, overviewZoneColor));\n            }\n        }\n        return result;\n    }\n    _getModifiedEditorDecorations(lineChanges, ignoreTrimWhitespace, renderIndicators) {\n        const modifiedEditor = this._dataSource.getModifiedEditor();\n        const overviewZoneColor = String(this._insertColor);\n        const result = {\n            decorations: [],\n            overviewZones: []\n        };\n        const modifiedModel = modifiedEditor.getModel();\n        const modifiedViewModel = modifiedEditor._getViewModel();\n        for (const lineChange of lineChanges) {\n            // Add decorations & overview zones\n            if (isChangeOrInsert(lineChange)) {\n                result.decorations.push({\n                    range: new Range(lineChange.modifiedStartLineNumber, 1, lineChange.modifiedEndLineNumber, 1073741824 /* MAX_SAFE_SMALL_INTEGER */),\n                    options: (renderIndicators ? DECORATIONS.lineInsertWithSign : DECORATIONS.lineInsert)\n                });\n                const viewRange = getViewRange(modifiedModel, modifiedViewModel, lineChange.modifiedStartLineNumber, lineChange.modifiedEndLineNumber);\n                result.overviewZones.push(new OverviewRulerZone(viewRange.startLineNumber, viewRange.endLineNumber, overviewZoneColor));\n                if (lineChange.charChanges) {\n                    for (const charChange of lineChange.charChanges) {\n                        if (isChangeOrInsert(charChange)) {\n                            if (ignoreTrimWhitespace) {\n                                for (let lineNumber = charChange.modifiedStartLineNumber; lineNumber <= charChange.modifiedEndLineNumber; lineNumber++) {\n                                    let startColumn;\n                                    let endColumn;\n                                    if (lineNumber === charChange.modifiedStartLineNumber) {\n                                        startColumn = charChange.modifiedStartColumn;\n                                    }\n                                    else {\n                                        startColumn = modifiedModel.getLineFirstNonWhitespaceColumn(lineNumber);\n                                    }\n                                    if (lineNumber === charChange.modifiedEndLineNumber) {\n                                        endColumn = charChange.modifiedEndColumn;\n                                    }\n                                    else {\n                                        endColumn = modifiedModel.getLineLastNonWhitespaceColumn(lineNumber);\n                                    }\n                                    result.decorations.push(createDecoration(lineNumber, startColumn, lineNumber, endColumn, DECORATIONS.charInsert));\n                                }\n                            }\n                            else {\n                                result.decorations.push(createDecoration(charChange.modifiedStartLineNumber, charChange.modifiedStartColumn, charChange.modifiedEndLineNumber, charChange.modifiedEndColumn, DECORATIONS.charInsert));\n                            }\n                        }\n                    }\n                }\n                else {\n                    result.decorations.push(createDecoration(lineChange.modifiedStartLineNumber, 1, lineChange.modifiedEndLineNumber, 1073741824 /* MAX_SAFE_SMALL_INTEGER */, DECORATIONS.charInsertWholeLine));\n                }\n            }\n        }\n        return result;\n    }\n    layout() {\n        // An editor should not be smaller than 5px\n        return Math.max(5, this._decorationsLeft);\n    }\n}\nclass InlineViewZonesComputer extends ViewZonesComputer {\n    constructor(lineChanges, originalForeignVZ, modifiedForeignVZ, originalEditor, modifiedEditor, renderIndicators) {\n        super(lineChanges, originalForeignVZ, modifiedForeignVZ, originalEditor, modifiedEditor);\n        this._originalModel = originalEditor.getModel();\n        this._renderIndicators = renderIndicators;\n        this._pendingLineChange = [];\n        this._pendingViewZones = [];\n        this._lineBreaksComputer = this._modifiedEditor._getViewModel().createLineBreaksComputer();\n    }\n    getViewZones() {\n        const result = super.getViewZones();\n        this._finalize(result);\n        return result;\n    }\n    _createOriginalMarginDomNodeForModifiedForeignViewZoneInAddedRegion() {\n        const result = document.createElement('div');\n        result.className = 'inline-added-margin-view-zone';\n        return result;\n    }\n    _produceOriginalFromDiff(lineChange, lineChangeOriginalLength, lineChangeModifiedLength) {\n        const marginDomNode = document.createElement('div');\n        marginDomNode.className = 'inline-added-margin-view-zone';\n        return {\n            afterLineNumber: Math.max(lineChange.originalStartLineNumber, lineChange.originalEndLineNumber),\n            heightInLines: lineChangeModifiedLength,\n            domNode: document.createElement('div'),\n            marginDomNode: marginDomNode\n        };\n    }\n    _produceModifiedFromDiff(lineChange, lineChangeOriginalLength, lineChangeModifiedLength) {\n        const domNode = document.createElement('div');\n        domNode.className = `view-lines line-delete ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`;\n        const marginDomNode = document.createElement('div');\n        marginDomNode.className = 'inline-deleted-margin-view-zone';\n        const viewZone = {\n            shouldNotShrink: true,\n            afterLineNumber: (lineChange.modifiedEndLineNumber === 0 ? lineChange.modifiedStartLineNumber : lineChange.modifiedStartLineNumber - 1),\n            heightInLines: lineChangeOriginalLength,\n            minWidthInPx: 0,\n            domNode: domNode,\n            marginDomNode: marginDomNode,\n            diff: {\n                originalStartLineNumber: lineChange.originalStartLineNumber,\n                originalEndLineNumber: lineChange.originalEndLineNumber,\n                modifiedStartLineNumber: lineChange.modifiedStartLineNumber,\n                modifiedEndLineNumber: lineChange.modifiedEndLineNumber,\n                originalModel: this._originalModel,\n                viewLineCounts: null,\n            }\n        };\n        for (let lineNumber = lineChange.originalStartLineNumber; lineNumber <= lineChange.originalEndLineNumber; lineNumber++) {\n            this._lineBreaksComputer.addRequest(this._originalModel.getLineContent(lineNumber), null, null);\n        }\n        this._pendingLineChange.push(lineChange);\n        this._pendingViewZones.push(viewZone);\n        return viewZone;\n    }\n    _finalize(result) {\n        const modifiedEditorOptions = this._modifiedEditor.getOptions();\n        const tabSize = this._modifiedEditor.getModel().getOptions().tabSize;\n        const fontInfo = modifiedEditorOptions.get(44 /* fontInfo */);\n        const disableMonospaceOptimizations = modifiedEditorOptions.get(29 /* disableMonospaceOptimizations */);\n        const typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        const scrollBeyondLastColumn = modifiedEditorOptions.get(93 /* scrollBeyondLastColumn */);\n        const mightContainNonBasicASCII = this._originalModel.mightContainNonBasicASCII();\n        const mightContainRTL = this._originalModel.mightContainRTL();\n        const lineHeight = modifiedEditorOptions.get(59 /* lineHeight */);\n        const layoutInfo = modifiedEditorOptions.get(131 /* layoutInfo */);\n        const lineDecorationsWidth = layoutInfo.decorationsWidth;\n        const stopRenderingLineAfter = modifiedEditorOptions.get(105 /* stopRenderingLineAfter */);\n        const renderWhitespace = modifiedEditorOptions.get(88 /* renderWhitespace */);\n        const renderControlCharacters = modifiedEditorOptions.get(83 /* renderControlCharacters */);\n        const fontLigatures = modifiedEditorOptions.get(45 /* fontLigatures */);\n        const lineBreaks = this._lineBreaksComputer.finalize();\n        let lineBreakIndex = 0;\n        for (let i = 0; i < this._pendingLineChange.length; i++) {\n            const lineChange = this._pendingLineChange[i];\n            const viewZone = this._pendingViewZones[i];\n            const domNode = viewZone.domNode;\n            applyFontInfo(domNode, fontInfo);\n            const marginDomNode = viewZone.marginDomNode;\n            applyFontInfo(marginDomNode, fontInfo);\n            const decorations = [];\n            if (lineChange.charChanges) {\n                for (const charChange of lineChange.charChanges) {\n                    if (isChangeOrDelete(charChange)) {\n                        decorations.push(new InlineDecoration(new Range(charChange.originalStartLineNumber, charChange.originalStartColumn, charChange.originalEndLineNumber, charChange.originalEndColumn), 'char-delete', 0 /* Regular */));\n                    }\n                }\n            }\n            const hasCharChanges = (decorations.length > 0);\n            const sb = createStringBuilder(10000);\n            let maxCharsPerLine = 0;\n            let renderedLineCount = 0;\n            let viewLineCounts = null;\n            for (let lineNumber = lineChange.originalStartLineNumber; lineNumber <= lineChange.originalEndLineNumber; lineNumber++) {\n                const lineIndex = lineNumber - lineChange.originalStartLineNumber;\n                const lineTokens = this._originalModel.getLineTokens(lineNumber);\n                const lineContent = lineTokens.getLineContent();\n                const lineBreakData = lineBreaks[lineBreakIndex++];\n                const actualDecorations = LineDecoration.filter(decorations, lineNumber, 1, lineContent.length + 1);\n                if (lineBreakData) {\n                    let lastBreakOffset = 0;\n                    for (const breakOffset of lineBreakData.breakOffsets) {\n                        const viewLineTokens = lineTokens.sliceAndInflate(lastBreakOffset, breakOffset, 0);\n                        const viewLineContent = lineContent.substring(lastBreakOffset, breakOffset);\n                        maxCharsPerLine = Math.max(maxCharsPerLine, this._renderOriginalLine(renderedLineCount++, viewLineContent, viewLineTokens, LineDecoration.extractWrapped(actualDecorations, lastBreakOffset, breakOffset), hasCharChanges, mightContainNonBasicASCII, mightContainRTL, fontInfo, disableMonospaceOptimizations, lineHeight, lineDecorationsWidth, stopRenderingLineAfter, renderWhitespace, renderControlCharacters, fontLigatures, tabSize, sb, marginDomNode));\n                        lastBreakOffset = breakOffset;\n                    }\n                    if (!viewLineCounts) {\n                        viewLineCounts = [];\n                    }\n                    // make sure all lines before this one have an entry in `viewLineCounts`\n                    while (viewLineCounts.length < lineIndex) {\n                        viewLineCounts[viewLineCounts.length] = 1;\n                    }\n                    viewLineCounts[lineIndex] = lineBreakData.breakOffsets.length;\n                    viewZone.heightInLines += (lineBreakData.breakOffsets.length - 1);\n                    const marginDomNode2 = document.createElement('div');\n                    marginDomNode2.className = 'line-delete';\n                    result.original.push({\n                        afterLineNumber: lineNumber,\n                        afterColumn: 0,\n                        heightInLines: lineBreakData.breakOffsets.length - 1,\n                        domNode: createFakeLinesDiv(),\n                        marginDomNode: marginDomNode2\n                    });\n                }\n                else {\n                    maxCharsPerLine = Math.max(maxCharsPerLine, this._renderOriginalLine(renderedLineCount++, lineContent, lineTokens, actualDecorations, hasCharChanges, mightContainNonBasicASCII, mightContainRTL, fontInfo, disableMonospaceOptimizations, lineHeight, lineDecorationsWidth, stopRenderingLineAfter, renderWhitespace, renderControlCharacters, fontLigatures, tabSize, sb, marginDomNode));\n                }\n            }\n            maxCharsPerLine += scrollBeyondLastColumn;\n            const html = sb.build();\n            const trustedhtml = ttPolicy ? ttPolicy.createHTML(html) : html;\n            domNode.innerHTML = trustedhtml;\n            viewZone.minWidthInPx = (maxCharsPerLine * typicalHalfwidthCharacterWidth);\n            if (viewLineCounts) {\n                // make sure all lines have an entry in `viewLineCounts`\n                const cnt = lineChange.originalEndLineNumber - lineChange.originalStartLineNumber;\n                while (viewLineCounts.length <= cnt) {\n                    viewLineCounts[viewLineCounts.length] = 1;\n                }\n            }\n            viewZone.diff.viewLineCounts = viewLineCounts;\n        }\n        result.original.sort((a, b) => {\n            return a.afterLineNumber - b.afterLineNumber;\n        });\n    }\n    _renderOriginalLine(renderedLineCount, lineContent, lineTokens, decorations, hasCharChanges, mightContainNonBasicASCII, mightContainRTL, fontInfo, disableMonospaceOptimizations, lineHeight, lineDecorationsWidth, stopRenderingLineAfter, renderWhitespace, renderControlCharacters, fontLigatures, tabSize, sb, marginDomNode) {\n        sb.appendASCIIString('<div class=\"view-line');\n        if (!hasCharChanges) {\n            // No char changes\n            sb.appendASCIIString(' char-delete');\n        }\n        sb.appendASCIIString('\" style=\"top:');\n        sb.appendASCIIString(String(renderedLineCount * lineHeight));\n        sb.appendASCIIString('px;width:1000000px;\">');\n        const isBasicASCII = ViewLineRenderingData.isBasicASCII(lineContent, mightContainNonBasicASCII);\n        const containsRTL = ViewLineRenderingData.containsRTL(lineContent, isBasicASCII, mightContainRTL);\n        const output = renderViewLine(new RenderLineInput((fontInfo.isMonospace && !disableMonospaceOptimizations), fontInfo.canUseHalfwidthRightwardsArrow, lineContent, false, isBasicASCII, containsRTL, 0, lineTokens, decorations, tabSize, 0, fontInfo.spaceWidth, fontInfo.middotWidth, fontInfo.wsmiddotWidth, stopRenderingLineAfter, renderWhitespace, renderControlCharacters, fontLigatures !== EditorFontLigatures.OFF, null // Send no selections, original line cannot be selected\n        ), sb);\n        sb.appendASCIIString('</div>');\n        if (this._renderIndicators) {\n            const marginElement = document.createElement('div');\n            marginElement.className = `delete-sign ${ThemeIcon.asClassName(diffRemoveIcon)}`;\n            marginElement.setAttribute('style', `position:absolute;top:${renderedLineCount * lineHeight}px;width:${lineDecorationsWidth}px;height:${lineHeight}px;right:0;`);\n            marginDomNode.appendChild(marginElement);\n        }\n        return output.characterMapping.getAbsoluteOffset(output.characterMapping.length);\n    }\n}\nfunction validateDiffWordWrap(value, defaultValue) {\n    return validateStringSetOption(value, defaultValue, ['off', 'on', 'inherit']);\n}\nfunction isChangeOrInsert(lineChange) {\n    return lineChange.modifiedEndLineNumber > 0;\n}\nfunction isChangeOrDelete(lineChange) {\n    return lineChange.originalEndLineNumber > 0;\n}\nfunction createFakeLinesDiv() {\n    const r = document.createElement('div');\n    r.className = 'diagonal-fill';\n    return r;\n}\nfunction getViewRange(model, viewModel, startLineNumber, endLineNumber) {\n    const lineCount = model.getLineCount();\n    startLineNumber = Math.min(lineCount, Math.max(1, startLineNumber));\n    endLineNumber = Math.min(lineCount, Math.max(1, endLineNumber));\n    return viewModel.coordinatesConverter.convertModelRangeToViewRange(new Range(startLineNumber, model.getLineMinColumn(startLineNumber), endLineNumber, model.getLineMaxColumn(endLineNumber)));\n}\nfunction validateDiffEditorOptions(options, defaults) {\n    return {\n        enableSplitViewResizing: validateBooleanOption(options.enableSplitViewResizing, defaults.enableSplitViewResizing),\n        renderSideBySide: validateBooleanOption(options.renderSideBySide, defaults.renderSideBySide),\n        maxComputationTime: clampedInt(options.maxComputationTime, defaults.maxComputationTime, 0, 1073741824 /* MAX_SAFE_SMALL_INTEGER */),\n        maxFileSize: clampedInt(options.maxFileSize, defaults.maxFileSize, 0, 1073741824 /* MAX_SAFE_SMALL_INTEGER */),\n        ignoreTrimWhitespace: validateBooleanOption(options.ignoreTrimWhitespace, defaults.ignoreTrimWhitespace),\n        renderIndicators: validateBooleanOption(options.renderIndicators, defaults.renderIndicators),\n        originalEditable: validateBooleanOption(options.originalEditable, defaults.originalEditable),\n        diffCodeLens: validateBooleanOption(options.diffCodeLens, defaults.diffCodeLens),\n        renderOverviewRuler: validateBooleanOption(options.renderOverviewRuler, defaults.renderOverviewRuler),\n        diffWordWrap: validateDiffWordWrap(options.diffWordWrap, defaults.diffWordWrap),\n    };\n}\nfunction changedDiffEditorOptions(a, b) {\n    return {\n        enableSplitViewResizing: (a.enableSplitViewResizing !== b.enableSplitViewResizing),\n        renderSideBySide: (a.renderSideBySide !== b.renderSideBySide),\n        maxComputationTime: (a.maxComputationTime !== b.maxComputationTime),\n        maxFileSize: (a.maxFileSize !== b.maxFileSize),\n        ignoreTrimWhitespace: (a.ignoreTrimWhitespace !== b.ignoreTrimWhitespace),\n        renderIndicators: (a.renderIndicators !== b.renderIndicators),\n        originalEditable: (a.originalEditable !== b.originalEditable),\n        diffCodeLens: (a.diffCodeLens !== b.diffCodeLens),\n        renderOverviewRuler: (a.renderOverviewRuler !== b.renderOverviewRuler),\n        diffWordWrap: (a.diffWordWrap !== b.diffWordWrap),\n    };\n}\nregisterThemingParticipant((theme, collector) => {\n    const added = theme.getColor(diffInserted);\n    if (added) {\n        collector.addRule(`.monaco-editor .line-insert, .monaco-editor .char-insert { background-color: ${added}; }`);\n        collector.addRule(`.monaco-diff-editor .line-insert, .monaco-diff-editor .char-insert { background-color: ${added}; }`);\n        collector.addRule(`.monaco-editor .inline-added-margin-view-zone { background-color: ${added}; }`);\n    }\n    const removed = theme.getColor(diffRemoved);\n    if (removed) {\n        collector.addRule(`.monaco-editor .line-delete, .monaco-editor .char-delete { background-color: ${removed}; }`);\n        collector.addRule(`.monaco-diff-editor .line-delete, .monaco-diff-editor .char-delete { background-color: ${removed}; }`);\n        collector.addRule(`.monaco-editor .inline-deleted-margin-view-zone { background-color: ${removed}; }`);\n    }\n    const addedOutline = theme.getColor(diffInsertedOutline);\n    if (addedOutline) {\n        collector.addRule(`.monaco-editor .line-insert, .monaco-editor .char-insert { border: 1px ${theme.type === 'hc' ? 'dashed' : 'solid'} ${addedOutline}; }`);\n    }\n    const removedOutline = theme.getColor(diffRemovedOutline);\n    if (removedOutline) {\n        collector.addRule(`.monaco-editor .line-delete, .monaco-editor .char-delete { border: 1px ${theme.type === 'hc' ? 'dashed' : 'solid'} ${removedOutline}; }`);\n    }\n    const shadow = theme.getColor(scrollbarShadow);\n    if (shadow) {\n        collector.addRule(`.monaco-diff-editor.side-by-side .editor.modified { box-shadow: -6px 0 5px -5px ${shadow}; }`);\n    }\n    const border = theme.getColor(diffBorder);\n    if (border) {\n        collector.addRule(`.monaco-diff-editor.side-by-side .editor.modified { border-left: 1px solid ${border}; }`);\n    }\n    const scrollbarSliderBackgroundColor = theme.getColor(scrollbarSliderBackground);\n    if (scrollbarSliderBackgroundColor) {\n        collector.addRule(`\n\t\t\t.monaco-diff-editor .diffViewport {\n\t\t\t\tbackground: ${scrollbarSliderBackgroundColor};\n\t\t\t}\n\t\t`);\n    }\n    const scrollbarSliderHoverBackgroundColor = theme.getColor(scrollbarSliderHoverBackground);\n    if (scrollbarSliderHoverBackgroundColor) {\n        collector.addRule(`\n\t\t\t.monaco-diff-editor .diffViewport:hover {\n\t\t\t\tbackground: ${scrollbarSliderHoverBackgroundColor};\n\t\t\t}\n\t\t`);\n    }\n    const scrollbarSliderActiveBackgroundColor = theme.getColor(scrollbarSliderActiveBackground);\n    if (scrollbarSliderActiveBackgroundColor) {\n        collector.addRule(`\n\t\t\t.monaco-diff-editor .diffViewport:active {\n\t\t\t\tbackground: ${scrollbarSliderActiveBackgroundColor};\n\t\t\t}\n\t\t`);\n    }\n    const diffDiagonalFillColor = theme.getColor(diffDiagonalFill);\n    collector.addRule(`\n\t.monaco-editor .diagonal-fill {\n\t\tbackground-image: linear-gradient(\n\t\t\t-45deg,\n\t\t\t${diffDiagonalFillColor} 12.5%,\n\t\t\t#0000 12.5%, #0000 50%,\n\t\t\t${diffDiagonalFillColor} 50%, ${diffDiagonalFillColor} 62.5%,\n\t\t\t#0000 62.5%, #0000 100%\n\t\t);\n\t\tbackground-size: 8px 8px;\n\t}\n\t`);\n});\n"]},"metadata":{},"sourceType":"module"}