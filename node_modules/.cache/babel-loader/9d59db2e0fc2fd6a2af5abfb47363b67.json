{"ast":null,"code":"/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n// src/basic-languages/elixir/elixir.ts\nvar conf = {\n  comments: {\n    lineComment: \"#\"\n  },\n  brackets: [[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"]],\n  surroundingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }],\n  autoClosingPairs: [{\n    open: \"'\",\n    close: \"'\",\n    notIn: [\"string\", \"comment\"]\n  }, {\n    open: '\"',\n    close: '\"',\n    notIn: [\"comment\"]\n  }, {\n    open: '\"\"\"',\n    close: '\"\"\"'\n  }, {\n    open: \"`\",\n    close: \"`\",\n    notIn: [\"string\", \"comment\"]\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"<<\",\n    close: \">>\"\n  }],\n  indentationRules: {\n    increaseIndentPattern: /^\\s*(after|else|catch|rescue|fn|[^#]*(do|<\\-|\\->|\\{|\\[|\\=))\\s*$/,\n    decreaseIndentPattern: /^\\s*((\\}|\\])\\s*$|(after|else|catch|rescue|end)\\b)/\n  }\n};\nvar language = {\n  defaultToken: \"source\",\n  tokenPostfix: \".elixir\",\n  brackets: [{\n    open: \"[\",\n    close: \"]\",\n    token: \"delimiter.square\"\n  }, {\n    open: \"(\",\n    close: \")\",\n    token: \"delimiter.parenthesis\"\n  }, {\n    open: \"{\",\n    close: \"}\",\n    token: \"delimiter.curly\"\n  }, {\n    open: \"<<\",\n    close: \">>\",\n    token: \"delimiter.angle.special\"\n  }],\n  declarationKeywords: [\"def\", \"defp\", \"defn\", \"defnp\", \"defguard\", \"defguardp\", \"defmacro\", \"defmacrop\", \"defdelegate\", \"defcallback\", \"defmacrocallback\", \"defmodule\", \"defprotocol\", \"defexception\", \"defimpl\", \"defstruct\"],\n  operatorKeywords: [\"and\", \"in\", \"not\", \"or\", \"when\"],\n  namespaceKeywords: [\"alias\", \"import\", \"require\", \"use\"],\n  otherKeywords: [\"after\", \"case\", \"catch\", \"cond\", \"do\", \"else\", \"end\", \"fn\", \"for\", \"if\", \"quote\", \"raise\", \"receive\", \"rescue\", \"super\", \"throw\", \"try\", \"unless\", \"unquote_splicing\", \"unquote\", \"with\"],\n  constants: [\"true\", \"false\", \"nil\"],\n  nameBuiltin: [\"__MODULE__\", \"__DIR__\", \"__ENV__\", \"__CALLER__\", \"__STACKTRACE__\"],\n  operator: /-[->]?|!={0,2}|\\*{1,2}|\\/|\\\\\\\\|&{1,3}|\\.\\.?|\\^(?:\\^\\^)?|\\+\\+?|<(?:-|<<|=|>|\\|>|~>?)?|=~|={1,3}|>(?:=|>>)?|\\|~>|\\|>|\\|{1,3}|~>>?|~~~|::/,\n  variableName: /[a-z_][a-zA-Z0-9_]*[?!]?/,\n  atomName: /[a-zA-Z_][a-zA-Z0-9_@]*[?!]?|@specialAtomName|@operator/,\n  specialAtomName: /\\.\\.\\.|<<>>|%\\{\\}|%|\\{\\}/,\n  aliasPart: /[A-Z][a-zA-Z0-9_]*/,\n  moduleName: /@aliasPart(?:\\.@aliasPart)*/,\n  sigilSymmetricDelimiter: /\"\"\"|'''|\"|'|\\/|\\|/,\n  sigilStartDelimiter: /@sigilSymmetricDelimiter|<|\\{|\\[|\\(/,\n  sigilEndDelimiter: /@sigilSymmetricDelimiter|>|\\}|\\]|\\)/,\n  sigilModifiers: /[a-zA-Z0-9]*/,\n  decimal: /\\d(?:_?\\d)*/,\n  hex: /[0-9a-fA-F](_?[0-9a-fA-F])*/,\n  octal: /[0-7](_?[0-7])*/,\n  binary: /[01](_?[01])*/,\n  escape: /\\\\u[0-9a-fA-F]{4}|\\\\x[0-9a-fA-F]{2}|\\\\./,\n  tokenizer: {\n    root: [{\n      include: \"@whitespace\"\n    }, {\n      include: \"@comments\"\n    }, {\n      include: \"@keywordsShorthand\"\n    }, {\n      include: \"@numbers\"\n    }, {\n      include: \"@identifiers\"\n    }, {\n      include: \"@strings\"\n    }, {\n      include: \"@atoms\"\n    }, {\n      include: \"@sigils\"\n    }, {\n      include: \"@attributes\"\n    }, {\n      include: \"@symbols\"\n    }],\n    whitespace: [[/\\s+/, \"white\"]],\n    comments: [[/(#)(.*)/, [\"comment.punctuation\", \"comment\"]]],\n    keywordsShorthand: [[/(@atomName)(:)/, [\"constant\", \"constant.punctuation\"]], [/\"(?=([^\"]|#\\{.*?\\}|\\\\\")*\":)/, {\n      token: \"constant.delimiter\",\n      next: \"@doubleQuotedStringKeyword\"\n    }], [/'(?=([^']|#\\{.*?\\}|\\\\')*':)/, {\n      token: \"constant.delimiter\",\n      next: \"@singleQuotedStringKeyword\"\n    }]],\n    doubleQuotedStringKeyword: [[/\":/, {\n      token: \"constant.delimiter\",\n      next: \"@pop\"\n    }], {\n      include: \"@stringConstantContentInterpol\"\n    }],\n    singleQuotedStringKeyword: [[/':/, {\n      token: \"constant.delimiter\",\n      next: \"@pop\"\n    }], {\n      include: \"@stringConstantContentInterpol\"\n    }],\n    numbers: [[/0b@binary/, \"number.binary\"], [/0o@octal/, \"number.octal\"], [/0x@hex/, \"number.hex\"], [/@decimal\\.@decimal([eE]-?@decimal)?/, \"number.float\"], [/@decimal/, \"number\"]],\n    identifiers: [[/\\b(defp?|defnp?|defmacrop?|defguardp?|defdelegate)(\\s+)(@variableName)(?!\\s+@operator)/, [\"keyword.declaration\", \"white\", {\n      cases: {\n        unquote: \"keyword\",\n        \"@default\": \"function\"\n      }\n    }]], [/(@variableName)(?=\\s*\\.?\\s*\\()/, {\n      cases: {\n        \"@declarationKeywords\": \"keyword.declaration\",\n        \"@namespaceKeywords\": \"keyword\",\n        \"@otherKeywords\": \"keyword\",\n        \"@default\": \"function.call\"\n      }\n    }], [/(@moduleName)(\\s*)(\\.)(\\s*)(@variableName)/, [\"type.identifier\", \"white\", \"operator\", \"white\", \"function.call\"]], [/(:)(@atomName)(\\s*)(\\.)(\\s*)(@variableName)/, [\"constant.punctuation\", \"constant\", \"white\", \"operator\", \"white\", \"function.call\"]], [/(\\|>)(\\s*)(@variableName)/, [\"operator\", \"white\", {\n      cases: {\n        \"@otherKeywords\": \"keyword\",\n        \"@default\": \"function.call\"\n      }\n    }]], [/(&)(\\s*)(@variableName)/, [\"operator\", \"white\", \"function.call\"]], [/@variableName/, {\n      cases: {\n        \"@declarationKeywords\": \"keyword.declaration\",\n        \"@operatorKeywords\": \"keyword.operator\",\n        \"@namespaceKeywords\": \"keyword\",\n        \"@otherKeywords\": \"keyword\",\n        \"@constants\": \"constant.language\",\n        \"@nameBuiltin\": \"variable.language\",\n        \"_.*\": \"comment.unused\",\n        \"@default\": \"identifier\"\n      }\n    }], [/@moduleName/, \"type.identifier\"]],\n    strings: [[/\"\"\"/, {\n      token: \"string.delimiter\",\n      next: \"@doubleQuotedHeredoc\"\n    }], [/'''/, {\n      token: \"string.delimiter\",\n      next: \"@singleQuotedHeredoc\"\n    }], [/\"/, {\n      token: \"string.delimiter\",\n      next: \"@doubleQuotedString\"\n    }], [/'/, {\n      token: \"string.delimiter\",\n      next: \"@singleQuotedString\"\n    }]],\n    doubleQuotedHeredoc: [[/\"\"\"/, {\n      token: \"string.delimiter\",\n      next: \"@pop\"\n    }], {\n      include: \"@stringContentInterpol\"\n    }],\n    singleQuotedHeredoc: [[/'''/, {\n      token: \"string.delimiter\",\n      next: \"@pop\"\n    }], {\n      include: \"@stringContentInterpol\"\n    }],\n    doubleQuotedString: [[/\"/, {\n      token: \"string.delimiter\",\n      next: \"@pop\"\n    }], {\n      include: \"@stringContentInterpol\"\n    }],\n    singleQuotedString: [[/'/, {\n      token: \"string.delimiter\",\n      next: \"@pop\"\n    }], {\n      include: \"@stringContentInterpol\"\n    }],\n    atoms: [[/(:)(@atomName)/, [\"constant.punctuation\", \"constant\"]], [/:\"/, {\n      token: \"constant.delimiter\",\n      next: \"@doubleQuotedStringAtom\"\n    }], [/:'/, {\n      token: \"constant.delimiter\",\n      next: \"@singleQuotedStringAtom\"\n    }]],\n    doubleQuotedStringAtom: [[/\"/, {\n      token: \"constant.delimiter\",\n      next: \"@pop\"\n    }], {\n      include: \"@stringConstantContentInterpol\"\n    }],\n    singleQuotedStringAtom: [[/'/, {\n      token: \"constant.delimiter\",\n      next: \"@pop\"\n    }], {\n      include: \"@stringConstantContentInterpol\"\n    }],\n    sigils: [[/~[a-z]@sigilStartDelimiter/, {\n      token: \"@rematch\",\n      next: \"@sigil.interpol\"\n    }], [/~[A-Z]@sigilStartDelimiter/, {\n      token: \"@rematch\",\n      next: \"@sigil.noInterpol\"\n    }]],\n    sigil: [[/~([a-zA-Z])\\{/, {\n      token: \"@rematch\",\n      switchTo: \"@sigilStart.$S2.$1.{.}\"\n    }], [/~([a-zA-Z])\\[/, {\n      token: \"@rematch\",\n      switchTo: \"@sigilStart.$S2.$1.[.]\"\n    }], [/~([a-zA-Z])\\(/, {\n      token: \"@rematch\",\n      switchTo: \"@sigilStart.$S2.$1.(.)\"\n    }], [/~([a-zA-Z])\\</, {\n      token: \"@rematch\",\n      switchTo: \"@sigilStart.$S2.$1.<.>\"\n    }], [/~([a-zA-Z])(@sigilSymmetricDelimiter)/, {\n      token: \"@rematch\",\n      switchTo: \"@sigilStart.$S2.$1.$2.$2\"\n    }]],\n    \"sigilStart.interpol.s\": [[/~s@sigilStartDelimiter/, {\n      token: \"string.delimiter\",\n      switchTo: \"@sigilContinue.$S2.$S3.$S4.$S5\"\n    }]],\n    \"sigilContinue.interpol.s\": [[/(@sigilEndDelimiter)@sigilModifiers/, {\n      cases: {\n        \"$1==$S5\": {\n          token: \"string.delimiter\",\n          next: \"@pop\"\n        },\n        \"@default\": \"string\"\n      }\n    }], {\n      include: \"@stringContentInterpol\"\n    }],\n    \"sigilStart.noInterpol.S\": [[/~S@sigilStartDelimiter/, {\n      token: \"string.delimiter\",\n      switchTo: \"@sigilContinue.$S2.$S3.$S4.$S5\"\n    }]],\n    \"sigilContinue.noInterpol.S\": [[/(^|[^\\\\])\\\\@sigilEndDelimiter/, \"string\"], [/(@sigilEndDelimiter)@sigilModifiers/, {\n      cases: {\n        \"$1==$S5\": {\n          token: \"string.delimiter\",\n          next: \"@pop\"\n        },\n        \"@default\": \"string\"\n      }\n    }], {\n      include: \"@stringContent\"\n    }],\n    \"sigilStart.interpol.r\": [[/~r@sigilStartDelimiter/, {\n      token: \"regexp.delimiter\",\n      switchTo: \"@sigilContinue.$S2.$S3.$S4.$S5\"\n    }]],\n    \"sigilContinue.interpol.r\": [[/(@sigilEndDelimiter)@sigilModifiers/, {\n      cases: {\n        \"$1==$S5\": {\n          token: \"regexp.delimiter\",\n          next: \"@pop\"\n        },\n        \"@default\": \"regexp\"\n      }\n    }], {\n      include: \"@regexpContentInterpol\"\n    }],\n    \"sigilStart.noInterpol.R\": [[/~R@sigilStartDelimiter/, {\n      token: \"regexp.delimiter\",\n      switchTo: \"@sigilContinue.$S2.$S3.$S4.$S5\"\n    }]],\n    \"sigilContinue.noInterpol.R\": [[/(^|[^\\\\])\\\\@sigilEndDelimiter/, \"regexp\"], [/(@sigilEndDelimiter)@sigilModifiers/, {\n      cases: {\n        \"$1==$S5\": {\n          token: \"regexp.delimiter\",\n          next: \"@pop\"\n        },\n        \"@default\": \"regexp\"\n      }\n    }], {\n      include: \"@regexpContent\"\n    }],\n    \"sigilStart.interpol\": [[/~([a-zA-Z])@sigilStartDelimiter/, {\n      token: \"sigil.delimiter\",\n      switchTo: \"@sigilContinue.$S2.$S3.$S4.$S5\"\n    }]],\n    \"sigilContinue.interpol\": [[/(@sigilEndDelimiter)@sigilModifiers/, {\n      cases: {\n        \"$1==$S5\": {\n          token: \"sigil.delimiter\",\n          next: \"@pop\"\n        },\n        \"@default\": \"sigil\"\n      }\n    }], {\n      include: \"@sigilContentInterpol\"\n    }],\n    \"sigilStart.noInterpol\": [[/~([a-zA-Z])@sigilStartDelimiter/, {\n      token: \"sigil.delimiter\",\n      switchTo: \"@sigilContinue.$S2.$S3.$S4.$S5\"\n    }]],\n    \"sigilContinue.noInterpol\": [[/(^|[^\\\\])\\\\@sigilEndDelimiter/, \"sigil\"], [/(@sigilEndDelimiter)@sigilModifiers/, {\n      cases: {\n        \"$1==$S5\": {\n          token: \"sigil.delimiter\",\n          next: \"@pop\"\n        },\n        \"@default\": \"sigil\"\n      }\n    }], {\n      include: \"@sigilContent\"\n    }],\n    attributes: [[/\\@(module|type)?doc (~[sS])?\"\"\"/, {\n      token: \"comment.block.documentation\",\n      next: \"@doubleQuotedHeredocDocstring\"\n    }], [/\\@(module|type)?doc (~[sS])?\"/, {\n      token: \"comment.block.documentation\",\n      next: \"@doubleQuotedStringDocstring\"\n    }], [/\\@(module|type)?doc false/, \"comment.block.documentation\"], [/\\@(@variableName)/, \"variable\"]],\n    doubleQuotedHeredocDocstring: [[/\"\"\"/, {\n      token: \"comment.block.documentation\",\n      next: \"@pop\"\n    }], {\n      include: \"@docstringContent\"\n    }],\n    doubleQuotedStringDocstring: [[/\"/, {\n      token: \"comment.block.documentation\",\n      next: \"@pop\"\n    }], {\n      include: \"@docstringContent\"\n    }],\n    symbols: [[/\\?(\\\\.|[^\\\\\\s])/, \"number.constant\"], [/&\\d+/, \"operator\"], [/<<<|>>>/, \"operator\"], [/[()\\[\\]\\{\\}]|<<|>>/, \"@brackets\"], [/\\.\\.\\./, \"identifier\"], [/=>/, \"punctuation\"], [/@operator/, \"operator\"], [/[:;,.%]/, \"punctuation\"]],\n    stringContentInterpol: [{\n      include: \"@interpolation\"\n    }, {\n      include: \"@escapeChar\"\n    }, {\n      include: \"@stringContent\"\n    }],\n    stringContent: [[/./, \"string\"]],\n    stringConstantContentInterpol: [{\n      include: \"@interpolation\"\n    }, {\n      include: \"@escapeChar\"\n    }, {\n      include: \"@stringConstantContent\"\n    }],\n    stringConstantContent: [[/./, \"constant\"]],\n    regexpContentInterpol: [{\n      include: \"@interpolation\"\n    }, {\n      include: \"@escapeChar\"\n    }, {\n      include: \"@regexpContent\"\n    }],\n    regexpContent: [[/(\\s)(#)(\\s.*)$/, [\"white\", \"comment.punctuation\", \"comment\"]], [/./, \"regexp\"]],\n    sigilContentInterpol: [{\n      include: \"@interpolation\"\n    }, {\n      include: \"@escapeChar\"\n    }, {\n      include: \"@sigilContent\"\n    }],\n    sigilContent: [[/./, \"sigil\"]],\n    docstringContent: [[/./, \"comment.block.documentation\"]],\n    escapeChar: [[/@escape/, \"constant.character.escape\"]],\n    interpolation: [[/#{/, {\n      token: \"delimiter.bracket.embed\",\n      next: \"@interpolationContinue\"\n    }]],\n    interpolationContinue: [[/}/, {\n      token: \"delimiter.bracket.embed\",\n      next: \"@pop\"\n    }], {\n      include: \"@root\"\n    }]\n  }\n};\nexport { conf, language };","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/basic-languages/elixir/elixir.js"],"names":["conf","comments","lineComment","brackets","surroundingPairs","open","close","autoClosingPairs","notIn","indentationRules","increaseIndentPattern","decreaseIndentPattern","language","defaultToken","tokenPostfix","token","declarationKeywords","operatorKeywords","namespaceKeywords","otherKeywords","constants","nameBuiltin","operator","variableName","atomName","specialAtomName","aliasPart","moduleName","sigilSymmetricDelimiter","sigilStartDelimiter","sigilEndDelimiter","sigilModifiers","decimal","hex","octal","binary","escape","tokenizer","root","include","whitespace","keywordsShorthand","next","doubleQuotedStringKeyword","singleQuotedStringKeyword","numbers","identifiers","cases","unquote","strings","doubleQuotedHeredoc","singleQuotedHeredoc","doubleQuotedString","singleQuotedString","atoms","doubleQuotedStringAtom","singleQuotedStringAtom","sigils","sigil","switchTo","attributes","doubleQuotedHeredocDocstring","doubleQuotedStringDocstring","symbols","stringContentInterpol","stringContent","stringConstantContentInterpol","stringConstantContent","regexpContentInterpol","regexpContent","sigilContentInterpol","sigilContent","docstringContent","escapeChar","interpolation","interpolationContinue"],"mappings":"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","sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/elixir/elixir.ts\nvar conf = {\n  comments: {\n    lineComment: \"#\"\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"]\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"'\", close: \"'\" },\n    { open: '\"', close: '\"' }\n  ],\n  autoClosingPairs: [\n    { open: \"'\", close: \"'\", notIn: [\"string\", \"comment\"] },\n    { open: '\"', close: '\"', notIn: [\"comment\"] },\n    { open: '\"\"\"', close: '\"\"\"' },\n    { open: \"`\", close: \"`\", notIn: [\"string\", \"comment\"] },\n    { open: \"(\", close: \")\" },\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"<<\", close: \">>\" }\n  ],\n  indentationRules: {\n    increaseIndentPattern: /^\\s*(after|else|catch|rescue|fn|[^#]*(do|<\\-|\\->|\\{|\\[|\\=))\\s*$/,\n    decreaseIndentPattern: /^\\s*((\\}|\\])\\s*$|(after|else|catch|rescue|end)\\b)/\n  }\n};\nvar language = {\n  defaultToken: \"source\",\n  tokenPostfix: \".elixir\",\n  brackets: [\n    { open: \"[\", close: \"]\", token: \"delimiter.square\" },\n    { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\n    { open: \"<<\", close: \">>\", token: \"delimiter.angle.special\" }\n  ],\n  declarationKeywords: [\n    \"def\",\n    \"defp\",\n    \"defn\",\n    \"defnp\",\n    \"defguard\",\n    \"defguardp\",\n    \"defmacro\",\n    \"defmacrop\",\n    \"defdelegate\",\n    \"defcallback\",\n    \"defmacrocallback\",\n    \"defmodule\",\n    \"defprotocol\",\n    \"defexception\",\n    \"defimpl\",\n    \"defstruct\"\n  ],\n  operatorKeywords: [\"and\", \"in\", \"not\", \"or\", \"when\"],\n  namespaceKeywords: [\"alias\", \"import\", \"require\", \"use\"],\n  otherKeywords: [\n    \"after\",\n    \"case\",\n    \"catch\",\n    \"cond\",\n    \"do\",\n    \"else\",\n    \"end\",\n    \"fn\",\n    \"for\",\n    \"if\",\n    \"quote\",\n    \"raise\",\n    \"receive\",\n    \"rescue\",\n    \"super\",\n    \"throw\",\n    \"try\",\n    \"unless\",\n    \"unquote_splicing\",\n    \"unquote\",\n    \"with\"\n  ],\n  constants: [\"true\", \"false\", \"nil\"],\n  nameBuiltin: [\"__MODULE__\", \"__DIR__\", \"__ENV__\", \"__CALLER__\", \"__STACKTRACE__\"],\n  operator: /-[->]?|!={0,2}|\\*{1,2}|\\/|\\\\\\\\|&{1,3}|\\.\\.?|\\^(?:\\^\\^)?|\\+\\+?|<(?:-|<<|=|>|\\|>|~>?)?|=~|={1,3}|>(?:=|>>)?|\\|~>|\\|>|\\|{1,3}|~>>?|~~~|::/,\n  variableName: /[a-z_][a-zA-Z0-9_]*[?!]?/,\n  atomName: /[a-zA-Z_][a-zA-Z0-9_@]*[?!]?|@specialAtomName|@operator/,\n  specialAtomName: /\\.\\.\\.|<<>>|%\\{\\}|%|\\{\\}/,\n  aliasPart: /[A-Z][a-zA-Z0-9_]*/,\n  moduleName: /@aliasPart(?:\\.@aliasPart)*/,\n  sigilSymmetricDelimiter: /\"\"\"|'''|\"|'|\\/|\\|/,\n  sigilStartDelimiter: /@sigilSymmetricDelimiter|<|\\{|\\[|\\(/,\n  sigilEndDelimiter: /@sigilSymmetricDelimiter|>|\\}|\\]|\\)/,\n  sigilModifiers: /[a-zA-Z0-9]*/,\n  decimal: /\\d(?:_?\\d)*/,\n  hex: /[0-9a-fA-F](_?[0-9a-fA-F])*/,\n  octal: /[0-7](_?[0-7])*/,\n  binary: /[01](_?[01])*/,\n  escape: /\\\\u[0-9a-fA-F]{4}|\\\\x[0-9a-fA-F]{2}|\\\\./,\n  tokenizer: {\n    root: [\n      { include: \"@whitespace\" },\n      { include: \"@comments\" },\n      { include: \"@keywordsShorthand\" },\n      { include: \"@numbers\" },\n      { include: \"@identifiers\" },\n      { include: \"@strings\" },\n      { include: \"@atoms\" },\n      { include: \"@sigils\" },\n      { include: \"@attributes\" },\n      { include: \"@symbols\" }\n    ],\n    whitespace: [[/\\s+/, \"white\"]],\n    comments: [[/(#)(.*)/, [\"comment.punctuation\", \"comment\"]]],\n    keywordsShorthand: [\n      [/(@atomName)(:)/, [\"constant\", \"constant.punctuation\"]],\n      [\n        /\"(?=([^\"]|#\\{.*?\\}|\\\\\")*\":)/,\n        { token: \"constant.delimiter\", next: \"@doubleQuotedStringKeyword\" }\n      ],\n      [\n        /'(?=([^']|#\\{.*?\\}|\\\\')*':)/,\n        { token: \"constant.delimiter\", next: \"@singleQuotedStringKeyword\" }\n      ]\n    ],\n    doubleQuotedStringKeyword: [\n      [/\":/, { token: \"constant.delimiter\", next: \"@pop\" }],\n      { include: \"@stringConstantContentInterpol\" }\n    ],\n    singleQuotedStringKeyword: [\n      [/':/, { token: \"constant.delimiter\", next: \"@pop\" }],\n      { include: \"@stringConstantContentInterpol\" }\n    ],\n    numbers: [\n      [/0b@binary/, \"number.binary\"],\n      [/0o@octal/, \"number.octal\"],\n      [/0x@hex/, \"number.hex\"],\n      [/@decimal\\.@decimal([eE]-?@decimal)?/, \"number.float\"],\n      [/@decimal/, \"number\"]\n    ],\n    identifiers: [\n      [\n        /\\b(defp?|defnp?|defmacrop?|defguardp?|defdelegate)(\\s+)(@variableName)(?!\\s+@operator)/,\n        [\n          \"keyword.declaration\",\n          \"white\",\n          {\n            cases: {\n              unquote: \"keyword\",\n              \"@default\": \"function\"\n            }\n          }\n        ]\n      ],\n      [\n        /(@variableName)(?=\\s*\\.?\\s*\\()/,\n        {\n          cases: {\n            \"@declarationKeywords\": \"keyword.declaration\",\n            \"@namespaceKeywords\": \"keyword\",\n            \"@otherKeywords\": \"keyword\",\n            \"@default\": \"function.call\"\n          }\n        }\n      ],\n      [\n        /(@moduleName)(\\s*)(\\.)(\\s*)(@variableName)/,\n        [\"type.identifier\", \"white\", \"operator\", \"white\", \"function.call\"]\n      ],\n      [\n        /(:)(@atomName)(\\s*)(\\.)(\\s*)(@variableName)/,\n        [\"constant.punctuation\", \"constant\", \"white\", \"operator\", \"white\", \"function.call\"]\n      ],\n      [\n        /(\\|>)(\\s*)(@variableName)/,\n        [\n          \"operator\",\n          \"white\",\n          {\n            cases: {\n              \"@otherKeywords\": \"keyword\",\n              \"@default\": \"function.call\"\n            }\n          }\n        ]\n      ],\n      [\n        /(&)(\\s*)(@variableName)/,\n        [\"operator\", \"white\", \"function.call\"]\n      ],\n      [\n        /@variableName/,\n        {\n          cases: {\n            \"@declarationKeywords\": \"keyword.declaration\",\n            \"@operatorKeywords\": \"keyword.operator\",\n            \"@namespaceKeywords\": \"keyword\",\n            \"@otherKeywords\": \"keyword\",\n            \"@constants\": \"constant.language\",\n            \"@nameBuiltin\": \"variable.language\",\n            \"_.*\": \"comment.unused\",\n            \"@default\": \"identifier\"\n          }\n        }\n      ],\n      [/@moduleName/, \"type.identifier\"]\n    ],\n    strings: [\n      [/\"\"\"/, { token: \"string.delimiter\", next: \"@doubleQuotedHeredoc\" }],\n      [/'''/, { token: \"string.delimiter\", next: \"@singleQuotedHeredoc\" }],\n      [/\"/, { token: \"string.delimiter\", next: \"@doubleQuotedString\" }],\n      [/'/, { token: \"string.delimiter\", next: \"@singleQuotedString\" }]\n    ],\n    doubleQuotedHeredoc: [\n      [/\"\"\"/, { token: \"string.delimiter\", next: \"@pop\" }],\n      { include: \"@stringContentInterpol\" }\n    ],\n    singleQuotedHeredoc: [\n      [/'''/, { token: \"string.delimiter\", next: \"@pop\" }],\n      { include: \"@stringContentInterpol\" }\n    ],\n    doubleQuotedString: [\n      [/\"/, { token: \"string.delimiter\", next: \"@pop\" }],\n      { include: \"@stringContentInterpol\" }\n    ],\n    singleQuotedString: [\n      [/'/, { token: \"string.delimiter\", next: \"@pop\" }],\n      { include: \"@stringContentInterpol\" }\n    ],\n    atoms: [\n      [/(:)(@atomName)/, [\"constant.punctuation\", \"constant\"]],\n      [/:\"/, { token: \"constant.delimiter\", next: \"@doubleQuotedStringAtom\" }],\n      [/:'/, { token: \"constant.delimiter\", next: \"@singleQuotedStringAtom\" }]\n    ],\n    doubleQuotedStringAtom: [\n      [/\"/, { token: \"constant.delimiter\", next: \"@pop\" }],\n      { include: \"@stringConstantContentInterpol\" }\n    ],\n    singleQuotedStringAtom: [\n      [/'/, { token: \"constant.delimiter\", next: \"@pop\" }],\n      { include: \"@stringConstantContentInterpol\" }\n    ],\n    sigils: [\n      [/~[a-z]@sigilStartDelimiter/, { token: \"@rematch\", next: \"@sigil.interpol\" }],\n      [/~[A-Z]@sigilStartDelimiter/, { token: \"@rematch\", next: \"@sigil.noInterpol\" }]\n    ],\n    sigil: [\n      [/~([a-zA-Z])\\{/, { token: \"@rematch\", switchTo: \"@sigilStart.$S2.$1.{.}\" }],\n      [/~([a-zA-Z])\\[/, { token: \"@rematch\", switchTo: \"@sigilStart.$S2.$1.[.]\" }],\n      [/~([a-zA-Z])\\(/, { token: \"@rematch\", switchTo: \"@sigilStart.$S2.$1.(.)\" }],\n      [/~([a-zA-Z])\\</, { token: \"@rematch\", switchTo: \"@sigilStart.$S2.$1.<.>\" }],\n      [\n        /~([a-zA-Z])(@sigilSymmetricDelimiter)/,\n        { token: \"@rematch\", switchTo: \"@sigilStart.$S2.$1.$2.$2\" }\n      ]\n    ],\n    \"sigilStart.interpol.s\": [\n      [\n        /~s@sigilStartDelimiter/,\n        {\n          token: \"string.delimiter\",\n          switchTo: \"@sigilContinue.$S2.$S3.$S4.$S5\"\n        }\n      ]\n    ],\n    \"sigilContinue.interpol.s\": [\n      [\n        /(@sigilEndDelimiter)@sigilModifiers/,\n        {\n          cases: {\n            \"$1==$S5\": { token: \"string.delimiter\", next: \"@pop\" },\n            \"@default\": \"string\"\n          }\n        }\n      ],\n      { include: \"@stringContentInterpol\" }\n    ],\n    \"sigilStart.noInterpol.S\": [\n      [\n        /~S@sigilStartDelimiter/,\n        {\n          token: \"string.delimiter\",\n          switchTo: \"@sigilContinue.$S2.$S3.$S4.$S5\"\n        }\n      ]\n    ],\n    \"sigilContinue.noInterpol.S\": [\n      [/(^|[^\\\\])\\\\@sigilEndDelimiter/, \"string\"],\n      [\n        /(@sigilEndDelimiter)@sigilModifiers/,\n        {\n          cases: {\n            \"$1==$S5\": { token: \"string.delimiter\", next: \"@pop\" },\n            \"@default\": \"string\"\n          }\n        }\n      ],\n      { include: \"@stringContent\" }\n    ],\n    \"sigilStart.interpol.r\": [\n      [\n        /~r@sigilStartDelimiter/,\n        {\n          token: \"regexp.delimiter\",\n          switchTo: \"@sigilContinue.$S2.$S3.$S4.$S5\"\n        }\n      ]\n    ],\n    \"sigilContinue.interpol.r\": [\n      [\n        /(@sigilEndDelimiter)@sigilModifiers/,\n        {\n          cases: {\n            \"$1==$S5\": { token: \"regexp.delimiter\", next: \"@pop\" },\n            \"@default\": \"regexp\"\n          }\n        }\n      ],\n      { include: \"@regexpContentInterpol\" }\n    ],\n    \"sigilStart.noInterpol.R\": [\n      [\n        /~R@sigilStartDelimiter/,\n        {\n          token: \"regexp.delimiter\",\n          switchTo: \"@sigilContinue.$S2.$S3.$S4.$S5\"\n        }\n      ]\n    ],\n    \"sigilContinue.noInterpol.R\": [\n      [/(^|[^\\\\])\\\\@sigilEndDelimiter/, \"regexp\"],\n      [\n        /(@sigilEndDelimiter)@sigilModifiers/,\n        {\n          cases: {\n            \"$1==$S5\": { token: \"regexp.delimiter\", next: \"@pop\" },\n            \"@default\": \"regexp\"\n          }\n        }\n      ],\n      { include: \"@regexpContent\" }\n    ],\n    \"sigilStart.interpol\": [\n      [\n        /~([a-zA-Z])@sigilStartDelimiter/,\n        {\n          token: \"sigil.delimiter\",\n          switchTo: \"@sigilContinue.$S2.$S3.$S4.$S5\"\n        }\n      ]\n    ],\n    \"sigilContinue.interpol\": [\n      [\n        /(@sigilEndDelimiter)@sigilModifiers/,\n        {\n          cases: {\n            \"$1==$S5\": { token: \"sigil.delimiter\", next: \"@pop\" },\n            \"@default\": \"sigil\"\n          }\n        }\n      ],\n      { include: \"@sigilContentInterpol\" }\n    ],\n    \"sigilStart.noInterpol\": [\n      [\n        /~([a-zA-Z])@sigilStartDelimiter/,\n        {\n          token: \"sigil.delimiter\",\n          switchTo: \"@sigilContinue.$S2.$S3.$S4.$S5\"\n        }\n      ]\n    ],\n    \"sigilContinue.noInterpol\": [\n      [/(^|[^\\\\])\\\\@sigilEndDelimiter/, \"sigil\"],\n      [\n        /(@sigilEndDelimiter)@sigilModifiers/,\n        {\n          cases: {\n            \"$1==$S5\": { token: \"sigil.delimiter\", next: \"@pop\" },\n            \"@default\": \"sigil\"\n          }\n        }\n      ],\n      { include: \"@sigilContent\" }\n    ],\n    attributes: [\n      [\n        /\\@(module|type)?doc (~[sS])?\"\"\"/,\n        {\n          token: \"comment.block.documentation\",\n          next: \"@doubleQuotedHeredocDocstring\"\n        }\n      ],\n      [\n        /\\@(module|type)?doc (~[sS])?\"/,\n        {\n          token: \"comment.block.documentation\",\n          next: \"@doubleQuotedStringDocstring\"\n        }\n      ],\n      [/\\@(module|type)?doc false/, \"comment.block.documentation\"],\n      [/\\@(@variableName)/, \"variable\"]\n    ],\n    doubleQuotedHeredocDocstring: [\n      [/\"\"\"/, { token: \"comment.block.documentation\", next: \"@pop\" }],\n      { include: \"@docstringContent\" }\n    ],\n    doubleQuotedStringDocstring: [\n      [/\"/, { token: \"comment.block.documentation\", next: \"@pop\" }],\n      { include: \"@docstringContent\" }\n    ],\n    symbols: [\n      [/\\?(\\\\.|[^\\\\\\s])/, \"number.constant\"],\n      [/&\\d+/, \"operator\"],\n      [/<<<|>>>/, \"operator\"],\n      [/[()\\[\\]\\{\\}]|<<|>>/, \"@brackets\"],\n      [/\\.\\.\\./, \"identifier\"],\n      [/=>/, \"punctuation\"],\n      [/@operator/, \"operator\"],\n      [/[:;,.%]/, \"punctuation\"]\n    ],\n    stringContentInterpol: [\n      { include: \"@interpolation\" },\n      { include: \"@escapeChar\" },\n      { include: \"@stringContent\" }\n    ],\n    stringContent: [[/./, \"string\"]],\n    stringConstantContentInterpol: [\n      { include: \"@interpolation\" },\n      { include: \"@escapeChar\" },\n      { include: \"@stringConstantContent\" }\n    ],\n    stringConstantContent: [[/./, \"constant\"]],\n    regexpContentInterpol: [\n      { include: \"@interpolation\" },\n      { include: \"@escapeChar\" },\n      { include: \"@regexpContent\" }\n    ],\n    regexpContent: [\n      [/(\\s)(#)(\\s.*)$/, [\"white\", \"comment.punctuation\", \"comment\"]],\n      [/./, \"regexp\"]\n    ],\n    sigilContentInterpol: [\n      { include: \"@interpolation\" },\n      { include: \"@escapeChar\" },\n      { include: \"@sigilContent\" }\n    ],\n    sigilContent: [[/./, \"sigil\"]],\n    docstringContent: [[/./, \"comment.block.documentation\"]],\n    escapeChar: [[/@escape/, \"constant.character.escape\"]],\n    interpolation: [[/#{/, { token: \"delimiter.bracket.embed\", next: \"@interpolationContinue\" }]],\n    interpolationContinue: [\n      [/}/, { token: \"delimiter.bracket.embed\", next: \"@pop\" }],\n      { include: \"@root\" }\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"]},"metadata":{},"sourceType":"module"}