{"ast":null,"code":"/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n// src/basic-languages/hcl/hcl.ts\nvar conf = {\n  comments: {\n    lineComment: \"#\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"]],\n  autoClosingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: '\"',\n    close: '\"',\n    notIn: [\"string\"]\n  }],\n  surroundingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }]\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".hcl\",\n  keywords: [\"var\", \"local\", \"path\", \"for_each\", \"any\", \"string\", \"number\", \"bool\", \"true\", \"false\", \"null\", \"if \", \"else \", \"endif \", \"for \", \"in\", \"endfor\"],\n  operators: [\"=\", \">=\", \"<=\", \"==\", \"!=\", \"+\", \"-\", \"*\", \"/\", \"%\", \"&&\", \"||\", \"!\", \"<\", \">\", \"?\", \"...\", \":\"],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  terraformFunctions: /(abs|ceil|floor|log|max|min|pow|signum|chomp|format|formatlist|indent|join|lower|regex|regexall|replace|split|strrev|substr|title|trimspace|upper|chunklist|coalesce|coalescelist|compact|concat|contains|distinct|element|flatten|index|keys|length|list|lookup|map|matchkeys|merge|range|reverse|setintersection|setproduct|setunion|slice|sort|transpose|values|zipmap|base64decode|base64encode|base64gzip|csvdecode|jsondecode|jsonencode|urlencode|yamldecode|yamlencode|abspath|dirname|pathexpand|basename|file|fileexists|fileset|filebase64|templatefile|formatdate|timeadd|timestamp|base64sha256|base64sha512|bcrypt|filebase64sha256|filebase64sha512|filemd5|filemd1|filesha256|filesha512|md5|rsadecrypt|sha1|sha256|sha512|uuid|uuidv5|cidrhost|cidrnetmask|cidrsubnet|tobool|tolist|tomap|tonumber|toset|tostring)/,\n  terraformMainBlocks: /(module|data|terraform|resource|provider|variable|output|locals)/,\n  tokenizer: {\n    root: [[/^@terraformMainBlocks([ \\t]*)([\\w-]+|\"[\\w-]+\"|)([ \\t]*)([\\w-]+|\"[\\w-]+\"|)([ \\t]*)(\\{)/, [\"type\", \"\", \"string\", \"\", \"string\", \"\", \"@brackets\"]], [/(\\w+[ \\t]+)([ \\t]*)([\\w-]+|\"[\\w-]+\"|)([ \\t]*)([\\w-]+|\"[\\w-]+\"|)([ \\t]*)(\\{)/, [\"identifier\", \"\", \"string\", \"\", \"string\", \"\", \"@brackets\"]], [/(\\w+[ \\t]+)([ \\t]*)([\\w-]+|\"[\\w-]+\"|)([ \\t]*)([\\w-]+|\"[\\w-]+\"|)(=)(\\{)/, [\"identifier\", \"\", \"string\", \"\", \"operator\", \"\", \"@brackets\"]], {\n      include: \"@terraform\"\n    }],\n    terraform: [[/@terraformFunctions(\\()/, [\"type\", \"@brackets\"]], [/[a-zA-Z_]\\w*-*/, {\n      cases: {\n        \"@keywords\": {\n          token: \"keyword.$0\"\n        },\n        \"@default\": \"variable\"\n      }\n    }], {\n      include: \"@whitespace\"\n    }, {\n      include: \"@heredoc\"\n    }, [/[{}()\\[\\]]/, \"@brackets\"], [/[<>](?!@symbols)/, \"@brackets\"], [/@symbols/, {\n      cases: {\n        \"@operators\": \"operator\",\n        \"@default\": \"\"\n      }\n    }], [/\\d*\\d+[eE]([\\-+]?\\d+)?/, \"number.float\"], [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, \"number.float\"], [/\\d[\\d']*/, \"number\"], [/\\d/, \"number\"], [/[;,.]/, \"delimiter\"], [/\"/, \"string\", \"@string\"], [/'/, \"invalid\"]],\n    heredoc: [[/<<[-]*\\s*[\"]?([\\w\\-]+)[\"]?/, {\n      token: \"string.heredoc.delimiter\",\n      next: \"@heredocBody.$1\"\n    }]],\n    heredocBody: [[/([\\w\\-]+)$/, {\n      cases: {\n        \"$1==$S2\": [{\n          token: \"string.heredoc.delimiter\",\n          next: \"@popall\"\n        }],\n        \"@default\": \"string.heredoc\"\n      }\n    }], [/./, \"string.heredoc\"]],\n    whitespace: [[/[ \\t\\r\\n]+/, \"\"], [/\\/\\*/, \"comment\", \"@comment\"], [/\\/\\/.*$/, \"comment\"], [/#.*$/, \"comment\"]],\n    comment: [[/[^\\/*]+/, \"comment\"], [/\\*\\//, \"comment\", \"@pop\"], [/[\\/*]/, \"comment\"]],\n    string: [[/\\$\\{/, {\n      token: \"delimiter\",\n      next: \"@stringExpression\"\n    }], [/[^\\\\\"\\$]+/, \"string\"], [/@escapes/, \"string.escape\"], [/\\\\./, \"string.escape.invalid\"], [/\"/, \"string\", \"@popall\"]],\n    stringInsideExpression: [[/[^\\\\\"]+/, \"string\"], [/@escapes/, \"string.escape\"], [/\\\\./, \"string.escape.invalid\"], [/\"/, \"string\", \"@pop\"]],\n    stringExpression: [[/\\}/, {\n      token: \"delimiter\",\n      next: \"@pop\"\n    }], [/\"/, \"string\", \"@stringInsideExpression\"], {\n      include: \"@terraform\"\n    }]\n  }\n};\nexport { conf, language };","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/basic-languages/hcl/hcl.js"],"names":["conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","language","defaultToken","tokenPostfix","keywords","operators","symbols","escapes","terraformFunctions","terraformMainBlocks","tokenizer","root","include","terraform","cases","token","heredoc","next","heredocBody","whitespace","comment","string","stringInsideExpression","stringExpression"],"mappings":"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","sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/hcl/hcl.ts\nvar conf = {\n  comments: {\n    lineComment: \"#\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"]\n  ],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"', notIn: [\"string\"] }\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"' }\n  ]\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".hcl\",\n  keywords: [\n    \"var\",\n    \"local\",\n    \"path\",\n    \"for_each\",\n    \"any\",\n    \"string\",\n    \"number\",\n    \"bool\",\n    \"true\",\n    \"false\",\n    \"null\",\n    \"if \",\n    \"else \",\n    \"endif \",\n    \"for \",\n    \"in\",\n    \"endfor\"\n  ],\n  operators: [\n    \"=\",\n    \">=\",\n    \"<=\",\n    \"==\",\n    \"!=\",\n    \"+\",\n    \"-\",\n    \"*\",\n    \"/\",\n    \"%\",\n    \"&&\",\n    \"||\",\n    \"!\",\n    \"<\",\n    \">\",\n    \"?\",\n    \"...\",\n    \":\"\n  ],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  terraformFunctions: /(abs|ceil|floor|log|max|min|pow|signum|chomp|format|formatlist|indent|join|lower|regex|regexall|replace|split|strrev|substr|title|trimspace|upper|chunklist|coalesce|coalescelist|compact|concat|contains|distinct|element|flatten|index|keys|length|list|lookup|map|matchkeys|merge|range|reverse|setintersection|setproduct|setunion|slice|sort|transpose|values|zipmap|base64decode|base64encode|base64gzip|csvdecode|jsondecode|jsonencode|urlencode|yamldecode|yamlencode|abspath|dirname|pathexpand|basename|file|fileexists|fileset|filebase64|templatefile|formatdate|timeadd|timestamp|base64sha256|base64sha512|bcrypt|filebase64sha256|filebase64sha512|filemd5|filemd1|filesha256|filesha512|md5|rsadecrypt|sha1|sha256|sha512|uuid|uuidv5|cidrhost|cidrnetmask|cidrsubnet|tobool|tolist|tomap|tonumber|toset|tostring)/,\n  terraformMainBlocks: /(module|data|terraform|resource|provider|variable|output|locals)/,\n  tokenizer: {\n    root: [\n      [\n        /^@terraformMainBlocks([ \\t]*)([\\w-]+|\"[\\w-]+\"|)([ \\t]*)([\\w-]+|\"[\\w-]+\"|)([ \\t]*)(\\{)/,\n        [\"type\", \"\", \"string\", \"\", \"string\", \"\", \"@brackets\"]\n      ],\n      [\n        /(\\w+[ \\t]+)([ \\t]*)([\\w-]+|\"[\\w-]+\"|)([ \\t]*)([\\w-]+|\"[\\w-]+\"|)([ \\t]*)(\\{)/,\n        [\"identifier\", \"\", \"string\", \"\", \"string\", \"\", \"@brackets\"]\n      ],\n      [\n        /(\\w+[ \\t]+)([ \\t]*)([\\w-]+|\"[\\w-]+\"|)([ \\t]*)([\\w-]+|\"[\\w-]+\"|)(=)(\\{)/,\n        [\"identifier\", \"\", \"string\", \"\", \"operator\", \"\", \"@brackets\"]\n      ],\n      { include: \"@terraform\" }\n    ],\n    terraform: [\n      [/@terraformFunctions(\\()/, [\"type\", \"@brackets\"]],\n      [\n        /[a-zA-Z_]\\w*-*/,\n        {\n          cases: {\n            \"@keywords\": { token: \"keyword.$0\" },\n            \"@default\": \"variable\"\n          }\n        }\n      ],\n      { include: \"@whitespace\" },\n      { include: \"@heredoc\" },\n      [/[{}()\\[\\]]/, \"@brackets\"],\n      [/[<>](?!@symbols)/, \"@brackets\"],\n      [\n        /@symbols/,\n        {\n          cases: {\n            \"@operators\": \"operator\",\n            \"@default\": \"\"\n          }\n        }\n      ],\n      [/\\d*\\d+[eE]([\\-+]?\\d+)?/, \"number.float\"],\n      [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, \"number.float\"],\n      [/\\d[\\d']*/, \"number\"],\n      [/\\d/, \"number\"],\n      [/[;,.]/, \"delimiter\"],\n      [/\"/, \"string\", \"@string\"],\n      [/'/, \"invalid\"]\n    ],\n    heredoc: [\n      [/<<[-]*\\s*[\"]?([\\w\\-]+)[\"]?/, { token: \"string.heredoc.delimiter\", next: \"@heredocBody.$1\" }]\n    ],\n    heredocBody: [\n      [\n        /([\\w\\-]+)$/,\n        {\n          cases: {\n            \"$1==$S2\": [\n              {\n                token: \"string.heredoc.delimiter\",\n                next: \"@popall\"\n              }\n            ],\n            \"@default\": \"string.heredoc\"\n          }\n        }\n      ],\n      [/./, \"string.heredoc\"]\n    ],\n    whitespace: [\n      [/[ \\t\\r\\n]+/, \"\"],\n      [/\\/\\*/, \"comment\", \"@comment\"],\n      [/\\/\\/.*$/, \"comment\"],\n      [/#.*$/, \"comment\"]\n    ],\n    comment: [\n      [/[^\\/*]+/, \"comment\"],\n      [/\\*\\//, \"comment\", \"@pop\"],\n      [/[\\/*]/, \"comment\"]\n    ],\n    string: [\n      [/\\$\\{/, { token: \"delimiter\", next: \"@stringExpression\" }],\n      [/[^\\\\\"\\$]+/, \"string\"],\n      [/@escapes/, \"string.escape\"],\n      [/\\\\./, \"string.escape.invalid\"],\n      [/\"/, \"string\", \"@popall\"]\n    ],\n    stringInsideExpression: [\n      [/[^\\\\\"]+/, \"string\"],\n      [/@escapes/, \"string.escape\"],\n      [/\\\\./, \"string.escape.invalid\"],\n      [/\"/, \"string\", \"@pop\"]\n    ],\n    stringExpression: [\n      [/\\}/, { token: \"delimiter\", next: \"@pop\" }],\n      [/\"/, \"string\", \"@stringInsideExpression\"],\n      { include: \"@terraform\" }\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"]},"metadata":{},"sourceType":"module"}