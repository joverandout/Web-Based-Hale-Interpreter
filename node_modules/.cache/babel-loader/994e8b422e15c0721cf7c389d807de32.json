{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n/**\n * Iterates over each entry in the provided dictionary. The iterator allows\n * to remove elements and will stop when the callback returns {{false}}.\n */\n\nexport function forEach(from, callback) {\n  for (let key in from) {\n    if (hasOwnProperty.call(from, key)) {\n      const result = callback({\n        key: key,\n        value: from[key]\n      }, function () {\n        delete from[key];\n      });\n\n      if (result === false) {\n        return;\n      }\n    }\n  }\n}\nexport class SetMap {\n  constructor() {\n    this.map = new Map();\n  }\n\n  add(key, value) {\n    let values = this.map.get(key);\n\n    if (!values) {\n      values = new Set();\n      this.map.set(key, values);\n    }\n\n    values.add(value);\n  }\n\n  delete(key, value) {\n    const values = this.map.get(key);\n\n    if (!values) {\n      return;\n    }\n\n    values.delete(value);\n\n    if (values.size === 0) {\n      this.map.delete(key);\n    }\n  }\n\n  forEach(key, fn) {\n    const values = this.map.get(key);\n\n    if (!values) {\n      return;\n    }\n\n    values.forEach(fn);\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/base/common/collections.js"],"names":["hasOwnProperty","Object","prototype","forEach","from","callback","key","call","result","value","SetMap","constructor","map","Map","add","values","get","Set","set","delete","size","fn"],"mappings":"AAAA;AACA;AACA;AACA;AACA,MAAMA,cAAc,GAAGC,MAAM,CAACC,SAAP,CAAiBF,cAAxC;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,OAAT,CAAiBC,IAAjB,EAAuBC,QAAvB,EAAiC;AACpC,OAAK,IAAIC,GAAT,IAAgBF,IAAhB,EAAsB;AAClB,QAAIJ,cAAc,CAACO,IAAf,CAAoBH,IAApB,EAA0BE,GAA1B,CAAJ,EAAoC;AAChC,YAAME,MAAM,GAAGH,QAAQ,CAAC;AAAEC,QAAAA,GAAG,EAAEA,GAAP;AAAYG,QAAAA,KAAK,EAAEL,IAAI,CAACE,GAAD;AAAvB,OAAD,EAAiC,YAAY;AAChE,eAAOF,IAAI,CAACE,GAAD,CAAX;AACH,OAFsB,CAAvB;;AAGA,UAAIE,MAAM,KAAK,KAAf,EAAsB;AAClB;AACH;AACJ;AACJ;AACJ;AACD,OAAO,MAAME,MAAN,CAAa;AAChBC,EAAAA,WAAW,GAAG;AACV,SAAKC,GAAL,GAAW,IAAIC,GAAJ,EAAX;AACH;;AACDC,EAAAA,GAAG,CAACR,GAAD,EAAMG,KAAN,EAAa;AACZ,QAAIM,MAAM,GAAG,KAAKH,GAAL,CAASI,GAAT,CAAaV,GAAb,CAAb;;AACA,QAAI,CAACS,MAAL,EAAa;AACTA,MAAAA,MAAM,GAAG,IAAIE,GAAJ,EAAT;AACA,WAAKL,GAAL,CAASM,GAAT,CAAaZ,GAAb,EAAkBS,MAAlB;AACH;;AACDA,IAAAA,MAAM,CAACD,GAAP,CAAWL,KAAX;AACH;;AACDU,EAAAA,MAAM,CAACb,GAAD,EAAMG,KAAN,EAAa;AACf,UAAMM,MAAM,GAAG,KAAKH,GAAL,CAASI,GAAT,CAAaV,GAAb,CAAf;;AACA,QAAI,CAACS,MAAL,EAAa;AACT;AACH;;AACDA,IAAAA,MAAM,CAACI,MAAP,CAAcV,KAAd;;AACA,QAAIM,MAAM,CAACK,IAAP,KAAgB,CAApB,EAAuB;AACnB,WAAKR,GAAL,CAASO,MAAT,CAAgBb,GAAhB;AACH;AACJ;;AACDH,EAAAA,OAAO,CAACG,GAAD,EAAMe,EAAN,EAAU;AACb,UAAMN,MAAM,GAAG,KAAKH,GAAL,CAASI,GAAT,CAAaV,GAAb,CAAf;;AACA,QAAI,CAACS,MAAL,EAAa;AACT;AACH;;AACDA,IAAAA,MAAM,CAACZ,OAAP,CAAekB,EAAf;AACH;;AA5Be","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n/**\n * Iterates over each entry in the provided dictionary. The iterator allows\n * to remove elements and will stop when the callback returns {{false}}.\n */\nexport function forEach(from, callback) {\n    for (let key in from) {\n        if (hasOwnProperty.call(from, key)) {\n            const result = callback({ key: key, value: from[key] }, function () {\n                delete from[key];\n            });\n            if (result === false) {\n                return;\n            }\n        }\n    }\n}\nexport class SetMap {\n    constructor() {\n        this.map = new Map();\n    }\n    add(key, value) {\n        let values = this.map.get(key);\n        if (!values) {\n            values = new Set();\n            this.map.set(key, values);\n        }\n        values.add(value);\n    }\n    delete(key, value) {\n        const values = this.map.get(key);\n        if (!values) {\n            return;\n        }\n        values.delete(value);\n        if (values.size === 0) {\n            this.map.delete(key);\n        }\n    }\n    forEach(key, fn) {\n        const values = this.map.get(key);\n        if (!values) {\n            return;\n        }\n        values.forEach(fn);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}