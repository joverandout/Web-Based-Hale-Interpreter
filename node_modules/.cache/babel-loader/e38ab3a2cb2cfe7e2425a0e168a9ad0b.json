{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nimport { createCancelablePromise, Delayer, RunOnceScheduler } from '../../../../base/common/async.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { KeyChord } from '../../../../base/common/keyCodes.js';\nimport { Disposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { escapeRegExpCharacters } from '../../../../base/common/strings.js';\nimport * as types from '../../../../base/common/types.js';\nimport './folding.css';\nimport { StableEditorScrollState } from '../../../browser/stableEditorScroll.js';\nimport { EditorAction, registerEditorAction, registerEditorContribution, registerInstantiatedEditorAction } from '../../../browser/editorExtensions.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { FoldingRangeKind, FoldingRangeProviderRegistry } from '../../../common/languages.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { FoldingModel, getNextFoldLine, getParentFoldLine, getPreviousFoldLine, setCollapseStateAtLevel, setCollapseStateForMatchingLines, setCollapseStateForRest, setCollapseStateForType, setCollapseStateLevelsDown, setCollapseStateLevelsUp, setCollapseStateUp, toggleCollapseState } from './foldingModel.js';\nimport { HiddenRangeModel } from './hiddenRangeModel.js';\nimport { IndentRangeProvider } from './indentRangeProvider.js';\nimport { ID_INIT_PROVIDER, InitializingRangeProvider } from './intializingRangeProvider.js';\nimport * as nls from '../../../../nls.js';\nimport { IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { editorSelectionBackground, iconForeground, registerColor, transparent } from '../../../../platform/theme/common/colorRegistry.js';\nimport { registerThemingParticipant, ThemeIcon } from '../../../../platform/theme/common/themeService.js';\nimport { foldingCollapsedIcon, FoldingDecorationProvider, foldingExpandedIcon } from './foldingDecorations.js';\nimport { ID_SYNTAX_PROVIDER, SyntaxRangeProvider } from './syntaxRangeProvider.js';\nimport { INotificationService } from '../../../../platform/notification/common/notification.js';\nimport Severity from '../../../../base/common/severity.js';\nimport { ILanguageFeatureDebounceService } from '../../../common/services/languageFeatureDebounce.js';\nimport { StopWatch } from '../../../../base/common/stopwatch.js';\nconst CONTEXT_FOLDING_ENABLED = new RawContextKey('foldingEnabled', false);\nlet FoldingController = class FoldingController extends Disposable {\n  constructor(editor, contextKeyService, languageConfigurationService, notificationService, languageFeatureDebounceService) {\n    super();\n    this.contextKeyService = contextKeyService;\n    this.languageConfigurationService = languageConfigurationService;\n    this._tooManyRegionsNotified = false;\n    this.localToDispose = this._register(new DisposableStore());\n    this.editor = editor;\n    const options = this.editor.getOptions();\n    this._isEnabled = options.get(37\n    /* folding */\n    );\n    this._useFoldingProviders = options.get(38\n    /* foldingStrategy */\n    ) !== 'indentation';\n    this._unfoldOnClickAfterEndOfLine = options.get(42\n    /* unfoldOnClickAfterEndOfLine */\n    );\n    this._restoringViewState = false;\n    this._currentModelHasFoldedImports = false;\n    this._foldingImportsByDefault = options.get(40\n    /* foldingImportsByDefault */\n    );\n    this._maxFoldingRegions = options.get(41\n    /* foldingMaximumRegions */\n    );\n    this.updateDebounceInfo = languageFeatureDebounceService.for(FoldingRangeProviderRegistry, 'Folding', {\n      min: 200\n    });\n    this.foldingModel = null;\n    this.hiddenRangeModel = null;\n    this.rangeProvider = null;\n    this.foldingRegionPromise = null;\n    this.foldingStateMemento = null;\n    this.foldingModelPromise = null;\n    this.updateScheduler = null;\n    this.cursorChangedScheduler = null;\n    this.mouseDownInfo = null;\n    this.foldingDecorationProvider = new FoldingDecorationProvider(editor);\n    this.foldingDecorationProvider.autoHideFoldingControls = options.get(99\n    /* showFoldingControls */\n    ) === 'mouseover';\n    this.foldingDecorationProvider.showFoldingHighlights = options.get(39\n    /* foldingHighlight */\n    );\n    this.foldingEnabled = CONTEXT_FOLDING_ENABLED.bindTo(this.contextKeyService);\n    this.foldingEnabled.set(this._isEnabled);\n\n    this._notifyTooManyRegions = maxFoldingRegions => {\n      // Message will display once per time vscode runs. Once per file would be tricky.\n      if (!this._tooManyRegionsNotified) {\n        notificationService.notify({\n          severity: Severity.Warning,\n          sticky: true,\n          message: nls.localize('maximum fold ranges', \"The number of foldable regions is limited to a maximum of {0}. Increase configuration option ['Folding Maximum Regions'](command:workbench.action.openSettings?[\\\"editor.foldingMaximumRegions\\\"]) to enable more.\", maxFoldingRegions)\n        });\n        this._tooManyRegionsNotified = true;\n      }\n    };\n\n    this._register(this.editor.onDidChangeModel(() => this.onModelChanged()));\n\n    this._register(this.editor.onDidChangeConfiguration(e => {\n      if (e.hasChanged(37\n      /* folding */\n      )) {\n        this._isEnabled = this.editor.getOptions().get(37\n        /* folding */\n        );\n        this.foldingEnabled.set(this._isEnabled);\n        this.onModelChanged();\n      }\n\n      if (e.hasChanged(41\n      /* foldingMaximumRegions */\n      )) {\n        this._maxFoldingRegions = this.editor.getOptions().get(41\n        /* foldingMaximumRegions */\n        );\n        this._tooManyRegionsNotified = false;\n        this.onModelChanged();\n      }\n\n      if (e.hasChanged(99\n      /* showFoldingControls */\n      ) || e.hasChanged(39\n      /* foldingHighlight */\n      )) {\n        const options = this.editor.getOptions();\n        this.foldingDecorationProvider.autoHideFoldingControls = options.get(99\n        /* showFoldingControls */\n        ) === 'mouseover';\n        this.foldingDecorationProvider.showFoldingHighlights = options.get(39\n        /* foldingHighlight */\n        );\n        this.triggerFoldingModelChanged();\n      }\n\n      if (e.hasChanged(38\n      /* foldingStrategy */\n      )) {\n        this._useFoldingProviders = this.editor.getOptions().get(38\n        /* foldingStrategy */\n        ) !== 'indentation';\n        this.onFoldingStrategyChanged();\n      }\n\n      if (e.hasChanged(42\n      /* unfoldOnClickAfterEndOfLine */\n      )) {\n        this._unfoldOnClickAfterEndOfLine = this.editor.getOptions().get(42\n        /* unfoldOnClickAfterEndOfLine */\n        );\n      }\n\n      if (e.hasChanged(40\n      /* foldingImportsByDefault */\n      )) {\n        this._foldingImportsByDefault = this.editor.getOptions().get(40\n        /* foldingImportsByDefault */\n        );\n      }\n    }));\n\n    this.onModelChanged();\n  }\n\n  static get(editor) {\n    return editor.getContribution(FoldingController.ID);\n  }\n  /**\n   * Store view state.\n   */\n\n\n  saveViewState() {\n    let model = this.editor.getModel();\n\n    if (!model || !this._isEnabled || model.isTooLargeForTokenization()) {\n      return {};\n    }\n\n    if (this.foldingModel) {\n      // disposed ?\n      let collapsedRegions = this.foldingModel.isInitialized ? this.foldingModel.getMemento() : this.hiddenRangeModel.getMemento();\n      let provider = this.rangeProvider ? this.rangeProvider.id : undefined;\n      return {\n        collapsedRegions,\n        lineCount: model.getLineCount(),\n        provider,\n        foldedImports: this._currentModelHasFoldedImports\n      };\n    }\n\n    return undefined;\n  }\n  /**\n   * Restore view state.\n   */\n\n\n  restoreViewState(state) {\n    let model = this.editor.getModel();\n\n    if (!model || !this._isEnabled || model.isTooLargeForTokenization() || !this.hiddenRangeModel) {\n      return;\n    }\n\n    if (!state || state.lineCount !== model.getLineCount()) {\n      return;\n    }\n\n    this._currentModelHasFoldedImports = !!state.foldedImports;\n\n    if (!state.collapsedRegions) {\n      return;\n    }\n\n    if (state.provider === ID_SYNTAX_PROVIDER || state.provider === ID_INIT_PROVIDER) {\n      this.foldingStateMemento = state;\n    }\n\n    const collapsedRegions = state.collapsedRegions; // set the hidden ranges right away, before waiting for the folding model.\n\n    if (this.hiddenRangeModel.applyMemento(collapsedRegions)) {\n      const foldingModel = this.getFoldingModel();\n\n      if (foldingModel) {\n        foldingModel.then(foldingModel => {\n          if (foldingModel) {\n            this._restoringViewState = true;\n\n            try {\n              foldingModel.applyMemento(collapsedRegions);\n            } finally {\n              this._restoringViewState = false;\n            }\n          }\n        }).then(undefined, onUnexpectedError);\n      }\n    }\n  }\n\n  onModelChanged() {\n    this.localToDispose.clear();\n    let model = this.editor.getModel();\n\n    if (!this._isEnabled || !model || model.isTooLargeForTokenization()) {\n      // huge files get no view model, so they cannot support hidden areas\n      return;\n    }\n\n    this._currentModelHasFoldedImports = false;\n    this.foldingModel = new FoldingModel(model, this.foldingDecorationProvider);\n    this.localToDispose.add(this.foldingModel);\n    this.hiddenRangeModel = new HiddenRangeModel(this.foldingModel);\n    this.localToDispose.add(this.hiddenRangeModel);\n    this.localToDispose.add(this.hiddenRangeModel.onDidChange(hr => this.onHiddenRangesChanges(hr)));\n    this.updateScheduler = new Delayer(this.updateDebounceInfo.get(model));\n    this.cursorChangedScheduler = new RunOnceScheduler(() => this.revealCursor(), 200);\n    this.localToDispose.add(this.cursorChangedScheduler);\n    this.localToDispose.add(FoldingRangeProviderRegistry.onDidChange(() => this.onFoldingStrategyChanged()));\n    this.localToDispose.add(this.editor.onDidChangeModelLanguageConfiguration(() => this.onFoldingStrategyChanged())); // covers model language changes as well\n\n    this.localToDispose.add(this.editor.onDidChangeModelContent(e => this.onDidChangeModelContent(e)));\n    this.localToDispose.add(this.editor.onDidChangeCursorPosition(() => this.onCursorPositionChanged()));\n    this.localToDispose.add(this.editor.onMouseDown(e => this.onEditorMouseDown(e)));\n    this.localToDispose.add(this.editor.onMouseUp(e => this.onEditorMouseUp(e)));\n    this.localToDispose.add({\n      dispose: () => {\n        if (this.foldingRegionPromise) {\n          this.foldingRegionPromise.cancel();\n          this.foldingRegionPromise = null;\n        }\n\n        if (this.updateScheduler) {\n          this.updateScheduler.cancel();\n        }\n\n        this.updateScheduler = null;\n        this.foldingModel = null;\n        this.foldingModelPromise = null;\n        this.hiddenRangeModel = null;\n        this.cursorChangedScheduler = null;\n        this.foldingStateMemento = null;\n\n        if (this.rangeProvider) {\n          this.rangeProvider.dispose();\n        }\n\n        this.rangeProvider = null;\n      }\n    });\n    this.triggerFoldingModelChanged();\n  }\n\n  onFoldingStrategyChanged() {\n    if (this.rangeProvider) {\n      this.rangeProvider.dispose();\n    }\n\n    this.rangeProvider = null;\n    this.triggerFoldingModelChanged();\n  }\n\n  getRangeProvider(editorModel) {\n    if (this.rangeProvider) {\n      return this.rangeProvider;\n    }\n\n    this.rangeProvider = new IndentRangeProvider(editorModel, this.languageConfigurationService, this._maxFoldingRegions); // fallback\n\n    if (this._useFoldingProviders && this.foldingModel) {\n      let foldingProviders = FoldingRangeProviderRegistry.ordered(this.foldingModel.textModel);\n\n      if (foldingProviders.length === 0 && this.foldingStateMemento && this.foldingStateMemento.collapsedRegions) {\n        const rangeProvider = this.rangeProvider = new InitializingRangeProvider(editorModel, this.foldingStateMemento.collapsedRegions, () => {\n          // if after 30 the InitializingRangeProvider is still not replaced, force a refresh\n          this.foldingStateMemento = null;\n          this.onFoldingStrategyChanged();\n        }, 30000);\n        return rangeProvider; // keep memento in case there are still no foldingProviders on the next request.\n      } else if (foldingProviders.length > 0) {\n        this.rangeProvider = new SyntaxRangeProvider(editorModel, foldingProviders, () => this.triggerFoldingModelChanged(), this._maxFoldingRegions);\n      }\n    }\n\n    this.foldingStateMemento = null;\n    return this.rangeProvider;\n  }\n\n  getFoldingModel() {\n    return this.foldingModelPromise;\n  }\n\n  onDidChangeModelContent(e) {\n    var _a;\n\n    (_a = this.hiddenRangeModel) === null || _a === void 0 ? void 0 : _a.notifyChangeModelContent(e);\n    this.triggerFoldingModelChanged();\n  }\n\n  triggerFoldingModelChanged() {\n    if (this.updateScheduler) {\n      if (this.foldingRegionPromise) {\n        this.foldingRegionPromise.cancel();\n        this.foldingRegionPromise = null;\n      }\n\n      this.foldingModelPromise = this.updateScheduler.trigger(() => {\n        const foldingModel = this.foldingModel;\n\n        if (!foldingModel) {\n          // null if editor has been disposed, or folding turned off\n          return null;\n        }\n\n        const sw = new StopWatch(true);\n        const provider = this.getRangeProvider(foldingModel.textModel);\n        let foldingRegionPromise = this.foldingRegionPromise = createCancelablePromise(token => provider.compute(token, this._notifyTooManyRegions));\n        return foldingRegionPromise.then(foldingRanges => {\n          if (foldingRanges && foldingRegionPromise === this.foldingRegionPromise) {\n            // new request or cancelled in the meantime?\n            let scrollState;\n\n            if (this._foldingImportsByDefault && !this._currentModelHasFoldedImports) {\n              const hasChanges = foldingRanges.setCollapsedAllOfType(FoldingRangeKind.Imports.value, true);\n\n              if (hasChanges) {\n                scrollState = StableEditorScrollState.capture(this.editor);\n                this._currentModelHasFoldedImports = hasChanges;\n              }\n            } // some cursors might have moved into hidden regions, make sure they are in expanded regions\n\n\n            let selections = this.editor.getSelections();\n            let selectionLineNumbers = selections ? selections.map(s => s.startLineNumber) : [];\n            foldingModel.update(foldingRanges, selectionLineNumbers);\n\n            if (scrollState) {\n              scrollState.restore(this.editor);\n            } // update debounce info\n\n\n            const newValue = this.updateDebounceInfo.update(foldingModel.textModel, sw.elapsed());\n\n            if (this.updateScheduler) {\n              this.updateScheduler.defaultDelay = newValue;\n            }\n          }\n\n          return foldingModel;\n        });\n      }).then(undefined, err => {\n        onUnexpectedError(err);\n        return null;\n      });\n    }\n  }\n\n  onHiddenRangesChanges(hiddenRanges) {\n    if (this.hiddenRangeModel && hiddenRanges.length && !this._restoringViewState) {\n      let selections = this.editor.getSelections();\n\n      if (selections) {\n        if (this.hiddenRangeModel.adjustSelections(selections)) {\n          this.editor.setSelections(selections);\n        }\n      }\n    }\n\n    this.editor.setHiddenAreas(hiddenRanges);\n  }\n\n  onCursorPositionChanged() {\n    if (this.hiddenRangeModel && this.hiddenRangeModel.hasRanges()) {\n      this.cursorChangedScheduler.schedule();\n    }\n  }\n\n  revealCursor() {\n    const foldingModel = this.getFoldingModel();\n\n    if (!foldingModel) {\n      return;\n    }\n\n    foldingModel.then(foldingModel => {\n      if (foldingModel) {\n        let selections = this.editor.getSelections();\n\n        if (selections && selections.length > 0) {\n          let toToggle = [];\n\n          for (let selection of selections) {\n            let lineNumber = selection.selectionStartLineNumber;\n\n            if (this.hiddenRangeModel && this.hiddenRangeModel.isHidden(lineNumber)) {\n              toToggle.push(...foldingModel.getAllRegionsAtLine(lineNumber, r => r.isCollapsed && lineNumber > r.startLineNumber));\n            }\n          }\n\n          if (toToggle.length) {\n            foldingModel.toggleCollapseState(toToggle);\n            this.reveal(selections[0].getPosition());\n          }\n        }\n      }\n    }).then(undefined, onUnexpectedError);\n  }\n\n  onEditorMouseDown(e) {\n    this.mouseDownInfo = null;\n\n    if (!this.hiddenRangeModel || !e.target || !e.target.range) {\n      return;\n    }\n\n    if (!e.event.leftButton && !e.event.middleButton) {\n      return;\n    }\n\n    const range = e.target.range;\n    let iconClicked = false;\n\n    switch (e.target.type) {\n      case 4\n      /* GUTTER_LINE_DECORATIONS */\n      :\n        {\n          const data = e.target.detail;\n          const offsetLeftInGutter = e.target.element.offsetLeft;\n          const gutterOffsetX = data.offsetX - offsetLeftInGutter; // const gutterOffsetX = data.offsetX - data.glyphMarginWidth - data.lineNumbersWidth - data.glyphMarginLeft;\n          // TODO@joao TODO@alex TODO@martin this is such that we don't collide with dirty diff\n\n          if (gutterOffsetX < 5) {\n            // the whitespace between the border and the real folding icon border is 5px\n            return;\n          }\n\n          iconClicked = true;\n          break;\n        }\n\n      case 7\n      /* CONTENT_EMPTY */\n      :\n        {\n          if (this._unfoldOnClickAfterEndOfLine && this.hiddenRangeModel.hasRanges()) {\n            const data = e.target.detail;\n\n            if (!data.isAfterLines) {\n              break;\n            }\n          }\n\n          return;\n        }\n\n      case 6\n      /* CONTENT_TEXT */\n      :\n        {\n          if (this.hiddenRangeModel.hasRanges()) {\n            let model = this.editor.getModel();\n\n            if (model && range.startColumn === model.getLineMaxColumn(range.startLineNumber)) {\n              break;\n            }\n          }\n\n          return;\n        }\n\n      default:\n        return;\n    }\n\n    this.mouseDownInfo = {\n      lineNumber: range.startLineNumber,\n      iconClicked\n    };\n  }\n\n  onEditorMouseUp(e) {\n    const foldingModel = this.getFoldingModel();\n\n    if (!foldingModel || !this.mouseDownInfo || !e.target) {\n      return;\n    }\n\n    let lineNumber = this.mouseDownInfo.lineNumber;\n    let iconClicked = this.mouseDownInfo.iconClicked;\n    let range = e.target.range;\n\n    if (!range || range.startLineNumber !== lineNumber) {\n      return;\n    }\n\n    if (iconClicked) {\n      if (e.target.type !== 4\n      /* GUTTER_LINE_DECORATIONS */\n      ) {\n        return;\n      }\n    } else {\n      let model = this.editor.getModel();\n\n      if (!model || range.startColumn !== model.getLineMaxColumn(lineNumber)) {\n        return;\n      }\n    }\n\n    foldingModel.then(foldingModel => {\n      if (foldingModel) {\n        let region = foldingModel.getRegionAtLine(lineNumber);\n\n        if (region && region.startLineNumber === lineNumber) {\n          let isCollapsed = region.isCollapsed;\n\n          if (iconClicked || isCollapsed) {\n            let surrounding = e.event.altKey;\n            let toToggle = [];\n\n            if (surrounding) {\n              let filter = otherRegion => !otherRegion.containedBy(region) && !region.containedBy(otherRegion);\n\n              let toMaybeToggle = foldingModel.getRegionsInside(null, filter);\n\n              for (const r of toMaybeToggle) {\n                if (r.isCollapsed) {\n                  toToggle.push(r);\n                }\n              } // if any surrounding regions are folded, unfold those. Otherwise, fold all surrounding\n\n\n              if (toToggle.length === 0) {\n                toToggle = toMaybeToggle;\n              }\n            } else {\n              let recursive = e.event.middleButton || e.event.shiftKey;\n\n              if (recursive) {\n                for (const r of foldingModel.getRegionsInside(region)) {\n                  if (r.isCollapsed === isCollapsed) {\n                    toToggle.push(r);\n                  }\n                }\n              } // when recursive, first only collapse all children. If all are already folded or there are no children, also fold parent.\n\n\n              if (isCollapsed || !recursive || toToggle.length === 0) {\n                toToggle.push(region);\n              }\n            }\n\n            foldingModel.toggleCollapseState(toToggle);\n            this.reveal({\n              lineNumber,\n              column: 1\n            });\n          }\n        }\n      }\n    }).then(undefined, onUnexpectedError);\n  }\n\n  reveal(position) {\n    this.editor.revealPositionInCenterIfOutsideViewport(position, 0\n    /* Smooth */\n    );\n  }\n\n};\nFoldingController.ID = 'editor.contrib.folding';\nFoldingController = __decorate([__param(1, IContextKeyService), __param(2, ILanguageConfigurationService), __param(3, INotificationService), __param(4, ILanguageFeatureDebounceService)], FoldingController);\nexport { FoldingController };\n\nclass FoldingAction extends EditorAction {\n  runEditorCommand(accessor, editor, args) {\n    const languageConfigurationService = accessor.get(ILanguageConfigurationService);\n    const foldingController = FoldingController.get(editor);\n\n    if (!foldingController) {\n      return;\n    }\n\n    const foldingModelPromise = foldingController.getFoldingModel();\n\n    if (foldingModelPromise) {\n      this.reportTelemetry(accessor, editor);\n      return foldingModelPromise.then(foldingModel => {\n        if (foldingModel) {\n          this.invoke(foldingController, foldingModel, editor, args, languageConfigurationService);\n          const selection = editor.getSelection();\n\n          if (selection) {\n            foldingController.reveal(selection.getStartPosition());\n          }\n        }\n      });\n    }\n  }\n\n  getSelectedLines(editor) {\n    let selections = editor.getSelections();\n    return selections ? selections.map(s => s.startLineNumber) : [];\n  }\n\n  getLineNumbers(args, editor) {\n    if (args && args.selectionLines) {\n      return args.selectionLines.map(l => l + 1); // to 0-bases line numbers\n    }\n\n    return this.getSelectedLines(editor);\n  }\n\n  run(_accessor, _editor) {}\n\n}\n\nfunction foldingArgumentsConstraint(args) {\n  if (!types.isUndefined(args)) {\n    if (!types.isObject(args)) {\n      return false;\n    }\n\n    const foldingArgs = args;\n\n    if (!types.isUndefined(foldingArgs.levels) && !types.isNumber(foldingArgs.levels)) {\n      return false;\n    }\n\n    if (!types.isUndefined(foldingArgs.direction) && !types.isString(foldingArgs.direction)) {\n      return false;\n    }\n\n    if (!types.isUndefined(foldingArgs.selectionLines) && (!types.isArray(foldingArgs.selectionLines) || !foldingArgs.selectionLines.every(types.isNumber))) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nclass UnfoldAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.unfold',\n      label: nls.localize('unfoldAction.label', \"Unfold\"),\n      alias: 'Unfold',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 2048\n        /* CtrlCmd */\n        | 1024\n        /* Shift */\n        | 89\n        /* BracketRight */\n        ,\n        mac: {\n          primary: 2048\n          /* CtrlCmd */\n          | 512\n          /* Alt */\n          | 89\n          /* BracketRight */\n\n        },\n        weight: 100\n        /* EditorContrib */\n\n      },\n      description: {\n        description: 'Unfold the content in the editor',\n        args: [{\n          name: 'Unfold editor argument',\n          description: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t\t* 'levels': Number of levels to unfold. If not set, defaults to 1.\n\t\t\t\t\t\t* 'direction': If 'up', unfold given number of levels up otherwise unfolds down.\n\t\t\t\t\t\t* 'selectionLines': The start lines (0-based) of the editor selections to apply the unfold action to. If not set, the active selection(s) will be used.\n\t\t\t\t\t\t`,\n          constraint: foldingArgumentsConstraint,\n          schema: {\n            'type': 'object',\n            'properties': {\n              'levels': {\n                'type': 'number',\n                'default': 1\n              },\n              'direction': {\n                'type': 'string',\n                'enum': ['up', 'down'],\n                'default': 'down'\n              },\n              'selectionLines': {\n                'type': 'array',\n                'items': {\n                  'type': 'number'\n                }\n              }\n            }\n          }\n        }]\n      }\n    });\n  }\n\n  invoke(_foldingController, foldingModel, editor, args) {\n    let levels = args && args.levels || 1;\n    let lineNumbers = this.getLineNumbers(args, editor);\n\n    if (args && args.direction === 'up') {\n      setCollapseStateLevelsUp(foldingModel, false, levels, lineNumbers);\n    } else {\n      setCollapseStateLevelsDown(foldingModel, false, levels, lineNumbers);\n    }\n  }\n\n}\n\nclass UnFoldRecursivelyAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.unfoldRecursively',\n      label: nls.localize('unFoldRecursivelyAction.label', \"Unfold Recursively\"),\n      alias: 'Unfold Recursively',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048\n        /* CtrlCmd */\n        | 41\n        /* KeyK */\n        , 2048\n        /* CtrlCmd */\n        | 89\n        /* BracketRight */\n        ),\n        weight: 100\n        /* EditorContrib */\n\n      }\n    });\n  }\n\n  invoke(_foldingController, foldingModel, editor, _args) {\n    setCollapseStateLevelsDown(foldingModel, false, Number.MAX_VALUE, this.getSelectedLines(editor));\n  }\n\n}\n\nclass FoldAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.fold',\n      label: nls.localize('foldAction.label', \"Fold\"),\n      alias: 'Fold',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 2048\n        /* CtrlCmd */\n        | 1024\n        /* Shift */\n        | 87\n        /* BracketLeft */\n        ,\n        mac: {\n          primary: 2048\n          /* CtrlCmd */\n          | 512\n          /* Alt */\n          | 87\n          /* BracketLeft */\n\n        },\n        weight: 100\n        /* EditorContrib */\n\n      },\n      description: {\n        description: 'Fold the content in the editor',\n        args: [{\n          name: 'Fold editor argument',\n          description: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t\t\t* 'levels': Number of levels to fold.\n\t\t\t\t\t\t\t* 'direction': If 'up', folds given number of levels up otherwise folds down.\n\t\t\t\t\t\t\t* 'selectionLines': The start lines (0-based) of the editor selections to apply the fold action to. If not set, the active selection(s) will be used.\n\t\t\t\t\t\t\tIf no levels or direction is set, folds the region at the locations or if already collapsed, the first uncollapsed parent instead.\n\t\t\t\t\t\t`,\n          constraint: foldingArgumentsConstraint,\n          schema: {\n            'type': 'object',\n            'properties': {\n              'levels': {\n                'type': 'number'\n              },\n              'direction': {\n                'type': 'string',\n                'enum': ['up', 'down']\n              },\n              'selectionLines': {\n                'type': 'array',\n                'items': {\n                  'type': 'number'\n                }\n              }\n            }\n          }\n        }]\n      }\n    });\n  }\n\n  invoke(_foldingController, foldingModel, editor, args) {\n    let lineNumbers = this.getLineNumbers(args, editor);\n    const levels = args && args.levels;\n    const direction = args && args.direction;\n\n    if (typeof levels !== 'number' && typeof direction !== 'string') {\n      // fold the region at the location or if already collapsed, the first uncollapsed parent instead.\n      setCollapseStateUp(foldingModel, true, lineNumbers);\n    } else {\n      if (direction === 'up') {\n        setCollapseStateLevelsUp(foldingModel, true, levels || 1, lineNumbers);\n      } else {\n        setCollapseStateLevelsDown(foldingModel, true, levels || 1, lineNumbers);\n      }\n    }\n  }\n\n}\n\nclass ToggleFoldAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.toggleFold',\n      label: nls.localize('toggleFoldAction.label', \"Toggle Fold\"),\n      alias: 'Toggle Fold',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048\n        /* CtrlCmd */\n        | 41\n        /* KeyK */\n        , 2048\n        /* CtrlCmd */\n        | 42\n        /* KeyL */\n        ),\n        weight: 100\n        /* EditorContrib */\n\n      }\n    });\n  }\n\n  invoke(_foldingController, foldingModel, editor) {\n    let selectedLines = this.getSelectedLines(editor);\n    toggleCollapseState(foldingModel, 1, selectedLines);\n  }\n\n}\n\nclass FoldRecursivelyAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.foldRecursively',\n      label: nls.localize('foldRecursivelyAction.label', \"Fold Recursively\"),\n      alias: 'Fold Recursively',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048\n        /* CtrlCmd */\n        | 41\n        /* KeyK */\n        , 2048\n        /* CtrlCmd */\n        | 87\n        /* BracketLeft */\n        ),\n        weight: 100\n        /* EditorContrib */\n\n      }\n    });\n  }\n\n  invoke(_foldingController, foldingModel, editor) {\n    let selectedLines = this.getSelectedLines(editor);\n    setCollapseStateLevelsDown(foldingModel, true, Number.MAX_VALUE, selectedLines);\n  }\n\n}\n\nclass FoldAllBlockCommentsAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.foldAllBlockComments',\n      label: nls.localize('foldAllBlockComments.label', \"Fold All Block Comments\"),\n      alias: 'Fold All Block Comments',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048\n        /* CtrlCmd */\n        | 41\n        /* KeyK */\n        , 2048\n        /* CtrlCmd */\n        | 85\n        /* Slash */\n        ),\n        weight: 100\n        /* EditorContrib */\n\n      }\n    });\n  }\n\n  invoke(_foldingController, foldingModel, editor, args, languageConfigurationService) {\n    if (foldingModel.regions.hasTypes()) {\n      setCollapseStateForType(foldingModel, FoldingRangeKind.Comment.value, true);\n    } else {\n      const editorModel = editor.getModel();\n\n      if (!editorModel) {\n        return;\n      }\n\n      const comments = languageConfigurationService.getLanguageConfiguration(editorModel.getLanguageId()).comments;\n\n      if (comments && comments.blockCommentStartToken) {\n        let regExp = new RegExp('^\\\\s*' + escapeRegExpCharacters(comments.blockCommentStartToken));\n        setCollapseStateForMatchingLines(foldingModel, regExp, true);\n      }\n    }\n  }\n\n}\n\nclass FoldAllRegionsAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.foldAllMarkerRegions',\n      label: nls.localize('foldAllMarkerRegions.label', \"Fold All Regions\"),\n      alias: 'Fold All Regions',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048\n        /* CtrlCmd */\n        | 41\n        /* KeyK */\n        , 2048\n        /* CtrlCmd */\n        | 29\n        /* Digit8 */\n        ),\n        weight: 100\n        /* EditorContrib */\n\n      }\n    });\n  }\n\n  invoke(_foldingController, foldingModel, editor, args, languageConfigurationService) {\n    if (foldingModel.regions.hasTypes()) {\n      setCollapseStateForType(foldingModel, FoldingRangeKind.Region.value, true);\n    } else {\n      const editorModel = editor.getModel();\n\n      if (!editorModel) {\n        return;\n      }\n\n      const foldingRules = languageConfigurationService.getLanguageConfiguration(editorModel.getLanguageId()).foldingRules;\n\n      if (foldingRules && foldingRules.markers && foldingRules.markers.start) {\n        let regExp = new RegExp(foldingRules.markers.start);\n        setCollapseStateForMatchingLines(foldingModel, regExp, true);\n      }\n    }\n  }\n\n}\n\nclass UnfoldAllRegionsAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.unfoldAllMarkerRegions',\n      label: nls.localize('unfoldAllMarkerRegions.label', \"Unfold All Regions\"),\n      alias: 'Unfold All Regions',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048\n        /* CtrlCmd */\n        | 41\n        /* KeyK */\n        , 2048\n        /* CtrlCmd */\n        | 30\n        /* Digit9 */\n        ),\n        weight: 100\n        /* EditorContrib */\n\n      }\n    });\n  }\n\n  invoke(_foldingController, foldingModel, editor, args, languageConfigurationService) {\n    if (foldingModel.regions.hasTypes()) {\n      setCollapseStateForType(foldingModel, FoldingRangeKind.Region.value, false);\n    } else {\n      const editorModel = editor.getModel();\n\n      if (!editorModel) {\n        return;\n      }\n\n      const foldingRules = languageConfigurationService.getLanguageConfiguration(editorModel.getLanguageId()).foldingRules;\n\n      if (foldingRules && foldingRules.markers && foldingRules.markers.start) {\n        let regExp = new RegExp(foldingRules.markers.start);\n        setCollapseStateForMatchingLines(foldingModel, regExp, false);\n      }\n    }\n  }\n\n}\n\nclass FoldAllRegionsExceptAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.foldAllExcept',\n      label: nls.localize('foldAllExcept.label', \"Fold All Regions Except Selected\"),\n      alias: 'Fold All Regions Except Selected',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048\n        /* CtrlCmd */\n        | 41\n        /* KeyK */\n        , 2048\n        /* CtrlCmd */\n        | 83\n        /* Minus */\n        ),\n        weight: 100\n        /* EditorContrib */\n\n      }\n    });\n  }\n\n  invoke(_foldingController, foldingModel, editor) {\n    let selectedLines = this.getSelectedLines(editor);\n    setCollapseStateForRest(foldingModel, true, selectedLines);\n  }\n\n}\n\nclass UnfoldAllRegionsExceptAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.unfoldAllExcept',\n      label: nls.localize('unfoldAllExcept.label', \"Unfold All Regions Except Selected\"),\n      alias: 'Unfold All Regions Except Selected',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048\n        /* CtrlCmd */\n        | 41\n        /* KeyK */\n        , 2048\n        /* CtrlCmd */\n        | 81\n        /* Equal */\n        ),\n        weight: 100\n        /* EditorContrib */\n\n      }\n    });\n  }\n\n  invoke(_foldingController, foldingModel, editor) {\n    let selectedLines = this.getSelectedLines(editor);\n    setCollapseStateForRest(foldingModel, false, selectedLines);\n  }\n\n}\n\nclass FoldAllAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.foldAll',\n      label: nls.localize('foldAllAction.label', \"Fold All\"),\n      alias: 'Fold All',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048\n        /* CtrlCmd */\n        | 41\n        /* KeyK */\n        , 2048\n        /* CtrlCmd */\n        | 21\n        /* Digit0 */\n        ),\n        weight: 100\n        /* EditorContrib */\n\n      }\n    });\n  }\n\n  invoke(_foldingController, foldingModel, _editor) {\n    setCollapseStateLevelsDown(foldingModel, true);\n  }\n\n}\n\nclass UnfoldAllAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.unfoldAll',\n      label: nls.localize('unfoldAllAction.label', \"Unfold All\"),\n      alias: 'Unfold All',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048\n        /* CtrlCmd */\n        | 41\n        /* KeyK */\n        , 2048\n        /* CtrlCmd */\n        | 40\n        /* KeyJ */\n        ),\n        weight: 100\n        /* EditorContrib */\n\n      }\n    });\n  }\n\n  invoke(_foldingController, foldingModel, _editor) {\n    setCollapseStateLevelsDown(foldingModel, false);\n  }\n\n}\n\nclass FoldLevelAction extends FoldingAction {\n  getFoldingLevel() {\n    return parseInt(this.id.substr(FoldLevelAction.ID_PREFIX.length));\n  }\n\n  invoke(_foldingController, foldingModel, editor) {\n    setCollapseStateAtLevel(foldingModel, this.getFoldingLevel(), true, this.getSelectedLines(editor));\n  }\n\n}\n\nFoldLevelAction.ID_PREFIX = 'editor.foldLevel';\n\nFoldLevelAction.ID = level => FoldLevelAction.ID_PREFIX + level;\n/** Action to go to the parent fold of current line */\n\n\nclass GotoParentFoldAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.gotoParentFold',\n      label: nls.localize('gotoParentFold.label', \"Go to Parent Fold\"),\n      alias: 'Go to Parent Fold',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        weight: 100\n        /* EditorContrib */\n\n      }\n    });\n  }\n\n  invoke(_foldingController, foldingModel, editor) {\n    let selectedLines = this.getSelectedLines(editor);\n\n    if (selectedLines.length > 0) {\n      let startLineNumber = getParentFoldLine(selectedLines[0], foldingModel);\n\n      if (startLineNumber !== null) {\n        editor.setSelection({\n          startLineNumber: startLineNumber,\n          startColumn: 1,\n          endLineNumber: startLineNumber,\n          endColumn: 1\n        });\n      }\n    }\n  }\n\n}\n/** Action to go to the previous fold of current line */\n\n\nclass GotoPreviousFoldAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.gotoPreviousFold',\n      label: nls.localize('gotoPreviousFold.label', \"Go to Previous Folding Range\"),\n      alias: 'Go to Previous Folding Range',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        weight: 100\n        /* EditorContrib */\n\n      }\n    });\n  }\n\n  invoke(_foldingController, foldingModel, editor) {\n    let selectedLines = this.getSelectedLines(editor);\n\n    if (selectedLines.length > 0) {\n      let startLineNumber = getPreviousFoldLine(selectedLines[0], foldingModel);\n\n      if (startLineNumber !== null) {\n        editor.setSelection({\n          startLineNumber: startLineNumber,\n          startColumn: 1,\n          endLineNumber: startLineNumber,\n          endColumn: 1\n        });\n      }\n    }\n  }\n\n}\n/** Action to go to the next fold of current line */\n\n\nclass GotoNextFoldAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.gotoNextFold',\n      label: nls.localize('gotoNextFold.label', \"Go to Next Folding Range\"),\n      alias: 'Go to Next Folding Range',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        weight: 100\n        /* EditorContrib */\n\n      }\n    });\n  }\n\n  invoke(_foldingController, foldingModel, editor) {\n    let selectedLines = this.getSelectedLines(editor);\n\n    if (selectedLines.length > 0) {\n      let startLineNumber = getNextFoldLine(selectedLines[0], foldingModel);\n\n      if (startLineNumber !== null) {\n        editor.setSelection({\n          startLineNumber: startLineNumber,\n          startColumn: 1,\n          endLineNumber: startLineNumber,\n          endColumn: 1\n        });\n      }\n    }\n  }\n\n}\n\nregisterEditorContribution(FoldingController.ID, FoldingController);\nregisterEditorAction(UnfoldAction);\nregisterEditorAction(UnFoldRecursivelyAction);\nregisterEditorAction(FoldAction);\nregisterEditorAction(FoldRecursivelyAction);\nregisterEditorAction(FoldAllAction);\nregisterEditorAction(UnfoldAllAction);\nregisterEditorAction(FoldAllBlockCommentsAction);\nregisterEditorAction(FoldAllRegionsAction);\nregisterEditorAction(UnfoldAllRegionsAction);\nregisterEditorAction(FoldAllRegionsExceptAction);\nregisterEditorAction(UnfoldAllRegionsExceptAction);\nregisterEditorAction(ToggleFoldAction);\nregisterEditorAction(GotoParentFoldAction);\nregisterEditorAction(GotoPreviousFoldAction);\nregisterEditorAction(GotoNextFoldAction);\n\nfor (let i = 1; i <= 7; i++) {\n  registerInstantiatedEditorAction(new FoldLevelAction({\n    id: FoldLevelAction.ID(i),\n    label: nls.localize('foldLevelAction.label', \"Fold Level {0}\", i),\n    alias: `Fold Level ${i}`,\n    precondition: CONTEXT_FOLDING_ENABLED,\n    kbOpts: {\n      kbExpr: EditorContextKeys.editorTextFocus,\n      primary: KeyChord(2048\n      /* CtrlCmd */\n      | 41\n      /* KeyK */\n      , 2048\n      /* CtrlCmd */\n      | 21\n      /* Digit0 */\n      + i),\n      weight: 100\n      /* EditorContrib */\n\n    }\n  }));\n}\n\nexport const foldBackgroundBackground = registerColor('editor.foldBackground', {\n  light: transparent(editorSelectionBackground, 0.3),\n  dark: transparent(editorSelectionBackground, 0.3),\n  hc: null\n}, nls.localize('foldBackgroundBackground', \"Background color behind folded ranges. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport const editorFoldForeground = registerColor('editorGutter.foldingControlForeground', {\n  dark: iconForeground,\n  light: iconForeground,\n  hc: iconForeground\n}, nls.localize('editorGutter.foldingControlForeground', 'Color of the folding control in the editor gutter.'));\nregisterThemingParticipant((theme, collector) => {\n  const foldBackground = theme.getColor(foldBackgroundBackground);\n\n  if (foldBackground) {\n    collector.addRule(`.monaco-editor .folded-background { background-color: ${foldBackground}; }`);\n  }\n\n  const editorFoldColor = theme.getColor(editorFoldForeground);\n\n  if (editorFoldColor) {\n    collector.addRule(`\n\t\t.monaco-editor .cldr${ThemeIcon.asCSSSelector(foldingExpandedIcon)},\n\t\t.monaco-editor .cldr${ThemeIcon.asCSSSelector(foldingCollapsedIcon)} {\n\t\t\tcolor: ${editorFoldColor} !important;\n\t\t}\n\t\t`);\n  }\n});","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/contrib/folding/browser/folding.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","createCancelablePromise","Delayer","RunOnceScheduler","onUnexpectedError","KeyChord","Disposable","DisposableStore","escapeRegExpCharacters","types","StableEditorScrollState","EditorAction","registerEditorAction","registerEditorContribution","registerInstantiatedEditorAction","EditorContextKeys","FoldingRangeKind","FoldingRangeProviderRegistry","ILanguageConfigurationService","FoldingModel","getNextFoldLine","getParentFoldLine","getPreviousFoldLine","setCollapseStateAtLevel","setCollapseStateForMatchingLines","setCollapseStateForRest","setCollapseStateForType","setCollapseStateLevelsDown","setCollapseStateLevelsUp","setCollapseStateUp","toggleCollapseState","HiddenRangeModel","IndentRangeProvider","ID_INIT_PROVIDER","InitializingRangeProvider","nls","IContextKeyService","RawContextKey","editorSelectionBackground","iconForeground","registerColor","transparent","registerThemingParticipant","ThemeIcon","foldingCollapsedIcon","FoldingDecorationProvider","foldingExpandedIcon","ID_SYNTAX_PROVIDER","SyntaxRangeProvider","INotificationService","Severity","ILanguageFeatureDebounceService","StopWatch","CONTEXT_FOLDING_ENABLED","FoldingController","constructor","editor","contextKeyService","languageConfigurationService","notificationService","languageFeatureDebounceService","_tooManyRegionsNotified","localToDispose","_register","options","getOptions","_isEnabled","get","_useFoldingProviders","_unfoldOnClickAfterEndOfLine","_restoringViewState","_currentModelHasFoldedImports","_foldingImportsByDefault","_maxFoldingRegions","updateDebounceInfo","for","min","foldingModel","hiddenRangeModel","rangeProvider","foldingRegionPromise","foldingStateMemento","foldingModelPromise","updateScheduler","cursorChangedScheduler","mouseDownInfo","foldingDecorationProvider","autoHideFoldingControls","showFoldingHighlights","foldingEnabled","bindTo","set","_notifyTooManyRegions","maxFoldingRegions","notify","severity","Warning","sticky","message","localize","onDidChangeModel","onModelChanged","onDidChangeConfiguration","e","hasChanged","triggerFoldingModelChanged","onFoldingStrategyChanged","getContribution","ID","saveViewState","model","getModel","isTooLargeForTokenization","collapsedRegions","isInitialized","getMemento","provider","id","undefined","lineCount","getLineCount","foldedImports","restoreViewState","state","applyMemento","getFoldingModel","then","clear","add","onDidChange","hr","onHiddenRangesChanges","revealCursor","onDidChangeModelLanguageConfiguration","onDidChangeModelContent","onDidChangeCursorPosition","onCursorPositionChanged","onMouseDown","onEditorMouseDown","onMouseUp","onEditorMouseUp","dispose","cancel","getRangeProvider","editorModel","foldingProviders","ordered","textModel","_a","notifyChangeModelContent","trigger","sw","token","compute","foldingRanges","scrollState","hasChanges","setCollapsedAllOfType","Imports","value","capture","selections","getSelections","selectionLineNumbers","map","s","startLineNumber","update","restore","newValue","elapsed","defaultDelay","err","hiddenRanges","adjustSelections","setSelections","setHiddenAreas","hasRanges","schedule","toToggle","selection","lineNumber","selectionStartLineNumber","isHidden","push","getAllRegionsAtLine","isCollapsed","reveal","getPosition","range","event","leftButton","middleButton","iconClicked","type","data","detail","offsetLeftInGutter","element","offsetLeft","gutterOffsetX","offsetX","isAfterLines","startColumn","getLineMaxColumn","region","getRegionAtLine","surrounding","altKey","filter","otherRegion","containedBy","toMaybeToggle","getRegionsInside","recursive","shiftKey","column","position","revealPositionInCenterIfOutsideViewport","FoldingAction","runEditorCommand","accessor","args","foldingController","reportTelemetry","invoke","getSelection","getStartPosition","getSelectedLines","getLineNumbers","selectionLines","l","run","_accessor","_editor","foldingArgumentsConstraint","isUndefined","isObject","foldingArgs","levels","isNumber","direction","isString","isArray","every","UnfoldAction","label","alias","precondition","kbOpts","kbExpr","editorTextFocus","primary","mac","weight","description","name","constraint","schema","_foldingController","lineNumbers","UnFoldRecursivelyAction","_args","Number","MAX_VALUE","FoldAction","ToggleFoldAction","selectedLines","FoldRecursivelyAction","FoldAllBlockCommentsAction","regions","hasTypes","Comment","comments","getLanguageConfiguration","getLanguageId","blockCommentStartToken","regExp","RegExp","FoldAllRegionsAction","Region","foldingRules","markers","start","UnfoldAllRegionsAction","FoldAllRegionsExceptAction","UnfoldAllRegionsExceptAction","FoldAllAction","UnfoldAllAction","FoldLevelAction","getFoldingLevel","parseInt","substr","ID_PREFIX","level","GotoParentFoldAction","setSelection","endLineNumber","endColumn","GotoPreviousFoldAction","GotoNextFoldAction","foldBackgroundBackground","light","dark","hc","editorFoldForeground","theme","collector","foldBackground","getColor","addRule","editorFoldColor","asCSSSelector"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { createCancelablePromise, Delayer, RunOnceScheduler } from '../../../../base/common/async.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { KeyChord } from '../../../../base/common/keyCodes.js';\nimport { Disposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { escapeRegExpCharacters } from '../../../../base/common/strings.js';\nimport * as types from '../../../../base/common/types.js';\nimport './folding.css';\nimport { StableEditorScrollState } from '../../../browser/stableEditorScroll.js';\nimport { EditorAction, registerEditorAction, registerEditorContribution, registerInstantiatedEditorAction } from '../../../browser/editorExtensions.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { FoldingRangeKind, FoldingRangeProviderRegistry } from '../../../common/languages.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { FoldingModel, getNextFoldLine, getParentFoldLine as getParentFoldLine, getPreviousFoldLine, setCollapseStateAtLevel, setCollapseStateForMatchingLines, setCollapseStateForRest, setCollapseStateForType, setCollapseStateLevelsDown, setCollapseStateLevelsUp, setCollapseStateUp, toggleCollapseState } from './foldingModel.js';\nimport { HiddenRangeModel } from './hiddenRangeModel.js';\nimport { IndentRangeProvider } from './indentRangeProvider.js';\nimport { ID_INIT_PROVIDER, InitializingRangeProvider } from './intializingRangeProvider.js';\nimport * as nls from '../../../../nls.js';\nimport { IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { editorSelectionBackground, iconForeground, registerColor, transparent } from '../../../../platform/theme/common/colorRegistry.js';\nimport { registerThemingParticipant, ThemeIcon } from '../../../../platform/theme/common/themeService.js';\nimport { foldingCollapsedIcon, FoldingDecorationProvider, foldingExpandedIcon } from './foldingDecorations.js';\nimport { ID_SYNTAX_PROVIDER, SyntaxRangeProvider } from './syntaxRangeProvider.js';\nimport { INotificationService } from '../../../../platform/notification/common/notification.js';\nimport Severity from '../../../../base/common/severity.js';\nimport { ILanguageFeatureDebounceService } from '../../../common/services/languageFeatureDebounce.js';\nimport { StopWatch } from '../../../../base/common/stopwatch.js';\nconst CONTEXT_FOLDING_ENABLED = new RawContextKey('foldingEnabled', false);\nlet FoldingController = class FoldingController extends Disposable {\n    constructor(editor, contextKeyService, languageConfigurationService, notificationService, languageFeatureDebounceService) {\n        super();\n        this.contextKeyService = contextKeyService;\n        this.languageConfigurationService = languageConfigurationService;\n        this._tooManyRegionsNotified = false;\n        this.localToDispose = this._register(new DisposableStore());\n        this.editor = editor;\n        const options = this.editor.getOptions();\n        this._isEnabled = options.get(37 /* folding */);\n        this._useFoldingProviders = options.get(38 /* foldingStrategy */) !== 'indentation';\n        this._unfoldOnClickAfterEndOfLine = options.get(42 /* unfoldOnClickAfterEndOfLine */);\n        this._restoringViewState = false;\n        this._currentModelHasFoldedImports = false;\n        this._foldingImportsByDefault = options.get(40 /* foldingImportsByDefault */);\n        this._maxFoldingRegions = options.get(41 /* foldingMaximumRegions */);\n        this.updateDebounceInfo = languageFeatureDebounceService.for(FoldingRangeProviderRegistry, 'Folding', { min: 200 });\n        this.foldingModel = null;\n        this.hiddenRangeModel = null;\n        this.rangeProvider = null;\n        this.foldingRegionPromise = null;\n        this.foldingStateMemento = null;\n        this.foldingModelPromise = null;\n        this.updateScheduler = null;\n        this.cursorChangedScheduler = null;\n        this.mouseDownInfo = null;\n        this.foldingDecorationProvider = new FoldingDecorationProvider(editor);\n        this.foldingDecorationProvider.autoHideFoldingControls = options.get(99 /* showFoldingControls */) === 'mouseover';\n        this.foldingDecorationProvider.showFoldingHighlights = options.get(39 /* foldingHighlight */);\n        this.foldingEnabled = CONTEXT_FOLDING_ENABLED.bindTo(this.contextKeyService);\n        this.foldingEnabled.set(this._isEnabled);\n        this._notifyTooManyRegions = (maxFoldingRegions) => {\n            // Message will display once per time vscode runs. Once per file would be tricky.\n            if (!this._tooManyRegionsNotified) {\n                notificationService.notify({\n                    severity: Severity.Warning,\n                    sticky: true,\n                    message: nls.localize('maximum fold ranges', \"The number of foldable regions is limited to a maximum of {0}. Increase configuration option ['Folding Maximum Regions'](command:workbench.action.openSettings?[\\\"editor.foldingMaximumRegions\\\"]) to enable more.\", maxFoldingRegions)\n                });\n                this._tooManyRegionsNotified = true;\n            }\n        };\n        this._register(this.editor.onDidChangeModel(() => this.onModelChanged()));\n        this._register(this.editor.onDidChangeConfiguration((e) => {\n            if (e.hasChanged(37 /* folding */)) {\n                this._isEnabled = this.editor.getOptions().get(37 /* folding */);\n                this.foldingEnabled.set(this._isEnabled);\n                this.onModelChanged();\n            }\n            if (e.hasChanged(41 /* foldingMaximumRegions */)) {\n                this._maxFoldingRegions = this.editor.getOptions().get(41 /* foldingMaximumRegions */);\n                this._tooManyRegionsNotified = false;\n                this.onModelChanged();\n            }\n            if (e.hasChanged(99 /* showFoldingControls */) || e.hasChanged(39 /* foldingHighlight */)) {\n                const options = this.editor.getOptions();\n                this.foldingDecorationProvider.autoHideFoldingControls = options.get(99 /* showFoldingControls */) === 'mouseover';\n                this.foldingDecorationProvider.showFoldingHighlights = options.get(39 /* foldingHighlight */);\n                this.triggerFoldingModelChanged();\n            }\n            if (e.hasChanged(38 /* foldingStrategy */)) {\n                this._useFoldingProviders = this.editor.getOptions().get(38 /* foldingStrategy */) !== 'indentation';\n                this.onFoldingStrategyChanged();\n            }\n            if (e.hasChanged(42 /* unfoldOnClickAfterEndOfLine */)) {\n                this._unfoldOnClickAfterEndOfLine = this.editor.getOptions().get(42 /* unfoldOnClickAfterEndOfLine */);\n            }\n            if (e.hasChanged(40 /* foldingImportsByDefault */)) {\n                this._foldingImportsByDefault = this.editor.getOptions().get(40 /* foldingImportsByDefault */);\n            }\n        }));\n        this.onModelChanged();\n    }\n    static get(editor) {\n        return editor.getContribution(FoldingController.ID);\n    }\n    /**\n     * Store view state.\n     */\n    saveViewState() {\n        let model = this.editor.getModel();\n        if (!model || !this._isEnabled || model.isTooLargeForTokenization()) {\n            return {};\n        }\n        if (this.foldingModel) { // disposed ?\n            let collapsedRegions = this.foldingModel.isInitialized ? this.foldingModel.getMemento() : this.hiddenRangeModel.getMemento();\n            let provider = this.rangeProvider ? this.rangeProvider.id : undefined;\n            return { collapsedRegions, lineCount: model.getLineCount(), provider, foldedImports: this._currentModelHasFoldedImports };\n        }\n        return undefined;\n    }\n    /**\n     * Restore view state.\n     */\n    restoreViewState(state) {\n        let model = this.editor.getModel();\n        if (!model || !this._isEnabled || model.isTooLargeForTokenization() || !this.hiddenRangeModel) {\n            return;\n        }\n        if (!state || state.lineCount !== model.getLineCount()) {\n            return;\n        }\n        this._currentModelHasFoldedImports = !!state.foldedImports;\n        if (!state.collapsedRegions) {\n            return;\n        }\n        if (state.provider === ID_SYNTAX_PROVIDER || state.provider === ID_INIT_PROVIDER) {\n            this.foldingStateMemento = state;\n        }\n        const collapsedRegions = state.collapsedRegions;\n        // set the hidden ranges right away, before waiting for the folding model.\n        if (this.hiddenRangeModel.applyMemento(collapsedRegions)) {\n            const foldingModel = this.getFoldingModel();\n            if (foldingModel) {\n                foldingModel.then(foldingModel => {\n                    if (foldingModel) {\n                        this._restoringViewState = true;\n                        try {\n                            foldingModel.applyMemento(collapsedRegions);\n                        }\n                        finally {\n                            this._restoringViewState = false;\n                        }\n                    }\n                }).then(undefined, onUnexpectedError);\n            }\n        }\n    }\n    onModelChanged() {\n        this.localToDispose.clear();\n        let model = this.editor.getModel();\n        if (!this._isEnabled || !model || model.isTooLargeForTokenization()) {\n            // huge files get no view model, so they cannot support hidden areas\n            return;\n        }\n        this._currentModelHasFoldedImports = false;\n        this.foldingModel = new FoldingModel(model, this.foldingDecorationProvider);\n        this.localToDispose.add(this.foldingModel);\n        this.hiddenRangeModel = new HiddenRangeModel(this.foldingModel);\n        this.localToDispose.add(this.hiddenRangeModel);\n        this.localToDispose.add(this.hiddenRangeModel.onDidChange(hr => this.onHiddenRangesChanges(hr)));\n        this.updateScheduler = new Delayer(this.updateDebounceInfo.get(model));\n        this.cursorChangedScheduler = new RunOnceScheduler(() => this.revealCursor(), 200);\n        this.localToDispose.add(this.cursorChangedScheduler);\n        this.localToDispose.add(FoldingRangeProviderRegistry.onDidChange(() => this.onFoldingStrategyChanged()));\n        this.localToDispose.add(this.editor.onDidChangeModelLanguageConfiguration(() => this.onFoldingStrategyChanged())); // covers model language changes as well\n        this.localToDispose.add(this.editor.onDidChangeModelContent(e => this.onDidChangeModelContent(e)));\n        this.localToDispose.add(this.editor.onDidChangeCursorPosition(() => this.onCursorPositionChanged()));\n        this.localToDispose.add(this.editor.onMouseDown(e => this.onEditorMouseDown(e)));\n        this.localToDispose.add(this.editor.onMouseUp(e => this.onEditorMouseUp(e)));\n        this.localToDispose.add({\n            dispose: () => {\n                if (this.foldingRegionPromise) {\n                    this.foldingRegionPromise.cancel();\n                    this.foldingRegionPromise = null;\n                }\n                if (this.updateScheduler) {\n                    this.updateScheduler.cancel();\n                }\n                this.updateScheduler = null;\n                this.foldingModel = null;\n                this.foldingModelPromise = null;\n                this.hiddenRangeModel = null;\n                this.cursorChangedScheduler = null;\n                this.foldingStateMemento = null;\n                if (this.rangeProvider) {\n                    this.rangeProvider.dispose();\n                }\n                this.rangeProvider = null;\n            }\n        });\n        this.triggerFoldingModelChanged();\n    }\n    onFoldingStrategyChanged() {\n        if (this.rangeProvider) {\n            this.rangeProvider.dispose();\n        }\n        this.rangeProvider = null;\n        this.triggerFoldingModelChanged();\n    }\n    getRangeProvider(editorModel) {\n        if (this.rangeProvider) {\n            return this.rangeProvider;\n        }\n        this.rangeProvider = new IndentRangeProvider(editorModel, this.languageConfigurationService, this._maxFoldingRegions); // fallback\n        if (this._useFoldingProviders && this.foldingModel) {\n            let foldingProviders = FoldingRangeProviderRegistry.ordered(this.foldingModel.textModel);\n            if (foldingProviders.length === 0 && this.foldingStateMemento && this.foldingStateMemento.collapsedRegions) {\n                const rangeProvider = this.rangeProvider = new InitializingRangeProvider(editorModel, this.foldingStateMemento.collapsedRegions, () => {\n                    // if after 30 the InitializingRangeProvider is still not replaced, force a refresh\n                    this.foldingStateMemento = null;\n                    this.onFoldingStrategyChanged();\n                }, 30000);\n                return rangeProvider; // keep memento in case there are still no foldingProviders on the next request.\n            }\n            else if (foldingProviders.length > 0) {\n                this.rangeProvider = new SyntaxRangeProvider(editorModel, foldingProviders, () => this.triggerFoldingModelChanged(), this._maxFoldingRegions);\n            }\n        }\n        this.foldingStateMemento = null;\n        return this.rangeProvider;\n    }\n    getFoldingModel() {\n        return this.foldingModelPromise;\n    }\n    onDidChangeModelContent(e) {\n        var _a;\n        (_a = this.hiddenRangeModel) === null || _a === void 0 ? void 0 : _a.notifyChangeModelContent(e);\n        this.triggerFoldingModelChanged();\n    }\n    triggerFoldingModelChanged() {\n        if (this.updateScheduler) {\n            if (this.foldingRegionPromise) {\n                this.foldingRegionPromise.cancel();\n                this.foldingRegionPromise = null;\n            }\n            this.foldingModelPromise = this.updateScheduler.trigger(() => {\n                const foldingModel = this.foldingModel;\n                if (!foldingModel) { // null if editor has been disposed, or folding turned off\n                    return null;\n                }\n                const sw = new StopWatch(true);\n                const provider = this.getRangeProvider(foldingModel.textModel);\n                let foldingRegionPromise = this.foldingRegionPromise = createCancelablePromise(token => provider.compute(token, this._notifyTooManyRegions));\n                return foldingRegionPromise.then(foldingRanges => {\n                    if (foldingRanges && foldingRegionPromise === this.foldingRegionPromise) { // new request or cancelled in the meantime?\n                        let scrollState;\n                        if (this._foldingImportsByDefault && !this._currentModelHasFoldedImports) {\n                            const hasChanges = foldingRanges.setCollapsedAllOfType(FoldingRangeKind.Imports.value, true);\n                            if (hasChanges) {\n                                scrollState = StableEditorScrollState.capture(this.editor);\n                                this._currentModelHasFoldedImports = hasChanges;\n                            }\n                        }\n                        // some cursors might have moved into hidden regions, make sure they are in expanded regions\n                        let selections = this.editor.getSelections();\n                        let selectionLineNumbers = selections ? selections.map(s => s.startLineNumber) : [];\n                        foldingModel.update(foldingRanges, selectionLineNumbers);\n                        if (scrollState) {\n                            scrollState.restore(this.editor);\n                        }\n                        // update debounce info\n                        const newValue = this.updateDebounceInfo.update(foldingModel.textModel, sw.elapsed());\n                        if (this.updateScheduler) {\n                            this.updateScheduler.defaultDelay = newValue;\n                        }\n                    }\n                    return foldingModel;\n                });\n            }).then(undefined, (err) => {\n                onUnexpectedError(err);\n                return null;\n            });\n        }\n    }\n    onHiddenRangesChanges(hiddenRanges) {\n        if (this.hiddenRangeModel && hiddenRanges.length && !this._restoringViewState) {\n            let selections = this.editor.getSelections();\n            if (selections) {\n                if (this.hiddenRangeModel.adjustSelections(selections)) {\n                    this.editor.setSelections(selections);\n                }\n            }\n        }\n        this.editor.setHiddenAreas(hiddenRanges);\n    }\n    onCursorPositionChanged() {\n        if (this.hiddenRangeModel && this.hiddenRangeModel.hasRanges()) {\n            this.cursorChangedScheduler.schedule();\n        }\n    }\n    revealCursor() {\n        const foldingModel = this.getFoldingModel();\n        if (!foldingModel) {\n            return;\n        }\n        foldingModel.then(foldingModel => {\n            if (foldingModel) {\n                let selections = this.editor.getSelections();\n                if (selections && selections.length > 0) {\n                    let toToggle = [];\n                    for (let selection of selections) {\n                        let lineNumber = selection.selectionStartLineNumber;\n                        if (this.hiddenRangeModel && this.hiddenRangeModel.isHidden(lineNumber)) {\n                            toToggle.push(...foldingModel.getAllRegionsAtLine(lineNumber, r => r.isCollapsed && lineNumber > r.startLineNumber));\n                        }\n                    }\n                    if (toToggle.length) {\n                        foldingModel.toggleCollapseState(toToggle);\n                        this.reveal(selections[0].getPosition());\n                    }\n                }\n            }\n        }).then(undefined, onUnexpectedError);\n    }\n    onEditorMouseDown(e) {\n        this.mouseDownInfo = null;\n        if (!this.hiddenRangeModel || !e.target || !e.target.range) {\n            return;\n        }\n        if (!e.event.leftButton && !e.event.middleButton) {\n            return;\n        }\n        const range = e.target.range;\n        let iconClicked = false;\n        switch (e.target.type) {\n            case 4 /* GUTTER_LINE_DECORATIONS */: {\n                const data = e.target.detail;\n                const offsetLeftInGutter = e.target.element.offsetLeft;\n                const gutterOffsetX = data.offsetX - offsetLeftInGutter;\n                // const gutterOffsetX = data.offsetX - data.glyphMarginWidth - data.lineNumbersWidth - data.glyphMarginLeft;\n                // TODO@joao TODO@alex TODO@martin this is such that we don't collide with dirty diff\n                if (gutterOffsetX < 5) { // the whitespace between the border and the real folding icon border is 5px\n                    return;\n                }\n                iconClicked = true;\n                break;\n            }\n            case 7 /* CONTENT_EMPTY */: {\n                if (this._unfoldOnClickAfterEndOfLine && this.hiddenRangeModel.hasRanges()) {\n                    const data = e.target.detail;\n                    if (!data.isAfterLines) {\n                        break;\n                    }\n                }\n                return;\n            }\n            case 6 /* CONTENT_TEXT */: {\n                if (this.hiddenRangeModel.hasRanges()) {\n                    let model = this.editor.getModel();\n                    if (model && range.startColumn === model.getLineMaxColumn(range.startLineNumber)) {\n                        break;\n                    }\n                }\n                return;\n            }\n            default:\n                return;\n        }\n        this.mouseDownInfo = { lineNumber: range.startLineNumber, iconClicked };\n    }\n    onEditorMouseUp(e) {\n        const foldingModel = this.getFoldingModel();\n        if (!foldingModel || !this.mouseDownInfo || !e.target) {\n            return;\n        }\n        let lineNumber = this.mouseDownInfo.lineNumber;\n        let iconClicked = this.mouseDownInfo.iconClicked;\n        let range = e.target.range;\n        if (!range || range.startLineNumber !== lineNumber) {\n            return;\n        }\n        if (iconClicked) {\n            if (e.target.type !== 4 /* GUTTER_LINE_DECORATIONS */) {\n                return;\n            }\n        }\n        else {\n            let model = this.editor.getModel();\n            if (!model || range.startColumn !== model.getLineMaxColumn(lineNumber)) {\n                return;\n            }\n        }\n        foldingModel.then(foldingModel => {\n            if (foldingModel) {\n                let region = foldingModel.getRegionAtLine(lineNumber);\n                if (region && region.startLineNumber === lineNumber) {\n                    let isCollapsed = region.isCollapsed;\n                    if (iconClicked || isCollapsed) {\n                        let surrounding = e.event.altKey;\n                        let toToggle = [];\n                        if (surrounding) {\n                            let filter = (otherRegion) => !otherRegion.containedBy(region) && !region.containedBy(otherRegion);\n                            let toMaybeToggle = foldingModel.getRegionsInside(null, filter);\n                            for (const r of toMaybeToggle) {\n                                if (r.isCollapsed) {\n                                    toToggle.push(r);\n                                }\n                            }\n                            // if any surrounding regions are folded, unfold those. Otherwise, fold all surrounding\n                            if (toToggle.length === 0) {\n                                toToggle = toMaybeToggle;\n                            }\n                        }\n                        else {\n                            let recursive = e.event.middleButton || e.event.shiftKey;\n                            if (recursive) {\n                                for (const r of foldingModel.getRegionsInside(region)) {\n                                    if (r.isCollapsed === isCollapsed) {\n                                        toToggle.push(r);\n                                    }\n                                }\n                            }\n                            // when recursive, first only collapse all children. If all are already folded or there are no children, also fold parent.\n                            if (isCollapsed || !recursive || toToggle.length === 0) {\n                                toToggle.push(region);\n                            }\n                        }\n                        foldingModel.toggleCollapseState(toToggle);\n                        this.reveal({ lineNumber, column: 1 });\n                    }\n                }\n            }\n        }).then(undefined, onUnexpectedError);\n    }\n    reveal(position) {\n        this.editor.revealPositionInCenterIfOutsideViewport(position, 0 /* Smooth */);\n    }\n};\nFoldingController.ID = 'editor.contrib.folding';\nFoldingController = __decorate([\n    __param(1, IContextKeyService),\n    __param(2, ILanguageConfigurationService),\n    __param(3, INotificationService),\n    __param(4, ILanguageFeatureDebounceService)\n], FoldingController);\nexport { FoldingController };\nclass FoldingAction extends EditorAction {\n    runEditorCommand(accessor, editor, args) {\n        const languageConfigurationService = accessor.get(ILanguageConfigurationService);\n        const foldingController = FoldingController.get(editor);\n        if (!foldingController) {\n            return;\n        }\n        const foldingModelPromise = foldingController.getFoldingModel();\n        if (foldingModelPromise) {\n            this.reportTelemetry(accessor, editor);\n            return foldingModelPromise.then(foldingModel => {\n                if (foldingModel) {\n                    this.invoke(foldingController, foldingModel, editor, args, languageConfigurationService);\n                    const selection = editor.getSelection();\n                    if (selection) {\n                        foldingController.reveal(selection.getStartPosition());\n                    }\n                }\n            });\n        }\n    }\n    getSelectedLines(editor) {\n        let selections = editor.getSelections();\n        return selections ? selections.map(s => s.startLineNumber) : [];\n    }\n    getLineNumbers(args, editor) {\n        if (args && args.selectionLines) {\n            return args.selectionLines.map(l => l + 1); // to 0-bases line numbers\n        }\n        return this.getSelectedLines(editor);\n    }\n    run(_accessor, _editor) {\n    }\n}\nfunction foldingArgumentsConstraint(args) {\n    if (!types.isUndefined(args)) {\n        if (!types.isObject(args)) {\n            return false;\n        }\n        const foldingArgs = args;\n        if (!types.isUndefined(foldingArgs.levels) && !types.isNumber(foldingArgs.levels)) {\n            return false;\n        }\n        if (!types.isUndefined(foldingArgs.direction) && !types.isString(foldingArgs.direction)) {\n            return false;\n        }\n        if (!types.isUndefined(foldingArgs.selectionLines) && (!types.isArray(foldingArgs.selectionLines) || !foldingArgs.selectionLines.every(types.isNumber))) {\n            return false;\n        }\n    }\n    return true;\n}\nclass UnfoldAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.unfold',\n            label: nls.localize('unfoldAction.label', \"Unfold\"),\n            alias: 'Unfold',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 89 /* BracketRight */,\n                mac: {\n                    primary: 2048 /* CtrlCmd */ | 512 /* Alt */ | 89 /* BracketRight */\n                },\n                weight: 100 /* EditorContrib */\n            },\n            description: {\n                description: 'Unfold the content in the editor',\n                args: [\n                    {\n                        name: 'Unfold editor argument',\n                        description: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t\t* 'levels': Number of levels to unfold. If not set, defaults to 1.\n\t\t\t\t\t\t* 'direction': If 'up', unfold given number of levels up otherwise unfolds down.\n\t\t\t\t\t\t* 'selectionLines': The start lines (0-based) of the editor selections to apply the unfold action to. If not set, the active selection(s) will be used.\n\t\t\t\t\t\t`,\n                        constraint: foldingArgumentsConstraint,\n                        schema: {\n                            'type': 'object',\n                            'properties': {\n                                'levels': {\n                                    'type': 'number',\n                                    'default': 1\n                                },\n                                'direction': {\n                                    'type': 'string',\n                                    'enum': ['up', 'down'],\n                                    'default': 'down'\n                                },\n                                'selectionLines': {\n                                    'type': 'array',\n                                    'items': {\n                                        'type': 'number'\n                                    }\n                                }\n                            }\n                        }\n                    }\n                ]\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor, args) {\n        let levels = args && args.levels || 1;\n        let lineNumbers = this.getLineNumbers(args, editor);\n        if (args && args.direction === 'up') {\n            setCollapseStateLevelsUp(foldingModel, false, levels, lineNumbers);\n        }\n        else {\n            setCollapseStateLevelsDown(foldingModel, false, levels, lineNumbers);\n        }\n    }\n}\nclass UnFoldRecursivelyAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.unfoldRecursively',\n            label: nls.localize('unFoldRecursivelyAction.label', \"Unfold Recursively\"),\n            alias: 'Unfold Recursively',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* CtrlCmd */ | 41 /* KeyK */, 2048 /* CtrlCmd */ | 89 /* BracketRight */),\n                weight: 100 /* EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor, _args) {\n        setCollapseStateLevelsDown(foldingModel, false, Number.MAX_VALUE, this.getSelectedLines(editor));\n    }\n}\nclass FoldAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.fold',\n            label: nls.localize('foldAction.label', \"Fold\"),\n            alias: 'Fold',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 87 /* BracketLeft */,\n                mac: {\n                    primary: 2048 /* CtrlCmd */ | 512 /* Alt */ | 87 /* BracketLeft */\n                },\n                weight: 100 /* EditorContrib */\n            },\n            description: {\n                description: 'Fold the content in the editor',\n                args: [\n                    {\n                        name: 'Fold editor argument',\n                        description: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t\t\t* 'levels': Number of levels to fold.\n\t\t\t\t\t\t\t* 'direction': If 'up', folds given number of levels up otherwise folds down.\n\t\t\t\t\t\t\t* 'selectionLines': The start lines (0-based) of the editor selections to apply the fold action to. If not set, the active selection(s) will be used.\n\t\t\t\t\t\t\tIf no levels or direction is set, folds the region at the locations or if already collapsed, the first uncollapsed parent instead.\n\t\t\t\t\t\t`,\n                        constraint: foldingArgumentsConstraint,\n                        schema: {\n                            'type': 'object',\n                            'properties': {\n                                'levels': {\n                                    'type': 'number',\n                                },\n                                'direction': {\n                                    'type': 'string',\n                                    'enum': ['up', 'down'],\n                                },\n                                'selectionLines': {\n                                    'type': 'array',\n                                    'items': {\n                                        'type': 'number'\n                                    }\n                                }\n                            }\n                        }\n                    }\n                ]\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor, args) {\n        let lineNumbers = this.getLineNumbers(args, editor);\n        const levels = args && args.levels;\n        const direction = args && args.direction;\n        if (typeof levels !== 'number' && typeof direction !== 'string') {\n            // fold the region at the location or if already collapsed, the first uncollapsed parent instead.\n            setCollapseStateUp(foldingModel, true, lineNumbers);\n        }\n        else {\n            if (direction === 'up') {\n                setCollapseStateLevelsUp(foldingModel, true, levels || 1, lineNumbers);\n            }\n            else {\n                setCollapseStateLevelsDown(foldingModel, true, levels || 1, lineNumbers);\n            }\n        }\n    }\n}\nclass ToggleFoldAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.toggleFold',\n            label: nls.localize('toggleFoldAction.label', \"Toggle Fold\"),\n            alias: 'Toggle Fold',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* CtrlCmd */ | 41 /* KeyK */, 2048 /* CtrlCmd */ | 42 /* KeyL */),\n                weight: 100 /* EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor) {\n        let selectedLines = this.getSelectedLines(editor);\n        toggleCollapseState(foldingModel, 1, selectedLines);\n    }\n}\nclass FoldRecursivelyAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.foldRecursively',\n            label: nls.localize('foldRecursivelyAction.label', \"Fold Recursively\"),\n            alias: 'Fold Recursively',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* CtrlCmd */ | 41 /* KeyK */, 2048 /* CtrlCmd */ | 87 /* BracketLeft */),\n                weight: 100 /* EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor) {\n        let selectedLines = this.getSelectedLines(editor);\n        setCollapseStateLevelsDown(foldingModel, true, Number.MAX_VALUE, selectedLines);\n    }\n}\nclass FoldAllBlockCommentsAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.foldAllBlockComments',\n            label: nls.localize('foldAllBlockComments.label', \"Fold All Block Comments\"),\n            alias: 'Fold All Block Comments',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* CtrlCmd */ | 41 /* KeyK */, 2048 /* CtrlCmd */ | 85 /* Slash */),\n                weight: 100 /* EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor, args, languageConfigurationService) {\n        if (foldingModel.regions.hasTypes()) {\n            setCollapseStateForType(foldingModel, FoldingRangeKind.Comment.value, true);\n        }\n        else {\n            const editorModel = editor.getModel();\n            if (!editorModel) {\n                return;\n            }\n            const comments = languageConfigurationService.getLanguageConfiguration(editorModel.getLanguageId()).comments;\n            if (comments && comments.blockCommentStartToken) {\n                let regExp = new RegExp('^\\\\s*' + escapeRegExpCharacters(comments.blockCommentStartToken));\n                setCollapseStateForMatchingLines(foldingModel, regExp, true);\n            }\n        }\n    }\n}\nclass FoldAllRegionsAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.foldAllMarkerRegions',\n            label: nls.localize('foldAllMarkerRegions.label', \"Fold All Regions\"),\n            alias: 'Fold All Regions',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* CtrlCmd */ | 41 /* KeyK */, 2048 /* CtrlCmd */ | 29 /* Digit8 */),\n                weight: 100 /* EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor, args, languageConfigurationService) {\n        if (foldingModel.regions.hasTypes()) {\n            setCollapseStateForType(foldingModel, FoldingRangeKind.Region.value, true);\n        }\n        else {\n            const editorModel = editor.getModel();\n            if (!editorModel) {\n                return;\n            }\n            const foldingRules = languageConfigurationService.getLanguageConfiguration(editorModel.getLanguageId()).foldingRules;\n            if (foldingRules && foldingRules.markers && foldingRules.markers.start) {\n                let regExp = new RegExp(foldingRules.markers.start);\n                setCollapseStateForMatchingLines(foldingModel, regExp, true);\n            }\n        }\n    }\n}\nclass UnfoldAllRegionsAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.unfoldAllMarkerRegions',\n            label: nls.localize('unfoldAllMarkerRegions.label', \"Unfold All Regions\"),\n            alias: 'Unfold All Regions',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* CtrlCmd */ | 41 /* KeyK */, 2048 /* CtrlCmd */ | 30 /* Digit9 */),\n                weight: 100 /* EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor, args, languageConfigurationService) {\n        if (foldingModel.regions.hasTypes()) {\n            setCollapseStateForType(foldingModel, FoldingRangeKind.Region.value, false);\n        }\n        else {\n            const editorModel = editor.getModel();\n            if (!editorModel) {\n                return;\n            }\n            const foldingRules = languageConfigurationService.getLanguageConfiguration(editorModel.getLanguageId()).foldingRules;\n            if (foldingRules && foldingRules.markers && foldingRules.markers.start) {\n                let regExp = new RegExp(foldingRules.markers.start);\n                setCollapseStateForMatchingLines(foldingModel, regExp, false);\n            }\n        }\n    }\n}\nclass FoldAllRegionsExceptAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.foldAllExcept',\n            label: nls.localize('foldAllExcept.label', \"Fold All Regions Except Selected\"),\n            alias: 'Fold All Regions Except Selected',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* CtrlCmd */ | 41 /* KeyK */, 2048 /* CtrlCmd */ | 83 /* Minus */),\n                weight: 100 /* EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor) {\n        let selectedLines = this.getSelectedLines(editor);\n        setCollapseStateForRest(foldingModel, true, selectedLines);\n    }\n}\nclass UnfoldAllRegionsExceptAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.unfoldAllExcept',\n            label: nls.localize('unfoldAllExcept.label', \"Unfold All Regions Except Selected\"),\n            alias: 'Unfold All Regions Except Selected',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* CtrlCmd */ | 41 /* KeyK */, 2048 /* CtrlCmd */ | 81 /* Equal */),\n                weight: 100 /* EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor) {\n        let selectedLines = this.getSelectedLines(editor);\n        setCollapseStateForRest(foldingModel, false, selectedLines);\n    }\n}\nclass FoldAllAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.foldAll',\n            label: nls.localize('foldAllAction.label', \"Fold All\"),\n            alias: 'Fold All',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* CtrlCmd */ | 41 /* KeyK */, 2048 /* CtrlCmd */ | 21 /* Digit0 */),\n                weight: 100 /* EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, _editor) {\n        setCollapseStateLevelsDown(foldingModel, true);\n    }\n}\nclass UnfoldAllAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.unfoldAll',\n            label: nls.localize('unfoldAllAction.label', \"Unfold All\"),\n            alias: 'Unfold All',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* CtrlCmd */ | 41 /* KeyK */, 2048 /* CtrlCmd */ | 40 /* KeyJ */),\n                weight: 100 /* EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, _editor) {\n        setCollapseStateLevelsDown(foldingModel, false);\n    }\n}\nclass FoldLevelAction extends FoldingAction {\n    getFoldingLevel() {\n        return parseInt(this.id.substr(FoldLevelAction.ID_PREFIX.length));\n    }\n    invoke(_foldingController, foldingModel, editor) {\n        setCollapseStateAtLevel(foldingModel, this.getFoldingLevel(), true, this.getSelectedLines(editor));\n    }\n}\nFoldLevelAction.ID_PREFIX = 'editor.foldLevel';\nFoldLevelAction.ID = (level) => FoldLevelAction.ID_PREFIX + level;\n/** Action to go to the parent fold of current line */\nclass GotoParentFoldAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.gotoParentFold',\n            label: nls.localize('gotoParentFold.label', \"Go to Parent Fold\"),\n            alias: 'Go to Parent Fold',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                weight: 100 /* EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor) {\n        let selectedLines = this.getSelectedLines(editor);\n        if (selectedLines.length > 0) {\n            let startLineNumber = getParentFoldLine(selectedLines[0], foldingModel);\n            if (startLineNumber !== null) {\n                editor.setSelection({\n                    startLineNumber: startLineNumber,\n                    startColumn: 1,\n                    endLineNumber: startLineNumber,\n                    endColumn: 1\n                });\n            }\n        }\n    }\n}\n/** Action to go to the previous fold of current line */\nclass GotoPreviousFoldAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.gotoPreviousFold',\n            label: nls.localize('gotoPreviousFold.label', \"Go to Previous Folding Range\"),\n            alias: 'Go to Previous Folding Range',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                weight: 100 /* EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor) {\n        let selectedLines = this.getSelectedLines(editor);\n        if (selectedLines.length > 0) {\n            let startLineNumber = getPreviousFoldLine(selectedLines[0], foldingModel);\n            if (startLineNumber !== null) {\n                editor.setSelection({\n                    startLineNumber: startLineNumber,\n                    startColumn: 1,\n                    endLineNumber: startLineNumber,\n                    endColumn: 1\n                });\n            }\n        }\n    }\n}\n/** Action to go to the next fold of current line */\nclass GotoNextFoldAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.gotoNextFold',\n            label: nls.localize('gotoNextFold.label', \"Go to Next Folding Range\"),\n            alias: 'Go to Next Folding Range',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                weight: 100 /* EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor) {\n        let selectedLines = this.getSelectedLines(editor);\n        if (selectedLines.length > 0) {\n            let startLineNumber = getNextFoldLine(selectedLines[0], foldingModel);\n            if (startLineNumber !== null) {\n                editor.setSelection({\n                    startLineNumber: startLineNumber,\n                    startColumn: 1,\n                    endLineNumber: startLineNumber,\n                    endColumn: 1\n                });\n            }\n        }\n    }\n}\nregisterEditorContribution(FoldingController.ID, FoldingController);\nregisterEditorAction(UnfoldAction);\nregisterEditorAction(UnFoldRecursivelyAction);\nregisterEditorAction(FoldAction);\nregisterEditorAction(FoldRecursivelyAction);\nregisterEditorAction(FoldAllAction);\nregisterEditorAction(UnfoldAllAction);\nregisterEditorAction(FoldAllBlockCommentsAction);\nregisterEditorAction(FoldAllRegionsAction);\nregisterEditorAction(UnfoldAllRegionsAction);\nregisterEditorAction(FoldAllRegionsExceptAction);\nregisterEditorAction(UnfoldAllRegionsExceptAction);\nregisterEditorAction(ToggleFoldAction);\nregisterEditorAction(GotoParentFoldAction);\nregisterEditorAction(GotoPreviousFoldAction);\nregisterEditorAction(GotoNextFoldAction);\nfor (let i = 1; i <= 7; i++) {\n    registerInstantiatedEditorAction(new FoldLevelAction({\n        id: FoldLevelAction.ID(i),\n        label: nls.localize('foldLevelAction.label', \"Fold Level {0}\", i),\n        alias: `Fold Level ${i}`,\n        precondition: CONTEXT_FOLDING_ENABLED,\n        kbOpts: {\n            kbExpr: EditorContextKeys.editorTextFocus,\n            primary: KeyChord(2048 /* CtrlCmd */ | 41 /* KeyK */, 2048 /* CtrlCmd */ | (21 /* Digit0 */ + i)),\n            weight: 100 /* EditorContrib */\n        }\n    }));\n}\nexport const foldBackgroundBackground = registerColor('editor.foldBackground', { light: transparent(editorSelectionBackground, 0.3), dark: transparent(editorSelectionBackground, 0.3), hc: null }, nls.localize('foldBackgroundBackground', \"Background color behind folded ranges. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport const editorFoldForeground = registerColor('editorGutter.foldingControlForeground', { dark: iconForeground, light: iconForeground, hc: iconForeground }, nls.localize('editorGutter.foldingControlForeground', 'Color of the folding control in the editor gutter.'));\nregisterThemingParticipant((theme, collector) => {\n    const foldBackground = theme.getColor(foldBackgroundBackground);\n    if (foldBackground) {\n        collector.addRule(`.monaco-editor .folded-background { background-color: ${foldBackground}; }`);\n    }\n    const editorFoldColor = theme.getColor(editorFoldForeground);\n    if (editorFoldColor) {\n        collector.addRule(`\n\t\t.monaco-editor .cldr${ThemeIcon.asCSSSelector(foldingExpandedIcon)},\n\t\t.monaco-editor .cldr${ThemeIcon.asCSSSelector(foldingCollapsedIcon)} {\n\t\t\tcolor: ${editorFoldColor} !important;\n\t\t}\n\t\t`);\n    }\n});\n"]},"metadata":{},"sourceType":"module"}