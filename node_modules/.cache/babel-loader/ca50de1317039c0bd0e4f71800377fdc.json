{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class ColorZone {\n  constructor(from, to, colorId) {\n    this._colorZoneBrand = undefined;\n    this.from = from | 0;\n    this.to = to | 0;\n    this.colorId = colorId | 0;\n  }\n\n  static compare(a, b) {\n    if (a.colorId === b.colorId) {\n      if (a.from === b.from) {\n        return a.to - b.to;\n      }\n\n      return a.from - b.from;\n    }\n\n    return a.colorId - b.colorId;\n  }\n\n}\n/**\n * A zone in the overview ruler\n */\n\nexport class OverviewRulerZone {\n  constructor(startLineNumber, endLineNumber, color) {\n    this._overviewRulerZoneBrand = undefined;\n    this.startLineNumber = startLineNumber;\n    this.endLineNumber = endLineNumber;\n    this.color = color;\n    this._colorZone = null;\n  }\n\n  static compare(a, b) {\n    if (a.color === b.color) {\n      if (a.startLineNumber === b.startLineNumber) {\n        return a.endLineNumber - b.endLineNumber;\n      }\n\n      return a.startLineNumber - b.startLineNumber;\n    }\n\n    return a.color < b.color ? -1 : 1;\n  }\n\n  setColorZone(colorZone) {\n    this._colorZone = colorZone;\n  }\n\n  getColorZones() {\n    return this._colorZone;\n  }\n\n}\nexport class OverviewZoneManager {\n  constructor(getVerticalOffsetForLine) {\n    this._getVerticalOffsetForLine = getVerticalOffsetForLine;\n    this._zones = [];\n    this._colorZonesInvalid = false;\n    this._lineHeight = 0;\n    this._domWidth = 0;\n    this._domHeight = 0;\n    this._outerHeight = 0;\n    this._pixelRatio = 1;\n    this._lastAssignedId = 0;\n    this._color2Id = Object.create(null);\n    this._id2Color = [];\n  }\n\n  getId2Color() {\n    return this._id2Color;\n  }\n\n  setZones(newZones) {\n    this._zones = newZones;\n\n    this._zones.sort(OverviewRulerZone.compare);\n  }\n\n  setLineHeight(lineHeight) {\n    if (this._lineHeight === lineHeight) {\n      return false;\n    }\n\n    this._lineHeight = lineHeight;\n    this._colorZonesInvalid = true;\n    return true;\n  }\n\n  setPixelRatio(pixelRatio) {\n    this._pixelRatio = pixelRatio;\n    this._colorZonesInvalid = true;\n  }\n\n  getDOMWidth() {\n    return this._domWidth;\n  }\n\n  getCanvasWidth() {\n    return this._domWidth * this._pixelRatio;\n  }\n\n  setDOMWidth(width) {\n    if (this._domWidth === width) {\n      return false;\n    }\n\n    this._domWidth = width;\n    this._colorZonesInvalid = true;\n    return true;\n  }\n\n  getDOMHeight() {\n    return this._domHeight;\n  }\n\n  getCanvasHeight() {\n    return this._domHeight * this._pixelRatio;\n  }\n\n  setDOMHeight(height) {\n    if (this._domHeight === height) {\n      return false;\n    }\n\n    this._domHeight = height;\n    this._colorZonesInvalid = true;\n    return true;\n  }\n\n  getOuterHeight() {\n    return this._outerHeight;\n  }\n\n  setOuterHeight(outerHeight) {\n    if (this._outerHeight === outerHeight) {\n      return false;\n    }\n\n    this._outerHeight = outerHeight;\n    this._colorZonesInvalid = true;\n    return true;\n  }\n\n  resolveColorZones() {\n    const colorZonesInvalid = this._colorZonesInvalid;\n    const lineHeight = Math.floor(this._lineHeight);\n    const totalHeight = Math.floor(this.getCanvasHeight());\n    const outerHeight = Math.floor(this._outerHeight);\n    const heightRatio = totalHeight / outerHeight;\n    const halfMinimumHeight = Math.floor(4\n    /* MINIMUM_HEIGHT */\n    * this._pixelRatio / 2);\n    const allColorZones = [];\n\n    for (let i = 0, len = this._zones.length; i < len; i++) {\n      const zone = this._zones[i];\n\n      if (!colorZonesInvalid) {\n        const colorZone = zone.getColorZones();\n\n        if (colorZone) {\n          allColorZones.push(colorZone);\n          continue;\n        }\n      }\n\n      const y1 = Math.floor(heightRatio * this._getVerticalOffsetForLine(zone.startLineNumber));\n      const y2 = Math.floor(heightRatio * (this._getVerticalOffsetForLine(zone.endLineNumber) + lineHeight));\n      let ycenter = Math.floor((y1 + y2) / 2);\n      let halfHeight = y2 - ycenter;\n\n      if (halfHeight < halfMinimumHeight) {\n        halfHeight = halfMinimumHeight;\n      }\n\n      if (ycenter - halfHeight < 0) {\n        ycenter = halfHeight;\n      }\n\n      if (ycenter + halfHeight > totalHeight) {\n        ycenter = totalHeight - halfHeight;\n      }\n\n      const color = zone.color;\n      let colorId = this._color2Id[color];\n\n      if (!colorId) {\n        colorId = ++this._lastAssignedId;\n        this._color2Id[color] = colorId;\n        this._id2Color[colorId] = color;\n      }\n\n      const colorZone = new ColorZone(ycenter - halfHeight, ycenter + halfHeight, colorId);\n      zone.setColorZone(colorZone);\n      allColorZones.push(colorZone);\n    }\n\n    this._colorZonesInvalid = false;\n    allColorZones.sort(ColorZone.compare);\n    return allColorZones;\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/common/viewModel/overviewZoneManager.js"],"names":["ColorZone","constructor","from","to","colorId","_colorZoneBrand","undefined","compare","a","b","OverviewRulerZone","startLineNumber","endLineNumber","color","_overviewRulerZoneBrand","_colorZone","setColorZone","colorZone","getColorZones","OverviewZoneManager","getVerticalOffsetForLine","_getVerticalOffsetForLine","_zones","_colorZonesInvalid","_lineHeight","_domWidth","_domHeight","_outerHeight","_pixelRatio","_lastAssignedId","_color2Id","Object","create","_id2Color","getId2Color","setZones","newZones","sort","setLineHeight","lineHeight","setPixelRatio","pixelRatio","getDOMWidth","getCanvasWidth","setDOMWidth","width","getDOMHeight","getCanvasHeight","setDOMHeight","height","getOuterHeight","setOuterHeight","outerHeight","resolveColorZones","colorZonesInvalid","Math","floor","totalHeight","heightRatio","halfMinimumHeight","allColorZones","i","len","length","zone","push","y1","y2","ycenter","halfHeight"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class ColorZone {\n    constructor(from, to, colorId) {\n        this._colorZoneBrand = undefined;\n        this.from = from | 0;\n        this.to = to | 0;\n        this.colorId = colorId | 0;\n    }\n    static compare(a, b) {\n        if (a.colorId === b.colorId) {\n            if (a.from === b.from) {\n                return a.to - b.to;\n            }\n            return a.from - b.from;\n        }\n        return a.colorId - b.colorId;\n    }\n}\n/**\n * A zone in the overview ruler\n */\nexport class OverviewRulerZone {\n    constructor(startLineNumber, endLineNumber, color) {\n        this._overviewRulerZoneBrand = undefined;\n        this.startLineNumber = startLineNumber;\n        this.endLineNumber = endLineNumber;\n        this.color = color;\n        this._colorZone = null;\n    }\n    static compare(a, b) {\n        if (a.color === b.color) {\n            if (a.startLineNumber === b.startLineNumber) {\n                return a.endLineNumber - b.endLineNumber;\n            }\n            return a.startLineNumber - b.startLineNumber;\n        }\n        return a.color < b.color ? -1 : 1;\n    }\n    setColorZone(colorZone) {\n        this._colorZone = colorZone;\n    }\n    getColorZones() {\n        return this._colorZone;\n    }\n}\nexport class OverviewZoneManager {\n    constructor(getVerticalOffsetForLine) {\n        this._getVerticalOffsetForLine = getVerticalOffsetForLine;\n        this._zones = [];\n        this._colorZonesInvalid = false;\n        this._lineHeight = 0;\n        this._domWidth = 0;\n        this._domHeight = 0;\n        this._outerHeight = 0;\n        this._pixelRatio = 1;\n        this._lastAssignedId = 0;\n        this._color2Id = Object.create(null);\n        this._id2Color = [];\n    }\n    getId2Color() {\n        return this._id2Color;\n    }\n    setZones(newZones) {\n        this._zones = newZones;\n        this._zones.sort(OverviewRulerZone.compare);\n    }\n    setLineHeight(lineHeight) {\n        if (this._lineHeight === lineHeight) {\n            return false;\n        }\n        this._lineHeight = lineHeight;\n        this._colorZonesInvalid = true;\n        return true;\n    }\n    setPixelRatio(pixelRatio) {\n        this._pixelRatio = pixelRatio;\n        this._colorZonesInvalid = true;\n    }\n    getDOMWidth() {\n        return this._domWidth;\n    }\n    getCanvasWidth() {\n        return this._domWidth * this._pixelRatio;\n    }\n    setDOMWidth(width) {\n        if (this._domWidth === width) {\n            return false;\n        }\n        this._domWidth = width;\n        this._colorZonesInvalid = true;\n        return true;\n    }\n    getDOMHeight() {\n        return this._domHeight;\n    }\n    getCanvasHeight() {\n        return this._domHeight * this._pixelRatio;\n    }\n    setDOMHeight(height) {\n        if (this._domHeight === height) {\n            return false;\n        }\n        this._domHeight = height;\n        this._colorZonesInvalid = true;\n        return true;\n    }\n    getOuterHeight() {\n        return this._outerHeight;\n    }\n    setOuterHeight(outerHeight) {\n        if (this._outerHeight === outerHeight) {\n            return false;\n        }\n        this._outerHeight = outerHeight;\n        this._colorZonesInvalid = true;\n        return true;\n    }\n    resolveColorZones() {\n        const colorZonesInvalid = this._colorZonesInvalid;\n        const lineHeight = Math.floor(this._lineHeight);\n        const totalHeight = Math.floor(this.getCanvasHeight());\n        const outerHeight = Math.floor(this._outerHeight);\n        const heightRatio = totalHeight / outerHeight;\n        const halfMinimumHeight = Math.floor(4 /* MINIMUM_HEIGHT */ * this._pixelRatio / 2);\n        const allColorZones = [];\n        for (let i = 0, len = this._zones.length; i < len; i++) {\n            const zone = this._zones[i];\n            if (!colorZonesInvalid) {\n                const colorZone = zone.getColorZones();\n                if (colorZone) {\n                    allColorZones.push(colorZone);\n                    continue;\n                }\n            }\n            const y1 = Math.floor(heightRatio * (this._getVerticalOffsetForLine(zone.startLineNumber)));\n            const y2 = Math.floor(heightRatio * (this._getVerticalOffsetForLine(zone.endLineNumber) + lineHeight));\n            let ycenter = Math.floor((y1 + y2) / 2);\n            let halfHeight = (y2 - ycenter);\n            if (halfHeight < halfMinimumHeight) {\n                halfHeight = halfMinimumHeight;\n            }\n            if (ycenter - halfHeight < 0) {\n                ycenter = halfHeight;\n            }\n            if (ycenter + halfHeight > totalHeight) {\n                ycenter = totalHeight - halfHeight;\n            }\n            const color = zone.color;\n            let colorId = this._color2Id[color];\n            if (!colorId) {\n                colorId = (++this._lastAssignedId);\n                this._color2Id[color] = colorId;\n                this._id2Color[colorId] = color;\n            }\n            const colorZone = new ColorZone(ycenter - halfHeight, ycenter + halfHeight, colorId);\n            zone.setColorZone(colorZone);\n            allColorZones.push(colorZone);\n        }\n        this._colorZonesInvalid = false;\n        allColorZones.sort(ColorZone.compare);\n        return allColorZones;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}