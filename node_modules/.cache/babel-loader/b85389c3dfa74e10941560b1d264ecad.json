{"ast":null,"code":"/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n// src/basic-languages/mips/mips.ts\nvar conf = {\n  wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#%\\^\\&\\*\\(\\)\\=\\$\\-\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\n  comments: {\n    blockComment: [\"###\", \"###\"],\n    lineComment: \"#\"\n  },\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*#region\\\\b\"),\n      end: new RegExp(\"^\\\\s*#endregion\\\\b\")\n    }\n  }\n};\nvar language = {\n  defaultToken: \"\",\n  ignoreCase: false,\n  tokenPostfix: \".mips\",\n  regEx: /\\/(?!\\/\\/)(?:[^\\/\\\\]|\\\\.)*\\/[igm]*/,\n  keywords: [\".data\", \".text\", \"syscall\", \"trap\", \"add\", \"addu\", \"addi\", \"addiu\", \"and\", \"andi\", \"div\", \"divu\", \"mult\", \"multu\", \"nor\", \"or\", \"ori\", \"sll\", \"slv\", \"sra\", \"srav\", \"srl\", \"srlv\", \"sub\", \"subu\", \"xor\", \"xori\", \"lhi\", \"lho\", \"lhi\", \"llo\", \"slt\", \"slti\", \"sltu\", \"sltiu\", \"beq\", \"bgtz\", \"blez\", \"bne\", \"j\", \"jal\", \"jalr\", \"jr\", \"lb\", \"lbu\", \"lh\", \"lhu\", \"lw\", \"li\", \"la\", \"sb\", \"sh\", \"sw\", \"mfhi\", \"mflo\", \"mthi\", \"mtlo\", \"move\"],\n  symbols: /[\\.,\\:]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"'$]|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  tokenizer: {\n    root: [[/\\$[a-zA-Z_]\\w*/, \"variable.predefined\"], [/[.a-zA-Z_]\\w*/, {\n      cases: {\n        this: \"variable.predefined\",\n        \"@keywords\": {\n          token: \"keyword.$0\"\n        },\n        \"@default\": \"\"\n      }\n    }], [/[ \\t\\r\\n]+/, \"\"], [/#.*$/, \"comment\"], [\"///\", {\n      token: \"regexp\",\n      next: \"@hereregexp\"\n    }], [/^(\\s*)(@regEx)/, [\"\", \"regexp\"]], [/(\\,)(\\s*)(@regEx)/, [\"delimiter\", \"\", \"regexp\"]], [/(\\:)(\\s*)(@regEx)/, [\"delimiter\", \"\", \"regexp\"]], [/@symbols/, \"delimiter\"], [/\\d+[eE]([\\-+]?\\d+)?/, \"number.float\"], [/\\d+\\.\\d+([eE][\\-+]?\\d+)?/, \"number.float\"], [/0[xX][0-9a-fA-F]+/, \"number.hex\"], [/0[0-7]+(?!\\d)/, \"number.octal\"], [/\\d+/, \"number\"], [/[,.]/, \"delimiter\"], [/\"\"\"/, \"string\", '@herestring.\"\"\"'], [/'''/, \"string\", \"@herestring.'''\"], [/\"/, {\n      cases: {\n        \"@eos\": \"string\",\n        \"@default\": {\n          token: \"string\",\n          next: '@string.\"'\n        }\n      }\n    }], [/'/, {\n      cases: {\n        \"@eos\": \"string\",\n        \"@default\": {\n          token: \"string\",\n          next: \"@string.'\"\n        }\n      }\n    }]],\n    string: [[/[^\"'\\#\\\\]+/, \"string\"], [/@escapes/, \"string.escape\"], [/\\./, \"string.escape.invalid\"], [/\\./, \"string.escape.invalid\"], [/#{/, {\n      cases: {\n        '$S2==\"': {\n          token: \"string\",\n          next: \"root.interpolatedstring\"\n        },\n        \"@default\": \"string\"\n      }\n    }], [/[\"']/, {\n      cases: {\n        \"$#==$S2\": {\n          token: \"string\",\n          next: \"@pop\"\n        },\n        \"@default\": \"string\"\n      }\n    }], [/#/, \"string\"]],\n    herestring: [[/(\"\"\"|''')/, {\n      cases: {\n        \"$1==$S2\": {\n          token: \"string\",\n          next: \"@pop\"\n        },\n        \"@default\": \"string\"\n      }\n    }], [/[^#\\\\'\"]+/, \"string\"], [/['\"]+/, \"string\"], [/@escapes/, \"string.escape\"], [/\\./, \"string.escape.invalid\"], [/#{/, {\n      token: \"string.quote\",\n      next: \"root.interpolatedstring\"\n    }], [/#/, \"string\"]],\n    comment: [[/[^#]+/, \"comment\"], [/#/, \"comment\"]],\n    hereregexp: [[/[^\\\\\\/#]+/, \"regexp\"], [/\\\\./, \"regexp\"], [/#.*$/, \"comment\"], [\"///[igm]*\", {\n      token: \"regexp\",\n      next: \"@pop\"\n    }], [/\\//, \"regexp\"]]\n  }\n};\nexport { conf, language };","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/basic-languages/mips/mips.js"],"names":["conf","wordPattern","comments","blockComment","lineComment","folding","markers","start","RegExp","end","language","defaultToken","ignoreCase","tokenPostfix","regEx","keywords","symbols","escapes","tokenizer","root","cases","this","token","next","string","herestring","comment","hereregexp"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,IAAIA,IAAI,GAAG;AACTC,EAAAA,WAAW,EAAE,uFADJ;AAETC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,YAAY,EAAE,CAAC,KAAD,EAAQ,KAAR,CADN;AAERC,IAAAA,WAAW,EAAE;AAFL,GAFD;AAMTC,EAAAA,OAAO,EAAE;AACPC,IAAAA,OAAO,EAAE;AACPC,MAAAA,KAAK,EAAE,IAAIC,MAAJ,CAAW,iBAAX,CADA;AAEPC,MAAAA,GAAG,EAAE,IAAID,MAAJ,CAAW,oBAAX;AAFE;AADF;AANA,CAAX;AAaA,IAAIE,QAAQ,GAAG;AACbC,EAAAA,YAAY,EAAE,EADD;AAEbC,EAAAA,UAAU,EAAE,KAFC;AAGbC,EAAAA,YAAY,EAAE,OAHD;AAIbC,EAAAA,KAAK,EAAE,oCAJM;AAKbC,EAAAA,QAAQ,EAAE,CACR,OADQ,EAER,OAFQ,EAGR,SAHQ,EAIR,MAJQ,EAKR,KALQ,EAMR,MANQ,EAOR,MAPQ,EAQR,OARQ,EASR,KATQ,EAUR,MAVQ,EAWR,KAXQ,EAYR,MAZQ,EAaR,MAbQ,EAcR,OAdQ,EAeR,KAfQ,EAgBR,IAhBQ,EAiBR,KAjBQ,EAkBR,KAlBQ,EAmBR,KAnBQ,EAoBR,KApBQ,EAqBR,MArBQ,EAsBR,KAtBQ,EAuBR,MAvBQ,EAwBR,KAxBQ,EAyBR,MAzBQ,EA0BR,KA1BQ,EA2BR,MA3BQ,EA4BR,KA5BQ,EA6BR,KA7BQ,EA8BR,KA9BQ,EA+BR,KA/BQ,EAgCR,KAhCQ,EAiCR,MAjCQ,EAkCR,MAlCQ,EAmCR,OAnCQ,EAoCR,KApCQ,EAqCR,MArCQ,EAsCR,MAtCQ,EAuCR,KAvCQ,EAwCR,GAxCQ,EAyCR,KAzCQ,EA0CR,MA1CQ,EA2CR,IA3CQ,EA4CR,IA5CQ,EA6CR,KA7CQ,EA8CR,IA9CQ,EA+CR,KA/CQ,EAgDR,IAhDQ,EAiDR,IAjDQ,EAkDR,IAlDQ,EAmDR,IAnDQ,EAoDR,IApDQ,EAqDR,IArDQ,EAsDR,MAtDQ,EAuDR,MAvDQ,EAwDR,MAxDQ,EAyDR,MAzDQ,EA0DR,MA1DQ,CALG;AAiEbC,EAAAA,OAAO,EAAE,UAjEI;AAkEbC,EAAAA,OAAO,EAAE,wEAlEI;AAmEbC,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EAAE,CACJ,CAAC,gBAAD,EAAmB,qBAAnB,CADI,EAEJ,CACE,eADF,EAEE;AACEC,MAAAA,KAAK,EAAE;AACLC,QAAAA,IAAI,EAAE,qBADD;AAEL,qBAAa;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAFR;AAGL,oBAAY;AAHP;AADT,KAFF,CAFI,EAYJ,CAAC,YAAD,EAAe,EAAf,CAZI,EAaJ,CAAC,MAAD,EAAS,SAAT,CAbI,EAcJ,CAAC,KAAD,EAAQ;AAAEA,MAAAA,KAAK,EAAE,QAAT;AAAmBC,MAAAA,IAAI,EAAE;AAAzB,KAAR,CAdI,EAeJ,CAAC,gBAAD,EAAmB,CAAC,EAAD,EAAK,QAAL,CAAnB,CAfI,EAgBJ,CAAC,mBAAD,EAAsB,CAAC,WAAD,EAAc,EAAd,EAAkB,QAAlB,CAAtB,CAhBI,EAiBJ,CAAC,mBAAD,EAAsB,CAAC,WAAD,EAAc,EAAd,EAAkB,QAAlB,CAAtB,CAjBI,EAkBJ,CAAC,UAAD,EAAa,WAAb,CAlBI,EAmBJ,CAAC,qBAAD,EAAwB,cAAxB,CAnBI,EAoBJ,CAAC,0BAAD,EAA6B,cAA7B,CApBI,EAqBJ,CAAC,mBAAD,EAAsB,YAAtB,CArBI,EAsBJ,CAAC,eAAD,EAAkB,cAAlB,CAtBI,EAuBJ,CAAC,KAAD,EAAQ,QAAR,CAvBI,EAwBJ,CAAC,MAAD,EAAS,WAAT,CAxBI,EAyBJ,CAAC,KAAD,EAAQ,QAAR,EAAkB,iBAAlB,CAzBI,EA0BJ,CAAC,KAAD,EAAQ,QAAR,EAAkB,iBAAlB,CA1BI,EA2BJ,CACE,GADF,EAEE;AACEH,MAAAA,KAAK,EAAE;AACL,gBAAQ,QADH;AAEL,oBAAY;AAAEE,UAAAA,KAAK,EAAE,QAAT;AAAmBC,UAAAA,IAAI,EAAE;AAAzB;AAFP;AADT,KAFF,CA3BI,EAoCJ,CACE,GADF,EAEE;AACEH,MAAAA,KAAK,EAAE;AACL,gBAAQ,QADH;AAEL,oBAAY;AAAEE,UAAAA,KAAK,EAAE,QAAT;AAAmBC,UAAAA,IAAI,EAAE;AAAzB;AAFP;AADT,KAFF,CApCI,CADG;AA+CTC,IAAAA,MAAM,EAAE,CACN,CAAC,YAAD,EAAe,QAAf,CADM,EAEN,CAAC,UAAD,EAAa,eAAb,CAFM,EAGN,CAAC,IAAD,EAAO,uBAAP,CAHM,EAIN,CAAC,IAAD,EAAO,uBAAP,CAJM,EAKN,CACE,IADF,EAEE;AACEJ,MAAAA,KAAK,EAAE;AACL,kBAAU;AACRE,UAAAA,KAAK,EAAE,QADC;AAERC,UAAAA,IAAI,EAAE;AAFE,SADL;AAKL,oBAAY;AALP;AADT,KAFF,CALM,EAiBN,CACE,MADF,EAEE;AACEH,MAAAA,KAAK,EAAE;AACL,mBAAW;AAAEE,UAAAA,KAAK,EAAE,QAAT;AAAmBC,UAAAA,IAAI,EAAE;AAAzB,SADN;AAEL,oBAAY;AAFP;AADT,KAFF,CAjBM,EA0BN,CAAC,GAAD,EAAM,QAAN,CA1BM,CA/CC;AA2ETE,IAAAA,UAAU,EAAE,CACV,CACE,WADF,EAEE;AACEL,MAAAA,KAAK,EAAE;AACL,mBAAW;AAAEE,UAAAA,KAAK,EAAE,QAAT;AAAmBC,UAAAA,IAAI,EAAE;AAAzB,SADN;AAEL,oBAAY;AAFP;AADT,KAFF,CADU,EAUV,CAAC,WAAD,EAAc,QAAd,CAVU,EAWV,CAAC,OAAD,EAAU,QAAV,CAXU,EAYV,CAAC,UAAD,EAAa,eAAb,CAZU,EAaV,CAAC,IAAD,EAAO,uBAAP,CAbU,EAcV,CAAC,IAAD,EAAO;AAAED,MAAAA,KAAK,EAAE,cAAT;AAAyBC,MAAAA,IAAI,EAAE;AAA/B,KAAP,CAdU,EAeV,CAAC,GAAD,EAAM,QAAN,CAfU,CA3EH;AA4FTG,IAAAA,OAAO,EAAE,CACP,CAAC,OAAD,EAAU,SAAV,CADO,EAEP,CAAC,GAAD,EAAM,SAAN,CAFO,CA5FA;AAgGTC,IAAAA,UAAU,EAAE,CACV,CAAC,WAAD,EAAc,QAAd,CADU,EAEV,CAAC,KAAD,EAAQ,QAAR,CAFU,EAGV,CAAC,MAAD,EAAS,SAAT,CAHU,EAIV,CAAC,WAAD,EAAc;AAAEL,MAAAA,KAAK,EAAE,QAAT;AAAmBC,MAAAA,IAAI,EAAE;AAAzB,KAAd,CAJU,EAKV,CAAC,IAAD,EAAO,QAAP,CALU;AAhGH;AAnEE,CAAf;AA4KA,SACEvB,IADF,EAEEU,QAFF","sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/mips/mips.ts\nvar conf = {\n  wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#%\\^\\&\\*\\(\\)\\=\\$\\-\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\n  comments: {\n    blockComment: [\"###\", \"###\"],\n    lineComment: \"#\"\n  },\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*#region\\\\b\"),\n      end: new RegExp(\"^\\\\s*#endregion\\\\b\")\n    }\n  }\n};\nvar language = {\n  defaultToken: \"\",\n  ignoreCase: false,\n  tokenPostfix: \".mips\",\n  regEx: /\\/(?!\\/\\/)(?:[^\\/\\\\]|\\\\.)*\\/[igm]*/,\n  keywords: [\n    \".data\",\n    \".text\",\n    \"syscall\",\n    \"trap\",\n    \"add\",\n    \"addu\",\n    \"addi\",\n    \"addiu\",\n    \"and\",\n    \"andi\",\n    \"div\",\n    \"divu\",\n    \"mult\",\n    \"multu\",\n    \"nor\",\n    \"or\",\n    \"ori\",\n    \"sll\",\n    \"slv\",\n    \"sra\",\n    \"srav\",\n    \"srl\",\n    \"srlv\",\n    \"sub\",\n    \"subu\",\n    \"xor\",\n    \"xori\",\n    \"lhi\",\n    \"lho\",\n    \"lhi\",\n    \"llo\",\n    \"slt\",\n    \"slti\",\n    \"sltu\",\n    \"sltiu\",\n    \"beq\",\n    \"bgtz\",\n    \"blez\",\n    \"bne\",\n    \"j\",\n    \"jal\",\n    \"jalr\",\n    \"jr\",\n    \"lb\",\n    \"lbu\",\n    \"lh\",\n    \"lhu\",\n    \"lw\",\n    \"li\",\n    \"la\",\n    \"sb\",\n    \"sh\",\n    \"sw\",\n    \"mfhi\",\n    \"mflo\",\n    \"mthi\",\n    \"mtlo\",\n    \"move\"\n  ],\n  symbols: /[\\.,\\:]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"'$]|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  tokenizer: {\n    root: [\n      [/\\$[a-zA-Z_]\\w*/, \"variable.predefined\"],\n      [\n        /[.a-zA-Z_]\\w*/,\n        {\n          cases: {\n            this: \"variable.predefined\",\n            \"@keywords\": { token: \"keyword.$0\" },\n            \"@default\": \"\"\n          }\n        }\n      ],\n      [/[ \\t\\r\\n]+/, \"\"],\n      [/#.*$/, \"comment\"],\n      [\"///\", { token: \"regexp\", next: \"@hereregexp\" }],\n      [/^(\\s*)(@regEx)/, [\"\", \"regexp\"]],\n      [/(\\,)(\\s*)(@regEx)/, [\"delimiter\", \"\", \"regexp\"]],\n      [/(\\:)(\\s*)(@regEx)/, [\"delimiter\", \"\", \"regexp\"]],\n      [/@symbols/, \"delimiter\"],\n      [/\\d+[eE]([\\-+]?\\d+)?/, \"number.float\"],\n      [/\\d+\\.\\d+([eE][\\-+]?\\d+)?/, \"number.float\"],\n      [/0[xX][0-9a-fA-F]+/, \"number.hex\"],\n      [/0[0-7]+(?!\\d)/, \"number.octal\"],\n      [/\\d+/, \"number\"],\n      [/[,.]/, \"delimiter\"],\n      [/\"\"\"/, \"string\", '@herestring.\"\"\"'],\n      [/'''/, \"string\", \"@herestring.'''\"],\n      [\n        /\"/,\n        {\n          cases: {\n            \"@eos\": \"string\",\n            \"@default\": { token: \"string\", next: '@string.\"' }\n          }\n        }\n      ],\n      [\n        /'/,\n        {\n          cases: {\n            \"@eos\": \"string\",\n            \"@default\": { token: \"string\", next: \"@string.'\" }\n          }\n        }\n      ]\n    ],\n    string: [\n      [/[^\"'\\#\\\\]+/, \"string\"],\n      [/@escapes/, \"string.escape\"],\n      [/\\./, \"string.escape.invalid\"],\n      [/\\./, \"string.escape.invalid\"],\n      [\n        /#{/,\n        {\n          cases: {\n            '$S2==\"': {\n              token: \"string\",\n              next: \"root.interpolatedstring\"\n            },\n            \"@default\": \"string\"\n          }\n        }\n      ],\n      [\n        /[\"']/,\n        {\n          cases: {\n            \"$#==$S2\": { token: \"string\", next: \"@pop\" },\n            \"@default\": \"string\"\n          }\n        }\n      ],\n      [/#/, \"string\"]\n    ],\n    herestring: [\n      [\n        /(\"\"\"|''')/,\n        {\n          cases: {\n            \"$1==$S2\": { token: \"string\", next: \"@pop\" },\n            \"@default\": \"string\"\n          }\n        }\n      ],\n      [/[^#\\\\'\"]+/, \"string\"],\n      [/['\"]+/, \"string\"],\n      [/@escapes/, \"string.escape\"],\n      [/\\./, \"string.escape.invalid\"],\n      [/#{/, { token: \"string.quote\", next: \"root.interpolatedstring\" }],\n      [/#/, \"string\"]\n    ],\n    comment: [\n      [/[^#]+/, \"comment\"],\n      [/#/, \"comment\"]\n    ],\n    hereregexp: [\n      [/[^\\\\\\/#]+/, \"regexp\"],\n      [/\\\\./, \"regexp\"],\n      [/#.*$/, \"comment\"],\n      [\"///[igm]*\", { token: \"regexp\", next: \"@pop\" }],\n      [/\\//, \"regexp\"]\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"]},"metadata":{},"sourceType":"module"}