{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nfunction roundFloat(number, decimalPoints) {\n  const decimal = Math.pow(10, decimalPoints);\n  return Math.round(number * decimal) / decimal;\n}\n\nexport class RGBA {\n  constructor(r, g, b, a = 1) {\n    this._rgbaBrand = undefined;\n    this.r = Math.min(255, Math.max(0, r)) | 0;\n    this.g = Math.min(255, Math.max(0, g)) | 0;\n    this.b = Math.min(255, Math.max(0, b)) | 0;\n    this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\n  }\n\n  static equals(a, b) {\n    return a.r === b.r && a.g === b.g && a.b === b.b && a.a === b.a;\n  }\n\n}\nexport class HSLA {\n  constructor(h, s, l, a) {\n    this._hslaBrand = undefined;\n    this.h = Math.max(Math.min(360, h), 0) | 0;\n    this.s = roundFloat(Math.max(Math.min(1, s), 0), 3);\n    this.l = roundFloat(Math.max(Math.min(1, l), 0), 3);\n    this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\n  }\n\n  static equals(a, b) {\n    return a.h === b.h && a.s === b.s && a.l === b.l && a.a === b.a;\n  }\n  /**\n   * Converts an RGB color value to HSL. Conversion formula\n   * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n   * Assumes r, g, and b are contained in the set [0, 255] and\n   * returns h in the set [0, 360], s, and l in the set [0, 1].\n   */\n\n\n  static fromRGBA(rgba) {\n    const r = rgba.r / 255;\n    const g = rgba.g / 255;\n    const b = rgba.b / 255;\n    const a = rgba.a;\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    let h = 0;\n    let s = 0;\n    const l = (min + max) / 2;\n    const chroma = max - min;\n\n    if (chroma > 0) {\n      s = Math.min(l <= 0.5 ? chroma / (2 * l) : chroma / (2 - 2 * l), 1);\n\n      switch (max) {\n        case r:\n          h = (g - b) / chroma + (g < b ? 6 : 0);\n          break;\n\n        case g:\n          h = (b - r) / chroma + 2;\n          break;\n\n        case b:\n          h = (r - g) / chroma + 4;\n          break;\n      }\n\n      h *= 60;\n      h = Math.round(h);\n    }\n\n    return new HSLA(h, s, l, a);\n  }\n\n  static _hue2rgb(p, q, t) {\n    if (t < 0) {\n      t += 1;\n    }\n\n    if (t > 1) {\n      t -= 1;\n    }\n\n    if (t < 1 / 6) {\n      return p + (q - p) * 6 * t;\n    }\n\n    if (t < 1 / 2) {\n      return q;\n    }\n\n    if (t < 2 / 3) {\n      return p + (q - p) * (2 / 3 - t) * 6;\n    }\n\n    return p;\n  }\n  /**\n   * Converts an HSL color value to RGB. Conversion formula\n   * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n   * Assumes h in the set [0, 360] s, and l are contained in the set [0, 1] and\n   * returns r, g, and b in the set [0, 255].\n   */\n\n\n  static toRGBA(hsla) {\n    const h = hsla.h / 360;\n    const {\n      s,\n      l,\n      a\n    } = hsla;\n    let r, g, b;\n\n    if (s === 0) {\n      r = g = b = l; // achromatic\n    } else {\n      const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n      const p = 2 * l - q;\n      r = HSLA._hue2rgb(p, q, h + 1 / 3);\n      g = HSLA._hue2rgb(p, q, h);\n      b = HSLA._hue2rgb(p, q, h - 1 / 3);\n    }\n\n    return new RGBA(Math.round(r * 255), Math.round(g * 255), Math.round(b * 255), a);\n  }\n\n}\nexport class HSVA {\n  constructor(h, s, v, a) {\n    this._hsvaBrand = undefined;\n    this.h = Math.max(Math.min(360, h), 0) | 0;\n    this.s = roundFloat(Math.max(Math.min(1, s), 0), 3);\n    this.v = roundFloat(Math.max(Math.min(1, v), 0), 3);\n    this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\n  }\n\n  static equals(a, b) {\n    return a.h === b.h && a.s === b.s && a.v === b.v && a.a === b.a;\n  } // from http://www.rapidtables.com/convert/color/rgb-to-hsv.htm\n\n\n  static fromRGBA(rgba) {\n    const r = rgba.r / 255;\n    const g = rgba.g / 255;\n    const b = rgba.b / 255;\n    const cmax = Math.max(r, g, b);\n    const cmin = Math.min(r, g, b);\n    const delta = cmax - cmin;\n    const s = cmax === 0 ? 0 : delta / cmax;\n    let m;\n\n    if (delta === 0) {\n      m = 0;\n    } else if (cmax === r) {\n      m = ((g - b) / delta % 6 + 6) % 6;\n    } else if (cmax === g) {\n      m = (b - r) / delta + 2;\n    } else {\n      m = (r - g) / delta + 4;\n    }\n\n    return new HSVA(Math.round(m * 60), s, cmax, rgba.a);\n  } // from http://www.rapidtables.com/convert/color/hsv-to-rgb.htm\n\n\n  static toRGBA(hsva) {\n    const {\n      h,\n      s,\n      v,\n      a\n    } = hsva;\n    const c = v * s;\n    const x = c * (1 - Math.abs(h / 60 % 2 - 1));\n    const m = v - c;\n    let [r, g, b] = [0, 0, 0];\n\n    if (h < 60) {\n      r = c;\n      g = x;\n    } else if (h < 120) {\n      r = x;\n      g = c;\n    } else if (h < 180) {\n      g = c;\n      b = x;\n    } else if (h < 240) {\n      g = x;\n      b = c;\n    } else if (h < 300) {\n      r = x;\n      b = c;\n    } else if (h <= 360) {\n      r = c;\n      b = x;\n    }\n\n    r = Math.round((r + m) * 255);\n    g = Math.round((g + m) * 255);\n    b = Math.round((b + m) * 255);\n    return new RGBA(r, g, b, a);\n  }\n\n}\nexport class Color {\n  constructor(arg) {\n    if (!arg) {\n      throw new Error('Color needs a value');\n    } else if (arg instanceof RGBA) {\n      this.rgba = arg;\n    } else if (arg instanceof HSLA) {\n      this._hsla = arg;\n      this.rgba = HSLA.toRGBA(arg);\n    } else if (arg instanceof HSVA) {\n      this._hsva = arg;\n      this.rgba = HSVA.toRGBA(arg);\n    } else {\n      throw new Error('Invalid color ctor argument');\n    }\n  }\n\n  static fromHex(hex) {\n    return Color.Format.CSS.parseHex(hex) || Color.red;\n  }\n\n  get hsla() {\n    if (this._hsla) {\n      return this._hsla;\n    } else {\n      return HSLA.fromRGBA(this.rgba);\n    }\n  }\n\n  get hsva() {\n    if (this._hsva) {\n      return this._hsva;\n    }\n\n    return HSVA.fromRGBA(this.rgba);\n  }\n\n  equals(other) {\n    return !!other && RGBA.equals(this.rgba, other.rgba) && HSLA.equals(this.hsla, other.hsla) && HSVA.equals(this.hsva, other.hsva);\n  }\n  /**\n   * http://www.w3.org/TR/WCAG20/#relativeluminancedef\n   * Returns the number in the set [0, 1]. O => Darkest Black. 1 => Lightest white.\n   */\n\n\n  getRelativeLuminance() {\n    const R = Color._relativeLuminanceForComponent(this.rgba.r);\n\n    const G = Color._relativeLuminanceForComponent(this.rgba.g);\n\n    const B = Color._relativeLuminanceForComponent(this.rgba.b);\n\n    const luminance = 0.2126 * R + 0.7152 * G + 0.0722 * B;\n    return roundFloat(luminance, 4);\n  }\n\n  static _relativeLuminanceForComponent(color) {\n    const c = color / 255;\n    return c <= 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);\n  }\n  /**\n   *\thttp://24ways.org/2010/calculating-color-contrast\n   *  Return 'true' if lighter color otherwise 'false'\n   */\n\n\n  isLighter() {\n    const yiq = (this.rgba.r * 299 + this.rgba.g * 587 + this.rgba.b * 114) / 1000;\n    return yiq >= 128;\n  }\n\n  isLighterThan(another) {\n    const lum1 = this.getRelativeLuminance();\n    const lum2 = another.getRelativeLuminance();\n    return lum1 > lum2;\n  }\n\n  isDarkerThan(another) {\n    const lum1 = this.getRelativeLuminance();\n    const lum2 = another.getRelativeLuminance();\n    return lum1 < lum2;\n  }\n\n  lighten(factor) {\n    return new Color(new HSLA(this.hsla.h, this.hsla.s, this.hsla.l + this.hsla.l * factor, this.hsla.a));\n  }\n\n  darken(factor) {\n    return new Color(new HSLA(this.hsla.h, this.hsla.s, this.hsla.l - this.hsla.l * factor, this.hsla.a));\n  }\n\n  transparent(factor) {\n    const {\n      r,\n      g,\n      b,\n      a\n    } = this.rgba;\n    return new Color(new RGBA(r, g, b, a * factor));\n  }\n\n  isTransparent() {\n    return this.rgba.a === 0;\n  }\n\n  isOpaque() {\n    return this.rgba.a === 1;\n  }\n\n  opposite() {\n    return new Color(new RGBA(255 - this.rgba.r, 255 - this.rgba.g, 255 - this.rgba.b, this.rgba.a));\n  }\n\n  toString() {\n    if (!this._toString) {\n      this._toString = Color.Format.CSS.format(this);\n    }\n\n    return this._toString;\n  }\n\n  static getLighterColor(of, relative, factor) {\n    if (of.isLighterThan(relative)) {\n      return of;\n    }\n\n    factor = factor ? factor : 0.5;\n    const lum1 = of.getRelativeLuminance();\n    const lum2 = relative.getRelativeLuminance();\n    factor = factor * (lum2 - lum1) / lum2;\n    return of.lighten(factor);\n  }\n\n  static getDarkerColor(of, relative, factor) {\n    if (of.isDarkerThan(relative)) {\n      return of;\n    }\n\n    factor = factor ? factor : 0.5;\n    const lum1 = of.getRelativeLuminance();\n    const lum2 = relative.getRelativeLuminance();\n    factor = factor * (lum1 - lum2) / lum1;\n    return of.darken(factor);\n  }\n\n}\nColor.white = new Color(new RGBA(255, 255, 255, 1));\nColor.black = new Color(new RGBA(0, 0, 0, 1));\nColor.red = new Color(new RGBA(255, 0, 0, 1));\nColor.blue = new Color(new RGBA(0, 0, 255, 1));\nColor.green = new Color(new RGBA(0, 255, 0, 1));\nColor.cyan = new Color(new RGBA(0, 255, 255, 1));\nColor.lightgrey = new Color(new RGBA(211, 211, 211, 1));\nColor.transparent = new Color(new RGBA(0, 0, 0, 0));\n\n(function (Color) {\n  let Format;\n\n  (function (Format) {\n    let CSS;\n\n    (function (CSS) {\n      function formatRGB(color) {\n        if (color.rgba.a === 1) {\n          return `rgb(${color.rgba.r}, ${color.rgba.g}, ${color.rgba.b})`;\n        }\n\n        return Color.Format.CSS.formatRGBA(color);\n      }\n\n      CSS.formatRGB = formatRGB;\n\n      function formatRGBA(color) {\n        return `rgba(${color.rgba.r}, ${color.rgba.g}, ${color.rgba.b}, ${+color.rgba.a.toFixed(2)})`;\n      }\n\n      CSS.formatRGBA = formatRGBA;\n\n      function formatHSL(color) {\n        if (color.hsla.a === 1) {\n          return `hsl(${color.hsla.h}, ${(color.hsla.s * 100).toFixed(2)}%, ${(color.hsla.l * 100).toFixed(2)}%)`;\n        }\n\n        return Color.Format.CSS.formatHSLA(color);\n      }\n\n      CSS.formatHSL = formatHSL;\n\n      function formatHSLA(color) {\n        return `hsla(${color.hsla.h}, ${(color.hsla.s * 100).toFixed(2)}%, ${(color.hsla.l * 100).toFixed(2)}%, ${color.hsla.a.toFixed(2)})`;\n      }\n\n      CSS.formatHSLA = formatHSLA;\n\n      function _toTwoDigitHex(n) {\n        const r = n.toString(16);\n        return r.length !== 2 ? '0' + r : r;\n      }\n      /**\n       * Formats the color as #RRGGBB\n       */\n\n\n      function formatHex(color) {\n        return `#${_toTwoDigitHex(color.rgba.r)}${_toTwoDigitHex(color.rgba.g)}${_toTwoDigitHex(color.rgba.b)}`;\n      }\n\n      CSS.formatHex = formatHex;\n      /**\n       * Formats the color as #RRGGBBAA\n       * If 'compact' is set, colors without transparancy will be printed as #RRGGBB\n       */\n\n      function formatHexA(color, compact = false) {\n        if (compact && color.rgba.a === 1) {\n          return Color.Format.CSS.formatHex(color);\n        }\n\n        return `#${_toTwoDigitHex(color.rgba.r)}${_toTwoDigitHex(color.rgba.g)}${_toTwoDigitHex(color.rgba.b)}${_toTwoDigitHex(Math.round(color.rgba.a * 255))}`;\n      }\n\n      CSS.formatHexA = formatHexA;\n      /**\n       * The default format will use HEX if opaque and RGBA otherwise.\n       */\n\n      function format(color) {\n        if (color.isOpaque()) {\n          return Color.Format.CSS.formatHex(color);\n        }\n\n        return Color.Format.CSS.formatRGBA(color);\n      }\n\n      CSS.format = format;\n      /**\n       * Converts an Hex color value to a Color.\n       * returns r, g, and b are contained in the set [0, 255]\n       * @param hex string (#RGB, #RGBA, #RRGGBB or #RRGGBBAA).\n       */\n\n      function parseHex(hex) {\n        const length = hex.length;\n\n        if (length === 0) {\n          // Invalid color\n          return null;\n        }\n\n        if (hex.charCodeAt(0) !== 35\n        /* Hash */\n        ) {\n          // Does not begin with a #\n          return null;\n        }\n\n        if (length === 7) {\n          // #RRGGBB format\n          const r = 16 * _parseHexDigit(hex.charCodeAt(1)) + _parseHexDigit(hex.charCodeAt(2));\n\n          const g = 16 * _parseHexDigit(hex.charCodeAt(3)) + _parseHexDigit(hex.charCodeAt(4));\n\n          const b = 16 * _parseHexDigit(hex.charCodeAt(5)) + _parseHexDigit(hex.charCodeAt(6));\n\n          return new Color(new RGBA(r, g, b, 1));\n        }\n\n        if (length === 9) {\n          // #RRGGBBAA format\n          const r = 16 * _parseHexDigit(hex.charCodeAt(1)) + _parseHexDigit(hex.charCodeAt(2));\n\n          const g = 16 * _parseHexDigit(hex.charCodeAt(3)) + _parseHexDigit(hex.charCodeAt(4));\n\n          const b = 16 * _parseHexDigit(hex.charCodeAt(5)) + _parseHexDigit(hex.charCodeAt(6));\n\n          const a = 16 * _parseHexDigit(hex.charCodeAt(7)) + _parseHexDigit(hex.charCodeAt(8));\n\n          return new Color(new RGBA(r, g, b, a / 255));\n        }\n\n        if (length === 4) {\n          // #RGB format\n          const r = _parseHexDigit(hex.charCodeAt(1));\n\n          const g = _parseHexDigit(hex.charCodeAt(2));\n\n          const b = _parseHexDigit(hex.charCodeAt(3));\n\n          return new Color(new RGBA(16 * r + r, 16 * g + g, 16 * b + b));\n        }\n\n        if (length === 5) {\n          // #RGBA format\n          const r = _parseHexDigit(hex.charCodeAt(1));\n\n          const g = _parseHexDigit(hex.charCodeAt(2));\n\n          const b = _parseHexDigit(hex.charCodeAt(3));\n\n          const a = _parseHexDigit(hex.charCodeAt(4));\n\n          return new Color(new RGBA(16 * r + r, 16 * g + g, 16 * b + b, (16 * a + a) / 255));\n        } // Invalid color\n\n\n        return null;\n      }\n\n      CSS.parseHex = parseHex;\n\n      function _parseHexDigit(charCode) {\n        switch (charCode) {\n          case 48\n          /* Digit0 */\n          :\n            return 0;\n\n          case 49\n          /* Digit1 */\n          :\n            return 1;\n\n          case 50\n          /* Digit2 */\n          :\n            return 2;\n\n          case 51\n          /* Digit3 */\n          :\n            return 3;\n\n          case 52\n          /* Digit4 */\n          :\n            return 4;\n\n          case 53\n          /* Digit5 */\n          :\n            return 5;\n\n          case 54\n          /* Digit6 */\n          :\n            return 6;\n\n          case 55\n          /* Digit7 */\n          :\n            return 7;\n\n          case 56\n          /* Digit8 */\n          :\n            return 8;\n\n          case 57\n          /* Digit9 */\n          :\n            return 9;\n\n          case 97\n          /* a */\n          :\n            return 10;\n\n          case 65\n          /* A */\n          :\n            return 10;\n\n          case 98\n          /* b */\n          :\n            return 11;\n\n          case 66\n          /* B */\n          :\n            return 11;\n\n          case 99\n          /* c */\n          :\n            return 12;\n\n          case 67\n          /* C */\n          :\n            return 12;\n\n          case 100\n          /* d */\n          :\n            return 13;\n\n          case 68\n          /* D */\n          :\n            return 13;\n\n          case 101\n          /* e */\n          :\n            return 14;\n\n          case 69\n          /* E */\n          :\n            return 14;\n\n          case 102\n          /* f */\n          :\n            return 15;\n\n          case 70\n          /* F */\n          :\n            return 15;\n        }\n\n        return 0;\n      }\n    })(CSS = Format.CSS || (Format.CSS = {}));\n  })(Format = Color.Format || (Color.Format = {}));\n})(Color || (Color = {}));","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/base/common/color.js"],"names":["roundFloat","number","decimalPoints","decimal","Math","pow","round","RGBA","constructor","r","g","b","a","_rgbaBrand","undefined","min","max","equals","HSLA","h","s","l","_hslaBrand","fromRGBA","rgba","chroma","_hue2rgb","p","q","t","toRGBA","hsla","HSVA","v","_hsvaBrand","cmax","cmin","delta","m","hsva","c","x","abs","Color","arg","Error","_hsla","_hsva","fromHex","hex","Format","CSS","parseHex","red","other","getRelativeLuminance","R","_relativeLuminanceForComponent","G","B","luminance","color","isLighter","yiq","isLighterThan","another","lum1","lum2","isDarkerThan","lighten","factor","darken","transparent","isTransparent","isOpaque","opposite","toString","_toString","format","getLighterColor","of","relative","getDarkerColor","white","black","blue","green","cyan","lightgrey","formatRGB","formatRGBA","toFixed","formatHSL","formatHSLA","_toTwoDigitHex","n","length","formatHex","formatHexA","compact","charCodeAt","_parseHexDigit","charCode"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nfunction roundFloat(number, decimalPoints) {\n    const decimal = Math.pow(10, decimalPoints);\n    return Math.round(number * decimal) / decimal;\n}\nexport class RGBA {\n    constructor(r, g, b, a = 1) {\n        this._rgbaBrand = undefined;\n        this.r = Math.min(255, Math.max(0, r)) | 0;\n        this.g = Math.min(255, Math.max(0, g)) | 0;\n        this.b = Math.min(255, Math.max(0, b)) | 0;\n        this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\n    }\n    static equals(a, b) {\n        return a.r === b.r && a.g === b.g && a.b === b.b && a.a === b.a;\n    }\n}\nexport class HSLA {\n    constructor(h, s, l, a) {\n        this._hslaBrand = undefined;\n        this.h = Math.max(Math.min(360, h), 0) | 0;\n        this.s = roundFloat(Math.max(Math.min(1, s), 0), 3);\n        this.l = roundFloat(Math.max(Math.min(1, l), 0), 3);\n        this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\n    }\n    static equals(a, b) {\n        return a.h === b.h && a.s === b.s && a.l === b.l && a.a === b.a;\n    }\n    /**\n     * Converts an RGB color value to HSL. Conversion formula\n     * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n     * Assumes r, g, and b are contained in the set [0, 255] and\n     * returns h in the set [0, 360], s, and l in the set [0, 1].\n     */\n    static fromRGBA(rgba) {\n        const r = rgba.r / 255;\n        const g = rgba.g / 255;\n        const b = rgba.b / 255;\n        const a = rgba.a;\n        const max = Math.max(r, g, b);\n        const min = Math.min(r, g, b);\n        let h = 0;\n        let s = 0;\n        const l = (min + max) / 2;\n        const chroma = max - min;\n        if (chroma > 0) {\n            s = Math.min((l <= 0.5 ? chroma / (2 * l) : chroma / (2 - (2 * l))), 1);\n            switch (max) {\n                case r:\n                    h = (g - b) / chroma + (g < b ? 6 : 0);\n                    break;\n                case g:\n                    h = (b - r) / chroma + 2;\n                    break;\n                case b:\n                    h = (r - g) / chroma + 4;\n                    break;\n            }\n            h *= 60;\n            h = Math.round(h);\n        }\n        return new HSLA(h, s, l, a);\n    }\n    static _hue2rgb(p, q, t) {\n        if (t < 0) {\n            t += 1;\n        }\n        if (t > 1) {\n            t -= 1;\n        }\n        if (t < 1 / 6) {\n            return p + (q - p) * 6 * t;\n        }\n        if (t < 1 / 2) {\n            return q;\n        }\n        if (t < 2 / 3) {\n            return p + (q - p) * (2 / 3 - t) * 6;\n        }\n        return p;\n    }\n    /**\n     * Converts an HSL color value to RGB. Conversion formula\n     * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n     * Assumes h in the set [0, 360] s, and l are contained in the set [0, 1] and\n     * returns r, g, and b in the set [0, 255].\n     */\n    static toRGBA(hsla) {\n        const h = hsla.h / 360;\n        const { s, l, a } = hsla;\n        let r, g, b;\n        if (s === 0) {\n            r = g = b = l; // achromatic\n        }\n        else {\n            const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n            const p = 2 * l - q;\n            r = HSLA._hue2rgb(p, q, h + 1 / 3);\n            g = HSLA._hue2rgb(p, q, h);\n            b = HSLA._hue2rgb(p, q, h - 1 / 3);\n        }\n        return new RGBA(Math.round(r * 255), Math.round(g * 255), Math.round(b * 255), a);\n    }\n}\nexport class HSVA {\n    constructor(h, s, v, a) {\n        this._hsvaBrand = undefined;\n        this.h = Math.max(Math.min(360, h), 0) | 0;\n        this.s = roundFloat(Math.max(Math.min(1, s), 0), 3);\n        this.v = roundFloat(Math.max(Math.min(1, v), 0), 3);\n        this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\n    }\n    static equals(a, b) {\n        return a.h === b.h && a.s === b.s && a.v === b.v && a.a === b.a;\n    }\n    // from http://www.rapidtables.com/convert/color/rgb-to-hsv.htm\n    static fromRGBA(rgba) {\n        const r = rgba.r / 255;\n        const g = rgba.g / 255;\n        const b = rgba.b / 255;\n        const cmax = Math.max(r, g, b);\n        const cmin = Math.min(r, g, b);\n        const delta = cmax - cmin;\n        const s = cmax === 0 ? 0 : (delta / cmax);\n        let m;\n        if (delta === 0) {\n            m = 0;\n        }\n        else if (cmax === r) {\n            m = ((((g - b) / delta) % 6) + 6) % 6;\n        }\n        else if (cmax === g) {\n            m = ((b - r) / delta) + 2;\n        }\n        else {\n            m = ((r - g) / delta) + 4;\n        }\n        return new HSVA(Math.round(m * 60), s, cmax, rgba.a);\n    }\n    // from http://www.rapidtables.com/convert/color/hsv-to-rgb.htm\n    static toRGBA(hsva) {\n        const { h, s, v, a } = hsva;\n        const c = v * s;\n        const x = c * (1 - Math.abs((h / 60) % 2 - 1));\n        const m = v - c;\n        let [r, g, b] = [0, 0, 0];\n        if (h < 60) {\n            r = c;\n            g = x;\n        }\n        else if (h < 120) {\n            r = x;\n            g = c;\n        }\n        else if (h < 180) {\n            g = c;\n            b = x;\n        }\n        else if (h < 240) {\n            g = x;\n            b = c;\n        }\n        else if (h < 300) {\n            r = x;\n            b = c;\n        }\n        else if (h <= 360) {\n            r = c;\n            b = x;\n        }\n        r = Math.round((r + m) * 255);\n        g = Math.round((g + m) * 255);\n        b = Math.round((b + m) * 255);\n        return new RGBA(r, g, b, a);\n    }\n}\nexport class Color {\n    constructor(arg) {\n        if (!arg) {\n            throw new Error('Color needs a value');\n        }\n        else if (arg instanceof RGBA) {\n            this.rgba = arg;\n        }\n        else if (arg instanceof HSLA) {\n            this._hsla = arg;\n            this.rgba = HSLA.toRGBA(arg);\n        }\n        else if (arg instanceof HSVA) {\n            this._hsva = arg;\n            this.rgba = HSVA.toRGBA(arg);\n        }\n        else {\n            throw new Error('Invalid color ctor argument');\n        }\n    }\n    static fromHex(hex) {\n        return Color.Format.CSS.parseHex(hex) || Color.red;\n    }\n    get hsla() {\n        if (this._hsla) {\n            return this._hsla;\n        }\n        else {\n            return HSLA.fromRGBA(this.rgba);\n        }\n    }\n    get hsva() {\n        if (this._hsva) {\n            return this._hsva;\n        }\n        return HSVA.fromRGBA(this.rgba);\n    }\n    equals(other) {\n        return !!other && RGBA.equals(this.rgba, other.rgba) && HSLA.equals(this.hsla, other.hsla) && HSVA.equals(this.hsva, other.hsva);\n    }\n    /**\n     * http://www.w3.org/TR/WCAG20/#relativeluminancedef\n     * Returns the number in the set [0, 1]. O => Darkest Black. 1 => Lightest white.\n     */\n    getRelativeLuminance() {\n        const R = Color._relativeLuminanceForComponent(this.rgba.r);\n        const G = Color._relativeLuminanceForComponent(this.rgba.g);\n        const B = Color._relativeLuminanceForComponent(this.rgba.b);\n        const luminance = 0.2126 * R + 0.7152 * G + 0.0722 * B;\n        return roundFloat(luminance, 4);\n    }\n    static _relativeLuminanceForComponent(color) {\n        const c = color / 255;\n        return (c <= 0.03928) ? c / 12.92 : Math.pow(((c + 0.055) / 1.055), 2.4);\n    }\n    /**\n     *\thttp://24ways.org/2010/calculating-color-contrast\n     *  Return 'true' if lighter color otherwise 'false'\n     */\n    isLighter() {\n        const yiq = (this.rgba.r * 299 + this.rgba.g * 587 + this.rgba.b * 114) / 1000;\n        return yiq >= 128;\n    }\n    isLighterThan(another) {\n        const lum1 = this.getRelativeLuminance();\n        const lum2 = another.getRelativeLuminance();\n        return lum1 > lum2;\n    }\n    isDarkerThan(another) {\n        const lum1 = this.getRelativeLuminance();\n        const lum2 = another.getRelativeLuminance();\n        return lum1 < lum2;\n    }\n    lighten(factor) {\n        return new Color(new HSLA(this.hsla.h, this.hsla.s, this.hsla.l + this.hsla.l * factor, this.hsla.a));\n    }\n    darken(factor) {\n        return new Color(new HSLA(this.hsla.h, this.hsla.s, this.hsla.l - this.hsla.l * factor, this.hsla.a));\n    }\n    transparent(factor) {\n        const { r, g, b, a } = this.rgba;\n        return new Color(new RGBA(r, g, b, a * factor));\n    }\n    isTransparent() {\n        return this.rgba.a === 0;\n    }\n    isOpaque() {\n        return this.rgba.a === 1;\n    }\n    opposite() {\n        return new Color(new RGBA(255 - this.rgba.r, 255 - this.rgba.g, 255 - this.rgba.b, this.rgba.a));\n    }\n    toString() {\n        if (!this._toString) {\n            this._toString = Color.Format.CSS.format(this);\n        }\n        return this._toString;\n    }\n    static getLighterColor(of, relative, factor) {\n        if (of.isLighterThan(relative)) {\n            return of;\n        }\n        factor = factor ? factor : 0.5;\n        const lum1 = of.getRelativeLuminance();\n        const lum2 = relative.getRelativeLuminance();\n        factor = factor * (lum2 - lum1) / lum2;\n        return of.lighten(factor);\n    }\n    static getDarkerColor(of, relative, factor) {\n        if (of.isDarkerThan(relative)) {\n            return of;\n        }\n        factor = factor ? factor : 0.5;\n        const lum1 = of.getRelativeLuminance();\n        const lum2 = relative.getRelativeLuminance();\n        factor = factor * (lum1 - lum2) / lum1;\n        return of.darken(factor);\n    }\n}\nColor.white = new Color(new RGBA(255, 255, 255, 1));\nColor.black = new Color(new RGBA(0, 0, 0, 1));\nColor.red = new Color(new RGBA(255, 0, 0, 1));\nColor.blue = new Color(new RGBA(0, 0, 255, 1));\nColor.green = new Color(new RGBA(0, 255, 0, 1));\nColor.cyan = new Color(new RGBA(0, 255, 255, 1));\nColor.lightgrey = new Color(new RGBA(211, 211, 211, 1));\nColor.transparent = new Color(new RGBA(0, 0, 0, 0));\n(function (Color) {\n    let Format;\n    (function (Format) {\n        let CSS;\n        (function (CSS) {\n            function formatRGB(color) {\n                if (color.rgba.a === 1) {\n                    return `rgb(${color.rgba.r}, ${color.rgba.g}, ${color.rgba.b})`;\n                }\n                return Color.Format.CSS.formatRGBA(color);\n            }\n            CSS.formatRGB = formatRGB;\n            function formatRGBA(color) {\n                return `rgba(${color.rgba.r}, ${color.rgba.g}, ${color.rgba.b}, ${+(color.rgba.a).toFixed(2)})`;\n            }\n            CSS.formatRGBA = formatRGBA;\n            function formatHSL(color) {\n                if (color.hsla.a === 1) {\n                    return `hsl(${color.hsla.h}, ${(color.hsla.s * 100).toFixed(2)}%, ${(color.hsla.l * 100).toFixed(2)}%)`;\n                }\n                return Color.Format.CSS.formatHSLA(color);\n            }\n            CSS.formatHSL = formatHSL;\n            function formatHSLA(color) {\n                return `hsla(${color.hsla.h}, ${(color.hsla.s * 100).toFixed(2)}%, ${(color.hsla.l * 100).toFixed(2)}%, ${color.hsla.a.toFixed(2)})`;\n            }\n            CSS.formatHSLA = formatHSLA;\n            function _toTwoDigitHex(n) {\n                const r = n.toString(16);\n                return r.length !== 2 ? '0' + r : r;\n            }\n            /**\n             * Formats the color as #RRGGBB\n             */\n            function formatHex(color) {\n                return `#${_toTwoDigitHex(color.rgba.r)}${_toTwoDigitHex(color.rgba.g)}${_toTwoDigitHex(color.rgba.b)}`;\n            }\n            CSS.formatHex = formatHex;\n            /**\n             * Formats the color as #RRGGBBAA\n             * If 'compact' is set, colors without transparancy will be printed as #RRGGBB\n             */\n            function formatHexA(color, compact = false) {\n                if (compact && color.rgba.a === 1) {\n                    return Color.Format.CSS.formatHex(color);\n                }\n                return `#${_toTwoDigitHex(color.rgba.r)}${_toTwoDigitHex(color.rgba.g)}${_toTwoDigitHex(color.rgba.b)}${_toTwoDigitHex(Math.round(color.rgba.a * 255))}`;\n            }\n            CSS.formatHexA = formatHexA;\n            /**\n             * The default format will use HEX if opaque and RGBA otherwise.\n             */\n            function format(color) {\n                if (color.isOpaque()) {\n                    return Color.Format.CSS.formatHex(color);\n                }\n                return Color.Format.CSS.formatRGBA(color);\n            }\n            CSS.format = format;\n            /**\n             * Converts an Hex color value to a Color.\n             * returns r, g, and b are contained in the set [0, 255]\n             * @param hex string (#RGB, #RGBA, #RRGGBB or #RRGGBBAA).\n             */\n            function parseHex(hex) {\n                const length = hex.length;\n                if (length === 0) {\n                    // Invalid color\n                    return null;\n                }\n                if (hex.charCodeAt(0) !== 35 /* Hash */) {\n                    // Does not begin with a #\n                    return null;\n                }\n                if (length === 7) {\n                    // #RRGGBB format\n                    const r = 16 * _parseHexDigit(hex.charCodeAt(1)) + _parseHexDigit(hex.charCodeAt(2));\n                    const g = 16 * _parseHexDigit(hex.charCodeAt(3)) + _parseHexDigit(hex.charCodeAt(4));\n                    const b = 16 * _parseHexDigit(hex.charCodeAt(5)) + _parseHexDigit(hex.charCodeAt(6));\n                    return new Color(new RGBA(r, g, b, 1));\n                }\n                if (length === 9) {\n                    // #RRGGBBAA format\n                    const r = 16 * _parseHexDigit(hex.charCodeAt(1)) + _parseHexDigit(hex.charCodeAt(2));\n                    const g = 16 * _parseHexDigit(hex.charCodeAt(3)) + _parseHexDigit(hex.charCodeAt(4));\n                    const b = 16 * _parseHexDigit(hex.charCodeAt(5)) + _parseHexDigit(hex.charCodeAt(6));\n                    const a = 16 * _parseHexDigit(hex.charCodeAt(7)) + _parseHexDigit(hex.charCodeAt(8));\n                    return new Color(new RGBA(r, g, b, a / 255));\n                }\n                if (length === 4) {\n                    // #RGB format\n                    const r = _parseHexDigit(hex.charCodeAt(1));\n                    const g = _parseHexDigit(hex.charCodeAt(2));\n                    const b = _parseHexDigit(hex.charCodeAt(3));\n                    return new Color(new RGBA(16 * r + r, 16 * g + g, 16 * b + b));\n                }\n                if (length === 5) {\n                    // #RGBA format\n                    const r = _parseHexDigit(hex.charCodeAt(1));\n                    const g = _parseHexDigit(hex.charCodeAt(2));\n                    const b = _parseHexDigit(hex.charCodeAt(3));\n                    const a = _parseHexDigit(hex.charCodeAt(4));\n                    return new Color(new RGBA(16 * r + r, 16 * g + g, 16 * b + b, (16 * a + a) / 255));\n                }\n                // Invalid color\n                return null;\n            }\n            CSS.parseHex = parseHex;\n            function _parseHexDigit(charCode) {\n                switch (charCode) {\n                    case 48 /* Digit0 */: return 0;\n                    case 49 /* Digit1 */: return 1;\n                    case 50 /* Digit2 */: return 2;\n                    case 51 /* Digit3 */: return 3;\n                    case 52 /* Digit4 */: return 4;\n                    case 53 /* Digit5 */: return 5;\n                    case 54 /* Digit6 */: return 6;\n                    case 55 /* Digit7 */: return 7;\n                    case 56 /* Digit8 */: return 8;\n                    case 57 /* Digit9 */: return 9;\n                    case 97 /* a */: return 10;\n                    case 65 /* A */: return 10;\n                    case 98 /* b */: return 11;\n                    case 66 /* B */: return 11;\n                    case 99 /* c */: return 12;\n                    case 67 /* C */: return 12;\n                    case 100 /* d */: return 13;\n                    case 68 /* D */: return 13;\n                    case 101 /* e */: return 14;\n                    case 69 /* E */: return 14;\n                    case 102 /* f */: return 15;\n                    case 70 /* F */: return 15;\n                }\n                return 0;\n            }\n        })(CSS = Format.CSS || (Format.CSS = {}));\n    })(Format = Color.Format || (Color.Format = {}));\n})(Color || (Color = {}));\n"]},"metadata":{},"sourceType":"module"}