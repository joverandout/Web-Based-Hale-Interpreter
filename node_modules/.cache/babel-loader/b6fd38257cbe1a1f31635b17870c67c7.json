{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { AbstractTree } from './abstractTree.js';\nimport { CompressibleObjectTreeModel } from './compressedObjectTreeModel.js';\nimport { ObjectTreeModel } from './objectTreeModel.js';\nimport { memoize } from '../../../common/decorators.js';\nimport { Iterable } from '../../../common/iterator.js';\nexport class ObjectTree extends AbstractTree {\n  constructor(user, container, delegate, renderers, options = {}) {\n    super(user, container, delegate, renderers, options);\n    this.user = user;\n  }\n\n  get onDidChangeCollapseState() {\n    return this.model.onDidChangeCollapseState;\n  }\n\n  setChildren(element, children = Iterable.empty(), options) {\n    this.model.setChildren(element, children, options);\n  }\n\n  rerender(element) {\n    if (element === undefined) {\n      this.view.rerender();\n      return;\n    }\n\n    this.model.rerender(element);\n  }\n\n  hasElement(element) {\n    return this.model.has(element);\n  }\n\n  createModel(user, view, options) {\n    return new ObjectTreeModel(user, view, options);\n  }\n\n}\n\nclass CompressibleRenderer {\n  constructor(_compressedTreeNodeProvider, renderer) {\n    this._compressedTreeNodeProvider = _compressedTreeNodeProvider;\n    this.renderer = renderer;\n    this.templateId = renderer.templateId;\n\n    if (renderer.onDidChangeTwistieState) {\n      this.onDidChangeTwistieState = renderer.onDidChangeTwistieState;\n    }\n  }\n\n  get compressedTreeNodeProvider() {\n    return this._compressedTreeNodeProvider();\n  }\n\n  renderTemplate(container) {\n    const data = this.renderer.renderTemplate(container);\n    return {\n      compressedTreeNode: undefined,\n      data\n    };\n  }\n\n  renderElement(node, index, templateData, height) {\n    const compressedTreeNode = this.compressedTreeNodeProvider.getCompressedTreeNode(node.element);\n\n    if (compressedTreeNode.element.elements.length === 1) {\n      templateData.compressedTreeNode = undefined;\n      this.renderer.renderElement(node, index, templateData.data, height);\n    } else {\n      templateData.compressedTreeNode = compressedTreeNode;\n      this.renderer.renderCompressedElements(compressedTreeNode, index, templateData.data, height);\n    }\n  }\n\n  disposeElement(node, index, templateData, height) {\n    if (templateData.compressedTreeNode) {\n      if (this.renderer.disposeCompressedElements) {\n        this.renderer.disposeCompressedElements(templateData.compressedTreeNode, index, templateData.data, height);\n      }\n    } else {\n      if (this.renderer.disposeElement) {\n        this.renderer.disposeElement(node, index, templateData.data, height);\n      }\n    }\n  }\n\n  disposeTemplate(templateData) {\n    this.renderer.disposeTemplate(templateData.data);\n  }\n\n  renderTwistie(element, twistieElement) {\n    if (this.renderer.renderTwistie) {\n      return this.renderer.renderTwistie(element, twistieElement);\n    }\n\n    return false;\n  }\n\n}\n\n__decorate([memoize], CompressibleRenderer.prototype, \"compressedTreeNodeProvider\", null);\n\nfunction asObjectTreeOptions(compressedTreeNodeProvider, options) {\n  return options && Object.assign(Object.assign({}, options), {\n    keyboardNavigationLabelProvider: options.keyboardNavigationLabelProvider && {\n      getKeyboardNavigationLabel(e) {\n        let compressedTreeNode;\n\n        try {\n          compressedTreeNode = compressedTreeNodeProvider().getCompressedTreeNode(e);\n        } catch (_a) {\n          return options.keyboardNavigationLabelProvider.getKeyboardNavigationLabel(e);\n        }\n\n        if (compressedTreeNode.element.elements.length === 1) {\n          return options.keyboardNavigationLabelProvider.getKeyboardNavigationLabel(e);\n        } else {\n          return options.keyboardNavigationLabelProvider.getCompressedNodeKeyboardNavigationLabel(compressedTreeNode.element.elements);\n        }\n      }\n\n    }\n  });\n}\n\nexport class CompressibleObjectTree extends ObjectTree {\n  constructor(user, container, delegate, renderers, options = {}) {\n    const compressedTreeNodeProvider = () => this;\n\n    const compressibleRenderers = renderers.map(r => new CompressibleRenderer(compressedTreeNodeProvider, r));\n    super(user, container, delegate, compressibleRenderers, asObjectTreeOptions(compressedTreeNodeProvider, options));\n  }\n\n  setChildren(element, children = Iterable.empty(), options) {\n    this.model.setChildren(element, children, options);\n  }\n\n  createModel(user, view, options) {\n    return new CompressibleObjectTreeModel(user, view, options);\n  }\n\n  updateOptions(optionsUpdate = {}) {\n    super.updateOptions(optionsUpdate);\n\n    if (typeof optionsUpdate.compressionEnabled !== 'undefined') {\n      this.model.setCompressionEnabled(optionsUpdate.compressionEnabled);\n    }\n  }\n\n  getCompressedTreeNode(element = null) {\n    return this.model.getCompressedTreeNode(element);\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/base/browser/ui/tree/objectTree.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","AbstractTree","CompressibleObjectTreeModel","ObjectTreeModel","memoize","Iterable","ObjectTree","constructor","user","container","delegate","renderers","options","onDidChangeCollapseState","model","setChildren","element","children","empty","rerender","undefined","view","hasElement","has","createModel","CompressibleRenderer","_compressedTreeNodeProvider","renderer","templateId","onDidChangeTwistieState","compressedTreeNodeProvider","renderTemplate","data","compressedTreeNode","renderElement","node","index","templateData","height","getCompressedTreeNode","elements","renderCompressedElements","disposeElement","disposeCompressedElements","disposeTemplate","renderTwistie","twistieElement","prototype","asObjectTreeOptions","assign","keyboardNavigationLabelProvider","getKeyboardNavigationLabel","e","_a","getCompressedNodeKeyboardNavigationLabel","CompressibleObjectTree","compressibleRenderers","map","updateOptions","optionsUpdate","compressionEnabled","setCompressionEnabled"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { AbstractTree } from './abstractTree.js';\nimport { CompressibleObjectTreeModel } from './compressedObjectTreeModel.js';\nimport { ObjectTreeModel } from './objectTreeModel.js';\nimport { memoize } from '../../../common/decorators.js';\nimport { Iterable } from '../../../common/iterator.js';\nexport class ObjectTree extends AbstractTree {\n    constructor(user, container, delegate, renderers, options = {}) {\n        super(user, container, delegate, renderers, options);\n        this.user = user;\n    }\n    get onDidChangeCollapseState() { return this.model.onDidChangeCollapseState; }\n    setChildren(element, children = Iterable.empty(), options) {\n        this.model.setChildren(element, children, options);\n    }\n    rerender(element) {\n        if (element === undefined) {\n            this.view.rerender();\n            return;\n        }\n        this.model.rerender(element);\n    }\n    hasElement(element) {\n        return this.model.has(element);\n    }\n    createModel(user, view, options) {\n        return new ObjectTreeModel(user, view, options);\n    }\n}\nclass CompressibleRenderer {\n    constructor(_compressedTreeNodeProvider, renderer) {\n        this._compressedTreeNodeProvider = _compressedTreeNodeProvider;\n        this.renderer = renderer;\n        this.templateId = renderer.templateId;\n        if (renderer.onDidChangeTwistieState) {\n            this.onDidChangeTwistieState = renderer.onDidChangeTwistieState;\n        }\n    }\n    get compressedTreeNodeProvider() {\n        return this._compressedTreeNodeProvider();\n    }\n    renderTemplate(container) {\n        const data = this.renderer.renderTemplate(container);\n        return { compressedTreeNode: undefined, data };\n    }\n    renderElement(node, index, templateData, height) {\n        const compressedTreeNode = this.compressedTreeNodeProvider.getCompressedTreeNode(node.element);\n        if (compressedTreeNode.element.elements.length === 1) {\n            templateData.compressedTreeNode = undefined;\n            this.renderer.renderElement(node, index, templateData.data, height);\n        }\n        else {\n            templateData.compressedTreeNode = compressedTreeNode;\n            this.renderer.renderCompressedElements(compressedTreeNode, index, templateData.data, height);\n        }\n    }\n    disposeElement(node, index, templateData, height) {\n        if (templateData.compressedTreeNode) {\n            if (this.renderer.disposeCompressedElements) {\n                this.renderer.disposeCompressedElements(templateData.compressedTreeNode, index, templateData.data, height);\n            }\n        }\n        else {\n            if (this.renderer.disposeElement) {\n                this.renderer.disposeElement(node, index, templateData.data, height);\n            }\n        }\n    }\n    disposeTemplate(templateData) {\n        this.renderer.disposeTemplate(templateData.data);\n    }\n    renderTwistie(element, twistieElement) {\n        if (this.renderer.renderTwistie) {\n            return this.renderer.renderTwistie(element, twistieElement);\n        }\n        return false;\n    }\n}\n__decorate([\n    memoize\n], CompressibleRenderer.prototype, \"compressedTreeNodeProvider\", null);\nfunction asObjectTreeOptions(compressedTreeNodeProvider, options) {\n    return options && Object.assign(Object.assign({}, options), { keyboardNavigationLabelProvider: options.keyboardNavigationLabelProvider && {\n            getKeyboardNavigationLabel(e) {\n                let compressedTreeNode;\n                try {\n                    compressedTreeNode = compressedTreeNodeProvider().getCompressedTreeNode(e);\n                }\n                catch (_a) {\n                    return options.keyboardNavigationLabelProvider.getKeyboardNavigationLabel(e);\n                }\n                if (compressedTreeNode.element.elements.length === 1) {\n                    return options.keyboardNavigationLabelProvider.getKeyboardNavigationLabel(e);\n                }\n                else {\n                    return options.keyboardNavigationLabelProvider.getCompressedNodeKeyboardNavigationLabel(compressedTreeNode.element.elements);\n                }\n            }\n        } });\n}\nexport class CompressibleObjectTree extends ObjectTree {\n    constructor(user, container, delegate, renderers, options = {}) {\n        const compressedTreeNodeProvider = () => this;\n        const compressibleRenderers = renderers.map(r => new CompressibleRenderer(compressedTreeNodeProvider, r));\n        super(user, container, delegate, compressibleRenderers, asObjectTreeOptions(compressedTreeNodeProvider, options));\n    }\n    setChildren(element, children = Iterable.empty(), options) {\n        this.model.setChildren(element, children, options);\n    }\n    createModel(user, view, options) {\n        return new CompressibleObjectTreeModel(user, view, options);\n    }\n    updateOptions(optionsUpdate = {}) {\n        super.updateOptions(optionsUpdate);\n        if (typeof optionsUpdate.compressionEnabled !== 'undefined') {\n            this.model.setCompressionEnabled(optionsUpdate.compressionEnabled);\n        }\n    }\n    getCompressedTreeNode(element = null) {\n        return this.model.getCompressedTreeNode(element);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}