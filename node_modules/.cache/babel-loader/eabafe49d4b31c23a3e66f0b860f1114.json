{"ast":null,"code":"/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n// src/basic-languages/qsharp/qsharp.ts\nvar conf = {\n  comments: {\n    lineComment: \"//\"\n  },\n  brackets: [[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"]],\n  autoClosingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: '\"',\n    close: '\"',\n    notIn: [\"string\", \"comment\"]\n  }],\n  surroundingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }]\n};\nvar language = {\n  keywords: [\"namespace\", \"open\", \"as\", \"operation\", \"function\", \"body\", \"adjoint\", \"newtype\", \"controlled\", \"if\", \"elif\", \"else\", \"repeat\", \"until\", \"fixup\", \"for\", \"in\", \"while\", \"return\", \"fail\", \"within\", \"apply\", \"Adjoint\", \"Controlled\", \"Adj\", \"Ctl\", \"is\", \"self\", \"auto\", \"distribute\", \"invert\", \"intrinsic\", \"let\", \"set\", \"w/\", \"new\", \"not\", \"and\", \"or\", \"use\", \"borrow\", \"using\", \"borrowing\", \"mutable\"],\n  typeKeywords: [\"Unit\", \"Int\", \"BigInt\", \"Double\", \"Bool\", \"String\", \"Qubit\", \"Result\", \"Pauli\", \"Range\"],\n  invalidKeywords: [\"abstract\", \"base\", \"bool\", \"break\", \"byte\", \"case\", \"catch\", \"char\", \"checked\", \"class\", \"const\", \"continue\", \"decimal\", \"default\", \"delegate\", \"do\", \"double\", \"enum\", \"event\", \"explicit\", \"extern\", \"finally\", \"fixed\", \"float\", \"foreach\", \"goto\", \"implicit\", \"int\", \"interface\", \"lock\", \"long\", \"null\", \"object\", \"operator\", \"out\", \"override\", \"params\", \"private\", \"protected\", \"public\", \"readonly\", \"ref\", \"sbyte\", \"sealed\", \"short\", \"sizeof\", \"stackalloc\", \"static\", \"string\", \"struct\", \"switch\", \"this\", \"throw\", \"try\", \"typeof\", \"unit\", \"ulong\", \"unchecked\", \"unsafe\", \"ushort\", \"virtual\", \"void\", \"volatile\"],\n  constants: [\"true\", \"false\", \"PauliI\", \"PauliX\", \"PauliY\", \"PauliZ\", \"One\", \"Zero\"],\n  builtin: [\"X\", \"Y\", \"Z\", \"H\", \"HY\", \"S\", \"T\", \"SWAP\", \"CNOT\", \"CCNOT\", \"MultiX\", \"R\", \"RFrac\", \"Rx\", \"Ry\", \"Rz\", \"R1\", \"R1Frac\", \"Exp\", \"ExpFrac\", \"Measure\", \"M\", \"MultiM\", \"Message\", \"Length\", \"Assert\", \"AssertProb\", \"AssertEqual\"],\n  operators: [\"and=\", \"<-\", \"->\", \"*\", \"*=\", \"@\", \"!\", \"^\", \"^=\", \":\", \"::\", \"..\", \"==\", \"...\", \"=\", \"=>\", \">\", \">=\", \"<\", \"<=\", \"-\", \"-=\", \"!=\", \"or=\", \"%\", \"%=\", \"|\", \"+\", \"+=\", \"?\", \"/\", \"/=\", \"&&&\", \"&&&=\", \"^^^\", \"^^^=\", \">>>\", \">>>=\", \"<<<\", \"<<<=\", \"|||\", \"|||=\", \"~~~\", \"_\", \"w/\", \"w/=\"],\n  namespaceFollows: [\"namespace\", \"open\"],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%@._]+/,\n  escapes: /\\\\[\\s\\S]/,\n  tokenizer: {\n    root: [[/[a-zA-Z_$][\\w$]*/, {\n      cases: {\n        \"@namespaceFollows\": {\n          token: \"keyword.$0\",\n          next: \"@namespace\"\n        },\n        \"@typeKeywords\": \"type\",\n        \"@keywords\": \"keyword\",\n        \"@constants\": \"constant\",\n        \"@builtin\": \"keyword\",\n        \"@invalidKeywords\": \"invalid\",\n        \"@default\": \"identifier\"\n      }\n    }], {\n      include: \"@whitespace\"\n    }, [/[{}()\\[\\]]/, \"@brackets\"], [/@symbols/, {\n      cases: {\n        \"@operators\": \"operator\",\n        \"@default\": \"\"\n      }\n    }], [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, \"number.float\"], [/\\d+/, \"number\"], [/[;,.]/, \"delimiter\"], [/\"/, {\n      token: \"string.quote\",\n      bracket: \"@open\",\n      next: \"@string\"\n    }]],\n    string: [[/[^\\\\\"]+/, \"string\"], [/@escapes/, \"string.escape\"], [/\"/, {\n      token: \"string.quote\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    namespace: [{\n      include: \"@whitespace\"\n    }, [/[A-Za-z]\\w*/, \"namespace\"], [/[\\.=]/, \"delimiter\"], [\"\", \"\", \"@pop\"]],\n    whitespace: [[/[ \\t\\r\\n]+/, \"white\"], [/(\\/\\/).*/, \"comment\"]]\n  }\n};\nexport { conf, language };","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/basic-languages/qsharp/qsharp.js"],"names":["conf","comments","lineComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","language","keywords","typeKeywords","invalidKeywords","constants","builtin","operators","namespaceFollows","symbols","escapes","tokenizer","root","cases","token","next","include","bracket","string","namespace","whitespace"],"mappings":"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","sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/qsharp/qsharp.ts\nvar conf = {\n  comments: {\n    lineComment: \"//\"\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"]\n  ],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"', notIn: [\"string\", \"comment\"] }\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"' }\n  ]\n};\nvar language = {\n  keywords: [\n    \"namespace\",\n    \"open\",\n    \"as\",\n    \"operation\",\n    \"function\",\n    \"body\",\n    \"adjoint\",\n    \"newtype\",\n    \"controlled\",\n    \"if\",\n    \"elif\",\n    \"else\",\n    \"repeat\",\n    \"until\",\n    \"fixup\",\n    \"for\",\n    \"in\",\n    \"while\",\n    \"return\",\n    \"fail\",\n    \"within\",\n    \"apply\",\n    \"Adjoint\",\n    \"Controlled\",\n    \"Adj\",\n    \"Ctl\",\n    \"is\",\n    \"self\",\n    \"auto\",\n    \"distribute\",\n    \"invert\",\n    \"intrinsic\",\n    \"let\",\n    \"set\",\n    \"w/\",\n    \"new\",\n    \"not\",\n    \"and\",\n    \"or\",\n    \"use\",\n    \"borrow\",\n    \"using\",\n    \"borrowing\",\n    \"mutable\"\n  ],\n  typeKeywords: [\n    \"Unit\",\n    \"Int\",\n    \"BigInt\",\n    \"Double\",\n    \"Bool\",\n    \"String\",\n    \"Qubit\",\n    \"Result\",\n    \"Pauli\",\n    \"Range\"\n  ],\n  invalidKeywords: [\n    \"abstract\",\n    \"base\",\n    \"bool\",\n    \"break\",\n    \"byte\",\n    \"case\",\n    \"catch\",\n    \"char\",\n    \"checked\",\n    \"class\",\n    \"const\",\n    \"continue\",\n    \"decimal\",\n    \"default\",\n    \"delegate\",\n    \"do\",\n    \"double\",\n    \"enum\",\n    \"event\",\n    \"explicit\",\n    \"extern\",\n    \"finally\",\n    \"fixed\",\n    \"float\",\n    \"foreach\",\n    \"goto\",\n    \"implicit\",\n    \"int\",\n    \"interface\",\n    \"lock\",\n    \"long\",\n    \"null\",\n    \"object\",\n    \"operator\",\n    \"out\",\n    \"override\",\n    \"params\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"readonly\",\n    \"ref\",\n    \"sbyte\",\n    \"sealed\",\n    \"short\",\n    \"sizeof\",\n    \"stackalloc\",\n    \"static\",\n    \"string\",\n    \"struct\",\n    \"switch\",\n    \"this\",\n    \"throw\",\n    \"try\",\n    \"typeof\",\n    \"unit\",\n    \"ulong\",\n    \"unchecked\",\n    \"unsafe\",\n    \"ushort\",\n    \"virtual\",\n    \"void\",\n    \"volatile\"\n  ],\n  constants: [\"true\", \"false\", \"PauliI\", \"PauliX\", \"PauliY\", \"PauliZ\", \"One\", \"Zero\"],\n  builtin: [\n    \"X\",\n    \"Y\",\n    \"Z\",\n    \"H\",\n    \"HY\",\n    \"S\",\n    \"T\",\n    \"SWAP\",\n    \"CNOT\",\n    \"CCNOT\",\n    \"MultiX\",\n    \"R\",\n    \"RFrac\",\n    \"Rx\",\n    \"Ry\",\n    \"Rz\",\n    \"R1\",\n    \"R1Frac\",\n    \"Exp\",\n    \"ExpFrac\",\n    \"Measure\",\n    \"M\",\n    \"MultiM\",\n    \"Message\",\n    \"Length\",\n    \"Assert\",\n    \"AssertProb\",\n    \"AssertEqual\"\n  ],\n  operators: [\n    \"and=\",\n    \"<-\",\n    \"->\",\n    \"*\",\n    \"*=\",\n    \"@\",\n    \"!\",\n    \"^\",\n    \"^=\",\n    \":\",\n    \"::\",\n    \"..\",\n    \"==\",\n    \"...\",\n    \"=\",\n    \"=>\",\n    \">\",\n    \">=\",\n    \"<\",\n    \"<=\",\n    \"-\",\n    \"-=\",\n    \"!=\",\n    \"or=\",\n    \"%\",\n    \"%=\",\n    \"|\",\n    \"+\",\n    \"+=\",\n    \"?\",\n    \"/\",\n    \"/=\",\n    \"&&&\",\n    \"&&&=\",\n    \"^^^\",\n    \"^^^=\",\n    \">>>\",\n    \">>>=\",\n    \"<<<\",\n    \"<<<=\",\n    \"|||\",\n    \"|||=\",\n    \"~~~\",\n    \"_\",\n    \"w/\",\n    \"w/=\"\n  ],\n  namespaceFollows: [\"namespace\", \"open\"],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%@._]+/,\n  escapes: /\\\\[\\s\\S]/,\n  tokenizer: {\n    root: [\n      [\n        /[a-zA-Z_$][\\w$]*/,\n        {\n          cases: {\n            \"@namespaceFollows\": {\n              token: \"keyword.$0\",\n              next: \"@namespace\"\n            },\n            \"@typeKeywords\": \"type\",\n            \"@keywords\": \"keyword\",\n            \"@constants\": \"constant\",\n            \"@builtin\": \"keyword\",\n            \"@invalidKeywords\": \"invalid\",\n            \"@default\": \"identifier\"\n          }\n        }\n      ],\n      { include: \"@whitespace\" },\n      [/[{}()\\[\\]]/, \"@brackets\"],\n      [/@symbols/, { cases: { \"@operators\": \"operator\", \"@default\": \"\" } }],\n      [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, \"number.float\"],\n      [/\\d+/, \"number\"],\n      [/[;,.]/, \"delimiter\"],\n      [/\"/, { token: \"string.quote\", bracket: \"@open\", next: \"@string\" }]\n    ],\n    string: [\n      [/[^\\\\\"]+/, \"string\"],\n      [/@escapes/, \"string.escape\"],\n      [/\"/, { token: \"string.quote\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    namespace: [\n      { include: \"@whitespace\" },\n      [/[A-Za-z]\\w*/, \"namespace\"],\n      [/[\\.=]/, \"delimiter\"],\n      [\"\", \"\", \"@pop\"]\n    ],\n    whitespace: [\n      [/[ \\t\\r\\n]+/, \"white\"],\n      [/(\\/\\/).*/, \"comment\"]\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"]},"metadata":{},"sourceType":"module"}