{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class BasicInplaceReplace {\n  constructor() {\n    this._defaultValueSet = [['true', 'false'], ['True', 'False'], ['Private', 'Public', 'Friend', 'ReadOnly', 'Partial', 'Protected', 'WriteOnly'], ['public', 'protected', 'private']];\n  }\n\n  navigateValueSet(range1, text1, range2, text2, up) {\n    if (range1 && text1) {\n      const result = this.doNavigateValueSet(text1, up);\n\n      if (result) {\n        return {\n          range: range1,\n          value: result\n        };\n      }\n    }\n\n    if (range2 && text2) {\n      const result = this.doNavigateValueSet(text2, up);\n\n      if (result) {\n        return {\n          range: range2,\n          value: result\n        };\n      }\n    }\n\n    return null;\n  }\n\n  doNavigateValueSet(text, up) {\n    const numberResult = this.numberReplace(text, up);\n\n    if (numberResult !== null) {\n      return numberResult;\n    }\n\n    return this.textReplace(text, up);\n  }\n\n  numberReplace(value, up) {\n    const precision = Math.pow(10, value.length - (value.lastIndexOf('.') + 1));\n    let n1 = Number(value);\n    let n2 = parseFloat(value);\n\n    if (!isNaN(n1) && !isNaN(n2) && n1 === n2) {\n      if (n1 === 0 && !up) {\n        return null; // don't do negative\n        //\t\t\t} else if(n1 === 9 && up) {\n        //\t\t\t\treturn null; // don't insert 10 into a number\n      } else {\n        n1 = Math.floor(n1 * precision);\n        n1 += up ? precision : -precision;\n        return String(n1 / precision);\n      }\n    }\n\n    return null;\n  }\n\n  textReplace(value, up) {\n    return this.valueSetsReplace(this._defaultValueSet, value, up);\n  }\n\n  valueSetsReplace(valueSets, value, up) {\n    let result = null;\n\n    for (let i = 0, len = valueSets.length; result === null && i < len; i++) {\n      result = this.valueSetReplace(valueSets[i], value, up);\n    }\n\n    return result;\n  }\n\n  valueSetReplace(valueSet, value, up) {\n    let idx = valueSet.indexOf(value);\n\n    if (idx >= 0) {\n      idx += up ? +1 : -1;\n\n      if (idx < 0) {\n        idx = valueSet.length - 1;\n      } else {\n        idx %= valueSet.length;\n      }\n\n      return valueSet[idx];\n    }\n\n    return null;\n  }\n\n}\nBasicInplaceReplace.INSTANCE = new BasicInplaceReplace();","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/common/languages/supports/inplaceReplaceSupport.js"],"names":["BasicInplaceReplace","constructor","_defaultValueSet","navigateValueSet","range1","text1","range2","text2","up","result","doNavigateValueSet","range","value","text","numberResult","numberReplace","textReplace","precision","Math","pow","length","lastIndexOf","n1","Number","n2","parseFloat","isNaN","floor","String","valueSetsReplace","valueSets","i","len","valueSetReplace","valueSet","idx","indexOf","INSTANCE"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class BasicInplaceReplace {\n    constructor() {\n        this._defaultValueSet = [\n            ['true', 'false'],\n            ['True', 'False'],\n            ['Private', 'Public', 'Friend', 'ReadOnly', 'Partial', 'Protected', 'WriteOnly'],\n            ['public', 'protected', 'private'],\n        ];\n    }\n    navigateValueSet(range1, text1, range2, text2, up) {\n        if (range1 && text1) {\n            const result = this.doNavigateValueSet(text1, up);\n            if (result) {\n                return {\n                    range: range1,\n                    value: result\n                };\n            }\n        }\n        if (range2 && text2) {\n            const result = this.doNavigateValueSet(text2, up);\n            if (result) {\n                return {\n                    range: range2,\n                    value: result\n                };\n            }\n        }\n        return null;\n    }\n    doNavigateValueSet(text, up) {\n        const numberResult = this.numberReplace(text, up);\n        if (numberResult !== null) {\n            return numberResult;\n        }\n        return this.textReplace(text, up);\n    }\n    numberReplace(value, up) {\n        const precision = Math.pow(10, value.length - (value.lastIndexOf('.') + 1));\n        let n1 = Number(value);\n        let n2 = parseFloat(value);\n        if (!isNaN(n1) && !isNaN(n2) && n1 === n2) {\n            if (n1 === 0 && !up) {\n                return null; // don't do negative\n                //\t\t\t} else if(n1 === 9 && up) {\n                //\t\t\t\treturn null; // don't insert 10 into a number\n            }\n            else {\n                n1 = Math.floor(n1 * precision);\n                n1 += up ? precision : -precision;\n                return String(n1 / precision);\n            }\n        }\n        return null;\n    }\n    textReplace(value, up) {\n        return this.valueSetsReplace(this._defaultValueSet, value, up);\n    }\n    valueSetsReplace(valueSets, value, up) {\n        let result = null;\n        for (let i = 0, len = valueSets.length; result === null && i < len; i++) {\n            result = this.valueSetReplace(valueSets[i], value, up);\n        }\n        return result;\n    }\n    valueSetReplace(valueSet, value, up) {\n        let idx = valueSet.indexOf(value);\n        if (idx >= 0) {\n            idx += up ? +1 : -1;\n            if (idx < 0) {\n                idx = valueSet.length - 1;\n            }\n            else {\n                idx %= valueSet.length;\n            }\n            return valueSet[idx];\n        }\n        return null;\n    }\n}\nBasicInplaceReplace.INSTANCE = new BasicInplaceReplace();\n"]},"metadata":{},"sourceType":"module"}