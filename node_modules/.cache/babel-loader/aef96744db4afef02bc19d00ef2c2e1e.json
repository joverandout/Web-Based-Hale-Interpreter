{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CharacterClassifier } from '../core/characterClassifier.js';\nexport class Uint8Matrix {\n  constructor(rows, cols, defaultValue) {\n    const data = new Uint8Array(rows * cols);\n\n    for (let i = 0, len = rows * cols; i < len; i++) {\n      data[i] = defaultValue;\n    }\n\n    this._data = data;\n    this.rows = rows;\n    this.cols = cols;\n  }\n\n  get(row, col) {\n    return this._data[row * this.cols + col];\n  }\n\n  set(row, col, value) {\n    this._data[row * this.cols + col] = value;\n  }\n\n}\nexport class StateMachine {\n  constructor(edges) {\n    let maxCharCode = 0;\n    let maxState = 0\n    /* Invalid */\n    ;\n\n    for (let i = 0, len = edges.length; i < len; i++) {\n      const [from, chCode, to] = edges[i];\n\n      if (chCode > maxCharCode) {\n        maxCharCode = chCode;\n      }\n\n      if (from > maxState) {\n        maxState = from;\n      }\n\n      if (to > maxState) {\n        maxState = to;\n      }\n    }\n\n    maxCharCode++;\n    maxState++;\n    const states = new Uint8Matrix(maxState, maxCharCode, 0\n    /* Invalid */\n    );\n\n    for (let i = 0, len = edges.length; i < len; i++) {\n      const [from, chCode, to] = edges[i];\n      states.set(from, chCode, to);\n    }\n\n    this._states = states;\n    this._maxCharCode = maxCharCode;\n  }\n\n  nextState(currentState, chCode) {\n    if (chCode < 0 || chCode >= this._maxCharCode) {\n      return 0\n      /* Invalid */\n      ;\n    }\n\n    return this._states.get(currentState, chCode);\n  }\n\n} // State machine for http:// or https:// or file://\n\nlet _stateMachine = null;\n\nfunction getStateMachine() {\n  if (_stateMachine === null) {\n    _stateMachine = new StateMachine([[1\n    /* Start */\n    , 104\n    /* h */\n    , 2\n    /* H */\n    ], [1\n    /* Start */\n    , 72\n    /* H */\n    , 2\n    /* H */\n    ], [1\n    /* Start */\n    , 102\n    /* f */\n    , 6\n    /* F */\n    ], [1\n    /* Start */\n    , 70\n    /* F */\n    , 6\n    /* F */\n    ], [2\n    /* H */\n    , 116\n    /* t */\n    , 3\n    /* HT */\n    ], [2\n    /* H */\n    , 84\n    /* T */\n    , 3\n    /* HT */\n    ], [3\n    /* HT */\n    , 116\n    /* t */\n    , 4\n    /* HTT */\n    ], [3\n    /* HT */\n    , 84\n    /* T */\n    , 4\n    /* HTT */\n    ], [4\n    /* HTT */\n    , 112\n    /* p */\n    , 5\n    /* HTTP */\n    ], [4\n    /* HTT */\n    , 80\n    /* P */\n    , 5\n    /* HTTP */\n    ], [5\n    /* HTTP */\n    , 115\n    /* s */\n    , 9\n    /* BeforeColon */\n    ], [5\n    /* HTTP */\n    , 83\n    /* S */\n    , 9\n    /* BeforeColon */\n    ], [5\n    /* HTTP */\n    , 58\n    /* Colon */\n    , 10\n    /* AfterColon */\n    ], [6\n    /* F */\n    , 105\n    /* i */\n    , 7\n    /* FI */\n    ], [6\n    /* F */\n    , 73\n    /* I */\n    , 7\n    /* FI */\n    ], [7\n    /* FI */\n    , 108\n    /* l */\n    , 8\n    /* FIL */\n    ], [7\n    /* FI */\n    , 76\n    /* L */\n    , 8\n    /* FIL */\n    ], [8\n    /* FIL */\n    , 101\n    /* e */\n    , 9\n    /* BeforeColon */\n    ], [8\n    /* FIL */\n    , 69\n    /* E */\n    , 9\n    /* BeforeColon */\n    ], [9\n    /* BeforeColon */\n    , 58\n    /* Colon */\n    , 10\n    /* AfterColon */\n    ], [10\n    /* AfterColon */\n    , 47\n    /* Slash */\n    , 11\n    /* AlmostThere */\n    ], [11\n    /* AlmostThere */\n    , 47\n    /* Slash */\n    , 12\n    /* End */\n    ]]);\n  }\n\n  return _stateMachine;\n}\n\nlet _classifier = null;\n\nfunction getClassifier() {\n  if (_classifier === null) {\n    _classifier = new CharacterClassifier(0\n    /* None */\n    ); // allow-any-unicode-next-line\n\n    const FORCE_TERMINATION_CHARACTERS = ' \\t<>\\'\\\"、。｡､，．：；‘〈「『〔（［｛｢｣｝］）〕』」〉’｀～…';\n\n    for (let i = 0; i < FORCE_TERMINATION_CHARACTERS.length; i++) {\n      _classifier.set(FORCE_TERMINATION_CHARACTERS.charCodeAt(i), 1\n      /* ForceTermination */\n      );\n    }\n\n    const CANNOT_END_WITH_CHARACTERS = '.,;';\n\n    for (let i = 0; i < CANNOT_END_WITH_CHARACTERS.length; i++) {\n      _classifier.set(CANNOT_END_WITH_CHARACTERS.charCodeAt(i), 2\n      /* CannotEndIn */\n      );\n    }\n  }\n\n  return _classifier;\n}\n\nexport class LinkComputer {\n  static _createLink(classifier, line, lineNumber, linkBeginIndex, linkEndIndex) {\n    // Do not allow to end link in certain characters...\n    let lastIncludedCharIndex = linkEndIndex - 1;\n\n    do {\n      const chCode = line.charCodeAt(lastIncludedCharIndex);\n      const chClass = classifier.get(chCode);\n\n      if (chClass !== 2\n      /* CannotEndIn */\n      ) {\n        break;\n      }\n\n      lastIncludedCharIndex--;\n    } while (lastIncludedCharIndex > linkBeginIndex); // Handle links enclosed in parens, square brackets and curlys.\n\n\n    if (linkBeginIndex > 0) {\n      const charCodeBeforeLink = line.charCodeAt(linkBeginIndex - 1);\n      const lastCharCodeInLink = line.charCodeAt(lastIncludedCharIndex);\n\n      if (charCodeBeforeLink === 40\n      /* OpenParen */\n      && lastCharCodeInLink === 41\n      /* CloseParen */\n      || charCodeBeforeLink === 91\n      /* OpenSquareBracket */\n      && lastCharCodeInLink === 93\n      /* CloseSquareBracket */\n      || charCodeBeforeLink === 123\n      /* OpenCurlyBrace */\n      && lastCharCodeInLink === 125\n      /* CloseCurlyBrace */\n      ) {\n        // Do not end in ) if ( is before the link start\n        // Do not end in ] if [ is before the link start\n        // Do not end in } if { is before the link start\n        lastIncludedCharIndex--;\n      }\n    }\n\n    return {\n      range: {\n        startLineNumber: lineNumber,\n        startColumn: linkBeginIndex + 1,\n        endLineNumber: lineNumber,\n        endColumn: lastIncludedCharIndex + 2\n      },\n      url: line.substring(linkBeginIndex, lastIncludedCharIndex + 1)\n    };\n  }\n\n  static computeLinks(model, stateMachine = getStateMachine()) {\n    const classifier = getClassifier();\n    const result = [];\n\n    for (let i = 1, lineCount = model.getLineCount(); i <= lineCount; i++) {\n      const line = model.getLineContent(i);\n      const len = line.length;\n      let j = 0;\n      let linkBeginIndex = 0;\n      let linkBeginChCode = 0;\n      let state = 1\n      /* Start */\n      ;\n      let hasOpenParens = false;\n      let hasOpenSquareBracket = false;\n      let inSquareBrackets = false;\n      let hasOpenCurlyBracket = false;\n\n      while (j < len) {\n        let resetStateMachine = false;\n        const chCode = line.charCodeAt(j);\n\n        if (state === 13\n        /* Accept */\n        ) {\n          let chClass;\n\n          switch (chCode) {\n            case 40\n            /* OpenParen */\n            :\n              hasOpenParens = true;\n              chClass = 0\n              /* None */\n              ;\n              break;\n\n            case 41\n            /* CloseParen */\n            :\n              chClass = hasOpenParens ? 0\n              /* None */\n              : 1\n              /* ForceTermination */\n              ;\n              break;\n\n            case 91\n            /* OpenSquareBracket */\n            :\n              inSquareBrackets = true;\n              hasOpenSquareBracket = true;\n              chClass = 0\n              /* None */\n              ;\n              break;\n\n            case 93\n            /* CloseSquareBracket */\n            :\n              inSquareBrackets = false;\n              chClass = hasOpenSquareBracket ? 0\n              /* None */\n              : 1\n              /* ForceTermination */\n              ;\n              break;\n\n            case 123\n            /* OpenCurlyBrace */\n            :\n              hasOpenCurlyBracket = true;\n              chClass = 0\n              /* None */\n              ;\n              break;\n\n            case 125\n            /* CloseCurlyBrace */\n            :\n              chClass = hasOpenCurlyBracket ? 0\n              /* None */\n              : 1\n              /* ForceTermination */\n              ;\n              break;\n\n            /* The following three rules make it that ' or \" or ` are allowed inside links if the link began with a different one */\n\n            case 39\n            /* SingleQuote */\n            :\n              chClass = linkBeginChCode === 34\n              /* DoubleQuote */\n              || linkBeginChCode === 96\n              /* BackTick */\n              ? 0\n              /* None */\n              : 1\n              /* ForceTermination */\n              ;\n              break;\n\n            case 34\n            /* DoubleQuote */\n            :\n              chClass = linkBeginChCode === 39\n              /* SingleQuote */\n              || linkBeginChCode === 96\n              /* BackTick */\n              ? 0\n              /* None */\n              : 1\n              /* ForceTermination */\n              ;\n              break;\n\n            case 96\n            /* BackTick */\n            :\n              chClass = linkBeginChCode === 39\n              /* SingleQuote */\n              || linkBeginChCode === 34\n              /* DoubleQuote */\n              ? 0\n              /* None */\n              : 1\n              /* ForceTermination */\n              ;\n              break;\n\n            case 42\n            /* Asterisk */\n            :\n              // `*` terminates a link if the link began with `*`\n              chClass = linkBeginChCode === 42\n              /* Asterisk */\n              ? 1\n              /* ForceTermination */\n              : 0\n              /* None */\n              ;\n              break;\n\n            case 124\n            /* Pipe */\n            :\n              // `|` terminates a link if the link began with `|`\n              chClass = linkBeginChCode === 124\n              /* Pipe */\n              ? 1\n              /* ForceTermination */\n              : 0\n              /* None */\n              ;\n              break;\n\n            case 32\n            /* Space */\n            :\n              // ` ` allow space in between [ and ]\n              chClass = inSquareBrackets ? 0\n              /* None */\n              : 1\n              /* ForceTermination */\n              ;\n              break;\n\n            default:\n              chClass = classifier.get(chCode);\n          } // Check if character terminates link\n\n\n          if (chClass === 1\n          /* ForceTermination */\n          ) {\n            result.push(LinkComputer._createLink(classifier, line, i, linkBeginIndex, j));\n            resetStateMachine = true;\n          }\n        } else if (state === 12\n        /* End */\n        ) {\n          let chClass;\n\n          if (chCode === 91\n          /* OpenSquareBracket */\n          ) {\n            // Allow for the authority part to contain ipv6 addresses which contain [ and ]\n            hasOpenSquareBracket = true;\n            chClass = 0\n            /* None */\n            ;\n          } else {\n            chClass = classifier.get(chCode);\n          } // Check if character terminates link\n\n\n          if (chClass === 1\n          /* ForceTermination */\n          ) {\n            resetStateMachine = true;\n          } else {\n            state = 13\n            /* Accept */\n            ;\n          }\n        } else {\n          state = stateMachine.nextState(state, chCode);\n\n          if (state === 0\n          /* Invalid */\n          ) {\n            resetStateMachine = true;\n          }\n        }\n\n        if (resetStateMachine) {\n          state = 1\n          /* Start */\n          ;\n          hasOpenParens = false;\n          hasOpenSquareBracket = false;\n          hasOpenCurlyBracket = false; // Record where the link started\n\n          linkBeginIndex = j + 1;\n          linkBeginChCode = chCode;\n        }\n\n        j++;\n      }\n\n      if (state === 13\n      /* Accept */\n      ) {\n        result.push(LinkComputer._createLink(classifier, line, i, linkBeginIndex, len));\n      }\n    }\n\n    return result;\n  }\n\n}\n/**\n * Returns an array of all links contains in the provided\n * document. *Note* that this operation is computational\n * expensive and should not run in the UI thread.\n */\n\nexport function computeLinks(model) {\n  if (!model || typeof model.getLineCount !== 'function' || typeof model.getLineContent !== 'function') {\n    // Unknown caller!\n    return [];\n  }\n\n  return LinkComputer.computeLinks(model);\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/common/languages/linkComputer.js"],"names":["CharacterClassifier","Uint8Matrix","constructor","rows","cols","defaultValue","data","Uint8Array","i","len","_data","get","row","col","set","value","StateMachine","edges","maxCharCode","maxState","length","from","chCode","to","states","_states","_maxCharCode","nextState","currentState","_stateMachine","getStateMachine","_classifier","getClassifier","FORCE_TERMINATION_CHARACTERS","charCodeAt","CANNOT_END_WITH_CHARACTERS","LinkComputer","_createLink","classifier","line","lineNumber","linkBeginIndex","linkEndIndex","lastIncludedCharIndex","chClass","charCodeBeforeLink","lastCharCodeInLink","range","startLineNumber","startColumn","endLineNumber","endColumn","url","substring","computeLinks","model","stateMachine","result","lineCount","getLineCount","getLineContent","j","linkBeginChCode","state","hasOpenParens","hasOpenSquareBracket","inSquareBrackets","hasOpenCurlyBracket","resetStateMachine","push"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CharacterClassifier } from '../core/characterClassifier.js';\nexport class Uint8Matrix {\n    constructor(rows, cols, defaultValue) {\n        const data = new Uint8Array(rows * cols);\n        for (let i = 0, len = rows * cols; i < len; i++) {\n            data[i] = defaultValue;\n        }\n        this._data = data;\n        this.rows = rows;\n        this.cols = cols;\n    }\n    get(row, col) {\n        return this._data[row * this.cols + col];\n    }\n    set(row, col, value) {\n        this._data[row * this.cols + col] = value;\n    }\n}\nexport class StateMachine {\n    constructor(edges) {\n        let maxCharCode = 0;\n        let maxState = 0 /* Invalid */;\n        for (let i = 0, len = edges.length; i < len; i++) {\n            const [from, chCode, to] = edges[i];\n            if (chCode > maxCharCode) {\n                maxCharCode = chCode;\n            }\n            if (from > maxState) {\n                maxState = from;\n            }\n            if (to > maxState) {\n                maxState = to;\n            }\n        }\n        maxCharCode++;\n        maxState++;\n        const states = new Uint8Matrix(maxState, maxCharCode, 0 /* Invalid */);\n        for (let i = 0, len = edges.length; i < len; i++) {\n            const [from, chCode, to] = edges[i];\n            states.set(from, chCode, to);\n        }\n        this._states = states;\n        this._maxCharCode = maxCharCode;\n    }\n    nextState(currentState, chCode) {\n        if (chCode < 0 || chCode >= this._maxCharCode) {\n            return 0 /* Invalid */;\n        }\n        return this._states.get(currentState, chCode);\n    }\n}\n// State machine for http:// or https:// or file://\nlet _stateMachine = null;\nfunction getStateMachine() {\n    if (_stateMachine === null) {\n        _stateMachine = new StateMachine([\n            [1 /* Start */, 104 /* h */, 2 /* H */],\n            [1 /* Start */, 72 /* H */, 2 /* H */],\n            [1 /* Start */, 102 /* f */, 6 /* F */],\n            [1 /* Start */, 70 /* F */, 6 /* F */],\n            [2 /* H */, 116 /* t */, 3 /* HT */],\n            [2 /* H */, 84 /* T */, 3 /* HT */],\n            [3 /* HT */, 116 /* t */, 4 /* HTT */],\n            [3 /* HT */, 84 /* T */, 4 /* HTT */],\n            [4 /* HTT */, 112 /* p */, 5 /* HTTP */],\n            [4 /* HTT */, 80 /* P */, 5 /* HTTP */],\n            [5 /* HTTP */, 115 /* s */, 9 /* BeforeColon */],\n            [5 /* HTTP */, 83 /* S */, 9 /* BeforeColon */],\n            [5 /* HTTP */, 58 /* Colon */, 10 /* AfterColon */],\n            [6 /* F */, 105 /* i */, 7 /* FI */],\n            [6 /* F */, 73 /* I */, 7 /* FI */],\n            [7 /* FI */, 108 /* l */, 8 /* FIL */],\n            [7 /* FI */, 76 /* L */, 8 /* FIL */],\n            [8 /* FIL */, 101 /* e */, 9 /* BeforeColon */],\n            [8 /* FIL */, 69 /* E */, 9 /* BeforeColon */],\n            [9 /* BeforeColon */, 58 /* Colon */, 10 /* AfterColon */],\n            [10 /* AfterColon */, 47 /* Slash */, 11 /* AlmostThere */],\n            [11 /* AlmostThere */, 47 /* Slash */, 12 /* End */],\n        ]);\n    }\n    return _stateMachine;\n}\nlet _classifier = null;\nfunction getClassifier() {\n    if (_classifier === null) {\n        _classifier = new CharacterClassifier(0 /* None */);\n        // allow-any-unicode-next-line\n        const FORCE_TERMINATION_CHARACTERS = ' \\t<>\\'\\\"、。｡､，．：；‘〈「『〔（［｛｢｣｝］）〕』」〉’｀～…';\n        for (let i = 0; i < FORCE_TERMINATION_CHARACTERS.length; i++) {\n            _classifier.set(FORCE_TERMINATION_CHARACTERS.charCodeAt(i), 1 /* ForceTermination */);\n        }\n        const CANNOT_END_WITH_CHARACTERS = '.,;';\n        for (let i = 0; i < CANNOT_END_WITH_CHARACTERS.length; i++) {\n            _classifier.set(CANNOT_END_WITH_CHARACTERS.charCodeAt(i), 2 /* CannotEndIn */);\n        }\n    }\n    return _classifier;\n}\nexport class LinkComputer {\n    static _createLink(classifier, line, lineNumber, linkBeginIndex, linkEndIndex) {\n        // Do not allow to end link in certain characters...\n        let lastIncludedCharIndex = linkEndIndex - 1;\n        do {\n            const chCode = line.charCodeAt(lastIncludedCharIndex);\n            const chClass = classifier.get(chCode);\n            if (chClass !== 2 /* CannotEndIn */) {\n                break;\n            }\n            lastIncludedCharIndex--;\n        } while (lastIncludedCharIndex > linkBeginIndex);\n        // Handle links enclosed in parens, square brackets and curlys.\n        if (linkBeginIndex > 0) {\n            const charCodeBeforeLink = line.charCodeAt(linkBeginIndex - 1);\n            const lastCharCodeInLink = line.charCodeAt(lastIncludedCharIndex);\n            if ((charCodeBeforeLink === 40 /* OpenParen */ && lastCharCodeInLink === 41 /* CloseParen */)\n                || (charCodeBeforeLink === 91 /* OpenSquareBracket */ && lastCharCodeInLink === 93 /* CloseSquareBracket */)\n                || (charCodeBeforeLink === 123 /* OpenCurlyBrace */ && lastCharCodeInLink === 125 /* CloseCurlyBrace */)) {\n                // Do not end in ) if ( is before the link start\n                // Do not end in ] if [ is before the link start\n                // Do not end in } if { is before the link start\n                lastIncludedCharIndex--;\n            }\n        }\n        return {\n            range: {\n                startLineNumber: lineNumber,\n                startColumn: linkBeginIndex + 1,\n                endLineNumber: lineNumber,\n                endColumn: lastIncludedCharIndex + 2\n            },\n            url: line.substring(linkBeginIndex, lastIncludedCharIndex + 1)\n        };\n    }\n    static computeLinks(model, stateMachine = getStateMachine()) {\n        const classifier = getClassifier();\n        const result = [];\n        for (let i = 1, lineCount = model.getLineCount(); i <= lineCount; i++) {\n            const line = model.getLineContent(i);\n            const len = line.length;\n            let j = 0;\n            let linkBeginIndex = 0;\n            let linkBeginChCode = 0;\n            let state = 1 /* Start */;\n            let hasOpenParens = false;\n            let hasOpenSquareBracket = false;\n            let inSquareBrackets = false;\n            let hasOpenCurlyBracket = false;\n            while (j < len) {\n                let resetStateMachine = false;\n                const chCode = line.charCodeAt(j);\n                if (state === 13 /* Accept */) {\n                    let chClass;\n                    switch (chCode) {\n                        case 40 /* OpenParen */:\n                            hasOpenParens = true;\n                            chClass = 0 /* None */;\n                            break;\n                        case 41 /* CloseParen */:\n                            chClass = (hasOpenParens ? 0 /* None */ : 1 /* ForceTermination */);\n                            break;\n                        case 91 /* OpenSquareBracket */:\n                            inSquareBrackets = true;\n                            hasOpenSquareBracket = true;\n                            chClass = 0 /* None */;\n                            break;\n                        case 93 /* CloseSquareBracket */:\n                            inSquareBrackets = false;\n                            chClass = (hasOpenSquareBracket ? 0 /* None */ : 1 /* ForceTermination */);\n                            break;\n                        case 123 /* OpenCurlyBrace */:\n                            hasOpenCurlyBracket = true;\n                            chClass = 0 /* None */;\n                            break;\n                        case 125 /* CloseCurlyBrace */:\n                            chClass = (hasOpenCurlyBracket ? 0 /* None */ : 1 /* ForceTermination */);\n                            break;\n                        /* The following three rules make it that ' or \" or ` are allowed inside links if the link began with a different one */\n                        case 39 /* SingleQuote */:\n                            chClass = (linkBeginChCode === 34 /* DoubleQuote */ || linkBeginChCode === 96 /* BackTick */) ? 0 /* None */ : 1 /* ForceTermination */;\n                            break;\n                        case 34 /* DoubleQuote */:\n                            chClass = (linkBeginChCode === 39 /* SingleQuote */ || linkBeginChCode === 96 /* BackTick */) ? 0 /* None */ : 1 /* ForceTermination */;\n                            break;\n                        case 96 /* BackTick */:\n                            chClass = (linkBeginChCode === 39 /* SingleQuote */ || linkBeginChCode === 34 /* DoubleQuote */) ? 0 /* None */ : 1 /* ForceTermination */;\n                            break;\n                        case 42 /* Asterisk */:\n                            // `*` terminates a link if the link began with `*`\n                            chClass = (linkBeginChCode === 42 /* Asterisk */) ? 1 /* ForceTermination */ : 0 /* None */;\n                            break;\n                        case 124 /* Pipe */:\n                            // `|` terminates a link if the link began with `|`\n                            chClass = (linkBeginChCode === 124 /* Pipe */) ? 1 /* ForceTermination */ : 0 /* None */;\n                            break;\n                        case 32 /* Space */:\n                            // ` ` allow space in between [ and ]\n                            chClass = (inSquareBrackets ? 0 /* None */ : 1 /* ForceTermination */);\n                            break;\n                        default:\n                            chClass = classifier.get(chCode);\n                    }\n                    // Check if character terminates link\n                    if (chClass === 1 /* ForceTermination */) {\n                        result.push(LinkComputer._createLink(classifier, line, i, linkBeginIndex, j));\n                        resetStateMachine = true;\n                    }\n                }\n                else if (state === 12 /* End */) {\n                    let chClass;\n                    if (chCode === 91 /* OpenSquareBracket */) {\n                        // Allow for the authority part to contain ipv6 addresses which contain [ and ]\n                        hasOpenSquareBracket = true;\n                        chClass = 0 /* None */;\n                    }\n                    else {\n                        chClass = classifier.get(chCode);\n                    }\n                    // Check if character terminates link\n                    if (chClass === 1 /* ForceTermination */) {\n                        resetStateMachine = true;\n                    }\n                    else {\n                        state = 13 /* Accept */;\n                    }\n                }\n                else {\n                    state = stateMachine.nextState(state, chCode);\n                    if (state === 0 /* Invalid */) {\n                        resetStateMachine = true;\n                    }\n                }\n                if (resetStateMachine) {\n                    state = 1 /* Start */;\n                    hasOpenParens = false;\n                    hasOpenSquareBracket = false;\n                    hasOpenCurlyBracket = false;\n                    // Record where the link started\n                    linkBeginIndex = j + 1;\n                    linkBeginChCode = chCode;\n                }\n                j++;\n            }\n            if (state === 13 /* Accept */) {\n                result.push(LinkComputer._createLink(classifier, line, i, linkBeginIndex, len));\n            }\n        }\n        return result;\n    }\n}\n/**\n * Returns an array of all links contains in the provided\n * document. *Note* that this operation is computational\n * expensive and should not run in the UI thread.\n */\nexport function computeLinks(model) {\n    if (!model || typeof model.getLineCount !== 'function' || typeof model.getLineContent !== 'function') {\n        // Unknown caller!\n        return [];\n    }\n    return LinkComputer.computeLinks(model);\n}\n"]},"metadata":{},"sourceType":"module"}