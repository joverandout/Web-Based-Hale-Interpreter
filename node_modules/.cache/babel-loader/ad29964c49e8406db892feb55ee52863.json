{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar _a;\n\nconst LANGUAGE_DEFAULT = 'en';\nlet _isWindows = false;\nlet _isMacintosh = false;\nlet _isLinux = false;\nlet _isLinuxSnap = false;\nlet _isNative = false;\nlet _isWeb = false;\nlet _isElectron = false;\nlet _isIOS = false;\nlet _locale = undefined;\nlet _language = LANGUAGE_DEFAULT;\nlet _translationsConfigFile = undefined;\nlet _userAgent = undefined;\nexport const globals = typeof self === 'object' ? self : typeof global === 'object' ? global : {};\nlet nodeProcess = undefined;\n\nif (typeof globals.vscode !== 'undefined' && typeof globals.vscode.process !== 'undefined') {\n  // Native environment (sandboxed)\n  nodeProcess = globals.vscode.process;\n} else if (typeof process !== 'undefined') {\n  // Native environment (non-sandboxed)\n  nodeProcess = process;\n}\n\nconst isElectronProcess = typeof ((_a = nodeProcess === null || nodeProcess === void 0 ? void 0 : nodeProcess.versions) === null || _a === void 0 ? void 0 : _a.electron) === 'string';\nconst isElectronRenderer = isElectronProcess && (nodeProcess === null || nodeProcess === void 0 ? void 0 : nodeProcess.type) === 'renderer'; // Web environment\n\nif (typeof navigator === 'object' && !isElectronRenderer) {\n  _userAgent = navigator.userAgent;\n  _isWindows = _userAgent.indexOf('Windows') >= 0;\n  _isMacintosh = _userAgent.indexOf('Macintosh') >= 0;\n  _isIOS = (_userAgent.indexOf('Macintosh') >= 0 || _userAgent.indexOf('iPad') >= 0 || _userAgent.indexOf('iPhone') >= 0) && !!navigator.maxTouchPoints && navigator.maxTouchPoints > 0;\n  _isLinux = _userAgent.indexOf('Linux') >= 0;\n  _isWeb = true;\n  _locale = navigator.language;\n  _language = _locale;\n} // Native environment\nelse if (typeof nodeProcess === 'object') {\n  _isWindows = nodeProcess.platform === 'win32';\n  _isMacintosh = nodeProcess.platform === 'darwin';\n  _isLinux = nodeProcess.platform === 'linux';\n  _isLinuxSnap = _isLinux && !!nodeProcess.env['SNAP'] && !!nodeProcess.env['SNAP_REVISION'];\n  _isElectron = isElectronProcess;\n  _locale = LANGUAGE_DEFAULT;\n  _language = LANGUAGE_DEFAULT;\n  const rawNlsConfig = nodeProcess.env['VSCODE_NLS_CONFIG'];\n\n  if (rawNlsConfig) {\n    try {\n      const nlsConfig = JSON.parse(rawNlsConfig);\n      const resolved = nlsConfig.availableLanguages['*'];\n      _locale = nlsConfig.locale; // VSCode's default language is 'en'\n\n      _language = resolved ? resolved : LANGUAGE_DEFAULT;\n      _translationsConfigFile = nlsConfig._translationsConfigFile;\n    } catch (e) {}\n  }\n\n  _isNative = true;\n} // Unknown environment\nelse {\n  console.error('Unable to resolve platform.');\n}\n\nlet _platform = 0\n/* Web */\n;\n\nif (_isMacintosh) {\n  _platform = 1\n  /* Mac */\n  ;\n} else if (_isWindows) {\n  _platform = 3\n  /* Windows */\n  ;\n} else if (_isLinux) {\n  _platform = 2\n  /* Linux */\n  ;\n}\n\nexport const isWindows = _isWindows;\nexport const isMacintosh = _isMacintosh;\nexport const isLinux = _isLinux;\nexport const isNative = _isNative;\nexport const isWeb = _isWeb;\nexport const isIOS = _isIOS;\nexport const userAgent = _userAgent;\n/**\n * The language used for the user interface. The format of\n * the string is all lower case (e.g. zh-tw for Traditional\n * Chinese)\n */\n\nexport const language = _language;\n/**\n * See https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#:~:text=than%204%2C%20then-,set%20timeout%20to%204,-.\n *\n * Works similarly to `setTimeout(0)` but doesn't suffer from the 4ms artificial delay\n * that browsers set when the nesting level is > 5.\n */\n\nexport const setTimeout0 = (() => {\n  if (typeof globals.postMessage === 'function' && !globals.importScripts) {\n    let pending = [];\n    globals.addEventListener('message', e => {\n      if (e.data && e.data.vscodeScheduleAsyncWork) {\n        for (let i = 0, len = pending.length; i < len; i++) {\n          const candidate = pending[i];\n\n          if (candidate.id === e.data.vscodeScheduleAsyncWork) {\n            pending.splice(i, 1);\n            candidate.callback();\n            return;\n          }\n        }\n      }\n    });\n    let lastId = 0;\n    return callback => {\n      const myId = ++lastId;\n      pending.push({\n        id: myId,\n        callback: callback\n      });\n      globals.postMessage({\n        vscodeScheduleAsyncWork: myId\n      }, '*');\n    };\n  }\n\n  return callback => setTimeout(callback);\n})();\nexport const OS = _isMacintosh || _isIOS ? 2\n/* Macintosh */\n: _isWindows ? 1\n/* Windows */\n: 3\n/* Linux */\n;\nlet _isLittleEndian = true;\nlet _isLittleEndianComputed = false;\nexport function isLittleEndian() {\n  if (!_isLittleEndianComputed) {\n    _isLittleEndianComputed = true;\n    const test = new Uint8Array(2);\n    test[0] = 1;\n    test[1] = 2;\n    const view = new Uint16Array(test.buffer);\n    _isLittleEndian = view[0] === (2 << 8) + 1;\n  }\n\n  return _isLittleEndian;\n}\nexport const isChrome = !!(userAgent && userAgent.indexOf('Chrome') >= 0);\nexport const isFirefox = !!(userAgent && userAgent.indexOf('Firefox') >= 0);\nexport const isSafari = !!(!isChrome && userAgent && userAgent.indexOf('Safari') >= 0);\nexport const isEdge = !!(userAgent && userAgent.indexOf('Edg/') >= 0);\nexport const isAndroid = !!(userAgent && userAgent.indexOf('Android') >= 0);","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/base/common/platform.js"],"names":["_a","LANGUAGE_DEFAULT","_isWindows","_isMacintosh","_isLinux","_isLinuxSnap","_isNative","_isWeb","_isElectron","_isIOS","_locale","undefined","_language","_translationsConfigFile","_userAgent","globals","self","global","nodeProcess","vscode","process","isElectronProcess","versions","electron","isElectronRenderer","type","navigator","userAgent","indexOf","maxTouchPoints","language","platform","env","rawNlsConfig","nlsConfig","JSON","parse","resolved","availableLanguages","locale","e","console","error","_platform","isWindows","isMacintosh","isLinux","isNative","isWeb","isIOS","setTimeout0","postMessage","importScripts","pending","addEventListener","data","vscodeScheduleAsyncWork","i","len","length","candidate","id","splice","callback","lastId","myId","push","setTimeout","OS","_isLittleEndian","_isLittleEndianComputed","isLittleEndian","test","Uint8Array","view","Uint16Array","buffer","isChrome","isFirefox","isSafari","isEdge","isAndroid"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar _a;\nconst LANGUAGE_DEFAULT = 'en';\nlet _isWindows = false;\nlet _isMacintosh = false;\nlet _isLinux = false;\nlet _isLinuxSnap = false;\nlet _isNative = false;\nlet _isWeb = false;\nlet _isElectron = false;\nlet _isIOS = false;\nlet _locale = undefined;\nlet _language = LANGUAGE_DEFAULT;\nlet _translationsConfigFile = undefined;\nlet _userAgent = undefined;\nexport const globals = (typeof self === 'object' ? self : typeof global === 'object' ? global : {});\nlet nodeProcess = undefined;\nif (typeof globals.vscode !== 'undefined' && typeof globals.vscode.process !== 'undefined') {\n    // Native environment (sandboxed)\n    nodeProcess = globals.vscode.process;\n}\nelse if (typeof process !== 'undefined') {\n    // Native environment (non-sandboxed)\n    nodeProcess = process;\n}\nconst isElectronProcess = typeof ((_a = nodeProcess === null || nodeProcess === void 0 ? void 0 : nodeProcess.versions) === null || _a === void 0 ? void 0 : _a.electron) === 'string';\nconst isElectronRenderer = isElectronProcess && (nodeProcess === null || nodeProcess === void 0 ? void 0 : nodeProcess.type) === 'renderer';\n// Web environment\nif (typeof navigator === 'object' && !isElectronRenderer) {\n    _userAgent = navigator.userAgent;\n    _isWindows = _userAgent.indexOf('Windows') >= 0;\n    _isMacintosh = _userAgent.indexOf('Macintosh') >= 0;\n    _isIOS = (_userAgent.indexOf('Macintosh') >= 0 || _userAgent.indexOf('iPad') >= 0 || _userAgent.indexOf('iPhone') >= 0) && !!navigator.maxTouchPoints && navigator.maxTouchPoints > 0;\n    _isLinux = _userAgent.indexOf('Linux') >= 0;\n    _isWeb = true;\n    _locale = navigator.language;\n    _language = _locale;\n}\n// Native environment\nelse if (typeof nodeProcess === 'object') {\n    _isWindows = (nodeProcess.platform === 'win32');\n    _isMacintosh = (nodeProcess.platform === 'darwin');\n    _isLinux = (nodeProcess.platform === 'linux');\n    _isLinuxSnap = _isLinux && !!nodeProcess.env['SNAP'] && !!nodeProcess.env['SNAP_REVISION'];\n    _isElectron = isElectronProcess;\n    _locale = LANGUAGE_DEFAULT;\n    _language = LANGUAGE_DEFAULT;\n    const rawNlsConfig = nodeProcess.env['VSCODE_NLS_CONFIG'];\n    if (rawNlsConfig) {\n        try {\n            const nlsConfig = JSON.parse(rawNlsConfig);\n            const resolved = nlsConfig.availableLanguages['*'];\n            _locale = nlsConfig.locale;\n            // VSCode's default language is 'en'\n            _language = resolved ? resolved : LANGUAGE_DEFAULT;\n            _translationsConfigFile = nlsConfig._translationsConfigFile;\n        }\n        catch (e) {\n        }\n    }\n    _isNative = true;\n}\n// Unknown environment\nelse {\n    console.error('Unable to resolve platform.');\n}\nlet _platform = 0 /* Web */;\nif (_isMacintosh) {\n    _platform = 1 /* Mac */;\n}\nelse if (_isWindows) {\n    _platform = 3 /* Windows */;\n}\nelse if (_isLinux) {\n    _platform = 2 /* Linux */;\n}\nexport const isWindows = _isWindows;\nexport const isMacintosh = _isMacintosh;\nexport const isLinux = _isLinux;\nexport const isNative = _isNative;\nexport const isWeb = _isWeb;\nexport const isIOS = _isIOS;\nexport const userAgent = _userAgent;\n/**\n * The language used for the user interface. The format of\n * the string is all lower case (e.g. zh-tw for Traditional\n * Chinese)\n */\nexport const language = _language;\n/**\n * See https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#:~:text=than%204%2C%20then-,set%20timeout%20to%204,-.\n *\n * Works similarly to `setTimeout(0)` but doesn't suffer from the 4ms artificial delay\n * that browsers set when the nesting level is > 5.\n */\nexport const setTimeout0 = (() => {\n    if (typeof globals.postMessage === 'function' && !globals.importScripts) {\n        let pending = [];\n        globals.addEventListener('message', (e) => {\n            if (e.data && e.data.vscodeScheduleAsyncWork) {\n                for (let i = 0, len = pending.length; i < len; i++) {\n                    const candidate = pending[i];\n                    if (candidate.id === e.data.vscodeScheduleAsyncWork) {\n                        pending.splice(i, 1);\n                        candidate.callback();\n                        return;\n                    }\n                }\n            }\n        });\n        let lastId = 0;\n        return (callback) => {\n            const myId = ++lastId;\n            pending.push({\n                id: myId,\n                callback: callback\n            });\n            globals.postMessage({ vscodeScheduleAsyncWork: myId }, '*');\n        };\n    }\n    return (callback) => setTimeout(callback);\n})();\nexport const OS = (_isMacintosh || _isIOS ? 2 /* Macintosh */ : (_isWindows ? 1 /* Windows */ : 3 /* Linux */));\nlet _isLittleEndian = true;\nlet _isLittleEndianComputed = false;\nexport function isLittleEndian() {\n    if (!_isLittleEndianComputed) {\n        _isLittleEndianComputed = true;\n        const test = new Uint8Array(2);\n        test[0] = 1;\n        test[1] = 2;\n        const view = new Uint16Array(test.buffer);\n        _isLittleEndian = (view[0] === (2 << 8) + 1);\n    }\n    return _isLittleEndian;\n}\nexport const isChrome = !!(userAgent && userAgent.indexOf('Chrome') >= 0);\nexport const isFirefox = !!(userAgent && userAgent.indexOf('Firefox') >= 0);\nexport const isSafari = !!(!isChrome && (userAgent && userAgent.indexOf('Safari') >= 0));\nexport const isEdge = !!(userAgent && userAgent.indexOf('Edg/') >= 0);\nexport const isAndroid = !!(userAgent && userAgent.indexOf('Android') >= 0);\n"]},"metadata":{},"sourceType":"module"}