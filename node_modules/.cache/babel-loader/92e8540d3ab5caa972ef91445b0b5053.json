{"ast":null,"code":"var Buffer = require('safe-buffer').Buffer;\n\nvar Client = require('../constants/client');\n\nmodule.exports = HandshakeInitializationPacket;\n\nfunction HandshakeInitializationPacket(options) {\n  options = options || {};\n  this.protocolVersion = options.protocolVersion;\n  this.serverVersion = options.serverVersion;\n  this.threadId = options.threadId;\n  this.scrambleBuff1 = options.scrambleBuff1;\n  this.filler1 = options.filler1;\n  this.serverCapabilities1 = options.serverCapabilities1;\n  this.serverLanguage = options.serverLanguage;\n  this.serverStatus = options.serverStatus;\n  this.serverCapabilities2 = options.serverCapabilities2;\n  this.scrambleLength = options.scrambleLength;\n  this.filler2 = options.filler2;\n  this.scrambleBuff2 = options.scrambleBuff2;\n  this.filler3 = options.filler3;\n  this.pluginData = options.pluginData;\n  this.protocol41 = options.protocol41;\n\n  if (this.protocol41) {\n    // force set the bit in serverCapabilities1\n    this.serverCapabilities1 |= Client.CLIENT_PROTOCOL_41;\n  }\n}\n\nHandshakeInitializationPacket.prototype.parse = function (parser) {\n  this.protocolVersion = parser.parseUnsignedNumber(1);\n  this.serverVersion = parser.parseNullTerminatedString();\n  this.threadId = parser.parseUnsignedNumber(4);\n  this.scrambleBuff1 = parser.parseBuffer(8);\n  this.filler1 = parser.parseFiller(1);\n  this.serverCapabilities1 = parser.parseUnsignedNumber(2);\n  this.serverLanguage = parser.parseUnsignedNumber(1);\n  this.serverStatus = parser.parseUnsignedNumber(2);\n  this.protocol41 = (this.serverCapabilities1 & 1 << 9) > 0;\n\n  if (this.protocol41) {\n    this.serverCapabilities2 = parser.parseUnsignedNumber(2);\n    this.scrambleLength = parser.parseUnsignedNumber(1);\n    this.filler2 = parser.parseFiller(10); // scrambleBuff2 should be 0x00 terminated, but sphinx does not do this\n    // so we assume scrambleBuff2 to be 12 byte and treat the next byte as a\n    // filler byte.\n\n    this.scrambleBuff2 = parser.parseBuffer(12);\n    this.filler3 = parser.parseFiller(1);\n  } else {\n    this.filler2 = parser.parseFiller(13);\n  }\n\n  if (parser.reachedPacketEnd()) {\n    return;\n  } // According to the docs this should be 0x00 terminated, but MariaDB does\n  // not do this, so we assume this string to be packet terminated.\n\n\n  this.pluginData = parser.parsePacketTerminatedString(); // However, if there is a trailing '\\0', strip it\n\n  var lastChar = this.pluginData.length - 1;\n\n  if (this.pluginData[lastChar] === '\\0') {\n    this.pluginData = this.pluginData.substr(0, lastChar);\n  }\n};\n\nHandshakeInitializationPacket.prototype.write = function (writer) {\n  writer.writeUnsignedNumber(1, this.protocolVersion);\n  writer.writeNullTerminatedString(this.serverVersion);\n  writer.writeUnsignedNumber(4, this.threadId);\n  writer.writeBuffer(this.scrambleBuff1);\n  writer.writeFiller(1);\n  writer.writeUnsignedNumber(2, this.serverCapabilities1);\n  writer.writeUnsignedNumber(1, this.serverLanguage);\n  writer.writeUnsignedNumber(2, this.serverStatus);\n\n  if (this.protocol41) {\n    writer.writeUnsignedNumber(2, this.serverCapabilities2);\n    writer.writeUnsignedNumber(1, this.scrambleLength);\n    writer.writeFiller(10);\n  }\n\n  writer.writeNullTerminatedBuffer(this.scrambleBuff2);\n\n  if (this.pluginData !== undefined) {\n    writer.writeNullTerminatedString(this.pluginData);\n  }\n};\n\nHandshakeInitializationPacket.prototype.scrambleBuff = function () {\n  var buffer = null;\n\n  if (typeof this.scrambleBuff2 === 'undefined') {\n    buffer = Buffer.from(this.scrambleBuff1);\n  } else {\n    buffer = Buffer.allocUnsafe(this.scrambleBuff1.length + this.scrambleBuff2.length);\n    this.scrambleBuff1.copy(buffer, 0);\n    this.scrambleBuff2.copy(buffer, this.scrambleBuff1.length);\n  }\n\n  return buffer;\n};","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/mysql/lib/protocol/packets/HandshakeInitializationPacket.js"],"names":["Buffer","require","Client","module","exports","HandshakeInitializationPacket","options","protocolVersion","serverVersion","threadId","scrambleBuff1","filler1","serverCapabilities1","serverLanguage","serverStatus","serverCapabilities2","scrambleLength","filler2","scrambleBuff2","filler3","pluginData","protocol41","CLIENT_PROTOCOL_41","prototype","parse","parser","parseUnsignedNumber","parseNullTerminatedString","parseBuffer","parseFiller","reachedPacketEnd","parsePacketTerminatedString","lastChar","length","substr","write","writer","writeUnsignedNumber","writeNullTerminatedString","writeBuffer","writeFiller","writeNullTerminatedBuffer","undefined","scrambleBuff","buffer","from","allocUnsafe","copy"],"mappings":"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","sourcesContent":["var Buffer = require('safe-buffer').Buffer;\nvar Client = require('../constants/client');\n\nmodule.exports = HandshakeInitializationPacket;\nfunction HandshakeInitializationPacket(options) {\n  options = options || {};\n\n  this.protocolVersion     = options.protocolVersion;\n  this.serverVersion       = options.serverVersion;\n  this.threadId            = options.threadId;\n  this.scrambleBuff1       = options.scrambleBuff1;\n  this.filler1             = options.filler1;\n  this.serverCapabilities1 = options.serverCapabilities1;\n  this.serverLanguage      = options.serverLanguage;\n  this.serverStatus        = options.serverStatus;\n  this.serverCapabilities2 = options.serverCapabilities2;\n  this.scrambleLength      = options.scrambleLength;\n  this.filler2             = options.filler2;\n  this.scrambleBuff2       = options.scrambleBuff2;\n  this.filler3             = options.filler3;\n  this.pluginData          = options.pluginData;\n  this.protocol41          = options.protocol41;\n\n  if (this.protocol41) {\n    // force set the bit in serverCapabilities1\n    this.serverCapabilities1 |= Client.CLIENT_PROTOCOL_41;\n  }\n}\n\nHandshakeInitializationPacket.prototype.parse = function(parser) {\n  this.protocolVersion     = parser.parseUnsignedNumber(1);\n  this.serverVersion       = parser.parseNullTerminatedString();\n  this.threadId            = parser.parseUnsignedNumber(4);\n  this.scrambleBuff1       = parser.parseBuffer(8);\n  this.filler1             = parser.parseFiller(1);\n  this.serverCapabilities1 = parser.parseUnsignedNumber(2);\n  this.serverLanguage      = parser.parseUnsignedNumber(1);\n  this.serverStatus        = parser.parseUnsignedNumber(2);\n\n  this.protocol41          = (this.serverCapabilities1 & (1 << 9)) > 0;\n\n  if (this.protocol41) {\n    this.serverCapabilities2 = parser.parseUnsignedNumber(2);\n    this.scrambleLength      = parser.parseUnsignedNumber(1);\n    this.filler2             = parser.parseFiller(10);\n    // scrambleBuff2 should be 0x00 terminated, but sphinx does not do this\n    // so we assume scrambleBuff2 to be 12 byte and treat the next byte as a\n    // filler byte.\n    this.scrambleBuff2       = parser.parseBuffer(12);\n    this.filler3             = parser.parseFiller(1);\n  } else {\n    this.filler2             = parser.parseFiller(13);\n  }\n\n  if (parser.reachedPacketEnd()) {\n    return;\n  }\n\n  // According to the docs this should be 0x00 terminated, but MariaDB does\n  // not do this, so we assume this string to be packet terminated.\n  this.pluginData = parser.parsePacketTerminatedString();\n\n  // However, if there is a trailing '\\0', strip it\n  var lastChar = this.pluginData.length - 1;\n  if (this.pluginData[lastChar] === '\\0') {\n    this.pluginData = this.pluginData.substr(0, lastChar);\n  }\n};\n\nHandshakeInitializationPacket.prototype.write = function(writer) {\n  writer.writeUnsignedNumber(1, this.protocolVersion);\n  writer.writeNullTerminatedString(this.serverVersion);\n  writer.writeUnsignedNumber(4, this.threadId);\n  writer.writeBuffer(this.scrambleBuff1);\n  writer.writeFiller(1);\n  writer.writeUnsignedNumber(2, this.serverCapabilities1);\n  writer.writeUnsignedNumber(1, this.serverLanguage);\n  writer.writeUnsignedNumber(2, this.serverStatus);\n  if (this.protocol41) {\n    writer.writeUnsignedNumber(2, this.serverCapabilities2);\n    writer.writeUnsignedNumber(1, this.scrambleLength);\n    writer.writeFiller(10);\n  }\n  writer.writeNullTerminatedBuffer(this.scrambleBuff2);\n\n  if (this.pluginData !== undefined) {\n    writer.writeNullTerminatedString(this.pluginData);\n  }\n};\n\nHandshakeInitializationPacket.prototype.scrambleBuff = function() {\n  var buffer = null;\n\n  if (typeof this.scrambleBuff2 === 'undefined') {\n    buffer = Buffer.from(this.scrambleBuff1);\n  } else {\n    buffer = Buffer.allocUnsafe(this.scrambleBuff1.length + this.scrambleBuff2.length);\n    this.scrambleBuff1.copy(buffer, 0);\n    this.scrambleBuff2.copy(buffer, this.scrambleBuff1.length);\n  }\n\n  return buffer;\n};\n"]},"metadata":{},"sourceType":"script"}