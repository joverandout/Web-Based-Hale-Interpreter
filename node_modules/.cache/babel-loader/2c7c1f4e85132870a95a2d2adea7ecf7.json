{"ast":null,"code":"export default function getActionFromState(state, options) {\n  var _state$index, _normalizedConfig$scr; // Create a normalized configs object which will be easier to use\n\n\n  const normalizedConfig = options ? createNormalizedConfigItem(options) : {};\n  const routes = state.index != null ? state.routes.slice(0, state.index + 1) : state.routes;\n\n  if (routes.length === 0) {\n    return undefined;\n  }\n\n  if (!(routes.length === 1 && routes[0].key === undefined || routes.length === 2 && routes[0].key === undefined && routes[0].name === (normalizedConfig === null || normalizedConfig === void 0 ? void 0 : normalizedConfig.initialRouteName) && routes[1].key === undefined)) {\n    return {\n      type: 'RESET',\n      payload: state\n    };\n  }\n\n  const route = state.routes[(_state$index = state.index) !== null && _state$index !== void 0 ? _state$index : state.routes.length - 1];\n  let current = route === null || route === void 0 ? void 0 : route.state;\n  let config = normalizedConfig === null || normalizedConfig === void 0 ? void 0 : (_normalizedConfig$scr = normalizedConfig.screens) === null || _normalizedConfig$scr === void 0 ? void 0 : _normalizedConfig$scr[route === null || route === void 0 ? void 0 : route.name];\n  let params = { ...route.params\n  };\n  let payload = route ? {\n    name: route.name,\n    path: route.path,\n    params\n  } : undefined;\n\n  while (current) {\n    var _config, _config2, _config2$screens;\n\n    if (current.routes.length === 0) {\n      return undefined;\n    }\n\n    const routes = current.index != null ? current.routes.slice(0, current.index + 1) : current.routes;\n    const route = routes[routes.length - 1]; // Explicitly set to override existing value when merging params\n\n    Object.assign(params, {\n      initial: undefined,\n      screen: undefined,\n      params: undefined,\n      state: undefined\n    });\n\n    if (routes.length === 1 && routes[0].key === undefined) {\n      params.initial = true;\n      params.screen = route.name;\n    } else if (routes.length === 2 && routes[0].key === undefined && routes[0].name === ((_config = config) === null || _config === void 0 ? void 0 : _config.initialRouteName) && routes[1].key === undefined) {\n      params.initial = false;\n      params.screen = route.name;\n    } else {\n      params.state = current;\n      break;\n    }\n\n    if (route.state) {\n      params.params = { ...route.params\n      };\n      params = params.params;\n    } else {\n      params.path = route.path;\n      params.params = route.params;\n    }\n\n    current = route.state;\n    config = (_config2 = config) === null || _config2 === void 0 ? void 0 : (_config2$screens = _config2.screens) === null || _config2$screens === void 0 ? void 0 : _config2$screens[route.name];\n  }\n\n  if (!payload) {\n    return;\n  } // Try to construct payload for a `NAVIGATE` action from the state\n  // This lets us preserve the navigation state and not lose it\n\n\n  return {\n    type: 'NAVIGATE',\n    payload\n  };\n}\n\nconst createNormalizedConfigItem = config => typeof config === 'object' && config != null ? {\n  initialRouteName: config.initialRouteName,\n  screens: config.screens != null ? createNormalizedConfigs(config.screens) : undefined\n} : {};\n\nconst createNormalizedConfigs = options => Object.entries(options).reduce((acc, _ref) => {\n  let [k, v] = _ref;\n  acc[k] = createNormalizedConfigItem(v);\n  return acc;\n}, {});","map":{"version":3,"sources":["getActionFromState.tsx"],"names":["normalizedConfig","options","createNormalizedConfigItem","routes","state","type","payload","route","current","config","params","name","path","Object","initial","screen","undefined","initialRouteName","screens","createNormalizedConfigs","acc"],"mappings":"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","sourcesContent":["import type {\n  CommonActions,\n  NavigationState,\n  ParamListBase,\n  PartialRoute,\n  PartialState,\n  Route,\n} from '@react-navigation/routers';\n\nimport type { NavigatorScreenParams, PathConfig, PathConfigMap } from './types';\n\ntype ConfigItem = {\n  initialRouteName?: string;\n  screens?: Record<string, ConfigItem>;\n};\n\ntype Options = {\n  initialRouteName?: string;\n  screens: PathConfigMap<object>;\n};\n\ntype NavigateAction<State extends NavigationState> = {\n  type: 'NAVIGATE';\n  payload: {\n    name: string;\n    params?: NavigatorScreenParams<State>;\n    path?: string;\n  };\n};\n\nexport default function getActionFromState(\n  state: PartialState<NavigationState>,\n  options?: Options\n): NavigateAction<NavigationState> | CommonActions.Action | undefined {\n  // Create a normalized configs object which will be easier to use\n  const normalizedConfig = options\n    ? createNormalizedConfigItem(options as PathConfig<object> | string)\n    : {};\n\n  const routes =\n    state.index != null ? state.routes.slice(0, state.index + 1) : state.routes;\n\n  if (routes.length === 0) {\n    return undefined;\n  }\n\n  if (\n    !(\n      (routes.length === 1 && routes[0].key === undefined) ||\n      (routes.length === 2 &&\n        routes[0].key === undefined &&\n        routes[0].name === normalizedConfig?.initialRouteName &&\n        routes[1].key === undefined)\n    )\n  ) {\n    return {\n      type: 'RESET',\n      payload: state,\n    };\n  }\n\n  const route = state.routes[state.index ?? state.routes.length - 1];\n\n  let current: PartialState<NavigationState> | undefined = route?.state;\n  let config: ConfigItem | undefined = normalizedConfig?.screens?.[route?.name];\n  let params = { ...route.params } as NavigatorScreenParams<\n    ParamListBase,\n    NavigationState\n  >;\n\n  let payload = route\n    ? { name: route.name, path: route.path, params }\n    : undefined;\n\n  while (current) {\n    if (current.routes.length === 0) {\n      return undefined;\n    }\n\n    const routes =\n      current.index != null\n        ? current.routes.slice(0, current.index + 1)\n        : current.routes;\n\n    const route: Route<string> | PartialRoute<Route<string>> =\n      routes[routes.length - 1];\n\n    // Explicitly set to override existing value when merging params\n    Object.assign(params, {\n      initial: undefined,\n      screen: undefined,\n      params: undefined,\n      state: undefined,\n    });\n\n    if (routes.length === 1 && routes[0].key === undefined) {\n      params.initial = true;\n      params.screen = route.name;\n    } else if (\n      routes.length === 2 &&\n      routes[0].key === undefined &&\n      routes[0].name === config?.initialRouteName &&\n      routes[1].key === undefined\n    ) {\n      params.initial = false;\n      params.screen = route.name;\n    } else {\n      params.state = current;\n      break;\n    }\n\n    if (route.state) {\n      params.params = { ...route.params };\n      params = params.params as NavigatorScreenParams<\n        ParamListBase,\n        NavigationState\n      >;\n    } else {\n      params.path = route.path;\n      params.params = route.params;\n    }\n\n    current = route.state;\n    config = config?.screens?.[route.name];\n  }\n\n  if (!payload) {\n    return;\n  }\n\n  // Try to construct payload for a `NAVIGATE` action from the state\n  // This lets us preserve the navigation state and not lose it\n  return {\n    type: 'NAVIGATE',\n    payload,\n  };\n}\n\nconst createNormalizedConfigItem = (config: PathConfig<object> | string) =>\n  typeof config === 'object' && config != null\n    ? {\n        initialRouteName: config.initialRouteName,\n        screens:\n          config.screens != null\n            ? createNormalizedConfigs(config.screens)\n            : undefined,\n      }\n    : {};\n\nconst createNormalizedConfigs = (options: PathConfigMap<object>) =>\n  Object.entries(options).reduce<Record<string, ConfigItem>>((acc, [k, v]) => {\n    acc[k] = createNormalizedConfigItem(v);\n    return acc;\n  }, {});\n"]},"metadata":{},"sourceType":"module"}