{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { ThrottledDelayer } from '../../../common/async.js';\nimport { Emitter, Event } from '../../../common/event.js';\nimport { Disposable } from '../../../common/lifecycle.js';\nimport { isUndefinedOrNull } from '../../../common/types.js';\nvar StorageState;\n\n(function (StorageState) {\n  StorageState[StorageState[\"None\"] = 0] = \"None\";\n  StorageState[StorageState[\"Initialized\"] = 1] = \"Initialized\";\n  StorageState[StorageState[\"Closed\"] = 2] = \"Closed\";\n})(StorageState || (StorageState = {}));\n\nexport class Storage extends Disposable {\n  constructor(database, options = Object.create(null)) {\n    super();\n    this.database = database;\n    this.options = options;\n    this._onDidChangeStorage = this._register(new Emitter());\n    this.onDidChangeStorage = this._onDidChangeStorage.event;\n    this.state = StorageState.None;\n    this.cache = new Map();\n    this.flushDelayer = new ThrottledDelayer(Storage.DEFAULT_FLUSH_DELAY);\n    this.pendingDeletes = new Set();\n    this.pendingInserts = new Map();\n    this.whenFlushedCallbacks = [];\n    this.registerListeners();\n  }\n\n  registerListeners() {\n    this._register(this.database.onDidChangeItemsExternal(e => this.onDidChangeItemsExternal(e)));\n  }\n\n  onDidChangeItemsExternal(e) {\n    var _a, _b; // items that change external require us to update our\n    // caches with the values. we just accept the value and\n    // emit an event if there is a change.\n\n\n    (_a = e.changed) === null || _a === void 0 ? void 0 : _a.forEach((value, key) => this.accept(key, value));\n    (_b = e.deleted) === null || _b === void 0 ? void 0 : _b.forEach(key => this.accept(key, undefined));\n  }\n\n  accept(key, value) {\n    if (this.state === StorageState.Closed) {\n      return; // Return early if we are already closed\n    }\n\n    let changed = false; // Item got removed, check for deletion\n\n    if (isUndefinedOrNull(value)) {\n      changed = this.cache.delete(key);\n    } // Item got updated, check for change\n    else {\n      const currentValue = this.cache.get(key);\n\n      if (currentValue !== value) {\n        this.cache.set(key, value);\n        changed = true;\n      }\n    } // Signal to outside listeners\n\n\n    if (changed) {\n      this._onDidChangeStorage.fire(key);\n    }\n  }\n\n  get(key, fallbackValue) {\n    const value = this.cache.get(key);\n\n    if (isUndefinedOrNull(value)) {\n      return fallbackValue;\n    }\n\n    return value;\n  }\n\n  getBoolean(key, fallbackValue) {\n    const value = this.get(key);\n\n    if (isUndefinedOrNull(value)) {\n      return fallbackValue;\n    }\n\n    return value === 'true';\n  }\n\n  getNumber(key, fallbackValue) {\n    const value = this.get(key);\n\n    if (isUndefinedOrNull(value)) {\n      return fallbackValue;\n    }\n\n    return parseInt(value, 10);\n  }\n\n  set(key, value) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.state === StorageState.Closed) {\n        return; // Return early if we are already closed\n      } // We remove the key for undefined/null values\n\n\n      if (isUndefinedOrNull(value)) {\n        return this.delete(key);\n      } // Otherwise, convert to String and store\n\n\n      const valueStr = String(value); // Return early if value already set\n\n      const currentValue = this.cache.get(key);\n\n      if (currentValue === valueStr) {\n        return;\n      } // Update in cache and pending\n\n\n      this.cache.set(key, valueStr);\n      this.pendingInserts.set(key, valueStr);\n      this.pendingDeletes.delete(key); // Event\n\n      this._onDidChangeStorage.fire(key); // Accumulate work by scheduling after timeout\n\n\n      return this.doFlush();\n    });\n  }\n\n  delete(key) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.state === StorageState.Closed) {\n        return; // Return early if we are already closed\n      } // Remove from cache and add to pending\n\n\n      const wasDeleted = this.cache.delete(key);\n\n      if (!wasDeleted) {\n        return; // Return early if value already deleted\n      }\n\n      if (!this.pendingDeletes.has(key)) {\n        this.pendingDeletes.add(key);\n      }\n\n      this.pendingInserts.delete(key); // Event\n\n      this._onDidChangeStorage.fire(key); // Accumulate work by scheduling after timeout\n\n\n      return this.doFlush();\n    });\n  }\n\n  get hasPending() {\n    return this.pendingInserts.size > 0 || this.pendingDeletes.size > 0;\n  }\n\n  flushPending() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.hasPending) {\n        return; // return early if nothing to do\n      } // Get pending data\n\n\n      const updateRequest = {\n        insert: this.pendingInserts,\n        delete: this.pendingDeletes\n      }; // Reset pending data for next run\n\n      this.pendingDeletes = new Set();\n      this.pendingInserts = new Map(); // Update in storage and release any\n      // waiters we have once done\n\n      return this.database.updateItems(updateRequest).finally(() => {\n        var _a;\n\n        if (!this.hasPending) {\n          while (this.whenFlushedCallbacks.length) {\n            (_a = this.whenFlushedCallbacks.pop()) === null || _a === void 0 ? void 0 : _a();\n          }\n        }\n      });\n    });\n  }\n\n  doFlush(delay) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.flushDelayer.trigger(() => this.flushPending(), delay);\n    });\n  }\n\n  dispose() {\n    this.flushDelayer.dispose();\n    super.dispose();\n  }\n\n}\nStorage.DEFAULT_FLUSH_DELAY = 100;\nexport class InMemoryStorageDatabase {\n  constructor() {\n    this.onDidChangeItemsExternal = Event.None;\n    this.items = new Map();\n  }\n\n  updateItems(request) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (request.insert) {\n        request.insert.forEach((value, key) => this.items.set(key, value));\n      }\n\n      if (request.delete) {\n        request.delete.forEach(key => this.items.delete(key));\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/base/parts/storage/common/storage.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","ThrottledDelayer","Emitter","Event","Disposable","isUndefinedOrNull","StorageState","Storage","constructor","database","options","Object","create","_onDidChangeStorage","_register","onDidChangeStorage","event","state","None","cache","Map","flushDelayer","DEFAULT_FLUSH_DELAY","pendingDeletes","Set","pendingInserts","whenFlushedCallbacks","registerListeners","onDidChangeItemsExternal","_a","_b","changed","forEach","key","accept","deleted","undefined","Closed","delete","currentValue","get","set","fire","fallbackValue","getBoolean","getNumber","parseInt","valueStr","String","doFlush","wasDeleted","has","add","hasPending","size","flushPending","updateRequest","insert","updateItems","finally","length","pop","delay","trigger","dispose","InMemoryStorageDatabase","items","request"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ThrottledDelayer } from '../../../common/async.js';\nimport { Emitter, Event } from '../../../common/event.js';\nimport { Disposable } from '../../../common/lifecycle.js';\nimport { isUndefinedOrNull } from '../../../common/types.js';\nvar StorageState;\n(function (StorageState) {\n    StorageState[StorageState[\"None\"] = 0] = \"None\";\n    StorageState[StorageState[\"Initialized\"] = 1] = \"Initialized\";\n    StorageState[StorageState[\"Closed\"] = 2] = \"Closed\";\n})(StorageState || (StorageState = {}));\nexport class Storage extends Disposable {\n    constructor(database, options = Object.create(null)) {\n        super();\n        this.database = database;\n        this.options = options;\n        this._onDidChangeStorage = this._register(new Emitter());\n        this.onDidChangeStorage = this._onDidChangeStorage.event;\n        this.state = StorageState.None;\n        this.cache = new Map();\n        this.flushDelayer = new ThrottledDelayer(Storage.DEFAULT_FLUSH_DELAY);\n        this.pendingDeletes = new Set();\n        this.pendingInserts = new Map();\n        this.whenFlushedCallbacks = [];\n        this.registerListeners();\n    }\n    registerListeners() {\n        this._register(this.database.onDidChangeItemsExternal(e => this.onDidChangeItemsExternal(e)));\n    }\n    onDidChangeItemsExternal(e) {\n        var _a, _b;\n        // items that change external require us to update our\n        // caches with the values. we just accept the value and\n        // emit an event if there is a change.\n        (_a = e.changed) === null || _a === void 0 ? void 0 : _a.forEach((value, key) => this.accept(key, value));\n        (_b = e.deleted) === null || _b === void 0 ? void 0 : _b.forEach(key => this.accept(key, undefined));\n    }\n    accept(key, value) {\n        if (this.state === StorageState.Closed) {\n            return; // Return early if we are already closed\n        }\n        let changed = false;\n        // Item got removed, check for deletion\n        if (isUndefinedOrNull(value)) {\n            changed = this.cache.delete(key);\n        }\n        // Item got updated, check for change\n        else {\n            const currentValue = this.cache.get(key);\n            if (currentValue !== value) {\n                this.cache.set(key, value);\n                changed = true;\n            }\n        }\n        // Signal to outside listeners\n        if (changed) {\n            this._onDidChangeStorage.fire(key);\n        }\n    }\n    get(key, fallbackValue) {\n        const value = this.cache.get(key);\n        if (isUndefinedOrNull(value)) {\n            return fallbackValue;\n        }\n        return value;\n    }\n    getBoolean(key, fallbackValue) {\n        const value = this.get(key);\n        if (isUndefinedOrNull(value)) {\n            return fallbackValue;\n        }\n        return value === 'true';\n    }\n    getNumber(key, fallbackValue) {\n        const value = this.get(key);\n        if (isUndefinedOrNull(value)) {\n            return fallbackValue;\n        }\n        return parseInt(value, 10);\n    }\n    set(key, value) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.state === StorageState.Closed) {\n                return; // Return early if we are already closed\n            }\n            // We remove the key for undefined/null values\n            if (isUndefinedOrNull(value)) {\n                return this.delete(key);\n            }\n            // Otherwise, convert to String and store\n            const valueStr = String(value);\n            // Return early if value already set\n            const currentValue = this.cache.get(key);\n            if (currentValue === valueStr) {\n                return;\n            }\n            // Update in cache and pending\n            this.cache.set(key, valueStr);\n            this.pendingInserts.set(key, valueStr);\n            this.pendingDeletes.delete(key);\n            // Event\n            this._onDidChangeStorage.fire(key);\n            // Accumulate work by scheduling after timeout\n            return this.doFlush();\n        });\n    }\n    delete(key) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.state === StorageState.Closed) {\n                return; // Return early if we are already closed\n            }\n            // Remove from cache and add to pending\n            const wasDeleted = this.cache.delete(key);\n            if (!wasDeleted) {\n                return; // Return early if value already deleted\n            }\n            if (!this.pendingDeletes.has(key)) {\n                this.pendingDeletes.add(key);\n            }\n            this.pendingInserts.delete(key);\n            // Event\n            this._onDidChangeStorage.fire(key);\n            // Accumulate work by scheduling after timeout\n            return this.doFlush();\n        });\n    }\n    get hasPending() {\n        return this.pendingInserts.size > 0 || this.pendingDeletes.size > 0;\n    }\n    flushPending() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.hasPending) {\n                return; // return early if nothing to do\n            }\n            // Get pending data\n            const updateRequest = { insert: this.pendingInserts, delete: this.pendingDeletes };\n            // Reset pending data for next run\n            this.pendingDeletes = new Set();\n            this.pendingInserts = new Map();\n            // Update in storage and release any\n            // waiters we have once done\n            return this.database.updateItems(updateRequest).finally(() => {\n                var _a;\n                if (!this.hasPending) {\n                    while (this.whenFlushedCallbacks.length) {\n                        (_a = this.whenFlushedCallbacks.pop()) === null || _a === void 0 ? void 0 : _a();\n                    }\n                }\n            });\n        });\n    }\n    doFlush(delay) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.flushDelayer.trigger(() => this.flushPending(), delay);\n        });\n    }\n    dispose() {\n        this.flushDelayer.dispose();\n        super.dispose();\n    }\n}\nStorage.DEFAULT_FLUSH_DELAY = 100;\nexport class InMemoryStorageDatabase {\n    constructor() {\n        this.onDidChangeItemsExternal = Event.None;\n        this.items = new Map();\n    }\n    updateItems(request) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (request.insert) {\n                request.insert.forEach((value, key) => this.items.set(key, value));\n            }\n            if (request.delete) {\n                request.delete.forEach(key => this.items.delete(key));\n            }\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}