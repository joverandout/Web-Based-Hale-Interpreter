{"ast":null,"code":"/**\n * Compare two arrays with primitive values as the content.\n * We need to make sure that both values and order match.\n */\nexport default function isArrayEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  return a.every((it, index) => it === b[index]);\n}","map":{"version":3,"sources":["isArrayEqual.tsx"],"names":["a","b","it"],"mappings":"AAAA;AACA;AACA;AACA;AACA,eAAe,SAAA,YAAA,CAAA,CAAA,EAAA,CAAA,EAA0C;AACvD,MAAIA,CAAC,KAAL,CAAA,EAAa;AACX,WAAA,IAAA;AACD;;AAED,MAAIA,CAAC,CAADA,MAAAA,KAAaC,CAAC,CAAlB,MAAA,EAA2B;AACzB,WAAA,KAAA;AACD;;AAED,SAAOD,CAAC,CAADA,KAAAA,CAAQ,CAAA,EAAA,EAAA,KAAA,KAAeE,EAAE,KAAKD,CAAC,CAAtC,KAAsC,CAA/BD,CAAP;AACD","sourcesContent":["/**\n * Compare two arrays with primitive values as the content.\n * We need to make sure that both values and order match.\n */\nexport default function isArrayEqual(a: any[], b: any[]) {\n  if (a === b) {\n    return true;\n  }\n\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  return a.every((it, index) => it === b[index]);\n}\n"]},"metadata":{},"sourceType":"module"}