{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { distinct } from '../../../../base/common/arrays.js';\nimport { ignoreBracketsInToken } from '../supports.js';\nimport { BracketsUtils } from './richEditBrackets.js';\nexport class BracketElectricCharacterSupport {\n  constructor(richEditBrackets) {\n    this._richEditBrackets = richEditBrackets;\n  }\n\n  getElectricCharacters() {\n    const result = [];\n\n    if (this._richEditBrackets) {\n      for (const bracket of this._richEditBrackets.brackets) {\n        for (const close of bracket.close) {\n          const lastChar = close.charAt(close.length - 1);\n          result.push(lastChar);\n        }\n      }\n    }\n\n    return distinct(result);\n  }\n\n  onElectricCharacter(character, context, column) {\n    if (!this._richEditBrackets || this._richEditBrackets.brackets.length === 0) {\n      return null;\n    }\n\n    const tokenIndex = context.findTokenIndexAtOffset(column - 1);\n\n    if (ignoreBracketsInToken(context.getStandardTokenType(tokenIndex))) {\n      return null;\n    }\n\n    const reversedBracketRegex = this._richEditBrackets.reversedRegex;\n    const text = context.getLineContent().substring(0, column - 1) + character;\n    const r = BracketsUtils.findPrevBracketInRange(reversedBracketRegex, 1, text, 0, text.length);\n\n    if (!r) {\n      return null;\n    }\n\n    const bracketText = text.substring(r.startColumn - 1, r.endColumn - 1).toLowerCase();\n    const isOpen = this._richEditBrackets.textIsOpenBracket[bracketText];\n\n    if (isOpen) {\n      return null;\n    }\n\n    const textBeforeBracket = context.getActualLineContentBefore(r.startColumn - 1);\n\n    if (!/^\\s*$/.test(textBeforeBracket)) {\n      // There is other text on the line before the bracket\n      return null;\n    }\n\n    return {\n      matchOpenBracket: bracketText\n    };\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/common/languages/supports/electricCharacter.js"],"names":["distinct","ignoreBracketsInToken","BracketsUtils","BracketElectricCharacterSupport","constructor","richEditBrackets","_richEditBrackets","getElectricCharacters","result","bracket","brackets","close","lastChar","charAt","length","push","onElectricCharacter","character","context","column","tokenIndex","findTokenIndexAtOffset","getStandardTokenType","reversedBracketRegex","reversedRegex","text","getLineContent","substring","r","findPrevBracketInRange","bracketText","startColumn","endColumn","toLowerCase","isOpen","textIsOpenBracket","textBeforeBracket","getActualLineContentBefore","test","matchOpenBracket"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,QAAT,QAAyB,mCAAzB;AACA,SAASC,qBAAT,QAAsC,gBAAtC;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,OAAO,MAAMC,+BAAN,CAAsC;AACzCC,EAAAA,WAAW,CAACC,gBAAD,EAAmB;AAC1B,SAAKC,iBAAL,GAAyBD,gBAAzB;AACH;;AACDE,EAAAA,qBAAqB,GAAG;AACpB,UAAMC,MAAM,GAAG,EAAf;;AACA,QAAI,KAAKF,iBAAT,EAA4B;AACxB,WAAK,MAAMG,OAAX,IAAsB,KAAKH,iBAAL,CAAuBI,QAA7C,EAAuD;AACnD,aAAK,MAAMC,KAAX,IAAoBF,OAAO,CAACE,KAA5B,EAAmC;AAC/B,gBAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAN,CAAaF,KAAK,CAACG,MAAN,GAAe,CAA5B,CAAjB;AACAN,UAAAA,MAAM,CAACO,IAAP,CAAYH,QAAZ;AACH;AACJ;AACJ;;AACD,WAAOZ,QAAQ,CAACQ,MAAD,CAAf;AACH;;AACDQ,EAAAA,mBAAmB,CAACC,SAAD,EAAYC,OAAZ,EAAqBC,MAArB,EAA6B;AAC5C,QAAI,CAAC,KAAKb,iBAAN,IAA2B,KAAKA,iBAAL,CAAuBI,QAAvB,CAAgCI,MAAhC,KAA2C,CAA1E,EAA6E;AACzE,aAAO,IAAP;AACH;;AACD,UAAMM,UAAU,GAAGF,OAAO,CAACG,sBAAR,CAA+BF,MAAM,GAAG,CAAxC,CAAnB;;AACA,QAAIlB,qBAAqB,CAACiB,OAAO,CAACI,oBAAR,CAA6BF,UAA7B,CAAD,CAAzB,EAAqE;AACjE,aAAO,IAAP;AACH;;AACD,UAAMG,oBAAoB,GAAG,KAAKjB,iBAAL,CAAuBkB,aAApD;AACA,UAAMC,IAAI,GAAGP,OAAO,CAACQ,cAAR,GAAyBC,SAAzB,CAAmC,CAAnC,EAAsCR,MAAM,GAAG,CAA/C,IAAoDF,SAAjE;AACA,UAAMW,CAAC,GAAG1B,aAAa,CAAC2B,sBAAd,CAAqCN,oBAArC,EAA2D,CAA3D,EAA8DE,IAA9D,EAAoE,CAApE,EAAuEA,IAAI,CAACX,MAA5E,CAAV;;AACA,QAAI,CAACc,CAAL,EAAQ;AACJ,aAAO,IAAP;AACH;;AACD,UAAME,WAAW,GAAGL,IAAI,CAACE,SAAL,CAAeC,CAAC,CAACG,WAAF,GAAgB,CAA/B,EAAkCH,CAAC,CAACI,SAAF,GAAc,CAAhD,EAAmDC,WAAnD,EAApB;AACA,UAAMC,MAAM,GAAG,KAAK5B,iBAAL,CAAuB6B,iBAAvB,CAAyCL,WAAzC,CAAf;;AACA,QAAII,MAAJ,EAAY;AACR,aAAO,IAAP;AACH;;AACD,UAAME,iBAAiB,GAAGlB,OAAO,CAACmB,0BAAR,CAAmCT,CAAC,CAACG,WAAF,GAAgB,CAAnD,CAA1B;;AACA,QAAI,CAAC,QAAQO,IAAR,CAAaF,iBAAb,CAAL,EAAsC;AAClC;AACA,aAAO,IAAP;AACH;;AACD,WAAO;AACHG,MAAAA,gBAAgB,EAAET;AADf,KAAP;AAGH;;AA3CwC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { distinct } from '../../../../base/common/arrays.js';\nimport { ignoreBracketsInToken } from '../supports.js';\nimport { BracketsUtils } from './richEditBrackets.js';\nexport class BracketElectricCharacterSupport {\n    constructor(richEditBrackets) {\n        this._richEditBrackets = richEditBrackets;\n    }\n    getElectricCharacters() {\n        const result = [];\n        if (this._richEditBrackets) {\n            for (const bracket of this._richEditBrackets.brackets) {\n                for (const close of bracket.close) {\n                    const lastChar = close.charAt(close.length - 1);\n                    result.push(lastChar);\n                }\n            }\n        }\n        return distinct(result);\n    }\n    onElectricCharacter(character, context, column) {\n        if (!this._richEditBrackets || this._richEditBrackets.brackets.length === 0) {\n            return null;\n        }\n        const tokenIndex = context.findTokenIndexAtOffset(column - 1);\n        if (ignoreBracketsInToken(context.getStandardTokenType(tokenIndex))) {\n            return null;\n        }\n        const reversedBracketRegex = this._richEditBrackets.reversedRegex;\n        const text = context.getLineContent().substring(0, column - 1) + character;\n        const r = BracketsUtils.findPrevBracketInRange(reversedBracketRegex, 1, text, 0, text.length);\n        if (!r) {\n            return null;\n        }\n        const bracketText = text.substring(r.startColumn - 1, r.endColumn - 1).toLowerCase();\n        const isOpen = this._richEditBrackets.textIsOpenBracket[bracketText];\n        if (isOpen) {\n            return null;\n        }\n        const textBeforeBracket = context.getActualLineContentBefore(r.startColumn - 1);\n        if (!/^\\s*$/.test(textBeforeBracket)) {\n            // There is other text on the line before the bracket\n            return null;\n        }\n        return {\n            matchOpenBracket: bracketText\n        };\n    }\n}\n"]},"metadata":{},"sourceType":"module"}