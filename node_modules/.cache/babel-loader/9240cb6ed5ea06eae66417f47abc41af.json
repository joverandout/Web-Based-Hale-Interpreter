{"ast":null,"code":"import '../../editor/editor.api.js';\n/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\n\nvar __reExport = (target, module, copyDefault, desc) => {\n  if (module && typeof module === \"object\" || typeof module === \"function\") {\n    for (let key of __getOwnPropNames(module)) if (!__hasOwnProp.call(target, key) && (copyDefault || key !== \"default\")) __defProp(target, key, {\n      get: () => module[key],\n      enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable\n    });\n  }\n\n  return target;\n}; // src/fillers/monaco-editor-core.ts\n\n\nvar monaco_editor_core_exports = {};\n\n__reExport(monaco_editor_core_exports, monaco_editor_core_star);\n\nimport * as monaco_editor_core_star from \"../../editor/editor.api.js\"; // src/language/json/monaco.contribution.ts\n\nvar LanguageServiceDefaultsImpl = class {\n  _onDidChange = new monaco_editor_core_exports.Emitter();\n  _diagnosticsOptions;\n  _modeConfiguration;\n  _languageId;\n\n  constructor(languageId, diagnosticsOptions, modeConfiguration) {\n    this._languageId = languageId;\n    this.setDiagnosticsOptions(diagnosticsOptions);\n    this.setModeConfiguration(modeConfiguration);\n  }\n\n  get onDidChange() {\n    return this._onDidChange.event;\n  }\n\n  get languageId() {\n    return this._languageId;\n  }\n\n  get modeConfiguration() {\n    return this._modeConfiguration;\n  }\n\n  get diagnosticsOptions() {\n    return this._diagnosticsOptions;\n  }\n\n  setDiagnosticsOptions(options) {\n    this._diagnosticsOptions = options || /* @__PURE__ */Object.create(null);\n\n    this._onDidChange.fire(this);\n  }\n\n  setModeConfiguration(modeConfiguration) {\n    this._modeConfiguration = modeConfiguration || /* @__PURE__ */Object.create(null);\n\n    this._onDidChange.fire(this);\n  }\n\n};\nvar diagnosticDefault = {\n  validate: true,\n  allowComments: true,\n  schemas: [],\n  enableSchemaRequest: false,\n  schemaRequest: \"warning\",\n  schemaValidation: \"warning\",\n  comments: \"error\",\n  trailingCommas: \"error\"\n};\nvar modeConfigurationDefault = {\n  documentFormattingEdits: true,\n  documentRangeFormattingEdits: true,\n  completionItems: true,\n  hovers: true,\n  documentSymbols: true,\n  tokens: true,\n  colors: true,\n  foldingRanges: true,\n  diagnostics: true,\n  selectionRanges: true\n};\nvar jsonDefaults = new LanguageServiceDefaultsImpl(\"json\", diagnosticDefault, modeConfigurationDefault);\nmonaco_editor_core_exports.languages.json = {\n  jsonDefaults\n};\n\nfunction getMode() {\n  if (false) {\n    return new Promise((resolve, reject) => {\n      __require([\"vs/language/json/jsonMode\"], resolve, reject);\n    });\n  } else {\n    return import(\"./jsonMode.js\");\n  }\n}\n\nmonaco_editor_core_exports.languages.register({\n  id: \"json\",\n  extensions: [\".json\", \".bowerrc\", \".jshintrc\", \".jscsrc\", \".eslintrc\", \".babelrc\", \".har\"],\n  aliases: [\"JSON\", \"json\"],\n  mimetypes: [\"application/json\"]\n});\nmonaco_editor_core_exports.languages.onLanguage(\"json\", () => {\n  getMode().then(mode => mode.setupMode(jsonDefaults));\n});\nexport { jsonDefaults };","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/language/json/monaco.contribution.js"],"names":["__defProp","Object","defineProperty","__getOwnPropDesc","getOwnPropertyDescriptor","__getOwnPropNames","getOwnPropertyNames","__hasOwnProp","prototype","hasOwnProperty","__reExport","target","module","copyDefault","desc","key","call","get","enumerable","monaco_editor_core_exports","monaco_editor_core_star","LanguageServiceDefaultsImpl","_onDidChange","Emitter","_diagnosticsOptions","_modeConfiguration","_languageId","constructor","languageId","diagnosticsOptions","modeConfiguration","setDiagnosticsOptions","setModeConfiguration","onDidChange","event","options","create","fire","diagnosticDefault","validate","allowComments","schemas","enableSchemaRequest","schemaRequest","schemaValidation","comments","trailingCommas","modeConfigurationDefault","documentFormattingEdits","documentRangeFormattingEdits","completionItems","hovers","documentSymbols","tokens","colors","foldingRanges","diagnostics","selectionRanges","jsonDefaults","languages","json","getMode","Promise","resolve","reject","__require","register","id","extensions","aliases","mimetypes","onLanguage","then","mode","setupMode"],"mappings":"AAAA,OAAO,4BAAP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,SAAS,GAAGC,MAAM,CAACC,cAAvB;AACA,IAAIC,gBAAgB,GAAGF,MAAM,CAACG,wBAA9B;AACA,IAAIC,iBAAiB,GAAGJ,MAAM,CAACK,mBAA/B;AACA,IAAIC,YAAY,GAAGN,MAAM,CAACO,SAAP,CAAiBC,cAApC;;AACA,IAAIC,UAAU,GAAG,CAACC,MAAD,EAASC,MAAT,EAAiBC,WAAjB,EAA8BC,IAA9B,KAAuC;AACtD,MAAIF,MAAM,IAAI,OAAOA,MAAP,KAAkB,QAA5B,IAAwC,OAAOA,MAAP,KAAkB,UAA9D,EAA0E;AACxE,SAAK,IAAIG,GAAT,IAAgBV,iBAAiB,CAACO,MAAD,CAAjC,EACE,IAAI,CAACL,YAAY,CAACS,IAAb,CAAkBL,MAAlB,EAA0BI,GAA1B,CAAD,KAAoCF,WAAW,IAAIE,GAAG,KAAK,SAA3D,CAAJ,EACEf,SAAS,CAACW,MAAD,EAASI,GAAT,EAAc;AAAEE,MAAAA,GAAG,EAAE,MAAML,MAAM,CAACG,GAAD,CAAnB;AAA0BG,MAAAA,UAAU,EAAE,EAAEJ,IAAI,GAAGX,gBAAgB,CAACS,MAAD,EAASG,GAAT,CAAzB,KAA2CD,IAAI,CAACI;AAAtF,KAAd,CAAT;AACL;;AACD,SAAOP,MAAP;AACD,CAPD,C,CASA;;;AACA,IAAIQ,0BAA0B,GAAG,EAAjC;;AACAT,UAAU,CAACS,0BAAD,EAA6BC,uBAA7B,CAAV;;AACA,OAAO,KAAKA,uBAAZ,MAAyC,4BAAzC,C,CAEA;;AACA,IAAIC,2BAA2B,GAAG,MAAM;AACtCC,EAAAA,YAAY,GAAG,IAAIH,0BAA0B,CAACI,OAA/B,EAAH;AACZC,EAAAA,mBAAmB;AACnBC,EAAAA,kBAAkB;AAClBC,EAAAA,WAAW;;AACXC,EAAAA,WAAW,CAACC,UAAD,EAAaC,kBAAb,EAAiCC,iBAAjC,EAAoD;AAC7D,SAAKJ,WAAL,GAAmBE,UAAnB;AACA,SAAKG,qBAAL,CAA2BF,kBAA3B;AACA,SAAKG,oBAAL,CAA0BF,iBAA1B;AACD;;AACc,MAAXG,WAAW,GAAG;AAChB,WAAO,KAAKX,YAAL,CAAkBY,KAAzB;AACD;;AACa,MAAVN,UAAU,GAAG;AACf,WAAO,KAAKF,WAAZ;AACD;;AACoB,MAAjBI,iBAAiB,GAAG;AACtB,WAAO,KAAKL,kBAAZ;AACD;;AACqB,MAAlBI,kBAAkB,GAAG;AACvB,WAAO,KAAKL,mBAAZ;AACD;;AACDO,EAAAA,qBAAqB,CAACI,OAAD,EAAU;AAC7B,SAAKX,mBAAL,GAA2BW,OAAO,IAAI,eAAgBlC,MAAM,CAACmC,MAAP,CAAc,IAAd,CAAtD;;AACA,SAAKd,YAAL,CAAkBe,IAAlB,CAAuB,IAAvB;AACD;;AACDL,EAAAA,oBAAoB,CAACF,iBAAD,EAAoB;AACtC,SAAKL,kBAAL,GAA0BK,iBAAiB,IAAI,eAAgB7B,MAAM,CAACmC,MAAP,CAAc,IAAd,CAA/D;;AACA,SAAKd,YAAL,CAAkBe,IAAlB,CAAuB,IAAvB;AACD;;AA7BqC,CAAxC;AA+BA,IAAIC,iBAAiB,GAAG;AACtBC,EAAAA,QAAQ,EAAE,IADY;AAEtBC,EAAAA,aAAa,EAAE,IAFO;AAGtBC,EAAAA,OAAO,EAAE,EAHa;AAItBC,EAAAA,mBAAmB,EAAE,KAJC;AAKtBC,EAAAA,aAAa,EAAE,SALO;AAMtBC,EAAAA,gBAAgB,EAAE,SANI;AAOtBC,EAAAA,QAAQ,EAAE,OAPY;AAQtBC,EAAAA,cAAc,EAAE;AARM,CAAxB;AAUA,IAAIC,wBAAwB,GAAG;AAC7BC,EAAAA,uBAAuB,EAAE,IADI;AAE7BC,EAAAA,4BAA4B,EAAE,IAFD;AAG7BC,EAAAA,eAAe,EAAE,IAHY;AAI7BC,EAAAA,MAAM,EAAE,IAJqB;AAK7BC,EAAAA,eAAe,EAAE,IALY;AAM7BC,EAAAA,MAAM,EAAE,IANqB;AAO7BC,EAAAA,MAAM,EAAE,IAPqB;AAQ7BC,EAAAA,aAAa,EAAE,IARc;AAS7BC,EAAAA,WAAW,EAAE,IATgB;AAU7BC,EAAAA,eAAe,EAAE;AAVY,CAA/B;AAYA,IAAIC,YAAY,GAAG,IAAIrC,2BAAJ,CAAgC,MAAhC,EAAwCiB,iBAAxC,EAA2DS,wBAA3D,CAAnB;AACA5B,0BAA0B,CAACwC,SAA3B,CAAqCC,IAArC,GAA4C;AAAEF,EAAAA;AAAF,CAA5C;;AACA,SAASG,OAAT,GAAmB;AACjB,MAAI,KAAJ,EAAW;AACT,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,SAAS,CAAC,CAAC,2BAAD,CAAD,EAAgCF,OAAhC,EAAyCC,MAAzC,CAAT;AACD,KAFM,CAAP;AAGD,GAJD,MAIO;AACL,WAAO,OAAO,eAAP,CAAP;AACD;AACF;;AACD7C,0BAA0B,CAACwC,SAA3B,CAAqCO,QAArC,CAA8C;AAC5CC,EAAAA,EAAE,EAAE,MADwC;AAE5CC,EAAAA,UAAU,EAAE,CAAC,OAAD,EAAU,UAAV,EAAsB,WAAtB,EAAmC,SAAnC,EAA8C,WAA9C,EAA2D,UAA3D,EAAuE,MAAvE,CAFgC;AAG5CC,EAAAA,OAAO,EAAE,CAAC,MAAD,EAAS,MAAT,CAHmC;AAI5CC,EAAAA,SAAS,EAAE,CAAC,kBAAD;AAJiC,CAA9C;AAMAnD,0BAA0B,CAACwC,SAA3B,CAAqCY,UAArC,CAAgD,MAAhD,EAAwD,MAAM;AAC5DV,EAAAA,OAAO,GAAGW,IAAV,CAAgBC,IAAD,IAAUA,IAAI,CAACC,SAAL,CAAehB,YAAf,CAAzB;AACD,CAFD;AAGA,SACEA,YADF","sourcesContent":["import '../../editor/editor.api.js';\n/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __reExport = (target, module, copyDefault, desc) => {\n  if (module && typeof module === \"object\" || typeof module === \"function\") {\n    for (let key of __getOwnPropNames(module))\n      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== \"default\"))\n        __defProp(target, key, { get: () => module[key], enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable });\n  }\n  return target;\n};\n\n// src/fillers/monaco-editor-core.ts\nvar monaco_editor_core_exports = {};\n__reExport(monaco_editor_core_exports, monaco_editor_core_star);\nimport * as monaco_editor_core_star from \"../../editor/editor.api.js\";\n\n// src/language/json/monaco.contribution.ts\nvar LanguageServiceDefaultsImpl = class {\n  _onDidChange = new monaco_editor_core_exports.Emitter();\n  _diagnosticsOptions;\n  _modeConfiguration;\n  _languageId;\n  constructor(languageId, diagnosticsOptions, modeConfiguration) {\n    this._languageId = languageId;\n    this.setDiagnosticsOptions(diagnosticsOptions);\n    this.setModeConfiguration(modeConfiguration);\n  }\n  get onDidChange() {\n    return this._onDidChange.event;\n  }\n  get languageId() {\n    return this._languageId;\n  }\n  get modeConfiguration() {\n    return this._modeConfiguration;\n  }\n  get diagnosticsOptions() {\n    return this._diagnosticsOptions;\n  }\n  setDiagnosticsOptions(options) {\n    this._diagnosticsOptions = options || /* @__PURE__ */ Object.create(null);\n    this._onDidChange.fire(this);\n  }\n  setModeConfiguration(modeConfiguration) {\n    this._modeConfiguration = modeConfiguration || /* @__PURE__ */ Object.create(null);\n    this._onDidChange.fire(this);\n  }\n};\nvar diagnosticDefault = {\n  validate: true,\n  allowComments: true,\n  schemas: [],\n  enableSchemaRequest: false,\n  schemaRequest: \"warning\",\n  schemaValidation: \"warning\",\n  comments: \"error\",\n  trailingCommas: \"error\"\n};\nvar modeConfigurationDefault = {\n  documentFormattingEdits: true,\n  documentRangeFormattingEdits: true,\n  completionItems: true,\n  hovers: true,\n  documentSymbols: true,\n  tokens: true,\n  colors: true,\n  foldingRanges: true,\n  diagnostics: true,\n  selectionRanges: true\n};\nvar jsonDefaults = new LanguageServiceDefaultsImpl(\"json\", diagnosticDefault, modeConfigurationDefault);\nmonaco_editor_core_exports.languages.json = { jsonDefaults };\nfunction getMode() {\n  if (false) {\n    return new Promise((resolve, reject) => {\n      __require([\"vs/language/json/jsonMode\"], resolve, reject);\n    });\n  } else {\n    return import(\"./jsonMode.js\");\n  }\n}\nmonaco_editor_core_exports.languages.register({\n  id: \"json\",\n  extensions: [\".json\", \".bowerrc\", \".jshintrc\", \".jscsrc\", \".eslintrc\", \".babelrc\", \".har\"],\n  aliases: [\"JSON\", \"json\"],\n  mimetypes: [\"application/json\"]\n});\nmonaco_editor_core_exports.languages.onLanguage(\"json\", () => {\n  getMode().then((mode) => mode.setupMode(jsonDefaults));\n});\nexport {\n  jsonDefaults\n};\n"]},"metadata":{},"sourceType":"module"}