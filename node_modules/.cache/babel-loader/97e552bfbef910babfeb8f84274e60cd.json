{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from './strings.js';\nvar Severity;\n\n(function (Severity) {\n  Severity[Severity[\"Ignore\"] = 0] = \"Ignore\";\n  Severity[Severity[\"Info\"] = 1] = \"Info\";\n  Severity[Severity[\"Warning\"] = 2] = \"Warning\";\n  Severity[Severity[\"Error\"] = 3] = \"Error\";\n})(Severity || (Severity = {}));\n\n(function (Severity) {\n  const _error = 'error';\n  const _warning = 'warning';\n  const _warn = 'warn';\n  const _info = 'info';\n  const _ignore = 'ignore';\n  /**\n   * Parses 'error', 'warning', 'warn', 'info' in call casings\n   * and falls back to ignore.\n   */\n\n  function fromValue(value) {\n    if (!value) {\n      return Severity.Ignore;\n    }\n\n    if (strings.equalsIgnoreCase(_error, value)) {\n      return Severity.Error;\n    }\n\n    if (strings.equalsIgnoreCase(_warning, value) || strings.equalsIgnoreCase(_warn, value)) {\n      return Severity.Warning;\n    }\n\n    if (strings.equalsIgnoreCase(_info, value)) {\n      return Severity.Info;\n    }\n\n    return Severity.Ignore;\n  }\n\n  Severity.fromValue = fromValue;\n\n  function toString(severity) {\n    switch (severity) {\n      case Severity.Error:\n        return _error;\n\n      case Severity.Warning:\n        return _warning;\n\n      case Severity.Info:\n        return _info;\n\n      default:\n        return _ignore;\n    }\n  }\n\n  Severity.toString = toString;\n})(Severity || (Severity = {}));\n\nexport default Severity;","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/base/common/severity.js"],"names":["strings","Severity","_error","_warning","_warn","_info","_ignore","fromValue","value","Ignore","equalsIgnoreCase","Error","Warning","Info","toString","severity"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,KAAKA,OAAZ,MAAyB,cAAzB;AACA,IAAIC,QAAJ;;AACA,CAAC,UAAUA,QAAV,EAAoB;AACjBA,EAAAA,QAAQ,CAACA,QAAQ,CAAC,QAAD,CAAR,GAAqB,CAAtB,CAAR,GAAmC,QAAnC;AACAA,EAAAA,QAAQ,CAACA,QAAQ,CAAC,MAAD,CAAR,GAAmB,CAApB,CAAR,GAAiC,MAAjC;AACAA,EAAAA,QAAQ,CAACA,QAAQ,CAAC,SAAD,CAAR,GAAsB,CAAvB,CAAR,GAAoC,SAApC;AACAA,EAAAA,QAAQ,CAACA,QAAQ,CAAC,OAAD,CAAR,GAAoB,CAArB,CAAR,GAAkC,OAAlC;AACH,CALD,EAKGA,QAAQ,KAAKA,QAAQ,GAAG,EAAhB,CALX;;AAMA,CAAC,UAAUA,QAAV,EAAoB;AACjB,QAAMC,MAAM,GAAG,OAAf;AACA,QAAMC,QAAQ,GAAG,SAAjB;AACA,QAAMC,KAAK,GAAG,MAAd;AACA,QAAMC,KAAK,GAAG,MAAd;AACA,QAAMC,OAAO,GAAG,QAAhB;AACA;AACJ;AACA;AACA;;AACI,WAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACtB,QAAI,CAACA,KAAL,EAAY;AACR,aAAOP,QAAQ,CAACQ,MAAhB;AACH;;AACD,QAAIT,OAAO,CAACU,gBAAR,CAAyBR,MAAzB,EAAiCM,KAAjC,CAAJ,EAA6C;AACzC,aAAOP,QAAQ,CAACU,KAAhB;AACH;;AACD,QAAIX,OAAO,CAACU,gBAAR,CAAyBP,QAAzB,EAAmCK,KAAnC,KAA6CR,OAAO,CAACU,gBAAR,CAAyBN,KAAzB,EAAgCI,KAAhC,CAAjD,EAAyF;AACrF,aAAOP,QAAQ,CAACW,OAAhB;AACH;;AACD,QAAIZ,OAAO,CAACU,gBAAR,CAAyBL,KAAzB,EAAgCG,KAAhC,CAAJ,EAA4C;AACxC,aAAOP,QAAQ,CAACY,IAAhB;AACH;;AACD,WAAOZ,QAAQ,CAACQ,MAAhB;AACH;;AACDR,EAAAA,QAAQ,CAACM,SAAT,GAAqBA,SAArB;;AACA,WAASO,QAAT,CAAkBC,QAAlB,EAA4B;AACxB,YAAQA,QAAR;AACI,WAAKd,QAAQ,CAACU,KAAd;AAAqB,eAAOT,MAAP;;AACrB,WAAKD,QAAQ,CAACW,OAAd;AAAuB,eAAOT,QAAP;;AACvB,WAAKF,QAAQ,CAACY,IAAd;AAAoB,eAAOR,KAAP;;AACpB;AAAS,eAAOC,OAAP;AAJb;AAMH;;AACDL,EAAAA,QAAQ,CAACa,QAAT,GAAoBA,QAApB;AACH,CAnCD,EAmCGb,QAAQ,KAAKA,QAAQ,GAAG,EAAhB,CAnCX;;AAoCA,eAAeA,QAAf","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from './strings.js';\nvar Severity;\n(function (Severity) {\n    Severity[Severity[\"Ignore\"] = 0] = \"Ignore\";\n    Severity[Severity[\"Info\"] = 1] = \"Info\";\n    Severity[Severity[\"Warning\"] = 2] = \"Warning\";\n    Severity[Severity[\"Error\"] = 3] = \"Error\";\n})(Severity || (Severity = {}));\n(function (Severity) {\n    const _error = 'error';\n    const _warning = 'warning';\n    const _warn = 'warn';\n    const _info = 'info';\n    const _ignore = 'ignore';\n    /**\n     * Parses 'error', 'warning', 'warn', 'info' in call casings\n     * and falls back to ignore.\n     */\n    function fromValue(value) {\n        if (!value) {\n            return Severity.Ignore;\n        }\n        if (strings.equalsIgnoreCase(_error, value)) {\n            return Severity.Error;\n        }\n        if (strings.equalsIgnoreCase(_warning, value) || strings.equalsIgnoreCase(_warn, value)) {\n            return Severity.Warning;\n        }\n        if (strings.equalsIgnoreCase(_info, value)) {\n            return Severity.Info;\n        }\n        return Severity.Ignore;\n    }\n    Severity.fromValue = fromValue;\n    function toString(severity) {\n        switch (severity) {\n            case Severity.Error: return _error;\n            case Severity.Warning: return _warning;\n            case Severity.Info: return _info;\n            default: return _ignore;\n        }\n    }\n    Severity.toString = toString;\n})(Severity || (Severity = {}));\nexport default Severity;\n"]},"metadata":{},"sourceType":"module"}