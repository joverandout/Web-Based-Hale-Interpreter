{"ast":null,"code":"/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n// src/basic-languages/lexon/lexon.ts\nvar conf = {\n  comments: {\n    lineComment: \"COMMENT\"\n  },\n  brackets: [[\"(\", \")\"]],\n  autoClosingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \":\",\n    close: \".\"\n  }],\n  surroundingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: \"`\",\n    close: \"`\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }, {\n    open: \":\",\n    close: \".\"\n  }],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*(::\\\\s*|COMMENT\\\\s+)#region\"),\n      end: new RegExp(\"^\\\\s*(::\\\\s*|COMMENT\\\\s+)#endregion\")\n    }\n  }\n};\nvar language = {\n  tokenPostfix: \".lexon\",\n  ignoreCase: true,\n  keywords: [\"lexon\", \"lex\", \"clause\", \"terms\", \"contracts\", \"may\", \"pay\", \"pays\", \"appoints\", \"into\", \"to\"],\n  typeKeywords: [\"amount\", \"person\", \"key\", \"time\", \"date\", \"asset\", \"text\"],\n  operators: [\"less\", \"greater\", \"equal\", \"le\", \"gt\", \"or\", \"and\", \"add\", \"added\", \"subtract\", \"subtracted\", \"multiply\", \"multiplied\", \"times\", \"divide\", \"divided\", \"is\", \"be\", \"certified\"],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  tokenizer: {\n    root: [[/^(\\s*)(comment:?(?:\\s.*|))$/, [\"\", \"comment\"]], [/\"/, {\n      token: \"identifier.quote\",\n      bracket: \"@open\",\n      next: \"@quoted_identifier\"\n    }], [\"LEX$\", {\n      token: \"keyword\",\n      bracket: \"@open\",\n      next: \"@identifier_until_period\"\n    }], [\"LEXON\", {\n      token: \"keyword\",\n      bracket: \"@open\",\n      next: \"@semver\"\n    }], [\":\", {\n      token: \"delimiter\",\n      bracket: \"@open\",\n      next: \"@identifier_until_period\"\n    }], [/[a-z_$][\\w$]*/, {\n      cases: {\n        \"@operators\": \"operator\",\n        \"@typeKeywords\": \"keyword.type\",\n        \"@keywords\": \"keyword\",\n        \"@default\": \"identifier\"\n      }\n    }], {\n      include: \"@whitespace\"\n    }, [/[{}()\\[\\]]/, \"@brackets\"], [/[<>](?!@symbols)/, \"@brackets\"], [/@symbols/, \"delimiter\"], [/\\d*\\.\\d*\\.\\d*/, \"number.semver\"], [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, \"number.float\"], [/0[xX][0-9a-fA-F]+/, \"number.hex\"], [/\\d+/, \"number\"], [/[;,.]/, \"delimiter\"]],\n    quoted_identifier: [[/[^\\\\\"]+/, \"identifier\"], [/\"/, {\n      token: \"identifier.quote\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    space_identifier_until_period: [[\":\", \"delimiter\"], [\" \", {\n      token: \"white\",\n      next: \"@identifier_rest\"\n    }]],\n    identifier_until_period: [{\n      include: \"@whitespace\"\n    }, [\":\", {\n      token: \"delimiter\",\n      next: \"@identifier_rest\"\n    }], [/[^\\\\.]+/, \"identifier\"], [/\\./, {\n      token: \"delimiter\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    identifier_rest: [[/[^\\\\.]+/, \"identifier\"], [/\\./, {\n      token: \"delimiter\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    semver: [{\n      include: \"@whitespace\"\n    }, [\":\", \"delimiter\"], [/\\d*\\.\\d*\\.\\d*/, {\n      token: \"number.semver\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    whitespace: [[/[ \\t\\r\\n]+/, \"white\"]]\n  }\n};\nexport { conf, language };","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/basic-languages/lexon/lexon.js"],"names":["conf","comments","lineComment","brackets","autoClosingPairs","open","close","surroundingPairs","folding","markers","start","RegExp","end","language","tokenPostfix","ignoreCase","keywords","typeKeywords","operators","symbols","tokenizer","root","token","bracket","next","cases","include","quoted_identifier","space_identifier_until_period","identifier_until_period","identifier_rest","semver","whitespace"],"mappings":"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","sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/lexon/lexon.ts\nvar conf = {\n  comments: {\n    lineComment: \"COMMENT\"\n  },\n  brackets: [[\"(\", \")\"]],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"' },\n    { open: \":\", close: \".\" }\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"`\", close: \"`\" },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n    { open: \":\", close: \".\" }\n  ],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*(::\\\\s*|COMMENT\\\\s+)#region\"),\n      end: new RegExp(\"^\\\\s*(::\\\\s*|COMMENT\\\\s+)#endregion\")\n    }\n  }\n};\nvar language = {\n  tokenPostfix: \".lexon\",\n  ignoreCase: true,\n  keywords: [\n    \"lexon\",\n    \"lex\",\n    \"clause\",\n    \"terms\",\n    \"contracts\",\n    \"may\",\n    \"pay\",\n    \"pays\",\n    \"appoints\",\n    \"into\",\n    \"to\"\n  ],\n  typeKeywords: [\"amount\", \"person\", \"key\", \"time\", \"date\", \"asset\", \"text\"],\n  operators: [\n    \"less\",\n    \"greater\",\n    \"equal\",\n    \"le\",\n    \"gt\",\n    \"or\",\n    \"and\",\n    \"add\",\n    \"added\",\n    \"subtract\",\n    \"subtracted\",\n    \"multiply\",\n    \"multiplied\",\n    \"times\",\n    \"divide\",\n    \"divided\",\n    \"is\",\n    \"be\",\n    \"certified\"\n  ],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  tokenizer: {\n    root: [\n      [/^(\\s*)(comment:?(?:\\s.*|))$/, [\"\", \"comment\"]],\n      [\n        /\"/,\n        {\n          token: \"identifier.quote\",\n          bracket: \"@open\",\n          next: \"@quoted_identifier\"\n        }\n      ],\n      [\n        \"LEX$\",\n        {\n          token: \"keyword\",\n          bracket: \"@open\",\n          next: \"@identifier_until_period\"\n        }\n      ],\n      [\"LEXON\", { token: \"keyword\", bracket: \"@open\", next: \"@semver\" }],\n      [\n        \":\",\n        {\n          token: \"delimiter\",\n          bracket: \"@open\",\n          next: \"@identifier_until_period\"\n        }\n      ],\n      [\n        /[a-z_$][\\w$]*/,\n        {\n          cases: {\n            \"@operators\": \"operator\",\n            \"@typeKeywords\": \"keyword.type\",\n            \"@keywords\": \"keyword\",\n            \"@default\": \"identifier\"\n          }\n        }\n      ],\n      { include: \"@whitespace\" },\n      [/[{}()\\[\\]]/, \"@brackets\"],\n      [/[<>](?!@symbols)/, \"@brackets\"],\n      [/@symbols/, \"delimiter\"],\n      [/\\d*\\.\\d*\\.\\d*/, \"number.semver\"],\n      [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, \"number.float\"],\n      [/0[xX][0-9a-fA-F]+/, \"number.hex\"],\n      [/\\d+/, \"number\"],\n      [/[;,.]/, \"delimiter\"]\n    ],\n    quoted_identifier: [\n      [/[^\\\\\"]+/, \"identifier\"],\n      [/\"/, { token: \"identifier.quote\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    space_identifier_until_period: [\n      [\":\", \"delimiter\"],\n      [\" \", { token: \"white\", next: \"@identifier_rest\" }]\n    ],\n    identifier_until_period: [\n      { include: \"@whitespace\" },\n      [\":\", { token: \"delimiter\", next: \"@identifier_rest\" }],\n      [/[^\\\\.]+/, \"identifier\"],\n      [/\\./, { token: \"delimiter\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    identifier_rest: [\n      [/[^\\\\.]+/, \"identifier\"],\n      [/\\./, { token: \"delimiter\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    semver: [\n      { include: \"@whitespace\" },\n      [\":\", \"delimiter\"],\n      [/\\d*\\.\\d*\\.\\d*/, { token: \"number.semver\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    whitespace: [[/[ \\t\\r\\n]+/, \"white\"]]\n  }\n};\nexport {\n  conf,\n  language\n};\n"]},"metadata":{},"sourceType":"module"}