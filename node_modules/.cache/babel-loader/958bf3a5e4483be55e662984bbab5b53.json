{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { BaseNavigationContainer, getActionFromState, getPathFromState, getStateFromPath, validatePathConfig } from '@react-navigation/core';\nimport * as React from 'react';\nimport LinkingContext from './LinkingContext';\nimport DefaultTheme from './theming/DefaultTheme';\nimport ThemeProvider from './theming/ThemeProvider';\nimport useBackButton from './useBackButton';\nimport useDocumentTitle from './useDocumentTitle';\nimport useLinking from './useLinking';\nimport useThenable from './useThenable';\nglobal.REACT_NAVIGATION_DEVTOOLS = new WeakMap();\n/**\n * Container component which holds the navigation state designed for React Native apps.\n * This should be rendered at the root wrapping the whole app.\n *\n * @param props.initialState Initial state object for the navigation tree. When deep link handling is enabled, this will override deep links when specified. Make sure that you don't specify an `initialState` when there's a deep link (`Linking.getInitialURL()`).\n * @param props.onReady Callback which is called after the navigation tree mounts.\n * @param props.onStateChange Callback which is called with the latest navigation state when it changes.\n * @param props.theme Theme object for the navigators.\n * @param props.linking Options for deep linking. Deep link handling is enabled when this prop is provided, unless `linking.enabled` is `false`.\n * @param props.fallback Fallback component to render until we have finished getting initial state when linking is enabled. Defaults to `null`.\n * @param props.documentTitle Options to configure the document title on Web. Updating document title is handled by default unless `documentTitle.enabled` is `false`.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which refers to the navigation object containing helper methods.\n */\n\nfunction NavigationContainerInner(_ref, ref) {\n  let {\n    theme = DefaultTheme,\n    linking,\n    fallback = null,\n    documentTitle,\n    onReady,\n    ...rest\n  } = _ref;\n  const isLinkingEnabled = linking ? linking.enabled !== false : false;\n\n  if (linking !== null && linking !== void 0 && linking.config) {\n    validatePathConfig(linking.config);\n  }\n\n  const refContainer = React.useRef(null);\n  useBackButton(refContainer);\n  useDocumentTitle(refContainer, documentTitle);\n  const {\n    getInitialState\n  } = useLinking(refContainer, {\n    independent: rest.independent,\n    enabled: isLinkingEnabled,\n    prefixes: [],\n    ...linking\n  }); // Add additional linking related info to the ref\n  // This will be used by the devtools\n\n  React.useEffect(() => {\n    if (refContainer.current) {\n      REACT_NAVIGATION_DEVTOOLS.set(refContainer.current, {\n        get linking() {\n          var _linking$prefixes, _linking$getStateFrom, _linking$getPathFromS, _linking$getActionFro;\n\n          return { ...linking,\n            enabled: isLinkingEnabled,\n            prefixes: (_linking$prefixes = linking === null || linking === void 0 ? void 0 : linking.prefixes) !== null && _linking$prefixes !== void 0 ? _linking$prefixes : [],\n            getStateFromPath: (_linking$getStateFrom = linking === null || linking === void 0 ? void 0 : linking.getStateFromPath) !== null && _linking$getStateFrom !== void 0 ? _linking$getStateFrom : getStateFromPath,\n            getPathFromState: (_linking$getPathFromS = linking === null || linking === void 0 ? void 0 : linking.getPathFromState) !== null && _linking$getPathFromS !== void 0 ? _linking$getPathFromS : getPathFromState,\n            getActionFromState: (_linking$getActionFro = linking === null || linking === void 0 ? void 0 : linking.getActionFromState) !== null && _linking$getActionFro !== void 0 ? _linking$getActionFro : getActionFromState\n          };\n        }\n\n      });\n    }\n  });\n  const [isResolved, initialState] = useThenable(getInitialState);\n  React.useImperativeHandle(ref, () => refContainer.current);\n  const linkingContext = React.useMemo(() => ({\n    options: linking\n  }), [linking]);\n  const isReady = rest.initialState != null || !isLinkingEnabled || isResolved;\n  const onReadyRef = React.useRef(onReady);\n  React.useEffect(() => {\n    onReadyRef.current = onReady;\n  });\n  React.useEffect(() => {\n    if (isReady) {\n      var _onReadyRef$current;\n\n      (_onReadyRef$current = onReadyRef.current) === null || _onReadyRef$current === void 0 ? void 0 : _onReadyRef$current.call(onReadyRef);\n    }\n  }, [isReady]);\n\n  if (!isReady) {\n    // This is temporary until we have Suspense for data-fetching\n    // Then the fallback will be handled by a parent `Suspense` component\n    return fallback;\n  }\n\n  return /*#__PURE__*/React.createElement(LinkingContext.Provider, {\n    value: linkingContext\n  }, /*#__PURE__*/React.createElement(ThemeProvider, {\n    value: theme\n  }, /*#__PURE__*/React.createElement(BaseNavigationContainer, _extends({}, rest, {\n    initialState: rest.initialState == null ? initialState : rest.initialState,\n    ref: refContainer\n  }))));\n}\n\nconst NavigationContainer = /*#__PURE__*/React.forwardRef(NavigationContainerInner);\nexport default NavigationContainer;","map":{"version":3,"sources":["NavigationContainer.tsx"],"names":["global","theme","fallback","rest","isLinkingEnabled","linking","validatePathConfig","refContainer","React","useBackButton","useDocumentTitle","getInitialState","useLinking","independent","enabled","prefixes","REACT_NAVIGATION_DEVTOOLS","getStateFromPath","getPathFromState","getActionFromState","useThenable","linkingContext","options","isReady","onReadyRef","NavigationContainer"],"mappings":"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","sourcesContent":["import {\n  BaseNavigationContainer,\n  getActionFromState,\n  getPathFromState,\n  getStateFromPath,\n  NavigationContainerProps,\n  NavigationContainerRef,\n  ParamListBase,\n  validatePathConfig,\n} from '@react-navigation/core';\nimport * as React from 'react';\n\nimport LinkingContext from './LinkingContext';\nimport DefaultTheme from './theming/DefaultTheme';\nimport ThemeProvider from './theming/ThemeProvider';\nimport type { DocumentTitleOptions, LinkingOptions, Theme } from './types';\nimport useBackButton from './useBackButton';\nimport useDocumentTitle from './useDocumentTitle';\nimport useLinking from './useLinking';\nimport useThenable from './useThenable';\n\ndeclare global {\n  var REACT_NAVIGATION_DEVTOOLS: WeakMap<\n    NavigationContainerRef<any>,\n    { readonly linking: LinkingOptions<any> }\n  >;\n}\n\nglobal.REACT_NAVIGATION_DEVTOOLS = new WeakMap();\n\ntype Props<ParamList extends {}> = NavigationContainerProps & {\n  theme?: Theme;\n  linking?: LinkingOptions<ParamList>;\n  fallback?: React.ReactNode;\n  documentTitle?: DocumentTitleOptions;\n  onReady?: () => void;\n};\n\n/**\n * Container component which holds the navigation state designed for React Native apps.\n * This should be rendered at the root wrapping the whole app.\n *\n * @param props.initialState Initial state object for the navigation tree. When deep link handling is enabled, this will override deep links when specified. Make sure that you don't specify an `initialState` when there's a deep link (`Linking.getInitialURL()`).\n * @param props.onReady Callback which is called after the navigation tree mounts.\n * @param props.onStateChange Callback which is called with the latest navigation state when it changes.\n * @param props.theme Theme object for the navigators.\n * @param props.linking Options for deep linking. Deep link handling is enabled when this prop is provided, unless `linking.enabled` is `false`.\n * @param props.fallback Fallback component to render until we have finished getting initial state when linking is enabled. Defaults to `null`.\n * @param props.documentTitle Options to configure the document title on Web. Updating document title is handled by default unless `documentTitle.enabled` is `false`.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which refers to the navigation object containing helper methods.\n */\nfunction NavigationContainerInner(\n  {\n    theme = DefaultTheme,\n    linking,\n    fallback = null,\n    documentTitle,\n    onReady,\n    ...rest\n  }: Props<ParamListBase>,\n  ref?: React.Ref<NavigationContainerRef<ParamListBase> | null>\n) {\n  const isLinkingEnabled = linking ? linking.enabled !== false : false;\n\n  if (linking?.config) {\n    validatePathConfig(linking.config);\n  }\n\n  const refContainer =\n    React.useRef<NavigationContainerRef<ParamListBase>>(null);\n\n  useBackButton(refContainer);\n  useDocumentTitle(refContainer, documentTitle);\n\n  const { getInitialState } = useLinking(refContainer, {\n    independent: rest.independent,\n    enabled: isLinkingEnabled,\n    prefixes: [],\n    ...linking,\n  });\n\n  // Add additional linking related info to the ref\n  // This will be used by the devtools\n  React.useEffect(() => {\n    if (refContainer.current) {\n      REACT_NAVIGATION_DEVTOOLS.set(refContainer.current, {\n        get linking() {\n          return {\n            ...linking,\n            enabled: isLinkingEnabled,\n            prefixes: linking?.prefixes ?? [],\n            getStateFromPath: linking?.getStateFromPath ?? getStateFromPath,\n            getPathFromState: linking?.getPathFromState ?? getPathFromState,\n            getActionFromState:\n              linking?.getActionFromState ?? getActionFromState,\n          };\n        },\n      });\n    }\n  });\n\n  const [isResolved, initialState] = useThenable(getInitialState);\n\n  React.useImperativeHandle(ref, () => refContainer.current);\n\n  const linkingContext = React.useMemo(() => ({ options: linking }), [linking]);\n\n  const isReady = rest.initialState != null || !isLinkingEnabled || isResolved;\n\n  const onReadyRef = React.useRef(onReady);\n\n  React.useEffect(() => {\n    onReadyRef.current = onReady;\n  });\n\n  React.useEffect(() => {\n    if (isReady) {\n      onReadyRef.current?.();\n    }\n  }, [isReady]);\n\n  if (!isReady) {\n    // This is temporary until we have Suspense for data-fetching\n    // Then the fallback will be handled by a parent `Suspense` component\n    return fallback as React.ReactElement;\n  }\n\n  return (\n    <LinkingContext.Provider value={linkingContext}>\n      <ThemeProvider value={theme}>\n        <BaseNavigationContainer\n          {...rest}\n          initialState={\n            rest.initialState == null ? initialState : rest.initialState\n          }\n          ref={refContainer}\n        />\n      </ThemeProvider>\n    </LinkingContext.Provider>\n  );\n}\n\nconst NavigationContainer = React.forwardRef(NavigationContainerInner) as <\n  RootParamList extends {} = ReactNavigation.RootParamList\n>(\n  props: Props<RootParamList> & {\n    ref?: React.Ref<NavigationContainerRef<RootParamList>>;\n  }\n) => React.ReactElement;\n\nexport default NavigationContainer;\n"]},"metadata":{},"sourceType":"module"}