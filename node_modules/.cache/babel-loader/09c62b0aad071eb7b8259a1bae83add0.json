{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as platform from './platform.js';\nimport { URI } from './uri.js';\nexport var Schemas;\n\n(function (Schemas) {\n  /**\n   * A schema that is used for models that exist in memory\n   * only and that have no correspondence on a server or such.\n   */\n  Schemas.inMemory = 'inmemory';\n  /**\n   * A schema that is used for setting files\n   */\n\n  Schemas.vscode = 'vscode';\n  /**\n   * A schema that is used for internal private files\n   */\n\n  Schemas.internal = 'private';\n  /**\n   * A walk-through document.\n   */\n\n  Schemas.walkThrough = 'walkThrough';\n  /**\n   * An embedded code snippet.\n   */\n\n  Schemas.walkThroughSnippet = 'walkThroughSnippet';\n  Schemas.http = 'http';\n  Schemas.https = 'https';\n  Schemas.file = 'file';\n  Schemas.mailto = 'mailto';\n  Schemas.untitled = 'untitled';\n  Schemas.data = 'data';\n  Schemas.command = 'command';\n  Schemas.vscodeRemote = 'vscode-remote';\n  Schemas.vscodeRemoteResource = 'vscode-remote-resource';\n  Schemas.userData = 'vscode-userdata';\n  Schemas.vscodeCustomEditor = 'vscode-custom-editor';\n  Schemas.vscodeNotebook = 'vscode-notebook';\n  Schemas.vscodeNotebookCell = 'vscode-notebook-cell';\n  Schemas.vscodeNotebookCellMetadata = 'vscode-notebook-cell-metadata';\n  Schemas.vscodeNotebookCellOutput = 'vscode-notebook-cell-output';\n  Schemas.vscodeInteractive = 'vscode-interactive';\n  Schemas.vscodeInteractiveInput = 'vscode-interactive-input';\n  Schemas.vscodeSettings = 'vscode-settings';\n  Schemas.vscodeWorkspaceTrust = 'vscode-workspace-trust';\n  Schemas.vscodeTerminal = 'vscode-terminal';\n  /**\n   * Scheme used internally for webviews that aren't linked to a resource (i.e. not custom editors)\n   */\n\n  Schemas.webviewPanel = 'webview-panel';\n  /**\n   * Scheme used for loading the wrapper html and script in webviews.\n   */\n\n  Schemas.vscodeWebview = 'vscode-webview';\n  /**\n   * Scheme used for extension pages\n   */\n\n  Schemas.extension = 'extension';\n  /**\n   * Scheme used as a replacement of `file` scheme to load\n   * files with our custom protocol handler (desktop only).\n   */\n\n  Schemas.vscodeFileResource = 'vscode-file';\n  /**\n   * Scheme used for temporary resources\n   */\n\n  Schemas.tmp = 'tmp';\n  /**\n   * Scheme used vs live share\n   */\n\n  Schemas.vsls = 'vsls';\n})(Schemas || (Schemas = {}));\n\nexport const connectionTokenQueryName = 'tkn';\n\nclass RemoteAuthoritiesImpl {\n  constructor() {\n    this._hosts = Object.create(null);\n    this._ports = Object.create(null);\n    this._connectionTokens = Object.create(null);\n    this._preferredWebSchema = 'http';\n    this._delegate = null;\n  }\n\n  setPreferredWebSchema(schema) {\n    this._preferredWebSchema = schema;\n  }\n\n  rewrite(uri) {\n    if (this._delegate) {\n      return this._delegate(uri);\n    }\n\n    const authority = uri.authority;\n    let host = this._hosts[authority];\n\n    if (host && host.indexOf(':') !== -1) {\n      host = `[${host}]`;\n    }\n\n    const port = this._ports[authority];\n    const connectionToken = this._connectionTokens[authority];\n    let query = `path=${encodeURIComponent(uri.path)}`;\n\n    if (typeof connectionToken === 'string') {\n      query += `&${connectionTokenQueryName}=${encodeURIComponent(connectionToken)}`;\n    }\n\n    return URI.from({\n      scheme: platform.isWeb ? this._preferredWebSchema : Schemas.vscodeRemoteResource,\n      authority: `${host}:${port}`,\n      path: `/vscode-remote-resource`,\n      query\n    });\n  }\n\n}\n\nexport const RemoteAuthorities = new RemoteAuthoritiesImpl();\n\nclass FileAccessImpl {\n  asBrowserUri(uriOrModule, moduleIdToUrl) {\n    const uri = this.toUri(uriOrModule, moduleIdToUrl); // Handle remote URIs via `RemoteAuthorities`\n\n    if (uri.scheme === Schemas.vscodeRemote) {\n      return RemoteAuthorities.rewrite(uri);\n    } // Convert to `vscode-file` resource..\n\n\n    if ( // ...only ever for `file` resources\n    uri.scheme === Schemas.file && ( // ...and we run in native environments\n    platform.isNative || // ...or web worker extensions on desktop\n    typeof platform.globals.importScripts === 'function' && platform.globals.origin === `${Schemas.vscodeFileResource}://${FileAccessImpl.FALLBACK_AUTHORITY}`)) {\n      return uri.with({\n        scheme: Schemas.vscodeFileResource,\n        // We need to provide an authority here so that it can serve\n        // as origin for network and loading matters in chromium.\n        // If the URI is not coming with an authority already, we\n        // add our own\n        authority: uri.authority || FileAccessImpl.FALLBACK_AUTHORITY,\n        query: null,\n        fragment: null\n      });\n    }\n\n    return uri;\n  }\n\n  toUri(uriOrModule, moduleIdToUrl) {\n    if (URI.isUri(uriOrModule)) {\n      return uriOrModule;\n    }\n\n    return URI.parse(moduleIdToUrl.toUrl(uriOrModule));\n  }\n\n}\n\nFileAccessImpl.FALLBACK_AUTHORITY = 'vscode-app';\nexport const FileAccess = new FileAccessImpl();","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/base/common/network.js"],"names":["platform","URI","Schemas","inMemory","vscode","internal","walkThrough","walkThroughSnippet","http","https","file","mailto","untitled","data","command","vscodeRemote","vscodeRemoteResource","userData","vscodeCustomEditor","vscodeNotebook","vscodeNotebookCell","vscodeNotebookCellMetadata","vscodeNotebookCellOutput","vscodeInteractive","vscodeInteractiveInput","vscodeSettings","vscodeWorkspaceTrust","vscodeTerminal","webviewPanel","vscodeWebview","extension","vscodeFileResource","tmp","vsls","connectionTokenQueryName","RemoteAuthoritiesImpl","constructor","_hosts","Object","create","_ports","_connectionTokens","_preferredWebSchema","_delegate","setPreferredWebSchema","schema","rewrite","uri","authority","host","indexOf","port","connectionToken","query","encodeURIComponent","path","from","scheme","isWeb","RemoteAuthorities","FileAccessImpl","asBrowserUri","uriOrModule","moduleIdToUrl","toUri","isNative","globals","importScripts","origin","FALLBACK_AUTHORITY","with","fragment","isUri","parse","toUrl","FileAccess"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as platform from './platform.js';\nimport { URI } from './uri.js';\nexport var Schemas;\n(function (Schemas) {\n    /**\n     * A schema that is used for models that exist in memory\n     * only and that have no correspondence on a server or such.\n     */\n    Schemas.inMemory = 'inmemory';\n    /**\n     * A schema that is used for setting files\n     */\n    Schemas.vscode = 'vscode';\n    /**\n     * A schema that is used for internal private files\n     */\n    Schemas.internal = 'private';\n    /**\n     * A walk-through document.\n     */\n    Schemas.walkThrough = 'walkThrough';\n    /**\n     * An embedded code snippet.\n     */\n    Schemas.walkThroughSnippet = 'walkThroughSnippet';\n    Schemas.http = 'http';\n    Schemas.https = 'https';\n    Schemas.file = 'file';\n    Schemas.mailto = 'mailto';\n    Schemas.untitled = 'untitled';\n    Schemas.data = 'data';\n    Schemas.command = 'command';\n    Schemas.vscodeRemote = 'vscode-remote';\n    Schemas.vscodeRemoteResource = 'vscode-remote-resource';\n    Schemas.userData = 'vscode-userdata';\n    Schemas.vscodeCustomEditor = 'vscode-custom-editor';\n    Schemas.vscodeNotebook = 'vscode-notebook';\n    Schemas.vscodeNotebookCell = 'vscode-notebook-cell';\n    Schemas.vscodeNotebookCellMetadata = 'vscode-notebook-cell-metadata';\n    Schemas.vscodeNotebookCellOutput = 'vscode-notebook-cell-output';\n    Schemas.vscodeInteractive = 'vscode-interactive';\n    Schemas.vscodeInteractiveInput = 'vscode-interactive-input';\n    Schemas.vscodeSettings = 'vscode-settings';\n    Schemas.vscodeWorkspaceTrust = 'vscode-workspace-trust';\n    Schemas.vscodeTerminal = 'vscode-terminal';\n    /**\n     * Scheme used internally for webviews that aren't linked to a resource (i.e. not custom editors)\n     */\n    Schemas.webviewPanel = 'webview-panel';\n    /**\n     * Scheme used for loading the wrapper html and script in webviews.\n     */\n    Schemas.vscodeWebview = 'vscode-webview';\n    /**\n     * Scheme used for extension pages\n     */\n    Schemas.extension = 'extension';\n    /**\n     * Scheme used as a replacement of `file` scheme to load\n     * files with our custom protocol handler (desktop only).\n     */\n    Schemas.vscodeFileResource = 'vscode-file';\n    /**\n     * Scheme used for temporary resources\n     */\n    Schemas.tmp = 'tmp';\n    /**\n     * Scheme used vs live share\n     */\n    Schemas.vsls = 'vsls';\n})(Schemas || (Schemas = {}));\nexport const connectionTokenQueryName = 'tkn';\nclass RemoteAuthoritiesImpl {\n    constructor() {\n        this._hosts = Object.create(null);\n        this._ports = Object.create(null);\n        this._connectionTokens = Object.create(null);\n        this._preferredWebSchema = 'http';\n        this._delegate = null;\n    }\n    setPreferredWebSchema(schema) {\n        this._preferredWebSchema = schema;\n    }\n    rewrite(uri) {\n        if (this._delegate) {\n            return this._delegate(uri);\n        }\n        const authority = uri.authority;\n        let host = this._hosts[authority];\n        if (host && host.indexOf(':') !== -1) {\n            host = `[${host}]`;\n        }\n        const port = this._ports[authority];\n        const connectionToken = this._connectionTokens[authority];\n        let query = `path=${encodeURIComponent(uri.path)}`;\n        if (typeof connectionToken === 'string') {\n            query += `&${connectionTokenQueryName}=${encodeURIComponent(connectionToken)}`;\n        }\n        return URI.from({\n            scheme: platform.isWeb ? this._preferredWebSchema : Schemas.vscodeRemoteResource,\n            authority: `${host}:${port}`,\n            path: `/vscode-remote-resource`,\n            query\n        });\n    }\n}\nexport const RemoteAuthorities = new RemoteAuthoritiesImpl();\nclass FileAccessImpl {\n    asBrowserUri(uriOrModule, moduleIdToUrl) {\n        const uri = this.toUri(uriOrModule, moduleIdToUrl);\n        // Handle remote URIs via `RemoteAuthorities`\n        if (uri.scheme === Schemas.vscodeRemote) {\n            return RemoteAuthorities.rewrite(uri);\n        }\n        // Convert to `vscode-file` resource..\n        if (\n        // ...only ever for `file` resources\n        uri.scheme === Schemas.file &&\n            (\n            // ...and we run in native environments\n            platform.isNative ||\n                // ...or web worker extensions on desktop\n                (typeof platform.globals.importScripts === 'function' && platform.globals.origin === `${Schemas.vscodeFileResource}://${FileAccessImpl.FALLBACK_AUTHORITY}`))) {\n            return uri.with({\n                scheme: Schemas.vscodeFileResource,\n                // We need to provide an authority here so that it can serve\n                // as origin for network and loading matters in chromium.\n                // If the URI is not coming with an authority already, we\n                // add our own\n                authority: uri.authority || FileAccessImpl.FALLBACK_AUTHORITY,\n                query: null,\n                fragment: null\n            });\n        }\n        return uri;\n    }\n    toUri(uriOrModule, moduleIdToUrl) {\n        if (URI.isUri(uriOrModule)) {\n            return uriOrModule;\n        }\n        return URI.parse(moduleIdToUrl.toUrl(uriOrModule));\n    }\n}\nFileAccessImpl.FALLBACK_AUTHORITY = 'vscode-app';\nexport const FileAccess = new FileAccessImpl();\n"]},"metadata":{},"sourceType":"module"}