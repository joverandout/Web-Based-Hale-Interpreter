{"ast":null,"code":"import * as React from 'react';\nimport NavigationContext from './NavigationContext';\n/**\n * Hook to take care of emitting `focus` and `blur` events.\n */\n\nexport default function useFocusEvents(_ref) {\n  let {\n    state,\n    emitter\n  } = _ref;\n  const navigation = React.useContext(NavigationContext);\n  const lastFocusedKeyRef = React.useRef();\n  const currentFocusedKey = state.routes[state.index].key; // When the parent screen changes its focus state, we also need to change child's focus\n  // Coz the child screen can't be focused if the parent screen is out of focus\n\n  React.useEffect(() => navigation === null || navigation === void 0 ? void 0 : navigation.addListener('focus', () => {\n    lastFocusedKeyRef.current = currentFocusedKey;\n    emitter.emit({\n      type: 'focus',\n      target: currentFocusedKey\n    });\n  }), [currentFocusedKey, emitter, navigation]);\n  React.useEffect(() => navigation === null || navigation === void 0 ? void 0 : navigation.addListener('blur', () => {\n    lastFocusedKeyRef.current = undefined;\n    emitter.emit({\n      type: 'blur',\n      target: currentFocusedKey\n    });\n  }), [currentFocusedKey, emitter, navigation]);\n  React.useEffect(() => {\n    const lastFocusedKey = lastFocusedKeyRef.current;\n    lastFocusedKeyRef.current = currentFocusedKey; // We wouldn't have `lastFocusedKey` on initial mount\n    // Fire focus event for the current route on mount if there's no parent navigator\n\n    if (lastFocusedKey === undefined && !navigation) {\n      emitter.emit({\n        type: 'focus',\n        target: currentFocusedKey\n      });\n    } // We should only emit events when the focused key changed and navigator is focused\n    // When navigator is not focused, screens inside shouldn't receive focused status either\n\n\n    if (lastFocusedKey === currentFocusedKey || !(navigation ? navigation.isFocused() : true)) {\n      return;\n    }\n\n    if (lastFocusedKey === undefined) {\n      // Only fire events after initial mount\n      return;\n    }\n\n    emitter.emit({\n      type: 'blur',\n      target: lastFocusedKey\n    });\n    emitter.emit({\n      type: 'focus',\n      target: currentFocusedKey\n    });\n  }, [currentFocusedKey, emitter, navigation]);\n}","map":{"version":3,"sources":["useFocusEvents.tsx"],"names":["emitter","navigation","React","lastFocusedKeyRef","currentFocusedKey","state","type","target","lastFocusedKey"],"mappings":"AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,OAAA,iBAAA,MAAA,qBAAA;AASA;AACA;AACA;;AACA,eAAe,SAAA,cAAA,CAAA,IAAA,EAGI;AAAA,MAHmD;AAAA,IAAA,KAAA;AAEpEA,IAAAA;AAFoE,MAGnD,IAAA;AACjB,QAAMC,UAAU,GAAGC,KAAK,CAALA,UAAAA,CAAnB,iBAAmBA,CAAnB;AACA,QAAMC,iBAAiB,GAAGD,KAAK,CAA/B,MAA0BA,EAA1B;AAEA,QAAME,iBAAiB,GAAGC,KAAK,CAALA,MAAAA,CAAaA,KAAK,CAAlBA,KAAAA,EAJT,GAIjB,CAJiB,CAMjB;AACA;;AACAH,EAAAA,KAAK,CAALA,SAAAA,CACE,MACE,UADF,KAAA,IACE,IAAA,UADF,KAAA,KAAA,CACE,GADF,KAAA,CACE,GAAA,UAAU,CAAV,WAAA,CAAA,OAAA,EAAiC,MAAM;AACrCC,IAAAA,iBAAiB,CAAjBA,OAAAA,GAAAA,iBAAAA;AACAH,IAAAA,OAAO,CAAPA,IAAAA,CAAa;AAAEM,MAAAA,IAAI,EAAN,OAAA;AAAiBC,MAAAA,MAAM,EAAEH;AAAzB,KAAbJ;AAJNE,GAEI,CAFJA,EAME,CAAA,iBAAA,EAAA,OAAA,EANFA,UAME,CANFA;AASAA,EAAAA,KAAK,CAALA,SAAAA,CACE,MACE,UADF,KAAA,IACE,IAAA,UADF,KAAA,KAAA,CACE,GADF,KAAA,CACE,GAAA,UAAU,CAAV,WAAA,CAAA,MAAA,EAAgC,MAAM;AACpCC,IAAAA,iBAAiB,CAAjBA,OAAAA,GAAAA,SAAAA;AACAH,IAAAA,OAAO,CAAPA,IAAAA,CAAa;AAAEM,MAAAA,IAAI,EAAN,MAAA;AAAgBC,MAAAA,MAAM,EAAEH;AAAxB,KAAbJ;AAJNE,GAEI,CAFJA,EAME,CAAA,iBAAA,EAAA,OAAA,EANFA,UAME,CANFA;AASAA,EAAAA,KAAK,CAALA,SAAAA,CAAgB,MAAM;AACpB,UAAMM,cAAc,GAAGL,iBAAiB,CAAxC,OAAA;AAEAA,IAAAA,iBAAiB,CAAjBA,OAAAA,GAHoB,iBAGpBA,CAHoB,CAKpB;AACA;;AACA,QAAIK,cAAc,KAAdA,SAAAA,IAAgC,CAApC,UAAA,EAAiD;AAC/CR,MAAAA,OAAO,CAAPA,IAAAA,CAAa;AAAEM,QAAAA,IAAI,EAAN,OAAA;AAAiBC,QAAAA,MAAM,EAAEH;AAAzB,OAAbJ;AARkB,KAAA,CAWpB;AACA;;;AACA,QACEQ,cAAc,KAAdA,iBAAAA,IACA,EAAEP,UAAU,GAAGA,UAAU,CAAb,SAAGA,EAAH,GAFd,IAEE,CAFF,EAGE;AACA;AACD;;AAED,QAAIO,cAAc,KAAlB,SAAA,EAAkC;AAChC;AACA;AACD;;AAEDR,IAAAA,OAAO,CAAPA,IAAAA,CAAa;AAAEM,MAAAA,IAAI,EAAN,MAAA;AAAgBC,MAAAA,MAAM,EAAEC;AAAxB,KAAbR;AACAA,IAAAA,OAAO,CAAPA,IAAAA,CAAa;AAAEM,MAAAA,IAAI,EAAN,OAAA;AAAiBC,MAAAA,MAAM,EAAEH;AAAzB,KAAbJ;AA1BFE,GAAAA,EA2BG,CAAA,iBAAA,EAAA,OAAA,EA3BHA,UA2BG,CA3BHA;AA4BD","sourcesContent":["import type { NavigationState } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationContext from './NavigationContext';\nimport type { EventMapCore } from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\n\ntype Options<State extends NavigationState> = {\n  state: State;\n  emitter: NavigationEventEmitter<EventMapCore<State>>;\n};\n\n/**\n * Hook to take care of emitting `focus` and `blur` events.\n */\nexport default function useFocusEvents<State extends NavigationState>({\n  state,\n  emitter,\n}: Options<State>) {\n  const navigation = React.useContext(NavigationContext);\n  const lastFocusedKeyRef = React.useRef<string | undefined>();\n\n  const currentFocusedKey = state.routes[state.index].key;\n\n  // When the parent screen changes its focus state, we also need to change child's focus\n  // Coz the child screen can't be focused if the parent screen is out of focus\n  React.useEffect(\n    () =>\n      navigation?.addListener('focus', () => {\n        lastFocusedKeyRef.current = currentFocusedKey;\n        emitter.emit({ type: 'focus', target: currentFocusedKey });\n      }),\n    [currentFocusedKey, emitter, navigation]\n  );\n\n  React.useEffect(\n    () =>\n      navigation?.addListener('blur', () => {\n        lastFocusedKeyRef.current = undefined;\n        emitter.emit({ type: 'blur', target: currentFocusedKey });\n      }),\n    [currentFocusedKey, emitter, navigation]\n  );\n\n  React.useEffect(() => {\n    const lastFocusedKey = lastFocusedKeyRef.current;\n\n    lastFocusedKeyRef.current = currentFocusedKey;\n\n    // We wouldn't have `lastFocusedKey` on initial mount\n    // Fire focus event for the current route on mount if there's no parent navigator\n    if (lastFocusedKey === undefined && !navigation) {\n      emitter.emit({ type: 'focus', target: currentFocusedKey });\n    }\n\n    // We should only emit events when the focused key changed and navigator is focused\n    // When navigator is not focused, screens inside shouldn't receive focused status either\n    if (\n      lastFocusedKey === currentFocusedKey ||\n      !(navigation ? navigation.isFocused() : true)\n    ) {\n      return;\n    }\n\n    if (lastFocusedKey === undefined) {\n      // Only fire events after initial mount\n      return;\n    }\n\n    emitter.emit({ type: 'blur', target: lastFocusedKey });\n    emitter.emit({ type: 'focus', target: currentFocusedKey });\n  }, [currentFocusedKey, emitter, navigation]);\n}\n"]},"metadata":{},"sourceType":"module"}