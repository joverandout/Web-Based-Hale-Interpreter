{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Disposable, DisposableStore, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { getCodeEditor } from '../../../browser/editorBrowser.js';\nimport { AbstractEditorNavigationQuickAccessProvider } from './editorNavigationQuickAccess.js';\nimport { localize } from '../../../../nls.js';\nexport class AbstractGotoLineQuickAccessProvider extends AbstractEditorNavigationQuickAccessProvider {\n  constructor() {\n    super({\n      canAcceptInBackground: true\n    });\n  }\n\n  provideWithoutTextEditor(picker) {\n    const label = localize('cannotRunGotoLine', \"Open a text editor first to go to a line.\");\n    picker.items = [{\n      label\n    }];\n    picker.ariaLabel = label;\n    return Disposable.None;\n  }\n\n  provideWithTextEditor(context, picker, token) {\n    const editor = context.editor;\n    const disposables = new DisposableStore(); // Goto line once picked\n\n    disposables.add(picker.onDidAccept(event => {\n      const [item] = picker.selectedItems;\n\n      if (item) {\n        if (!this.isValidLineNumber(editor, item.lineNumber)) {\n          return;\n        }\n\n        this.gotoLocation(context, {\n          range: this.toRange(item.lineNumber, item.column),\n          keyMods: picker.keyMods,\n          preserveFocus: event.inBackground\n        });\n\n        if (!event.inBackground) {\n          picker.hide();\n        }\n      }\n    })); // React to picker changes\n\n    const updatePickerAndEditor = () => {\n      const position = this.parsePosition(editor, picker.value.trim().substr(AbstractGotoLineQuickAccessProvider.PREFIX.length));\n      const label = this.getPickLabel(editor, position.lineNumber, position.column); // Picker\n\n      picker.items = [{\n        lineNumber: position.lineNumber,\n        column: position.column,\n        label\n      }]; // ARIA Label\n\n      picker.ariaLabel = label; // Clear decorations for invalid range\n\n      if (!this.isValidLineNumber(editor, position.lineNumber)) {\n        this.clearDecorations(editor);\n        return;\n      } // Reveal\n\n\n      const range = this.toRange(position.lineNumber, position.column);\n      editor.revealRangeInCenter(range, 0\n      /* Smooth */\n      ); // Decorate\n\n      this.addDecorations(editor, range);\n    };\n\n    updatePickerAndEditor();\n    disposables.add(picker.onDidChangeValue(() => updatePickerAndEditor())); // Adjust line number visibility as needed\n\n    const codeEditor = getCodeEditor(editor);\n\n    if (codeEditor) {\n      const options = codeEditor.getOptions();\n      const lineNumbers = options.get(60\n      /* lineNumbers */\n      );\n\n      if (lineNumbers.renderType === 2\n      /* Relative */\n      ) {\n        codeEditor.updateOptions({\n          lineNumbers: 'on'\n        });\n        disposables.add(toDisposable(() => codeEditor.updateOptions({\n          lineNumbers: 'relative'\n        })));\n      }\n    }\n\n    return disposables;\n  }\n\n  toRange(lineNumber = 1, column = 1) {\n    return {\n      startLineNumber: lineNumber,\n      startColumn: column,\n      endLineNumber: lineNumber,\n      endColumn: column\n    };\n  }\n\n  parsePosition(editor, value) {\n    // Support line-col formats of `line,col`, `line:col`, `line#col`\n    const numbers = value.split(/,|:|#/).map(part => parseInt(part, 10)).filter(part => !isNaN(part));\n    const endLine = this.lineCount(editor) + 1;\n    return {\n      lineNumber: numbers[0] > 0 ? numbers[0] : endLine + numbers[0],\n      column: numbers[1]\n    };\n  }\n\n  getPickLabel(editor, lineNumber, column) {\n    // Location valid: indicate this as picker label\n    if (this.isValidLineNumber(editor, lineNumber)) {\n      if (this.isValidColumn(editor, lineNumber, column)) {\n        return localize('gotoLineColumnLabel', \"Go to line {0} and character {1}.\", lineNumber, column);\n      }\n\n      return localize('gotoLineLabel', \"Go to line {0}.\", lineNumber);\n    } // Location invalid: show generic label\n\n\n    const position = editor.getPosition() || {\n      lineNumber: 1,\n      column: 1\n    };\n    const lineCount = this.lineCount(editor);\n\n    if (lineCount > 1) {\n      return localize('gotoLineLabelEmptyWithLimit', \"Current Line: {0}, Character: {1}. Type a line number between 1 and {2} to navigate to.\", position.lineNumber, position.column, lineCount);\n    }\n\n    return localize('gotoLineLabelEmpty', \"Current Line: {0}, Character: {1}. Type a line number to navigate to.\", position.lineNumber, position.column);\n  }\n\n  isValidLineNumber(editor, lineNumber) {\n    if (!lineNumber || typeof lineNumber !== 'number') {\n      return false;\n    }\n\n    return lineNumber > 0 && lineNumber <= this.lineCount(editor);\n  }\n\n  isValidColumn(editor, lineNumber, column) {\n    if (!column || typeof column !== 'number') {\n      return false;\n    }\n\n    const model = this.getModel(editor);\n\n    if (!model) {\n      return false;\n    }\n\n    const positionCandidate = {\n      lineNumber,\n      column\n    };\n    return model.validatePosition(positionCandidate).equals(positionCandidate);\n  }\n\n  lineCount(editor) {\n    var _a, _b;\n\n    return (_b = (_a = this.getModel(editor)) === null || _a === void 0 ? void 0 : _a.getLineCount()) !== null && _b !== void 0 ? _b : 0;\n  }\n\n}\nAbstractGotoLineQuickAccessProvider.PREFIX = ':';","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/contrib/quickAccess/browser/gotoLineQuickAccess.js"],"names":["Disposable","DisposableStore","toDisposable","getCodeEditor","AbstractEditorNavigationQuickAccessProvider","localize","AbstractGotoLineQuickAccessProvider","constructor","canAcceptInBackground","provideWithoutTextEditor","picker","label","items","ariaLabel","None","provideWithTextEditor","context","token","editor","disposables","add","onDidAccept","event","item","selectedItems","isValidLineNumber","lineNumber","gotoLocation","range","toRange","column","keyMods","preserveFocus","inBackground","hide","updatePickerAndEditor","position","parsePosition","value","trim","substr","PREFIX","length","getPickLabel","clearDecorations","revealRangeInCenter","addDecorations","onDidChangeValue","codeEditor","options","getOptions","lineNumbers","get","renderType","updateOptions","startLineNumber","startColumn","endLineNumber","endColumn","numbers","split","map","part","parseInt","filter","isNaN","endLine","lineCount","isValidColumn","getPosition","model","getModel","positionCandidate","validatePosition","equals","_a","_b","getLineCount"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,UAAT,EAAqBC,eAArB,EAAsCC,YAAtC,QAA0D,sCAA1D;AACA,SAASC,aAAT,QAA8B,mCAA9B;AACA,SAASC,2CAAT,QAA4D,kCAA5D;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,OAAO,MAAMC,mCAAN,SAAkDF,2CAAlD,CAA8F;AACjGG,EAAAA,WAAW,GAAG;AACV,UAAM;AAAEC,MAAAA,qBAAqB,EAAE;AAAzB,KAAN;AACH;;AACDC,EAAAA,wBAAwB,CAACC,MAAD,EAAS;AAC7B,UAAMC,KAAK,GAAGN,QAAQ,CAAC,mBAAD,EAAsB,2CAAtB,CAAtB;AACAK,IAAAA,MAAM,CAACE,KAAP,GAAe,CAAC;AAAED,MAAAA;AAAF,KAAD,CAAf;AACAD,IAAAA,MAAM,CAACG,SAAP,GAAmBF,KAAnB;AACA,WAAOX,UAAU,CAACc,IAAlB;AACH;;AACDC,EAAAA,qBAAqB,CAACC,OAAD,EAAUN,MAAV,EAAkBO,KAAlB,EAAyB;AAC1C,UAAMC,MAAM,GAAGF,OAAO,CAACE,MAAvB;AACA,UAAMC,WAAW,GAAG,IAAIlB,eAAJ,EAApB,CAF0C,CAG1C;;AACAkB,IAAAA,WAAW,CAACC,GAAZ,CAAgBV,MAAM,CAACW,WAAP,CAAmBC,KAAK,IAAI;AACxC,YAAM,CAACC,IAAD,IAASb,MAAM,CAACc,aAAtB;;AACA,UAAID,IAAJ,EAAU;AACN,YAAI,CAAC,KAAKE,iBAAL,CAAuBP,MAAvB,EAA+BK,IAAI,CAACG,UAApC,CAAL,EAAsD;AAClD;AACH;;AACD,aAAKC,YAAL,CAAkBX,OAAlB,EAA2B;AAAEY,UAAAA,KAAK,EAAE,KAAKC,OAAL,CAAaN,IAAI,CAACG,UAAlB,EAA8BH,IAAI,CAACO,MAAnC,CAAT;AAAqDC,UAAAA,OAAO,EAAErB,MAAM,CAACqB,OAArE;AAA8EC,UAAAA,aAAa,EAAEV,KAAK,CAACW;AAAnG,SAA3B;;AACA,YAAI,CAACX,KAAK,CAACW,YAAX,EAAyB;AACrBvB,UAAAA,MAAM,CAACwB,IAAP;AACH;AACJ;AACJ,KAXe,CAAhB,EAJ0C,CAgB1C;;AACA,UAAMC,qBAAqB,GAAG,MAAM;AAChC,YAAMC,QAAQ,GAAG,KAAKC,aAAL,CAAmBnB,MAAnB,EAA2BR,MAAM,CAAC4B,KAAP,CAAaC,IAAb,GAAoBC,MAApB,CAA2BlC,mCAAmC,CAACmC,MAApC,CAA2CC,MAAtE,CAA3B,CAAjB;AACA,YAAM/B,KAAK,GAAG,KAAKgC,YAAL,CAAkBzB,MAAlB,EAA0BkB,QAAQ,CAACV,UAAnC,EAA+CU,QAAQ,CAACN,MAAxD,CAAd,CAFgC,CAGhC;;AACApB,MAAAA,MAAM,CAACE,KAAP,GAAe,CAAC;AACRc,QAAAA,UAAU,EAAEU,QAAQ,CAACV,UADb;AAERI,QAAAA,MAAM,EAAEM,QAAQ,CAACN,MAFT;AAGRnB,QAAAA;AAHQ,OAAD,CAAf,CAJgC,CAShC;;AACAD,MAAAA,MAAM,CAACG,SAAP,GAAmBF,KAAnB,CAVgC,CAWhC;;AACA,UAAI,CAAC,KAAKc,iBAAL,CAAuBP,MAAvB,EAA+BkB,QAAQ,CAACV,UAAxC,CAAL,EAA0D;AACtD,aAAKkB,gBAAL,CAAsB1B,MAAtB;AACA;AACH,OAf+B,CAgBhC;;;AACA,YAAMU,KAAK,GAAG,KAAKC,OAAL,CAAaO,QAAQ,CAACV,UAAtB,EAAkCU,QAAQ,CAACN,MAA3C,CAAd;AACAZ,MAAAA,MAAM,CAAC2B,mBAAP,CAA2BjB,KAA3B,EAAkC;AAAE;AAApC,QAlBgC,CAmBhC;;AACA,WAAKkB,cAAL,CAAoB5B,MAApB,EAA4BU,KAA5B;AACH,KArBD;;AAsBAO,IAAAA,qBAAqB;AACrBhB,IAAAA,WAAW,CAACC,GAAZ,CAAgBV,MAAM,CAACqC,gBAAP,CAAwB,MAAMZ,qBAAqB,EAAnD,CAAhB,EAxC0C,CAyC1C;;AACA,UAAMa,UAAU,GAAG7C,aAAa,CAACe,MAAD,CAAhC;;AACA,QAAI8B,UAAJ,EAAgB;AACZ,YAAMC,OAAO,GAAGD,UAAU,CAACE,UAAX,EAAhB;AACA,YAAMC,WAAW,GAAGF,OAAO,CAACG,GAAR,CAAY;AAAG;AAAf,OAApB;;AACA,UAAID,WAAW,CAACE,UAAZ,KAA2B;AAAE;AAAjC,QAAiD;AAC7CL,QAAAA,UAAU,CAACM,aAAX,CAAyB;AAAEH,UAAAA,WAAW,EAAE;AAAf,SAAzB;AACAhC,QAAAA,WAAW,CAACC,GAAZ,CAAgBlB,YAAY,CAAC,MAAM8C,UAAU,CAACM,aAAX,CAAyB;AAAEH,UAAAA,WAAW,EAAE;AAAf,SAAzB,CAAP,CAA5B;AACH;AACJ;;AACD,WAAOhC,WAAP;AACH;;AACDU,EAAAA,OAAO,CAACH,UAAU,GAAG,CAAd,EAAiBI,MAAM,GAAG,CAA1B,EAA6B;AAChC,WAAO;AACHyB,MAAAA,eAAe,EAAE7B,UADd;AAEH8B,MAAAA,WAAW,EAAE1B,MAFV;AAGH2B,MAAAA,aAAa,EAAE/B,UAHZ;AAIHgC,MAAAA,SAAS,EAAE5B;AAJR,KAAP;AAMH;;AACDO,EAAAA,aAAa,CAACnB,MAAD,EAASoB,KAAT,EAAgB;AACzB;AACA,UAAMqB,OAAO,GAAGrB,KAAK,CAACsB,KAAN,CAAY,OAAZ,EAAqBC,GAArB,CAAyBC,IAAI,IAAIC,QAAQ,CAACD,IAAD,EAAO,EAAP,CAAzC,EAAqDE,MAArD,CAA4DF,IAAI,IAAI,CAACG,KAAK,CAACH,IAAD,CAA1E,CAAhB;AACA,UAAMI,OAAO,GAAG,KAAKC,SAAL,CAAejD,MAAf,IAAyB,CAAzC;AACA,WAAO;AACHQ,MAAAA,UAAU,EAAEiC,OAAO,CAAC,CAAD,CAAP,GAAa,CAAb,GAAiBA,OAAO,CAAC,CAAD,CAAxB,GAA8BO,OAAO,GAAGP,OAAO,CAAC,CAAD,CADxD;AAEH7B,MAAAA,MAAM,EAAE6B,OAAO,CAAC,CAAD;AAFZ,KAAP;AAIH;;AACDhB,EAAAA,YAAY,CAACzB,MAAD,EAASQ,UAAT,EAAqBI,MAArB,EAA6B;AACrC;AACA,QAAI,KAAKL,iBAAL,CAAuBP,MAAvB,EAA+BQ,UAA/B,CAAJ,EAAgD;AAC5C,UAAI,KAAK0C,aAAL,CAAmBlD,MAAnB,EAA2BQ,UAA3B,EAAuCI,MAAvC,CAAJ,EAAoD;AAChD,eAAOzB,QAAQ,CAAC,qBAAD,EAAwB,mCAAxB,EAA6DqB,UAA7D,EAAyEI,MAAzE,CAAf;AACH;;AACD,aAAOzB,QAAQ,CAAC,eAAD,EAAkB,iBAAlB,EAAqCqB,UAArC,CAAf;AACH,KAPoC,CAQrC;;;AACA,UAAMU,QAAQ,GAAGlB,MAAM,CAACmD,WAAP,MAAwB;AAAE3C,MAAAA,UAAU,EAAE,CAAd;AAAiBI,MAAAA,MAAM,EAAE;AAAzB,KAAzC;AACA,UAAMqC,SAAS,GAAG,KAAKA,SAAL,CAAejD,MAAf,CAAlB;;AACA,QAAIiD,SAAS,GAAG,CAAhB,EAAmB;AACf,aAAO9D,QAAQ,CAAC,6BAAD,EAAgC,yFAAhC,EAA2H+B,QAAQ,CAACV,UAApI,EAAgJU,QAAQ,CAACN,MAAzJ,EAAiKqC,SAAjK,CAAf;AACH;;AACD,WAAO9D,QAAQ,CAAC,oBAAD,EAAuB,uEAAvB,EAAgG+B,QAAQ,CAACV,UAAzG,EAAqHU,QAAQ,CAACN,MAA9H,CAAf;AACH;;AACDL,EAAAA,iBAAiB,CAACP,MAAD,EAASQ,UAAT,EAAqB;AAClC,QAAI,CAACA,UAAD,IAAe,OAAOA,UAAP,KAAsB,QAAzC,EAAmD;AAC/C,aAAO,KAAP;AACH;;AACD,WAAOA,UAAU,GAAG,CAAb,IAAkBA,UAAU,IAAI,KAAKyC,SAAL,CAAejD,MAAf,CAAvC;AACH;;AACDkD,EAAAA,aAAa,CAAClD,MAAD,EAASQ,UAAT,EAAqBI,MAArB,EAA6B;AACtC,QAAI,CAACA,MAAD,IAAW,OAAOA,MAAP,KAAkB,QAAjC,EAA2C;AACvC,aAAO,KAAP;AACH;;AACD,UAAMwC,KAAK,GAAG,KAAKC,QAAL,CAAcrD,MAAd,CAAd;;AACA,QAAI,CAACoD,KAAL,EAAY;AACR,aAAO,KAAP;AACH;;AACD,UAAME,iBAAiB,GAAG;AAAE9C,MAAAA,UAAF;AAAcI,MAAAA;AAAd,KAA1B;AACA,WAAOwC,KAAK,CAACG,gBAAN,CAAuBD,iBAAvB,EAA0CE,MAA1C,CAAiDF,iBAAjD,CAAP;AACH;;AACDL,EAAAA,SAAS,CAACjD,MAAD,EAAS;AACd,QAAIyD,EAAJ,EAAQC,EAAR;;AACA,WAAO,CAACA,EAAE,GAAG,CAACD,EAAE,GAAG,KAAKJ,QAAL,CAAcrD,MAAd,CAAN,MAAiC,IAAjC,IAAyCyD,EAAE,KAAK,KAAK,CAArD,GAAyD,KAAK,CAA9D,GAAkEA,EAAE,CAACE,YAAH,EAAxE,MAA+F,IAA/F,IAAuGD,EAAE,KAAK,KAAK,CAAnH,GAAuHA,EAAvH,GAA4H,CAAnI;AACH;;AApHgG;AAsHrGtE,mCAAmC,CAACmC,MAApC,GAA6C,GAA7C","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Disposable, DisposableStore, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { getCodeEditor } from '../../../browser/editorBrowser.js';\nimport { AbstractEditorNavigationQuickAccessProvider } from './editorNavigationQuickAccess.js';\nimport { localize } from '../../../../nls.js';\nexport class AbstractGotoLineQuickAccessProvider extends AbstractEditorNavigationQuickAccessProvider {\n    constructor() {\n        super({ canAcceptInBackground: true });\n    }\n    provideWithoutTextEditor(picker) {\n        const label = localize('cannotRunGotoLine', \"Open a text editor first to go to a line.\");\n        picker.items = [{ label }];\n        picker.ariaLabel = label;\n        return Disposable.None;\n    }\n    provideWithTextEditor(context, picker, token) {\n        const editor = context.editor;\n        const disposables = new DisposableStore();\n        // Goto line once picked\n        disposables.add(picker.onDidAccept(event => {\n            const [item] = picker.selectedItems;\n            if (item) {\n                if (!this.isValidLineNumber(editor, item.lineNumber)) {\n                    return;\n                }\n                this.gotoLocation(context, { range: this.toRange(item.lineNumber, item.column), keyMods: picker.keyMods, preserveFocus: event.inBackground });\n                if (!event.inBackground) {\n                    picker.hide();\n                }\n            }\n        }));\n        // React to picker changes\n        const updatePickerAndEditor = () => {\n            const position = this.parsePosition(editor, picker.value.trim().substr(AbstractGotoLineQuickAccessProvider.PREFIX.length));\n            const label = this.getPickLabel(editor, position.lineNumber, position.column);\n            // Picker\n            picker.items = [{\n                    lineNumber: position.lineNumber,\n                    column: position.column,\n                    label\n                }];\n            // ARIA Label\n            picker.ariaLabel = label;\n            // Clear decorations for invalid range\n            if (!this.isValidLineNumber(editor, position.lineNumber)) {\n                this.clearDecorations(editor);\n                return;\n            }\n            // Reveal\n            const range = this.toRange(position.lineNumber, position.column);\n            editor.revealRangeInCenter(range, 0 /* Smooth */);\n            // Decorate\n            this.addDecorations(editor, range);\n        };\n        updatePickerAndEditor();\n        disposables.add(picker.onDidChangeValue(() => updatePickerAndEditor()));\n        // Adjust line number visibility as needed\n        const codeEditor = getCodeEditor(editor);\n        if (codeEditor) {\n            const options = codeEditor.getOptions();\n            const lineNumbers = options.get(60 /* lineNumbers */);\n            if (lineNumbers.renderType === 2 /* Relative */) {\n                codeEditor.updateOptions({ lineNumbers: 'on' });\n                disposables.add(toDisposable(() => codeEditor.updateOptions({ lineNumbers: 'relative' })));\n            }\n        }\n        return disposables;\n    }\n    toRange(lineNumber = 1, column = 1) {\n        return {\n            startLineNumber: lineNumber,\n            startColumn: column,\n            endLineNumber: lineNumber,\n            endColumn: column\n        };\n    }\n    parsePosition(editor, value) {\n        // Support line-col formats of `line,col`, `line:col`, `line#col`\n        const numbers = value.split(/,|:|#/).map(part => parseInt(part, 10)).filter(part => !isNaN(part));\n        const endLine = this.lineCount(editor) + 1;\n        return {\n            lineNumber: numbers[0] > 0 ? numbers[0] : endLine + numbers[0],\n            column: numbers[1]\n        };\n    }\n    getPickLabel(editor, lineNumber, column) {\n        // Location valid: indicate this as picker label\n        if (this.isValidLineNumber(editor, lineNumber)) {\n            if (this.isValidColumn(editor, lineNumber, column)) {\n                return localize('gotoLineColumnLabel', \"Go to line {0} and character {1}.\", lineNumber, column);\n            }\n            return localize('gotoLineLabel', \"Go to line {0}.\", lineNumber);\n        }\n        // Location invalid: show generic label\n        const position = editor.getPosition() || { lineNumber: 1, column: 1 };\n        const lineCount = this.lineCount(editor);\n        if (lineCount > 1) {\n            return localize('gotoLineLabelEmptyWithLimit', \"Current Line: {0}, Character: {1}. Type a line number between 1 and {2} to navigate to.\", position.lineNumber, position.column, lineCount);\n        }\n        return localize('gotoLineLabelEmpty', \"Current Line: {0}, Character: {1}. Type a line number to navigate to.\", position.lineNumber, position.column);\n    }\n    isValidLineNumber(editor, lineNumber) {\n        if (!lineNumber || typeof lineNumber !== 'number') {\n            return false;\n        }\n        return lineNumber > 0 && lineNumber <= this.lineCount(editor);\n    }\n    isValidColumn(editor, lineNumber, column) {\n        if (!column || typeof column !== 'number') {\n            return false;\n        }\n        const model = this.getModel(editor);\n        if (!model) {\n            return false;\n        }\n        const positionCandidate = { lineNumber, column };\n        return model.validatePosition(positionCandidate).equals(positionCandidate);\n    }\n    lineCount(editor) {\n        var _a, _b;\n        return (_b = (_a = this.getModel(editor)) === null || _a === void 0 ? void 0 : _a.getLineCount()) !== null && _b !== void 0 ? _b : 0;\n    }\n}\nAbstractGotoLineQuickAccessProvider.PREFIX = ':';\n"]},"metadata":{},"sourceType":"module"}