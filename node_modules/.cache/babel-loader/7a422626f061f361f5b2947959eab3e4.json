{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../nls.js';\nimport { URI } from '../../base/common/uri.js';\nimport { ICodeEditorService } from './services/codeEditorService.js';\nimport { Position } from '../common/core/position.js';\nimport { IModelService } from '../common/services/model.js';\nimport { ITextModelService } from '../common/services/resolverService.js';\nimport { MenuId, MenuRegistry } from '../../platform/actions/common/actions.js';\nimport { CommandsRegistry } from '../../platform/commands/common/commands.js';\nimport { ContextKeyExpr, IContextKeyService } from '../../platform/contextkey/common/contextkey.js';\nimport { KeybindingsRegistry } from '../../platform/keybinding/common/keybindingsRegistry.js';\nimport { Registry } from '../../platform/registry/common/platform.js';\nimport { ITelemetryService } from '../../platform/telemetry/common/telemetry.js';\nimport { withNullAsUndefined, assertType } from '../../base/common/types.js';\nimport { ILogService } from '../../platform/log/common/log.js';\nexport class Command {\n  constructor(opts) {\n    this.id = opts.id;\n    this.precondition = opts.precondition;\n    this._kbOpts = opts.kbOpts;\n    this._menuOpts = opts.menuOpts;\n    this._description = opts.description;\n  }\n\n  register() {\n    if (Array.isArray(this._menuOpts)) {\n      this._menuOpts.forEach(this._registerMenuItem, this);\n    } else if (this._menuOpts) {\n      this._registerMenuItem(this._menuOpts);\n    }\n\n    if (this._kbOpts) {\n      const kbOptsArr = Array.isArray(this._kbOpts) ? this._kbOpts : [this._kbOpts];\n\n      for (const kbOpts of kbOptsArr) {\n        let kbWhen = kbOpts.kbExpr;\n\n        if (this.precondition) {\n          if (kbWhen) {\n            kbWhen = ContextKeyExpr.and(kbWhen, this.precondition);\n          } else {\n            kbWhen = this.precondition;\n          }\n        }\n\n        const desc = {\n          id: this.id,\n          weight: kbOpts.weight,\n          args: kbOpts.args,\n          when: kbWhen,\n          primary: kbOpts.primary,\n          secondary: kbOpts.secondary,\n          win: kbOpts.win,\n          linux: kbOpts.linux,\n          mac: kbOpts.mac\n        };\n        KeybindingsRegistry.registerKeybindingRule(desc);\n      }\n    }\n\n    CommandsRegistry.registerCommand({\n      id: this.id,\n      handler: (accessor, args) => this.runCommand(accessor, args),\n      description: this._description\n    });\n  }\n\n  _registerMenuItem(item) {\n    MenuRegistry.appendMenuItem(item.menuId, {\n      group: item.group,\n      command: {\n        id: this.id,\n        title: item.title,\n        icon: item.icon,\n        precondition: this.precondition\n      },\n      when: item.when,\n      order: item.order\n    });\n  }\n\n}\nexport class MultiCommand extends Command {\n  constructor() {\n    super(...arguments);\n    this._implementations = [];\n  }\n  /**\n   * A higher priority gets to be looked at first\n   */\n\n\n  addImplementation(priority, name, implementation) {\n    this._implementations.push({\n      priority,\n      name,\n      implementation\n    });\n\n    this._implementations.sort((a, b) => b.priority - a.priority);\n\n    return {\n      dispose: () => {\n        for (let i = 0; i < this._implementations.length; i++) {\n          if (this._implementations[i].implementation === implementation) {\n            this._implementations.splice(i, 1);\n\n            return;\n          }\n        }\n      }\n    };\n  }\n\n  runCommand(accessor, args) {\n    const logService = accessor.get(ILogService);\n    logService.trace(`Executing Command '${this.id}' which has ${this._implementations.length} bound.`);\n\n    for (const impl of this._implementations) {\n      const result = impl.implementation(accessor, args);\n\n      if (result) {\n        logService.trace(`Command '${this.id}' was handled by '${impl.name}'.`);\n\n        if (typeof result === 'boolean') {\n          return;\n        }\n\n        return result;\n      }\n    }\n\n    logService.trace(`The Command '${this.id}' was not handled by any implementation.`);\n  }\n\n} //#endregion\n\n/**\n * A command that delegates to another command's implementation.\n *\n * This lets different commands be registered but share the same implementation\n */\n\nexport class ProxyCommand extends Command {\n  constructor(command, opts) {\n    super(opts);\n    this.command = command;\n  }\n\n  runCommand(accessor, args) {\n    return this.command.runCommand(accessor, args);\n  }\n\n}\nexport class EditorCommand extends Command {\n  /**\n   * Create a command class that is bound to a certain editor contribution.\n   */\n  static bindToContribution(controllerGetter) {\n    return class EditorControllerCommandImpl extends EditorCommand {\n      constructor(opts) {\n        super(opts);\n        this._callback = opts.handler;\n      }\n\n      runEditorCommand(accessor, editor, args) {\n        const controller = controllerGetter(editor);\n\n        if (controller) {\n          this._callback(controller, args);\n        }\n      }\n\n    };\n  }\n\n  runCommand(accessor, args) {\n    const codeEditorService = accessor.get(ICodeEditorService); // Find the editor with text focus or active\n\n    const editor = codeEditorService.getFocusedCodeEditor() || codeEditorService.getActiveCodeEditor();\n\n    if (!editor) {\n      // well, at least we tried...\n      return;\n    }\n\n    return editor.invokeWithinContext(editorAccessor => {\n      const kbService = editorAccessor.get(IContextKeyService);\n\n      if (!kbService.contextMatchesRules(withNullAsUndefined(this.precondition))) {\n        // precondition does not hold\n        return;\n      }\n\n      return this.runEditorCommand(editorAccessor, editor, args);\n    });\n  }\n\n}\nexport class EditorAction extends EditorCommand {\n  constructor(opts) {\n    super(EditorAction.convertOptions(opts));\n    this.label = opts.label;\n    this.alias = opts.alias;\n  }\n\n  static convertOptions(opts) {\n    let menuOpts;\n\n    if (Array.isArray(opts.menuOpts)) {\n      menuOpts = opts.menuOpts;\n    } else if (opts.menuOpts) {\n      menuOpts = [opts.menuOpts];\n    } else {\n      menuOpts = [];\n    }\n\n    function withDefaults(item) {\n      if (!item.menuId) {\n        item.menuId = MenuId.EditorContext;\n      }\n\n      if (!item.title) {\n        item.title = opts.label;\n      }\n\n      item.when = ContextKeyExpr.and(opts.precondition, item.when);\n      return item;\n    }\n\n    if (Array.isArray(opts.contextMenuOpts)) {\n      menuOpts.push(...opts.contextMenuOpts.map(withDefaults));\n    } else if (opts.contextMenuOpts) {\n      menuOpts.push(withDefaults(opts.contextMenuOpts));\n    }\n\n    opts.menuOpts = menuOpts;\n    return opts;\n  }\n\n  runEditorCommand(accessor, editor, args) {\n    this.reportTelemetry(accessor, editor);\n    return this.run(accessor, editor, args || {});\n  }\n\n  reportTelemetry(accessor, editor) {\n    accessor.get(ITelemetryService).publicLog2('editorActionInvoked', {\n      name: this.label,\n      id: this.id\n    });\n  }\n\n}\nexport class MultiEditorAction extends EditorAction {\n  constructor() {\n    super(...arguments);\n    this._implementations = [];\n  }\n  /**\n   * A higher priority gets to be looked at first\n   */\n\n\n  addImplementation(priority, implementation) {\n    this._implementations.push([priority, implementation]);\n\n    this._implementations.sort((a, b) => b[0] - a[0]);\n\n    return {\n      dispose: () => {\n        for (let i = 0; i < this._implementations.length; i++) {\n          if (this._implementations[i][1] === implementation) {\n            this._implementations.splice(i, 1);\n\n            return;\n          }\n        }\n      }\n    };\n  }\n\n  run(accessor, editor, args) {\n    for (const impl of this._implementations) {\n      const result = impl[1](accessor, editor, args);\n\n      if (result) {\n        if (typeof result === 'boolean') {\n          return;\n        }\n\n        return result;\n      }\n    }\n  }\n\n} //#endregion\n// --- Registration of commands and actions\n\nexport function registerModelAndPositionCommand(id, handler) {\n  CommandsRegistry.registerCommand(id, function (accessor, ...args) {\n    const [resource, position] = args;\n    assertType(URI.isUri(resource));\n    assertType(Position.isIPosition(position));\n    const model = accessor.get(IModelService).getModel(resource);\n\n    if (model) {\n      const editorPosition = Position.lift(position);\n      return handler(model, editorPosition, ...args.slice(2));\n    }\n\n    return accessor.get(ITextModelService).createModelReference(resource).then(reference => {\n      return new Promise((resolve, reject) => {\n        try {\n          const result = handler(reference.object.textEditorModel, Position.lift(position), args.slice(2));\n          resolve(result);\n        } catch (err) {\n          reject(err);\n        }\n      }).finally(() => {\n        reference.dispose();\n      });\n    });\n  });\n}\nexport function registerModelCommand(id, handler) {\n  CommandsRegistry.registerCommand(id, function (accessor, ...args) {\n    const [resource] = args;\n    assertType(URI.isUri(resource));\n    const model = accessor.get(IModelService).getModel(resource);\n\n    if (model) {\n      return handler(model, ...args.slice(1));\n    }\n\n    return accessor.get(ITextModelService).createModelReference(resource).then(reference => {\n      return new Promise((resolve, reject) => {\n        try {\n          const result = handler(reference.object.textEditorModel, args.slice(1));\n          resolve(result);\n        } catch (err) {\n          reject(err);\n        }\n      }).finally(() => {\n        reference.dispose();\n      });\n    });\n  });\n}\nexport function registerEditorCommand(editorCommand) {\n  EditorContributionRegistry.INSTANCE.registerEditorCommand(editorCommand);\n  return editorCommand;\n}\nexport function registerEditorAction(ctor) {\n  const action = new ctor();\n  EditorContributionRegistry.INSTANCE.registerEditorAction(action);\n  return action;\n}\nexport function registerMultiEditorAction(action) {\n  EditorContributionRegistry.INSTANCE.registerEditorAction(action);\n  return action;\n}\nexport function registerInstantiatedEditorAction(editorAction) {\n  EditorContributionRegistry.INSTANCE.registerEditorAction(editorAction);\n}\nexport function registerEditorContribution(id, ctor) {\n  EditorContributionRegistry.INSTANCE.registerEditorContribution(id, ctor);\n}\nexport var EditorExtensionsRegistry;\n\n(function (EditorExtensionsRegistry) {\n  function getEditorCommand(commandId) {\n    return EditorContributionRegistry.INSTANCE.getEditorCommand(commandId);\n  }\n\n  EditorExtensionsRegistry.getEditorCommand = getEditorCommand;\n\n  function getEditorActions() {\n    return EditorContributionRegistry.INSTANCE.getEditorActions();\n  }\n\n  EditorExtensionsRegistry.getEditorActions = getEditorActions;\n\n  function getEditorContributions() {\n    return EditorContributionRegistry.INSTANCE.getEditorContributions();\n  }\n\n  EditorExtensionsRegistry.getEditorContributions = getEditorContributions;\n\n  function getSomeEditorContributions(ids) {\n    return EditorContributionRegistry.INSTANCE.getEditorContributions().filter(c => ids.indexOf(c.id) >= 0);\n  }\n\n  EditorExtensionsRegistry.getSomeEditorContributions = getSomeEditorContributions;\n\n  function getDiffEditorContributions() {\n    return EditorContributionRegistry.INSTANCE.getDiffEditorContributions();\n  }\n\n  EditorExtensionsRegistry.getDiffEditorContributions = getDiffEditorContributions;\n})(EditorExtensionsRegistry || (EditorExtensionsRegistry = {})); // Editor extension points\n\n\nconst Extensions = {\n  EditorCommonContributions: 'editor.contributions'\n};\n\nclass EditorContributionRegistry {\n  constructor() {\n    this.editorContributions = [];\n    this.diffEditorContributions = [];\n    this.editorActions = [];\n    this.editorCommands = Object.create(null);\n  }\n\n  registerEditorContribution(id, ctor) {\n    this.editorContributions.push({\n      id,\n      ctor: ctor\n    });\n  }\n\n  getEditorContributions() {\n    return this.editorContributions.slice(0);\n  }\n\n  getDiffEditorContributions() {\n    return this.diffEditorContributions.slice(0);\n  }\n\n  registerEditorAction(action) {\n    action.register();\n    this.editorActions.push(action);\n  }\n\n  getEditorActions() {\n    return this.editorActions.slice(0);\n  }\n\n  registerEditorCommand(editorCommand) {\n    editorCommand.register();\n    this.editorCommands[editorCommand.id] = editorCommand;\n  }\n\n  getEditorCommand(commandId) {\n    return this.editorCommands[commandId] || null;\n  }\n\n}\n\nEditorContributionRegistry.INSTANCE = new EditorContributionRegistry();\nRegistry.add(Extensions.EditorCommonContributions, EditorContributionRegistry.INSTANCE);\n\nfunction registerCommand(command) {\n  command.register();\n  return command;\n}\n\nexport const UndoCommand = registerCommand(new MultiCommand({\n  id: 'undo',\n  precondition: undefined,\n  kbOpts: {\n    weight: 0\n    /* EditorCore */\n    ,\n    primary: 2048\n    /* CtrlCmd */\n    | 56\n    /* KeyZ */\n\n  },\n  menuOpts: [{\n    menuId: MenuId.MenubarEditMenu,\n    group: '1_do',\n    title: nls.localize({\n      key: 'miUndo',\n      comment: ['&& denotes a mnemonic']\n    }, \"&&Undo\"),\n    order: 1\n  }, {\n    menuId: MenuId.CommandPalette,\n    group: '',\n    title: nls.localize('undo', \"Undo\"),\n    order: 1\n  }]\n}));\nregisterCommand(new ProxyCommand(UndoCommand, {\n  id: 'default:undo',\n  precondition: undefined\n}));\nexport const RedoCommand = registerCommand(new MultiCommand({\n  id: 'redo',\n  precondition: undefined,\n  kbOpts: {\n    weight: 0\n    /* EditorCore */\n    ,\n    primary: 2048\n    /* CtrlCmd */\n    | 55\n    /* KeyY */\n    ,\n    secondary: [2048\n    /* CtrlCmd */\n    | 1024\n    /* Shift */\n    | 56\n    /* KeyZ */\n    ],\n    mac: {\n      primary: 2048\n      /* CtrlCmd */\n      | 1024\n      /* Shift */\n      | 56\n      /* KeyZ */\n\n    }\n  },\n  menuOpts: [{\n    menuId: MenuId.MenubarEditMenu,\n    group: '1_do',\n    title: nls.localize({\n      key: 'miRedo',\n      comment: ['&& denotes a mnemonic']\n    }, \"&&Redo\"),\n    order: 2\n  }, {\n    menuId: MenuId.CommandPalette,\n    group: '',\n    title: nls.localize('redo', \"Redo\"),\n    order: 1\n  }]\n}));\nregisterCommand(new ProxyCommand(RedoCommand, {\n  id: 'default:redo',\n  precondition: undefined\n}));\nexport const SelectAllCommand = registerCommand(new MultiCommand({\n  id: 'editor.action.selectAll',\n  precondition: undefined,\n  kbOpts: {\n    weight: 0\n    /* EditorCore */\n    ,\n    kbExpr: null,\n    primary: 2048\n    /* CtrlCmd */\n    | 31\n    /* KeyA */\n\n  },\n  menuOpts: [{\n    menuId: MenuId.MenubarSelectionMenu,\n    group: '1_basic',\n    title: nls.localize({\n      key: 'miSelectAll',\n      comment: ['&& denotes a mnemonic']\n    }, \"&&Select All\"),\n    order: 1\n  }, {\n    menuId: MenuId.CommandPalette,\n    group: '',\n    title: nls.localize('selectAll', \"Select All\"),\n    order: 1\n  }]\n}));","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js"],"names":["nls","URI","ICodeEditorService","Position","IModelService","ITextModelService","MenuId","MenuRegistry","CommandsRegistry","ContextKeyExpr","IContextKeyService","KeybindingsRegistry","Registry","ITelemetryService","withNullAsUndefined","assertType","ILogService","Command","constructor","opts","id","precondition","_kbOpts","kbOpts","_menuOpts","menuOpts","_description","description","register","Array","isArray","forEach","_registerMenuItem","kbOptsArr","kbWhen","kbExpr","and","desc","weight","args","when","primary","secondary","win","linux","mac","registerKeybindingRule","registerCommand","handler","accessor","runCommand","item","appendMenuItem","menuId","group","command","title","icon","order","MultiCommand","arguments","_implementations","addImplementation","priority","name","implementation","push","sort","a","b","dispose","i","length","splice","logService","get","trace","impl","result","ProxyCommand","EditorCommand","bindToContribution","controllerGetter","EditorControllerCommandImpl","_callback","runEditorCommand","editor","controller","codeEditorService","getFocusedCodeEditor","getActiveCodeEditor","invokeWithinContext","editorAccessor","kbService","contextMatchesRules","EditorAction","convertOptions","label","alias","withDefaults","EditorContext","contextMenuOpts","map","reportTelemetry","run","publicLog2","MultiEditorAction","registerModelAndPositionCommand","resource","position","isUri","isIPosition","model","getModel","editorPosition","lift","slice","createModelReference","then","reference","Promise","resolve","reject","object","textEditorModel","err","finally","registerModelCommand","registerEditorCommand","editorCommand","EditorContributionRegistry","INSTANCE","registerEditorAction","ctor","action","registerMultiEditorAction","registerInstantiatedEditorAction","editorAction","registerEditorContribution","EditorExtensionsRegistry","getEditorCommand","commandId","getEditorActions","getEditorContributions","getSomeEditorContributions","ids","filter","c","indexOf","getDiffEditorContributions","Extensions","EditorCommonContributions","editorContributions","diffEditorContributions","editorActions","editorCommands","Object","create","add","UndoCommand","undefined","MenubarEditMenu","localize","key","comment","CommandPalette","RedoCommand","SelectAllCommand","MenubarSelectionMenu"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../nls.js';\nimport { URI } from '../../base/common/uri.js';\nimport { ICodeEditorService } from './services/codeEditorService.js';\nimport { Position } from '../common/core/position.js';\nimport { IModelService } from '../common/services/model.js';\nimport { ITextModelService } from '../common/services/resolverService.js';\nimport { MenuId, MenuRegistry } from '../../platform/actions/common/actions.js';\nimport { CommandsRegistry } from '../../platform/commands/common/commands.js';\nimport { ContextKeyExpr, IContextKeyService } from '../../platform/contextkey/common/contextkey.js';\nimport { KeybindingsRegistry } from '../../platform/keybinding/common/keybindingsRegistry.js';\nimport { Registry } from '../../platform/registry/common/platform.js';\nimport { ITelemetryService } from '../../platform/telemetry/common/telemetry.js';\nimport { withNullAsUndefined, assertType } from '../../base/common/types.js';\nimport { ILogService } from '../../platform/log/common/log.js';\nexport class Command {\n    constructor(opts) {\n        this.id = opts.id;\n        this.precondition = opts.precondition;\n        this._kbOpts = opts.kbOpts;\n        this._menuOpts = opts.menuOpts;\n        this._description = opts.description;\n    }\n    register() {\n        if (Array.isArray(this._menuOpts)) {\n            this._menuOpts.forEach(this._registerMenuItem, this);\n        }\n        else if (this._menuOpts) {\n            this._registerMenuItem(this._menuOpts);\n        }\n        if (this._kbOpts) {\n            const kbOptsArr = Array.isArray(this._kbOpts) ? this._kbOpts : [this._kbOpts];\n            for (const kbOpts of kbOptsArr) {\n                let kbWhen = kbOpts.kbExpr;\n                if (this.precondition) {\n                    if (kbWhen) {\n                        kbWhen = ContextKeyExpr.and(kbWhen, this.precondition);\n                    }\n                    else {\n                        kbWhen = this.precondition;\n                    }\n                }\n                const desc = {\n                    id: this.id,\n                    weight: kbOpts.weight,\n                    args: kbOpts.args,\n                    when: kbWhen,\n                    primary: kbOpts.primary,\n                    secondary: kbOpts.secondary,\n                    win: kbOpts.win,\n                    linux: kbOpts.linux,\n                    mac: kbOpts.mac,\n                };\n                KeybindingsRegistry.registerKeybindingRule(desc);\n            }\n        }\n        CommandsRegistry.registerCommand({\n            id: this.id,\n            handler: (accessor, args) => this.runCommand(accessor, args),\n            description: this._description\n        });\n    }\n    _registerMenuItem(item) {\n        MenuRegistry.appendMenuItem(item.menuId, {\n            group: item.group,\n            command: {\n                id: this.id,\n                title: item.title,\n                icon: item.icon,\n                precondition: this.precondition\n            },\n            when: item.when,\n            order: item.order\n        });\n    }\n}\nexport class MultiCommand extends Command {\n    constructor() {\n        super(...arguments);\n        this._implementations = [];\n    }\n    /**\n     * A higher priority gets to be looked at first\n     */\n    addImplementation(priority, name, implementation) {\n        this._implementations.push({ priority, name, implementation });\n        this._implementations.sort((a, b) => b.priority - a.priority);\n        return {\n            dispose: () => {\n                for (let i = 0; i < this._implementations.length; i++) {\n                    if (this._implementations[i].implementation === implementation) {\n                        this._implementations.splice(i, 1);\n                        return;\n                    }\n                }\n            }\n        };\n    }\n    runCommand(accessor, args) {\n        const logService = accessor.get(ILogService);\n        logService.trace(`Executing Command '${this.id}' which has ${this._implementations.length} bound.`);\n        for (const impl of this._implementations) {\n            const result = impl.implementation(accessor, args);\n            if (result) {\n                logService.trace(`Command '${this.id}' was handled by '${impl.name}'.`);\n                if (typeof result === 'boolean') {\n                    return;\n                }\n                return result;\n            }\n        }\n        logService.trace(`The Command '${this.id}' was not handled by any implementation.`);\n    }\n}\n//#endregion\n/**\n * A command that delegates to another command's implementation.\n *\n * This lets different commands be registered but share the same implementation\n */\nexport class ProxyCommand extends Command {\n    constructor(command, opts) {\n        super(opts);\n        this.command = command;\n    }\n    runCommand(accessor, args) {\n        return this.command.runCommand(accessor, args);\n    }\n}\nexport class EditorCommand extends Command {\n    /**\n     * Create a command class that is bound to a certain editor contribution.\n     */\n    static bindToContribution(controllerGetter) {\n        return class EditorControllerCommandImpl extends EditorCommand {\n            constructor(opts) {\n                super(opts);\n                this._callback = opts.handler;\n            }\n            runEditorCommand(accessor, editor, args) {\n                const controller = controllerGetter(editor);\n                if (controller) {\n                    this._callback(controller, args);\n                }\n            }\n        };\n    }\n    runCommand(accessor, args) {\n        const codeEditorService = accessor.get(ICodeEditorService);\n        // Find the editor with text focus or active\n        const editor = codeEditorService.getFocusedCodeEditor() || codeEditorService.getActiveCodeEditor();\n        if (!editor) {\n            // well, at least we tried...\n            return;\n        }\n        return editor.invokeWithinContext((editorAccessor) => {\n            const kbService = editorAccessor.get(IContextKeyService);\n            if (!kbService.contextMatchesRules(withNullAsUndefined(this.precondition))) {\n                // precondition does not hold\n                return;\n            }\n            return this.runEditorCommand(editorAccessor, editor, args);\n        });\n    }\n}\nexport class EditorAction extends EditorCommand {\n    constructor(opts) {\n        super(EditorAction.convertOptions(opts));\n        this.label = opts.label;\n        this.alias = opts.alias;\n    }\n    static convertOptions(opts) {\n        let menuOpts;\n        if (Array.isArray(opts.menuOpts)) {\n            menuOpts = opts.menuOpts;\n        }\n        else if (opts.menuOpts) {\n            menuOpts = [opts.menuOpts];\n        }\n        else {\n            menuOpts = [];\n        }\n        function withDefaults(item) {\n            if (!item.menuId) {\n                item.menuId = MenuId.EditorContext;\n            }\n            if (!item.title) {\n                item.title = opts.label;\n            }\n            item.when = ContextKeyExpr.and(opts.precondition, item.when);\n            return item;\n        }\n        if (Array.isArray(opts.contextMenuOpts)) {\n            menuOpts.push(...opts.contextMenuOpts.map(withDefaults));\n        }\n        else if (opts.contextMenuOpts) {\n            menuOpts.push(withDefaults(opts.contextMenuOpts));\n        }\n        opts.menuOpts = menuOpts;\n        return opts;\n    }\n    runEditorCommand(accessor, editor, args) {\n        this.reportTelemetry(accessor, editor);\n        return this.run(accessor, editor, args || {});\n    }\n    reportTelemetry(accessor, editor) {\n        accessor.get(ITelemetryService).publicLog2('editorActionInvoked', { name: this.label, id: this.id });\n    }\n}\nexport class MultiEditorAction extends EditorAction {\n    constructor() {\n        super(...arguments);\n        this._implementations = [];\n    }\n    /**\n     * A higher priority gets to be looked at first\n     */\n    addImplementation(priority, implementation) {\n        this._implementations.push([priority, implementation]);\n        this._implementations.sort((a, b) => b[0] - a[0]);\n        return {\n            dispose: () => {\n                for (let i = 0; i < this._implementations.length; i++) {\n                    if (this._implementations[i][1] === implementation) {\n                        this._implementations.splice(i, 1);\n                        return;\n                    }\n                }\n            }\n        };\n    }\n    run(accessor, editor, args) {\n        for (const impl of this._implementations) {\n            const result = impl[1](accessor, editor, args);\n            if (result) {\n                if (typeof result === 'boolean') {\n                    return;\n                }\n                return result;\n            }\n        }\n    }\n}\n//#endregion\n// --- Registration of commands and actions\nexport function registerModelAndPositionCommand(id, handler) {\n    CommandsRegistry.registerCommand(id, function (accessor, ...args) {\n        const [resource, position] = args;\n        assertType(URI.isUri(resource));\n        assertType(Position.isIPosition(position));\n        const model = accessor.get(IModelService).getModel(resource);\n        if (model) {\n            const editorPosition = Position.lift(position);\n            return handler(model, editorPosition, ...args.slice(2));\n        }\n        return accessor.get(ITextModelService).createModelReference(resource).then(reference => {\n            return new Promise((resolve, reject) => {\n                try {\n                    const result = handler(reference.object.textEditorModel, Position.lift(position), args.slice(2));\n                    resolve(result);\n                }\n                catch (err) {\n                    reject(err);\n                }\n            }).finally(() => {\n                reference.dispose();\n            });\n        });\n    });\n}\nexport function registerModelCommand(id, handler) {\n    CommandsRegistry.registerCommand(id, function (accessor, ...args) {\n        const [resource] = args;\n        assertType(URI.isUri(resource));\n        const model = accessor.get(IModelService).getModel(resource);\n        if (model) {\n            return handler(model, ...args.slice(1));\n        }\n        return accessor.get(ITextModelService).createModelReference(resource).then(reference => {\n            return new Promise((resolve, reject) => {\n                try {\n                    const result = handler(reference.object.textEditorModel, args.slice(1));\n                    resolve(result);\n                }\n                catch (err) {\n                    reject(err);\n                }\n            }).finally(() => {\n                reference.dispose();\n            });\n        });\n    });\n}\nexport function registerEditorCommand(editorCommand) {\n    EditorContributionRegistry.INSTANCE.registerEditorCommand(editorCommand);\n    return editorCommand;\n}\nexport function registerEditorAction(ctor) {\n    const action = new ctor();\n    EditorContributionRegistry.INSTANCE.registerEditorAction(action);\n    return action;\n}\nexport function registerMultiEditorAction(action) {\n    EditorContributionRegistry.INSTANCE.registerEditorAction(action);\n    return action;\n}\nexport function registerInstantiatedEditorAction(editorAction) {\n    EditorContributionRegistry.INSTANCE.registerEditorAction(editorAction);\n}\nexport function registerEditorContribution(id, ctor) {\n    EditorContributionRegistry.INSTANCE.registerEditorContribution(id, ctor);\n}\nexport var EditorExtensionsRegistry;\n(function (EditorExtensionsRegistry) {\n    function getEditorCommand(commandId) {\n        return EditorContributionRegistry.INSTANCE.getEditorCommand(commandId);\n    }\n    EditorExtensionsRegistry.getEditorCommand = getEditorCommand;\n    function getEditorActions() {\n        return EditorContributionRegistry.INSTANCE.getEditorActions();\n    }\n    EditorExtensionsRegistry.getEditorActions = getEditorActions;\n    function getEditorContributions() {\n        return EditorContributionRegistry.INSTANCE.getEditorContributions();\n    }\n    EditorExtensionsRegistry.getEditorContributions = getEditorContributions;\n    function getSomeEditorContributions(ids) {\n        return EditorContributionRegistry.INSTANCE.getEditorContributions().filter(c => ids.indexOf(c.id) >= 0);\n    }\n    EditorExtensionsRegistry.getSomeEditorContributions = getSomeEditorContributions;\n    function getDiffEditorContributions() {\n        return EditorContributionRegistry.INSTANCE.getDiffEditorContributions();\n    }\n    EditorExtensionsRegistry.getDiffEditorContributions = getDiffEditorContributions;\n})(EditorExtensionsRegistry || (EditorExtensionsRegistry = {}));\n// Editor extension points\nconst Extensions = {\n    EditorCommonContributions: 'editor.contributions'\n};\nclass EditorContributionRegistry {\n    constructor() {\n        this.editorContributions = [];\n        this.diffEditorContributions = [];\n        this.editorActions = [];\n        this.editorCommands = Object.create(null);\n    }\n    registerEditorContribution(id, ctor) {\n        this.editorContributions.push({ id, ctor: ctor });\n    }\n    getEditorContributions() {\n        return this.editorContributions.slice(0);\n    }\n    getDiffEditorContributions() {\n        return this.diffEditorContributions.slice(0);\n    }\n    registerEditorAction(action) {\n        action.register();\n        this.editorActions.push(action);\n    }\n    getEditorActions() {\n        return this.editorActions.slice(0);\n    }\n    registerEditorCommand(editorCommand) {\n        editorCommand.register();\n        this.editorCommands[editorCommand.id] = editorCommand;\n    }\n    getEditorCommand(commandId) {\n        return (this.editorCommands[commandId] || null);\n    }\n}\nEditorContributionRegistry.INSTANCE = new EditorContributionRegistry();\nRegistry.add(Extensions.EditorCommonContributions, EditorContributionRegistry.INSTANCE);\nfunction registerCommand(command) {\n    command.register();\n    return command;\n}\nexport const UndoCommand = registerCommand(new MultiCommand({\n    id: 'undo',\n    precondition: undefined,\n    kbOpts: {\n        weight: 0 /* EditorCore */,\n        primary: 2048 /* CtrlCmd */ | 56 /* KeyZ */\n    },\n    menuOpts: [{\n            menuId: MenuId.MenubarEditMenu,\n            group: '1_do',\n            title: nls.localize({ key: 'miUndo', comment: ['&& denotes a mnemonic'] }, \"&&Undo\"),\n            order: 1\n        }, {\n            menuId: MenuId.CommandPalette,\n            group: '',\n            title: nls.localize('undo', \"Undo\"),\n            order: 1\n        }]\n}));\nregisterCommand(new ProxyCommand(UndoCommand, { id: 'default:undo', precondition: undefined }));\nexport const RedoCommand = registerCommand(new MultiCommand({\n    id: 'redo',\n    precondition: undefined,\n    kbOpts: {\n        weight: 0 /* EditorCore */,\n        primary: 2048 /* CtrlCmd */ | 55 /* KeyY */,\n        secondary: [2048 /* CtrlCmd */ | 1024 /* Shift */ | 56 /* KeyZ */],\n        mac: { primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 56 /* KeyZ */ }\n    },\n    menuOpts: [{\n            menuId: MenuId.MenubarEditMenu,\n            group: '1_do',\n            title: nls.localize({ key: 'miRedo', comment: ['&& denotes a mnemonic'] }, \"&&Redo\"),\n            order: 2\n        }, {\n            menuId: MenuId.CommandPalette,\n            group: '',\n            title: nls.localize('redo', \"Redo\"),\n            order: 1\n        }]\n}));\nregisterCommand(new ProxyCommand(RedoCommand, { id: 'default:redo', precondition: undefined }));\nexport const SelectAllCommand = registerCommand(new MultiCommand({\n    id: 'editor.action.selectAll',\n    precondition: undefined,\n    kbOpts: {\n        weight: 0 /* EditorCore */,\n        kbExpr: null,\n        primary: 2048 /* CtrlCmd */ | 31 /* KeyA */\n    },\n    menuOpts: [{\n            menuId: MenuId.MenubarSelectionMenu,\n            group: '1_basic',\n            title: nls.localize({ key: 'miSelectAll', comment: ['&& denotes a mnemonic'] }, \"&&Select All\"),\n            order: 1\n        }, {\n            menuId: MenuId.CommandPalette,\n            group: '',\n            title: nls.localize('selectAll', \"Select All\"),\n            order: 1\n        }]\n}));\n"]},"metadata":{},"sourceType":"module"}