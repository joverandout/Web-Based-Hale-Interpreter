{"ast":null,"code":"/**\n * **!Do not construct directly!**\n *\n * **!Only static methods because it gets serialized!**\n *\n * This represents the \"canonical\" version for an extension identifier. Extension ids\n * have to be case-insensitive (due to the marketplace), but we must ensure case\n * preservation because the extension API is already public at this time.\n *\n * For example, given an extension with the publisher `\"Hello\"` and the name `\"World\"`,\n * its canonical extension identifier is `\"Hello.World\"`. This extension could be\n * referenced in some other extension's dependencies using the string `\"hello.world\"`.\n *\n * To make matters more complicated, an extension can optionally have an UUID. When two\n * extensions have the same UUID, they are considered equal even if their identifier is different.\n */\nexport class ExtensionIdentifier {\n  constructor(value) {\n    this.value = value;\n    this._lower = value.toLowerCase();\n  }\n  /**\n   * Gives the value by which to index (for equality).\n   */\n\n\n  static toKey(id) {\n    if (typeof id === 'string') {\n      return id.toLowerCase();\n    }\n\n    return id._lower;\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/platform/extensions/common/extensions.js"],"names":["ExtensionIdentifier","constructor","value","_lower","toLowerCase","toKey","id"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,mBAAN,CAA0B;AAC7BC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,SAAKA,KAAL,GAAaA,KAAb;AACA,SAAKC,MAAL,GAAcD,KAAK,CAACE,WAAN,EAAd;AACH;AACD;AACJ;AACA;;;AACgB,SAALC,KAAK,CAACC,EAAD,EAAK;AACb,QAAI,OAAOA,EAAP,KAAc,QAAlB,EAA4B;AACxB,aAAOA,EAAE,CAACF,WAAH,EAAP;AACH;;AACD,WAAOE,EAAE,CAACH,MAAV;AACH;;AAb4B","sourcesContent":["/**\n * **!Do not construct directly!**\n *\n * **!Only static methods because it gets serialized!**\n *\n * This represents the \"canonical\" version for an extension identifier. Extension ids\n * have to be case-insensitive (due to the marketplace), but we must ensure case\n * preservation because the extension API is already public at this time.\n *\n * For example, given an extension with the publisher `\"Hello\"` and the name `\"World\"`,\n * its canonical extension identifier is `\"Hello.World\"`. This extension could be\n * referenced in some other extension's dependencies using the string `\"hello.world\"`.\n *\n * To make matters more complicated, an extension can optionally have an UUID. When two\n * extensions have the same UUID, they are considered equal even if their identifier is different.\n */\nexport class ExtensionIdentifier {\n    constructor(value) {\n        this.value = value;\n        this._lower = value.toLowerCase();\n    }\n    /**\n     * Gives the value by which to index (for equality).\n     */\n    static toKey(id) {\n        if (typeof id === 'string') {\n            return id.toLowerCase();\n        }\n        return id._lower;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}