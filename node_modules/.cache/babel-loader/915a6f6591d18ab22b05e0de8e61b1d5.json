{"ast":null,"code":"/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n// src/basic-languages/rust/rust.ts\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"]],\n  autoClosingPairs: [{\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: '\"',\n    close: '\"',\n    notIn: [\"string\"]\n  }],\n  surroundingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*#pragma\\\\s+region\\\\b\"),\n      end: new RegExp(\"^\\\\s*#pragma\\\\s+endregion\\\\b\")\n    }\n  }\n};\nvar language = {\n  tokenPostfix: \".rust\",\n  defaultToken: \"invalid\",\n  keywords: [\"as\", \"async\", \"await\", \"box\", \"break\", \"const\", \"continue\", \"crate\", \"dyn\", \"else\", \"enum\", \"extern\", \"false\", \"fn\", \"for\", \"if\", \"impl\", \"in\", \"let\", \"loop\", \"match\", \"mod\", \"move\", \"mut\", \"pub\", \"ref\", \"return\", \"self\", \"static\", \"struct\", \"super\", \"trait\", \"true\", \"try\", \"type\", \"unsafe\", \"use\", \"where\", \"while\", \"catch\", \"default\", \"union\", \"static\", \"abstract\", \"alignof\", \"become\", \"do\", \"final\", \"macro\", \"offsetof\", \"override\", \"priv\", \"proc\", \"pure\", \"sizeof\", \"typeof\", \"unsized\", \"virtual\", \"yield\"],\n  typeKeywords: [\"Self\", \"m32\", \"m64\", \"m128\", \"f80\", \"f16\", \"f128\", \"int\", \"uint\", \"float\", \"char\", \"bool\", \"u8\", \"u16\", \"u32\", \"u64\", \"f32\", \"f64\", \"i8\", \"i16\", \"i32\", \"i64\", \"str\", \"Option\", \"Either\", \"c_float\", \"c_double\", \"c_void\", \"FILE\", \"fpos_t\", \"DIR\", \"dirent\", \"c_char\", \"c_schar\", \"c_uchar\", \"c_short\", \"c_ushort\", \"c_int\", \"c_uint\", \"c_long\", \"c_ulong\", \"size_t\", \"ptrdiff_t\", \"clock_t\", \"time_t\", \"c_longlong\", \"c_ulonglong\", \"intptr_t\", \"uintptr_t\", \"off_t\", \"dev_t\", \"ino_t\", \"pid_t\", \"mode_t\", \"ssize_t\"],\n  constants: [\"true\", \"false\", \"Some\", \"None\", \"Left\", \"Right\", \"Ok\", \"Err\"],\n  supportConstants: [\"EXIT_FAILURE\", \"EXIT_SUCCESS\", \"RAND_MAX\", \"EOF\", \"SEEK_SET\", \"SEEK_CUR\", \"SEEK_END\", \"_IOFBF\", \"_IONBF\", \"_IOLBF\", \"BUFSIZ\", \"FOPEN_MAX\", \"FILENAME_MAX\", \"L_tmpnam\", \"TMP_MAX\", \"O_RDONLY\", \"O_WRONLY\", \"O_RDWR\", \"O_APPEND\", \"O_CREAT\", \"O_EXCL\", \"O_TRUNC\", \"S_IFIFO\", \"S_IFCHR\", \"S_IFBLK\", \"S_IFDIR\", \"S_IFREG\", \"S_IFMT\", \"S_IEXEC\", \"S_IWRITE\", \"S_IREAD\", \"S_IRWXU\", \"S_IXUSR\", \"S_IWUSR\", \"S_IRUSR\", \"F_OK\", \"R_OK\", \"W_OK\", \"X_OK\", \"STDIN_FILENO\", \"STDOUT_FILENO\", \"STDERR_FILENO\"],\n  supportMacros: [\"format!\", \"print!\", \"println!\", \"panic!\", \"format_args!\", \"unreachable!\", \"write!\", \"writeln!\"],\n  operators: [\"!\", \"!=\", \"%\", \"%=\", \"&\", \"&=\", \"&&\", \"*\", \"*=\", \"+\", \"+=\", \"-\", \"-=\", \"->\", \".\", \"..\", \"...\", \"/\", \"/=\", \":\", \";\", \"<<\", \"<<=\", \"<\", \"<=\", \"=\", \"==\", \"=>\", \">\", \">=\", \">>\", \">>=\", \"@\", \"^\", \"^=\", \"|\", \"|=\", \"||\", \"_\", \"?\", \"#\"],\n  escapes: /\\\\([nrt0\\\"''\\\\]|x\\h{2}|u\\{\\h{1,6}\\})/,\n  delimiters: /[,]/,\n  symbols: /[\\#\\!\\%\\&\\*\\+\\-\\.\\/\\:\\;\\<\\=\\>\\@\\^\\|_\\?]+/,\n  intSuffixes: /[iu](8|16|32|64|128|size)/,\n  floatSuffixes: /f(32|64)/,\n  tokenizer: {\n    root: [[/r(#*)\"/, {\n      token: \"string.quote\",\n      bracket: \"@open\",\n      next: \"@stringraw.$1\"\n    }], [/[a-zA-Z][a-zA-Z0-9_]*!?|_[a-zA-Z0-9_]+/, {\n      cases: {\n        \"@typeKeywords\": \"keyword.type\",\n        \"@keywords\": \"keyword\",\n        \"@supportConstants\": \"keyword\",\n        \"@supportMacros\": \"keyword\",\n        \"@constants\": \"keyword\",\n        \"@default\": \"identifier\"\n      }\n    }], [/\\$/, \"identifier\"], [/'[a-zA-Z_][a-zA-Z0-9_]*(?=[^\\'])/, \"identifier\"], [/'(\\S|@escapes)'/, \"string.byteliteral\"], [/\"/, {\n      token: \"string.quote\",\n      bracket: \"@open\",\n      next: \"@string\"\n    }], {\n      include: \"@numbers\"\n    }, {\n      include: \"@whitespace\"\n    }, [/@delimiters/, {\n      cases: {\n        \"@keywords\": \"keyword\",\n        \"@default\": \"delimiter\"\n      }\n    }], [/[{}()\\[\\]<>]/, \"@brackets\"], [/@symbols/, {\n      cases: {\n        \"@operators\": \"operator\",\n        \"@default\": \"\"\n      }\n    }]],\n    whitespace: [[/[ \\t\\r\\n]+/, \"white\"], [/\\/\\*/, \"comment\", \"@comment\"], [/\\/\\/.*$/, \"comment\"]],\n    comment: [[/[^\\/*]+/, \"comment\"], [/\\/\\*/, \"comment\", \"@push\"], [\"\\\\*/\", \"comment\", \"@pop\"], [/[\\/*]/, \"comment\"]],\n    string: [[/[^\\\\\"]+/, \"string\"], [/@escapes/, \"string.escape\"], [/\\\\./, \"string.escape.invalid\"], [/\"/, {\n      token: \"string.quote\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    stringraw: [[/[^\"#]+/, {\n      token: \"string\"\n    }], [/\"(#*)/, {\n      cases: {\n        \"$1==$S2\": {\n          token: \"string.quote\",\n          bracket: \"@close\",\n          next: \"@pop\"\n        },\n        \"@default\": {\n          token: \"string\"\n        }\n      }\n    }], [/[\"#]/, {\n      token: \"string\"\n    }]],\n    numbers: [[/(0o[0-7_]+)(@intSuffixes)?/, {\n      token: \"number\"\n    }], [/(0b[0-1_]+)(@intSuffixes)?/, {\n      token: \"number\"\n    }], [/[\\d][\\d_]*(\\.[\\d][\\d_]*)?[eE][+-][\\d_]+(@floatSuffixes)?/, {\n      token: \"number\"\n    }], [/\\b(\\d\\.?[\\d_]*)(@floatSuffixes)?\\b/, {\n      token: \"number\"\n    }], [/(0x[\\da-fA-F]+)_?(@intSuffixes)?/, {\n      token: \"number\"\n    }], [/[\\d][\\d_]*(@intSuffixes?)?/, {\n      token: \"number\"\n    }]]\n  }\n};\nexport { conf, language };","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/basic-languages/rust/rust.js"],"names":["conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","folding","markers","start","RegExp","end","language","tokenPostfix","defaultToken","keywords","typeKeywords","constants","supportConstants","supportMacros","operators","escapes","delimiters","symbols","intSuffixes","floatSuffixes","tokenizer","root","token","bracket","next","cases","include","whitespace","comment","string","stringraw","numbers"],"mappings":"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","sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/rust/rust.ts\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"]\n  ],\n  autoClosingPairs: [\n    { open: \"[\", close: \"]\" },\n    { open: \"{\", close: \"}\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"', notIn: [\"string\"] }\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" }\n  ],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*#pragma\\\\s+region\\\\b\"),\n      end: new RegExp(\"^\\\\s*#pragma\\\\s+endregion\\\\b\")\n    }\n  }\n};\nvar language = {\n  tokenPostfix: \".rust\",\n  defaultToken: \"invalid\",\n  keywords: [\n    \"as\",\n    \"async\",\n    \"await\",\n    \"box\",\n    \"break\",\n    \"const\",\n    \"continue\",\n    \"crate\",\n    \"dyn\",\n    \"else\",\n    \"enum\",\n    \"extern\",\n    \"false\",\n    \"fn\",\n    \"for\",\n    \"if\",\n    \"impl\",\n    \"in\",\n    \"let\",\n    \"loop\",\n    \"match\",\n    \"mod\",\n    \"move\",\n    \"mut\",\n    \"pub\",\n    \"ref\",\n    \"return\",\n    \"self\",\n    \"static\",\n    \"struct\",\n    \"super\",\n    \"trait\",\n    \"true\",\n    \"try\",\n    \"type\",\n    \"unsafe\",\n    \"use\",\n    \"where\",\n    \"while\",\n    \"catch\",\n    \"default\",\n    \"union\",\n    \"static\",\n    \"abstract\",\n    \"alignof\",\n    \"become\",\n    \"do\",\n    \"final\",\n    \"macro\",\n    \"offsetof\",\n    \"override\",\n    \"priv\",\n    \"proc\",\n    \"pure\",\n    \"sizeof\",\n    \"typeof\",\n    \"unsized\",\n    \"virtual\",\n    \"yield\"\n  ],\n  typeKeywords: [\n    \"Self\",\n    \"m32\",\n    \"m64\",\n    \"m128\",\n    \"f80\",\n    \"f16\",\n    \"f128\",\n    \"int\",\n    \"uint\",\n    \"float\",\n    \"char\",\n    \"bool\",\n    \"u8\",\n    \"u16\",\n    \"u32\",\n    \"u64\",\n    \"f32\",\n    \"f64\",\n    \"i8\",\n    \"i16\",\n    \"i32\",\n    \"i64\",\n    \"str\",\n    \"Option\",\n    \"Either\",\n    \"c_float\",\n    \"c_double\",\n    \"c_void\",\n    \"FILE\",\n    \"fpos_t\",\n    \"DIR\",\n    \"dirent\",\n    \"c_char\",\n    \"c_schar\",\n    \"c_uchar\",\n    \"c_short\",\n    \"c_ushort\",\n    \"c_int\",\n    \"c_uint\",\n    \"c_long\",\n    \"c_ulong\",\n    \"size_t\",\n    \"ptrdiff_t\",\n    \"clock_t\",\n    \"time_t\",\n    \"c_longlong\",\n    \"c_ulonglong\",\n    \"intptr_t\",\n    \"uintptr_t\",\n    \"off_t\",\n    \"dev_t\",\n    \"ino_t\",\n    \"pid_t\",\n    \"mode_t\",\n    \"ssize_t\"\n  ],\n  constants: [\"true\", \"false\", \"Some\", \"None\", \"Left\", \"Right\", \"Ok\", \"Err\"],\n  supportConstants: [\n    \"EXIT_FAILURE\",\n    \"EXIT_SUCCESS\",\n    \"RAND_MAX\",\n    \"EOF\",\n    \"SEEK_SET\",\n    \"SEEK_CUR\",\n    \"SEEK_END\",\n    \"_IOFBF\",\n    \"_IONBF\",\n    \"_IOLBF\",\n    \"BUFSIZ\",\n    \"FOPEN_MAX\",\n    \"FILENAME_MAX\",\n    \"L_tmpnam\",\n    \"TMP_MAX\",\n    \"O_RDONLY\",\n    \"O_WRONLY\",\n    \"O_RDWR\",\n    \"O_APPEND\",\n    \"O_CREAT\",\n    \"O_EXCL\",\n    \"O_TRUNC\",\n    \"S_IFIFO\",\n    \"S_IFCHR\",\n    \"S_IFBLK\",\n    \"S_IFDIR\",\n    \"S_IFREG\",\n    \"S_IFMT\",\n    \"S_IEXEC\",\n    \"S_IWRITE\",\n    \"S_IREAD\",\n    \"S_IRWXU\",\n    \"S_IXUSR\",\n    \"S_IWUSR\",\n    \"S_IRUSR\",\n    \"F_OK\",\n    \"R_OK\",\n    \"W_OK\",\n    \"X_OK\",\n    \"STDIN_FILENO\",\n    \"STDOUT_FILENO\",\n    \"STDERR_FILENO\"\n  ],\n  supportMacros: [\n    \"format!\",\n    \"print!\",\n    \"println!\",\n    \"panic!\",\n    \"format_args!\",\n    \"unreachable!\",\n    \"write!\",\n    \"writeln!\"\n  ],\n  operators: [\n    \"!\",\n    \"!=\",\n    \"%\",\n    \"%=\",\n    \"&\",\n    \"&=\",\n    \"&&\",\n    \"*\",\n    \"*=\",\n    \"+\",\n    \"+=\",\n    \"-\",\n    \"-=\",\n    \"->\",\n    \".\",\n    \"..\",\n    \"...\",\n    \"/\",\n    \"/=\",\n    \":\",\n    \";\",\n    \"<<\",\n    \"<<=\",\n    \"<\",\n    \"<=\",\n    \"=\",\n    \"==\",\n    \"=>\",\n    \">\",\n    \">=\",\n    \">>\",\n    \">>=\",\n    \"@\",\n    \"^\",\n    \"^=\",\n    \"|\",\n    \"|=\",\n    \"||\",\n    \"_\",\n    \"?\",\n    \"#\"\n  ],\n  escapes: /\\\\([nrt0\\\"''\\\\]|x\\h{2}|u\\{\\h{1,6}\\})/,\n  delimiters: /[,]/,\n  symbols: /[\\#\\!\\%\\&\\*\\+\\-\\.\\/\\:\\;\\<\\=\\>\\@\\^\\|_\\?]+/,\n  intSuffixes: /[iu](8|16|32|64|128|size)/,\n  floatSuffixes: /f(32|64)/,\n  tokenizer: {\n    root: [\n      [/r(#*)\"/, { token: \"string.quote\", bracket: \"@open\", next: \"@stringraw.$1\" }],\n      [\n        /[a-zA-Z][a-zA-Z0-9_]*!?|_[a-zA-Z0-9_]+/,\n        {\n          cases: {\n            \"@typeKeywords\": \"keyword.type\",\n            \"@keywords\": \"keyword\",\n            \"@supportConstants\": \"keyword\",\n            \"@supportMacros\": \"keyword\",\n            \"@constants\": \"keyword\",\n            \"@default\": \"identifier\"\n          }\n        }\n      ],\n      [/\\$/, \"identifier\"],\n      [/'[a-zA-Z_][a-zA-Z0-9_]*(?=[^\\'])/, \"identifier\"],\n      [/'(\\S|@escapes)'/, \"string.byteliteral\"],\n      [/\"/, { token: \"string.quote\", bracket: \"@open\", next: \"@string\" }],\n      { include: \"@numbers\" },\n      { include: \"@whitespace\" },\n      [\n        /@delimiters/,\n        {\n          cases: {\n            \"@keywords\": \"keyword\",\n            \"@default\": \"delimiter\"\n          }\n        }\n      ],\n      [/[{}()\\[\\]<>]/, \"@brackets\"],\n      [/@symbols/, { cases: { \"@operators\": \"operator\", \"@default\": \"\" } }]\n    ],\n    whitespace: [\n      [/[ \\t\\r\\n]+/, \"white\"],\n      [/\\/\\*/, \"comment\", \"@comment\"],\n      [/\\/\\/.*$/, \"comment\"]\n    ],\n    comment: [\n      [/[^\\/*]+/, \"comment\"],\n      [/\\/\\*/, \"comment\", \"@push\"],\n      [\"\\\\*/\", \"comment\", \"@pop\"],\n      [/[\\/*]/, \"comment\"]\n    ],\n    string: [\n      [/[^\\\\\"]+/, \"string\"],\n      [/@escapes/, \"string.escape\"],\n      [/\\\\./, \"string.escape.invalid\"],\n      [/\"/, { token: \"string.quote\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    stringraw: [\n      [/[^\"#]+/, { token: \"string\" }],\n      [\n        /\"(#*)/,\n        {\n          cases: {\n            \"$1==$S2\": { token: \"string.quote\", bracket: \"@close\", next: \"@pop\" },\n            \"@default\": { token: \"string\" }\n          }\n        }\n      ],\n      [/[\"#]/, { token: \"string\" }]\n    ],\n    numbers: [\n      [/(0o[0-7_]+)(@intSuffixes)?/, { token: \"number\" }],\n      [/(0b[0-1_]+)(@intSuffixes)?/, { token: \"number\" }],\n      [/[\\d][\\d_]*(\\.[\\d][\\d_]*)?[eE][+-][\\d_]+(@floatSuffixes)?/, { token: \"number\" }],\n      [/\\b(\\d\\.?[\\d_]*)(@floatSuffixes)?\\b/, { token: \"number\" }],\n      [/(0x[\\da-fA-F]+)_?(@intSuffixes)?/, { token: \"number\" }],\n      [/[\\d][\\d_]*(@intSuffixes?)?/, { token: \"number\" }]\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"]},"metadata":{},"sourceType":"module"}