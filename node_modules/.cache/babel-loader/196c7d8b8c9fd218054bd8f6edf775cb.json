{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/*\n * This module only exports 'compile' which compiles a JSON language definition\n * into a typed and checked ILexer definition.\n */\nimport * as monarchCommon from './monarchCommon.js';\n/*\n * Type helpers\n *\n * Note: this is just for sanity checks on the JSON description which is\n * helpful for the programmer. No checks are done anymore once the lexer is\n * already 'compiled and checked'.\n *\n */\n\nfunction isArrayOf(elemType, obj) {\n  if (!obj) {\n    return false;\n  }\n\n  if (!Array.isArray(obj)) {\n    return false;\n  }\n\n  for (const el of obj) {\n    if (!elemType(el)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction bool(prop, defValue) {\n  if (typeof prop === 'boolean') {\n    return prop;\n  }\n\n  return defValue;\n}\n\nfunction string(prop, defValue) {\n  if (typeof prop === 'string') {\n    return prop;\n  }\n\n  return defValue;\n}\n\nfunction arrayToHash(array) {\n  const result = {};\n\n  for (const e of array) {\n    result[e] = true;\n  }\n\n  return result;\n}\n\nfunction createKeywordMatcher(arr, caseInsensitive = false) {\n  if (caseInsensitive) {\n    arr = arr.map(function (x) {\n      return x.toLowerCase();\n    });\n  }\n\n  const hash = arrayToHash(arr);\n\n  if (caseInsensitive) {\n    return function (word) {\n      return hash[word.toLowerCase()] !== undefined && hash.hasOwnProperty(word.toLowerCase());\n    };\n  } else {\n    return function (word) {\n      return hash[word] !== undefined && hash.hasOwnProperty(word);\n    };\n  }\n} // Lexer helpers\n\n/**\n * Compiles a regular expression string, adding the 'i' flag if 'ignoreCase' is set, and the 'u' flag if 'unicode' is set.\n * Also replaces @\\w+ or sequences with the content of the specified attribute\n * @\\w+ replacement can be avoided by escaping `@` signs with another `@` sign.\n * @example /@attr/ will be replaced with the value of lexer[attr]\n * @example /@@text/ will not be replaced and will become /@text/.\n */\n\n\nfunction compileRegExp(lexer, str) {\n  // @@ must be interpreted as a literal @, so we replace all occurences of @@ with a placeholder character\n  str = str.replace(/@@/g, `\\x01`);\n  let n = 0;\n  let hadExpansion;\n\n  do {\n    hadExpansion = false;\n    str = str.replace(/@(\\w+)/g, function (s, attr) {\n      hadExpansion = true;\n      let sub = '';\n\n      if (typeof lexer[attr] === 'string') {\n        sub = lexer[attr];\n      } else if (lexer[attr] && lexer[attr] instanceof RegExp) {\n        sub = lexer[attr].source;\n      } else {\n        if (lexer[attr] === undefined) {\n          throw monarchCommon.createError(lexer, 'language definition does not contain attribute \\'' + attr + '\\', used at: ' + str);\n        } else {\n          throw monarchCommon.createError(lexer, 'attribute reference \\'' + attr + '\\' must be a string, used at: ' + str);\n        }\n      }\n\n      return monarchCommon.empty(sub) ? '' : '(?:' + sub + ')';\n    });\n    n++;\n  } while (hadExpansion && n < 5); // handle escaped @@\n\n\n  str = str.replace(/\\x01/g, '@');\n  const flags = (lexer.ignoreCase ? 'i' : '') + (lexer.unicode ? 'u' : '');\n  return new RegExp(str, flags);\n}\n/**\n * Compiles guard functions for case matches.\n * This compiles 'cases' attributes into efficient match functions.\n *\n */\n\n\nfunction selectScrutinee(id, matches, state, num) {\n  if (num < 0) {\n    return id;\n  }\n\n  if (num < matches.length) {\n    return matches[num];\n  }\n\n  if (num >= 100) {\n    num = num - 100;\n    const parts = state.split('.');\n    parts.unshift(state);\n\n    if (num < parts.length) {\n      return parts[num];\n    }\n  }\n\n  return null;\n}\n\nfunction createGuard(lexer, ruleName, tkey, val) {\n  // get the scrutinee and pattern\n  let scrut = -1; // -1: $!, 0-99: $n, 100+n: $Sn\n\n  let oppat = tkey;\n  let matches = tkey.match(/^\\$(([sS]?)(\\d\\d?)|#)(.*)$/);\n\n  if (matches) {\n    if (matches[3]) {\n      // if digits\n      scrut = parseInt(matches[3]);\n\n      if (matches[2]) {\n        scrut = scrut + 100; // if [sS] present\n      }\n    }\n\n    oppat = matches[4];\n  } // get operator\n\n\n  let op = '~';\n  let pat = oppat;\n\n  if (!oppat || oppat.length === 0) {\n    op = '!=';\n    pat = '';\n  } else if (/^\\w*$/.test(pat)) {\n    // just a word\n    op = '==';\n  } else {\n    matches = oppat.match(/^(@|!@|~|!~|==|!=)(.*)$/);\n\n    if (matches) {\n      op = matches[1];\n      pat = matches[2];\n    }\n  } // set the tester function\n\n\n  let tester; // special case a regexp that matches just words\n\n  if ((op === '~' || op === '!~') && /^(\\w|\\|)*$/.test(pat)) {\n    const inWords = createKeywordMatcher(pat.split('|'), lexer.ignoreCase);\n\n    tester = function (s) {\n      return op === '~' ? inWords(s) : !inWords(s);\n    };\n  } else if (op === '@' || op === '!@') {\n    const words = lexer[pat];\n\n    if (!words) {\n      throw monarchCommon.createError(lexer, 'the @ match target \\'' + pat + '\\' is not defined, in rule: ' + ruleName);\n    }\n\n    if (!isArrayOf(function (elem) {\n      return typeof elem === 'string';\n    }, words)) {\n      throw monarchCommon.createError(lexer, 'the @ match target \\'' + pat + '\\' must be an array of strings, in rule: ' + ruleName);\n    }\n\n    const inWords = createKeywordMatcher(words, lexer.ignoreCase);\n\n    tester = function (s) {\n      return op === '@' ? inWords(s) : !inWords(s);\n    };\n  } else if (op === '~' || op === '!~') {\n    if (pat.indexOf('$') < 0) {\n      // precompile regular expression\n      const re = compileRegExp(lexer, '^' + pat + '$');\n\n      tester = function (s) {\n        return op === '~' ? re.test(s) : !re.test(s);\n      };\n    } else {\n      tester = function (s, id, matches, state) {\n        const re = compileRegExp(lexer, '^' + monarchCommon.substituteMatches(lexer, pat, id, matches, state) + '$');\n        return re.test(s);\n      };\n    }\n  } else {\n    // if (op==='==' || op==='!=') {\n    if (pat.indexOf('$') < 0) {\n      const patx = monarchCommon.fixCase(lexer, pat);\n\n      tester = function (s) {\n        return op === '==' ? s === patx : s !== patx;\n      };\n    } else {\n      const patx = monarchCommon.fixCase(lexer, pat);\n\n      tester = function (s, id, matches, state, eos) {\n        const patexp = monarchCommon.substituteMatches(lexer, patx, id, matches, state);\n        return op === '==' ? s === patexp : s !== patexp;\n      };\n    }\n  } // return the branch object\n\n\n  if (scrut === -1) {\n    return {\n      name: tkey,\n      value: val,\n      test: function (id, matches, state, eos) {\n        return tester(id, id, matches, state, eos);\n      }\n    };\n  } else {\n    return {\n      name: tkey,\n      value: val,\n      test: function (id, matches, state, eos) {\n        const scrutinee = selectScrutinee(id, matches, state, scrut);\n        return tester(!scrutinee ? '' : scrutinee, id, matches, state, eos);\n      }\n    };\n  }\n}\n/**\n * Compiles an action: i.e. optimize regular expressions and case matches\n * and do many sanity checks.\n *\n * This is called only during compilation but if the lexer definition\n * contains user functions as actions (which is usually not allowed), then this\n * may be called during lexing. It is important therefore to compile common cases efficiently\n */\n\n\nfunction compileAction(lexer, ruleName, action) {\n  if (!action) {\n    return {\n      token: ''\n    };\n  } else if (typeof action === 'string') {\n    return action; // { token: action };\n  } else if (action.token || action.token === '') {\n    if (typeof action.token !== 'string') {\n      throw monarchCommon.createError(lexer, 'a \\'token\\' attribute must be of type string, in rule: ' + ruleName);\n    } else {\n      // only copy specific typed fields (only happens once during compile Lexer)\n      const newAction = {\n        token: action.token\n      };\n\n      if (action.token.indexOf('$') >= 0) {\n        newAction.tokenSubst = true;\n      }\n\n      if (typeof action.bracket === 'string') {\n        if (action.bracket === '@open') {\n          newAction.bracket = 1\n          /* Open */\n          ;\n        } else if (action.bracket === '@close') {\n          newAction.bracket = -1\n          /* Close */\n          ;\n        } else {\n          throw monarchCommon.createError(lexer, 'a \\'bracket\\' attribute must be either \\'@open\\' or \\'@close\\', in rule: ' + ruleName);\n        }\n      }\n\n      if (action.next) {\n        if (typeof action.next !== 'string') {\n          throw monarchCommon.createError(lexer, 'the next state must be a string value in rule: ' + ruleName);\n        } else {\n          let next = action.next;\n\n          if (!/^(@pop|@push|@popall)$/.test(next)) {\n            if (next[0] === '@') {\n              next = next.substr(1); // peel off starting @ sign\n            }\n\n            if (next.indexOf('$') < 0) {\n              // no dollar substitution, we can check if the state exists\n              if (!monarchCommon.stateExists(lexer, monarchCommon.substituteMatches(lexer, next, '', [], ''))) {\n                throw monarchCommon.createError(lexer, 'the next state \\'' + action.next + '\\' is not defined in rule: ' + ruleName);\n              }\n            }\n          }\n\n          newAction.next = next;\n        }\n      }\n\n      if (typeof action.goBack === 'number') {\n        newAction.goBack = action.goBack;\n      }\n\n      if (typeof action.switchTo === 'string') {\n        newAction.switchTo = action.switchTo;\n      }\n\n      if (typeof action.log === 'string') {\n        newAction.log = action.log;\n      }\n\n      if (typeof action.nextEmbedded === 'string') {\n        newAction.nextEmbedded = action.nextEmbedded;\n        lexer.usesEmbedded = true;\n      }\n\n      return newAction;\n    }\n  } else if (Array.isArray(action)) {\n    const results = [];\n\n    for (let i = 0, len = action.length; i < len; i++) {\n      results[i] = compileAction(lexer, ruleName, action[i]);\n    }\n\n    return {\n      group: results\n    };\n  } else if (action.cases) {\n    // build an array of test cases\n    const cases = []; // for each case, push a test function and result value\n\n    for (let tkey in action.cases) {\n      if (action.cases.hasOwnProperty(tkey)) {\n        const val = compileAction(lexer, ruleName, action.cases[tkey]); // what kind of case\n\n        if (tkey === '@default' || tkey === '@' || tkey === '') {\n          cases.push({\n            test: undefined,\n            value: val,\n            name: tkey\n          });\n        } else if (tkey === '@eos') {\n          cases.push({\n            test: function (id, matches, state, eos) {\n              return eos;\n            },\n            value: val,\n            name: tkey\n          });\n        } else {\n          cases.push(createGuard(lexer, ruleName, tkey, val)); // call separate function to avoid local variable capture\n        }\n      }\n    } // create a matching function\n\n\n    const def = lexer.defaultToken;\n    return {\n      test: function (id, matches, state, eos) {\n        for (const _case of cases) {\n          const didmatch = !_case.test || _case.test(id, matches, state, eos);\n\n          if (didmatch) {\n            return _case.value;\n          }\n        }\n\n        return def;\n      }\n    };\n  } else {\n    throw monarchCommon.createError(lexer, 'an action must be a string, an object with a \\'token\\' or \\'cases\\' attribute, or an array of actions; in rule: ' + ruleName);\n  }\n}\n/**\n * Helper class for creating matching rules\n */\n\n\nclass Rule {\n  constructor(name) {\n    this.regex = new RegExp('');\n    this.action = {\n      token: ''\n    };\n    this.matchOnlyAtLineStart = false;\n    this.name = '';\n    this.name = name;\n  }\n\n  setRegex(lexer, re) {\n    let sregex;\n\n    if (typeof re === 'string') {\n      sregex = re;\n    } else if (re instanceof RegExp) {\n      sregex = re.source;\n    } else {\n      throw monarchCommon.createError(lexer, 'rules must start with a match string or regular expression: ' + this.name);\n    }\n\n    this.matchOnlyAtLineStart = sregex.length > 0 && sregex[0] === '^';\n    this.name = this.name + ': ' + sregex;\n    this.regex = compileRegExp(lexer, '^(?:' + (this.matchOnlyAtLineStart ? sregex.substr(1) : sregex) + ')');\n  }\n\n  setAction(lexer, act) {\n    this.action = compileAction(lexer, this.name, act);\n  }\n\n}\n/**\n * Compiles a json description function into json where all regular expressions,\n * case matches etc, are compiled and all include rules are expanded.\n * We also compile the bracket definitions, supply defaults, and do many sanity checks.\n * If the 'jsonStrict' parameter is 'false', we allow at certain locations\n * regular expression objects and functions that get called during lexing.\n * (Currently we have no samples that need this so perhaps we should always have\n * jsonStrict to true).\n */\n\n\nexport function compile(languageId, json) {\n  if (!json || typeof json !== 'object') {\n    throw new Error('Monarch: expecting a language definition object');\n  } // Create our lexer\n\n\n  const lexer = {};\n  lexer.languageId = languageId;\n  lexer.includeLF = bool(json.includeLF, false);\n  lexer.noThrow = false; // raise exceptions during compilation\n\n  lexer.maxStack = 100; // Set standard fields: be defensive about types\n\n  lexer.start = typeof json.start === 'string' ? json.start : null;\n  lexer.ignoreCase = bool(json.ignoreCase, false);\n  lexer.unicode = bool(json.unicode, false);\n  lexer.tokenPostfix = string(json.tokenPostfix, '.' + lexer.languageId);\n  lexer.defaultToken = string(json.defaultToken, 'source');\n  lexer.usesEmbedded = false; // becomes true if we find a nextEmbedded action\n  // For calling compileAction later on\n\n  const lexerMin = json;\n  lexerMin.languageId = languageId;\n  lexerMin.includeLF = lexer.includeLF;\n  lexerMin.ignoreCase = lexer.ignoreCase;\n  lexerMin.unicode = lexer.unicode;\n  lexerMin.noThrow = lexer.noThrow;\n  lexerMin.usesEmbedded = lexer.usesEmbedded;\n  lexerMin.stateNames = json.tokenizer;\n  lexerMin.defaultToken = lexer.defaultToken; // Compile an array of rules into newrules where RegExp objects are created.\n\n  function addRules(state, newrules, rules) {\n    for (const rule of rules) {\n      let include = rule.include;\n\n      if (include) {\n        if (typeof include !== 'string') {\n          throw monarchCommon.createError(lexer, 'an \\'include\\' attribute must be a string at: ' + state);\n        }\n\n        if (include[0] === '@') {\n          include = include.substr(1); // peel off starting @\n        }\n\n        if (!json.tokenizer[include]) {\n          throw monarchCommon.createError(lexer, 'include target \\'' + include + '\\' is not defined at: ' + state);\n        }\n\n        addRules(state + '.' + include, newrules, json.tokenizer[include]);\n      } else {\n        const newrule = new Rule(state); // Set up new rule attributes\n\n        if (Array.isArray(rule) && rule.length >= 1 && rule.length <= 3) {\n          newrule.setRegex(lexerMin, rule[0]);\n\n          if (rule.length >= 3) {\n            if (typeof rule[1] === 'string') {\n              newrule.setAction(lexerMin, {\n                token: rule[1],\n                next: rule[2]\n              });\n            } else if (typeof rule[1] === 'object') {\n              const rule1 = rule[1];\n              rule1.next = rule[2];\n              newrule.setAction(lexerMin, rule1);\n            } else {\n              throw monarchCommon.createError(lexer, 'a next state as the last element of a rule can only be given if the action is either an object or a string, at: ' + state);\n            }\n          } else {\n            newrule.setAction(lexerMin, rule[1]);\n          }\n        } else {\n          if (!rule.regex) {\n            throw monarchCommon.createError(lexer, 'a rule must either be an array, or an object with a \\'regex\\' or \\'include\\' field at: ' + state);\n          }\n\n          if (rule.name) {\n            if (typeof rule.name === 'string') {\n              newrule.name = rule.name;\n            }\n          }\n\n          if (rule.matchOnlyAtStart) {\n            newrule.matchOnlyAtLineStart = bool(rule.matchOnlyAtLineStart, false);\n          }\n\n          newrule.setRegex(lexerMin, rule.regex);\n          newrule.setAction(lexerMin, rule.action);\n        }\n\n        newrules.push(newrule);\n      }\n    }\n  } // compile the tokenizer rules\n\n\n  if (!json.tokenizer || typeof json.tokenizer !== 'object') {\n    throw monarchCommon.createError(lexer, 'a language definition must define the \\'tokenizer\\' attribute as an object');\n  }\n\n  lexer.tokenizer = [];\n\n  for (let key in json.tokenizer) {\n    if (json.tokenizer.hasOwnProperty(key)) {\n      if (!lexer.start) {\n        lexer.start = key;\n      }\n\n      const rules = json.tokenizer[key];\n      lexer.tokenizer[key] = new Array();\n      addRules('tokenizer.' + key, lexer.tokenizer[key], rules);\n    }\n  }\n\n  lexer.usesEmbedded = lexerMin.usesEmbedded; // can be set during compileAction\n  // Set simple brackets\n\n  if (json.brackets) {\n    if (!Array.isArray(json.brackets)) {\n      throw monarchCommon.createError(lexer, 'the \\'brackets\\' attribute must be defined as an array');\n    }\n  } else {\n    json.brackets = [{\n      open: '{',\n      close: '}',\n      token: 'delimiter.curly'\n    }, {\n      open: '[',\n      close: ']',\n      token: 'delimiter.square'\n    }, {\n      open: '(',\n      close: ')',\n      token: 'delimiter.parenthesis'\n    }, {\n      open: '<',\n      close: '>',\n      token: 'delimiter.angle'\n    }];\n  }\n\n  const brackets = [];\n\n  for (let el of json.brackets) {\n    let desc = el;\n\n    if (desc && Array.isArray(desc) && desc.length === 3) {\n      desc = {\n        token: desc[2],\n        open: desc[0],\n        close: desc[1]\n      };\n    }\n\n    if (desc.open === desc.close) {\n      throw monarchCommon.createError(lexer, 'open and close brackets in a \\'brackets\\' attribute must be different: ' + desc.open + '\\n hint: use the \\'bracket\\' attribute if matching on equal brackets is required.');\n    }\n\n    if (typeof desc.open === 'string' && typeof desc.token === 'string' && typeof desc.close === 'string') {\n      brackets.push({\n        token: desc.token + lexer.tokenPostfix,\n        open: monarchCommon.fixCase(lexer, desc.open),\n        close: monarchCommon.fixCase(lexer, desc.close)\n      });\n    } else {\n      throw monarchCommon.createError(lexer, 'every element in the \\'brackets\\' array must be a \\'{open,close,token}\\' object or array');\n    }\n  }\n\n  lexer.brackets = brackets; // Disable throw so the syntax highlighter goes, no matter what\n\n  lexer.noThrow = true;\n  return lexer;\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/standalone/common/monarch/monarchCompile.js"],"names":["monarchCommon","isArrayOf","elemType","obj","Array","isArray","el","bool","prop","defValue","string","arrayToHash","array","result","e","createKeywordMatcher","arr","caseInsensitive","map","x","toLowerCase","hash","word","undefined","hasOwnProperty","compileRegExp","lexer","str","replace","n","hadExpansion","s","attr","sub","RegExp","source","createError","empty","flags","ignoreCase","unicode","selectScrutinee","id","matches","state","num","length","parts","split","unshift","createGuard","ruleName","tkey","val","scrut","oppat","match","parseInt","op","pat","test","tester","inWords","words","elem","indexOf","re","substituteMatches","patx","fixCase","eos","patexp","name","value","scrutinee","compileAction","action","token","newAction","tokenSubst","bracket","next","substr","stateExists","goBack","switchTo","log","nextEmbedded","usesEmbedded","results","i","len","group","cases","push","def","defaultToken","_case","didmatch","Rule","constructor","regex","matchOnlyAtLineStart","setRegex","sregex","setAction","act","compile","languageId","json","Error","includeLF","noThrow","maxStack","start","tokenPostfix","lexerMin","stateNames","tokenizer","addRules","newrules","rules","rule","include","newrule","rule1","matchOnlyAtStart","key","brackets","open","close","desc"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/*\n * This module only exports 'compile' which compiles a JSON language definition\n * into a typed and checked ILexer definition.\n */\nimport * as monarchCommon from './monarchCommon.js';\n/*\n * Type helpers\n *\n * Note: this is just for sanity checks on the JSON description which is\n * helpful for the programmer. No checks are done anymore once the lexer is\n * already 'compiled and checked'.\n *\n */\nfunction isArrayOf(elemType, obj) {\n    if (!obj) {\n        return false;\n    }\n    if (!(Array.isArray(obj))) {\n        return false;\n    }\n    for (const el of obj) {\n        if (!(elemType(el))) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction bool(prop, defValue) {\n    if (typeof prop === 'boolean') {\n        return prop;\n    }\n    return defValue;\n}\nfunction string(prop, defValue) {\n    if (typeof (prop) === 'string') {\n        return prop;\n    }\n    return defValue;\n}\nfunction arrayToHash(array) {\n    const result = {};\n    for (const e of array) {\n        result[e] = true;\n    }\n    return result;\n}\nfunction createKeywordMatcher(arr, caseInsensitive = false) {\n    if (caseInsensitive) {\n        arr = arr.map(function (x) { return x.toLowerCase(); });\n    }\n    const hash = arrayToHash(arr);\n    if (caseInsensitive) {\n        return function (word) {\n            return hash[word.toLowerCase()] !== undefined && hash.hasOwnProperty(word.toLowerCase());\n        };\n    }\n    else {\n        return function (word) {\n            return hash[word] !== undefined && hash.hasOwnProperty(word);\n        };\n    }\n}\n// Lexer helpers\n/**\n * Compiles a regular expression string, adding the 'i' flag if 'ignoreCase' is set, and the 'u' flag if 'unicode' is set.\n * Also replaces @\\w+ or sequences with the content of the specified attribute\n * @\\w+ replacement can be avoided by escaping `@` signs with another `@` sign.\n * @example /@attr/ will be replaced with the value of lexer[attr]\n * @example /@@text/ will not be replaced and will become /@text/.\n */\nfunction compileRegExp(lexer, str) {\n    // @@ must be interpreted as a literal @, so we replace all occurences of @@ with a placeholder character\n    str = str.replace(/@@/g, `\\x01`);\n    let n = 0;\n    let hadExpansion;\n    do {\n        hadExpansion = false;\n        str = str.replace(/@(\\w+)/g, function (s, attr) {\n            hadExpansion = true;\n            let sub = '';\n            if (typeof (lexer[attr]) === 'string') {\n                sub = lexer[attr];\n            }\n            else if (lexer[attr] && lexer[attr] instanceof RegExp) {\n                sub = lexer[attr].source;\n            }\n            else {\n                if (lexer[attr] === undefined) {\n                    throw monarchCommon.createError(lexer, 'language definition does not contain attribute \\'' + attr + '\\', used at: ' + str);\n                }\n                else {\n                    throw monarchCommon.createError(lexer, 'attribute reference \\'' + attr + '\\' must be a string, used at: ' + str);\n                }\n            }\n            return (monarchCommon.empty(sub) ? '' : '(?:' + sub + ')');\n        });\n        n++;\n    } while (hadExpansion && n < 5);\n    // handle escaped @@\n    str = str.replace(/\\x01/g, '@');\n    const flags = (lexer.ignoreCase ? 'i' : '') + (lexer.unicode ? 'u' : '');\n    return new RegExp(str, flags);\n}\n/**\n * Compiles guard functions for case matches.\n * This compiles 'cases' attributes into efficient match functions.\n *\n */\nfunction selectScrutinee(id, matches, state, num) {\n    if (num < 0) {\n        return id;\n    }\n    if (num < matches.length) {\n        return matches[num];\n    }\n    if (num >= 100) {\n        num = num - 100;\n        const parts = state.split('.');\n        parts.unshift(state);\n        if (num < parts.length) {\n            return parts[num];\n        }\n    }\n    return null;\n}\nfunction createGuard(lexer, ruleName, tkey, val) {\n    // get the scrutinee and pattern\n    let scrut = -1; // -1: $!, 0-99: $n, 100+n: $Sn\n    let oppat = tkey;\n    let matches = tkey.match(/^\\$(([sS]?)(\\d\\d?)|#)(.*)$/);\n    if (matches) {\n        if (matches[3]) { // if digits\n            scrut = parseInt(matches[3]);\n            if (matches[2]) {\n                scrut = scrut + 100; // if [sS] present\n            }\n        }\n        oppat = matches[4];\n    }\n    // get operator\n    let op = '~';\n    let pat = oppat;\n    if (!oppat || oppat.length === 0) {\n        op = '!=';\n        pat = '';\n    }\n    else if (/^\\w*$/.test(pat)) { // just a word\n        op = '==';\n    }\n    else {\n        matches = oppat.match(/^(@|!@|~|!~|==|!=)(.*)$/);\n        if (matches) {\n            op = matches[1];\n            pat = matches[2];\n        }\n    }\n    // set the tester function\n    let tester;\n    // special case a regexp that matches just words\n    if ((op === '~' || op === '!~') && /^(\\w|\\|)*$/.test(pat)) {\n        const inWords = createKeywordMatcher(pat.split('|'), lexer.ignoreCase);\n        tester = function (s) { return (op === '~' ? inWords(s) : !inWords(s)); };\n    }\n    else if (op === '@' || op === '!@') {\n        const words = lexer[pat];\n        if (!words) {\n            throw monarchCommon.createError(lexer, 'the @ match target \\'' + pat + '\\' is not defined, in rule: ' + ruleName);\n        }\n        if (!(isArrayOf(function (elem) { return (typeof (elem) === 'string'); }, words))) {\n            throw monarchCommon.createError(lexer, 'the @ match target \\'' + pat + '\\' must be an array of strings, in rule: ' + ruleName);\n        }\n        const inWords = createKeywordMatcher(words, lexer.ignoreCase);\n        tester = function (s) { return (op === '@' ? inWords(s) : !inWords(s)); };\n    }\n    else if (op === '~' || op === '!~') {\n        if (pat.indexOf('$') < 0) {\n            // precompile regular expression\n            const re = compileRegExp(lexer, '^' + pat + '$');\n            tester = function (s) { return (op === '~' ? re.test(s) : !re.test(s)); };\n        }\n        else {\n            tester = function (s, id, matches, state) {\n                const re = compileRegExp(lexer, '^' + monarchCommon.substituteMatches(lexer, pat, id, matches, state) + '$');\n                return re.test(s);\n            };\n        }\n    }\n    else { // if (op==='==' || op==='!=') {\n        if (pat.indexOf('$') < 0) {\n            const patx = monarchCommon.fixCase(lexer, pat);\n            tester = function (s) { return (op === '==' ? s === patx : s !== patx); };\n        }\n        else {\n            const patx = monarchCommon.fixCase(lexer, pat);\n            tester = function (s, id, matches, state, eos) {\n                const patexp = monarchCommon.substituteMatches(lexer, patx, id, matches, state);\n                return (op === '==' ? s === patexp : s !== patexp);\n            };\n        }\n    }\n    // return the branch object\n    if (scrut === -1) {\n        return {\n            name: tkey, value: val, test: function (id, matches, state, eos) {\n                return tester(id, id, matches, state, eos);\n            }\n        };\n    }\n    else {\n        return {\n            name: tkey, value: val, test: function (id, matches, state, eos) {\n                const scrutinee = selectScrutinee(id, matches, state, scrut);\n                return tester(!scrutinee ? '' : scrutinee, id, matches, state, eos);\n            }\n        };\n    }\n}\n/**\n * Compiles an action: i.e. optimize regular expressions and case matches\n * and do many sanity checks.\n *\n * This is called only during compilation but if the lexer definition\n * contains user functions as actions (which is usually not allowed), then this\n * may be called during lexing. It is important therefore to compile common cases efficiently\n */\nfunction compileAction(lexer, ruleName, action) {\n    if (!action) {\n        return { token: '' };\n    }\n    else if (typeof (action) === 'string') {\n        return action; // { token: action };\n    }\n    else if (action.token || action.token === '') {\n        if (typeof (action.token) !== 'string') {\n            throw monarchCommon.createError(lexer, 'a \\'token\\' attribute must be of type string, in rule: ' + ruleName);\n        }\n        else {\n            // only copy specific typed fields (only happens once during compile Lexer)\n            const newAction = { token: action.token };\n            if (action.token.indexOf('$') >= 0) {\n                newAction.tokenSubst = true;\n            }\n            if (typeof (action.bracket) === 'string') {\n                if (action.bracket === '@open') {\n                    newAction.bracket = 1 /* Open */;\n                }\n                else if (action.bracket === '@close') {\n                    newAction.bracket = -1 /* Close */;\n                }\n                else {\n                    throw monarchCommon.createError(lexer, 'a \\'bracket\\' attribute must be either \\'@open\\' or \\'@close\\', in rule: ' + ruleName);\n                }\n            }\n            if (action.next) {\n                if (typeof (action.next) !== 'string') {\n                    throw monarchCommon.createError(lexer, 'the next state must be a string value in rule: ' + ruleName);\n                }\n                else {\n                    let next = action.next;\n                    if (!/^(@pop|@push|@popall)$/.test(next)) {\n                        if (next[0] === '@') {\n                            next = next.substr(1); // peel off starting @ sign\n                        }\n                        if (next.indexOf('$') < 0) { // no dollar substitution, we can check if the state exists\n                            if (!monarchCommon.stateExists(lexer, monarchCommon.substituteMatches(lexer, next, '', [], ''))) {\n                                throw monarchCommon.createError(lexer, 'the next state \\'' + action.next + '\\' is not defined in rule: ' + ruleName);\n                            }\n                        }\n                    }\n                    newAction.next = next;\n                }\n            }\n            if (typeof (action.goBack) === 'number') {\n                newAction.goBack = action.goBack;\n            }\n            if (typeof (action.switchTo) === 'string') {\n                newAction.switchTo = action.switchTo;\n            }\n            if (typeof (action.log) === 'string') {\n                newAction.log = action.log;\n            }\n            if (typeof (action.nextEmbedded) === 'string') {\n                newAction.nextEmbedded = action.nextEmbedded;\n                lexer.usesEmbedded = true;\n            }\n            return newAction;\n        }\n    }\n    else if (Array.isArray(action)) {\n        const results = [];\n        for (let i = 0, len = action.length; i < len; i++) {\n            results[i] = compileAction(lexer, ruleName, action[i]);\n        }\n        return { group: results };\n    }\n    else if (action.cases) {\n        // build an array of test cases\n        const cases = [];\n        // for each case, push a test function and result value\n        for (let tkey in action.cases) {\n            if (action.cases.hasOwnProperty(tkey)) {\n                const val = compileAction(lexer, ruleName, action.cases[tkey]);\n                // what kind of case\n                if (tkey === '@default' || tkey === '@' || tkey === '') {\n                    cases.push({ test: undefined, value: val, name: tkey });\n                }\n                else if (tkey === '@eos') {\n                    cases.push({ test: function (id, matches, state, eos) { return eos; }, value: val, name: tkey });\n                }\n                else {\n                    cases.push(createGuard(lexer, ruleName, tkey, val)); // call separate function to avoid local variable capture\n                }\n            }\n        }\n        // create a matching function\n        const def = lexer.defaultToken;\n        return {\n            test: function (id, matches, state, eos) {\n                for (const _case of cases) {\n                    const didmatch = (!_case.test || _case.test(id, matches, state, eos));\n                    if (didmatch) {\n                        return _case.value;\n                    }\n                }\n                return def;\n            }\n        };\n    }\n    else {\n        throw monarchCommon.createError(lexer, 'an action must be a string, an object with a \\'token\\' or \\'cases\\' attribute, or an array of actions; in rule: ' + ruleName);\n    }\n}\n/**\n * Helper class for creating matching rules\n */\nclass Rule {\n    constructor(name) {\n        this.regex = new RegExp('');\n        this.action = { token: '' };\n        this.matchOnlyAtLineStart = false;\n        this.name = '';\n        this.name = name;\n    }\n    setRegex(lexer, re) {\n        let sregex;\n        if (typeof (re) === 'string') {\n            sregex = re;\n        }\n        else if (re instanceof RegExp) {\n            sregex = re.source;\n        }\n        else {\n            throw monarchCommon.createError(lexer, 'rules must start with a match string or regular expression: ' + this.name);\n        }\n        this.matchOnlyAtLineStart = (sregex.length > 0 && sregex[0] === '^');\n        this.name = this.name + ': ' + sregex;\n        this.regex = compileRegExp(lexer, '^(?:' + (this.matchOnlyAtLineStart ? sregex.substr(1) : sregex) + ')');\n    }\n    setAction(lexer, act) {\n        this.action = compileAction(lexer, this.name, act);\n    }\n}\n/**\n * Compiles a json description function into json where all regular expressions,\n * case matches etc, are compiled and all include rules are expanded.\n * We also compile the bracket definitions, supply defaults, and do many sanity checks.\n * If the 'jsonStrict' parameter is 'false', we allow at certain locations\n * regular expression objects and functions that get called during lexing.\n * (Currently we have no samples that need this so perhaps we should always have\n * jsonStrict to true).\n */\nexport function compile(languageId, json) {\n    if (!json || typeof (json) !== 'object') {\n        throw new Error('Monarch: expecting a language definition object');\n    }\n    // Create our lexer\n    const lexer = {};\n    lexer.languageId = languageId;\n    lexer.includeLF = bool(json.includeLF, false);\n    lexer.noThrow = false; // raise exceptions during compilation\n    lexer.maxStack = 100;\n    // Set standard fields: be defensive about types\n    lexer.start = (typeof json.start === 'string' ? json.start : null);\n    lexer.ignoreCase = bool(json.ignoreCase, false);\n    lexer.unicode = bool(json.unicode, false);\n    lexer.tokenPostfix = string(json.tokenPostfix, '.' + lexer.languageId);\n    lexer.defaultToken = string(json.defaultToken, 'source');\n    lexer.usesEmbedded = false; // becomes true if we find a nextEmbedded action\n    // For calling compileAction later on\n    const lexerMin = json;\n    lexerMin.languageId = languageId;\n    lexerMin.includeLF = lexer.includeLF;\n    lexerMin.ignoreCase = lexer.ignoreCase;\n    lexerMin.unicode = lexer.unicode;\n    lexerMin.noThrow = lexer.noThrow;\n    lexerMin.usesEmbedded = lexer.usesEmbedded;\n    lexerMin.stateNames = json.tokenizer;\n    lexerMin.defaultToken = lexer.defaultToken;\n    // Compile an array of rules into newrules where RegExp objects are created.\n    function addRules(state, newrules, rules) {\n        for (const rule of rules) {\n            let include = rule.include;\n            if (include) {\n                if (typeof (include) !== 'string') {\n                    throw monarchCommon.createError(lexer, 'an \\'include\\' attribute must be a string at: ' + state);\n                }\n                if (include[0] === '@') {\n                    include = include.substr(1); // peel off starting @\n                }\n                if (!json.tokenizer[include]) {\n                    throw monarchCommon.createError(lexer, 'include target \\'' + include + '\\' is not defined at: ' + state);\n                }\n                addRules(state + '.' + include, newrules, json.tokenizer[include]);\n            }\n            else {\n                const newrule = new Rule(state);\n                // Set up new rule attributes\n                if (Array.isArray(rule) && rule.length >= 1 && rule.length <= 3) {\n                    newrule.setRegex(lexerMin, rule[0]);\n                    if (rule.length >= 3) {\n                        if (typeof (rule[1]) === 'string') {\n                            newrule.setAction(lexerMin, { token: rule[1], next: rule[2] });\n                        }\n                        else if (typeof (rule[1]) === 'object') {\n                            const rule1 = rule[1];\n                            rule1.next = rule[2];\n                            newrule.setAction(lexerMin, rule1);\n                        }\n                        else {\n                            throw monarchCommon.createError(lexer, 'a next state as the last element of a rule can only be given if the action is either an object or a string, at: ' + state);\n                        }\n                    }\n                    else {\n                        newrule.setAction(lexerMin, rule[1]);\n                    }\n                }\n                else {\n                    if (!rule.regex) {\n                        throw monarchCommon.createError(lexer, 'a rule must either be an array, or an object with a \\'regex\\' or \\'include\\' field at: ' + state);\n                    }\n                    if (rule.name) {\n                        if (typeof rule.name === 'string') {\n                            newrule.name = rule.name;\n                        }\n                    }\n                    if (rule.matchOnlyAtStart) {\n                        newrule.matchOnlyAtLineStart = bool(rule.matchOnlyAtLineStart, false);\n                    }\n                    newrule.setRegex(lexerMin, rule.regex);\n                    newrule.setAction(lexerMin, rule.action);\n                }\n                newrules.push(newrule);\n            }\n        }\n    }\n    // compile the tokenizer rules\n    if (!json.tokenizer || typeof (json.tokenizer) !== 'object') {\n        throw monarchCommon.createError(lexer, 'a language definition must define the \\'tokenizer\\' attribute as an object');\n    }\n    lexer.tokenizer = [];\n    for (let key in json.tokenizer) {\n        if (json.tokenizer.hasOwnProperty(key)) {\n            if (!lexer.start) {\n                lexer.start = key;\n            }\n            const rules = json.tokenizer[key];\n            lexer.tokenizer[key] = new Array();\n            addRules('tokenizer.' + key, lexer.tokenizer[key], rules);\n        }\n    }\n    lexer.usesEmbedded = lexerMin.usesEmbedded; // can be set during compileAction\n    // Set simple brackets\n    if (json.brackets) {\n        if (!(Array.isArray(json.brackets))) {\n            throw monarchCommon.createError(lexer, 'the \\'brackets\\' attribute must be defined as an array');\n        }\n    }\n    else {\n        json.brackets = [\n            { open: '{', close: '}', token: 'delimiter.curly' },\n            { open: '[', close: ']', token: 'delimiter.square' },\n            { open: '(', close: ')', token: 'delimiter.parenthesis' },\n            { open: '<', close: '>', token: 'delimiter.angle' }\n        ];\n    }\n    const brackets = [];\n    for (let el of json.brackets) {\n        let desc = el;\n        if (desc && Array.isArray(desc) && desc.length === 3) {\n            desc = { token: desc[2], open: desc[0], close: desc[1] };\n        }\n        if (desc.open === desc.close) {\n            throw monarchCommon.createError(lexer, 'open and close brackets in a \\'brackets\\' attribute must be different: ' + desc.open +\n                '\\n hint: use the \\'bracket\\' attribute if matching on equal brackets is required.');\n        }\n        if (typeof desc.open === 'string' && typeof desc.token === 'string' && typeof desc.close === 'string') {\n            brackets.push({\n                token: desc.token + lexer.tokenPostfix,\n                open: monarchCommon.fixCase(lexer, desc.open),\n                close: monarchCommon.fixCase(lexer, desc.close)\n            });\n        }\n        else {\n            throw monarchCommon.createError(lexer, 'every element in the \\'brackets\\' array must be a \\'{open,close,token}\\' object or array');\n        }\n    }\n    lexer.brackets = brackets;\n    // Disable throw so the syntax highlighter goes, no matter what\n    lexer.noThrow = true;\n    return lexer;\n}\n"]},"metadata":{},"sourceType":"module"}