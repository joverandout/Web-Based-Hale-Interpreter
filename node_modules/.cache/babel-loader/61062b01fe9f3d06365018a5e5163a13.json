{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { SingleCursorState } from './cursorCommon.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nexport class ColumnSelection {\n  static columnSelect(config, model, fromLineNumber, fromVisibleColumn, toLineNumber, toVisibleColumn) {\n    const lineCount = Math.abs(toLineNumber - fromLineNumber) + 1;\n    const reversed = fromLineNumber > toLineNumber;\n    const isRTL = fromVisibleColumn > toVisibleColumn;\n    const isLTR = fromVisibleColumn < toVisibleColumn;\n    const result = []; // console.log(`fromVisibleColumn: ${fromVisibleColumn}, toVisibleColumn: ${toVisibleColumn}`);\n\n    for (let i = 0; i < lineCount; i++) {\n      const lineNumber = fromLineNumber + (reversed ? -i : i);\n      const startColumn = config.columnFromVisibleColumn(model, lineNumber, fromVisibleColumn);\n      const endColumn = config.columnFromVisibleColumn(model, lineNumber, toVisibleColumn);\n      const visibleStartColumn = config.visibleColumnFromColumn(model, new Position(lineNumber, startColumn));\n      const visibleEndColumn = config.visibleColumnFromColumn(model, new Position(lineNumber, endColumn)); // console.log(`lineNumber: ${lineNumber}: visibleStartColumn: ${visibleStartColumn}, visibleEndColumn: ${visibleEndColumn}`);\n\n      if (isLTR) {\n        if (visibleStartColumn > toVisibleColumn) {\n          continue;\n        }\n\n        if (visibleEndColumn < fromVisibleColumn) {\n          continue;\n        }\n      }\n\n      if (isRTL) {\n        if (visibleEndColumn > fromVisibleColumn) {\n          continue;\n        }\n\n        if (visibleStartColumn < toVisibleColumn) {\n          continue;\n        }\n      }\n\n      result.push(new SingleCursorState(new Range(lineNumber, startColumn, lineNumber, startColumn), 0, new Position(lineNumber, endColumn), 0));\n    }\n\n    if (result.length === 0) {\n      // We are after all the lines, so add cursor at the end of each line\n      for (let i = 0; i < lineCount; i++) {\n        const lineNumber = fromLineNumber + (reversed ? -i : i);\n        const maxColumn = model.getLineMaxColumn(lineNumber);\n        result.push(new SingleCursorState(new Range(lineNumber, maxColumn, lineNumber, maxColumn), 0, new Position(lineNumber, maxColumn), 0));\n      }\n    }\n\n    return {\n      viewStates: result,\n      reversed: reversed,\n      fromLineNumber: fromLineNumber,\n      fromVisualColumn: fromVisibleColumn,\n      toLineNumber: toLineNumber,\n      toVisualColumn: toVisibleColumn\n    };\n  }\n\n  static columnSelectLeft(config, model, prevColumnSelectData) {\n    let toViewVisualColumn = prevColumnSelectData.toViewVisualColumn;\n\n    if (toViewVisualColumn > 0) {\n      toViewVisualColumn--;\n    }\n\n    return ColumnSelection.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, prevColumnSelectData.toViewLineNumber, toViewVisualColumn);\n  }\n\n  static columnSelectRight(config, model, prevColumnSelectData) {\n    let maxVisualViewColumn = 0;\n    const minViewLineNumber = Math.min(prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.toViewLineNumber);\n    const maxViewLineNumber = Math.max(prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.toViewLineNumber);\n\n    for (let lineNumber = minViewLineNumber; lineNumber <= maxViewLineNumber; lineNumber++) {\n      const lineMaxViewColumn = model.getLineMaxColumn(lineNumber);\n      const lineMaxVisualViewColumn = config.visibleColumnFromColumn(model, new Position(lineNumber, lineMaxViewColumn));\n      maxVisualViewColumn = Math.max(maxVisualViewColumn, lineMaxVisualViewColumn);\n    }\n\n    let toViewVisualColumn = prevColumnSelectData.toViewVisualColumn;\n\n    if (toViewVisualColumn < maxVisualViewColumn) {\n      toViewVisualColumn++;\n    }\n\n    return this.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, prevColumnSelectData.toViewLineNumber, toViewVisualColumn);\n  }\n\n  static columnSelectUp(config, model, prevColumnSelectData, isPaged) {\n    const linesCount = isPaged ? config.pageSize : 1;\n    const toViewLineNumber = Math.max(1, prevColumnSelectData.toViewLineNumber - linesCount);\n    return this.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, toViewLineNumber, prevColumnSelectData.toViewVisualColumn);\n  }\n\n  static columnSelectDown(config, model, prevColumnSelectData, isPaged) {\n    const linesCount = isPaged ? config.pageSize : 1;\n    const toViewLineNumber = Math.min(model.getLineCount(), prevColumnSelectData.toViewLineNumber + linesCount);\n    return this.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, toViewLineNumber, prevColumnSelectData.toViewVisualColumn);\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/common/cursor/cursorColumnSelection.js"],"names":["SingleCursorState","Position","Range","ColumnSelection","columnSelect","config","model","fromLineNumber","fromVisibleColumn","toLineNumber","toVisibleColumn","lineCount","Math","abs","reversed","isRTL","isLTR","result","i","lineNumber","startColumn","columnFromVisibleColumn","endColumn","visibleStartColumn","visibleColumnFromColumn","visibleEndColumn","push","length","maxColumn","getLineMaxColumn","viewStates","fromVisualColumn","toVisualColumn","columnSelectLeft","prevColumnSelectData","toViewVisualColumn","fromViewLineNumber","fromViewVisualColumn","toViewLineNumber","columnSelectRight","maxVisualViewColumn","minViewLineNumber","min","maxViewLineNumber","max","lineMaxViewColumn","lineMaxVisualViewColumn","columnSelectUp","isPaged","linesCount","pageSize","columnSelectDown","getLineCount"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,iBAAT,QAAkC,mBAAlC;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,OAAO,MAAMC,eAAN,CAAsB;AACN,SAAZC,YAAY,CAACC,MAAD,EAASC,KAAT,EAAgBC,cAAhB,EAAgCC,iBAAhC,EAAmDC,YAAnD,EAAiEC,eAAjE,EAAkF;AACjG,UAAMC,SAAS,GAAGC,IAAI,CAACC,GAAL,CAASJ,YAAY,GAAGF,cAAxB,IAA0C,CAA5D;AACA,UAAMO,QAAQ,GAAIP,cAAc,GAAGE,YAAnC;AACA,UAAMM,KAAK,GAAIP,iBAAiB,GAAGE,eAAnC;AACA,UAAMM,KAAK,GAAIR,iBAAiB,GAAGE,eAAnC;AACA,UAAMO,MAAM,GAAG,EAAf,CALiG,CAMjG;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,SAApB,EAA+BO,CAAC,EAAhC,EAAoC;AAChC,YAAMC,UAAU,GAAGZ,cAAc,IAAIO,QAAQ,GAAG,CAACI,CAAJ,GAAQA,CAApB,CAAjC;AACA,YAAME,WAAW,GAAGf,MAAM,CAACgB,uBAAP,CAA+Bf,KAA/B,EAAsCa,UAAtC,EAAkDX,iBAAlD,CAApB;AACA,YAAMc,SAAS,GAAGjB,MAAM,CAACgB,uBAAP,CAA+Bf,KAA/B,EAAsCa,UAAtC,EAAkDT,eAAlD,CAAlB;AACA,YAAMa,kBAAkB,GAAGlB,MAAM,CAACmB,uBAAP,CAA+BlB,KAA/B,EAAsC,IAAIL,QAAJ,CAAakB,UAAb,EAAyBC,WAAzB,CAAtC,CAA3B;AACA,YAAMK,gBAAgB,GAAGpB,MAAM,CAACmB,uBAAP,CAA+BlB,KAA/B,EAAsC,IAAIL,QAAJ,CAAakB,UAAb,EAAyBG,SAAzB,CAAtC,CAAzB,CALgC,CAMhC;;AACA,UAAIN,KAAJ,EAAW;AACP,YAAIO,kBAAkB,GAAGb,eAAzB,EAA0C;AACtC;AACH;;AACD,YAAIe,gBAAgB,GAAGjB,iBAAvB,EAA0C;AACtC;AACH;AACJ;;AACD,UAAIO,KAAJ,EAAW;AACP,YAAIU,gBAAgB,GAAGjB,iBAAvB,EAA0C;AACtC;AACH;;AACD,YAAIe,kBAAkB,GAAGb,eAAzB,EAA0C;AACtC;AACH;AACJ;;AACDO,MAAAA,MAAM,CAACS,IAAP,CAAY,IAAI1B,iBAAJ,CAAsB,IAAIE,KAAJ,CAAUiB,UAAV,EAAsBC,WAAtB,EAAmCD,UAAnC,EAA+CC,WAA/C,CAAtB,EAAmF,CAAnF,EAAsF,IAAInB,QAAJ,CAAakB,UAAb,EAAyBG,SAAzB,CAAtF,EAA2H,CAA3H,CAAZ;AACH;;AACD,QAAIL,MAAM,CAACU,MAAP,KAAkB,CAAtB,EAAyB;AACrB;AACA,WAAK,IAAIT,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,SAApB,EAA+BO,CAAC,EAAhC,EAAoC;AAChC,cAAMC,UAAU,GAAGZ,cAAc,IAAIO,QAAQ,GAAG,CAACI,CAAJ,GAAQA,CAApB,CAAjC;AACA,cAAMU,SAAS,GAAGtB,KAAK,CAACuB,gBAAN,CAAuBV,UAAvB,CAAlB;AACAF,QAAAA,MAAM,CAACS,IAAP,CAAY,IAAI1B,iBAAJ,CAAsB,IAAIE,KAAJ,CAAUiB,UAAV,EAAsBS,SAAtB,EAAiCT,UAAjC,EAA6CS,SAA7C,CAAtB,EAA+E,CAA/E,EAAkF,IAAI3B,QAAJ,CAAakB,UAAb,EAAyBS,SAAzB,CAAlF,EAAuH,CAAvH,CAAZ;AACH;AACJ;;AACD,WAAO;AACHE,MAAAA,UAAU,EAAEb,MADT;AAEHH,MAAAA,QAAQ,EAAEA,QAFP;AAGHP,MAAAA,cAAc,EAAEA,cAHb;AAIHwB,MAAAA,gBAAgB,EAAEvB,iBAJf;AAKHC,MAAAA,YAAY,EAAEA,YALX;AAMHuB,MAAAA,cAAc,EAAEtB;AANb,KAAP;AAQH;;AACsB,SAAhBuB,gBAAgB,CAAC5B,MAAD,EAASC,KAAT,EAAgB4B,oBAAhB,EAAsC;AACzD,QAAIC,kBAAkB,GAAGD,oBAAoB,CAACC,kBAA9C;;AACA,QAAIA,kBAAkB,GAAG,CAAzB,EAA4B;AACxBA,MAAAA,kBAAkB;AACrB;;AACD,WAAOhC,eAAe,CAACC,YAAhB,CAA6BC,MAA7B,EAAqCC,KAArC,EAA4C4B,oBAAoB,CAACE,kBAAjE,EAAqFF,oBAAoB,CAACG,oBAA1G,EAAgIH,oBAAoB,CAACI,gBAArJ,EAAuKH,kBAAvK,CAAP;AACH;;AACuB,SAAjBI,iBAAiB,CAAClC,MAAD,EAASC,KAAT,EAAgB4B,oBAAhB,EAAsC;AAC1D,QAAIM,mBAAmB,GAAG,CAA1B;AACA,UAAMC,iBAAiB,GAAG7B,IAAI,CAAC8B,GAAL,CAASR,oBAAoB,CAACE,kBAA9B,EAAkDF,oBAAoB,CAACI,gBAAvE,CAA1B;AACA,UAAMK,iBAAiB,GAAG/B,IAAI,CAACgC,GAAL,CAASV,oBAAoB,CAACE,kBAA9B,EAAkDF,oBAAoB,CAACI,gBAAvE,CAA1B;;AACA,SAAK,IAAInB,UAAU,GAAGsB,iBAAtB,EAAyCtB,UAAU,IAAIwB,iBAAvD,EAA0ExB,UAAU,EAApF,EAAwF;AACpF,YAAM0B,iBAAiB,GAAGvC,KAAK,CAACuB,gBAAN,CAAuBV,UAAvB,CAA1B;AACA,YAAM2B,uBAAuB,GAAGzC,MAAM,CAACmB,uBAAP,CAA+BlB,KAA/B,EAAsC,IAAIL,QAAJ,CAAakB,UAAb,EAAyB0B,iBAAzB,CAAtC,CAAhC;AACAL,MAAAA,mBAAmB,GAAG5B,IAAI,CAACgC,GAAL,CAASJ,mBAAT,EAA8BM,uBAA9B,CAAtB;AACH;;AACD,QAAIX,kBAAkB,GAAGD,oBAAoB,CAACC,kBAA9C;;AACA,QAAIA,kBAAkB,GAAGK,mBAAzB,EAA8C;AAC1CL,MAAAA,kBAAkB;AACrB;;AACD,WAAO,KAAK/B,YAAL,CAAkBC,MAAlB,EAA0BC,KAA1B,EAAiC4B,oBAAoB,CAACE,kBAAtD,EAA0EF,oBAAoB,CAACG,oBAA/F,EAAqHH,oBAAoB,CAACI,gBAA1I,EAA4JH,kBAA5J,CAAP;AACH;;AACoB,SAAdY,cAAc,CAAC1C,MAAD,EAASC,KAAT,EAAgB4B,oBAAhB,EAAsCc,OAAtC,EAA+C;AAChE,UAAMC,UAAU,GAAGD,OAAO,GAAG3C,MAAM,CAAC6C,QAAV,GAAqB,CAA/C;AACA,UAAMZ,gBAAgB,GAAG1B,IAAI,CAACgC,GAAL,CAAS,CAAT,EAAYV,oBAAoB,CAACI,gBAArB,GAAwCW,UAApD,CAAzB;AACA,WAAO,KAAK7C,YAAL,CAAkBC,MAAlB,EAA0BC,KAA1B,EAAiC4B,oBAAoB,CAACE,kBAAtD,EAA0EF,oBAAoB,CAACG,oBAA/F,EAAqHC,gBAArH,EAAuIJ,oBAAoB,CAACC,kBAA5J,CAAP;AACH;;AACsB,SAAhBgB,gBAAgB,CAAC9C,MAAD,EAASC,KAAT,EAAgB4B,oBAAhB,EAAsCc,OAAtC,EAA+C;AAClE,UAAMC,UAAU,GAAGD,OAAO,GAAG3C,MAAM,CAAC6C,QAAV,GAAqB,CAA/C;AACA,UAAMZ,gBAAgB,GAAG1B,IAAI,CAAC8B,GAAL,CAASpC,KAAK,CAAC8C,YAAN,EAAT,EAA+BlB,oBAAoB,CAACI,gBAArB,GAAwCW,UAAvE,CAAzB;AACA,WAAO,KAAK7C,YAAL,CAAkBC,MAAlB,EAA0BC,KAA1B,EAAiC4B,oBAAoB,CAACE,kBAAtD,EAA0EF,oBAAoB,CAACG,oBAA/F,EAAqHC,gBAArH,EAAuIJ,oBAAoB,CAACC,kBAA5J,CAAP;AACH;;AAjFwB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { SingleCursorState } from './cursorCommon.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nexport class ColumnSelection {\n    static columnSelect(config, model, fromLineNumber, fromVisibleColumn, toLineNumber, toVisibleColumn) {\n        const lineCount = Math.abs(toLineNumber - fromLineNumber) + 1;\n        const reversed = (fromLineNumber > toLineNumber);\n        const isRTL = (fromVisibleColumn > toVisibleColumn);\n        const isLTR = (fromVisibleColumn < toVisibleColumn);\n        const result = [];\n        // console.log(`fromVisibleColumn: ${fromVisibleColumn}, toVisibleColumn: ${toVisibleColumn}`);\n        for (let i = 0; i < lineCount; i++) {\n            const lineNumber = fromLineNumber + (reversed ? -i : i);\n            const startColumn = config.columnFromVisibleColumn(model, lineNumber, fromVisibleColumn);\n            const endColumn = config.columnFromVisibleColumn(model, lineNumber, toVisibleColumn);\n            const visibleStartColumn = config.visibleColumnFromColumn(model, new Position(lineNumber, startColumn));\n            const visibleEndColumn = config.visibleColumnFromColumn(model, new Position(lineNumber, endColumn));\n            // console.log(`lineNumber: ${lineNumber}: visibleStartColumn: ${visibleStartColumn}, visibleEndColumn: ${visibleEndColumn}`);\n            if (isLTR) {\n                if (visibleStartColumn > toVisibleColumn) {\n                    continue;\n                }\n                if (visibleEndColumn < fromVisibleColumn) {\n                    continue;\n                }\n            }\n            if (isRTL) {\n                if (visibleEndColumn > fromVisibleColumn) {\n                    continue;\n                }\n                if (visibleStartColumn < toVisibleColumn) {\n                    continue;\n                }\n            }\n            result.push(new SingleCursorState(new Range(lineNumber, startColumn, lineNumber, startColumn), 0, new Position(lineNumber, endColumn), 0));\n        }\n        if (result.length === 0) {\n            // We are after all the lines, so add cursor at the end of each line\n            for (let i = 0; i < lineCount; i++) {\n                const lineNumber = fromLineNumber + (reversed ? -i : i);\n                const maxColumn = model.getLineMaxColumn(lineNumber);\n                result.push(new SingleCursorState(new Range(lineNumber, maxColumn, lineNumber, maxColumn), 0, new Position(lineNumber, maxColumn), 0));\n            }\n        }\n        return {\n            viewStates: result,\n            reversed: reversed,\n            fromLineNumber: fromLineNumber,\n            fromVisualColumn: fromVisibleColumn,\n            toLineNumber: toLineNumber,\n            toVisualColumn: toVisibleColumn\n        };\n    }\n    static columnSelectLeft(config, model, prevColumnSelectData) {\n        let toViewVisualColumn = prevColumnSelectData.toViewVisualColumn;\n        if (toViewVisualColumn > 0) {\n            toViewVisualColumn--;\n        }\n        return ColumnSelection.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, prevColumnSelectData.toViewLineNumber, toViewVisualColumn);\n    }\n    static columnSelectRight(config, model, prevColumnSelectData) {\n        let maxVisualViewColumn = 0;\n        const minViewLineNumber = Math.min(prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.toViewLineNumber);\n        const maxViewLineNumber = Math.max(prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.toViewLineNumber);\n        for (let lineNumber = minViewLineNumber; lineNumber <= maxViewLineNumber; lineNumber++) {\n            const lineMaxViewColumn = model.getLineMaxColumn(lineNumber);\n            const lineMaxVisualViewColumn = config.visibleColumnFromColumn(model, new Position(lineNumber, lineMaxViewColumn));\n            maxVisualViewColumn = Math.max(maxVisualViewColumn, lineMaxVisualViewColumn);\n        }\n        let toViewVisualColumn = prevColumnSelectData.toViewVisualColumn;\n        if (toViewVisualColumn < maxVisualViewColumn) {\n            toViewVisualColumn++;\n        }\n        return this.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, prevColumnSelectData.toViewLineNumber, toViewVisualColumn);\n    }\n    static columnSelectUp(config, model, prevColumnSelectData, isPaged) {\n        const linesCount = isPaged ? config.pageSize : 1;\n        const toViewLineNumber = Math.max(1, prevColumnSelectData.toViewLineNumber - linesCount);\n        return this.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, toViewLineNumber, prevColumnSelectData.toViewVisualColumn);\n    }\n    static columnSelectDown(config, model, prevColumnSelectData, isPaged) {\n        const linesCount = isPaged ? config.pageSize : 1;\n        const toViewLineNumber = Math.min(model.getLineCount(), prevColumnSelectData.toViewLineNumber + linesCount);\n        return this.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, toViewLineNumber, prevColumnSelectData.toViewVisualColumn);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}