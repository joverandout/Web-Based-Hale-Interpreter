{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nimport { PauseableEmitter } from '../../../base/common/event.js';\nimport { Iterable } from '../../../base/common/iterator.js';\nimport { DisposableStore, MutableDisposable } from '../../../base/common/lifecycle.js';\nimport { TernarySearchTree } from '../../../base/common/map.js';\nimport { localize } from '../../../nls.js';\nimport { CommandsRegistry } from '../../commands/common/commands.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { IContextKeyService, RawContextKey, SET_CONTEXT_COMMAND_ID } from '../common/contextkey.js';\nconst KEYBINDING_CONTEXT_ATTR = 'data-keybinding-context';\nexport class Context {\n  constructor(id, parent) {\n    this._id = id;\n    this._parent = parent;\n    this._value = Object.create(null);\n    this._value['_contextId'] = id;\n  }\n\n  setValue(key, value) {\n    // console.log('SET ' + key + ' = ' + value + ' ON ' + this._id);\n    if (this._value[key] !== value) {\n      this._value[key] = value;\n      return true;\n    }\n\n    return false;\n  }\n\n  removeValue(key) {\n    // console.log('REMOVE ' + key + ' FROM ' + this._id);\n    if (key in this._value) {\n      delete this._value[key];\n      return true;\n    }\n\n    return false;\n  }\n\n  getValue(key) {\n    const ret = this._value[key];\n\n    if (typeof ret === 'undefined' && this._parent) {\n      return this._parent.getValue(key);\n    }\n\n    return ret;\n  }\n\n}\n\nclass NullContext extends Context {\n  constructor() {\n    super(-1, null);\n  }\n\n  setValue(key, value) {\n    return false;\n  }\n\n  removeValue(key) {\n    return false;\n  }\n\n  getValue(key) {\n    return undefined;\n  }\n\n}\n\nNullContext.INSTANCE = new NullContext();\n\nclass ConfigAwareContextValuesContainer extends Context {\n  constructor(id, _configurationService, emitter) {\n    super(id, null);\n    this._configurationService = _configurationService;\n    this._values = TernarySearchTree.forConfigKeys();\n    this._listener = this._configurationService.onDidChangeConfiguration(event => {\n      if (event.source === 6\n      /* DEFAULT */\n      ) {\n        // new setting, reset everything\n        const allKeys = Array.from(Iterable.map(this._values, ([k]) => k));\n\n        this._values.clear();\n\n        emitter.fire(new ArrayContextKeyChangeEvent(allKeys));\n      } else {\n        const changedKeys = [];\n\n        for (const configKey of event.affectedKeys) {\n          const contextKey = `config.${configKey}`;\n\n          const cachedItems = this._values.findSuperstr(contextKey);\n\n          if (cachedItems !== undefined) {\n            changedKeys.push(...Iterable.map(cachedItems, ([key]) => key));\n\n            this._values.deleteSuperstr(contextKey);\n          }\n\n          if (this._values.has(contextKey)) {\n            changedKeys.push(contextKey);\n\n            this._values.delete(contextKey);\n          }\n        }\n\n        emitter.fire(new ArrayContextKeyChangeEvent(changedKeys));\n      }\n    });\n  }\n\n  dispose() {\n    this._listener.dispose();\n  }\n\n  getValue(key) {\n    if (key.indexOf(ConfigAwareContextValuesContainer._keyPrefix) !== 0) {\n      return super.getValue(key);\n    }\n\n    if (this._values.has(key)) {\n      return this._values.get(key);\n    }\n\n    const configKey = key.substr(ConfigAwareContextValuesContainer._keyPrefix.length);\n\n    const configValue = this._configurationService.getValue(configKey);\n\n    let value = undefined;\n\n    switch (typeof configValue) {\n      case 'number':\n      case 'boolean':\n      case 'string':\n        value = configValue;\n        break;\n\n      default:\n        if (Array.isArray(configValue)) {\n          value = JSON.stringify(configValue);\n        } else {\n          value = configValue;\n        }\n\n    }\n\n    this._values.set(key, value);\n\n    return value;\n  }\n\n  setValue(key, value) {\n    return super.setValue(key, value);\n  }\n\n  removeValue(key) {\n    return super.removeValue(key);\n  }\n\n}\n\nConfigAwareContextValuesContainer._keyPrefix = 'config.';\n\nclass ContextKey {\n  constructor(service, key, defaultValue) {\n    this._service = service;\n    this._key = key;\n    this._defaultValue = defaultValue;\n    this.reset();\n  }\n\n  set(value) {\n    this._service.setContext(this._key, value);\n  }\n\n  reset() {\n    if (typeof this._defaultValue === 'undefined') {\n      this._service.removeContext(this._key);\n    } else {\n      this._service.setContext(this._key, this._defaultValue);\n    }\n  }\n\n  get() {\n    return this._service.getContextKeyValue(this._key);\n  }\n\n}\n\nclass SimpleContextKeyChangeEvent {\n  constructor(key) {\n    this.key = key;\n  }\n\n  affectsSome(keys) {\n    return keys.has(this.key);\n  }\n\n}\n\nclass ArrayContextKeyChangeEvent {\n  constructor(keys) {\n    this.keys = keys;\n  }\n\n  affectsSome(keys) {\n    for (const key of this.keys) {\n      if (keys.has(key)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n}\n\nclass CompositeContextKeyChangeEvent {\n  constructor(events) {\n    this.events = events;\n  }\n\n  affectsSome(keys) {\n    for (const e of this.events) {\n      if (e.affectsSome(keys)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n}\n\nexport class AbstractContextKeyService {\n  constructor(myContextId) {\n    this._onDidChangeContext = new PauseableEmitter({\n      merge: input => new CompositeContextKeyChangeEvent(input)\n    });\n    this.onDidChangeContext = this._onDidChangeContext.event;\n    this._isDisposed = false;\n    this._myContextId = myContextId;\n  }\n\n  createKey(key, defaultValue) {\n    if (this._isDisposed) {\n      throw new Error(`AbstractContextKeyService has been disposed`);\n    }\n\n    return new ContextKey(this, key, defaultValue);\n  }\n\n  bufferChangeEvents(callback) {\n    this._onDidChangeContext.pause();\n\n    try {\n      callback();\n    } finally {\n      this._onDidChangeContext.resume();\n    }\n  }\n\n  createScoped(domNode) {\n    if (this._isDisposed) {\n      throw new Error(`AbstractContextKeyService has been disposed`);\n    }\n\n    return new ScopedContextKeyService(this, domNode);\n  }\n\n  contextMatchesRules(rules) {\n    if (this._isDisposed) {\n      throw new Error(`AbstractContextKeyService has been disposed`);\n    }\n\n    const context = this.getContextValuesContainer(this._myContextId);\n    const result = rules ? rules.evaluate(context) : true; // console.group(rules.serialize() + ' -> ' + result);\n    // rules.keys().forEach(key => { console.log(key, ctx[key]); });\n    // console.groupEnd();\n\n    return result;\n  }\n\n  getContextKeyValue(key) {\n    if (this._isDisposed) {\n      return undefined;\n    }\n\n    return this.getContextValuesContainer(this._myContextId).getValue(key);\n  }\n\n  setContext(key, value) {\n    if (this._isDisposed) {\n      return;\n    }\n\n    const myContext = this.getContextValuesContainer(this._myContextId);\n\n    if (!myContext) {\n      return;\n    }\n\n    if (myContext.setValue(key, value)) {\n      this._onDidChangeContext.fire(new SimpleContextKeyChangeEvent(key));\n    }\n  }\n\n  removeContext(key) {\n    if (this._isDisposed) {\n      return;\n    }\n\n    if (this.getContextValuesContainer(this._myContextId).removeValue(key)) {\n      this._onDidChangeContext.fire(new SimpleContextKeyChangeEvent(key));\n    }\n  }\n\n  getContext(target) {\n    if (this._isDisposed) {\n      return NullContext.INSTANCE;\n    }\n\n    return this.getContextValuesContainer(findContextAttr(target));\n  }\n\n}\nlet ContextKeyService = class ContextKeyService extends AbstractContextKeyService {\n  constructor(configurationService) {\n    super(0);\n    this._contexts = new Map();\n    this._toDispose = new DisposableStore();\n    this._lastContextId = 0;\n    const myContext = new ConfigAwareContextValuesContainer(this._myContextId, configurationService, this._onDidChangeContext);\n\n    this._contexts.set(this._myContextId, myContext);\n\n    this._toDispose.add(myContext); // Uncomment this to see the contexts continuously logged\n    // let lastLoggedValue: string | null = null;\n    // setInterval(() => {\n    // \tlet values = Object.keys(this._contexts).map((key) => this._contexts[key]);\n    // \tlet logValue = values.map(v => JSON.stringify(v._value, null, '\\t')).join('\\n');\n    // \tif (lastLoggedValue !== logValue) {\n    // \t\tlastLoggedValue = logValue;\n    // \t\tconsole.log(lastLoggedValue);\n    // \t}\n    // }, 2000);\n\n  }\n\n  dispose() {\n    this._onDidChangeContext.dispose();\n\n    this._isDisposed = true;\n\n    this._toDispose.dispose();\n  }\n\n  getContextValuesContainer(contextId) {\n    if (this._isDisposed) {\n      return NullContext.INSTANCE;\n    }\n\n    return this._contexts.get(contextId) || NullContext.INSTANCE;\n  }\n\n  createChildContext(parentContextId = this._myContextId) {\n    if (this._isDisposed) {\n      throw new Error(`ContextKeyService has been disposed`);\n    }\n\n    let id = ++this._lastContextId;\n\n    this._contexts.set(id, new Context(id, this.getContextValuesContainer(parentContextId)));\n\n    return id;\n  }\n\n  disposeContext(contextId) {\n    if (!this._isDisposed) {\n      this._contexts.delete(contextId);\n    }\n  }\n\n};\nContextKeyService = __decorate([__param(0, IConfigurationService)], ContextKeyService);\nexport { ContextKeyService };\n\nclass ScopedContextKeyService extends AbstractContextKeyService {\n  constructor(parent, domNode) {\n    super(parent.createChildContext());\n    this._parentChangeListener = new MutableDisposable();\n    this._parent = parent;\n\n    this._updateParentChangeListener();\n\n    this._domNode = domNode;\n\n    if (this._domNode.hasAttribute(KEYBINDING_CONTEXT_ATTR)) {\n      let extraInfo = '';\n\n      if (this._domNode.classList) {\n        extraInfo = Array.from(this._domNode.classList.values()).join(', ');\n      }\n\n      console.error(`Element already has context attribute${extraInfo ? ': ' + extraInfo : ''}`);\n    }\n\n    this._domNode.setAttribute(KEYBINDING_CONTEXT_ATTR, String(this._myContextId));\n  }\n\n  _updateParentChangeListener() {\n    // Forward parent events to this listener. Parent will change.\n    this._parentChangeListener.value = this._parent.onDidChangeContext(this._onDidChangeContext.fire, this._onDidChangeContext);\n  }\n\n  dispose() {\n    if (this._isDisposed) {\n      return;\n    }\n\n    this._onDidChangeContext.dispose();\n\n    this._parent.disposeContext(this._myContextId);\n\n    this._parentChangeListener.dispose();\n\n    this._domNode.removeAttribute(KEYBINDING_CONTEXT_ATTR);\n\n    this._isDisposed = true;\n  }\n\n  getContextValuesContainer(contextId) {\n    if (this._isDisposed) {\n      return NullContext.INSTANCE;\n    }\n\n    return this._parent.getContextValuesContainer(contextId);\n  }\n\n  createChildContext(parentContextId = this._myContextId) {\n    if (this._isDisposed) {\n      throw new Error(`ScopedContextKeyService has been disposed`);\n    }\n\n    return this._parent.createChildContext(parentContextId);\n  }\n\n  disposeContext(contextId) {\n    if (this._isDisposed) {\n      return;\n    }\n\n    this._parent.disposeContext(contextId);\n  }\n\n}\n\nfunction findContextAttr(domNode) {\n  while (domNode) {\n    if (domNode.hasAttribute(KEYBINDING_CONTEXT_ATTR)) {\n      const attr = domNode.getAttribute(KEYBINDING_CONTEXT_ATTR);\n\n      if (attr) {\n        return parseInt(attr, 10);\n      }\n\n      return NaN;\n    }\n\n    domNode = domNode.parentElement;\n  }\n\n  return 0;\n}\n\nCommandsRegistry.registerCommand(SET_CONTEXT_COMMAND_ID, function (accessor, contextKey, contextValue) {\n  accessor.get(IContextKeyService).createKey(String(contextKey), contextValue);\n});\nCommandsRegistry.registerCommand({\n  id: 'getContextKeyInfo',\n\n  handler() {\n    return [...RawContextKey.all()].sort((a, b) => a.key.localeCompare(b.key));\n  },\n\n  description: {\n    description: localize('getContextKeyInfo', \"A command that returns information about context keys\"),\n    args: []\n  }\n});\nCommandsRegistry.registerCommand('_generateContextKeyInfo', function () {\n  const result = [];\n  const seen = new Set();\n\n  for (let info of RawContextKey.all()) {\n    if (!seen.has(info.key)) {\n      seen.add(info.key);\n      result.push(info);\n    }\n  }\n\n  result.sort((a, b) => a.key.localeCompare(b.key));\n  console.log(JSON.stringify(result, undefined, 2));\n});","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/platform/contextkey/browser/contextKeyService.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","PauseableEmitter","Iterable","DisposableStore","MutableDisposable","TernarySearchTree","localize","CommandsRegistry","IConfigurationService","IContextKeyService","RawContextKey","SET_CONTEXT_COMMAND_ID","KEYBINDING_CONTEXT_ATTR","Context","constructor","id","parent","_id","_parent","_value","create","setValue","value","removeValue","getValue","ret","NullContext","undefined","INSTANCE","ConfigAwareContextValuesContainer","_configurationService","emitter","_values","forConfigKeys","_listener","onDidChangeConfiguration","event","source","allKeys","Array","from","map","k","clear","fire","ArrayContextKeyChangeEvent","changedKeys","configKey","affectedKeys","contextKey","cachedItems","findSuperstr","push","deleteSuperstr","has","delete","dispose","indexOf","_keyPrefix","get","substr","configValue","isArray","JSON","stringify","set","ContextKey","service","defaultValue","_service","_key","_defaultValue","reset","setContext","removeContext","getContextKeyValue","SimpleContextKeyChangeEvent","affectsSome","keys","CompositeContextKeyChangeEvent","events","e","AbstractContextKeyService","myContextId","_onDidChangeContext","merge","input","onDidChangeContext","_isDisposed","_myContextId","createKey","Error","bufferChangeEvents","callback","pause","resume","createScoped","domNode","ScopedContextKeyService","contextMatchesRules","rules","context","getContextValuesContainer","result","evaluate","myContext","getContext","findContextAttr","ContextKeyService","configurationService","_contexts","Map","_toDispose","_lastContextId","add","contextId","createChildContext","parentContextId","disposeContext","_parentChangeListener","_updateParentChangeListener","_domNode","hasAttribute","extraInfo","classList","values","join","console","error","setAttribute","String","removeAttribute","attr","getAttribute","parseInt","NaN","parentElement","registerCommand","accessor","contextValue","handler","all","sort","a","b","localeCompare","description","args","seen","Set","info","log"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { PauseableEmitter } from '../../../base/common/event.js';\nimport { Iterable } from '../../../base/common/iterator.js';\nimport { DisposableStore, MutableDisposable } from '../../../base/common/lifecycle.js';\nimport { TernarySearchTree } from '../../../base/common/map.js';\nimport { localize } from '../../../nls.js';\nimport { CommandsRegistry } from '../../commands/common/commands.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { IContextKeyService, RawContextKey, SET_CONTEXT_COMMAND_ID } from '../common/contextkey.js';\nconst KEYBINDING_CONTEXT_ATTR = 'data-keybinding-context';\nexport class Context {\n    constructor(id, parent) {\n        this._id = id;\n        this._parent = parent;\n        this._value = Object.create(null);\n        this._value['_contextId'] = id;\n    }\n    setValue(key, value) {\n        // console.log('SET ' + key + ' = ' + value + ' ON ' + this._id);\n        if (this._value[key] !== value) {\n            this._value[key] = value;\n            return true;\n        }\n        return false;\n    }\n    removeValue(key) {\n        // console.log('REMOVE ' + key + ' FROM ' + this._id);\n        if (key in this._value) {\n            delete this._value[key];\n            return true;\n        }\n        return false;\n    }\n    getValue(key) {\n        const ret = this._value[key];\n        if (typeof ret === 'undefined' && this._parent) {\n            return this._parent.getValue(key);\n        }\n        return ret;\n    }\n}\nclass NullContext extends Context {\n    constructor() {\n        super(-1, null);\n    }\n    setValue(key, value) {\n        return false;\n    }\n    removeValue(key) {\n        return false;\n    }\n    getValue(key) {\n        return undefined;\n    }\n}\nNullContext.INSTANCE = new NullContext();\nclass ConfigAwareContextValuesContainer extends Context {\n    constructor(id, _configurationService, emitter) {\n        super(id, null);\n        this._configurationService = _configurationService;\n        this._values = TernarySearchTree.forConfigKeys();\n        this._listener = this._configurationService.onDidChangeConfiguration(event => {\n            if (event.source === 6 /* DEFAULT */) {\n                // new setting, reset everything\n                const allKeys = Array.from(Iterable.map(this._values, ([k]) => k));\n                this._values.clear();\n                emitter.fire(new ArrayContextKeyChangeEvent(allKeys));\n            }\n            else {\n                const changedKeys = [];\n                for (const configKey of event.affectedKeys) {\n                    const contextKey = `config.${configKey}`;\n                    const cachedItems = this._values.findSuperstr(contextKey);\n                    if (cachedItems !== undefined) {\n                        changedKeys.push(...Iterable.map(cachedItems, ([key]) => key));\n                        this._values.deleteSuperstr(contextKey);\n                    }\n                    if (this._values.has(contextKey)) {\n                        changedKeys.push(contextKey);\n                        this._values.delete(contextKey);\n                    }\n                }\n                emitter.fire(new ArrayContextKeyChangeEvent(changedKeys));\n            }\n        });\n    }\n    dispose() {\n        this._listener.dispose();\n    }\n    getValue(key) {\n        if (key.indexOf(ConfigAwareContextValuesContainer._keyPrefix) !== 0) {\n            return super.getValue(key);\n        }\n        if (this._values.has(key)) {\n            return this._values.get(key);\n        }\n        const configKey = key.substr(ConfigAwareContextValuesContainer._keyPrefix.length);\n        const configValue = this._configurationService.getValue(configKey);\n        let value = undefined;\n        switch (typeof configValue) {\n            case 'number':\n            case 'boolean':\n            case 'string':\n                value = configValue;\n                break;\n            default:\n                if (Array.isArray(configValue)) {\n                    value = JSON.stringify(configValue);\n                }\n                else {\n                    value = configValue;\n                }\n        }\n        this._values.set(key, value);\n        return value;\n    }\n    setValue(key, value) {\n        return super.setValue(key, value);\n    }\n    removeValue(key) {\n        return super.removeValue(key);\n    }\n}\nConfigAwareContextValuesContainer._keyPrefix = 'config.';\nclass ContextKey {\n    constructor(service, key, defaultValue) {\n        this._service = service;\n        this._key = key;\n        this._defaultValue = defaultValue;\n        this.reset();\n    }\n    set(value) {\n        this._service.setContext(this._key, value);\n    }\n    reset() {\n        if (typeof this._defaultValue === 'undefined') {\n            this._service.removeContext(this._key);\n        }\n        else {\n            this._service.setContext(this._key, this._defaultValue);\n        }\n    }\n    get() {\n        return this._service.getContextKeyValue(this._key);\n    }\n}\nclass SimpleContextKeyChangeEvent {\n    constructor(key) {\n        this.key = key;\n    }\n    affectsSome(keys) {\n        return keys.has(this.key);\n    }\n}\nclass ArrayContextKeyChangeEvent {\n    constructor(keys) {\n        this.keys = keys;\n    }\n    affectsSome(keys) {\n        for (const key of this.keys) {\n            if (keys.has(key)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\nclass CompositeContextKeyChangeEvent {\n    constructor(events) {\n        this.events = events;\n    }\n    affectsSome(keys) {\n        for (const e of this.events) {\n            if (e.affectsSome(keys)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\nexport class AbstractContextKeyService {\n    constructor(myContextId) {\n        this._onDidChangeContext = new PauseableEmitter({ merge: input => new CompositeContextKeyChangeEvent(input) });\n        this.onDidChangeContext = this._onDidChangeContext.event;\n        this._isDisposed = false;\n        this._myContextId = myContextId;\n    }\n    createKey(key, defaultValue) {\n        if (this._isDisposed) {\n            throw new Error(`AbstractContextKeyService has been disposed`);\n        }\n        return new ContextKey(this, key, defaultValue);\n    }\n    bufferChangeEvents(callback) {\n        this._onDidChangeContext.pause();\n        try {\n            callback();\n        }\n        finally {\n            this._onDidChangeContext.resume();\n        }\n    }\n    createScoped(domNode) {\n        if (this._isDisposed) {\n            throw new Error(`AbstractContextKeyService has been disposed`);\n        }\n        return new ScopedContextKeyService(this, domNode);\n    }\n    contextMatchesRules(rules) {\n        if (this._isDisposed) {\n            throw new Error(`AbstractContextKeyService has been disposed`);\n        }\n        const context = this.getContextValuesContainer(this._myContextId);\n        const result = (rules ? rules.evaluate(context) : true);\n        // console.group(rules.serialize() + ' -> ' + result);\n        // rules.keys().forEach(key => { console.log(key, ctx[key]); });\n        // console.groupEnd();\n        return result;\n    }\n    getContextKeyValue(key) {\n        if (this._isDisposed) {\n            return undefined;\n        }\n        return this.getContextValuesContainer(this._myContextId).getValue(key);\n    }\n    setContext(key, value) {\n        if (this._isDisposed) {\n            return;\n        }\n        const myContext = this.getContextValuesContainer(this._myContextId);\n        if (!myContext) {\n            return;\n        }\n        if (myContext.setValue(key, value)) {\n            this._onDidChangeContext.fire(new SimpleContextKeyChangeEvent(key));\n        }\n    }\n    removeContext(key) {\n        if (this._isDisposed) {\n            return;\n        }\n        if (this.getContextValuesContainer(this._myContextId).removeValue(key)) {\n            this._onDidChangeContext.fire(new SimpleContextKeyChangeEvent(key));\n        }\n    }\n    getContext(target) {\n        if (this._isDisposed) {\n            return NullContext.INSTANCE;\n        }\n        return this.getContextValuesContainer(findContextAttr(target));\n    }\n}\nlet ContextKeyService = class ContextKeyService extends AbstractContextKeyService {\n    constructor(configurationService) {\n        super(0);\n        this._contexts = new Map();\n        this._toDispose = new DisposableStore();\n        this._lastContextId = 0;\n        const myContext = new ConfigAwareContextValuesContainer(this._myContextId, configurationService, this._onDidChangeContext);\n        this._contexts.set(this._myContextId, myContext);\n        this._toDispose.add(myContext);\n        // Uncomment this to see the contexts continuously logged\n        // let lastLoggedValue: string | null = null;\n        // setInterval(() => {\n        // \tlet values = Object.keys(this._contexts).map((key) => this._contexts[key]);\n        // \tlet logValue = values.map(v => JSON.stringify(v._value, null, '\\t')).join('\\n');\n        // \tif (lastLoggedValue !== logValue) {\n        // \t\tlastLoggedValue = logValue;\n        // \t\tconsole.log(lastLoggedValue);\n        // \t}\n        // }, 2000);\n    }\n    dispose() {\n        this._onDidChangeContext.dispose();\n        this._isDisposed = true;\n        this._toDispose.dispose();\n    }\n    getContextValuesContainer(contextId) {\n        if (this._isDisposed) {\n            return NullContext.INSTANCE;\n        }\n        return this._contexts.get(contextId) || NullContext.INSTANCE;\n    }\n    createChildContext(parentContextId = this._myContextId) {\n        if (this._isDisposed) {\n            throw new Error(`ContextKeyService has been disposed`);\n        }\n        let id = (++this._lastContextId);\n        this._contexts.set(id, new Context(id, this.getContextValuesContainer(parentContextId)));\n        return id;\n    }\n    disposeContext(contextId) {\n        if (!this._isDisposed) {\n            this._contexts.delete(contextId);\n        }\n    }\n};\nContextKeyService = __decorate([\n    __param(0, IConfigurationService)\n], ContextKeyService);\nexport { ContextKeyService };\nclass ScopedContextKeyService extends AbstractContextKeyService {\n    constructor(parent, domNode) {\n        super(parent.createChildContext());\n        this._parentChangeListener = new MutableDisposable();\n        this._parent = parent;\n        this._updateParentChangeListener();\n        this._domNode = domNode;\n        if (this._domNode.hasAttribute(KEYBINDING_CONTEXT_ATTR)) {\n            let extraInfo = '';\n            if (this._domNode.classList) {\n                extraInfo = Array.from(this._domNode.classList.values()).join(', ');\n            }\n            console.error(`Element already has context attribute${extraInfo ? ': ' + extraInfo : ''}`);\n        }\n        this._domNode.setAttribute(KEYBINDING_CONTEXT_ATTR, String(this._myContextId));\n    }\n    _updateParentChangeListener() {\n        // Forward parent events to this listener. Parent will change.\n        this._parentChangeListener.value = this._parent.onDidChangeContext(this._onDidChangeContext.fire, this._onDidChangeContext);\n    }\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        this._onDidChangeContext.dispose();\n        this._parent.disposeContext(this._myContextId);\n        this._parentChangeListener.dispose();\n        this._domNode.removeAttribute(KEYBINDING_CONTEXT_ATTR);\n        this._isDisposed = true;\n    }\n    getContextValuesContainer(contextId) {\n        if (this._isDisposed) {\n            return NullContext.INSTANCE;\n        }\n        return this._parent.getContextValuesContainer(contextId);\n    }\n    createChildContext(parentContextId = this._myContextId) {\n        if (this._isDisposed) {\n            throw new Error(`ScopedContextKeyService has been disposed`);\n        }\n        return this._parent.createChildContext(parentContextId);\n    }\n    disposeContext(contextId) {\n        if (this._isDisposed) {\n            return;\n        }\n        this._parent.disposeContext(contextId);\n    }\n}\nfunction findContextAttr(domNode) {\n    while (domNode) {\n        if (domNode.hasAttribute(KEYBINDING_CONTEXT_ATTR)) {\n            const attr = domNode.getAttribute(KEYBINDING_CONTEXT_ATTR);\n            if (attr) {\n                return parseInt(attr, 10);\n            }\n            return NaN;\n        }\n        domNode = domNode.parentElement;\n    }\n    return 0;\n}\nCommandsRegistry.registerCommand(SET_CONTEXT_COMMAND_ID, function (accessor, contextKey, contextValue) {\n    accessor.get(IContextKeyService).createKey(String(contextKey), contextValue);\n});\nCommandsRegistry.registerCommand({\n    id: 'getContextKeyInfo',\n    handler() {\n        return [...RawContextKey.all()].sort((a, b) => a.key.localeCompare(b.key));\n    },\n    description: {\n        description: localize('getContextKeyInfo', \"A command that returns information about context keys\"),\n        args: []\n    }\n});\nCommandsRegistry.registerCommand('_generateContextKeyInfo', function () {\n    const result = [];\n    const seen = new Set();\n    for (let info of RawContextKey.all()) {\n        if (!seen.has(info.key)) {\n            seen.add(info.key);\n            result.push(info);\n        }\n    }\n    result.sort((a, b) => a.key.localeCompare(b.key));\n    console.log(JSON.stringify(result, undefined, 2));\n});\n"]},"metadata":{},"sourceType":"module"}