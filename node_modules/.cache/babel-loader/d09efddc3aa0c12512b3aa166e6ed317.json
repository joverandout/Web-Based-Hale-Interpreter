{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { EditOperation } from '../../../common/core/editOperation.js';\nimport { Range } from '../../../common/core/range.js';\nexport class SortLinesCommand {\n  constructor(selection, descending) {\n    this.selection = selection;\n    this.descending = descending;\n    this.selectionId = null;\n  }\n\n  static getCollator() {\n    if (!SortLinesCommand._COLLATOR) {\n      SortLinesCommand._COLLATOR = new Intl.Collator();\n    }\n\n    return SortLinesCommand._COLLATOR;\n  }\n\n  getEditOperations(model, builder) {\n    let op = sortLines(model, this.selection, this.descending);\n\n    if (op) {\n      builder.addEditOperation(op.range, op.text);\n    }\n\n    this.selectionId = builder.trackSelection(this.selection);\n  }\n\n  computeCursorState(model, helper) {\n    return helper.getTrackedSelection(this.selectionId);\n  }\n\n  static canRun(model, selection, descending) {\n    if (model === null) {\n      return false;\n    }\n\n    let data = getSortData(model, selection, descending);\n\n    if (!data) {\n      return false;\n    }\n\n    for (let i = 0, len = data.before.length; i < len; i++) {\n      if (data.before[i] !== data.after[i]) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n}\nSortLinesCommand._COLLATOR = null;\n\nfunction getSortData(model, selection, descending) {\n  let startLineNumber = selection.startLineNumber;\n  let endLineNumber = selection.endLineNumber;\n\n  if (selection.endColumn === 1) {\n    endLineNumber--;\n  } // Nothing to sort if user didn't select anything.\n\n\n  if (startLineNumber >= endLineNumber) {\n    return null;\n  }\n\n  let linesToSort = []; // Get the contents of the selection to be sorted.\n\n  for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n    linesToSort.push(model.getLineContent(lineNumber));\n  }\n\n  let sorted = linesToSort.slice(0);\n  sorted.sort(SortLinesCommand.getCollator().compare); // If descending, reverse the order.\n\n  if (descending === true) {\n    sorted = sorted.reverse();\n  }\n\n  return {\n    startLineNumber: startLineNumber,\n    endLineNumber: endLineNumber,\n    before: linesToSort,\n    after: sorted\n  };\n}\n/**\n * Generate commands for sorting lines on a model.\n */\n\n\nfunction sortLines(model, selection, descending) {\n  let data = getSortData(model, selection, descending);\n\n  if (!data) {\n    return null;\n  }\n\n  return EditOperation.replace(new Range(data.startLineNumber, 1, data.endLineNumber, model.getLineMaxColumn(data.endLineNumber)), data.after.join('\\n'));\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/contrib/linesOperations/browser/sortLinesCommand.js"],"names":["EditOperation","Range","SortLinesCommand","constructor","selection","descending","selectionId","getCollator","_COLLATOR","Intl","Collator","getEditOperations","model","builder","op","sortLines","addEditOperation","range","text","trackSelection","computeCursorState","helper","getTrackedSelection","canRun","data","getSortData","i","len","before","length","after","startLineNumber","endLineNumber","endColumn","linesToSort","lineNumber","push","getLineContent","sorted","slice","sort","compare","reverse","replace","getLineMaxColumn","join"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { EditOperation } from '../../../common/core/editOperation.js';\nimport { Range } from '../../../common/core/range.js';\nexport class SortLinesCommand {\n    constructor(selection, descending) {\n        this.selection = selection;\n        this.descending = descending;\n        this.selectionId = null;\n    }\n    static getCollator() {\n        if (!SortLinesCommand._COLLATOR) {\n            SortLinesCommand._COLLATOR = new Intl.Collator();\n        }\n        return SortLinesCommand._COLLATOR;\n    }\n    getEditOperations(model, builder) {\n        let op = sortLines(model, this.selection, this.descending);\n        if (op) {\n            builder.addEditOperation(op.range, op.text);\n        }\n        this.selectionId = builder.trackSelection(this.selection);\n    }\n    computeCursorState(model, helper) {\n        return helper.getTrackedSelection(this.selectionId);\n    }\n    static canRun(model, selection, descending) {\n        if (model === null) {\n            return false;\n        }\n        let data = getSortData(model, selection, descending);\n        if (!data) {\n            return false;\n        }\n        for (let i = 0, len = data.before.length; i < len; i++) {\n            if (data.before[i] !== data.after[i]) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\nSortLinesCommand._COLLATOR = null;\nfunction getSortData(model, selection, descending) {\n    let startLineNumber = selection.startLineNumber;\n    let endLineNumber = selection.endLineNumber;\n    if (selection.endColumn === 1) {\n        endLineNumber--;\n    }\n    // Nothing to sort if user didn't select anything.\n    if (startLineNumber >= endLineNumber) {\n        return null;\n    }\n    let linesToSort = [];\n    // Get the contents of the selection to be sorted.\n    for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n        linesToSort.push(model.getLineContent(lineNumber));\n    }\n    let sorted = linesToSort.slice(0);\n    sorted.sort(SortLinesCommand.getCollator().compare);\n    // If descending, reverse the order.\n    if (descending === true) {\n        sorted = sorted.reverse();\n    }\n    return {\n        startLineNumber: startLineNumber,\n        endLineNumber: endLineNumber,\n        before: linesToSort,\n        after: sorted\n    };\n}\n/**\n * Generate commands for sorting lines on a model.\n */\nfunction sortLines(model, selection, descending) {\n    let data = getSortData(model, selection, descending);\n    if (!data) {\n        return null;\n    }\n    return EditOperation.replace(new Range(data.startLineNumber, 1, data.endLineNumber, model.getLineMaxColumn(data.endLineNumber)), data.after.join('\\n'));\n}\n"]},"metadata":{},"sourceType":"module"}