{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ArrayNavigator } from './navigator.js';\nexport class HistoryNavigator {\n  constructor(history = [], limit = 10) {\n    this._initialize(history);\n\n    this._limit = limit;\n\n    this._onChange();\n  }\n\n  getHistory() {\n    return this._elements;\n  }\n\n  add(t) {\n    this._history.delete(t);\n\n    this._history.add(t);\n\n    this._onChange();\n  }\n\n  next() {\n    if (this._currentPosition() !== this._elements.length - 1) {\n      return this._navigator.next();\n    }\n\n    return null;\n  }\n\n  previous() {\n    if (this._currentPosition() !== 0) {\n      return this._navigator.previous();\n    }\n\n    return null;\n  }\n\n  current() {\n    return this._navigator.current();\n  }\n\n  first() {\n    return this._navigator.first();\n  }\n\n  last() {\n    return this._navigator.last();\n  }\n\n  has(t) {\n    return this._history.has(t);\n  }\n\n  _onChange() {\n    this._reduceToLimit();\n\n    const elements = this._elements;\n    this._navigator = new ArrayNavigator(elements, 0, elements.length, elements.length);\n  }\n\n  _reduceToLimit() {\n    const data = this._elements;\n\n    if (data.length > this._limit) {\n      this._initialize(data.slice(data.length - this._limit));\n    }\n  }\n\n  _currentPosition() {\n    const currentElement = this._navigator.current();\n\n    if (!currentElement) {\n      return -1;\n    }\n\n    return this._elements.indexOf(currentElement);\n  }\n\n  _initialize(history) {\n    this._history = new Set();\n\n    for (const entry of history) {\n      this._history.add(entry);\n    }\n  }\n\n  get _elements() {\n    const elements = [];\n\n    this._history.forEach(e => elements.push(e));\n\n    return elements;\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/base/common/history.js"],"names":["ArrayNavigator","HistoryNavigator","constructor","history","limit","_initialize","_limit","_onChange","getHistory","_elements","add","t","_history","delete","next","_currentPosition","length","_navigator","previous","current","first","last","has","_reduceToLimit","elements","data","slice","currentElement","indexOf","Set","entry","forEach","e","push"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,cAAT,QAA+B,gBAA/B;AACA,OAAO,MAAMC,gBAAN,CAAuB;AAC1BC,EAAAA,WAAW,CAACC,OAAO,GAAG,EAAX,EAAeC,KAAK,GAAG,EAAvB,EAA2B;AAClC,SAAKC,WAAL,CAAiBF,OAAjB;;AACA,SAAKG,MAAL,GAAcF,KAAd;;AACA,SAAKG,SAAL;AACH;;AACDC,EAAAA,UAAU,GAAG;AACT,WAAO,KAAKC,SAAZ;AACH;;AACDC,EAAAA,GAAG,CAACC,CAAD,EAAI;AACH,SAAKC,QAAL,CAAcC,MAAd,CAAqBF,CAArB;;AACA,SAAKC,QAAL,CAAcF,GAAd,CAAkBC,CAAlB;;AACA,SAAKJ,SAAL;AACH;;AACDO,EAAAA,IAAI,GAAG;AACH,QAAI,KAAKC,gBAAL,OAA4B,KAAKN,SAAL,CAAeO,MAAf,GAAwB,CAAxD,EAA2D;AACvD,aAAO,KAAKC,UAAL,CAAgBH,IAAhB,EAAP;AACH;;AACD,WAAO,IAAP;AACH;;AACDI,EAAAA,QAAQ,GAAG;AACP,QAAI,KAAKH,gBAAL,OAA4B,CAAhC,EAAmC;AAC/B,aAAO,KAAKE,UAAL,CAAgBC,QAAhB,EAAP;AACH;;AACD,WAAO,IAAP;AACH;;AACDC,EAAAA,OAAO,GAAG;AACN,WAAO,KAAKF,UAAL,CAAgBE,OAAhB,EAAP;AACH;;AACDC,EAAAA,KAAK,GAAG;AACJ,WAAO,KAAKH,UAAL,CAAgBG,KAAhB,EAAP;AACH;;AACDC,EAAAA,IAAI,GAAG;AACH,WAAO,KAAKJ,UAAL,CAAgBI,IAAhB,EAAP;AACH;;AACDC,EAAAA,GAAG,CAACX,CAAD,EAAI;AACH,WAAO,KAAKC,QAAL,CAAcU,GAAd,CAAkBX,CAAlB,CAAP;AACH;;AACDJ,EAAAA,SAAS,GAAG;AACR,SAAKgB,cAAL;;AACA,UAAMC,QAAQ,GAAG,KAAKf,SAAtB;AACA,SAAKQ,UAAL,GAAkB,IAAIjB,cAAJ,CAAmBwB,QAAnB,EAA6B,CAA7B,EAAgCA,QAAQ,CAACR,MAAzC,EAAiDQ,QAAQ,CAACR,MAA1D,CAAlB;AACH;;AACDO,EAAAA,cAAc,GAAG;AACb,UAAME,IAAI,GAAG,KAAKhB,SAAlB;;AACA,QAAIgB,IAAI,CAACT,MAAL,GAAc,KAAKV,MAAvB,EAA+B;AAC3B,WAAKD,WAAL,CAAiBoB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACT,MAAL,GAAc,KAAKV,MAA9B,CAAjB;AACH;AACJ;;AACDS,EAAAA,gBAAgB,GAAG;AACf,UAAMY,cAAc,GAAG,KAAKV,UAAL,CAAgBE,OAAhB,EAAvB;;AACA,QAAI,CAACQ,cAAL,EAAqB;AACjB,aAAO,CAAC,CAAR;AACH;;AACD,WAAO,KAAKlB,SAAL,CAAemB,OAAf,CAAuBD,cAAvB,CAAP;AACH;;AACDtB,EAAAA,WAAW,CAACF,OAAD,EAAU;AACjB,SAAKS,QAAL,GAAgB,IAAIiB,GAAJ,EAAhB;;AACA,SAAK,MAAMC,KAAX,IAAoB3B,OAApB,EAA6B;AACzB,WAAKS,QAAL,CAAcF,GAAd,CAAkBoB,KAAlB;AACH;AACJ;;AACY,MAATrB,SAAS,GAAG;AACZ,UAAMe,QAAQ,GAAG,EAAjB;;AACA,SAAKZ,QAAL,CAAcmB,OAAd,CAAsBC,CAAC,IAAIR,QAAQ,CAACS,IAAT,CAAcD,CAAd,CAA3B;;AACA,WAAOR,QAAP;AACH;;AAlEyB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ArrayNavigator } from './navigator.js';\nexport class HistoryNavigator {\n    constructor(history = [], limit = 10) {\n        this._initialize(history);\n        this._limit = limit;\n        this._onChange();\n    }\n    getHistory() {\n        return this._elements;\n    }\n    add(t) {\n        this._history.delete(t);\n        this._history.add(t);\n        this._onChange();\n    }\n    next() {\n        if (this._currentPosition() !== this._elements.length - 1) {\n            return this._navigator.next();\n        }\n        return null;\n    }\n    previous() {\n        if (this._currentPosition() !== 0) {\n            return this._navigator.previous();\n        }\n        return null;\n    }\n    current() {\n        return this._navigator.current();\n    }\n    first() {\n        return this._navigator.first();\n    }\n    last() {\n        return this._navigator.last();\n    }\n    has(t) {\n        return this._history.has(t);\n    }\n    _onChange() {\n        this._reduceToLimit();\n        const elements = this._elements;\n        this._navigator = new ArrayNavigator(elements, 0, elements.length, elements.length);\n    }\n    _reduceToLimit() {\n        const data = this._elements;\n        if (data.length > this._limit) {\n            this._initialize(data.slice(data.length - this._limit));\n        }\n    }\n    _currentPosition() {\n        const currentElement = this._navigator.current();\n        if (!currentElement) {\n            return -1;\n        }\n        return this._elements.indexOf(currentElement);\n    }\n    _initialize(history) {\n        this._history = new Set();\n        for (const entry of history) {\n            this._history.add(entry);\n        }\n    }\n    get _elements() {\n        const elements = [];\n        this._history.forEach(e => elements.push(e));\n        return elements;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}