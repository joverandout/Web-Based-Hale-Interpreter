{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { LinkedList } from '../../../../base/common/linkedList.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nexport class BracketSelectionRangeProvider {\n  provideSelectionRanges(model, positions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = [];\n\n      for (const position of positions) {\n        const bucket = [];\n        result.push(bucket);\n        const ranges = new Map();\n        yield new Promise(resolve => BracketSelectionRangeProvider._bracketsRightYield(resolve, 0, model, position, ranges));\n        yield new Promise(resolve => BracketSelectionRangeProvider._bracketsLeftYield(resolve, 0, model, position, ranges, bucket));\n      }\n\n      return result;\n    });\n  }\n\n  static _bracketsRightYield(resolve, round, model, pos, ranges) {\n    const counts = new Map();\n    const t1 = Date.now();\n\n    while (true) {\n      if (round >= BracketSelectionRangeProvider._maxRounds) {\n        resolve();\n        break;\n      }\n\n      if (!pos) {\n        resolve();\n        break;\n      }\n\n      let bracket = model.bracketPairs.findNextBracket(pos);\n\n      if (!bracket) {\n        resolve();\n        break;\n      }\n\n      let d = Date.now() - t1;\n\n      if (d > BracketSelectionRangeProvider._maxDuration) {\n        setTimeout(() => BracketSelectionRangeProvider._bracketsRightYield(resolve, round + 1, model, pos, ranges));\n        break;\n      }\n\n      const key = bracket.close[0];\n\n      if (bracket.isOpen) {\n        // wait for closing\n        let val = counts.has(key) ? counts.get(key) : 0;\n        counts.set(key, val + 1);\n      } else {\n        // process closing\n        let val = counts.has(key) ? counts.get(key) : 0;\n        val -= 1;\n        counts.set(key, Math.max(0, val));\n\n        if (val < 0) {\n          let list = ranges.get(key);\n\n          if (!list) {\n            list = new LinkedList();\n            ranges.set(key, list);\n          }\n\n          list.push(bracket.range);\n        }\n      }\n\n      pos = bracket.range.getEndPosition();\n    }\n  }\n\n  static _bracketsLeftYield(resolve, round, model, pos, ranges, bucket) {\n    const counts = new Map();\n    const t1 = Date.now();\n\n    while (true) {\n      if (round >= BracketSelectionRangeProvider._maxRounds && ranges.size === 0) {\n        resolve();\n        break;\n      }\n\n      if (!pos) {\n        resolve();\n        break;\n      }\n\n      let bracket = model.bracketPairs.findPrevBracket(pos);\n\n      if (!bracket) {\n        resolve();\n        break;\n      }\n\n      let d = Date.now() - t1;\n\n      if (d > BracketSelectionRangeProvider._maxDuration) {\n        setTimeout(() => BracketSelectionRangeProvider._bracketsLeftYield(resolve, round + 1, model, pos, ranges, bucket));\n        break;\n      }\n\n      const key = bracket.close[0];\n\n      if (!bracket.isOpen) {\n        // wait for opening\n        let val = counts.has(key) ? counts.get(key) : 0;\n        counts.set(key, val + 1);\n      } else {\n        // opening\n        let val = counts.has(key) ? counts.get(key) : 0;\n        val -= 1;\n        counts.set(key, Math.max(0, val));\n\n        if (val < 0) {\n          let list = ranges.get(key);\n\n          if (list) {\n            let closing = list.shift();\n\n            if (list.size === 0) {\n              ranges.delete(key);\n            }\n\n            const innerBracket = Range.fromPositions(bracket.range.getEndPosition(), closing.getStartPosition());\n            const outerBracket = Range.fromPositions(bracket.range.getStartPosition(), closing.getEndPosition());\n            bucket.push({\n              range: innerBracket\n            });\n            bucket.push({\n              range: outerBracket\n            });\n\n            BracketSelectionRangeProvider._addBracketLeading(model, outerBracket, bucket);\n          }\n        }\n      }\n\n      pos = bracket.range.getStartPosition();\n    }\n  }\n\n  static _addBracketLeading(model, bracket, bucket) {\n    if (bracket.startLineNumber === bracket.endLineNumber) {\n      return;\n    } // xxxxxxxx {\n    //\n    // }\n\n\n    const startLine = bracket.startLineNumber;\n    const column = model.getLineFirstNonWhitespaceColumn(startLine);\n\n    if (column !== 0 && column !== bracket.startColumn) {\n      bucket.push({\n        range: Range.fromPositions(new Position(startLine, column), bracket.getEndPosition())\n      });\n      bucket.push({\n        range: Range.fromPositions(new Position(startLine, 1), bracket.getEndPosition())\n      });\n    } // xxxxxxxx\n    // {\n    //\n    // }\n\n\n    const aboveLine = startLine - 1;\n\n    if (aboveLine > 0) {\n      const column = model.getLineFirstNonWhitespaceColumn(aboveLine);\n\n      if (column === bracket.startColumn && column !== model.getLineLastNonWhitespaceColumn(aboveLine)) {\n        bucket.push({\n          range: Range.fromPositions(new Position(aboveLine, column), bracket.getEndPosition())\n        });\n        bucket.push({\n          range: Range.fromPositions(new Position(aboveLine, 1), bracket.getEndPosition())\n        });\n      }\n    }\n  }\n\n}\nBracketSelectionRangeProvider._maxDuration = 30;\nBracketSelectionRangeProvider._maxRounds = 2;","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/contrib/smartSelect/browser/bracketSelections.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","LinkedList","Position","Range","BracketSelectionRangeProvider","provideSelectionRanges","model","positions","position","bucket","push","ranges","Map","_bracketsRightYield","_bracketsLeftYield","round","pos","counts","t1","Date","now","_maxRounds","bracket","bracketPairs","findNextBracket","d","_maxDuration","setTimeout","key","close","isOpen","val","has","get","set","Math","max","list","range","getEndPosition","size","findPrevBracket","closing","shift","delete","innerBracket","fromPositions","getStartPosition","outerBracket","_addBracketLeading","startLineNumber","endLineNumber","startLine","column","getLineFirstNonWhitespaceColumn","startColumn","aboveLine","getLineLastNonWhitespaceColumn"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { LinkedList } from '../../../../base/common/linkedList.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nexport class BracketSelectionRangeProvider {\n    provideSelectionRanges(model, positions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = [];\n            for (const position of positions) {\n                const bucket = [];\n                result.push(bucket);\n                const ranges = new Map();\n                yield new Promise(resolve => BracketSelectionRangeProvider._bracketsRightYield(resolve, 0, model, position, ranges));\n                yield new Promise(resolve => BracketSelectionRangeProvider._bracketsLeftYield(resolve, 0, model, position, ranges, bucket));\n            }\n            return result;\n        });\n    }\n    static _bracketsRightYield(resolve, round, model, pos, ranges) {\n        const counts = new Map();\n        const t1 = Date.now();\n        while (true) {\n            if (round >= BracketSelectionRangeProvider._maxRounds) {\n                resolve();\n                break;\n            }\n            if (!pos) {\n                resolve();\n                break;\n            }\n            let bracket = model.bracketPairs.findNextBracket(pos);\n            if (!bracket) {\n                resolve();\n                break;\n            }\n            let d = Date.now() - t1;\n            if (d > BracketSelectionRangeProvider._maxDuration) {\n                setTimeout(() => BracketSelectionRangeProvider._bracketsRightYield(resolve, round + 1, model, pos, ranges));\n                break;\n            }\n            const key = bracket.close[0];\n            if (bracket.isOpen) {\n                // wait for closing\n                let val = counts.has(key) ? counts.get(key) : 0;\n                counts.set(key, val + 1);\n            }\n            else {\n                // process closing\n                let val = counts.has(key) ? counts.get(key) : 0;\n                val -= 1;\n                counts.set(key, Math.max(0, val));\n                if (val < 0) {\n                    let list = ranges.get(key);\n                    if (!list) {\n                        list = new LinkedList();\n                        ranges.set(key, list);\n                    }\n                    list.push(bracket.range);\n                }\n            }\n            pos = bracket.range.getEndPosition();\n        }\n    }\n    static _bracketsLeftYield(resolve, round, model, pos, ranges, bucket) {\n        const counts = new Map();\n        const t1 = Date.now();\n        while (true) {\n            if (round >= BracketSelectionRangeProvider._maxRounds && ranges.size === 0) {\n                resolve();\n                break;\n            }\n            if (!pos) {\n                resolve();\n                break;\n            }\n            let bracket = model.bracketPairs.findPrevBracket(pos);\n            if (!bracket) {\n                resolve();\n                break;\n            }\n            let d = Date.now() - t1;\n            if (d > BracketSelectionRangeProvider._maxDuration) {\n                setTimeout(() => BracketSelectionRangeProvider._bracketsLeftYield(resolve, round + 1, model, pos, ranges, bucket));\n                break;\n            }\n            const key = bracket.close[0];\n            if (!bracket.isOpen) {\n                // wait for opening\n                let val = counts.has(key) ? counts.get(key) : 0;\n                counts.set(key, val + 1);\n            }\n            else {\n                // opening\n                let val = counts.has(key) ? counts.get(key) : 0;\n                val -= 1;\n                counts.set(key, Math.max(0, val));\n                if (val < 0) {\n                    let list = ranges.get(key);\n                    if (list) {\n                        let closing = list.shift();\n                        if (list.size === 0) {\n                            ranges.delete(key);\n                        }\n                        const innerBracket = Range.fromPositions(bracket.range.getEndPosition(), closing.getStartPosition());\n                        const outerBracket = Range.fromPositions(bracket.range.getStartPosition(), closing.getEndPosition());\n                        bucket.push({ range: innerBracket });\n                        bucket.push({ range: outerBracket });\n                        BracketSelectionRangeProvider._addBracketLeading(model, outerBracket, bucket);\n                    }\n                }\n            }\n            pos = bracket.range.getStartPosition();\n        }\n    }\n    static _addBracketLeading(model, bracket, bucket) {\n        if (bracket.startLineNumber === bracket.endLineNumber) {\n            return;\n        }\n        // xxxxxxxx {\n        //\n        // }\n        const startLine = bracket.startLineNumber;\n        const column = model.getLineFirstNonWhitespaceColumn(startLine);\n        if (column !== 0 && column !== bracket.startColumn) {\n            bucket.push({ range: Range.fromPositions(new Position(startLine, column), bracket.getEndPosition()) });\n            bucket.push({ range: Range.fromPositions(new Position(startLine, 1), bracket.getEndPosition()) });\n        }\n        // xxxxxxxx\n        // {\n        //\n        // }\n        const aboveLine = startLine - 1;\n        if (aboveLine > 0) {\n            const column = model.getLineFirstNonWhitespaceColumn(aboveLine);\n            if (column === bracket.startColumn && column !== model.getLineLastNonWhitespaceColumn(aboveLine)) {\n                bucket.push({ range: Range.fromPositions(new Position(aboveLine, column), bracket.getEndPosition()) });\n                bucket.push({ range: Range.fromPositions(new Position(aboveLine, 1), bracket.getEndPosition()) });\n            }\n        }\n    }\n}\nBracketSelectionRangeProvider._maxDuration = 30;\nBracketSelectionRangeProvider._maxRounds = 2;\n"]},"metadata":{},"sourceType":"module"}