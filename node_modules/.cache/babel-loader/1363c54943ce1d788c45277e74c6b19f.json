{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createKeybinding } from '../../../base/common/keybindings.js';\nimport { OS } from '../../../base/common/platform.js';\nimport { CommandsRegistry } from '../../commands/common/commands.js';\nimport { Registry } from '../../registry/common/platform.js';\n\nclass KeybindingsRegistryImpl {\n  constructor() {\n    this._coreKeybindings = [];\n    this._extensionKeybindings = [];\n    this._cachedMergedKeybindings = null;\n  }\n  /**\n   * Take current platform into account and reduce to primary & secondary.\n   */\n\n\n  static bindToCurrentPlatform(kb) {\n    if (OS === 1\n    /* Windows */\n    ) {\n      if (kb && kb.win) {\n        return kb.win;\n      }\n    } else if (OS === 2\n    /* Macintosh */\n    ) {\n      if (kb && kb.mac) {\n        return kb.mac;\n      }\n    } else {\n      if (kb && kb.linux) {\n        return kb.linux;\n      }\n    }\n\n    return kb;\n  }\n\n  registerKeybindingRule(rule) {\n    const actualKb = KeybindingsRegistryImpl.bindToCurrentPlatform(rule);\n\n    if (actualKb && actualKb.primary) {\n      const kk = createKeybinding(actualKb.primary, OS);\n\n      if (kk) {\n        this._registerDefaultKeybinding(kk, rule.id, rule.args, rule.weight, 0, rule.when);\n      }\n    }\n\n    if (actualKb && Array.isArray(actualKb.secondary)) {\n      for (let i = 0, len = actualKb.secondary.length; i < len; i++) {\n        const k = actualKb.secondary[i];\n        const kk = createKeybinding(k, OS);\n\n        if (kk) {\n          this._registerDefaultKeybinding(kk, rule.id, rule.args, rule.weight, -i - 1, rule.when);\n        }\n      }\n    }\n  }\n\n  registerCommandAndKeybindingRule(desc) {\n    this.registerKeybindingRule(desc);\n    CommandsRegistry.registerCommand(desc);\n  }\n\n  static _mightProduceChar(keyCode) {\n    if (keyCode >= 21\n    /* Digit0 */\n    && keyCode <= 30\n    /* Digit9 */\n    ) {\n      return true;\n    }\n\n    if (keyCode >= 31\n    /* KeyA */\n    && keyCode <= 56\n    /* KeyZ */\n    ) {\n      return true;\n    }\n\n    return keyCode === 80\n    /* Semicolon */\n    || keyCode === 81\n    /* Equal */\n    || keyCode === 82\n    /* Comma */\n    || keyCode === 83\n    /* Minus */\n    || keyCode === 84\n    /* Period */\n    || keyCode === 85\n    /* Slash */\n    || keyCode === 86\n    /* Backquote */\n    || keyCode === 110\n    /* ABNT_C1 */\n    || keyCode === 111\n    /* ABNT_C2 */\n    || keyCode === 87\n    /* BracketLeft */\n    || keyCode === 88\n    /* Backslash */\n    || keyCode === 89\n    /* BracketRight */\n    || keyCode === 90\n    /* Quote */\n    || keyCode === 91\n    /* OEM_8 */\n    || keyCode === 92\n    /* IntlBackslash */\n    ;\n  }\n\n  _assertNoCtrlAlt(keybinding, commandId) {\n    if (keybinding.ctrlKey && keybinding.altKey && !keybinding.metaKey) {\n      if (KeybindingsRegistryImpl._mightProduceChar(keybinding.keyCode)) {\n        console.warn('Ctrl+Alt+ keybindings should not be used by default under Windows. Offender: ', keybinding, ' for ', commandId);\n      }\n    }\n  }\n\n  _registerDefaultKeybinding(keybinding, commandId, commandArgs, weight1, weight2, when) {\n    if (OS === 1\n    /* Windows */\n    ) {\n      this._assertNoCtrlAlt(keybinding.parts[0], commandId);\n    }\n\n    this._coreKeybindings.push({\n      keybinding: keybinding.parts,\n      command: commandId,\n      commandArgs: commandArgs,\n      when: when,\n      weight1: weight1,\n      weight2: weight2,\n      extensionId: null,\n      isBuiltinExtension: false\n    });\n\n    this._cachedMergedKeybindings = null;\n  }\n\n  getDefaultKeybindings() {\n    if (!this._cachedMergedKeybindings) {\n      this._cachedMergedKeybindings = [].concat(this._coreKeybindings).concat(this._extensionKeybindings);\n\n      this._cachedMergedKeybindings.sort(sorter);\n    }\n\n    return this._cachedMergedKeybindings.slice(0);\n  }\n\n}\n\nexport const KeybindingsRegistry = new KeybindingsRegistryImpl(); // Define extension point ids\n\nexport const Extensions = {\n  EditorModes: 'platform.keybindingsRegistry'\n};\nRegistry.add(Extensions.EditorModes, KeybindingsRegistry);\n\nfunction sorter(a, b) {\n  if (a.weight1 !== b.weight1) {\n    return a.weight1 - b.weight1;\n  }\n\n  if (a.command < b.command) {\n    return -1;\n  }\n\n  if (a.command > b.command) {\n    return 1;\n  }\n\n  return a.weight2 - b.weight2;\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/platform/keybinding/common/keybindingsRegistry.js"],"names":["createKeybinding","OS","CommandsRegistry","Registry","KeybindingsRegistryImpl","constructor","_coreKeybindings","_extensionKeybindings","_cachedMergedKeybindings","bindToCurrentPlatform","kb","win","mac","linux","registerKeybindingRule","rule","actualKb","primary","kk","_registerDefaultKeybinding","id","args","weight","when","Array","isArray","secondary","i","len","length","k","registerCommandAndKeybindingRule","desc","registerCommand","_mightProduceChar","keyCode","_assertNoCtrlAlt","keybinding","commandId","ctrlKey","altKey","metaKey","console","warn","commandArgs","weight1","weight2","parts","push","command","extensionId","isBuiltinExtension","getDefaultKeybindings","concat","sort","sorter","slice","KeybindingsRegistry","Extensions","EditorModes","add","a","b"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createKeybinding } from '../../../base/common/keybindings.js';\nimport { OS } from '../../../base/common/platform.js';\nimport { CommandsRegistry } from '../../commands/common/commands.js';\nimport { Registry } from '../../registry/common/platform.js';\nclass KeybindingsRegistryImpl {\n    constructor() {\n        this._coreKeybindings = [];\n        this._extensionKeybindings = [];\n        this._cachedMergedKeybindings = null;\n    }\n    /**\n     * Take current platform into account and reduce to primary & secondary.\n     */\n    static bindToCurrentPlatform(kb) {\n        if (OS === 1 /* Windows */) {\n            if (kb && kb.win) {\n                return kb.win;\n            }\n        }\n        else if (OS === 2 /* Macintosh */) {\n            if (kb && kb.mac) {\n                return kb.mac;\n            }\n        }\n        else {\n            if (kb && kb.linux) {\n                return kb.linux;\n            }\n        }\n        return kb;\n    }\n    registerKeybindingRule(rule) {\n        const actualKb = KeybindingsRegistryImpl.bindToCurrentPlatform(rule);\n        if (actualKb && actualKb.primary) {\n            const kk = createKeybinding(actualKb.primary, OS);\n            if (kk) {\n                this._registerDefaultKeybinding(kk, rule.id, rule.args, rule.weight, 0, rule.when);\n            }\n        }\n        if (actualKb && Array.isArray(actualKb.secondary)) {\n            for (let i = 0, len = actualKb.secondary.length; i < len; i++) {\n                const k = actualKb.secondary[i];\n                const kk = createKeybinding(k, OS);\n                if (kk) {\n                    this._registerDefaultKeybinding(kk, rule.id, rule.args, rule.weight, -i - 1, rule.when);\n                }\n            }\n        }\n    }\n    registerCommandAndKeybindingRule(desc) {\n        this.registerKeybindingRule(desc);\n        CommandsRegistry.registerCommand(desc);\n    }\n    static _mightProduceChar(keyCode) {\n        if (keyCode >= 21 /* Digit0 */ && keyCode <= 30 /* Digit9 */) {\n            return true;\n        }\n        if (keyCode >= 31 /* KeyA */ && keyCode <= 56 /* KeyZ */) {\n            return true;\n        }\n        return (keyCode === 80 /* Semicolon */\n            || keyCode === 81 /* Equal */\n            || keyCode === 82 /* Comma */\n            || keyCode === 83 /* Minus */\n            || keyCode === 84 /* Period */\n            || keyCode === 85 /* Slash */\n            || keyCode === 86 /* Backquote */\n            || keyCode === 110 /* ABNT_C1 */\n            || keyCode === 111 /* ABNT_C2 */\n            || keyCode === 87 /* BracketLeft */\n            || keyCode === 88 /* Backslash */\n            || keyCode === 89 /* BracketRight */\n            || keyCode === 90 /* Quote */\n            || keyCode === 91 /* OEM_8 */\n            || keyCode === 92 /* IntlBackslash */);\n    }\n    _assertNoCtrlAlt(keybinding, commandId) {\n        if (keybinding.ctrlKey && keybinding.altKey && !keybinding.metaKey) {\n            if (KeybindingsRegistryImpl._mightProduceChar(keybinding.keyCode)) {\n                console.warn('Ctrl+Alt+ keybindings should not be used by default under Windows. Offender: ', keybinding, ' for ', commandId);\n            }\n        }\n    }\n    _registerDefaultKeybinding(keybinding, commandId, commandArgs, weight1, weight2, when) {\n        if (OS === 1 /* Windows */) {\n            this._assertNoCtrlAlt(keybinding.parts[0], commandId);\n        }\n        this._coreKeybindings.push({\n            keybinding: keybinding.parts,\n            command: commandId,\n            commandArgs: commandArgs,\n            when: when,\n            weight1: weight1,\n            weight2: weight2,\n            extensionId: null,\n            isBuiltinExtension: false\n        });\n        this._cachedMergedKeybindings = null;\n    }\n    getDefaultKeybindings() {\n        if (!this._cachedMergedKeybindings) {\n            this._cachedMergedKeybindings = [].concat(this._coreKeybindings).concat(this._extensionKeybindings);\n            this._cachedMergedKeybindings.sort(sorter);\n        }\n        return this._cachedMergedKeybindings.slice(0);\n    }\n}\nexport const KeybindingsRegistry = new KeybindingsRegistryImpl();\n// Define extension point ids\nexport const Extensions = {\n    EditorModes: 'platform.keybindingsRegistry'\n};\nRegistry.add(Extensions.EditorModes, KeybindingsRegistry);\nfunction sorter(a, b) {\n    if (a.weight1 !== b.weight1) {\n        return a.weight1 - b.weight1;\n    }\n    if (a.command < b.command) {\n        return -1;\n    }\n    if (a.command > b.command) {\n        return 1;\n    }\n    return a.weight2 - b.weight2;\n}\n"]},"metadata":{},"sourceType":"module"}