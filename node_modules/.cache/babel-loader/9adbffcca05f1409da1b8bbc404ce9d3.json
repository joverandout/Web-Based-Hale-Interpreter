{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { isFalsyOrEmpty } from '../../../base/common/arrays.js';\nimport { DebounceEmitter } from '../../../base/common/event.js';\nimport { Iterable } from '../../../base/common/iterator.js';\nimport { ResourceMap } from '../../../base/common/map.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { MarkerSeverity } from './markers.js';\n\nclass DoubleResourceMap {\n  constructor() {\n    this._byResource = new ResourceMap();\n    this._byOwner = new Map();\n  }\n\n  set(resource, owner, value) {\n    let ownerMap = this._byResource.get(resource);\n\n    if (!ownerMap) {\n      ownerMap = new Map();\n\n      this._byResource.set(resource, ownerMap);\n    }\n\n    ownerMap.set(owner, value);\n\n    let resourceMap = this._byOwner.get(owner);\n\n    if (!resourceMap) {\n      resourceMap = new ResourceMap();\n\n      this._byOwner.set(owner, resourceMap);\n    }\n\n    resourceMap.set(resource, value);\n  }\n\n  get(resource, owner) {\n    let ownerMap = this._byResource.get(resource);\n\n    return ownerMap === null || ownerMap === void 0 ? void 0 : ownerMap.get(owner);\n  }\n\n  delete(resource, owner) {\n    let removedA = false;\n    let removedB = false;\n\n    let ownerMap = this._byResource.get(resource);\n\n    if (ownerMap) {\n      removedA = ownerMap.delete(owner);\n    }\n\n    let resourceMap = this._byOwner.get(owner);\n\n    if (resourceMap) {\n      removedB = resourceMap.delete(resource);\n    }\n\n    if (removedA !== removedB) {\n      throw new Error('illegal state');\n    }\n\n    return removedA && removedB;\n  }\n\n  values(key) {\n    var _a, _b, _c, _d;\n\n    if (typeof key === 'string') {\n      return (_b = (_a = this._byOwner.get(key)) === null || _a === void 0 ? void 0 : _a.values()) !== null && _b !== void 0 ? _b : Iterable.empty();\n    }\n\n    if (URI.isUri(key)) {\n      return (_d = (_c = this._byResource.get(key)) === null || _c === void 0 ? void 0 : _c.values()) !== null && _d !== void 0 ? _d : Iterable.empty();\n    }\n\n    return Iterable.map(Iterable.concat(...this._byOwner.values()), map => map[1]);\n  }\n\n}\n\nclass MarkerStats {\n  constructor(service) {\n    this.errors = 0;\n    this.infos = 0;\n    this.warnings = 0;\n    this.unknowns = 0;\n    this._data = new ResourceMap();\n    this._service = service;\n    this._subscription = service.onMarkerChanged(this._update, this);\n  }\n\n  dispose() {\n    this._subscription.dispose();\n  }\n\n  _update(resources) {\n    for (const resource of resources) {\n      const oldStats = this._data.get(resource);\n\n      if (oldStats) {\n        this._substract(oldStats);\n      }\n\n      const newStats = this._resourceStats(resource);\n\n      this._add(newStats);\n\n      this._data.set(resource, newStats);\n    }\n  }\n\n  _resourceStats(resource) {\n    const result = {\n      errors: 0,\n      warnings: 0,\n      infos: 0,\n      unknowns: 0\n    }; // TODO this is a hack\n\n    if (resource.scheme === Schemas.inMemory || resource.scheme === Schemas.walkThrough || resource.scheme === Schemas.walkThroughSnippet) {\n      return result;\n    }\n\n    for (const {\n      severity\n    } of this._service.read({\n      resource\n    })) {\n      if (severity === MarkerSeverity.Error) {\n        result.errors += 1;\n      } else if (severity === MarkerSeverity.Warning) {\n        result.warnings += 1;\n      } else if (severity === MarkerSeverity.Info) {\n        result.infos += 1;\n      } else {\n        result.unknowns += 1;\n      }\n    }\n\n    return result;\n  }\n\n  _substract(op) {\n    this.errors -= op.errors;\n    this.warnings -= op.warnings;\n    this.infos -= op.infos;\n    this.unknowns -= op.unknowns;\n  }\n\n  _add(op) {\n    this.errors += op.errors;\n    this.warnings += op.warnings;\n    this.infos += op.infos;\n    this.unknowns += op.unknowns;\n  }\n\n}\n\nexport class MarkerService {\n  constructor() {\n    this._onMarkerChanged = new DebounceEmitter({\n      delay: 0,\n      merge: MarkerService._merge\n    });\n    this.onMarkerChanged = this._onMarkerChanged.event;\n    this._data = new DoubleResourceMap();\n    this._stats = new MarkerStats(this);\n  }\n\n  dispose() {\n    this._stats.dispose();\n\n    this._onMarkerChanged.dispose();\n  }\n\n  remove(owner, resources) {\n    for (const resource of resources || []) {\n      this.changeOne(owner, resource, []);\n    }\n  }\n\n  changeOne(owner, resource, markerData) {\n    if (isFalsyOrEmpty(markerData)) {\n      // remove marker for this (owner,resource)-tuple\n      const removed = this._data.delete(resource, owner);\n\n      if (removed) {\n        this._onMarkerChanged.fire([resource]);\n      }\n    } else {\n      // insert marker for this (owner,resource)-tuple\n      const markers = [];\n\n      for (const data of markerData) {\n        const marker = MarkerService._toMarker(owner, resource, data);\n\n        if (marker) {\n          markers.push(marker);\n        }\n      }\n\n      this._data.set(resource, owner, markers);\n\n      this._onMarkerChanged.fire([resource]);\n    }\n  }\n\n  static _toMarker(owner, resource, data) {\n    let {\n      code,\n      severity,\n      message,\n      source,\n      startLineNumber,\n      startColumn,\n      endLineNumber,\n      endColumn,\n      relatedInformation,\n      tags\n    } = data;\n\n    if (!message) {\n      return undefined;\n    } // santize data\n\n\n    startLineNumber = startLineNumber > 0 ? startLineNumber : 1;\n    startColumn = startColumn > 0 ? startColumn : 1;\n    endLineNumber = endLineNumber >= startLineNumber ? endLineNumber : startLineNumber;\n    endColumn = endColumn > 0 ? endColumn : startColumn;\n    return {\n      resource,\n      owner,\n      code,\n      severity,\n      message,\n      source,\n      startLineNumber,\n      startColumn,\n      endLineNumber,\n      endColumn,\n      relatedInformation,\n      tags\n    };\n  }\n\n  read(filter = Object.create(null)) {\n    let {\n      owner,\n      resource,\n      severities,\n      take\n    } = filter;\n\n    if (!take || take < 0) {\n      take = -1;\n    }\n\n    if (owner && resource) {\n      // exactly one owner AND resource\n      const data = this._data.get(resource, owner);\n\n      if (!data) {\n        return [];\n      } else {\n        const result = [];\n\n        for (const marker of data) {\n          if (MarkerService._accept(marker, severities)) {\n            const newLen = result.push(marker);\n\n            if (take > 0 && newLen === take) {\n              break;\n            }\n          }\n        }\n\n        return result;\n      }\n    } else if (!owner && !resource) {\n      // all\n      const result = [];\n\n      for (let markers of this._data.values()) {\n        for (let data of markers) {\n          if (MarkerService._accept(data, severities)) {\n            const newLen = result.push(data);\n\n            if (take > 0 && newLen === take) {\n              return result;\n            }\n          }\n        }\n      }\n\n      return result;\n    } else {\n      // of one resource OR owner\n      const iterable = this._data.values(resource !== null && resource !== void 0 ? resource : owner);\n\n      const result = [];\n\n      for (const markers of iterable) {\n        for (const data of markers) {\n          if (MarkerService._accept(data, severities)) {\n            const newLen = result.push(data);\n\n            if (take > 0 && newLen === take) {\n              return result;\n            }\n          }\n        }\n      }\n\n      return result;\n    }\n  }\n\n  static _accept(marker, severities) {\n    return severities === undefined || (severities & marker.severity) === marker.severity;\n  } // --- event debounce logic\n\n\n  static _merge(all) {\n    const set = new ResourceMap();\n\n    for (let array of all) {\n      for (let item of array) {\n        set.set(item, true);\n      }\n    }\n\n    return Array.from(set.keys());\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/platform/markers/common/markerService.js"],"names":["isFalsyOrEmpty","DebounceEmitter","Iterable","ResourceMap","Schemas","URI","MarkerSeverity","DoubleResourceMap","constructor","_byResource","_byOwner","Map","set","resource","owner","value","ownerMap","get","resourceMap","delete","removedA","removedB","Error","values","key","_a","_b","_c","_d","empty","isUri","map","concat","MarkerStats","service","errors","infos","warnings","unknowns","_data","_service","_subscription","onMarkerChanged","_update","dispose","resources","oldStats","_substract","newStats","_resourceStats","_add","result","scheme","inMemory","walkThrough","walkThroughSnippet","severity","read","Warning","Info","op","MarkerService","_onMarkerChanged","delay","merge","_merge","event","_stats","remove","changeOne","markerData","removed","fire","markers","data","marker","_toMarker","push","code","message","source","startLineNumber","startColumn","endLineNumber","endColumn","relatedInformation","tags","undefined","filter","Object","create","severities","take","_accept","newLen","iterable","all","array","item","Array","from","keys"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { isFalsyOrEmpty } from '../../../base/common/arrays.js';\nimport { DebounceEmitter } from '../../../base/common/event.js';\nimport { Iterable } from '../../../base/common/iterator.js';\nimport { ResourceMap } from '../../../base/common/map.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { MarkerSeverity } from './markers.js';\nclass DoubleResourceMap {\n    constructor() {\n        this._byResource = new ResourceMap();\n        this._byOwner = new Map();\n    }\n    set(resource, owner, value) {\n        let ownerMap = this._byResource.get(resource);\n        if (!ownerMap) {\n            ownerMap = new Map();\n            this._byResource.set(resource, ownerMap);\n        }\n        ownerMap.set(owner, value);\n        let resourceMap = this._byOwner.get(owner);\n        if (!resourceMap) {\n            resourceMap = new ResourceMap();\n            this._byOwner.set(owner, resourceMap);\n        }\n        resourceMap.set(resource, value);\n    }\n    get(resource, owner) {\n        let ownerMap = this._byResource.get(resource);\n        return ownerMap === null || ownerMap === void 0 ? void 0 : ownerMap.get(owner);\n    }\n    delete(resource, owner) {\n        let removedA = false;\n        let removedB = false;\n        let ownerMap = this._byResource.get(resource);\n        if (ownerMap) {\n            removedA = ownerMap.delete(owner);\n        }\n        let resourceMap = this._byOwner.get(owner);\n        if (resourceMap) {\n            removedB = resourceMap.delete(resource);\n        }\n        if (removedA !== removedB) {\n            throw new Error('illegal state');\n        }\n        return removedA && removedB;\n    }\n    values(key) {\n        var _a, _b, _c, _d;\n        if (typeof key === 'string') {\n            return (_b = (_a = this._byOwner.get(key)) === null || _a === void 0 ? void 0 : _a.values()) !== null && _b !== void 0 ? _b : Iterable.empty();\n        }\n        if (URI.isUri(key)) {\n            return (_d = (_c = this._byResource.get(key)) === null || _c === void 0 ? void 0 : _c.values()) !== null && _d !== void 0 ? _d : Iterable.empty();\n        }\n        return Iterable.map(Iterable.concat(...this._byOwner.values()), map => map[1]);\n    }\n}\nclass MarkerStats {\n    constructor(service) {\n        this.errors = 0;\n        this.infos = 0;\n        this.warnings = 0;\n        this.unknowns = 0;\n        this._data = new ResourceMap();\n        this._service = service;\n        this._subscription = service.onMarkerChanged(this._update, this);\n    }\n    dispose() {\n        this._subscription.dispose();\n    }\n    _update(resources) {\n        for (const resource of resources) {\n            const oldStats = this._data.get(resource);\n            if (oldStats) {\n                this._substract(oldStats);\n            }\n            const newStats = this._resourceStats(resource);\n            this._add(newStats);\n            this._data.set(resource, newStats);\n        }\n    }\n    _resourceStats(resource) {\n        const result = { errors: 0, warnings: 0, infos: 0, unknowns: 0 };\n        // TODO this is a hack\n        if (resource.scheme === Schemas.inMemory || resource.scheme === Schemas.walkThrough || resource.scheme === Schemas.walkThroughSnippet) {\n            return result;\n        }\n        for (const { severity } of this._service.read({ resource })) {\n            if (severity === MarkerSeverity.Error) {\n                result.errors += 1;\n            }\n            else if (severity === MarkerSeverity.Warning) {\n                result.warnings += 1;\n            }\n            else if (severity === MarkerSeverity.Info) {\n                result.infos += 1;\n            }\n            else {\n                result.unknowns += 1;\n            }\n        }\n        return result;\n    }\n    _substract(op) {\n        this.errors -= op.errors;\n        this.warnings -= op.warnings;\n        this.infos -= op.infos;\n        this.unknowns -= op.unknowns;\n    }\n    _add(op) {\n        this.errors += op.errors;\n        this.warnings += op.warnings;\n        this.infos += op.infos;\n        this.unknowns += op.unknowns;\n    }\n}\nexport class MarkerService {\n    constructor() {\n        this._onMarkerChanged = new DebounceEmitter({\n            delay: 0,\n            merge: MarkerService._merge\n        });\n        this.onMarkerChanged = this._onMarkerChanged.event;\n        this._data = new DoubleResourceMap();\n        this._stats = new MarkerStats(this);\n    }\n    dispose() {\n        this._stats.dispose();\n        this._onMarkerChanged.dispose();\n    }\n    remove(owner, resources) {\n        for (const resource of resources || []) {\n            this.changeOne(owner, resource, []);\n        }\n    }\n    changeOne(owner, resource, markerData) {\n        if (isFalsyOrEmpty(markerData)) {\n            // remove marker for this (owner,resource)-tuple\n            const removed = this._data.delete(resource, owner);\n            if (removed) {\n                this._onMarkerChanged.fire([resource]);\n            }\n        }\n        else {\n            // insert marker for this (owner,resource)-tuple\n            const markers = [];\n            for (const data of markerData) {\n                const marker = MarkerService._toMarker(owner, resource, data);\n                if (marker) {\n                    markers.push(marker);\n                }\n            }\n            this._data.set(resource, owner, markers);\n            this._onMarkerChanged.fire([resource]);\n        }\n    }\n    static _toMarker(owner, resource, data) {\n        let { code, severity, message, source, startLineNumber, startColumn, endLineNumber, endColumn, relatedInformation, tags, } = data;\n        if (!message) {\n            return undefined;\n        }\n        // santize data\n        startLineNumber = startLineNumber > 0 ? startLineNumber : 1;\n        startColumn = startColumn > 0 ? startColumn : 1;\n        endLineNumber = endLineNumber >= startLineNumber ? endLineNumber : startLineNumber;\n        endColumn = endColumn > 0 ? endColumn : startColumn;\n        return {\n            resource,\n            owner,\n            code,\n            severity,\n            message,\n            source,\n            startLineNumber,\n            startColumn,\n            endLineNumber,\n            endColumn,\n            relatedInformation,\n            tags,\n        };\n    }\n    read(filter = Object.create(null)) {\n        let { owner, resource, severities, take } = filter;\n        if (!take || take < 0) {\n            take = -1;\n        }\n        if (owner && resource) {\n            // exactly one owner AND resource\n            const data = this._data.get(resource, owner);\n            if (!data) {\n                return [];\n            }\n            else {\n                const result = [];\n                for (const marker of data) {\n                    if (MarkerService._accept(marker, severities)) {\n                        const newLen = result.push(marker);\n                        if (take > 0 && newLen === take) {\n                            break;\n                        }\n                    }\n                }\n                return result;\n            }\n        }\n        else if (!owner && !resource) {\n            // all\n            const result = [];\n            for (let markers of this._data.values()) {\n                for (let data of markers) {\n                    if (MarkerService._accept(data, severities)) {\n                        const newLen = result.push(data);\n                        if (take > 0 && newLen === take) {\n                            return result;\n                        }\n                    }\n                }\n            }\n            return result;\n        }\n        else {\n            // of one resource OR owner\n            const iterable = this._data.values(resource !== null && resource !== void 0 ? resource : owner);\n            const result = [];\n            for (const markers of iterable) {\n                for (const data of markers) {\n                    if (MarkerService._accept(data, severities)) {\n                        const newLen = result.push(data);\n                        if (take > 0 && newLen === take) {\n                            return result;\n                        }\n                    }\n                }\n            }\n            return result;\n        }\n    }\n    static _accept(marker, severities) {\n        return severities === undefined || (severities & marker.severity) === marker.severity;\n    }\n    // --- event debounce logic\n    static _merge(all) {\n        const set = new ResourceMap();\n        for (let array of all) {\n            for (let item of array) {\n                set.set(item, true);\n            }\n        }\n        return Array.from(set.keys());\n    }\n}\n"]},"metadata":{},"sourceType":"module"}