{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class RestrictedRenderingContext {\n  constructor(viewLayout, viewportData) {\n    this._restrictedRenderingContextBrand = undefined;\n    this._viewLayout = viewLayout;\n    this.viewportData = viewportData;\n    this.scrollWidth = this._viewLayout.getScrollWidth();\n    this.scrollHeight = this._viewLayout.getScrollHeight();\n    this.visibleRange = this.viewportData.visibleRange;\n    this.bigNumbersDelta = this.viewportData.bigNumbersDelta;\n\n    const vInfo = this._viewLayout.getCurrentViewport();\n\n    this.scrollTop = vInfo.top;\n    this.scrollLeft = vInfo.left;\n    this.viewportWidth = vInfo.width;\n    this.viewportHeight = vInfo.height;\n  }\n\n  getScrolledTopFromAbsoluteTop(absoluteTop) {\n    return absoluteTop - this.scrollTop;\n  }\n\n  getVerticalOffsetForLineNumber(lineNumber) {\n    return this._viewLayout.getVerticalOffsetForLineNumber(lineNumber);\n  }\n\n  getDecorationsInViewport() {\n    return this.viewportData.getDecorationsInViewport();\n  }\n\n}\nexport class RenderingContext extends RestrictedRenderingContext {\n  constructor(viewLayout, viewportData, viewLines) {\n    super(viewLayout, viewportData);\n    this._renderingContextBrand = undefined;\n    this._viewLines = viewLines;\n  }\n\n  linesVisibleRangesForRange(range, includeNewLines) {\n    return this._viewLines.linesVisibleRangesForRange(range, includeNewLines);\n  }\n\n  visibleRangeForPosition(position) {\n    return this._viewLines.visibleRangeForPosition(position);\n  }\n\n}\nexport class LineVisibleRanges {\n  constructor(outsideRenderedLine, lineNumber, ranges) {\n    this.outsideRenderedLine = outsideRenderedLine;\n    this.lineNumber = lineNumber;\n    this.ranges = ranges;\n  }\n\n}\nexport class HorizontalRange {\n  constructor(left, width) {\n    this._horizontalRangeBrand = undefined;\n    this.left = Math.round(left);\n    this.width = Math.round(width);\n  }\n\n  static from(ranges) {\n    const result = new Array(ranges.length);\n\n    for (let i = 0, len = ranges.length; i < len; i++) {\n      const range = ranges[i];\n      result[i] = new HorizontalRange(range.left, range.width);\n    }\n\n    return result;\n  }\n\n  toString() {\n    return `[${this.left},${this.width}]`;\n  }\n\n}\nexport class FloatHorizontalRange {\n  constructor(left, width) {\n    this._floatHorizontalRangeBrand = undefined;\n    this.left = left;\n    this.width = width;\n  }\n\n  toString() {\n    return `[${this.left},${this.width}]`;\n  }\n\n  static compare(a, b) {\n    return a.left - b.left;\n  }\n\n}\nexport class HorizontalPosition {\n  constructor(outsideRenderedLine, left) {\n    this.outsideRenderedLine = outsideRenderedLine;\n    this.originalLeft = left;\n    this.left = Math.round(this.originalLeft);\n  }\n\n}\nexport class VisibleRanges {\n  constructor(outsideRenderedLine, ranges) {\n    this.outsideRenderedLine = outsideRenderedLine;\n    this.ranges = ranges;\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/browser/view/renderingContext.js"],"names":["RestrictedRenderingContext","constructor","viewLayout","viewportData","_restrictedRenderingContextBrand","undefined","_viewLayout","scrollWidth","getScrollWidth","scrollHeight","getScrollHeight","visibleRange","bigNumbersDelta","vInfo","getCurrentViewport","scrollTop","top","scrollLeft","left","viewportWidth","width","viewportHeight","height","getScrolledTopFromAbsoluteTop","absoluteTop","getVerticalOffsetForLineNumber","lineNumber","getDecorationsInViewport","RenderingContext","viewLines","_renderingContextBrand","_viewLines","linesVisibleRangesForRange","range","includeNewLines","visibleRangeForPosition","position","LineVisibleRanges","outsideRenderedLine","ranges","HorizontalRange","_horizontalRangeBrand","Math","round","from","result","Array","length","i","len","toString","FloatHorizontalRange","_floatHorizontalRangeBrand","compare","a","b","HorizontalPosition","originalLeft","VisibleRanges"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,MAAMA,0BAAN,CAAiC;AACpCC,EAAAA,WAAW,CAACC,UAAD,EAAaC,YAAb,EAA2B;AAClC,SAAKC,gCAAL,GAAwCC,SAAxC;AACA,SAAKC,WAAL,GAAmBJ,UAAnB;AACA,SAAKC,YAAL,GAAoBA,YAApB;AACA,SAAKI,WAAL,GAAmB,KAAKD,WAAL,CAAiBE,cAAjB,EAAnB;AACA,SAAKC,YAAL,GAAoB,KAAKH,WAAL,CAAiBI,eAAjB,EAApB;AACA,SAAKC,YAAL,GAAoB,KAAKR,YAAL,CAAkBQ,YAAtC;AACA,SAAKC,eAAL,GAAuB,KAAKT,YAAL,CAAkBS,eAAzC;;AACA,UAAMC,KAAK,GAAG,KAAKP,WAAL,CAAiBQ,kBAAjB,EAAd;;AACA,SAAKC,SAAL,GAAiBF,KAAK,CAACG,GAAvB;AACA,SAAKC,UAAL,GAAkBJ,KAAK,CAACK,IAAxB;AACA,SAAKC,aAAL,GAAqBN,KAAK,CAACO,KAA3B;AACA,SAAKC,cAAL,GAAsBR,KAAK,CAACS,MAA5B;AACH;;AACDC,EAAAA,6BAA6B,CAACC,WAAD,EAAc;AACvC,WAAOA,WAAW,GAAG,KAAKT,SAA1B;AACH;;AACDU,EAAAA,8BAA8B,CAACC,UAAD,EAAa;AACvC,WAAO,KAAKpB,WAAL,CAAiBmB,8BAAjB,CAAgDC,UAAhD,CAAP;AACH;;AACDC,EAAAA,wBAAwB,GAAG;AACvB,WAAO,KAAKxB,YAAL,CAAkBwB,wBAAlB,EAAP;AACH;;AAvBmC;AAyBxC,OAAO,MAAMC,gBAAN,SAA+B5B,0BAA/B,CAA0D;AAC7DC,EAAAA,WAAW,CAACC,UAAD,EAAaC,YAAb,EAA2B0B,SAA3B,EAAsC;AAC7C,UAAM3B,UAAN,EAAkBC,YAAlB;AACA,SAAK2B,sBAAL,GAA8BzB,SAA9B;AACA,SAAK0B,UAAL,GAAkBF,SAAlB;AACH;;AACDG,EAAAA,0BAA0B,CAACC,KAAD,EAAQC,eAAR,EAAyB;AAC/C,WAAO,KAAKH,UAAL,CAAgBC,0BAAhB,CAA2CC,KAA3C,EAAkDC,eAAlD,CAAP;AACH;;AACDC,EAAAA,uBAAuB,CAACC,QAAD,EAAW;AAC9B,WAAO,KAAKL,UAAL,CAAgBI,uBAAhB,CAAwCC,QAAxC,CAAP;AACH;;AAX4D;AAajE,OAAO,MAAMC,iBAAN,CAAwB;AAC3BpC,EAAAA,WAAW,CAACqC,mBAAD,EAAsBZ,UAAtB,EAAkCa,MAAlC,EAA0C;AACjD,SAAKD,mBAAL,GAA2BA,mBAA3B;AACA,SAAKZ,UAAL,GAAkBA,UAAlB;AACA,SAAKa,MAAL,GAAcA,MAAd;AACH;;AAL0B;AAO/B,OAAO,MAAMC,eAAN,CAAsB;AACzBvC,EAAAA,WAAW,CAACiB,IAAD,EAAOE,KAAP,EAAc;AACrB,SAAKqB,qBAAL,GAA6BpC,SAA7B;AACA,SAAKa,IAAL,GAAYwB,IAAI,CAACC,KAAL,CAAWzB,IAAX,CAAZ;AACA,SAAKE,KAAL,GAAasB,IAAI,CAACC,KAAL,CAAWvB,KAAX,CAAb;AACH;;AACU,SAAJwB,IAAI,CAACL,MAAD,EAAS;AAChB,UAAMM,MAAM,GAAG,IAAIC,KAAJ,CAAUP,MAAM,CAACQ,MAAjB,CAAf;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGV,MAAM,CAACQ,MAA7B,EAAqCC,CAAC,GAAGC,GAAzC,EAA8CD,CAAC,EAA/C,EAAmD;AAC/C,YAAMf,KAAK,GAAGM,MAAM,CAACS,CAAD,CAApB;AACAH,MAAAA,MAAM,CAACG,CAAD,CAAN,GAAY,IAAIR,eAAJ,CAAoBP,KAAK,CAACf,IAA1B,EAAgCe,KAAK,CAACb,KAAtC,CAAZ;AACH;;AACD,WAAOyB,MAAP;AACH;;AACDK,EAAAA,QAAQ,GAAG;AACP,WAAQ,IAAG,KAAKhC,IAAK,IAAG,KAAKE,KAAM,GAAnC;AACH;;AAhBwB;AAkB7B,OAAO,MAAM+B,oBAAN,CAA2B;AAC9BlD,EAAAA,WAAW,CAACiB,IAAD,EAAOE,KAAP,EAAc;AACrB,SAAKgC,0BAAL,GAAkC/C,SAAlC;AACA,SAAKa,IAAL,GAAYA,IAAZ;AACA,SAAKE,KAAL,GAAaA,KAAb;AACH;;AACD8B,EAAAA,QAAQ,GAAG;AACP,WAAQ,IAAG,KAAKhC,IAAK,IAAG,KAAKE,KAAM,GAAnC;AACH;;AACa,SAAPiC,OAAO,CAACC,CAAD,EAAIC,CAAJ,EAAO;AACjB,WAAOD,CAAC,CAACpC,IAAF,GAASqC,CAAC,CAACrC,IAAlB;AACH;;AAX6B;AAalC,OAAO,MAAMsC,kBAAN,CAAyB;AAC5BvD,EAAAA,WAAW,CAACqC,mBAAD,EAAsBpB,IAAtB,EAA4B;AACnC,SAAKoB,mBAAL,GAA2BA,mBAA3B;AACA,SAAKmB,YAAL,GAAoBvC,IAApB;AACA,SAAKA,IAAL,GAAYwB,IAAI,CAACC,KAAL,CAAW,KAAKc,YAAhB,CAAZ;AACH;;AAL2B;AAOhC,OAAO,MAAMC,aAAN,CAAoB;AACvBzD,EAAAA,WAAW,CAACqC,mBAAD,EAAsBC,MAAtB,EAA8B;AACrC,SAAKD,mBAAL,GAA2BA,mBAA3B;AACA,SAAKC,MAAL,GAAcA,MAAd;AACH;;AAJsB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class RestrictedRenderingContext {\n    constructor(viewLayout, viewportData) {\n        this._restrictedRenderingContextBrand = undefined;\n        this._viewLayout = viewLayout;\n        this.viewportData = viewportData;\n        this.scrollWidth = this._viewLayout.getScrollWidth();\n        this.scrollHeight = this._viewLayout.getScrollHeight();\n        this.visibleRange = this.viewportData.visibleRange;\n        this.bigNumbersDelta = this.viewportData.bigNumbersDelta;\n        const vInfo = this._viewLayout.getCurrentViewport();\n        this.scrollTop = vInfo.top;\n        this.scrollLeft = vInfo.left;\n        this.viewportWidth = vInfo.width;\n        this.viewportHeight = vInfo.height;\n    }\n    getScrolledTopFromAbsoluteTop(absoluteTop) {\n        return absoluteTop - this.scrollTop;\n    }\n    getVerticalOffsetForLineNumber(lineNumber) {\n        return this._viewLayout.getVerticalOffsetForLineNumber(lineNumber);\n    }\n    getDecorationsInViewport() {\n        return this.viewportData.getDecorationsInViewport();\n    }\n}\nexport class RenderingContext extends RestrictedRenderingContext {\n    constructor(viewLayout, viewportData, viewLines) {\n        super(viewLayout, viewportData);\n        this._renderingContextBrand = undefined;\n        this._viewLines = viewLines;\n    }\n    linesVisibleRangesForRange(range, includeNewLines) {\n        return this._viewLines.linesVisibleRangesForRange(range, includeNewLines);\n    }\n    visibleRangeForPosition(position) {\n        return this._viewLines.visibleRangeForPosition(position);\n    }\n}\nexport class LineVisibleRanges {\n    constructor(outsideRenderedLine, lineNumber, ranges) {\n        this.outsideRenderedLine = outsideRenderedLine;\n        this.lineNumber = lineNumber;\n        this.ranges = ranges;\n    }\n}\nexport class HorizontalRange {\n    constructor(left, width) {\n        this._horizontalRangeBrand = undefined;\n        this.left = Math.round(left);\n        this.width = Math.round(width);\n    }\n    static from(ranges) {\n        const result = new Array(ranges.length);\n        for (let i = 0, len = ranges.length; i < len; i++) {\n            const range = ranges[i];\n            result[i] = new HorizontalRange(range.left, range.width);\n        }\n        return result;\n    }\n    toString() {\n        return `[${this.left},${this.width}]`;\n    }\n}\nexport class FloatHorizontalRange {\n    constructor(left, width) {\n        this._floatHorizontalRangeBrand = undefined;\n        this.left = left;\n        this.width = width;\n    }\n    toString() {\n        return `[${this.left},${this.width}]`;\n    }\n    static compare(a, b) {\n        return a.left - b.left;\n    }\n}\nexport class HorizontalPosition {\n    constructor(outsideRenderedLine, left) {\n        this.outsideRenderedLine = outsideRenderedLine;\n        this.originalLeft = left;\n        this.left = Math.round(this.originalLeft);\n    }\n}\nexport class VisibleRanges {\n    constructor(outsideRenderedLine, ranges) {\n        this.outsideRenderedLine = outsideRenderedLine;\n        this.ranges = ranges;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}