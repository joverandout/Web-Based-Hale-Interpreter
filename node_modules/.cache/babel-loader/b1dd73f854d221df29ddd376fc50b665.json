{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { illegalArgument } from '../../../base/common/errors.js';\nimport { AriaLabelProvider, ElectronAcceleratorLabelProvider, UILabelProvider } from '../../../base/common/keybindingLabels.js';\nimport { ResolvedKeybinding, ResolvedKeybindingPart } from '../../../base/common/keybindings.js';\nexport class BaseResolvedKeybinding extends ResolvedKeybinding {\n  constructor(os, parts) {\n    super();\n\n    if (parts.length === 0) {\n      throw illegalArgument(`parts`);\n    }\n\n    this._os = os;\n    this._parts = parts;\n  }\n\n  getLabel() {\n    return UILabelProvider.toLabel(this._os, this._parts, keybinding => this._getLabel(keybinding));\n  }\n\n  getAriaLabel() {\n    return AriaLabelProvider.toLabel(this._os, this._parts, keybinding => this._getAriaLabel(keybinding));\n  }\n\n  getElectronAccelerator() {\n    if (this._parts.length > 1) {\n      // [Electron Accelerators] Electron cannot handle chords\n      return null;\n    }\n\n    if (this._parts[0].isDuplicateModifierCase()) {\n      // [Electron Accelerators] Electron cannot handle modifier only keybindings\n      // e.g. \"shift shift\"\n      return null;\n    }\n\n    return ElectronAcceleratorLabelProvider.toLabel(this._os, this._parts, keybinding => this._getElectronAccelerator(keybinding));\n  }\n\n  isChord() {\n    return this._parts.length > 1;\n  }\n\n  getParts() {\n    return this._parts.map(keybinding => this._getPart(keybinding));\n  }\n\n  _getPart(keybinding) {\n    return new ResolvedKeybindingPart(keybinding.ctrlKey, keybinding.shiftKey, keybinding.altKey, keybinding.metaKey, this._getLabel(keybinding), this._getAriaLabel(keybinding));\n  }\n\n  getDispatchParts() {\n    return this._parts.map(keybinding => this._getDispatchPart(keybinding));\n  }\n\n  getSingleModifierDispatchParts() {\n    return this._parts.map(keybinding => this._getSingleModifierDispatchPart(keybinding));\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/platform/keybinding/common/baseResolvedKeybinding.js"],"names":["illegalArgument","AriaLabelProvider","ElectronAcceleratorLabelProvider","UILabelProvider","ResolvedKeybinding","ResolvedKeybindingPart","BaseResolvedKeybinding","constructor","os","parts","length","_os","_parts","getLabel","toLabel","keybinding","_getLabel","getAriaLabel","_getAriaLabel","getElectronAccelerator","isDuplicateModifierCase","_getElectronAccelerator","isChord","getParts","map","_getPart","ctrlKey","shiftKey","altKey","metaKey","getDispatchParts","_getDispatchPart","getSingleModifierDispatchParts","_getSingleModifierDispatchPart"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,eAAT,QAAgC,gCAAhC;AACA,SAASC,iBAAT,EAA4BC,gCAA5B,EAA8DC,eAA9D,QAAqF,0CAArF;AACA,SAASC,kBAAT,EAA6BC,sBAA7B,QAA2D,qCAA3D;AACA,OAAO,MAAMC,sBAAN,SAAqCF,kBAArC,CAAwD;AAC3DG,EAAAA,WAAW,CAACC,EAAD,EAAKC,KAAL,EAAY;AACnB;;AACA,QAAIA,KAAK,CAACC,MAAN,KAAiB,CAArB,EAAwB;AACpB,YAAMV,eAAe,CAAE,OAAF,CAArB;AACH;;AACD,SAAKW,GAAL,GAAWH,EAAX;AACA,SAAKI,MAAL,GAAcH,KAAd;AACH;;AACDI,EAAAA,QAAQ,GAAG;AACP,WAAOV,eAAe,CAACW,OAAhB,CAAwB,KAAKH,GAA7B,EAAkC,KAAKC,MAAvC,EAAgDG,UAAD,IAAgB,KAAKC,SAAL,CAAeD,UAAf,CAA/D,CAAP;AACH;;AACDE,EAAAA,YAAY,GAAG;AACX,WAAOhB,iBAAiB,CAACa,OAAlB,CAA0B,KAAKH,GAA/B,EAAoC,KAAKC,MAAzC,EAAkDG,UAAD,IAAgB,KAAKG,aAAL,CAAmBH,UAAnB,CAAjE,CAAP;AACH;;AACDI,EAAAA,sBAAsB,GAAG;AACrB,QAAI,KAAKP,MAAL,CAAYF,MAAZ,GAAqB,CAAzB,EAA4B;AACxB;AACA,aAAO,IAAP;AACH;;AACD,QAAI,KAAKE,MAAL,CAAY,CAAZ,EAAeQ,uBAAf,EAAJ,EAA8C;AAC1C;AACA;AACA,aAAO,IAAP;AACH;;AACD,WAAOlB,gCAAgC,CAACY,OAAjC,CAAyC,KAAKH,GAA9C,EAAmD,KAAKC,MAAxD,EAAiEG,UAAD,IAAgB,KAAKM,uBAAL,CAA6BN,UAA7B,CAAhF,CAAP;AACH;;AACDO,EAAAA,OAAO,GAAG;AACN,WAAQ,KAAKV,MAAL,CAAYF,MAAZ,GAAqB,CAA7B;AACH;;AACDa,EAAAA,QAAQ,GAAG;AACP,WAAO,KAAKX,MAAL,CAAYY,GAAZ,CAAiBT,UAAD,IAAgB,KAAKU,QAAL,CAAcV,UAAd,CAAhC,CAAP;AACH;;AACDU,EAAAA,QAAQ,CAACV,UAAD,EAAa;AACjB,WAAO,IAAIV,sBAAJ,CAA2BU,UAAU,CAACW,OAAtC,EAA+CX,UAAU,CAACY,QAA1D,EAAoEZ,UAAU,CAACa,MAA/E,EAAuFb,UAAU,CAACc,OAAlG,EAA2G,KAAKb,SAAL,CAAeD,UAAf,CAA3G,EAAuI,KAAKG,aAAL,CAAmBH,UAAnB,CAAvI,CAAP;AACH;;AACDe,EAAAA,gBAAgB,GAAG;AACf,WAAO,KAAKlB,MAAL,CAAYY,GAAZ,CAAiBT,UAAD,IAAgB,KAAKgB,gBAAL,CAAsBhB,UAAtB,CAAhC,CAAP;AACH;;AACDiB,EAAAA,8BAA8B,GAAG;AAC7B,WAAO,KAAKpB,MAAL,CAAYY,GAAZ,CAAiBT,UAAD,IAAgB,KAAKkB,8BAAL,CAAoClB,UAApC,CAAhC,CAAP;AACH;;AAzC0D","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { illegalArgument } from '../../../base/common/errors.js';\nimport { AriaLabelProvider, ElectronAcceleratorLabelProvider, UILabelProvider } from '../../../base/common/keybindingLabels.js';\nimport { ResolvedKeybinding, ResolvedKeybindingPart } from '../../../base/common/keybindings.js';\nexport class BaseResolvedKeybinding extends ResolvedKeybinding {\n    constructor(os, parts) {\n        super();\n        if (parts.length === 0) {\n            throw illegalArgument(`parts`);\n        }\n        this._os = os;\n        this._parts = parts;\n    }\n    getLabel() {\n        return UILabelProvider.toLabel(this._os, this._parts, (keybinding) => this._getLabel(keybinding));\n    }\n    getAriaLabel() {\n        return AriaLabelProvider.toLabel(this._os, this._parts, (keybinding) => this._getAriaLabel(keybinding));\n    }\n    getElectronAccelerator() {\n        if (this._parts.length > 1) {\n            // [Electron Accelerators] Electron cannot handle chords\n            return null;\n        }\n        if (this._parts[0].isDuplicateModifierCase()) {\n            // [Electron Accelerators] Electron cannot handle modifier only keybindings\n            // e.g. \"shift shift\"\n            return null;\n        }\n        return ElectronAcceleratorLabelProvider.toLabel(this._os, this._parts, (keybinding) => this._getElectronAccelerator(keybinding));\n    }\n    isChord() {\n        return (this._parts.length > 1);\n    }\n    getParts() {\n        return this._parts.map((keybinding) => this._getPart(keybinding));\n    }\n    _getPart(keybinding) {\n        return new ResolvedKeybindingPart(keybinding.ctrlKey, keybinding.shiftKey, keybinding.altKey, keybinding.metaKey, this._getLabel(keybinding), this._getAriaLabel(keybinding));\n    }\n    getDispatchParts() {\n        return this._parts.map((keybinding) => this._getDispatchPart(keybinding));\n    }\n    getSingleModifierDispatchParts() {\n        return this._parts.map((keybinding) => this._getSingleModifierDispatchPart(keybinding));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}