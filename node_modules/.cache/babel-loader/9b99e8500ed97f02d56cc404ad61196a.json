{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { getCharIndex } from './minimapCharSheet.js';\nimport { toUint8 } from '../../../../base/common/uint.js';\nexport class MinimapCharRenderer {\n  constructor(charData, scale) {\n    this.scale = scale;\n    this._minimapCharRendererBrand = undefined;\n    this.charDataNormal = MinimapCharRenderer.soften(charData, 12 / 15);\n    this.charDataLight = MinimapCharRenderer.soften(charData, 50 / 60);\n  }\n\n  static soften(input, ratio) {\n    const result = new Uint8ClampedArray(input.length);\n\n    for (let i = 0, len = input.length; i < len; i++) {\n      result[i] = toUint8(input[i] * ratio);\n    }\n\n    return result;\n  }\n\n  renderChar(target, dx, dy, chCode, color, foregroundAlpha, backgroundColor, backgroundAlpha, fontScale, useLighterFont, force1pxHeight) {\n    const charWidth = 1\n    /* BASE_CHAR_WIDTH */\n    * this.scale;\n    const charHeight = 2\n    /* BASE_CHAR_HEIGHT */\n    * this.scale;\n    const renderHeight = force1pxHeight ? 1 : charHeight;\n\n    if (dx + charWidth > target.width || dy + renderHeight > target.height) {\n      console.warn('bad render request outside image data');\n      return;\n    }\n\n    const charData = useLighterFont ? this.charDataLight : this.charDataNormal;\n    const charIndex = getCharIndex(chCode, fontScale);\n    const destWidth = target.width * 4\n    /* RGBA_CHANNELS_CNT */\n    ;\n    const backgroundR = backgroundColor.r;\n    const backgroundG = backgroundColor.g;\n    const backgroundB = backgroundColor.b;\n    const deltaR = color.r - backgroundR;\n    const deltaG = color.g - backgroundG;\n    const deltaB = color.b - backgroundB;\n    const destAlpha = Math.max(foregroundAlpha, backgroundAlpha);\n    const dest = target.data;\n    let sourceOffset = charIndex * charWidth * charHeight;\n    let row = dy * destWidth + dx * 4\n    /* RGBA_CHANNELS_CNT */\n    ;\n\n    for (let y = 0; y < renderHeight; y++) {\n      let column = row;\n\n      for (let x = 0; x < charWidth; x++) {\n        const c = charData[sourceOffset++] / 255 * (foregroundAlpha / 255);\n        dest[column++] = backgroundR + deltaR * c;\n        dest[column++] = backgroundG + deltaG * c;\n        dest[column++] = backgroundB + deltaB * c;\n        dest[column++] = destAlpha;\n      }\n\n      row += destWidth;\n    }\n  }\n\n  blockRenderChar(target, dx, dy, color, foregroundAlpha, backgroundColor, backgroundAlpha, force1pxHeight) {\n    const charWidth = 1\n    /* BASE_CHAR_WIDTH */\n    * this.scale;\n    const charHeight = 2\n    /* BASE_CHAR_HEIGHT */\n    * this.scale;\n    const renderHeight = force1pxHeight ? 1 : charHeight;\n\n    if (dx + charWidth > target.width || dy + renderHeight > target.height) {\n      console.warn('bad render request outside image data');\n      return;\n    }\n\n    const destWidth = target.width * 4\n    /* RGBA_CHANNELS_CNT */\n    ;\n    const c = 0.5 * (foregroundAlpha / 255);\n    const backgroundR = backgroundColor.r;\n    const backgroundG = backgroundColor.g;\n    const backgroundB = backgroundColor.b;\n    const deltaR = color.r - backgroundR;\n    const deltaG = color.g - backgroundG;\n    const deltaB = color.b - backgroundB;\n    const colorR = backgroundR + deltaR * c;\n    const colorG = backgroundG + deltaG * c;\n    const colorB = backgroundB + deltaB * c;\n    const destAlpha = Math.max(foregroundAlpha, backgroundAlpha);\n    const dest = target.data;\n    let row = dy * destWidth + dx * 4\n    /* RGBA_CHANNELS_CNT */\n    ;\n\n    for (let y = 0; y < renderHeight; y++) {\n      let column = row;\n\n      for (let x = 0; x < charWidth; x++) {\n        dest[column++] = colorR;\n        dest[column++] = colorG;\n        dest[column++] = colorB;\n        dest[column++] = destAlpha;\n      }\n\n      row += destWidth;\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/minimap/minimapCharRenderer.js"],"names":["getCharIndex","toUint8","MinimapCharRenderer","constructor","charData","scale","_minimapCharRendererBrand","undefined","charDataNormal","soften","charDataLight","input","ratio","result","Uint8ClampedArray","length","i","len","renderChar","target","dx","dy","chCode","color","foregroundAlpha","backgroundColor","backgroundAlpha","fontScale","useLighterFont","force1pxHeight","charWidth","charHeight","renderHeight","width","height","console","warn","charIndex","destWidth","backgroundR","r","backgroundG","g","backgroundB","b","deltaR","deltaG","deltaB","destAlpha","Math","max","dest","data","sourceOffset","row","y","column","x","c","blockRenderChar","colorR","colorG","colorB"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { getCharIndex } from './minimapCharSheet.js';\nimport { toUint8 } from '../../../../base/common/uint.js';\nexport class MinimapCharRenderer {\n    constructor(charData, scale) {\n        this.scale = scale;\n        this._minimapCharRendererBrand = undefined;\n        this.charDataNormal = MinimapCharRenderer.soften(charData, 12 / 15);\n        this.charDataLight = MinimapCharRenderer.soften(charData, 50 / 60);\n    }\n    static soften(input, ratio) {\n        const result = new Uint8ClampedArray(input.length);\n        for (let i = 0, len = input.length; i < len; i++) {\n            result[i] = toUint8(input[i] * ratio);\n        }\n        return result;\n    }\n    renderChar(target, dx, dy, chCode, color, foregroundAlpha, backgroundColor, backgroundAlpha, fontScale, useLighterFont, force1pxHeight) {\n        const charWidth = 1 /* BASE_CHAR_WIDTH */ * this.scale;\n        const charHeight = 2 /* BASE_CHAR_HEIGHT */ * this.scale;\n        const renderHeight = (force1pxHeight ? 1 : charHeight);\n        if (dx + charWidth > target.width || dy + renderHeight > target.height) {\n            console.warn('bad render request outside image data');\n            return;\n        }\n        const charData = useLighterFont ? this.charDataLight : this.charDataNormal;\n        const charIndex = getCharIndex(chCode, fontScale);\n        const destWidth = target.width * 4 /* RGBA_CHANNELS_CNT */;\n        const backgroundR = backgroundColor.r;\n        const backgroundG = backgroundColor.g;\n        const backgroundB = backgroundColor.b;\n        const deltaR = color.r - backgroundR;\n        const deltaG = color.g - backgroundG;\n        const deltaB = color.b - backgroundB;\n        const destAlpha = Math.max(foregroundAlpha, backgroundAlpha);\n        const dest = target.data;\n        let sourceOffset = charIndex * charWidth * charHeight;\n        let row = dy * destWidth + dx * 4 /* RGBA_CHANNELS_CNT */;\n        for (let y = 0; y < renderHeight; y++) {\n            let column = row;\n            for (let x = 0; x < charWidth; x++) {\n                const c = (charData[sourceOffset++] / 255) * (foregroundAlpha / 255);\n                dest[column++] = backgroundR + deltaR * c;\n                dest[column++] = backgroundG + deltaG * c;\n                dest[column++] = backgroundB + deltaB * c;\n                dest[column++] = destAlpha;\n            }\n            row += destWidth;\n        }\n    }\n    blockRenderChar(target, dx, dy, color, foregroundAlpha, backgroundColor, backgroundAlpha, force1pxHeight) {\n        const charWidth = 1 /* BASE_CHAR_WIDTH */ * this.scale;\n        const charHeight = 2 /* BASE_CHAR_HEIGHT */ * this.scale;\n        const renderHeight = (force1pxHeight ? 1 : charHeight);\n        if (dx + charWidth > target.width || dy + renderHeight > target.height) {\n            console.warn('bad render request outside image data');\n            return;\n        }\n        const destWidth = target.width * 4 /* RGBA_CHANNELS_CNT */;\n        const c = 0.5 * (foregroundAlpha / 255);\n        const backgroundR = backgroundColor.r;\n        const backgroundG = backgroundColor.g;\n        const backgroundB = backgroundColor.b;\n        const deltaR = color.r - backgroundR;\n        const deltaG = color.g - backgroundG;\n        const deltaB = color.b - backgroundB;\n        const colorR = backgroundR + deltaR * c;\n        const colorG = backgroundG + deltaG * c;\n        const colorB = backgroundB + deltaB * c;\n        const destAlpha = Math.max(foregroundAlpha, backgroundAlpha);\n        const dest = target.data;\n        let row = dy * destWidth + dx * 4 /* RGBA_CHANNELS_CNT */;\n        for (let y = 0; y < renderHeight; y++) {\n            let column = row;\n            for (let x = 0; x < charWidth; x++) {\n                dest[column++] = colorR;\n                dest[column++] = colorG;\n                dest[column++] = colorB;\n                dest[column++] = destAlpha;\n            }\n            row += destWidth;\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}