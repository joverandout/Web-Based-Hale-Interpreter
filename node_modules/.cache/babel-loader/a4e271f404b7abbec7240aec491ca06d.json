{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { RunOnceScheduler } from '../../../../base/common/async.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { DisposableStore, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { LRUCache } from '../../../../base/common/map.js';\nimport { assertType } from '../../../../base/common/types.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { DynamicCssRules } from '../../../browser/editorDom.js';\nimport { registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { EDITOR_FONT_DEFAULTS } from '../../../common/config/editorOptions.js';\nimport { Range } from '../../../common/core/range.js';\nimport * as languages from '../../../common/languages.js';\nimport { InjectedTextCursorStops } from '../../../common/model.js';\nimport { ModelDecorationInjectedTextOptions } from '../../../common/model/textModel.js';\nimport { ILanguageFeatureDebounceService } from '../../../common/services/languageFeatureDebounce.js';\nimport { ITextModelService } from '../../../common/services/resolverService.js';\nimport { ClickLinkGesture } from '../../gotoSymbol/browser/link/clickLinkGesture.js';\nimport { InlayHintAnchor, InlayHintsFragments } from './inlayHints.js';\nimport { goToDefinitionWithLocation, showGoToContextMenu } from './inlayHintsLocations.js';\nimport { CommandsRegistry, ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { createDecorator, IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { INotificationService, Severity } from '../../../../platform/notification/common/notification.js';\nimport * as colors from '../../../../platform/theme/common/colorRegistry.js';\nimport { themeColorFromId } from '../../../../platform/theme/common/themeService.js'; // --- hint caching service (per session)\n\nclass InlayHintsCache {\n  constructor() {\n    this._entries = new LRUCache(50);\n  }\n\n  get(model) {\n    const key = InlayHintsCache._key(model);\n\n    return this._entries.get(key);\n  }\n\n  set(model, value) {\n    const key = InlayHintsCache._key(model);\n\n    this._entries.set(key, value);\n  }\n\n  static _key(model) {\n    return `${model.uri.toString()}/${model.getVersionId()}`;\n  }\n\n}\n\nconst IInlayHintsCache = createDecorator('IInlayHintsCache');\nregisterSingleton(IInlayHintsCache, InlayHintsCache, true); // --- rendered label\n\nexport class RenderedInlayHintLabelPart {\n  constructor(item, index) {\n    this.item = item;\n    this.index = index;\n  }\n\n  get part() {\n    const label = this.item.hint.label;\n\n    if (typeof label === 'string') {\n      return {\n        label\n      };\n    } else {\n      return label[this.index];\n    }\n  }\n\n} // --- controller\n\nlet InlayHintsController = class InlayHintsController {\n  constructor(_editor, _featureDebounce, _inlayHintsCache, _commandService, _notificationService, _instaService) {\n    this._editor = _editor;\n    this._inlayHintsCache = _inlayHintsCache;\n    this._commandService = _commandService;\n    this._notificationService = _notificationService;\n    this._instaService = _instaService;\n    this._disposables = new DisposableStore();\n    this._sessionDisposables = new DisposableStore();\n    this._decorationsMetadata = new Map();\n    this._ruleFactory = new DynamicCssRules(this._editor);\n    this._debounceInfo = _featureDebounce.for(languages.InlayHintsProviderRegistry, 'InlayHint', {\n      min: 25\n    });\n\n    this._disposables.add(languages.InlayHintsProviderRegistry.onDidChange(() => this._update()));\n\n    this._disposables.add(_editor.onDidChangeModel(() => this._update()));\n\n    this._disposables.add(_editor.onDidChangeModelLanguage(() => this._update()));\n\n    this._disposables.add(_editor.onDidChangeConfiguration(e => {\n      if (e.hasChanged(127\n      /* inlayHints */\n      )) {\n        this._update();\n      }\n    }));\n\n    this._update();\n  }\n\n  static get(editor) {\n    var _a;\n\n    return (_a = editor.getContribution(InlayHintsController.ID)) !== null && _a !== void 0 ? _a : undefined;\n  }\n\n  dispose() {\n    this._sessionDisposables.dispose();\n\n    this._removeAllDecorations();\n\n    this._disposables.dispose();\n  }\n\n  _update() {\n    this._sessionDisposables.clear();\n\n    this._removeAllDecorations();\n\n    if (!this._editor.getOption(127\n    /* inlayHints */\n    ).enabled) {\n      return;\n    }\n\n    const model = this._editor.getModel();\n\n    if (!model || !languages.InlayHintsProviderRegistry.has(model)) {\n      return;\n    } // iff possible, quickly update from cache\n\n\n    const cached = this._inlayHintsCache.get(model);\n\n    if (cached) {\n      this._updateHintsDecorators([model.getFullModelRange()], cached);\n    }\n\n    this._sessionDisposables.add(toDisposable(() => {\n      // cache items when switching files etc\n      if (!model.isDisposed()) {\n        this._cacheHintsForFastRestore(model);\n      }\n    }));\n\n    let cts;\n    let watchedProviders = new Set();\n    const scheduler = new RunOnceScheduler(() => __awaiter(this, void 0, void 0, function* () {\n      const t1 = Date.now();\n      cts === null || cts === void 0 ? void 0 : cts.dispose(true);\n      cts = new CancellationTokenSource();\n      const listener = model.onWillDispose(() => cts === null || cts === void 0 ? void 0 : cts.cancel());\n\n      try {\n        const myToken = cts.token;\n        const inlayHints = yield InlayHintsFragments.create(model, this._getHintsRanges(), myToken);\n        scheduler.delay = this._debounceInfo.update(model, Date.now() - t1);\n\n        if (myToken.isCancellationRequested) {\n          inlayHints.dispose();\n          return;\n        } // listen to provider changes\n\n\n        for (const provider of inlayHints.provider) {\n          if (typeof provider.onDidChangeInlayHints === 'function' && !watchedProviders.has(provider)) {\n            watchedProviders.add(provider);\n\n            this._sessionDisposables.add(provider.onDidChangeInlayHints(() => {\n              if (!scheduler.isScheduled()) {\n                // ignore event when request is already scheduled\n                scheduler.schedule();\n              }\n            }));\n          }\n        }\n\n        this._sessionDisposables.add(inlayHints);\n\n        this._updateHintsDecorators(inlayHints.ranges, inlayHints.items);\n\n        this._cacheHintsForFastRestore(model);\n      } catch (err) {\n        onUnexpectedError(err);\n      } finally {\n        cts.dispose();\n        listener.dispose();\n      }\n    }), this._debounceInfo.get(model));\n\n    this._sessionDisposables.add(scheduler);\n\n    this._sessionDisposables.add(toDisposable(() => cts === null || cts === void 0 ? void 0 : cts.dispose(true)));\n\n    scheduler.schedule(0);\n\n    this._sessionDisposables.add(this._editor.onDidScrollChange(e => {\n      // update when scroll position changes\n      // uses scrollTopChanged has weak heuristic to differenatiate between scrolling due to\n      // typing or due to \"actual\" scrolling\n      if (e.scrollTopChanged || !scheduler.isScheduled()) {\n        scheduler.schedule();\n      }\n    }));\n\n    this._sessionDisposables.add(this._editor.onDidChangeModelContent(e => {\n      // update less aggressive when typing\n      const delay = Math.max(scheduler.delay, 1250);\n      scheduler.schedule(delay);\n    })); // mouse gestures\n\n\n    this._sessionDisposables.add(this._installLinkGesture());\n\n    this._sessionDisposables.add(this._installContextMenu());\n  }\n\n  _installLinkGesture() {\n    let removeHighlight = () => {};\n\n    const gesture = new ClickLinkGesture(this._editor);\n    gesture.onMouseMoveOrRelevantKeyDown(e => {\n      const [mouseEvent] = e;\n\n      const labelPart = this._getInlayHintLabelPart(mouseEvent);\n\n      const model = this._editor.getModel();\n\n      if (!labelPart || !mouseEvent.hasTriggerModifier || !model) {\n        removeHighlight();\n        return;\n      } // render link => when the modifier is pressed and when there is a command or location\n\n\n      if (mouseEvent.hasTriggerModifier && (labelPart.part.command || labelPart.part.location)) {\n        // resolve the item\n        const cts = new CancellationTokenSource();\n        labelPart.item.resolve(cts.token);\n        this._activeInlayHintPart = labelPart;\n        const lineNumber = this._activeInlayHintPart.item.hint.position.lineNumber;\n        const range = new Range(lineNumber, 1, lineNumber, model.getLineMaxColumn(lineNumber));\n        const lineHints = new Set();\n\n        for (const data of this._decorationsMetadata.values()) {\n          if (range.containsRange(data.item.anchor.range)) {\n            lineHints.add(data.item);\n          }\n        }\n\n        this._updateHintsDecorators([range], Array.from(lineHints));\n\n        removeHighlight = () => {\n          cts.dispose(true);\n          this._activeInlayHintPart = undefined;\n\n          this._updateHintsDecorators([range], Array.from(lineHints));\n        };\n      }\n    });\n    gesture.onCancel(removeHighlight);\n    gesture.onExecute(e => __awaiter(this, void 0, void 0, function* () {\n      var _a;\n\n      const label = this._getInlayHintLabelPart(e);\n\n      if (label) {\n        const part = label.part;\n\n        if (part.location) {\n          // location -> execute go to def\n          this._instaService.invokeFunction(goToDefinitionWithLocation, e, this._editor, part.location);\n        } else if (languages.Command.is(part.command)) {\n          // command -> execute it\n          try {\n            yield this._commandService.executeCommand(part.command.id, ...((_a = part.command.arguments) !== null && _a !== void 0 ? _a : []));\n          } catch (err) {\n            this._notificationService.notify({\n              severity: Severity.Error,\n              source: label.item.provider.displayName,\n              message: err\n            });\n          }\n        }\n      }\n    }));\n    return gesture;\n  }\n\n  _installContextMenu() {\n    return this._editor.onContextMenu(e => __awaiter(this, void 0, void 0, function* () {\n      if (!(e.event.target instanceof HTMLElement)) {\n        return;\n      }\n\n      const part = this._getInlayHintLabelPart(e);\n\n      if (part) {\n        yield this._instaService.invokeFunction(showGoToContextMenu, this._editor, e.event.target, part);\n      }\n    }));\n  }\n\n  _getInlayHintLabelPart(e) {\n    var _a;\n\n    if (e.target.type !== 6\n    /* CONTENT_TEXT */\n    ) {\n      return undefined;\n    }\n\n    const options = (_a = e.target.detail.injectedText) === null || _a === void 0 ? void 0 : _a.options;\n\n    if (options instanceof ModelDecorationInjectedTextOptions && (options === null || options === void 0 ? void 0 : options.attachedData) instanceof RenderedInlayHintLabelPart) {\n      return options.attachedData;\n    }\n\n    return undefined;\n  }\n\n  _cacheHintsForFastRestore(model) {\n    const items = new Map();\n\n    for (const [id, obj] of this._decorationsMetadata) {\n      if (items.has(obj.item)) {\n        // an inlay item can be rendered as multiple decorations\n        // but they will all uses the same range\n        continue;\n      }\n\n      let value = obj.item;\n      const range = model.getDecorationRange(id);\n\n      if (range) {\n        // update range with whatever the editor has tweaked it to\n        const anchor = new InlayHintAnchor(range, obj.item.anchor.direction);\n        value = obj.item.with({\n          anchor\n        });\n      }\n\n      items.set(obj.item, value);\n    }\n\n    this._inlayHintsCache.set(model, Array.from(items.values()));\n  }\n\n  _getHintsRanges() {\n    const extra = 30;\n\n    const model = this._editor.getModel();\n\n    const visibleRanges = this._editor.getVisibleRangesPlusViewportAboveBelow();\n\n    const result = [];\n\n    for (const range of visibleRanges.sort(Range.compareRangesUsingStarts)) {\n      const extendedRange = model.validateRange(new Range(range.startLineNumber - extra, range.startColumn, range.endLineNumber + extra, range.endColumn));\n\n      if (result.length === 0 || !Range.areIntersectingOrTouching(result[result.length - 1], extendedRange)) {\n        result.push(extendedRange);\n      } else {\n        result[result.length - 1] = Range.plusRange(result[result.length - 1], extendedRange);\n      }\n    }\n\n    return result;\n  }\n\n  _updateHintsDecorators(ranges, items) {\n    var _a, _b; // utils to collect/create injected text decorations\n\n\n    const newDecorationsData = [];\n\n    const addInjectedText = (item, ref, content, cursorStops, attachedData) => {\n      newDecorationsData.push({\n        item,\n        classNameRef: ref,\n        decoration: {\n          range: item.anchor.range,\n          options: {\n            // className: \"rangeHighlight\", // DEBUG highlight to see to what range a hint is attached\n            description: 'InlayHint',\n            showIfCollapsed: item.anchor.range.isEmpty(),\n            collapseOnReplaceEdit: !item.anchor.range.isEmpty(),\n            stickiness: 0\n            /* AlwaysGrowsWhenTypingAtEdges */\n            ,\n            [item.anchor.direction]: {\n              content,\n              inlineClassNameAffectsLetterSpacing: true,\n              inlineClassName: ref.className,\n              cursorStops,\n              attachedData\n            }\n          }\n        }\n      });\n    };\n\n    const addInjectedWhitespace = (item, isLast) => {\n      const marginRule = this._ruleFactory.createClassNameRef({\n        width: `${fontSize / 3 | 0}px`,\n        display: 'inline-block'\n      });\n\n      addInjectedText(item, marginRule, '\\u200a', isLast ? InjectedTextCursorStops.Right : InjectedTextCursorStops.None);\n    }; //\n\n\n    const {\n      fontSize,\n      fontFamily\n    } = this._getLayoutInfo();\n\n    const fontFamilyVar = '--code-editorInlayHintsFontFamily';\n\n    this._editor.getContainerDomNode().style.setProperty(fontFamilyVar, fontFamily);\n\n    for (const item of items) {\n      // whitespace leading the actual label\n      if (item.hint.paddingLeft) {\n        addInjectedWhitespace(item, false);\n      } // the label with its parts\n\n\n      const parts = typeof item.hint.label === 'string' ? [{\n        label: item.hint.label\n      }] : item.hint.label;\n\n      for (let i = 0; i < parts.length; i++) {\n        const part = parts[i];\n        const isFirst = i === 0;\n        const isLast = i === parts.length - 1;\n        const cssProperties = {\n          fontSize: `${fontSize}px`,\n          fontFamily: `var(${fontFamilyVar}), ${EDITOR_FONT_DEFAULTS.fontFamily}`,\n          verticalAlign: 'middle'\n        };\n\n        this._fillInColors(cssProperties, item.hint);\n\n        if ((part.command || part.location) && ((_a = this._activeInlayHintPart) === null || _a === void 0 ? void 0 : _a.item) === item && this._activeInlayHintPart.index === i) {\n          // active link!\n          cssProperties.textDecoration = 'underline';\n          cssProperties.cursor = 'pointer';\n          cssProperties.color = themeColorFromId(colors.editorActiveLinkForeground);\n        }\n\n        if (isFirst && isLast) {\n          // only element\n          cssProperties.padding = `1px ${Math.max(1, fontSize / 4) | 0}px`;\n          cssProperties.borderRadius = `${fontSize / 4 | 0}px`;\n        } else if (isFirst) {\n          // first element\n          cssProperties.padding = `1px 0 1px ${Math.max(1, fontSize / 4) | 0}px`;\n          cssProperties.borderRadius = `${fontSize / 4 | 0}px 0 0 ${fontSize / 4 | 0}px`;\n        } else if (isLast) {\n          // last element\n          cssProperties.padding = `1px ${Math.max(1, fontSize / 4) | 0}px 1px 0`;\n          cssProperties.borderRadius = `0 ${fontSize / 4 | 0}px ${fontSize / 4 | 0}px 0`;\n        } else {\n          cssProperties.padding = `1px 0 1px 0`;\n        }\n\n        addInjectedText(item, this._ruleFactory.createClassNameRef(cssProperties), fixSpace(part.label), isLast && !item.hint.paddingRight ? InjectedTextCursorStops.Right : InjectedTextCursorStops.None, new RenderedInlayHintLabelPart(item, i));\n      } // whitespace trailing the actual label\n\n\n      if (item.hint.paddingRight) {\n        addInjectedWhitespace(item, true);\n      }\n\n      if (newDecorationsData.length > InlayHintsController._MAX_DECORATORS) {\n        break;\n      }\n    } // collect all decoration ids that are affected by the ranges\n    // and only update those decorations\n\n\n    const decorationIdsToReplace = [];\n\n    for (const range of ranges) {\n      for (const {\n        id\n      } of (_b = this._editor.getDecorationsInRange(range)) !== null && _b !== void 0 ? _b : []) {\n        const metadata = this._decorationsMetadata.get(id);\n\n        if (metadata) {\n          decorationIdsToReplace.push(id);\n          metadata.classNameRef.dispose();\n\n          this._decorationsMetadata.delete(id);\n        }\n      }\n    }\n\n    const newDecorationIds = this._editor.deltaDecorations(decorationIdsToReplace, newDecorationsData.map(d => d.decoration));\n\n    for (let i = 0; i < newDecorationIds.length; i++) {\n      const data = newDecorationsData[i];\n\n      this._decorationsMetadata.set(newDecorationIds[i], {\n        item: data.item,\n        classNameRef: data.classNameRef\n      });\n    }\n  }\n\n  _fillInColors(props, hint) {\n    if (hint.kind === languages.InlayHintKind.Parameter) {\n      props.backgroundColor = themeColorFromId(colors.editorInlayHintParameterBackground);\n      props.color = themeColorFromId(colors.editorInlayHintParameterForeground);\n    } else if (hint.kind === languages.InlayHintKind.Type) {\n      props.backgroundColor = themeColorFromId(colors.editorInlayHintTypeBackground);\n      props.color = themeColorFromId(colors.editorInlayHintTypeForeground);\n    } else {\n      props.backgroundColor = themeColorFromId(colors.editorInlayHintBackground);\n      props.color = themeColorFromId(colors.editorInlayHintForeground);\n    }\n  }\n\n  _getLayoutInfo() {\n    const options = this._editor.getOption(127\n    /* inlayHints */\n    );\n\n    const editorFontSize = this._editor.getOption(46\n    /* fontSize */\n    );\n\n    let fontSize = options.fontSize;\n\n    if (!fontSize || fontSize < 5 || fontSize > editorFontSize) {\n      fontSize = editorFontSize * .9 | 0;\n    }\n\n    const fontFamily = options.fontFamily || this._editor.getOption(43\n    /* fontFamily */\n    );\n\n    return {\n      fontSize,\n      fontFamily\n    };\n  }\n\n  _removeAllDecorations() {\n    this._editor.deltaDecorations(Array.from(this._decorationsMetadata.keys()), []);\n\n    for (let obj of this._decorationsMetadata.values()) {\n      obj.classNameRef.dispose();\n    }\n\n    this._decorationsMetadata.clear();\n  }\n\n};\nInlayHintsController.ID = 'editor.contrib.InlayHints';\nInlayHintsController._MAX_DECORATORS = 1500;\nInlayHintsController = __decorate([__param(1, ILanguageFeatureDebounceService), __param(2, IInlayHintsCache), __param(3, ICommandService), __param(4, INotificationService), __param(5, IInstantiationService)], InlayHintsController);\nexport { InlayHintsController }; // Prevents the view from potentially visible whitespace\n\nfunction fixSpace(str) {\n  const noBreakWhitespace = '\\xa0';\n  return str.replace(/[ \\t]/g, noBreakWhitespace);\n}\n\nregisterEditorContribution(InlayHintsController.ID, InlayHintsController);\nCommandsRegistry.registerCommand('_executeInlayHintProvider', (accessor, ...args) => __awaiter(void 0, void 0, void 0, function* () {\n  const [uri, range] = args;\n  assertType(URI.isUri(uri));\n  assertType(Range.isIRange(range));\n  const ref = yield accessor.get(ITextModelService).createModelReference(uri);\n\n  try {\n    const model = yield InlayHintsFragments.create(ref.object.textEditorModel, [Range.lift(range)], CancellationToken.None);\n    const result = model.items.map(i => i.hint);\n    setTimeout(() => model.dispose(), 0); // dispose after sending to ext host\n\n    return result;\n  } finally {\n    ref.dispose();\n  }\n}));","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/contrib/inlayHints/browser/inlayHintsController.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","RunOnceScheduler","CancellationToken","CancellationTokenSource","onUnexpectedError","DisposableStore","toDisposable","LRUCache","assertType","URI","DynamicCssRules","registerEditorContribution","EDITOR_FONT_DEFAULTS","Range","languages","InjectedTextCursorStops","ModelDecorationInjectedTextOptions","ILanguageFeatureDebounceService","ITextModelService","ClickLinkGesture","InlayHintAnchor","InlayHintsFragments","goToDefinitionWithLocation","showGoToContextMenu","CommandsRegistry","ICommandService","registerSingleton","createDecorator","IInstantiationService","INotificationService","Severity","colors","themeColorFromId","InlayHintsCache","constructor","_entries","get","model","_key","set","uri","toString","getVersionId","IInlayHintsCache","RenderedInlayHintLabelPart","item","index","part","label","hint","InlayHintsController","_editor","_featureDebounce","_inlayHintsCache","_commandService","_notificationService","_instaService","_disposables","_sessionDisposables","_decorationsMetadata","Map","_ruleFactory","_debounceInfo","for","InlayHintsProviderRegistry","min","add","onDidChange","_update","onDidChangeModel","onDidChangeModelLanguage","onDidChangeConfiguration","hasChanged","editor","_a","getContribution","ID","undefined","dispose","_removeAllDecorations","clear","getOption","enabled","getModel","has","cached","_updateHintsDecorators","getFullModelRange","isDisposed","_cacheHintsForFastRestore","cts","watchedProviders","Set","scheduler","t1","Date","now","listener","onWillDispose","cancel","myToken","token","inlayHints","create","_getHintsRanges","delay","update","isCancellationRequested","provider","onDidChangeInlayHints","isScheduled","schedule","ranges","items","err","onDidScrollChange","scrollTopChanged","onDidChangeModelContent","Math","max","_installLinkGesture","_installContextMenu","removeHighlight","gesture","onMouseMoveOrRelevantKeyDown","mouseEvent","labelPart","_getInlayHintLabelPart","hasTriggerModifier","command","location","_activeInlayHintPart","lineNumber","position","range","getLineMaxColumn","lineHints","data","values","containsRange","anchor","Array","from","onCancel","onExecute","invokeFunction","Command","is","executeCommand","id","notify","severity","Error","source","displayName","message","onContextMenu","event","HTMLElement","type","options","detail","injectedText","attachedData","obj","getDecorationRange","direction","with","extra","visibleRanges","getVisibleRangesPlusViewportAboveBelow","sort","compareRangesUsingStarts","extendedRange","validateRange","startLineNumber","startColumn","endLineNumber","endColumn","areIntersectingOrTouching","push","plusRange","_b","newDecorationsData","addInjectedText","ref","content","cursorStops","classNameRef","decoration","description","showIfCollapsed","isEmpty","collapseOnReplaceEdit","stickiness","inlineClassNameAffectsLetterSpacing","inlineClassName","className","addInjectedWhitespace","isLast","marginRule","createClassNameRef","width","fontSize","display","Right","None","fontFamily","_getLayoutInfo","fontFamilyVar","getContainerDomNode","style","setProperty","paddingLeft","parts","isFirst","cssProperties","verticalAlign","_fillInColors","textDecoration","cursor","color","editorActiveLinkForeground","padding","borderRadius","fixSpace","paddingRight","_MAX_DECORATORS","decorationIdsToReplace","getDecorationsInRange","metadata","delete","newDecorationIds","deltaDecorations","map","props","kind","InlayHintKind","Parameter","backgroundColor","editorInlayHintParameterBackground","editorInlayHintParameterForeground","Type","editorInlayHintTypeBackground","editorInlayHintTypeForeground","editorInlayHintBackground","editorInlayHintForeground","editorFontSize","keys","str","noBreakWhitespace","replace","registerCommand","accessor","args","isUri","isIRange","createModelReference","object","textEditorModel","lift","setTimeout"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { RunOnceScheduler } from '../../../../base/common/async.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { DisposableStore, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { LRUCache } from '../../../../base/common/map.js';\nimport { assertType } from '../../../../base/common/types.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { DynamicCssRules } from '../../../browser/editorDom.js';\nimport { registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { EDITOR_FONT_DEFAULTS } from '../../../common/config/editorOptions.js';\nimport { Range } from '../../../common/core/range.js';\nimport * as languages from '../../../common/languages.js';\nimport { InjectedTextCursorStops } from '../../../common/model.js';\nimport { ModelDecorationInjectedTextOptions } from '../../../common/model/textModel.js';\nimport { ILanguageFeatureDebounceService } from '../../../common/services/languageFeatureDebounce.js';\nimport { ITextModelService } from '../../../common/services/resolverService.js';\nimport { ClickLinkGesture } from '../../gotoSymbol/browser/link/clickLinkGesture.js';\nimport { InlayHintAnchor, InlayHintsFragments } from './inlayHints.js';\nimport { goToDefinitionWithLocation, showGoToContextMenu } from './inlayHintsLocations.js';\nimport { CommandsRegistry, ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { createDecorator, IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { INotificationService, Severity } from '../../../../platform/notification/common/notification.js';\nimport * as colors from '../../../../platform/theme/common/colorRegistry.js';\nimport { themeColorFromId } from '../../../../platform/theme/common/themeService.js';\n// --- hint caching service (per session)\nclass InlayHintsCache {\n    constructor() {\n        this._entries = new LRUCache(50);\n    }\n    get(model) {\n        const key = InlayHintsCache._key(model);\n        return this._entries.get(key);\n    }\n    set(model, value) {\n        const key = InlayHintsCache._key(model);\n        this._entries.set(key, value);\n    }\n    static _key(model) {\n        return `${model.uri.toString()}/${model.getVersionId()}`;\n    }\n}\nconst IInlayHintsCache = createDecorator('IInlayHintsCache');\nregisterSingleton(IInlayHintsCache, InlayHintsCache, true);\n// --- rendered label\nexport class RenderedInlayHintLabelPart {\n    constructor(item, index) {\n        this.item = item;\n        this.index = index;\n    }\n    get part() {\n        const label = this.item.hint.label;\n        if (typeof label === 'string') {\n            return { label };\n        }\n        else {\n            return label[this.index];\n        }\n    }\n}\n// --- controller\nlet InlayHintsController = class InlayHintsController {\n    constructor(_editor, _featureDebounce, _inlayHintsCache, _commandService, _notificationService, _instaService) {\n        this._editor = _editor;\n        this._inlayHintsCache = _inlayHintsCache;\n        this._commandService = _commandService;\n        this._notificationService = _notificationService;\n        this._instaService = _instaService;\n        this._disposables = new DisposableStore();\n        this._sessionDisposables = new DisposableStore();\n        this._decorationsMetadata = new Map();\n        this._ruleFactory = new DynamicCssRules(this._editor);\n        this._debounceInfo = _featureDebounce.for(languages.InlayHintsProviderRegistry, 'InlayHint', { min: 25 });\n        this._disposables.add(languages.InlayHintsProviderRegistry.onDidChange(() => this._update()));\n        this._disposables.add(_editor.onDidChangeModel(() => this._update()));\n        this._disposables.add(_editor.onDidChangeModelLanguage(() => this._update()));\n        this._disposables.add(_editor.onDidChangeConfiguration(e => {\n            if (e.hasChanged(127 /* inlayHints */)) {\n                this._update();\n            }\n        }));\n        this._update();\n    }\n    static get(editor) {\n        var _a;\n        return (_a = editor.getContribution(InlayHintsController.ID)) !== null && _a !== void 0 ? _a : undefined;\n    }\n    dispose() {\n        this._sessionDisposables.dispose();\n        this._removeAllDecorations();\n        this._disposables.dispose();\n    }\n    _update() {\n        this._sessionDisposables.clear();\n        this._removeAllDecorations();\n        if (!this._editor.getOption(127 /* inlayHints */).enabled) {\n            return;\n        }\n        const model = this._editor.getModel();\n        if (!model || !languages.InlayHintsProviderRegistry.has(model)) {\n            return;\n        }\n        // iff possible, quickly update from cache\n        const cached = this._inlayHintsCache.get(model);\n        if (cached) {\n            this._updateHintsDecorators([model.getFullModelRange()], cached);\n        }\n        this._sessionDisposables.add(toDisposable(() => {\n            // cache items when switching files etc\n            if (!model.isDisposed()) {\n                this._cacheHintsForFastRestore(model);\n            }\n        }));\n        let cts;\n        let watchedProviders = new Set();\n        const scheduler = new RunOnceScheduler(() => __awaiter(this, void 0, void 0, function* () {\n            const t1 = Date.now();\n            cts === null || cts === void 0 ? void 0 : cts.dispose(true);\n            cts = new CancellationTokenSource();\n            const listener = model.onWillDispose(() => cts === null || cts === void 0 ? void 0 : cts.cancel());\n            try {\n                const myToken = cts.token;\n                const inlayHints = yield InlayHintsFragments.create(model, this._getHintsRanges(), myToken);\n                scheduler.delay = this._debounceInfo.update(model, Date.now() - t1);\n                if (myToken.isCancellationRequested) {\n                    inlayHints.dispose();\n                    return;\n                }\n                // listen to provider changes\n                for (const provider of inlayHints.provider) {\n                    if (typeof provider.onDidChangeInlayHints === 'function' && !watchedProviders.has(provider)) {\n                        watchedProviders.add(provider);\n                        this._sessionDisposables.add(provider.onDidChangeInlayHints(() => {\n                            if (!scheduler.isScheduled()) { // ignore event when request is already scheduled\n                                scheduler.schedule();\n                            }\n                        }));\n                    }\n                }\n                this._sessionDisposables.add(inlayHints);\n                this._updateHintsDecorators(inlayHints.ranges, inlayHints.items);\n                this._cacheHintsForFastRestore(model);\n            }\n            catch (err) {\n                onUnexpectedError(err);\n            }\n            finally {\n                cts.dispose();\n                listener.dispose();\n            }\n        }), this._debounceInfo.get(model));\n        this._sessionDisposables.add(scheduler);\n        this._sessionDisposables.add(toDisposable(() => cts === null || cts === void 0 ? void 0 : cts.dispose(true)));\n        scheduler.schedule(0);\n        this._sessionDisposables.add(this._editor.onDidScrollChange((e) => {\n            // update when scroll position changes\n            // uses scrollTopChanged has weak heuristic to differenatiate between scrolling due to\n            // typing or due to \"actual\" scrolling\n            if (e.scrollTopChanged || !scheduler.isScheduled()) {\n                scheduler.schedule();\n            }\n        }));\n        this._sessionDisposables.add(this._editor.onDidChangeModelContent((e) => {\n            // update less aggressive when typing\n            const delay = Math.max(scheduler.delay, 1250);\n            scheduler.schedule(delay);\n        }));\n        // mouse gestures\n        this._sessionDisposables.add(this._installLinkGesture());\n        this._sessionDisposables.add(this._installContextMenu());\n    }\n    _installLinkGesture() {\n        let removeHighlight = () => { };\n        const gesture = new ClickLinkGesture(this._editor);\n        gesture.onMouseMoveOrRelevantKeyDown(e => {\n            const [mouseEvent] = e;\n            const labelPart = this._getInlayHintLabelPart(mouseEvent);\n            const model = this._editor.getModel();\n            if (!labelPart || !mouseEvent.hasTriggerModifier || !model) {\n                removeHighlight();\n                return;\n            }\n            // render link => when the modifier is pressed and when there is a command or location\n            if (mouseEvent.hasTriggerModifier && (labelPart.part.command || labelPart.part.location)) {\n                // resolve the item\n                const cts = new CancellationTokenSource();\n                labelPart.item.resolve(cts.token);\n                this._activeInlayHintPart = labelPart;\n                const lineNumber = this._activeInlayHintPart.item.hint.position.lineNumber;\n                const range = new Range(lineNumber, 1, lineNumber, model.getLineMaxColumn(lineNumber));\n                const lineHints = new Set();\n                for (const data of this._decorationsMetadata.values()) {\n                    if (range.containsRange(data.item.anchor.range)) {\n                        lineHints.add(data.item);\n                    }\n                }\n                this._updateHintsDecorators([range], Array.from(lineHints));\n                removeHighlight = () => {\n                    cts.dispose(true);\n                    this._activeInlayHintPart = undefined;\n                    this._updateHintsDecorators([range], Array.from(lineHints));\n                };\n            }\n        });\n        gesture.onCancel(removeHighlight);\n        gesture.onExecute((e) => __awaiter(this, void 0, void 0, function* () {\n            var _a;\n            const label = this._getInlayHintLabelPart(e);\n            if (label) {\n                const part = label.part;\n                if (part.location) {\n                    // location -> execute go to def\n                    this._instaService.invokeFunction(goToDefinitionWithLocation, e, this._editor, part.location);\n                }\n                else if (languages.Command.is(part.command)) {\n                    // command -> execute it\n                    try {\n                        yield this._commandService.executeCommand(part.command.id, ...((_a = part.command.arguments) !== null && _a !== void 0 ? _a : []));\n                    }\n                    catch (err) {\n                        this._notificationService.notify({\n                            severity: Severity.Error,\n                            source: label.item.provider.displayName,\n                            message: err\n                        });\n                    }\n                }\n            }\n        }));\n        return gesture;\n    }\n    _installContextMenu() {\n        return this._editor.onContextMenu((e) => __awaiter(this, void 0, void 0, function* () {\n            if (!(e.event.target instanceof HTMLElement)) {\n                return;\n            }\n            const part = this._getInlayHintLabelPart(e);\n            if (part) {\n                yield this._instaService.invokeFunction(showGoToContextMenu, this._editor, e.event.target, part);\n            }\n        }));\n    }\n    _getInlayHintLabelPart(e) {\n        var _a;\n        if (e.target.type !== 6 /* CONTENT_TEXT */) {\n            return undefined;\n        }\n        const options = (_a = e.target.detail.injectedText) === null || _a === void 0 ? void 0 : _a.options;\n        if (options instanceof ModelDecorationInjectedTextOptions && (options === null || options === void 0 ? void 0 : options.attachedData) instanceof RenderedInlayHintLabelPart) {\n            return options.attachedData;\n        }\n        return undefined;\n    }\n    _cacheHintsForFastRestore(model) {\n        const items = new Map();\n        for (const [id, obj] of this._decorationsMetadata) {\n            if (items.has(obj.item)) {\n                // an inlay item can be rendered as multiple decorations\n                // but they will all uses the same range\n                continue;\n            }\n            let value = obj.item;\n            const range = model.getDecorationRange(id);\n            if (range) {\n                // update range with whatever the editor has tweaked it to\n                const anchor = new InlayHintAnchor(range, obj.item.anchor.direction);\n                value = obj.item.with({ anchor });\n            }\n            items.set(obj.item, value);\n        }\n        this._inlayHintsCache.set(model, Array.from(items.values()));\n    }\n    _getHintsRanges() {\n        const extra = 30;\n        const model = this._editor.getModel();\n        const visibleRanges = this._editor.getVisibleRangesPlusViewportAboveBelow();\n        const result = [];\n        for (const range of visibleRanges.sort(Range.compareRangesUsingStarts)) {\n            const extendedRange = model.validateRange(new Range(range.startLineNumber - extra, range.startColumn, range.endLineNumber + extra, range.endColumn));\n            if (result.length === 0 || !Range.areIntersectingOrTouching(result[result.length - 1], extendedRange)) {\n                result.push(extendedRange);\n            }\n            else {\n                result[result.length - 1] = Range.plusRange(result[result.length - 1], extendedRange);\n            }\n        }\n        return result;\n    }\n    _updateHintsDecorators(ranges, items) {\n        var _a, _b;\n        // utils to collect/create injected text decorations\n        const newDecorationsData = [];\n        const addInjectedText = (item, ref, content, cursorStops, attachedData) => {\n            newDecorationsData.push({\n                item,\n                classNameRef: ref,\n                decoration: {\n                    range: item.anchor.range,\n                    options: {\n                        // className: \"rangeHighlight\", // DEBUG highlight to see to what range a hint is attached\n                        description: 'InlayHint',\n                        showIfCollapsed: item.anchor.range.isEmpty(),\n                        collapseOnReplaceEdit: !item.anchor.range.isEmpty(),\n                        stickiness: 0 /* AlwaysGrowsWhenTypingAtEdges */,\n                        [item.anchor.direction]: {\n                            content,\n                            inlineClassNameAffectsLetterSpacing: true,\n                            inlineClassName: ref.className,\n                            cursorStops,\n                            attachedData\n                        }\n                    }\n                }\n            });\n        };\n        const addInjectedWhitespace = (item, isLast) => {\n            const marginRule = this._ruleFactory.createClassNameRef({\n                width: `${(fontSize / 3) | 0}px`,\n                display: 'inline-block'\n            });\n            addInjectedText(item, marginRule, '\\u200a', isLast ? InjectedTextCursorStops.Right : InjectedTextCursorStops.None);\n        };\n        //\n        const { fontSize, fontFamily } = this._getLayoutInfo();\n        const fontFamilyVar = '--code-editorInlayHintsFontFamily';\n        this._editor.getContainerDomNode().style.setProperty(fontFamilyVar, fontFamily);\n        for (const item of items) {\n            // whitespace leading the actual label\n            if (item.hint.paddingLeft) {\n                addInjectedWhitespace(item, false);\n            }\n            // the label with its parts\n            const parts = typeof item.hint.label === 'string'\n                ? [{ label: item.hint.label }]\n                : item.hint.label;\n            for (let i = 0; i < parts.length; i++) {\n                const part = parts[i];\n                const isFirst = i === 0;\n                const isLast = i === parts.length - 1;\n                const cssProperties = {\n                    fontSize: `${fontSize}px`,\n                    fontFamily: `var(${fontFamilyVar}), ${EDITOR_FONT_DEFAULTS.fontFamily}`,\n                    verticalAlign: 'middle',\n                };\n                this._fillInColors(cssProperties, item.hint);\n                if ((part.command || part.location) && ((_a = this._activeInlayHintPart) === null || _a === void 0 ? void 0 : _a.item) === item && this._activeInlayHintPart.index === i) {\n                    // active link!\n                    cssProperties.textDecoration = 'underline';\n                    cssProperties.cursor = 'pointer';\n                    cssProperties.color = themeColorFromId(colors.editorActiveLinkForeground);\n                }\n                if (isFirst && isLast) {\n                    // only element\n                    cssProperties.padding = `1px ${Math.max(1, fontSize / 4) | 0}px`;\n                    cssProperties.borderRadius = `${(fontSize / 4) | 0}px`;\n                }\n                else if (isFirst) {\n                    // first element\n                    cssProperties.padding = `1px 0 1px ${Math.max(1, fontSize / 4) | 0}px`;\n                    cssProperties.borderRadius = `${(fontSize / 4) | 0}px 0 0 ${(fontSize / 4) | 0}px`;\n                }\n                else if (isLast) {\n                    // last element\n                    cssProperties.padding = `1px ${Math.max(1, fontSize / 4) | 0}px 1px 0`;\n                    cssProperties.borderRadius = `0 ${(fontSize / 4) | 0}px ${(fontSize / 4) | 0}px 0`;\n                }\n                else {\n                    cssProperties.padding = `1px 0 1px 0`;\n                }\n                addInjectedText(item, this._ruleFactory.createClassNameRef(cssProperties), fixSpace(part.label), isLast && !item.hint.paddingRight ? InjectedTextCursorStops.Right : InjectedTextCursorStops.None, new RenderedInlayHintLabelPart(item, i));\n            }\n            // whitespace trailing the actual label\n            if (item.hint.paddingRight) {\n                addInjectedWhitespace(item, true);\n            }\n            if (newDecorationsData.length > InlayHintsController._MAX_DECORATORS) {\n                break;\n            }\n        }\n        // collect all decoration ids that are affected by the ranges\n        // and only update those decorations\n        const decorationIdsToReplace = [];\n        for (const range of ranges) {\n            for (const { id } of (_b = this._editor.getDecorationsInRange(range)) !== null && _b !== void 0 ? _b : []) {\n                const metadata = this._decorationsMetadata.get(id);\n                if (metadata) {\n                    decorationIdsToReplace.push(id);\n                    metadata.classNameRef.dispose();\n                    this._decorationsMetadata.delete(id);\n                }\n            }\n        }\n        const newDecorationIds = this._editor.deltaDecorations(decorationIdsToReplace, newDecorationsData.map(d => d.decoration));\n        for (let i = 0; i < newDecorationIds.length; i++) {\n            const data = newDecorationsData[i];\n            this._decorationsMetadata.set(newDecorationIds[i], { item: data.item, classNameRef: data.classNameRef });\n        }\n    }\n    _fillInColors(props, hint) {\n        if (hint.kind === languages.InlayHintKind.Parameter) {\n            props.backgroundColor = themeColorFromId(colors.editorInlayHintParameterBackground);\n            props.color = themeColorFromId(colors.editorInlayHintParameterForeground);\n        }\n        else if (hint.kind === languages.InlayHintKind.Type) {\n            props.backgroundColor = themeColorFromId(colors.editorInlayHintTypeBackground);\n            props.color = themeColorFromId(colors.editorInlayHintTypeForeground);\n        }\n        else {\n            props.backgroundColor = themeColorFromId(colors.editorInlayHintBackground);\n            props.color = themeColorFromId(colors.editorInlayHintForeground);\n        }\n    }\n    _getLayoutInfo() {\n        const options = this._editor.getOption(127 /* inlayHints */);\n        const editorFontSize = this._editor.getOption(46 /* fontSize */);\n        let fontSize = options.fontSize;\n        if (!fontSize || fontSize < 5 || fontSize > editorFontSize) {\n            fontSize = (editorFontSize * .9) | 0;\n        }\n        const fontFamily = options.fontFamily || this._editor.getOption(43 /* fontFamily */);\n        return { fontSize, fontFamily };\n    }\n    _removeAllDecorations() {\n        this._editor.deltaDecorations(Array.from(this._decorationsMetadata.keys()), []);\n        for (let obj of this._decorationsMetadata.values()) {\n            obj.classNameRef.dispose();\n        }\n        this._decorationsMetadata.clear();\n    }\n};\nInlayHintsController.ID = 'editor.contrib.InlayHints';\nInlayHintsController._MAX_DECORATORS = 1500;\nInlayHintsController = __decorate([\n    __param(1, ILanguageFeatureDebounceService),\n    __param(2, IInlayHintsCache),\n    __param(3, ICommandService),\n    __param(4, INotificationService),\n    __param(5, IInstantiationService)\n], InlayHintsController);\nexport { InlayHintsController };\n// Prevents the view from potentially visible whitespace\nfunction fixSpace(str) {\n    const noBreakWhitespace = '\\xa0';\n    return str.replace(/[ \\t]/g, noBreakWhitespace);\n}\nregisterEditorContribution(InlayHintsController.ID, InlayHintsController);\nCommandsRegistry.registerCommand('_executeInlayHintProvider', (accessor, ...args) => __awaiter(void 0, void 0, void 0, function* () {\n    const [uri, range] = args;\n    assertType(URI.isUri(uri));\n    assertType(Range.isIRange(range));\n    const ref = yield accessor.get(ITextModelService).createModelReference(uri);\n    try {\n        const model = yield InlayHintsFragments.create(ref.object.textEditorModel, [Range.lift(range)], CancellationToken.None);\n        const result = model.items.map(i => i.hint);\n        setTimeout(() => model.dispose(), 0); // dispose after sending to ext host\n        return result;\n    }\n    finally {\n        ref.dispose();\n    }\n}));\n"]},"metadata":{},"sourceType":"module"}