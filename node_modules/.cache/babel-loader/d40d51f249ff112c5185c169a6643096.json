{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nimport { DeferredPromise } from '../../../base/common/async.js';\nimport { CancellationTokenSource } from '../../../base/common/cancellation.js';\nimport { once } from '../../../base/common/functional.js';\nimport { Disposable, DisposableStore, toDisposable } from '../../../base/common/lifecycle.js';\nimport { IInstantiationService } from '../../instantiation/common/instantiation.js';\nimport { DefaultQuickAccessFilterValue, Extensions } from '../common/quickAccess.js';\nimport { IQuickInputService, ItemActivation } from '../common/quickInput.js';\nimport { Registry } from '../../registry/common/platform.js';\nlet QuickAccessController = class QuickAccessController extends Disposable {\n  constructor(quickInputService, instantiationService) {\n    super();\n    this.quickInputService = quickInputService;\n    this.instantiationService = instantiationService;\n    this.registry = Registry.as(Extensions.Quickaccess);\n    this.mapProviderToDescriptor = new Map();\n    this.lastAcceptedPickerValues = new Map();\n    this.visibleQuickAccess = undefined;\n  }\n\n  show(value = '', options) {\n    this.doShowOrPick(value, false, options);\n  }\n\n  doShowOrPick(value, pick, options) {\n    var _a; // Find provider for the value to show\n\n\n    const [provider, descriptor] = this.getOrInstantiateProvider(value); // Return early if quick access is already showing on that same prefix\n\n    const visibleQuickAccess = this.visibleQuickAccess;\n    const visibleDescriptor = visibleQuickAccess === null || visibleQuickAccess === void 0 ? void 0 : visibleQuickAccess.descriptor;\n\n    if (visibleQuickAccess && descriptor && visibleDescriptor === descriptor) {\n      // Apply value only if it is more specific than the prefix\n      // from the provider and we are not instructed to preserve\n      if (value !== descriptor.prefix && !(options === null || options === void 0 ? void 0 : options.preserveValue)) {\n        visibleQuickAccess.picker.value = value;\n      } // Always adjust selection\n\n\n      this.adjustValueSelection(visibleQuickAccess.picker, descriptor, options);\n      return;\n    } // Rewrite the filter value based on certain rules unless disabled\n\n\n    if (descriptor && !(options === null || options === void 0 ? void 0 : options.preserveValue)) {\n      let newValue = undefined; // If we have a visible provider with a value, take it's filter value but\n      // rewrite to new provider prefix in case they differ\n\n      if (visibleQuickAccess && visibleDescriptor && visibleDescriptor !== descriptor) {\n        const newValueCandidateWithoutPrefix = visibleQuickAccess.value.substr(visibleDescriptor.prefix.length);\n\n        if (newValueCandidateWithoutPrefix) {\n          newValue = `${descriptor.prefix}${newValueCandidateWithoutPrefix}`;\n        }\n      } // Otherwise, take a default value as instructed\n\n\n      if (!newValue) {\n        const defaultFilterValue = provider === null || provider === void 0 ? void 0 : provider.defaultFilterValue;\n\n        if (defaultFilterValue === DefaultQuickAccessFilterValue.LAST) {\n          newValue = this.lastAcceptedPickerValues.get(descriptor);\n        } else if (typeof defaultFilterValue === 'string') {\n          newValue = `${descriptor.prefix}${defaultFilterValue}`;\n        }\n      }\n\n      if (typeof newValue === 'string') {\n        value = newValue;\n      }\n    } // Create a picker for the provider to use with the initial value\n    // and adjust the filtering to exclude the prefix from filtering\n\n\n    const disposables = new DisposableStore();\n    const picker = disposables.add(this.quickInputService.createQuickPick());\n    picker.value = value;\n    this.adjustValueSelection(picker, descriptor, options);\n    picker.placeholder = descriptor === null || descriptor === void 0 ? void 0 : descriptor.placeholder;\n    picker.quickNavigate = options === null || options === void 0 ? void 0 : options.quickNavigateConfiguration;\n    picker.hideInput = !!picker.quickNavigate && !visibleQuickAccess; // only hide input if there was no picker opened already\n\n    if (typeof (options === null || options === void 0 ? void 0 : options.itemActivation) === 'number' || (options === null || options === void 0 ? void 0 : options.quickNavigateConfiguration)) {\n      picker.itemActivation = (_a = options === null || options === void 0 ? void 0 : options.itemActivation) !== null && _a !== void 0 ? _a : ItemActivation.SECOND\n      /* quick nav is always second */\n      ;\n    }\n\n    picker.contextKey = descriptor === null || descriptor === void 0 ? void 0 : descriptor.contextKey;\n\n    picker.filterValue = value => value.substring(descriptor ? descriptor.prefix.length : 0);\n\n    if (descriptor === null || descriptor === void 0 ? void 0 : descriptor.placeholder) {\n      picker.ariaLabel = descriptor === null || descriptor === void 0 ? void 0 : descriptor.placeholder;\n    } // Pick mode: setup a promise that can be resolved\n    // with the selected items and prevent execution\n\n\n    let pickPromise = undefined;\n\n    if (pick) {\n      pickPromise = new DeferredPromise();\n      disposables.add(once(picker.onWillAccept)(e => {\n        e.veto();\n        picker.hide();\n      }));\n    } // Register listeners\n\n\n    disposables.add(this.registerPickerListeners(picker, provider, descriptor, value)); // Ask provider to fill the picker as needed if we have one\n    // and pass over a cancellation token that will indicate when\n    // the picker is hiding without a pick being made.\n\n    const cts = disposables.add(new CancellationTokenSource());\n\n    if (provider) {\n      disposables.add(provider.provide(picker, cts.token));\n    } // Finally, trigger disposal and cancellation when the picker\n    // hides depending on items selected or not.\n\n\n    once(picker.onDidHide)(() => {\n      if (picker.selectedItems.length === 0) {\n        cts.cancel();\n      } // Start to dispose once picker hides\n\n\n      disposables.dispose(); // Resolve pick promise with selected items\n\n      pickPromise === null || pickPromise === void 0 ? void 0 : pickPromise.complete(picker.selectedItems.slice(0));\n    }); // Finally, show the picker. This is important because a provider\n    // may not call this and then our disposables would leak that rely\n    // on the onDidHide event.\n\n    picker.show(); // Pick mode: return with promise\n\n    if (pick) {\n      return pickPromise === null || pickPromise === void 0 ? void 0 : pickPromise.p;\n    }\n  }\n\n  adjustValueSelection(picker, descriptor, options) {\n    var _a;\n\n    let valueSelection; // Preserve: just always put the cursor at the end\n\n    if (options === null || options === void 0 ? void 0 : options.preserveValue) {\n      valueSelection = [picker.value.length, picker.value.length];\n    } // Otherwise: select the value up until the prefix\n    else {\n      valueSelection = [(_a = descriptor === null || descriptor === void 0 ? void 0 : descriptor.prefix.length) !== null && _a !== void 0 ? _a : 0, picker.value.length];\n    }\n\n    picker.valueSelection = valueSelection;\n  }\n\n  registerPickerListeners(picker, provider, descriptor, value) {\n    const disposables = new DisposableStore(); // Remember as last visible picker and clean up once picker get's disposed\n\n    const visibleQuickAccess = this.visibleQuickAccess = {\n      picker,\n      descriptor,\n      value\n    };\n    disposables.add(toDisposable(() => {\n      if (visibleQuickAccess === this.visibleQuickAccess) {\n        this.visibleQuickAccess = undefined;\n      }\n    })); // Whenever the value changes, check if the provider has\n    // changed and if so - re-create the picker from the beginning\n\n    disposables.add(picker.onDidChangeValue(value => {\n      const [providerForValue] = this.getOrInstantiateProvider(value);\n\n      if (providerForValue !== provider) {\n        this.show(value, {\n          preserveValue: true\n        }\n        /* do not rewrite value from user typing! */\n        );\n      } else {\n        visibleQuickAccess.value = value; // remember the value in our visible one\n      }\n    })); // Remember picker input for future use when accepting\n\n    if (descriptor) {\n      disposables.add(picker.onDidAccept(() => {\n        this.lastAcceptedPickerValues.set(descriptor, picker.value);\n      }));\n    }\n\n    return disposables;\n  }\n\n  getOrInstantiateProvider(value) {\n    const providerDescriptor = this.registry.getQuickAccessProvider(value);\n\n    if (!providerDescriptor) {\n      return [undefined, undefined];\n    }\n\n    let provider = this.mapProviderToDescriptor.get(providerDescriptor);\n\n    if (!provider) {\n      provider = this.instantiationService.createInstance(providerDescriptor.ctor);\n      this.mapProviderToDescriptor.set(providerDescriptor, provider);\n    }\n\n    return [provider, providerDescriptor];\n  }\n\n};\nQuickAccessController = __decorate([__param(0, IQuickInputService), __param(1, IInstantiationService)], QuickAccessController);\nexport { QuickAccessController };","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/platform/quickinput/browser/quickAccess.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","DeferredPromise","CancellationTokenSource","once","Disposable","DisposableStore","toDisposable","IInstantiationService","DefaultQuickAccessFilterValue","Extensions","IQuickInputService","ItemActivation","Registry","QuickAccessController","constructor","quickInputService","instantiationService","registry","as","Quickaccess","mapProviderToDescriptor","Map","lastAcceptedPickerValues","visibleQuickAccess","undefined","show","value","options","doShowOrPick","pick","_a","provider","descriptor","getOrInstantiateProvider","visibleDescriptor","prefix","preserveValue","picker","adjustValueSelection","newValue","newValueCandidateWithoutPrefix","substr","defaultFilterValue","LAST","get","disposables","add","createQuickPick","placeholder","quickNavigate","quickNavigateConfiguration","hideInput","itemActivation","SECOND","contextKey","filterValue","substring","ariaLabel","pickPromise","onWillAccept","e","veto","hide","registerPickerListeners","cts","provide","token","onDidHide","selectedItems","cancel","dispose","complete","slice","p","valueSelection","onDidChangeValue","providerForValue","onDidAccept","set","providerDescriptor","getQuickAccessProvider","createInstance","ctor"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { DeferredPromise } from '../../../base/common/async.js';\nimport { CancellationTokenSource } from '../../../base/common/cancellation.js';\nimport { once } from '../../../base/common/functional.js';\nimport { Disposable, DisposableStore, toDisposable } from '../../../base/common/lifecycle.js';\nimport { IInstantiationService } from '../../instantiation/common/instantiation.js';\nimport { DefaultQuickAccessFilterValue, Extensions } from '../common/quickAccess.js';\nimport { IQuickInputService, ItemActivation } from '../common/quickInput.js';\nimport { Registry } from '../../registry/common/platform.js';\nlet QuickAccessController = class QuickAccessController extends Disposable {\n    constructor(quickInputService, instantiationService) {\n        super();\n        this.quickInputService = quickInputService;\n        this.instantiationService = instantiationService;\n        this.registry = Registry.as(Extensions.Quickaccess);\n        this.mapProviderToDescriptor = new Map();\n        this.lastAcceptedPickerValues = new Map();\n        this.visibleQuickAccess = undefined;\n    }\n    show(value = '', options) {\n        this.doShowOrPick(value, false, options);\n    }\n    doShowOrPick(value, pick, options) {\n        var _a;\n        // Find provider for the value to show\n        const [provider, descriptor] = this.getOrInstantiateProvider(value);\n        // Return early if quick access is already showing on that same prefix\n        const visibleQuickAccess = this.visibleQuickAccess;\n        const visibleDescriptor = visibleQuickAccess === null || visibleQuickAccess === void 0 ? void 0 : visibleQuickAccess.descriptor;\n        if (visibleQuickAccess && descriptor && visibleDescriptor === descriptor) {\n            // Apply value only if it is more specific than the prefix\n            // from the provider and we are not instructed to preserve\n            if (value !== descriptor.prefix && !(options === null || options === void 0 ? void 0 : options.preserveValue)) {\n                visibleQuickAccess.picker.value = value;\n            }\n            // Always adjust selection\n            this.adjustValueSelection(visibleQuickAccess.picker, descriptor, options);\n            return;\n        }\n        // Rewrite the filter value based on certain rules unless disabled\n        if (descriptor && !(options === null || options === void 0 ? void 0 : options.preserveValue)) {\n            let newValue = undefined;\n            // If we have a visible provider with a value, take it's filter value but\n            // rewrite to new provider prefix in case they differ\n            if (visibleQuickAccess && visibleDescriptor && visibleDescriptor !== descriptor) {\n                const newValueCandidateWithoutPrefix = visibleQuickAccess.value.substr(visibleDescriptor.prefix.length);\n                if (newValueCandidateWithoutPrefix) {\n                    newValue = `${descriptor.prefix}${newValueCandidateWithoutPrefix}`;\n                }\n            }\n            // Otherwise, take a default value as instructed\n            if (!newValue) {\n                const defaultFilterValue = provider === null || provider === void 0 ? void 0 : provider.defaultFilterValue;\n                if (defaultFilterValue === DefaultQuickAccessFilterValue.LAST) {\n                    newValue = this.lastAcceptedPickerValues.get(descriptor);\n                }\n                else if (typeof defaultFilterValue === 'string') {\n                    newValue = `${descriptor.prefix}${defaultFilterValue}`;\n                }\n            }\n            if (typeof newValue === 'string') {\n                value = newValue;\n            }\n        }\n        // Create a picker for the provider to use with the initial value\n        // and adjust the filtering to exclude the prefix from filtering\n        const disposables = new DisposableStore();\n        const picker = disposables.add(this.quickInputService.createQuickPick());\n        picker.value = value;\n        this.adjustValueSelection(picker, descriptor, options);\n        picker.placeholder = descriptor === null || descriptor === void 0 ? void 0 : descriptor.placeholder;\n        picker.quickNavigate = options === null || options === void 0 ? void 0 : options.quickNavigateConfiguration;\n        picker.hideInput = !!picker.quickNavigate && !visibleQuickAccess; // only hide input if there was no picker opened already\n        if (typeof (options === null || options === void 0 ? void 0 : options.itemActivation) === 'number' || (options === null || options === void 0 ? void 0 : options.quickNavigateConfiguration)) {\n            picker.itemActivation = (_a = options === null || options === void 0 ? void 0 : options.itemActivation) !== null && _a !== void 0 ? _a : ItemActivation.SECOND /* quick nav is always second */;\n        }\n        picker.contextKey = descriptor === null || descriptor === void 0 ? void 0 : descriptor.contextKey;\n        picker.filterValue = (value) => value.substring(descriptor ? descriptor.prefix.length : 0);\n        if (descriptor === null || descriptor === void 0 ? void 0 : descriptor.placeholder) {\n            picker.ariaLabel = descriptor === null || descriptor === void 0 ? void 0 : descriptor.placeholder;\n        }\n        // Pick mode: setup a promise that can be resolved\n        // with the selected items and prevent execution\n        let pickPromise = undefined;\n        if (pick) {\n            pickPromise = new DeferredPromise();\n            disposables.add(once(picker.onWillAccept)(e => {\n                e.veto();\n                picker.hide();\n            }));\n        }\n        // Register listeners\n        disposables.add(this.registerPickerListeners(picker, provider, descriptor, value));\n        // Ask provider to fill the picker as needed if we have one\n        // and pass over a cancellation token that will indicate when\n        // the picker is hiding without a pick being made.\n        const cts = disposables.add(new CancellationTokenSource());\n        if (provider) {\n            disposables.add(provider.provide(picker, cts.token));\n        }\n        // Finally, trigger disposal and cancellation when the picker\n        // hides depending on items selected or not.\n        once(picker.onDidHide)(() => {\n            if (picker.selectedItems.length === 0) {\n                cts.cancel();\n            }\n            // Start to dispose once picker hides\n            disposables.dispose();\n            // Resolve pick promise with selected items\n            pickPromise === null || pickPromise === void 0 ? void 0 : pickPromise.complete(picker.selectedItems.slice(0));\n        });\n        // Finally, show the picker. This is important because a provider\n        // may not call this and then our disposables would leak that rely\n        // on the onDidHide event.\n        picker.show();\n        // Pick mode: return with promise\n        if (pick) {\n            return pickPromise === null || pickPromise === void 0 ? void 0 : pickPromise.p;\n        }\n    }\n    adjustValueSelection(picker, descriptor, options) {\n        var _a;\n        let valueSelection;\n        // Preserve: just always put the cursor at the end\n        if (options === null || options === void 0 ? void 0 : options.preserveValue) {\n            valueSelection = [picker.value.length, picker.value.length];\n        }\n        // Otherwise: select the value up until the prefix\n        else {\n            valueSelection = [(_a = descriptor === null || descriptor === void 0 ? void 0 : descriptor.prefix.length) !== null && _a !== void 0 ? _a : 0, picker.value.length];\n        }\n        picker.valueSelection = valueSelection;\n    }\n    registerPickerListeners(picker, provider, descriptor, value) {\n        const disposables = new DisposableStore();\n        // Remember as last visible picker and clean up once picker get's disposed\n        const visibleQuickAccess = this.visibleQuickAccess = { picker, descriptor, value };\n        disposables.add(toDisposable(() => {\n            if (visibleQuickAccess === this.visibleQuickAccess) {\n                this.visibleQuickAccess = undefined;\n            }\n        }));\n        // Whenever the value changes, check if the provider has\n        // changed and if so - re-create the picker from the beginning\n        disposables.add(picker.onDidChangeValue(value => {\n            const [providerForValue] = this.getOrInstantiateProvider(value);\n            if (providerForValue !== provider) {\n                this.show(value, { preserveValue: true } /* do not rewrite value from user typing! */);\n            }\n            else {\n                visibleQuickAccess.value = value; // remember the value in our visible one\n            }\n        }));\n        // Remember picker input for future use when accepting\n        if (descriptor) {\n            disposables.add(picker.onDidAccept(() => {\n                this.lastAcceptedPickerValues.set(descriptor, picker.value);\n            }));\n        }\n        return disposables;\n    }\n    getOrInstantiateProvider(value) {\n        const providerDescriptor = this.registry.getQuickAccessProvider(value);\n        if (!providerDescriptor) {\n            return [undefined, undefined];\n        }\n        let provider = this.mapProviderToDescriptor.get(providerDescriptor);\n        if (!provider) {\n            provider = this.instantiationService.createInstance(providerDescriptor.ctor);\n            this.mapProviderToDescriptor.set(providerDescriptor, provider);\n        }\n        return [provider, providerDescriptor];\n    }\n};\nQuickAccessController = __decorate([\n    __param(0, IQuickInputService),\n    __param(1, IInstantiationService)\n], QuickAccessController);\nexport { QuickAccessController };\n"]},"metadata":{},"sourceType":"module"}