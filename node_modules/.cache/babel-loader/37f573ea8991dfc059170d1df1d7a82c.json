{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { parse } from '../../../base/common/glob.js';\nimport { Mimes } from '../../../base/common/mime.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { basename, posix } from '../../../base/common/path.js';\nimport { DataUri } from '../../../base/common/resources.js';\nimport { startsWithUTF8BOM } from '../../../base/common/strings.js';\nlet registeredAssociations = [];\nlet nonUserRegisteredAssociations = [];\nlet userRegisteredAssociations = [];\n/**\n * Associate a language to the registry.\n */\n\nexport function registerLanguageAssociation(association, warnOnOverwrite = false) {\n  // Register\n  const associationItem = toLanguageAssociationItem(association);\n  registeredAssociations.push(associationItem);\n\n  if (!associationItem.userConfigured) {\n    nonUserRegisteredAssociations.push(associationItem);\n  } else {\n    userRegisteredAssociations.push(associationItem);\n  } // Check for conflicts unless this is a user configured association\n\n\n  if (warnOnOverwrite && !associationItem.userConfigured) {\n    registeredAssociations.forEach(a => {\n      if (a.mime === associationItem.mime || a.userConfigured) {\n        return; // same mime or userConfigured is ok\n      }\n\n      if (associationItem.extension && a.extension === associationItem.extension) {\n        console.warn(`Overwriting extension <<${associationItem.extension}>> to now point to mime <<${associationItem.mime}>>`);\n      }\n\n      if (associationItem.filename && a.filename === associationItem.filename) {\n        console.warn(`Overwriting filename <<${associationItem.filename}>> to now point to mime <<${associationItem.mime}>>`);\n      }\n\n      if (associationItem.filepattern && a.filepattern === associationItem.filepattern) {\n        console.warn(`Overwriting filepattern <<${associationItem.filepattern}>> to now point to mime <<${associationItem.mime}>>`);\n      }\n\n      if (associationItem.firstline && a.firstline === associationItem.firstline) {\n        console.warn(`Overwriting firstline <<${associationItem.firstline}>> to now point to mime <<${associationItem.mime}>>`);\n      }\n    });\n  }\n}\n\nfunction toLanguageAssociationItem(association) {\n  return {\n    id: association.id,\n    mime: association.mime,\n    filename: association.filename,\n    extension: association.extension,\n    filepattern: association.filepattern,\n    firstline: association.firstline,\n    userConfigured: association.userConfigured,\n    filenameLowercase: association.filename ? association.filename.toLowerCase() : undefined,\n    extensionLowercase: association.extension ? association.extension.toLowerCase() : undefined,\n    filepatternLowercase: association.filepattern ? parse(association.filepattern.toLowerCase()) : undefined,\n    filepatternOnPath: association.filepattern ? association.filepattern.indexOf(posix.sep) >= 0 : false\n  };\n}\n/**\n * Clear language associations from the registry.\n */\n\n\nexport function clearLanguageAssociations(onlyUserConfigured) {\n  if (!onlyUserConfigured) {\n    registeredAssociations = [];\n    nonUserRegisteredAssociations = [];\n    userRegisteredAssociations = [];\n  } else {\n    registeredAssociations = registeredAssociations.filter(a => !a.userConfigured);\n    userRegisteredAssociations = [];\n  }\n}\n/**\n * Given a file, return the best matching mime types for it\n * based on the registered language associations.\n */\n\nexport function getMimeTypes(resource, firstLine) {\n  let path;\n\n  if (resource) {\n    switch (resource.scheme) {\n      case Schemas.file:\n        path = resource.fsPath;\n        break;\n\n      case Schemas.data:\n        {\n          const metadata = DataUri.parseMetaData(resource);\n          path = metadata.get(DataUri.META_DATA_LABEL);\n          break;\n        }\n\n      default:\n        path = resource.path;\n    }\n  }\n\n  if (!path) {\n    return [Mimes.unknown];\n  }\n\n  path = path.toLowerCase();\n  const filename = basename(path); // 1.) User configured mappings have highest priority\n\n  const configuredLanguage = getMimeByPath(path, filename, userRegisteredAssociations);\n\n  if (configuredLanguage) {\n    return [configuredLanguage, Mimes.text];\n  } // 2.) Registered mappings have middle priority\n\n\n  const registeredLanguage = getMimeByPath(path, filename, nonUserRegisteredAssociations);\n\n  if (registeredLanguage) {\n    return [registeredLanguage, Mimes.text];\n  } // 3.) Firstline has lowest priority\n\n\n  if (firstLine) {\n    const firstlineLanguage = getMimeByFirstline(firstLine);\n\n    if (firstlineLanguage) {\n      return [firstlineLanguage, Mimes.text];\n    }\n  }\n\n  return [Mimes.unknown];\n}\n\nfunction getMimeByPath(path, filename, associations) {\n  var _a;\n\n  let filenameMatch = undefined;\n  let patternMatch = undefined;\n  let extensionMatch = undefined; // We want to prioritize associations based on the order they are registered so that the last registered\n  // association wins over all other. This is for https://github.com/microsoft/vscode/issues/20074\n\n  for (let i = associations.length - 1; i >= 0; i--) {\n    const association = associations[i]; // First exact name match\n\n    if (filename === association.filenameLowercase) {\n      filenameMatch = association;\n      break; // take it!\n    } // Longest pattern match\n\n\n    if (association.filepattern) {\n      if (!patternMatch || association.filepattern.length > patternMatch.filepattern.length) {\n        const target = association.filepatternOnPath ? path : filename; // match on full path if pattern contains path separator\n\n        if ((_a = association.filepatternLowercase) === null || _a === void 0 ? void 0 : _a.call(association, target)) {\n          patternMatch = association;\n        }\n      }\n    } // Longest extension match\n\n\n    if (association.extension) {\n      if (!extensionMatch || association.extension.length > extensionMatch.extension.length) {\n        if (filename.endsWith(association.extensionLowercase)) {\n          extensionMatch = association;\n        }\n      }\n    }\n  } // 1.) Exact name match has second highest priority\n\n\n  if (filenameMatch) {\n    return filenameMatch.mime;\n  } // 2.) Match on pattern\n\n\n  if (patternMatch) {\n    return patternMatch.mime;\n  } // 3.) Match on extension comes next\n\n\n  if (extensionMatch) {\n    return extensionMatch.mime;\n  }\n\n  return undefined;\n}\n\nfunction getMimeByFirstline(firstLine) {\n  if (startsWithUTF8BOM(firstLine)) {\n    firstLine = firstLine.substr(1);\n  }\n\n  if (firstLine.length > 0) {\n    // We want to prioritize associations based on the order they are registered so that the last registered\n    // association wins over all other. This is for https://github.com/microsoft/vscode/issues/20074\n    for (let i = registeredAssociations.length - 1; i >= 0; i--) {\n      const association = registeredAssociations[i];\n\n      if (!association.firstline) {\n        continue;\n      }\n\n      const matches = firstLine.match(association.firstline);\n\n      if (matches && matches.length > 0) {\n        return association.mime;\n      }\n    }\n  }\n\n  return undefined;\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/common/services/languagesAssociations.js"],"names":["parse","Mimes","Schemas","basename","posix","DataUri","startsWithUTF8BOM","registeredAssociations","nonUserRegisteredAssociations","userRegisteredAssociations","registerLanguageAssociation","association","warnOnOverwrite","associationItem","toLanguageAssociationItem","push","userConfigured","forEach","a","mime","extension","console","warn","filename","filepattern","firstline","id","filenameLowercase","toLowerCase","undefined","extensionLowercase","filepatternLowercase","filepatternOnPath","indexOf","sep","clearLanguageAssociations","onlyUserConfigured","filter","getMimeTypes","resource","firstLine","path","scheme","file","fsPath","data","metadata","parseMetaData","get","META_DATA_LABEL","unknown","configuredLanguage","getMimeByPath","text","registeredLanguage","firstlineLanguage","getMimeByFirstline","associations","_a","filenameMatch","patternMatch","extensionMatch","i","length","target","call","endsWith","substr","matches","match"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { parse } from '../../../base/common/glob.js';\nimport { Mimes } from '../../../base/common/mime.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { basename, posix } from '../../../base/common/path.js';\nimport { DataUri } from '../../../base/common/resources.js';\nimport { startsWithUTF8BOM } from '../../../base/common/strings.js';\nlet registeredAssociations = [];\nlet nonUserRegisteredAssociations = [];\nlet userRegisteredAssociations = [];\n/**\n * Associate a language to the registry.\n */\nexport function registerLanguageAssociation(association, warnOnOverwrite = false) {\n    // Register\n    const associationItem = toLanguageAssociationItem(association);\n    registeredAssociations.push(associationItem);\n    if (!associationItem.userConfigured) {\n        nonUserRegisteredAssociations.push(associationItem);\n    }\n    else {\n        userRegisteredAssociations.push(associationItem);\n    }\n    // Check for conflicts unless this is a user configured association\n    if (warnOnOverwrite && !associationItem.userConfigured) {\n        registeredAssociations.forEach(a => {\n            if (a.mime === associationItem.mime || a.userConfigured) {\n                return; // same mime or userConfigured is ok\n            }\n            if (associationItem.extension && a.extension === associationItem.extension) {\n                console.warn(`Overwriting extension <<${associationItem.extension}>> to now point to mime <<${associationItem.mime}>>`);\n            }\n            if (associationItem.filename && a.filename === associationItem.filename) {\n                console.warn(`Overwriting filename <<${associationItem.filename}>> to now point to mime <<${associationItem.mime}>>`);\n            }\n            if (associationItem.filepattern && a.filepattern === associationItem.filepattern) {\n                console.warn(`Overwriting filepattern <<${associationItem.filepattern}>> to now point to mime <<${associationItem.mime}>>`);\n            }\n            if (associationItem.firstline && a.firstline === associationItem.firstline) {\n                console.warn(`Overwriting firstline <<${associationItem.firstline}>> to now point to mime <<${associationItem.mime}>>`);\n            }\n        });\n    }\n}\nfunction toLanguageAssociationItem(association) {\n    return {\n        id: association.id,\n        mime: association.mime,\n        filename: association.filename,\n        extension: association.extension,\n        filepattern: association.filepattern,\n        firstline: association.firstline,\n        userConfigured: association.userConfigured,\n        filenameLowercase: association.filename ? association.filename.toLowerCase() : undefined,\n        extensionLowercase: association.extension ? association.extension.toLowerCase() : undefined,\n        filepatternLowercase: association.filepattern ? parse(association.filepattern.toLowerCase()) : undefined,\n        filepatternOnPath: association.filepattern ? association.filepattern.indexOf(posix.sep) >= 0 : false\n    };\n}\n/**\n * Clear language associations from the registry.\n */\nexport function clearLanguageAssociations(onlyUserConfigured) {\n    if (!onlyUserConfigured) {\n        registeredAssociations = [];\n        nonUserRegisteredAssociations = [];\n        userRegisteredAssociations = [];\n    }\n    else {\n        registeredAssociations = registeredAssociations.filter(a => !a.userConfigured);\n        userRegisteredAssociations = [];\n    }\n}\n/**\n * Given a file, return the best matching mime types for it\n * based on the registered language associations.\n */\nexport function getMimeTypes(resource, firstLine) {\n    let path;\n    if (resource) {\n        switch (resource.scheme) {\n            case Schemas.file:\n                path = resource.fsPath;\n                break;\n            case Schemas.data: {\n                const metadata = DataUri.parseMetaData(resource);\n                path = metadata.get(DataUri.META_DATA_LABEL);\n                break;\n            }\n            default:\n                path = resource.path;\n        }\n    }\n    if (!path) {\n        return [Mimes.unknown];\n    }\n    path = path.toLowerCase();\n    const filename = basename(path);\n    // 1.) User configured mappings have highest priority\n    const configuredLanguage = getMimeByPath(path, filename, userRegisteredAssociations);\n    if (configuredLanguage) {\n        return [configuredLanguage, Mimes.text];\n    }\n    // 2.) Registered mappings have middle priority\n    const registeredLanguage = getMimeByPath(path, filename, nonUserRegisteredAssociations);\n    if (registeredLanguage) {\n        return [registeredLanguage, Mimes.text];\n    }\n    // 3.) Firstline has lowest priority\n    if (firstLine) {\n        const firstlineLanguage = getMimeByFirstline(firstLine);\n        if (firstlineLanguage) {\n            return [firstlineLanguage, Mimes.text];\n        }\n    }\n    return [Mimes.unknown];\n}\nfunction getMimeByPath(path, filename, associations) {\n    var _a;\n    let filenameMatch = undefined;\n    let patternMatch = undefined;\n    let extensionMatch = undefined;\n    // We want to prioritize associations based on the order they are registered so that the last registered\n    // association wins over all other. This is for https://github.com/microsoft/vscode/issues/20074\n    for (let i = associations.length - 1; i >= 0; i--) {\n        const association = associations[i];\n        // First exact name match\n        if (filename === association.filenameLowercase) {\n            filenameMatch = association;\n            break; // take it!\n        }\n        // Longest pattern match\n        if (association.filepattern) {\n            if (!patternMatch || association.filepattern.length > patternMatch.filepattern.length) {\n                const target = association.filepatternOnPath ? path : filename; // match on full path if pattern contains path separator\n                if ((_a = association.filepatternLowercase) === null || _a === void 0 ? void 0 : _a.call(association, target)) {\n                    patternMatch = association;\n                }\n            }\n        }\n        // Longest extension match\n        if (association.extension) {\n            if (!extensionMatch || association.extension.length > extensionMatch.extension.length) {\n                if (filename.endsWith(association.extensionLowercase)) {\n                    extensionMatch = association;\n                }\n            }\n        }\n    }\n    // 1.) Exact name match has second highest priority\n    if (filenameMatch) {\n        return filenameMatch.mime;\n    }\n    // 2.) Match on pattern\n    if (patternMatch) {\n        return patternMatch.mime;\n    }\n    // 3.) Match on extension comes next\n    if (extensionMatch) {\n        return extensionMatch.mime;\n    }\n    return undefined;\n}\nfunction getMimeByFirstline(firstLine) {\n    if (startsWithUTF8BOM(firstLine)) {\n        firstLine = firstLine.substr(1);\n    }\n    if (firstLine.length > 0) {\n        // We want to prioritize associations based on the order they are registered so that the last registered\n        // association wins over all other. This is for https://github.com/microsoft/vscode/issues/20074\n        for (let i = registeredAssociations.length - 1; i >= 0; i--) {\n            const association = registeredAssociations[i];\n            if (!association.firstline) {\n                continue;\n            }\n            const matches = firstLine.match(association.firstline);\n            if (matches && matches.length > 0) {\n                return association.mime;\n            }\n        }\n    }\n    return undefined;\n}\n"]},"metadata":{},"sourceType":"module"}