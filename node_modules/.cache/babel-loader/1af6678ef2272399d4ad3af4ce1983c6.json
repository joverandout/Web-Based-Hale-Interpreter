{"ast":null,"code":"import { CommonActions } from '@react-navigation/routers';\nimport * as React from 'react';\nimport NavigationBuilderContext from './NavigationBuilderContext';\n/**\n * Hook to cache navigation objects for each screen in the navigator.\n * It's important to cache them to make sure navigation objects don't change between renders.\n * This lets us apply optimizations like `React.memo` to minimize re-rendering screens.\n */\n\nexport default function useNavigationCache(_ref) {\n  let {\n    state,\n    getState,\n    navigation,\n    setOptions,\n    router,\n    emitter\n  } = _ref;\n  const {\n    stackRef\n  } = React.useContext(NavigationBuilderContext); // Cache object which holds navigation objects for each screen\n  // We use `React.useMemo` instead of `React.useRef` coz we want to invalidate it when deps change\n  // In reality, these deps will rarely change, if ever\n\n  const cache = React.useMemo(() => ({\n    current: {}\n  }), // eslint-disable-next-line react-hooks/exhaustive-deps\n  [getState, navigation, setOptions, router, emitter]);\n  const actions = { ...router.actionCreators,\n    ...CommonActions\n  };\n  cache.current = state.routes.reduce((acc, route) => {\n    const previous = cache.current[route.key];\n\n    if (previous) {\n      // If a cached navigation object already exists, reuse it\n      acc[route.key] = previous;\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const {\n        emit,\n        ...rest\n      } = navigation;\n\n      const dispatch = thunk => {\n        const action = typeof thunk === 'function' ? thunk(getState()) : thunk;\n\n        if (action != null) {\n          navigation.dispatch({\n            source: route.key,\n            ...action\n          });\n        }\n      };\n\n      const withStack = callback => {\n        let isStackSet = false;\n\n        try {\n          if (process.env.NODE_ENV !== 'production' && stackRef && !stackRef.current) {\n            // Capture the stack trace for devtools\n            stackRef.current = new Error().stack;\n            isStackSet = true;\n          }\n\n          callback();\n        } finally {\n          if (isStackSet && stackRef) {\n            stackRef.current = undefined;\n          }\n        }\n      };\n\n      const helpers = Object.keys(actions).reduce((acc, name) => {\n        acc[name] = function () {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          return withStack(() => // @ts-expect-error: name is a valid key, but TypeScript is dumb\n          dispatch(actions[name](...args)));\n        };\n\n        return acc;\n      }, {});\n      acc[route.key] = { ...rest,\n        ...helpers,\n        // FIXME: too much work to fix the types for now\n        ...emitter.create(route.key),\n        dispatch: thunk => withStack(() => dispatch(thunk)),\n        setOptions: options => setOptions(o => ({ ...o,\n          [route.key]: { ...o[route.key],\n            ...options\n          }\n        })),\n        isFocused: () => {\n          const state = getState();\n\n          if (state.routes[state.index].key !== route.key) {\n            return false;\n          } // If the current screen is focused, we also need to check if parent navigator is focused\n          // This makes sure that we return the focus state in the whole tree, not just this navigator\n\n\n          return navigation ? navigation.isFocused() : true;\n        }\n      };\n    }\n\n    return acc;\n  }, {});\n  return cache.current;\n}","map":{"version":3,"sources":["useNavigationCache.tsx"],"names":["emitter","stackRef","React","cache","current","actions","router","CommonActions","previous","route","acc","rest","dispatch","thunk","action","getState","navigation","source","withStack","callback","isStackSet","process","helpers","args","setOptions","options","o","isFocused","state"],"mappings":"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","sourcesContent":["import {\n  CommonActions,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport type { NavigationHelpers, NavigationProp } from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\n\ntype Options<\n  State extends NavigationState,\n  EventMap extends Record<string, any>\n> = {\n  state: State;\n  getState: () => State;\n  navigation: NavigationHelpers<ParamListBase> &\n    Partial<NavigationProp<ParamListBase, string, any, any, any>>;\n  setOptions: (\n    cb: (options: Record<string, object>) => Record<string, object>\n  ) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<EventMap>;\n};\n\ntype NavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>\n> = Record<\n  string,\n  NavigationProp<ParamListBase, string, State, ScreenOptions, EventMap>\n>;\n\n/**\n * Hook to cache navigation objects for each screen in the navigator.\n * It's important to cache them to make sure navigation objects don't change between renders.\n * This lets us apply optimizations like `React.memo` to minimize re-rendering screens.\n */\nexport default function useNavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>\n>({\n  state,\n  getState,\n  navigation,\n  setOptions,\n  router,\n  emitter,\n}: Options<State, EventMap>) {\n  const { stackRef } = React.useContext(NavigationBuilderContext);\n\n  // Cache object which holds navigation objects for each screen\n  // We use `React.useMemo` instead of `React.useRef` coz we want to invalidate it when deps change\n  // In reality, these deps will rarely change, if ever\n  const cache = React.useMemo(\n    () => ({ current: {} as NavigationCache<State, ScreenOptions, EventMap> }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [getState, navigation, setOptions, router, emitter]\n  );\n\n  const actions = {\n    ...router.actionCreators,\n    ...CommonActions,\n  };\n\n  cache.current = state.routes.reduce<\n    NavigationCache<State, ScreenOptions, EventMap>\n  >((acc, route) => {\n    const previous = cache.current[route.key];\n\n    type Thunk =\n      | NavigationAction\n      | ((state: State) => NavigationAction | null | undefined);\n\n    if (previous) {\n      // If a cached navigation object already exists, reuse it\n      acc[route.key] = previous;\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { emit, ...rest } = navigation;\n\n      const dispatch = (thunk: Thunk) => {\n        const action = typeof thunk === 'function' ? thunk(getState()) : thunk;\n\n        if (action != null) {\n          navigation.dispatch({ source: route.key, ...action });\n        }\n      };\n\n      const withStack = (callback: () => void) => {\n        let isStackSet = false;\n\n        try {\n          if (\n            process.env.NODE_ENV !== 'production' &&\n            stackRef &&\n            !stackRef.current\n          ) {\n            // Capture the stack trace for devtools\n            stackRef.current = new Error().stack;\n            isStackSet = true;\n          }\n\n          callback();\n        } finally {\n          if (isStackSet && stackRef) {\n            stackRef.current = undefined;\n          }\n        }\n      };\n\n      const helpers = Object.keys(actions).reduce<Record<string, () => void>>(\n        (acc, name) => {\n          acc[name] = (...args: any) =>\n            withStack(() =>\n              // @ts-expect-error: name is a valid key, but TypeScript is dumb\n              dispatch(actions[name](...args))\n            );\n\n          return acc;\n        },\n        {}\n      );\n\n      acc[route.key] = {\n        ...rest,\n        ...helpers,\n        // FIXME: too much work to fix the types for now\n        ...(emitter.create(route.key) as any),\n        dispatch: (thunk: Thunk) => withStack(() => dispatch(thunk)),\n        setOptions: (options: object) =>\n          setOptions((o) => ({\n            ...o,\n            [route.key]: { ...o[route.key], ...options },\n          })),\n        isFocused: () => {\n          const state = getState();\n\n          if (state.routes[state.index].key !== route.key) {\n            return false;\n          }\n\n          // If the current screen is focused, we also need to check if parent navigator is focused\n          // This makes sure that we return the focus state in the whole tree, not just this navigator\n          return navigation ? navigation.isFocused() : true;\n        },\n      };\n    }\n\n    return acc;\n  }, {});\n\n  return cache.current;\n}\n"]},"metadata":{},"sourceType":"module"}