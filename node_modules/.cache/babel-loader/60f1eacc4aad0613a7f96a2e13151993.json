{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { once } from '../../../../base/common/functional.js';\nimport { DisposableStore, MutableDisposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { withNullAsUndefined } from '../../../../base/common/types.js';\nimport { getCodeEditor, isDiffEditor } from '../../../browser/editorBrowser.js';\nimport { OverviewRulerLane } from '../../../common/model.js';\nimport { overviewRulerRangeHighlight } from '../../../common/core/editorColorRegistry.js';\nimport { themeColorFromId } from '../../../../platform/theme/common/themeService.js';\n/**\n * A reusable quick access provider for the editor with support\n * for adding decorations for navigating in the currently active file\n * (for example \"Go to line\", \"Go to symbol\").\n */\n\nexport class AbstractEditorNavigationQuickAccessProvider {\n  constructor(options) {\n    this.options = options; //#endregion\n    //#region Decorations Utils\n\n    this.rangeHighlightDecorationId = undefined;\n  } //#region Provider methods\n\n\n  provide(picker, token) {\n    var _a;\n\n    const disposables = new DisposableStore(); // Apply options if any\n\n    picker.canAcceptInBackground = !!((_a = this.options) === null || _a === void 0 ? void 0 : _a.canAcceptInBackground); // Disable filtering & sorting, we control the results\n\n    picker.matchOnLabel = picker.matchOnDescription = picker.matchOnDetail = picker.sortByLabel = false; // Provide based on current active editor\n\n    const pickerDisposable = disposables.add(new MutableDisposable());\n    pickerDisposable.value = this.doProvide(picker, token); // Re-create whenever the active editor changes\n\n    disposables.add(this.onDidActiveTextEditorControlChange(() => {\n      // Clear old\n      pickerDisposable.value = undefined; // Add new\n\n      pickerDisposable.value = this.doProvide(picker, token);\n    }));\n    return disposables;\n  }\n\n  doProvide(picker, token) {\n    const disposables = new DisposableStore(); // With text control\n\n    const editor = this.activeTextEditorControl;\n\n    if (editor && this.canProvideWithTextEditor(editor)) {\n      const context = {\n        editor\n      }; // Restore any view state if this picker was closed\n      // without actually going to a line\n\n      const codeEditor = getCodeEditor(editor);\n\n      if (codeEditor) {\n        // Remember view state and update it when the cursor position\n        // changes even later because it could be that the user has\n        // configured quick access to remain open when focus is lost and\n        // we always want to restore the current location.\n        let lastKnownEditorViewState = withNullAsUndefined(editor.saveViewState());\n        disposables.add(codeEditor.onDidChangeCursorPosition(() => {\n          lastKnownEditorViewState = withNullAsUndefined(editor.saveViewState());\n        }));\n\n        context.restoreViewState = () => {\n          if (lastKnownEditorViewState && editor === this.activeTextEditorControl) {\n            editor.restoreViewState(lastKnownEditorViewState);\n          }\n        };\n\n        disposables.add(once(token.onCancellationRequested)(() => {\n          var _a;\n\n          return (_a = context.restoreViewState) === null || _a === void 0 ? void 0 : _a.call(context);\n        }));\n      } // Clean up decorations on dispose\n\n\n      disposables.add(toDisposable(() => this.clearDecorations(editor))); // Ask subclass for entries\n\n      disposables.add(this.provideWithTextEditor(context, picker, token));\n    } // Without text control\n    else {\n      disposables.add(this.provideWithoutTextEditor(picker, token));\n    }\n\n    return disposables;\n  }\n  /**\n   * Subclasses to implement if they can operate on the text editor.\n   */\n\n\n  canProvideWithTextEditor(editor) {\n    return true;\n  }\n\n  gotoLocation({\n    editor\n  }, options) {\n    editor.setSelection(options.range);\n    editor.revealRangeInCenter(options.range, 0\n    /* Smooth */\n    );\n\n    if (!options.preserveFocus) {\n      editor.focus();\n    }\n  }\n\n  getModel(editor) {\n    var _a;\n\n    return isDiffEditor(editor) ? (_a = editor.getModel()) === null || _a === void 0 ? void 0 : _a.modified : editor.getModel();\n  }\n\n  addDecorations(editor, range) {\n    editor.changeDecorations(changeAccessor => {\n      // Reset old decorations if any\n      const deleteDecorations = [];\n\n      if (this.rangeHighlightDecorationId) {\n        deleteDecorations.push(this.rangeHighlightDecorationId.overviewRulerDecorationId);\n        deleteDecorations.push(this.rangeHighlightDecorationId.rangeHighlightId);\n        this.rangeHighlightDecorationId = undefined;\n      } // Add new decorations for the range\n\n\n      const newDecorations = [// highlight the entire line on the range\n      {\n        range,\n        options: {\n          description: 'quick-access-range-highlight',\n          className: 'rangeHighlight',\n          isWholeLine: true\n        }\n      }, // also add overview ruler highlight\n      {\n        range,\n        options: {\n          description: 'quick-access-range-highlight-overview',\n          overviewRuler: {\n            color: themeColorFromId(overviewRulerRangeHighlight),\n            position: OverviewRulerLane.Full\n          }\n        }\n      }];\n      const [rangeHighlightId, overviewRulerDecorationId] = changeAccessor.deltaDecorations(deleteDecorations, newDecorations);\n      this.rangeHighlightDecorationId = {\n        rangeHighlightId,\n        overviewRulerDecorationId\n      };\n    });\n  }\n\n  clearDecorations(editor) {\n    const rangeHighlightDecorationId = this.rangeHighlightDecorationId;\n\n    if (rangeHighlightDecorationId) {\n      editor.changeDecorations(changeAccessor => {\n        changeAccessor.deltaDecorations([rangeHighlightDecorationId.overviewRulerDecorationId, rangeHighlightDecorationId.rangeHighlightId], []);\n      });\n      this.rangeHighlightDecorationId = undefined;\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/contrib/quickAccess/browser/editorNavigationQuickAccess.js"],"names":["once","DisposableStore","MutableDisposable","toDisposable","withNullAsUndefined","getCodeEditor","isDiffEditor","OverviewRulerLane","overviewRulerRangeHighlight","themeColorFromId","AbstractEditorNavigationQuickAccessProvider","constructor","options","rangeHighlightDecorationId","undefined","provide","picker","token","_a","disposables","canAcceptInBackground","matchOnLabel","matchOnDescription","matchOnDetail","sortByLabel","pickerDisposable","add","value","doProvide","onDidActiveTextEditorControlChange","editor","activeTextEditorControl","canProvideWithTextEditor","context","codeEditor","lastKnownEditorViewState","saveViewState","onDidChangeCursorPosition","restoreViewState","onCancellationRequested","call","clearDecorations","provideWithTextEditor","provideWithoutTextEditor","gotoLocation","setSelection","range","revealRangeInCenter","preserveFocus","focus","getModel","modified","addDecorations","changeDecorations","changeAccessor","deleteDecorations","push","overviewRulerDecorationId","rangeHighlightId","newDecorations","description","className","isWholeLine","overviewRuler","color","position","Full","deltaDecorations"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { once } from '../../../../base/common/functional.js';\nimport { DisposableStore, MutableDisposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { withNullAsUndefined } from '../../../../base/common/types.js';\nimport { getCodeEditor, isDiffEditor } from '../../../browser/editorBrowser.js';\nimport { OverviewRulerLane } from '../../../common/model.js';\nimport { overviewRulerRangeHighlight } from '../../../common/core/editorColorRegistry.js';\nimport { themeColorFromId } from '../../../../platform/theme/common/themeService.js';\n/**\n * A reusable quick access provider for the editor with support\n * for adding decorations for navigating in the currently active file\n * (for example \"Go to line\", \"Go to symbol\").\n */\nexport class AbstractEditorNavigationQuickAccessProvider {\n    constructor(options) {\n        this.options = options;\n        //#endregion\n        //#region Decorations Utils\n        this.rangeHighlightDecorationId = undefined;\n    }\n    //#region Provider methods\n    provide(picker, token) {\n        var _a;\n        const disposables = new DisposableStore();\n        // Apply options if any\n        picker.canAcceptInBackground = !!((_a = this.options) === null || _a === void 0 ? void 0 : _a.canAcceptInBackground);\n        // Disable filtering & sorting, we control the results\n        picker.matchOnLabel = picker.matchOnDescription = picker.matchOnDetail = picker.sortByLabel = false;\n        // Provide based on current active editor\n        const pickerDisposable = disposables.add(new MutableDisposable());\n        pickerDisposable.value = this.doProvide(picker, token);\n        // Re-create whenever the active editor changes\n        disposables.add(this.onDidActiveTextEditorControlChange(() => {\n            // Clear old\n            pickerDisposable.value = undefined;\n            // Add new\n            pickerDisposable.value = this.doProvide(picker, token);\n        }));\n        return disposables;\n    }\n    doProvide(picker, token) {\n        const disposables = new DisposableStore();\n        // With text control\n        const editor = this.activeTextEditorControl;\n        if (editor && this.canProvideWithTextEditor(editor)) {\n            const context = { editor };\n            // Restore any view state if this picker was closed\n            // without actually going to a line\n            const codeEditor = getCodeEditor(editor);\n            if (codeEditor) {\n                // Remember view state and update it when the cursor position\n                // changes even later because it could be that the user has\n                // configured quick access to remain open when focus is lost and\n                // we always want to restore the current location.\n                let lastKnownEditorViewState = withNullAsUndefined(editor.saveViewState());\n                disposables.add(codeEditor.onDidChangeCursorPosition(() => {\n                    lastKnownEditorViewState = withNullAsUndefined(editor.saveViewState());\n                }));\n                context.restoreViewState = () => {\n                    if (lastKnownEditorViewState && editor === this.activeTextEditorControl) {\n                        editor.restoreViewState(lastKnownEditorViewState);\n                    }\n                };\n                disposables.add(once(token.onCancellationRequested)(() => { var _a; return (_a = context.restoreViewState) === null || _a === void 0 ? void 0 : _a.call(context); }));\n            }\n            // Clean up decorations on dispose\n            disposables.add(toDisposable(() => this.clearDecorations(editor)));\n            // Ask subclass for entries\n            disposables.add(this.provideWithTextEditor(context, picker, token));\n        }\n        // Without text control\n        else {\n            disposables.add(this.provideWithoutTextEditor(picker, token));\n        }\n        return disposables;\n    }\n    /**\n     * Subclasses to implement if they can operate on the text editor.\n     */\n    canProvideWithTextEditor(editor) {\n        return true;\n    }\n    gotoLocation({ editor }, options) {\n        editor.setSelection(options.range);\n        editor.revealRangeInCenter(options.range, 0 /* Smooth */);\n        if (!options.preserveFocus) {\n            editor.focus();\n        }\n    }\n    getModel(editor) {\n        var _a;\n        return isDiffEditor(editor) ?\n            (_a = editor.getModel()) === null || _a === void 0 ? void 0 : _a.modified :\n            editor.getModel();\n    }\n    addDecorations(editor, range) {\n        editor.changeDecorations(changeAccessor => {\n            // Reset old decorations if any\n            const deleteDecorations = [];\n            if (this.rangeHighlightDecorationId) {\n                deleteDecorations.push(this.rangeHighlightDecorationId.overviewRulerDecorationId);\n                deleteDecorations.push(this.rangeHighlightDecorationId.rangeHighlightId);\n                this.rangeHighlightDecorationId = undefined;\n            }\n            // Add new decorations for the range\n            const newDecorations = [\n                // highlight the entire line on the range\n                {\n                    range,\n                    options: {\n                        description: 'quick-access-range-highlight',\n                        className: 'rangeHighlight',\n                        isWholeLine: true\n                    }\n                },\n                // also add overview ruler highlight\n                {\n                    range,\n                    options: {\n                        description: 'quick-access-range-highlight-overview',\n                        overviewRuler: {\n                            color: themeColorFromId(overviewRulerRangeHighlight),\n                            position: OverviewRulerLane.Full\n                        }\n                    }\n                }\n            ];\n            const [rangeHighlightId, overviewRulerDecorationId] = changeAccessor.deltaDecorations(deleteDecorations, newDecorations);\n            this.rangeHighlightDecorationId = { rangeHighlightId, overviewRulerDecorationId };\n        });\n    }\n    clearDecorations(editor) {\n        const rangeHighlightDecorationId = this.rangeHighlightDecorationId;\n        if (rangeHighlightDecorationId) {\n            editor.changeDecorations(changeAccessor => {\n                changeAccessor.deltaDecorations([\n                    rangeHighlightDecorationId.overviewRulerDecorationId,\n                    rangeHighlightDecorationId.rangeHighlightId\n                ], []);\n            });\n            this.rangeHighlightDecorationId = undefined;\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}