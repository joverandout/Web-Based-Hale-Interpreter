{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Schemas } from '../../../base/common/network.js';\nimport { DataUri, basenameOrAuthority } from '../../../base/common/resources.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nimport { FileKind } from '../../../platform/files/common/files.js';\nexport function getIconClasses(modelService, languageService, resource, fileKind) {\n  // we always set these base classes even if we do not have a path\n  const classes = fileKind === FileKind.ROOT_FOLDER ? ['rootfolder-icon'] : fileKind === FileKind.FOLDER ? ['folder-icon'] : ['file-icon'];\n\n  if (resource) {\n    // Get the path and name of the resource. For data-URIs, we need to parse specially\n    let name;\n\n    if (resource.scheme === Schemas.data) {\n      const metadata = DataUri.parseMetaData(resource);\n      name = metadata.get(DataUri.META_DATA_LABEL);\n    } else {\n      name = cssEscape(basenameOrAuthority(resource).toLowerCase());\n    } // Folders\n\n\n    if (fileKind === FileKind.FOLDER) {\n      classes.push(`${name}-name-folder-icon`);\n    } // Files\n    else {\n      // Name & Extension(s)\n      if (name) {\n        classes.push(`${name}-name-file-icon`); // Avoid doing an explosive combination of extensions for very long filenames\n        // (most file systems do not allow files > 255 length) with lots of `.` characters\n        // https://github.com/microsoft/vscode/issues/116199\n\n        if (name.length <= 255) {\n          const dotSegments = name.split('.');\n\n          for (let i = 1; i < dotSegments.length; i++) {\n            classes.push(`${dotSegments.slice(i).join('.')}-ext-file-icon`); // add each combination of all found extensions if more than one\n          }\n        }\n\n        classes.push(`ext-file-icon`); // extra segment to increase file-ext score\n      } // Detected Mode\n\n\n      const detectedLanguageId = detectLanguageId(modelService, languageService, resource);\n\n      if (detectedLanguageId) {\n        classes.push(`${cssEscape(detectedLanguageId)}-lang-file-icon`);\n      }\n    }\n  }\n\n  return classes;\n}\n\nfunction detectLanguageId(modelService, languageService, resource) {\n  if (!resource) {\n    return null; // we need a resource at least\n  }\n\n  let languageId = null; // Data URI: check for encoded metadata\n\n  if (resource.scheme === Schemas.data) {\n    const metadata = DataUri.parseMetaData(resource);\n    const mime = metadata.get(DataUri.META_DATA_MIME);\n\n    if (mime) {\n      languageId = languageService.getLanguageIdByMimeType(mime);\n    }\n  } // Any other URI: check for model if existing\n  else {\n    const model = modelService.getModel(resource);\n\n    if (model) {\n      languageId = model.getLanguageId();\n    }\n  } // only take if the language id is specific (aka no just plain text)\n\n\n  if (languageId && languageId !== PLAINTEXT_LANGUAGE_ID) {\n    return languageId;\n  } // otherwise fallback to path based detection\n\n\n  return languageService.guessLanguageIdByFilepathOrFirstLine(resource);\n}\n\nexport function cssEscape(str) {\n  return str.replace(/[\\11\\12\\14\\15\\40]/g, '/'); // HTML class names can not contain certain whitespace characters, use / instead, which doesn't exist in file names.\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/common/services/getIconClasses.js"],"names":["Schemas","DataUri","basenameOrAuthority","PLAINTEXT_LANGUAGE_ID","FileKind","getIconClasses","modelService","languageService","resource","fileKind","classes","ROOT_FOLDER","FOLDER","name","scheme","data","metadata","parseMetaData","get","META_DATA_LABEL","cssEscape","toLowerCase","push","length","dotSegments","split","i","slice","join","detectedLanguageId","detectLanguageId","languageId","mime","META_DATA_MIME","getLanguageIdByMimeType","model","getModel","getLanguageId","guessLanguageIdByFilepathOrFirstLine","str","replace"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Schemas } from '../../../base/common/network.js';\nimport { DataUri, basenameOrAuthority } from '../../../base/common/resources.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nimport { FileKind } from '../../../platform/files/common/files.js';\nexport function getIconClasses(modelService, languageService, resource, fileKind) {\n    // we always set these base classes even if we do not have a path\n    const classes = fileKind === FileKind.ROOT_FOLDER ? ['rootfolder-icon'] : fileKind === FileKind.FOLDER ? ['folder-icon'] : ['file-icon'];\n    if (resource) {\n        // Get the path and name of the resource. For data-URIs, we need to parse specially\n        let name;\n        if (resource.scheme === Schemas.data) {\n            const metadata = DataUri.parseMetaData(resource);\n            name = metadata.get(DataUri.META_DATA_LABEL);\n        }\n        else {\n            name = cssEscape(basenameOrAuthority(resource).toLowerCase());\n        }\n        // Folders\n        if (fileKind === FileKind.FOLDER) {\n            classes.push(`${name}-name-folder-icon`);\n        }\n        // Files\n        else {\n            // Name & Extension(s)\n            if (name) {\n                classes.push(`${name}-name-file-icon`);\n                // Avoid doing an explosive combination of extensions for very long filenames\n                // (most file systems do not allow files > 255 length) with lots of `.` characters\n                // https://github.com/microsoft/vscode/issues/116199\n                if (name.length <= 255) {\n                    const dotSegments = name.split('.');\n                    for (let i = 1; i < dotSegments.length; i++) {\n                        classes.push(`${dotSegments.slice(i).join('.')}-ext-file-icon`); // add each combination of all found extensions if more than one\n                    }\n                }\n                classes.push(`ext-file-icon`); // extra segment to increase file-ext score\n            }\n            // Detected Mode\n            const detectedLanguageId = detectLanguageId(modelService, languageService, resource);\n            if (detectedLanguageId) {\n                classes.push(`${cssEscape(detectedLanguageId)}-lang-file-icon`);\n            }\n        }\n    }\n    return classes;\n}\nfunction detectLanguageId(modelService, languageService, resource) {\n    if (!resource) {\n        return null; // we need a resource at least\n    }\n    let languageId = null;\n    // Data URI: check for encoded metadata\n    if (resource.scheme === Schemas.data) {\n        const metadata = DataUri.parseMetaData(resource);\n        const mime = metadata.get(DataUri.META_DATA_MIME);\n        if (mime) {\n            languageId = languageService.getLanguageIdByMimeType(mime);\n        }\n    }\n    // Any other URI: check for model if existing\n    else {\n        const model = modelService.getModel(resource);\n        if (model) {\n            languageId = model.getLanguageId();\n        }\n    }\n    // only take if the language id is specific (aka no just plain text)\n    if (languageId && languageId !== PLAINTEXT_LANGUAGE_ID) {\n        return languageId;\n    }\n    // otherwise fallback to path based detection\n    return languageService.guessLanguageIdByFilepathOrFirstLine(resource);\n}\nexport function cssEscape(str) {\n    return str.replace(/[\\11\\12\\14\\15\\40]/g, '/'); // HTML class names can not contain certain whitespace characters, use / instead, which doesn't exist in file names.\n}\n"]},"metadata":{},"sourceType":"module"}