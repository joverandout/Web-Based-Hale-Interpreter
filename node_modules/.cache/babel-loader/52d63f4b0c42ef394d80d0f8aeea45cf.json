{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { toUint8 } from '../../../base/common/uint.js';\n/**\n * A fast character classifier that uses a compact array for ASCII values.\n */\n\nexport class CharacterClassifier {\n  constructor(_defaultValue) {\n    const defaultValue = toUint8(_defaultValue);\n    this._defaultValue = defaultValue;\n    this._asciiMap = CharacterClassifier._createAsciiMap(defaultValue);\n    this._map = new Map();\n  }\n\n  static _createAsciiMap(defaultValue) {\n    const asciiMap = new Uint8Array(256);\n\n    for (let i = 0; i < 256; i++) {\n      asciiMap[i] = defaultValue;\n    }\n\n    return asciiMap;\n  }\n\n  set(charCode, _value) {\n    const value = toUint8(_value);\n\n    if (charCode >= 0 && charCode < 256) {\n      this._asciiMap[charCode] = value;\n    } else {\n      this._map.set(charCode, value);\n    }\n  }\n\n  get(charCode) {\n    if (charCode >= 0 && charCode < 256) {\n      return this._asciiMap[charCode];\n    } else {\n      return this._map.get(charCode) || this._defaultValue;\n    }\n  }\n\n}\nexport class CharacterSet {\n  constructor() {\n    this._actual = new CharacterClassifier(0\n    /* False */\n    );\n  }\n\n  add(charCode) {\n    this._actual.set(charCode, 1\n    /* True */\n    );\n  }\n\n  has(charCode) {\n    return this._actual.get(charCode) === 1\n    /* True */\n    ;\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/common/core/characterClassifier.js"],"names":["toUint8","CharacterClassifier","constructor","_defaultValue","defaultValue","_asciiMap","_createAsciiMap","_map","Map","asciiMap","Uint8Array","i","set","charCode","_value","value","get","CharacterSet","_actual","add","has"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,OAAT,QAAwB,8BAAxB;AACA;AACA;AACA;;AACA,OAAO,MAAMC,mBAAN,CAA0B;AAC7BC,EAAAA,WAAW,CAACC,aAAD,EAAgB;AACvB,UAAMC,YAAY,GAAGJ,OAAO,CAACG,aAAD,CAA5B;AACA,SAAKA,aAAL,GAAqBC,YAArB;AACA,SAAKC,SAAL,GAAiBJ,mBAAmB,CAACK,eAApB,CAAoCF,YAApC,CAAjB;AACA,SAAKG,IAAL,GAAY,IAAIC,GAAJ,EAAZ;AACH;;AACqB,SAAfF,eAAe,CAACF,YAAD,EAAe;AACjC,UAAMK,QAAQ,GAAG,IAAIC,UAAJ,CAAe,GAAf,CAAjB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,GAApB,EAAyBA,CAAC,EAA1B,EAA8B;AAC1BF,MAAAA,QAAQ,CAACE,CAAD,CAAR,GAAcP,YAAd;AACH;;AACD,WAAOK,QAAP;AACH;;AACDG,EAAAA,GAAG,CAACC,QAAD,EAAWC,MAAX,EAAmB;AAClB,UAAMC,KAAK,GAAGf,OAAO,CAACc,MAAD,CAArB;;AACA,QAAID,QAAQ,IAAI,CAAZ,IAAiBA,QAAQ,GAAG,GAAhC,EAAqC;AACjC,WAAKR,SAAL,CAAeQ,QAAf,IAA2BE,KAA3B;AACH,KAFD,MAGK;AACD,WAAKR,IAAL,CAAUK,GAAV,CAAcC,QAAd,EAAwBE,KAAxB;AACH;AACJ;;AACDC,EAAAA,GAAG,CAACH,QAAD,EAAW;AACV,QAAIA,QAAQ,IAAI,CAAZ,IAAiBA,QAAQ,GAAG,GAAhC,EAAqC;AACjC,aAAO,KAAKR,SAAL,CAAeQ,QAAf,CAAP;AACH,KAFD,MAGK;AACD,aAAQ,KAAKN,IAAL,CAAUS,GAAV,CAAcH,QAAd,KAA2B,KAAKV,aAAxC;AACH;AACJ;;AA9B4B;AAgCjC,OAAO,MAAMc,YAAN,CAAmB;AACtBf,EAAAA,WAAW,GAAG;AACV,SAAKgB,OAAL,GAAe,IAAIjB,mBAAJ,CAAwB;AAAE;AAA1B,KAAf;AACH;;AACDkB,EAAAA,GAAG,CAACN,QAAD,EAAW;AACV,SAAKK,OAAL,CAAaN,GAAb,CAAiBC,QAAjB,EAA2B;AAAE;AAA7B;AACH;;AACDO,EAAAA,GAAG,CAACP,QAAD,EAAW;AACV,WAAQ,KAAKK,OAAL,CAAaF,GAAb,CAAiBH,QAAjB,MAA+B;AAAE;AAAzC;AACH;;AATqB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { toUint8 } from '../../../base/common/uint.js';\n/**\n * A fast character classifier that uses a compact array for ASCII values.\n */\nexport class CharacterClassifier {\n    constructor(_defaultValue) {\n        const defaultValue = toUint8(_defaultValue);\n        this._defaultValue = defaultValue;\n        this._asciiMap = CharacterClassifier._createAsciiMap(defaultValue);\n        this._map = new Map();\n    }\n    static _createAsciiMap(defaultValue) {\n        const asciiMap = new Uint8Array(256);\n        for (let i = 0; i < 256; i++) {\n            asciiMap[i] = defaultValue;\n        }\n        return asciiMap;\n    }\n    set(charCode, _value) {\n        const value = toUint8(_value);\n        if (charCode >= 0 && charCode < 256) {\n            this._asciiMap[charCode] = value;\n        }\n        else {\n            this._map.set(charCode, value);\n        }\n    }\n    get(charCode) {\n        if (charCode >= 0 && charCode < 256) {\n            return this._asciiMap[charCode];\n        }\n        else {\n            return (this._map.get(charCode) || this._defaultValue);\n        }\n    }\n}\nexport class CharacterSet {\n    constructor() {\n        this._actual = new CharacterClassifier(0 /* False */);\n    }\n    add(charCode) {\n        this._actual.set(charCode, 1 /* True */);\n    }\n    has(charCode) {\n        return (this._actual.get(charCode) === 1 /* True */);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}