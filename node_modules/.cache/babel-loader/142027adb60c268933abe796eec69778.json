{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\nexport class SurroundSelectionCommand {\n  constructor(range, charBeforeSelection, charAfterSelection) {\n    this._range = range;\n    this._charBeforeSelection = charBeforeSelection;\n    this._charAfterSelection = charAfterSelection;\n  }\n\n  getEditOperations(model, builder) {\n    builder.addTrackedEditOperation(new Range(this._range.startLineNumber, this._range.startColumn, this._range.startLineNumber, this._range.startColumn), this._charBeforeSelection);\n    builder.addTrackedEditOperation(new Range(this._range.endLineNumber, this._range.endColumn, this._range.endLineNumber, this._range.endColumn), this._charAfterSelection);\n  }\n\n  computeCursorState(model, helper) {\n    const inverseEditOperations = helper.getInverseEditOperations();\n    const firstOperationRange = inverseEditOperations[0].range;\n    const secondOperationRange = inverseEditOperations[1].range;\n    return new Selection(firstOperationRange.endLineNumber, firstOperationRange.endColumn, secondOperationRange.endLineNumber, secondOperationRange.endColumn - this._charAfterSelection.length);\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/common/commands/surroundSelectionCommand.js"],"names":["Range","Selection","SurroundSelectionCommand","constructor","range","charBeforeSelection","charAfterSelection","_range","_charBeforeSelection","_charAfterSelection","getEditOperations","model","builder","addTrackedEditOperation","startLineNumber","startColumn","endLineNumber","endColumn","computeCursorState","helper","inverseEditOperations","getInverseEditOperations","firstOperationRange","secondOperationRange","length"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,KAAT,QAAsB,kBAAtB;AACA,SAASC,SAAT,QAA0B,sBAA1B;AACA,OAAO,MAAMC,wBAAN,CAA+B;AAClCC,EAAAA,WAAW,CAACC,KAAD,EAAQC,mBAAR,EAA6BC,kBAA7B,EAAiD;AACxD,SAAKC,MAAL,GAAcH,KAAd;AACA,SAAKI,oBAAL,GAA4BH,mBAA5B;AACA,SAAKI,mBAAL,GAA2BH,kBAA3B;AACH;;AACDI,EAAAA,iBAAiB,CAACC,KAAD,EAAQC,OAAR,EAAiB;AAC9BA,IAAAA,OAAO,CAACC,uBAAR,CAAgC,IAAIb,KAAJ,CAAU,KAAKO,MAAL,CAAYO,eAAtB,EAAuC,KAAKP,MAAL,CAAYQ,WAAnD,EAAgE,KAAKR,MAAL,CAAYO,eAA5E,EAA6F,KAAKP,MAAL,CAAYQ,WAAzG,CAAhC,EAAuJ,KAAKP,oBAA5J;AACAI,IAAAA,OAAO,CAACC,uBAAR,CAAgC,IAAIb,KAAJ,CAAU,KAAKO,MAAL,CAAYS,aAAtB,EAAqC,KAAKT,MAAL,CAAYU,SAAjD,EAA4D,KAAKV,MAAL,CAAYS,aAAxE,EAAuF,KAAKT,MAAL,CAAYU,SAAnG,CAAhC,EAA+I,KAAKR,mBAApJ;AACH;;AACDS,EAAAA,kBAAkB,CAACP,KAAD,EAAQQ,MAAR,EAAgB;AAC9B,UAAMC,qBAAqB,GAAGD,MAAM,CAACE,wBAAP,EAA9B;AACA,UAAMC,mBAAmB,GAAGF,qBAAqB,CAAC,CAAD,CAArB,CAAyBhB,KAArD;AACA,UAAMmB,oBAAoB,GAAGH,qBAAqB,CAAC,CAAD,CAArB,CAAyBhB,KAAtD;AACA,WAAO,IAAIH,SAAJ,CAAcqB,mBAAmB,CAACN,aAAlC,EAAiDM,mBAAmB,CAACL,SAArE,EAAgFM,oBAAoB,CAACP,aAArG,EAAoHO,oBAAoB,CAACN,SAArB,GAAiC,KAAKR,mBAAL,CAAyBe,MAA9K,CAAP;AACH;;AAfiC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\nexport class SurroundSelectionCommand {\n    constructor(range, charBeforeSelection, charAfterSelection) {\n        this._range = range;\n        this._charBeforeSelection = charBeforeSelection;\n        this._charAfterSelection = charAfterSelection;\n    }\n    getEditOperations(model, builder) {\n        builder.addTrackedEditOperation(new Range(this._range.startLineNumber, this._range.startColumn, this._range.startLineNumber, this._range.startColumn), this._charBeforeSelection);\n        builder.addTrackedEditOperation(new Range(this._range.endLineNumber, this._range.endColumn, this._range.endLineNumber, this._range.endColumn), this._charAfterSelection);\n    }\n    computeCursorState(model, helper) {\n        const inverseEditOperations = helper.getInverseEditOperations();\n        const firstOperationRange = inverseEditOperations[0].range;\n        const secondOperationRange = inverseEditOperations[1].range;\n        return new Selection(firstOperationRange.endLineNumber, firstOperationRange.endColumn, secondOperationRange.endLineNumber, secondOperationRange.endColumn - this._charAfterSelection.length);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}