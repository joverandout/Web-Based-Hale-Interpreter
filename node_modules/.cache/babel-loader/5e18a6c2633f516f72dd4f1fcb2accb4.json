{"ast":null,"code":"import { TernarySearchTree } from '../../../base/common/map.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nexport const IWorkspaceContextService = createDecorator('contextService');\nexport class Workspace {\n  constructor(_id, folders, _transient, _configuration, _ignorePathCasing) {\n    this._id = _id;\n    this._transient = _transient;\n    this._configuration = _configuration;\n    this._ignorePathCasing = _ignorePathCasing;\n    this._foldersMap = TernarySearchTree.forUris(this._ignorePathCasing);\n    this.folders = folders;\n  }\n\n  get folders() {\n    return this._folders;\n  }\n\n  set folders(folders) {\n    this._folders = folders;\n    this.updateFoldersMap();\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  get transient() {\n    return this._transient;\n  }\n\n  get configuration() {\n    return this._configuration;\n  }\n\n  set configuration(configuration) {\n    this._configuration = configuration;\n  }\n\n  getFolder(resource) {\n    if (!resource) {\n      return null;\n    }\n\n    return this._foldersMap.findSubstr(resource.with({\n      scheme: resource.scheme,\n      authority: resource.authority,\n      path: resource.path\n    })) || null;\n  }\n\n  updateFoldersMap() {\n    this._foldersMap = TernarySearchTree.forUris(this._ignorePathCasing);\n\n    for (const folder of this.folders) {\n      this._foldersMap.set(folder.uri, folder);\n    }\n  }\n\n  toJSON() {\n    return {\n      id: this.id,\n      folders: this.folders,\n      transient: this.transient,\n      configuration: this.configuration\n    };\n  }\n\n}\nexport class WorkspaceFolder {\n  constructor(data, raw) {\n    this.raw = raw;\n    this.uri = data.uri;\n    this.index = data.index;\n    this.name = data.name;\n  }\n\n  toJSON() {\n    return {\n      uri: this.uri,\n      name: this.name,\n      index: this.index\n    };\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/platform/workspace/common/workspace.js"],"names":["TernarySearchTree","createDecorator","IWorkspaceContextService","Workspace","constructor","_id","folders","_transient","_configuration","_ignorePathCasing","_foldersMap","forUris","_folders","updateFoldersMap","id","transient","configuration","getFolder","resource","findSubstr","with","scheme","authority","path","folder","set","uri","toJSON","WorkspaceFolder","data","raw","index","name"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,6BAAlC;AACA,SAASC,eAAT,QAAgC,6CAAhC;AACA,OAAO,MAAMC,wBAAwB,GAAGD,eAAe,CAAC,gBAAD,CAAhD;AACP,OAAO,MAAME,SAAN,CAAgB;AACnBC,EAAAA,WAAW,CAACC,GAAD,EAAMC,OAAN,EAAeC,UAAf,EAA2BC,cAA3B,EAA2CC,iBAA3C,EAA8D;AACrE,SAAKJ,GAAL,GAAWA,GAAX;AACA,SAAKE,UAAL,GAAkBA,UAAlB;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACA,SAAKC,iBAAL,GAAyBA,iBAAzB;AACA,SAAKC,WAAL,GAAmBV,iBAAiB,CAACW,OAAlB,CAA0B,KAAKF,iBAA/B,CAAnB;AACA,SAAKH,OAAL,GAAeA,OAAf;AACH;;AACU,MAAPA,OAAO,GAAG;AACV,WAAO,KAAKM,QAAZ;AACH;;AACU,MAAPN,OAAO,CAACA,OAAD,EAAU;AACjB,SAAKM,QAAL,GAAgBN,OAAhB;AACA,SAAKO,gBAAL;AACH;;AACK,MAAFC,EAAE,GAAG;AACL,WAAO,KAAKT,GAAZ;AACH;;AACY,MAATU,SAAS,GAAG;AACZ,WAAO,KAAKR,UAAZ;AACH;;AACgB,MAAbS,aAAa,GAAG;AAChB,WAAO,KAAKR,cAAZ;AACH;;AACgB,MAAbQ,aAAa,CAACA,aAAD,EAAgB;AAC7B,SAAKR,cAAL,GAAsBQ,aAAtB;AACH;;AACDC,EAAAA,SAAS,CAACC,QAAD,EAAW;AAChB,QAAI,CAACA,QAAL,EAAe;AACX,aAAO,IAAP;AACH;;AACD,WAAO,KAAKR,WAAL,CAAiBS,UAAjB,CAA4BD,QAAQ,CAACE,IAAT,CAAc;AAC7CC,MAAAA,MAAM,EAAEH,QAAQ,CAACG,MAD4B;AAE7CC,MAAAA,SAAS,EAAEJ,QAAQ,CAACI,SAFyB;AAG7CC,MAAAA,IAAI,EAAEL,QAAQ,CAACK;AAH8B,KAAd,CAA5B,KAIA,IAJP;AAKH;;AACDV,EAAAA,gBAAgB,GAAG;AACf,SAAKH,WAAL,GAAmBV,iBAAiB,CAACW,OAAlB,CAA0B,KAAKF,iBAA/B,CAAnB;;AACA,SAAK,MAAMe,MAAX,IAAqB,KAAKlB,OAA1B,EAAmC;AAC/B,WAAKI,WAAL,CAAiBe,GAAjB,CAAqBD,MAAM,CAACE,GAA5B,EAAiCF,MAAjC;AACH;AACJ;;AACDG,EAAAA,MAAM,GAAG;AACL,WAAO;AAAEb,MAAAA,EAAE,EAAE,KAAKA,EAAX;AAAeR,MAAAA,OAAO,EAAE,KAAKA,OAA7B;AAAsCS,MAAAA,SAAS,EAAE,KAAKA,SAAtD;AAAiEC,MAAAA,aAAa,EAAE,KAAKA;AAArF,KAAP;AACH;;AA9CkB;AAgDvB,OAAO,MAAMY,eAAN,CAAsB;AACzBxB,EAAAA,WAAW,CAACyB,IAAD,EAAOC,GAAP,EAAY;AACnB,SAAKA,GAAL,GAAWA,GAAX;AACA,SAAKJ,GAAL,GAAWG,IAAI,CAACH,GAAhB;AACA,SAAKK,KAAL,GAAaF,IAAI,CAACE,KAAlB;AACA,SAAKC,IAAL,GAAYH,IAAI,CAACG,IAAjB;AACH;;AACDL,EAAAA,MAAM,GAAG;AACL,WAAO;AAAED,MAAAA,GAAG,EAAE,KAAKA,GAAZ;AAAiBM,MAAAA,IAAI,EAAE,KAAKA,IAA5B;AAAkCD,MAAAA,KAAK,EAAE,KAAKA;AAA9C,KAAP;AACH;;AATwB","sourcesContent":["import { TernarySearchTree } from '../../../base/common/map.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nexport const IWorkspaceContextService = createDecorator('contextService');\nexport class Workspace {\n    constructor(_id, folders, _transient, _configuration, _ignorePathCasing) {\n        this._id = _id;\n        this._transient = _transient;\n        this._configuration = _configuration;\n        this._ignorePathCasing = _ignorePathCasing;\n        this._foldersMap = TernarySearchTree.forUris(this._ignorePathCasing);\n        this.folders = folders;\n    }\n    get folders() {\n        return this._folders;\n    }\n    set folders(folders) {\n        this._folders = folders;\n        this.updateFoldersMap();\n    }\n    get id() {\n        return this._id;\n    }\n    get transient() {\n        return this._transient;\n    }\n    get configuration() {\n        return this._configuration;\n    }\n    set configuration(configuration) {\n        this._configuration = configuration;\n    }\n    getFolder(resource) {\n        if (!resource) {\n            return null;\n        }\n        return this._foldersMap.findSubstr(resource.with({\n            scheme: resource.scheme,\n            authority: resource.authority,\n            path: resource.path\n        })) || null;\n    }\n    updateFoldersMap() {\n        this._foldersMap = TernarySearchTree.forUris(this._ignorePathCasing);\n        for (const folder of this.folders) {\n            this._foldersMap.set(folder.uri, folder);\n        }\n    }\n    toJSON() {\n        return { id: this.id, folders: this.folders, transient: this.transient, configuration: this.configuration };\n    }\n}\nexport class WorkspaceFolder {\n    constructor(data, raw) {\n        this.raw = raw;\n        this.uri = data.uri;\n        this.index = data.index;\n        this.name = data.name;\n    }\n    toJSON() {\n        return { uri: this.uri, name: this.name, index: this.index };\n    }\n}\n"]},"metadata":{},"sourceType":"module"}