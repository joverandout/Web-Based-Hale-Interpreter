{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as assert from '../../../base/common/assert.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport * as objects from '../../../base/common/objects.js';\nimport { Range } from '../../common/core/range.js';\nconst defaultOptions = {\n  followsCaret: true,\n  ignoreCharChanges: true,\n  alwaysRevealFirst: true\n};\n/**\n * Create a new diff navigator for the provided diff editor.\n */\n\nexport class DiffNavigator extends Disposable {\n  constructor(editor, options = {}) {\n    super();\n    this._onDidUpdate = this._register(new Emitter());\n    this._editor = editor;\n    this._options = objects.mixin(options, defaultOptions, false);\n    this.disposed = false;\n    this.nextIdx = -1;\n    this.ranges = [];\n    this.ignoreSelectionChange = false;\n    this.revealFirst = Boolean(this._options.alwaysRevealFirst); // hook up to diff editor for diff, disposal, and caret move\n\n    this._register(this._editor.onDidDispose(() => this.dispose()));\n\n    this._register(this._editor.onDidUpdateDiff(() => this._onDiffUpdated()));\n\n    if (this._options.followsCaret) {\n      this._register(this._editor.getModifiedEditor().onDidChangeCursorPosition(e => {\n        if (this.ignoreSelectionChange) {\n          return;\n        }\n\n        this.nextIdx = -1;\n      }));\n    }\n\n    if (this._options.alwaysRevealFirst) {\n      this._register(this._editor.getModifiedEditor().onDidChangeModel(e => {\n        this.revealFirst = true;\n      }));\n    } // init things\n\n\n    this._init();\n  }\n\n  _init() {\n    const changes = this._editor.getLineChanges();\n\n    if (!changes) {\n      return;\n    }\n  }\n\n  _onDiffUpdated() {\n    this._init();\n\n    this._compute(this._editor.getLineChanges());\n\n    if (this.revealFirst) {\n      // Only reveal first on first non-null changes\n      if (this._editor.getLineChanges() !== null) {\n        this.revealFirst = false;\n        this.nextIdx = -1;\n        this.next(1\n        /* Immediate */\n        );\n      }\n    }\n  }\n\n  _compute(lineChanges) {\n    // new ranges\n    this.ranges = [];\n\n    if (lineChanges) {\n      // create ranges from changes\n      lineChanges.forEach(lineChange => {\n        if (!this._options.ignoreCharChanges && lineChange.charChanges) {\n          lineChange.charChanges.forEach(charChange => {\n            this.ranges.push({\n              rhs: true,\n              range: new Range(charChange.modifiedStartLineNumber, charChange.modifiedStartColumn, charChange.modifiedEndLineNumber, charChange.modifiedEndColumn)\n            });\n          });\n        } else {\n          if (lineChange.modifiedEndLineNumber === 0) {\n            // a deletion\n            this.ranges.push({\n              rhs: true,\n              range: new Range(lineChange.modifiedStartLineNumber, 1, lineChange.modifiedStartLineNumber + 1, 1)\n            });\n          } else {\n            // an insertion or modification\n            this.ranges.push({\n              rhs: true,\n              range: new Range(lineChange.modifiedStartLineNumber, 1, lineChange.modifiedEndLineNumber + 1, 1)\n            });\n          }\n        }\n      });\n    } // sort\n\n\n    this.ranges.sort((left, right) => Range.compareRangesUsingStarts(left.range, right.range));\n\n    this._onDidUpdate.fire(this);\n  }\n\n  _initIdx(fwd) {\n    let found = false;\n\n    const position = this._editor.getPosition();\n\n    if (!position) {\n      this.nextIdx = 0;\n      return;\n    }\n\n    for (let i = 0, len = this.ranges.length; i < len && !found; i++) {\n      const range = this.ranges[i].range;\n\n      if (position.isBeforeOrEqual(range.getStartPosition())) {\n        this.nextIdx = i + (fwd ? 0 : -1);\n        found = true;\n      }\n    }\n\n    if (!found) {\n      // after the last change\n      this.nextIdx = fwd ? 0 : this.ranges.length - 1;\n    }\n\n    if (this.nextIdx < 0) {\n      this.nextIdx = this.ranges.length - 1;\n    }\n  }\n\n  _move(fwd, scrollType) {\n    assert.ok(!this.disposed, 'Illegal State - diff navigator has been disposed');\n\n    if (!this.canNavigate()) {\n      return;\n    }\n\n    if (this.nextIdx === -1) {\n      this._initIdx(fwd);\n    } else if (fwd) {\n      this.nextIdx += 1;\n\n      if (this.nextIdx >= this.ranges.length) {\n        this.nextIdx = 0;\n      }\n    } else {\n      this.nextIdx -= 1;\n\n      if (this.nextIdx < 0) {\n        this.nextIdx = this.ranges.length - 1;\n      }\n    }\n\n    const info = this.ranges[this.nextIdx];\n    this.ignoreSelectionChange = true;\n\n    try {\n      const pos = info.range.getStartPosition();\n\n      this._editor.setPosition(pos);\n\n      this._editor.revealRangeInCenter(info.range, scrollType);\n    } finally {\n      this.ignoreSelectionChange = false;\n    }\n  }\n\n  canNavigate() {\n    return this.ranges && this.ranges.length > 0;\n  }\n\n  next(scrollType = 0\n  /* Smooth */\n  ) {\n    this._move(true, scrollType);\n  }\n\n  previous(scrollType = 0\n  /* Smooth */\n  ) {\n    this._move(false, scrollType);\n  }\n\n  dispose() {\n    super.dispose();\n    this.ranges = [];\n    this.disposed = true;\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/browser/widget/diffNavigator.js"],"names":["assert","Emitter","Disposable","objects","Range","defaultOptions","followsCaret","ignoreCharChanges","alwaysRevealFirst","DiffNavigator","constructor","editor","options","_onDidUpdate","_register","_editor","_options","mixin","disposed","nextIdx","ranges","ignoreSelectionChange","revealFirst","Boolean","onDidDispose","dispose","onDidUpdateDiff","_onDiffUpdated","getModifiedEditor","onDidChangeCursorPosition","e","onDidChangeModel","_init","changes","getLineChanges","_compute","next","lineChanges","forEach","lineChange","charChanges","charChange","push","rhs","range","modifiedStartLineNumber","modifiedStartColumn","modifiedEndLineNumber","modifiedEndColumn","sort","left","right","compareRangesUsingStarts","fire","_initIdx","fwd","found","position","getPosition","i","len","length","isBeforeOrEqual","getStartPosition","_move","scrollType","ok","canNavigate","info","pos","setPosition","revealRangeInCenter","previous"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as assert from '../../../base/common/assert.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport * as objects from '../../../base/common/objects.js';\nimport { Range } from '../../common/core/range.js';\nconst defaultOptions = {\n    followsCaret: true,\n    ignoreCharChanges: true,\n    alwaysRevealFirst: true\n};\n/**\n * Create a new diff navigator for the provided diff editor.\n */\nexport class DiffNavigator extends Disposable {\n    constructor(editor, options = {}) {\n        super();\n        this._onDidUpdate = this._register(new Emitter());\n        this._editor = editor;\n        this._options = objects.mixin(options, defaultOptions, false);\n        this.disposed = false;\n        this.nextIdx = -1;\n        this.ranges = [];\n        this.ignoreSelectionChange = false;\n        this.revealFirst = Boolean(this._options.alwaysRevealFirst);\n        // hook up to diff editor for diff, disposal, and caret move\n        this._register(this._editor.onDidDispose(() => this.dispose()));\n        this._register(this._editor.onDidUpdateDiff(() => this._onDiffUpdated()));\n        if (this._options.followsCaret) {\n            this._register(this._editor.getModifiedEditor().onDidChangeCursorPosition((e) => {\n                if (this.ignoreSelectionChange) {\n                    return;\n                }\n                this.nextIdx = -1;\n            }));\n        }\n        if (this._options.alwaysRevealFirst) {\n            this._register(this._editor.getModifiedEditor().onDidChangeModel((e) => {\n                this.revealFirst = true;\n            }));\n        }\n        // init things\n        this._init();\n    }\n    _init() {\n        const changes = this._editor.getLineChanges();\n        if (!changes) {\n            return;\n        }\n    }\n    _onDiffUpdated() {\n        this._init();\n        this._compute(this._editor.getLineChanges());\n        if (this.revealFirst) {\n            // Only reveal first on first non-null changes\n            if (this._editor.getLineChanges() !== null) {\n                this.revealFirst = false;\n                this.nextIdx = -1;\n                this.next(1 /* Immediate */);\n            }\n        }\n    }\n    _compute(lineChanges) {\n        // new ranges\n        this.ranges = [];\n        if (lineChanges) {\n            // create ranges from changes\n            lineChanges.forEach((lineChange) => {\n                if (!this._options.ignoreCharChanges && lineChange.charChanges) {\n                    lineChange.charChanges.forEach((charChange) => {\n                        this.ranges.push({\n                            rhs: true,\n                            range: new Range(charChange.modifiedStartLineNumber, charChange.modifiedStartColumn, charChange.modifiedEndLineNumber, charChange.modifiedEndColumn)\n                        });\n                    });\n                }\n                else {\n                    if (lineChange.modifiedEndLineNumber === 0) {\n                        // a deletion\n                        this.ranges.push({\n                            rhs: true,\n                            range: new Range(lineChange.modifiedStartLineNumber, 1, lineChange.modifiedStartLineNumber + 1, 1)\n                        });\n                    }\n                    else {\n                        // an insertion or modification\n                        this.ranges.push({\n                            rhs: true,\n                            range: new Range(lineChange.modifiedStartLineNumber, 1, lineChange.modifiedEndLineNumber + 1, 1)\n                        });\n                    }\n                }\n            });\n        }\n        // sort\n        this.ranges.sort((left, right) => Range.compareRangesUsingStarts(left.range, right.range));\n        this._onDidUpdate.fire(this);\n    }\n    _initIdx(fwd) {\n        let found = false;\n        const position = this._editor.getPosition();\n        if (!position) {\n            this.nextIdx = 0;\n            return;\n        }\n        for (let i = 0, len = this.ranges.length; i < len && !found; i++) {\n            const range = this.ranges[i].range;\n            if (position.isBeforeOrEqual(range.getStartPosition())) {\n                this.nextIdx = i + (fwd ? 0 : -1);\n                found = true;\n            }\n        }\n        if (!found) {\n            // after the last change\n            this.nextIdx = fwd ? 0 : this.ranges.length - 1;\n        }\n        if (this.nextIdx < 0) {\n            this.nextIdx = this.ranges.length - 1;\n        }\n    }\n    _move(fwd, scrollType) {\n        assert.ok(!this.disposed, 'Illegal State - diff navigator has been disposed');\n        if (!this.canNavigate()) {\n            return;\n        }\n        if (this.nextIdx === -1) {\n            this._initIdx(fwd);\n        }\n        else if (fwd) {\n            this.nextIdx += 1;\n            if (this.nextIdx >= this.ranges.length) {\n                this.nextIdx = 0;\n            }\n        }\n        else {\n            this.nextIdx -= 1;\n            if (this.nextIdx < 0) {\n                this.nextIdx = this.ranges.length - 1;\n            }\n        }\n        const info = this.ranges[this.nextIdx];\n        this.ignoreSelectionChange = true;\n        try {\n            const pos = info.range.getStartPosition();\n            this._editor.setPosition(pos);\n            this._editor.revealRangeInCenter(info.range, scrollType);\n        }\n        finally {\n            this.ignoreSelectionChange = false;\n        }\n    }\n    canNavigate() {\n        return this.ranges && this.ranges.length > 0;\n    }\n    next(scrollType = 0 /* Smooth */) {\n        this._move(true, scrollType);\n    }\n    previous(scrollType = 0 /* Smooth */) {\n        this._move(false, scrollType);\n    }\n    dispose() {\n        super.dispose();\n        this.ranges = [];\n        this.disposed = true;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}