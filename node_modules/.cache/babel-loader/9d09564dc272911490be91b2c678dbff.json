{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\nimport { applyFontInfo } from '../config/domFontInfo.js';\nimport { VisibleLinesCollection } from './viewLayer.js';\nimport { ViewPart } from './viewPart.js';\nexport class ViewOverlays extends ViewPart {\n  constructor(context) {\n    super(context);\n    this._visibleLines = new VisibleLinesCollection(this);\n    this.domNode = this._visibleLines.domNode;\n    this._dynamicOverlays = [];\n    this._isFocused = false;\n    this.domNode.setClassName('view-overlays');\n  }\n\n  shouldRender() {\n    if (super.shouldRender()) {\n      return true;\n    }\n\n    for (let i = 0, len = this._dynamicOverlays.length; i < len; i++) {\n      const dynamicOverlay = this._dynamicOverlays[i];\n\n      if (dynamicOverlay.shouldRender()) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  dispose() {\n    super.dispose();\n\n    for (let i = 0, len = this._dynamicOverlays.length; i < len; i++) {\n      const dynamicOverlay = this._dynamicOverlays[i];\n      dynamicOverlay.dispose();\n    }\n\n    this._dynamicOverlays = [];\n  }\n\n  getDomNode() {\n    return this.domNode;\n  } // ---- begin IVisibleLinesHost\n\n\n  createVisibleLine() {\n    return new ViewOverlayLine(this._context.configuration, this._dynamicOverlays);\n  } // ---- end IVisibleLinesHost\n\n\n  addDynamicOverlay(overlay) {\n    this._dynamicOverlays.push(overlay);\n  } // ----- event handlers\n\n\n  onConfigurationChanged(e) {\n    this._visibleLines.onConfigurationChanged(e);\n\n    const startLineNumber = this._visibleLines.getStartLineNumber();\n\n    const endLineNumber = this._visibleLines.getEndLineNumber();\n\n    for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n      const line = this._visibleLines.getVisibleLine(lineNumber);\n\n      line.onConfigurationChanged(e);\n    }\n\n    return true;\n  }\n\n  onFlushed(e) {\n    return this._visibleLines.onFlushed(e);\n  }\n\n  onFocusChanged(e) {\n    this._isFocused = e.isFocused;\n    return true;\n  }\n\n  onLinesChanged(e) {\n    return this._visibleLines.onLinesChanged(e);\n  }\n\n  onLinesDeleted(e) {\n    return this._visibleLines.onLinesDeleted(e);\n  }\n\n  onLinesInserted(e) {\n    return this._visibleLines.onLinesInserted(e);\n  }\n\n  onScrollChanged(e) {\n    return this._visibleLines.onScrollChanged(e) || true;\n  }\n\n  onTokensChanged(e) {\n    return this._visibleLines.onTokensChanged(e);\n  }\n\n  onZonesChanged(e) {\n    return this._visibleLines.onZonesChanged(e);\n  } // ----- end event handlers\n\n\n  prepareRender(ctx) {\n    const toRender = this._dynamicOverlays.filter(overlay => overlay.shouldRender());\n\n    for (let i = 0, len = toRender.length; i < len; i++) {\n      const dynamicOverlay = toRender[i];\n      dynamicOverlay.prepareRender(ctx);\n      dynamicOverlay.onDidRender();\n    }\n  }\n\n  render(ctx) {\n    // Overwriting to bypass `shouldRender` flag\n    this._viewOverlaysRender(ctx);\n\n    this.domNode.toggleClassName('focused', this._isFocused);\n  }\n\n  _viewOverlaysRender(ctx) {\n    this._visibleLines.renderLines(ctx.viewportData);\n  }\n\n}\nexport class ViewOverlayLine {\n  constructor(configuration, dynamicOverlays) {\n    this._configuration = configuration;\n    this._lineHeight = this._configuration.options.get(59\n    /* lineHeight */\n    );\n    this._dynamicOverlays = dynamicOverlays;\n    this._domNode = null;\n    this._renderedContent = null;\n  }\n\n  getDomNode() {\n    if (!this._domNode) {\n      return null;\n    }\n\n    return this._domNode.domNode;\n  }\n\n  setDomNode(domNode) {\n    this._domNode = createFastDomNode(domNode);\n  }\n\n  onContentChanged() {// Nothing\n  }\n\n  onTokensChanged() {// Nothing\n  }\n\n  onConfigurationChanged(e) {\n    this._lineHeight = this._configuration.options.get(59\n    /* lineHeight */\n    );\n  }\n\n  renderLine(lineNumber, deltaTop, viewportData, sb) {\n    let result = '';\n\n    for (let i = 0, len = this._dynamicOverlays.length; i < len; i++) {\n      const dynamicOverlay = this._dynamicOverlays[i];\n      result += dynamicOverlay.render(viewportData.startLineNumber, lineNumber);\n    }\n\n    if (this._renderedContent === result) {\n      // No rendering needed\n      return false;\n    }\n\n    this._renderedContent = result;\n    sb.appendASCIIString('<div style=\"position:absolute;top:');\n    sb.appendASCIIString(String(deltaTop));\n    sb.appendASCIIString('px;width:100%;height:');\n    sb.appendASCIIString(String(this._lineHeight));\n    sb.appendASCIIString('px;\">');\n    sb.appendASCIIString(result);\n    sb.appendASCIIString('</div>');\n    return true;\n  }\n\n  layoutLine(lineNumber, deltaTop) {\n    if (this._domNode) {\n      this._domNode.setTop(deltaTop);\n\n      this._domNode.setHeight(this._lineHeight);\n    }\n  }\n\n}\nexport class ContentViewOverlays extends ViewOverlays {\n  constructor(context) {\n    super(context);\n    const options = this._context.configuration.options;\n    const layoutInfo = options.get(131\n    /* layoutInfo */\n    );\n    this._contentWidth = layoutInfo.contentWidth;\n    this.domNode.setHeight(0);\n  } // --- begin event handlers\n\n\n  onConfigurationChanged(e) {\n    const options = this._context.configuration.options;\n    const layoutInfo = options.get(131\n    /* layoutInfo */\n    );\n    this._contentWidth = layoutInfo.contentWidth;\n    return super.onConfigurationChanged(e) || true;\n  }\n\n  onScrollChanged(e) {\n    return super.onScrollChanged(e) || e.scrollWidthChanged;\n  } // --- end event handlers\n\n\n  _viewOverlaysRender(ctx) {\n    super._viewOverlaysRender(ctx);\n\n    this.domNode.setWidth(Math.max(ctx.scrollWidth, this._contentWidth));\n  }\n\n}\nexport class MarginViewOverlays extends ViewOverlays {\n  constructor(context) {\n    super(context);\n    const options = this._context.configuration.options;\n    const layoutInfo = options.get(131\n    /* layoutInfo */\n    );\n    this._contentLeft = layoutInfo.contentLeft;\n    this.domNode.setClassName('margin-view-overlays');\n    this.domNode.setWidth(1);\n    applyFontInfo(this.domNode, options.get(44\n    /* fontInfo */\n    ));\n  }\n\n  onConfigurationChanged(e) {\n    const options = this._context.configuration.options;\n    applyFontInfo(this.domNode, options.get(44\n    /* fontInfo */\n    ));\n    const layoutInfo = options.get(131\n    /* layoutInfo */\n    );\n    this._contentLeft = layoutInfo.contentLeft;\n    return super.onConfigurationChanged(e) || true;\n  }\n\n  onScrollChanged(e) {\n    return super.onScrollChanged(e) || e.scrollHeightChanged;\n  }\n\n  _viewOverlaysRender(ctx) {\n    super._viewOverlaysRender(ctx);\n\n    const height = Math.min(ctx.scrollHeight, 1000000);\n    this.domNode.setHeight(height);\n    this.domNode.setWidth(this._contentLeft);\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/browser/view/viewOverlays.js"],"names":["createFastDomNode","applyFontInfo","VisibleLinesCollection","ViewPart","ViewOverlays","constructor","context","_visibleLines","domNode","_dynamicOverlays","_isFocused","setClassName","shouldRender","i","len","length","dynamicOverlay","dispose","getDomNode","createVisibleLine","ViewOverlayLine","_context","configuration","addDynamicOverlay","overlay","push","onConfigurationChanged","e","startLineNumber","getStartLineNumber","endLineNumber","getEndLineNumber","lineNumber","line","getVisibleLine","onFlushed","onFocusChanged","isFocused","onLinesChanged","onLinesDeleted","onLinesInserted","onScrollChanged","onTokensChanged","onZonesChanged","prepareRender","ctx","toRender","filter","onDidRender","render","_viewOverlaysRender","toggleClassName","renderLines","viewportData","dynamicOverlays","_configuration","_lineHeight","options","get","_domNode","_renderedContent","setDomNode","onContentChanged","renderLine","deltaTop","sb","result","appendASCIIString","String","layoutLine","setTop","setHeight","ContentViewOverlays","layoutInfo","_contentWidth","contentWidth","scrollWidthChanged","setWidth","Math","max","scrollWidth","MarginViewOverlays","_contentLeft","contentLeft","scrollHeightChanged","height","min","scrollHeight"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\nimport { applyFontInfo } from '../config/domFontInfo.js';\nimport { VisibleLinesCollection } from './viewLayer.js';\nimport { ViewPart } from './viewPart.js';\nexport class ViewOverlays extends ViewPart {\n    constructor(context) {\n        super(context);\n        this._visibleLines = new VisibleLinesCollection(this);\n        this.domNode = this._visibleLines.domNode;\n        this._dynamicOverlays = [];\n        this._isFocused = false;\n        this.domNode.setClassName('view-overlays');\n    }\n    shouldRender() {\n        if (super.shouldRender()) {\n            return true;\n        }\n        for (let i = 0, len = this._dynamicOverlays.length; i < len; i++) {\n            const dynamicOverlay = this._dynamicOverlays[i];\n            if (dynamicOverlay.shouldRender()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    dispose() {\n        super.dispose();\n        for (let i = 0, len = this._dynamicOverlays.length; i < len; i++) {\n            const dynamicOverlay = this._dynamicOverlays[i];\n            dynamicOverlay.dispose();\n        }\n        this._dynamicOverlays = [];\n    }\n    getDomNode() {\n        return this.domNode;\n    }\n    // ---- begin IVisibleLinesHost\n    createVisibleLine() {\n        return new ViewOverlayLine(this._context.configuration, this._dynamicOverlays);\n    }\n    // ---- end IVisibleLinesHost\n    addDynamicOverlay(overlay) {\n        this._dynamicOverlays.push(overlay);\n    }\n    // ----- event handlers\n    onConfigurationChanged(e) {\n        this._visibleLines.onConfigurationChanged(e);\n        const startLineNumber = this._visibleLines.getStartLineNumber();\n        const endLineNumber = this._visibleLines.getEndLineNumber();\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            const line = this._visibleLines.getVisibleLine(lineNumber);\n            line.onConfigurationChanged(e);\n        }\n        return true;\n    }\n    onFlushed(e) {\n        return this._visibleLines.onFlushed(e);\n    }\n    onFocusChanged(e) {\n        this._isFocused = e.isFocused;\n        return true;\n    }\n    onLinesChanged(e) {\n        return this._visibleLines.onLinesChanged(e);\n    }\n    onLinesDeleted(e) {\n        return this._visibleLines.onLinesDeleted(e);\n    }\n    onLinesInserted(e) {\n        return this._visibleLines.onLinesInserted(e);\n    }\n    onScrollChanged(e) {\n        return this._visibleLines.onScrollChanged(e) || true;\n    }\n    onTokensChanged(e) {\n        return this._visibleLines.onTokensChanged(e);\n    }\n    onZonesChanged(e) {\n        return this._visibleLines.onZonesChanged(e);\n    }\n    // ----- end event handlers\n    prepareRender(ctx) {\n        const toRender = this._dynamicOverlays.filter(overlay => overlay.shouldRender());\n        for (let i = 0, len = toRender.length; i < len; i++) {\n            const dynamicOverlay = toRender[i];\n            dynamicOverlay.prepareRender(ctx);\n            dynamicOverlay.onDidRender();\n        }\n    }\n    render(ctx) {\n        // Overwriting to bypass `shouldRender` flag\n        this._viewOverlaysRender(ctx);\n        this.domNode.toggleClassName('focused', this._isFocused);\n    }\n    _viewOverlaysRender(ctx) {\n        this._visibleLines.renderLines(ctx.viewportData);\n    }\n}\nexport class ViewOverlayLine {\n    constructor(configuration, dynamicOverlays) {\n        this._configuration = configuration;\n        this._lineHeight = this._configuration.options.get(59 /* lineHeight */);\n        this._dynamicOverlays = dynamicOverlays;\n        this._domNode = null;\n        this._renderedContent = null;\n    }\n    getDomNode() {\n        if (!this._domNode) {\n            return null;\n        }\n        return this._domNode.domNode;\n    }\n    setDomNode(domNode) {\n        this._domNode = createFastDomNode(domNode);\n    }\n    onContentChanged() {\n        // Nothing\n    }\n    onTokensChanged() {\n        // Nothing\n    }\n    onConfigurationChanged(e) {\n        this._lineHeight = this._configuration.options.get(59 /* lineHeight */);\n    }\n    renderLine(lineNumber, deltaTop, viewportData, sb) {\n        let result = '';\n        for (let i = 0, len = this._dynamicOverlays.length; i < len; i++) {\n            const dynamicOverlay = this._dynamicOverlays[i];\n            result += dynamicOverlay.render(viewportData.startLineNumber, lineNumber);\n        }\n        if (this._renderedContent === result) {\n            // No rendering needed\n            return false;\n        }\n        this._renderedContent = result;\n        sb.appendASCIIString('<div style=\"position:absolute;top:');\n        sb.appendASCIIString(String(deltaTop));\n        sb.appendASCIIString('px;width:100%;height:');\n        sb.appendASCIIString(String(this._lineHeight));\n        sb.appendASCIIString('px;\">');\n        sb.appendASCIIString(result);\n        sb.appendASCIIString('</div>');\n        return true;\n    }\n    layoutLine(lineNumber, deltaTop) {\n        if (this._domNode) {\n            this._domNode.setTop(deltaTop);\n            this._domNode.setHeight(this._lineHeight);\n        }\n    }\n}\nexport class ContentViewOverlays extends ViewOverlays {\n    constructor(context) {\n        super(context);\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this._contentWidth = layoutInfo.contentWidth;\n        this.domNode.setHeight(0);\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this._contentWidth = layoutInfo.contentWidth;\n        return super.onConfigurationChanged(e) || true;\n    }\n    onScrollChanged(e) {\n        return super.onScrollChanged(e) || e.scrollWidthChanged;\n    }\n    // --- end event handlers\n    _viewOverlaysRender(ctx) {\n        super._viewOverlaysRender(ctx);\n        this.domNode.setWidth(Math.max(ctx.scrollWidth, this._contentWidth));\n    }\n}\nexport class MarginViewOverlays extends ViewOverlays {\n    constructor(context) {\n        super(context);\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this._contentLeft = layoutInfo.contentLeft;\n        this.domNode.setClassName('margin-view-overlays');\n        this.domNode.setWidth(1);\n        applyFontInfo(this.domNode, options.get(44 /* fontInfo */));\n    }\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        applyFontInfo(this.domNode, options.get(44 /* fontInfo */));\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this._contentLeft = layoutInfo.contentLeft;\n        return super.onConfigurationChanged(e) || true;\n    }\n    onScrollChanged(e) {\n        return super.onScrollChanged(e) || e.scrollHeightChanged;\n    }\n    _viewOverlaysRender(ctx) {\n        super._viewOverlaysRender(ctx);\n        const height = Math.min(ctx.scrollHeight, 1000000);\n        this.domNode.setHeight(height);\n        this.domNode.setWidth(this._contentLeft);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}