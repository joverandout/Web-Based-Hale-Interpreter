{"ast":null,"code":"/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n// src/basic-languages/bicep/bicep.ts\nvar bounded = text => `\\\\b${text}\\\\b`;\n\nvar identifierStart = \"[_a-zA-Z]\";\nvar identifierContinue = \"[_a-zA-Z0-9]\";\nvar identifier = bounded(`${identifierStart}${identifierContinue}*`);\nvar keywords = [\"targetScope\", \"resource\", \"module\", \"param\", \"var\", \"output\", \"for\", \"in\", \"if\", \"existing\"];\nvar namedLiterals = [\"true\", \"false\", \"null\"];\nvar nonCommentWs = `[ \\\\t\\\\r\\\\n]`;\nvar numericLiteral = `[0-9]+`;\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"]],\n  surroundingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }, {\n    open: \"'''\",\n    close: \"'''\"\n  }],\n  autoClosingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: \"'\",\n    close: \"'\",\n    notIn: [\"string\", \"comment\"]\n  }, {\n    open: \"'''\",\n    close: \"'''\",\n    notIn: [\"string\", \"comment\"]\n  }],\n  autoCloseBefore: \":.,=}])' \\n\t\",\n  indentationRules: {\n    increaseIndentPattern: new RegExp(\"^((?!\\\\/\\\\/).)*(\\\\{[^}\\\"'`]*|\\\\([^)\\\"'`]*|\\\\[[^\\\\]\\\"'`]*)$\"),\n    decreaseIndentPattern: new RegExp(\"^((?!.*?\\\\/\\\\*).*\\\\*/)?\\\\s*[\\\\}\\\\]].*$\")\n  }\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".bicep\",\n  brackets: [{\n    open: \"{\",\n    close: \"}\",\n    token: \"delimiter.curly\"\n  }, {\n    open: \"[\",\n    close: \"]\",\n    token: \"delimiter.square\"\n  }, {\n    open: \"(\",\n    close: \")\",\n    token: \"delimiter.parenthesis\"\n  }],\n  symbols: /[=><!~?:&|+\\-*/^%]+/,\n  keywords,\n  namedLiterals,\n  escapes: `\\\\\\\\(u{[0-9A-Fa-f]+}|n|r|t|\\\\\\\\|'|\\\\\\${)`,\n  tokenizer: {\n    root: [{\n      include: \"@expression\"\n    }, {\n      include: \"@whitespace\"\n    }],\n    stringVerbatim: [{\n      regex: `(|'|'')[^']`,\n      action: {\n        token: \"string\"\n      }\n    }, {\n      regex: `'''`,\n      action: {\n        token: \"string.quote\",\n        next: \"@pop\"\n      }\n    }],\n    stringLiteral: [{\n      regex: `\\\\\\${`,\n      action: {\n        token: \"delimiter.bracket\",\n        next: \"@bracketCounting\"\n      }\n    }, {\n      regex: `[^\\\\\\\\'$]+`,\n      action: {\n        token: \"string\"\n      }\n    }, {\n      regex: \"@escapes\",\n      action: {\n        token: \"string.escape\"\n      }\n    }, {\n      regex: `\\\\\\\\.`,\n      action: {\n        token: \"string.escape.invalid\"\n      }\n    }, {\n      regex: `'`,\n      action: {\n        token: \"string\",\n        next: \"@pop\"\n      }\n    }],\n    bracketCounting: [{\n      regex: `{`,\n      action: {\n        token: \"delimiter.bracket\",\n        next: \"@bracketCounting\"\n      }\n    }, {\n      regex: `}`,\n      action: {\n        token: \"delimiter.bracket\",\n        next: \"@pop\"\n      }\n    }, {\n      include: \"expression\"\n    }],\n    comment: [{\n      regex: `[^\\\\*]+`,\n      action: {\n        token: \"comment\"\n      }\n    }, {\n      regex: `\\\\*\\\\/`,\n      action: {\n        token: \"comment\",\n        next: \"@pop\"\n      }\n    }, {\n      regex: `[\\\\/*]`,\n      action: {\n        token: \"comment\"\n      }\n    }],\n    whitespace: [{\n      regex: nonCommentWs\n    }, {\n      regex: `\\\\/\\\\*`,\n      action: {\n        token: \"comment\",\n        next: \"@comment\"\n      }\n    }, {\n      regex: `\\\\/\\\\/.*$`,\n      action: {\n        token: \"comment\"\n      }\n    }],\n    expression: [{\n      regex: `'''`,\n      action: {\n        token: \"string.quote\",\n        next: \"@stringVerbatim\"\n      }\n    }, {\n      regex: `'`,\n      action: {\n        token: \"string.quote\",\n        next: \"@stringLiteral\"\n      }\n    }, {\n      regex: numericLiteral,\n      action: {\n        token: \"number\"\n      }\n    }, {\n      regex: identifier,\n      action: {\n        cases: {\n          \"@keywords\": {\n            token: \"keyword\"\n          },\n          \"@namedLiterals\": {\n            token: \"keyword\"\n          },\n          \"@default\": {\n            token: \"identifier\"\n          }\n        }\n      }\n    }]\n  }\n};\nexport { conf, language };","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/basic-languages/bicep/bicep.js"],"names":["bounded","text","identifierStart","identifierContinue","identifier","keywords","namedLiterals","nonCommentWs","numericLiteral","conf","comments","lineComment","blockComment","brackets","surroundingPairs","open","close","autoClosingPairs","notIn","autoCloseBefore","indentationRules","increaseIndentPattern","RegExp","decreaseIndentPattern","language","defaultToken","tokenPostfix","token","symbols","escapes","tokenizer","root","include","stringVerbatim","regex","action","next","stringLiteral","bracketCounting","comment","whitespace","expression","cases"],"mappings":"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","sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/bicep/bicep.ts\nvar bounded = (text) => `\\\\b${text}\\\\b`;\nvar identifierStart = \"[_a-zA-Z]\";\nvar identifierContinue = \"[_a-zA-Z0-9]\";\nvar identifier = bounded(`${identifierStart}${identifierContinue}*`);\nvar keywords = [\n  \"targetScope\",\n  \"resource\",\n  \"module\",\n  \"param\",\n  \"var\",\n  \"output\",\n  \"for\",\n  \"in\",\n  \"if\",\n  \"existing\"\n];\nvar namedLiterals = [\"true\", \"false\", \"null\"];\nvar nonCommentWs = `[ \\\\t\\\\r\\\\n]`;\nvar numericLiteral = `[0-9]+`;\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"]\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"'\", close: \"'\" },\n    { open: \"'''\", close: \"'''\" }\n  ],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"'\", close: \"'\", notIn: [\"string\", \"comment\"] },\n    { open: \"'''\", close: \"'''\", notIn: [\"string\", \"comment\"] }\n  ],\n  autoCloseBefore: \":.,=}])' \\n\t\",\n  indentationRules: {\n    increaseIndentPattern: new RegExp(\"^((?!\\\\/\\\\/).)*(\\\\{[^}\\\"'`]*|\\\\([^)\\\"'`]*|\\\\[[^\\\\]\\\"'`]*)$\"),\n    decreaseIndentPattern: new RegExp(\"^((?!.*?\\\\/\\\\*).*\\\\*/)?\\\\s*[\\\\}\\\\]].*$\")\n  }\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".bicep\",\n  brackets: [\n    { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\n    { open: \"[\", close: \"]\", token: \"delimiter.square\" },\n    { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" }\n  ],\n  symbols: /[=><!~?:&|+\\-*/^%]+/,\n  keywords,\n  namedLiterals,\n  escapes: `\\\\\\\\(u{[0-9A-Fa-f]+}|n|r|t|\\\\\\\\|'|\\\\\\${)`,\n  tokenizer: {\n    root: [{ include: \"@expression\" }, { include: \"@whitespace\" }],\n    stringVerbatim: [\n      { regex: `(|'|'')[^']`, action: { token: \"string\" } },\n      { regex: `'''`, action: { token: \"string.quote\", next: \"@pop\" } }\n    ],\n    stringLiteral: [\n      { regex: `\\\\\\${`, action: { token: \"delimiter.bracket\", next: \"@bracketCounting\" } },\n      { regex: `[^\\\\\\\\'$]+`, action: { token: \"string\" } },\n      { regex: \"@escapes\", action: { token: \"string.escape\" } },\n      { regex: `\\\\\\\\.`, action: { token: \"string.escape.invalid\" } },\n      { regex: `'`, action: { token: \"string\", next: \"@pop\" } }\n    ],\n    bracketCounting: [\n      { regex: `{`, action: { token: \"delimiter.bracket\", next: \"@bracketCounting\" } },\n      { regex: `}`, action: { token: \"delimiter.bracket\", next: \"@pop\" } },\n      { include: \"expression\" }\n    ],\n    comment: [\n      { regex: `[^\\\\*]+`, action: { token: \"comment\" } },\n      { regex: `\\\\*\\\\/`, action: { token: \"comment\", next: \"@pop\" } },\n      { regex: `[\\\\/*]`, action: { token: \"comment\" } }\n    ],\n    whitespace: [\n      { regex: nonCommentWs },\n      { regex: `\\\\/\\\\*`, action: { token: \"comment\", next: \"@comment\" } },\n      { regex: `\\\\/\\\\/.*$`, action: { token: \"comment\" } }\n    ],\n    expression: [\n      { regex: `'''`, action: { token: \"string.quote\", next: \"@stringVerbatim\" } },\n      { regex: `'`, action: { token: \"string.quote\", next: \"@stringLiteral\" } },\n      { regex: numericLiteral, action: { token: \"number\" } },\n      {\n        regex: identifier,\n        action: {\n          cases: {\n            \"@keywords\": { token: \"keyword\" },\n            \"@namedLiterals\": { token: \"keyword\" },\n            \"@default\": { token: \"identifier\" }\n          }\n        }\n      }\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"]},"metadata":{},"sourceType":"module"}