{"ast":null,"code":"/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n// src/basic-languages/dart/dart.ts\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"]],\n  autoClosingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: \"'\",\n    close: \"'\",\n    notIn: [\"string\", \"comment\"]\n  }, {\n    open: '\"',\n    close: '\"',\n    notIn: [\"string\"]\n  }, {\n    open: \"`\",\n    close: \"`\",\n    notIn: [\"string\", \"comment\"]\n  }, {\n    open: \"/**\",\n    close: \" */\",\n    notIn: [\"string\"]\n  }],\n  surroundingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: \"<\",\n    close: \">\"\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"`\",\n    close: \"`\"\n  }],\n  folding: {\n    markers: {\n      start: /^\\s*\\s*#?region\\b/,\n      end: /^\\s*\\s*#?endregion\\b/\n    }\n  }\n};\nvar language = {\n  defaultToken: \"invalid\",\n  tokenPostfix: \".dart\",\n  keywords: [\"abstract\", \"dynamic\", \"implements\", \"show\", \"as\", \"else\", \"import\", \"static\", \"assert\", \"enum\", \"in\", \"super\", \"async\", \"export\", \"interface\", \"switch\", \"await\", \"extends\", \"is\", \"sync\", \"break\", \"external\", \"library\", \"this\", \"case\", \"factory\", \"mixin\", \"throw\", \"catch\", \"false\", \"new\", \"true\", \"class\", \"final\", \"null\", \"try\", \"const\", \"finally\", \"on\", \"typedef\", \"continue\", \"for\", \"operator\", \"var\", \"covariant\", \"Function\", \"part\", \"void\", \"default\", \"get\", \"rethrow\", \"while\", \"deferred\", \"hide\", \"return\", \"with\", \"do\", \"if\", \"set\", \"yield\"],\n  typeKeywords: [\"int\", \"double\", \"String\", \"bool\"],\n  operators: [\"+\", \"-\", \"*\", \"/\", \"~/\", \"%\", \"++\", \"--\", \"==\", \"!=\", \">\", \"<\", \">=\", \"<=\", \"=\", \"-=\", \"/=\", \"%=\", \">>=\", \"^=\", \"+=\", \"*=\", \"~/=\", \"<<=\", \"&=\", \"!=\", \"||\", \"&&\", \"&\", \"|\", \"^\", \"~\", \"<<\", \">>\", \"!\", \">>>\", \"??\", \"?\", \":\", \"|=\"],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  digits: /\\d+(_+\\d+)*/,\n  octaldigits: /[0-7]+(_+[0-7]+)*/,\n  binarydigits: /[0-1]+(_+[0-1]+)*/,\n  hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,\n  regexpctl: /[(){}\\[\\]\\$\\^|\\-*+?\\.]/,\n  regexpesc: /\\\\(?:[bBdDfnrstvwWn0\\\\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})/,\n  tokenizer: {\n    root: [[/[{}]/, \"delimiter.bracket\"], {\n      include: \"common\"\n    }],\n    common: [[/[a-z_$][\\w$]*/, {\n      cases: {\n        \"@typeKeywords\": \"type.identifier\",\n        \"@keywords\": \"keyword\",\n        \"@default\": \"identifier\"\n      }\n    }], [/[A-Z_$][\\w\\$]*/, \"type.identifier\"], {\n      include: \"@whitespace\"\n    }, [/\\/(?=([^\\\\\\/]|\\\\.)+\\/([gimsuy]*)(\\s*)(\\.|;|,|\\)|\\]|\\}|$))/, {\n      token: \"regexp\",\n      bracket: \"@open\",\n      next: \"@regexp\"\n    }], [/@[a-zA-Z]+/, \"annotation\"], [/[()\\[\\]]/, \"@brackets\"], [/[<>](?!@symbols)/, \"@brackets\"], [/!(?=([^=]|$))/, \"delimiter\"], [/@symbols/, {\n      cases: {\n        \"@operators\": \"delimiter\",\n        \"@default\": \"\"\n      }\n    }], [/(@digits)[eE]([\\-+]?(@digits))?/, \"number.float\"], [/(@digits)\\.(@digits)([eE][\\-+]?(@digits))?/, \"number.float\"], [/0[xX](@hexdigits)n?/, \"number.hex\"], [/0[oO]?(@octaldigits)n?/, \"number.octal\"], [/0[bB](@binarydigits)n?/, \"number.binary\"], [/(@digits)n?/, \"number\"], [/[;,.]/, \"delimiter\"], [/\"([^\"\\\\]|\\\\.)*$/, \"string.invalid\"], [/'([^'\\\\]|\\\\.)*$/, \"string.invalid\"], [/\"/, \"string\", \"@string_double\"], [/'/, \"string\", \"@string_single\"]],\n    whitespace: [[/[ \\t\\r\\n]+/, \"\"], [/\\/\\*\\*(?!\\/)/, \"comment.doc\", \"@jsdoc\"], [/\\/\\*/, \"comment\", \"@comment\"], [/\\/\\/\\/.*$/, \"comment.doc\"], [/\\/\\/.*$/, \"comment\"]],\n    comment: [[/[^\\/*]+/, \"comment\"], [/\\*\\//, \"comment\", \"@pop\"], [/[\\/*]/, \"comment\"]],\n    jsdoc: [[/[^\\/*]+/, \"comment.doc\"], [/\\*\\//, \"comment.doc\", \"@pop\"], [/[\\/*]/, \"comment.doc\"]],\n    regexp: [[/(\\{)(\\d+(?:,\\d*)?)(\\})/, [\"regexp.escape.control\", \"regexp.escape.control\", \"regexp.escape.control\"]], [/(\\[)(\\^?)(?=(?:[^\\]\\\\\\/]|\\\\.)+)/, [\"regexp.escape.control\", {\n      token: \"regexp.escape.control\",\n      next: \"@regexrange\"\n    }]], [/(\\()(\\?:|\\?=|\\?!)/, [\"regexp.escape.control\", \"regexp.escape.control\"]], [/[()]/, \"regexp.escape.control\"], [/@regexpctl/, \"regexp.escape.control\"], [/[^\\\\\\/]/, \"regexp\"], [/@regexpesc/, \"regexp.escape\"], [/\\\\\\./, \"regexp.invalid\"], [/(\\/)([gimsuy]*)/, [{\n      token: \"regexp\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }, \"keyword.other\"]]],\n    regexrange: [[/-/, \"regexp.escape.control\"], [/\\^/, \"regexp.invalid\"], [/@regexpesc/, \"regexp.escape\"], [/[^\\]]/, \"regexp\"], [/\\]/, {\n      token: \"regexp.escape.control\",\n      next: \"@pop\",\n      bracket: \"@close\"\n    }]],\n    string_double: [[/[^\\\\\"\\$]+/, \"string\"], [/[^\\\\\"]+/, \"string\"], [/@escapes/, \"string.escape\"], [/\\\\./, \"string.escape.invalid\"], [/\"/, \"string\", \"@pop\"], [/\\$\\w+/, \"identifier\"]],\n    string_single: [[/[^\\\\'\\$]+/, \"string\"], [/@escapes/, \"string.escape\"], [/\\\\./, \"string.escape.invalid\"], [/'/, \"string\", \"@pop\"], [/\\$\\w+/, \"identifier\"]]\n  }\n};\nexport { conf, language };","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/basic-languages/dart/dart.js"],"names":["conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","folding","markers","start","end","language","defaultToken","tokenPostfix","keywords","typeKeywords","operators","symbols","escapes","digits","octaldigits","binarydigits","hexdigits","regexpctl","regexpesc","tokenizer","root","include","common","cases","token","bracket","next","whitespace","comment","jsdoc","regexp","regexrange","string_double","string_single"],"mappings":"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","sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/dart/dart.ts\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"]\n  ],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"'\", close: \"'\", notIn: [\"string\", \"comment\"] },\n    { open: '\"', close: '\"', notIn: [\"string\"] },\n    { open: \"`\", close: \"`\", notIn: [\"string\", \"comment\"] },\n    { open: \"/**\", close: \" */\", notIn: [\"string\"] }\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"<\", close: \">\" },\n    { open: \"'\", close: \"'\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"' },\n    { open: \"`\", close: \"`\" }\n  ],\n  folding: {\n    markers: {\n      start: /^\\s*\\s*#?region\\b/,\n      end: /^\\s*\\s*#?endregion\\b/\n    }\n  }\n};\nvar language = {\n  defaultToken: \"invalid\",\n  tokenPostfix: \".dart\",\n  keywords: [\n    \"abstract\",\n    \"dynamic\",\n    \"implements\",\n    \"show\",\n    \"as\",\n    \"else\",\n    \"import\",\n    \"static\",\n    \"assert\",\n    \"enum\",\n    \"in\",\n    \"super\",\n    \"async\",\n    \"export\",\n    \"interface\",\n    \"switch\",\n    \"await\",\n    \"extends\",\n    \"is\",\n    \"sync\",\n    \"break\",\n    \"external\",\n    \"library\",\n    \"this\",\n    \"case\",\n    \"factory\",\n    \"mixin\",\n    \"throw\",\n    \"catch\",\n    \"false\",\n    \"new\",\n    \"true\",\n    \"class\",\n    \"final\",\n    \"null\",\n    \"try\",\n    \"const\",\n    \"finally\",\n    \"on\",\n    \"typedef\",\n    \"continue\",\n    \"for\",\n    \"operator\",\n    \"var\",\n    \"covariant\",\n    \"Function\",\n    \"part\",\n    \"void\",\n    \"default\",\n    \"get\",\n    \"rethrow\",\n    \"while\",\n    \"deferred\",\n    \"hide\",\n    \"return\",\n    \"with\",\n    \"do\",\n    \"if\",\n    \"set\",\n    \"yield\"\n  ],\n  typeKeywords: [\"int\", \"double\", \"String\", \"bool\"],\n  operators: [\n    \"+\",\n    \"-\",\n    \"*\",\n    \"/\",\n    \"~/\",\n    \"%\",\n    \"++\",\n    \"--\",\n    \"==\",\n    \"!=\",\n    \">\",\n    \"<\",\n    \">=\",\n    \"<=\",\n    \"=\",\n    \"-=\",\n    \"/=\",\n    \"%=\",\n    \">>=\",\n    \"^=\",\n    \"+=\",\n    \"*=\",\n    \"~/=\",\n    \"<<=\",\n    \"&=\",\n    \"!=\",\n    \"||\",\n    \"&&\",\n    \"&\",\n    \"|\",\n    \"^\",\n    \"~\",\n    \"<<\",\n    \">>\",\n    \"!\",\n    \">>>\",\n    \"??\",\n    \"?\",\n    \":\",\n    \"|=\"\n  ],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  digits: /\\d+(_+\\d+)*/,\n  octaldigits: /[0-7]+(_+[0-7]+)*/,\n  binarydigits: /[0-1]+(_+[0-1]+)*/,\n  hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,\n  regexpctl: /[(){}\\[\\]\\$\\^|\\-*+?\\.]/,\n  regexpesc: /\\\\(?:[bBdDfnrstvwWn0\\\\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})/,\n  tokenizer: {\n    root: [[/[{}]/, \"delimiter.bracket\"], { include: \"common\" }],\n    common: [\n      [\n        /[a-z_$][\\w$]*/,\n        {\n          cases: {\n            \"@typeKeywords\": \"type.identifier\",\n            \"@keywords\": \"keyword\",\n            \"@default\": \"identifier\"\n          }\n        }\n      ],\n      [/[A-Z_$][\\w\\$]*/, \"type.identifier\"],\n      { include: \"@whitespace\" },\n      [\n        /\\/(?=([^\\\\\\/]|\\\\.)+\\/([gimsuy]*)(\\s*)(\\.|;|,|\\)|\\]|\\}|$))/,\n        { token: \"regexp\", bracket: \"@open\", next: \"@regexp\" }\n      ],\n      [/@[a-zA-Z]+/, \"annotation\"],\n      [/[()\\[\\]]/, \"@brackets\"],\n      [/[<>](?!@symbols)/, \"@brackets\"],\n      [/!(?=([^=]|$))/, \"delimiter\"],\n      [\n        /@symbols/,\n        {\n          cases: {\n            \"@operators\": \"delimiter\",\n            \"@default\": \"\"\n          }\n        }\n      ],\n      [/(@digits)[eE]([\\-+]?(@digits))?/, \"number.float\"],\n      [/(@digits)\\.(@digits)([eE][\\-+]?(@digits))?/, \"number.float\"],\n      [/0[xX](@hexdigits)n?/, \"number.hex\"],\n      [/0[oO]?(@octaldigits)n?/, \"number.octal\"],\n      [/0[bB](@binarydigits)n?/, \"number.binary\"],\n      [/(@digits)n?/, \"number\"],\n      [/[;,.]/, \"delimiter\"],\n      [/\"([^\"\\\\]|\\\\.)*$/, \"string.invalid\"],\n      [/'([^'\\\\]|\\\\.)*$/, \"string.invalid\"],\n      [/\"/, \"string\", \"@string_double\"],\n      [/'/, \"string\", \"@string_single\"]\n    ],\n    whitespace: [\n      [/[ \\t\\r\\n]+/, \"\"],\n      [/\\/\\*\\*(?!\\/)/, \"comment.doc\", \"@jsdoc\"],\n      [/\\/\\*/, \"comment\", \"@comment\"],\n      [/\\/\\/\\/.*$/, \"comment.doc\"],\n      [/\\/\\/.*$/, \"comment\"]\n    ],\n    comment: [\n      [/[^\\/*]+/, \"comment\"],\n      [/\\*\\//, \"comment\", \"@pop\"],\n      [/[\\/*]/, \"comment\"]\n    ],\n    jsdoc: [\n      [/[^\\/*]+/, \"comment.doc\"],\n      [/\\*\\//, \"comment.doc\", \"@pop\"],\n      [/[\\/*]/, \"comment.doc\"]\n    ],\n    regexp: [\n      [\n        /(\\{)(\\d+(?:,\\d*)?)(\\})/,\n        [\"regexp.escape.control\", \"regexp.escape.control\", \"regexp.escape.control\"]\n      ],\n      [\n        /(\\[)(\\^?)(?=(?:[^\\]\\\\\\/]|\\\\.)+)/,\n        [\"regexp.escape.control\", { token: \"regexp.escape.control\", next: \"@regexrange\" }]\n      ],\n      [/(\\()(\\?:|\\?=|\\?!)/, [\"regexp.escape.control\", \"regexp.escape.control\"]],\n      [/[()]/, \"regexp.escape.control\"],\n      [/@regexpctl/, \"regexp.escape.control\"],\n      [/[^\\\\\\/]/, \"regexp\"],\n      [/@regexpesc/, \"regexp.escape\"],\n      [/\\\\\\./, \"regexp.invalid\"],\n      [/(\\/)([gimsuy]*)/, [{ token: \"regexp\", bracket: \"@close\", next: \"@pop\" }, \"keyword.other\"]]\n    ],\n    regexrange: [\n      [/-/, \"regexp.escape.control\"],\n      [/\\^/, \"regexp.invalid\"],\n      [/@regexpesc/, \"regexp.escape\"],\n      [/[^\\]]/, \"regexp\"],\n      [\n        /\\]/,\n        {\n          token: \"regexp.escape.control\",\n          next: \"@pop\",\n          bracket: \"@close\"\n        }\n      ]\n    ],\n    string_double: [\n      [/[^\\\\\"\\$]+/, \"string\"],\n      [/[^\\\\\"]+/, \"string\"],\n      [/@escapes/, \"string.escape\"],\n      [/\\\\./, \"string.escape.invalid\"],\n      [/\"/, \"string\", \"@pop\"],\n      [/\\$\\w+/, \"identifier\"]\n    ],\n    string_single: [\n      [/[^\\\\'\\$]+/, \"string\"],\n      [/@escapes/, \"string.escape\"],\n      [/\\\\./, \"string.escape.invalid\"],\n      [/'/, \"string\", \"@pop\"],\n      [/\\$\\w+/, \"identifier\"]\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"]},"metadata":{},"sourceType":"module"}