{"ast":null,"code":"/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n// src/basic-languages/ecl/ecl.ts\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"]],\n  autoClosingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: \"'\",\n    close: \"'\",\n    notIn: [\"string\", \"comment\"]\n  }, {\n    open: '\"',\n    close: '\"',\n    notIn: [\"string\", \"comment\"]\n  }],\n  surroundingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: \"<\",\n    close: \">\"\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }]\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".ecl\",\n  ignoreCase: true,\n  brackets: [{\n    open: \"{\",\n    close: \"}\",\n    token: \"delimiter.curly\"\n  }, {\n    open: \"[\",\n    close: \"]\",\n    token: \"delimiter.square\"\n  }, {\n    open: \"(\",\n    close: \")\",\n    token: \"delimiter.parenthesis\"\n  }, {\n    open: \"<\",\n    close: \">\",\n    token: \"delimiter.angle\"\n  }],\n  pounds: [\"append\", \"break\", \"declare\", \"demangle\", \"end\", \"for\", \"getdatatype\", \"if\", \"inmodule\", \"loop\", \"mangle\", \"onwarning\", \"option\", \"set\", \"stored\", \"uniquename\"].join(\"|\"),\n  keywords: [\"__compressed__\", \"after\", \"all\", \"and\", \"any\", \"as\", \"atmost\", \"before\", \"beginc\", \"best\", \"between\", \"case\", \"cluster\", \"compressed\", \"compression\", \"const\", \"counter\", \"csv\", \"default\", \"descend\", \"embed\", \"encoding\", \"encrypt\", \"end\", \"endc\", \"endembed\", \"endmacro\", \"enum\", \"escape\", \"except\", \"exclusive\", \"expire\", \"export\", \"extend\", \"fail\", \"few\", \"fileposition\", \"first\", \"flat\", \"forward\", \"from\", \"full\", \"function\", \"functionmacro\", \"group\", \"grouped\", \"heading\", \"hole\", \"ifblock\", \"import\", \"in\", \"inner\", \"interface\", \"internal\", \"joined\", \"keep\", \"keyed\", \"last\", \"left\", \"limit\", \"linkcounted\", \"literal\", \"little_endian\", \"load\", \"local\", \"locale\", \"lookup\", \"lzw\", \"macro\", \"many\", \"maxcount\", \"maxlength\", \"min skew\", \"module\", \"mofn\", \"multiple\", \"named\", \"namespace\", \"nocase\", \"noroot\", \"noscan\", \"nosort\", \"not\", \"noxpath\", \"of\", \"onfail\", \"only\", \"opt\", \"or\", \"outer\", \"overwrite\", \"packed\", \"partition\", \"penalty\", \"physicallength\", \"pipe\", \"prefetch\", \"quote\", \"record\", \"repeat\", \"retry\", \"return\", \"right\", \"right1\", \"right2\", \"rows\", \"rowset\", \"scan\", \"scope\", \"self\", \"separator\", \"service\", \"shared\", \"skew\", \"skip\", \"smart\", \"soapaction\", \"sql\", \"stable\", \"store\", \"terminator\", \"thor\", \"threshold\", \"timelimit\", \"timeout\", \"token\", \"transform\", \"trim\", \"type\", \"unicodeorder\", \"unordered\", \"unsorted\", \"unstable\", \"update\", \"use\", \"validate\", \"virtual\", \"whole\", \"width\", \"wild\", \"within\", \"wnotrim\", \"xml\", \"xpath\"],\n  functions: [\"abs\", \"acos\", \"aggregate\", \"allnodes\", \"apply\", \"ascii\", \"asin\", \"assert\", \"asstring\", \"atan\", \"atan2\", \"ave\", \"build\", \"buildindex\", \"case\", \"catch\", \"choose\", \"choosen\", \"choosesets\", \"clustersize\", \"combine\", \"correlation\", \"cos\", \"cosh\", \"count\", \"covariance\", \"cron\", \"dataset\", \"dedup\", \"define\", \"denormalize\", \"dictionary\", \"distribute\", \"distributed\", \"distribution\", \"ebcdic\", \"enth\", \"error\", \"evaluate\", \"event\", \"eventextra\", \"eventname\", \"exists\", \"exp\", \"fail\", \"failcode\", \"failmessage\", \"fetch\", \"fromunicode\", \"fromxml\", \"getenv\", \"getisvalid\", \"global\", \"graph\", \"group\", \"hash\", \"hash32\", \"hash64\", \"hashcrc\", \"hashmd5\", \"having\", \"httpcall\", \"httpheader\", \"if\", \"iff\", \"index\", \"intformat\", \"isvalid\", \"iterate\", \"join\", \"keydiff\", \"keypatch\", \"keyunicode\", \"length\", \"library\", \"limit\", \"ln\", \"loadxml\", \"local\", \"log\", \"loop\", \"map\", \"matched\", \"matchlength\", \"matchposition\", \"matchtext\", \"matchunicode\", \"max\", \"merge\", \"mergejoin\", \"min\", \"nofold\", \"nolocal\", \"nonempty\", \"normalize\", \"nothor\", \"notify\", \"output\", \"parallel\", \"parse\", \"pipe\", \"power\", \"preload\", \"process\", \"project\", \"pull\", \"random\", \"range\", \"rank\", \"ranked\", \"realformat\", \"recordof\", \"regexfind\", \"regexreplace\", \"regroup\", \"rejected\", \"rollup\", \"round\", \"roundup\", \"row\", \"rowdiff\", \"sample\", \"sequential\", \"set\", \"sin\", \"sinh\", \"sizeof\", \"soapcall\", \"sort\", \"sorted\", \"sqrt\", \"stepped\", \"stored\", \"sum\", \"table\", \"tan\", \"tanh\", \"thisnode\", \"topn\", \"tounicode\", \"toxml\", \"transfer\", \"transform\", \"trim\", \"truncate\", \"typeof\", \"ungroup\", \"unicodeorder\", \"variance\", \"wait\", \"which\", \"workunit\", \"xmldecode\", \"xmlencode\", \"xmltext\", \"xmlunicode\"],\n  typesint: [\"integer\", \"unsigned\"].join(\"|\"),\n  typesnum: [\"data\", \"qstring\", \"string\", \"unicode\", \"utf8\", \"varstring\", \"varunicode\"],\n  typesone: [\"ascii\", \"big_endian\", \"boolean\", \"data\", \"decimal\", \"ebcdic\", \"grouped\", \"integer\", \"linkcounted\", \"pattern\", \"qstring\", \"real\", \"record\", \"rule\", \"set of\", \"streamed\", \"string\", \"token\", \"udecimal\", \"unicode\", \"unsigned\", \"utf8\", \"varstring\", \"varunicode\"].join(\"|\"),\n  operators: [\"+\", \"-\", \"/\", \":=\", \"<\", \"<>\", \"=\", \">\", \"\\\\\", \"and\", \"in\", \"not\", \"or\"],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  tokenizer: {\n    root: [[/@typesint[4|8]/, \"type\"], [/#(@pounds)/, \"type\"], [/@typesone/, \"type\"], [/[a-zA-Z_$][\\w-$]*/, {\n      cases: {\n        \"@functions\": \"keyword.function\",\n        \"@keywords\": \"keyword\",\n        \"@operators\": \"operator\"\n      }\n    }], {\n      include: \"@whitespace\"\n    }, [/[{}()\\[\\]]/, \"@brackets\"], [/[<>](?!@symbols)/, \"@brackets\"], [/@symbols/, {\n      cases: {\n        \"@operators\": \"delimiter\",\n        \"@default\": \"\"\n      }\n    }], [/[0-9_]*\\.[0-9_]+([eE][\\-+]?\\d+)?/, \"number.float\"], [/0[xX][0-9a-fA-F_]+/, \"number.hex\"], [/0[bB][01]+/, \"number.hex\"], [/[0-9_]+/, \"number\"], [/[;,.]/, \"delimiter\"], [/\"([^\"\\\\]|\\\\.)*$/, \"string.invalid\"], [/\"/, \"string\", \"@string\"], [/'[^\\\\']'/, \"string\"], [/(')(@escapes)(')/, [\"string\", \"string.escape\", \"string\"]], [/'/, \"string.invalid\"]],\n    whitespace: [[/[ \\t\\v\\f\\r\\n]+/, \"\"], [/\\/\\*/, \"comment\", \"@comment\"], [/\\/\\/.*$/, \"comment\"]],\n    comment: [[/[^\\/*]+/, \"comment\"], [/\\*\\//, \"comment\", \"@pop\"], [/[\\/*]/, \"comment\"]],\n    string: [[/[^\\\\']+/, \"string\"], [/@escapes/, \"string.escape\"], [/\\\\./, \"string.escape.invalid\"], [/'/, \"string\", \"@pop\"]]\n  }\n};\nexport { conf, language };","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/basic-languages/ecl/ecl.js"],"names":["conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","language","defaultToken","tokenPostfix","ignoreCase","token","pounds","join","keywords","functions","typesint","typesnum","typesone","operators","symbols","escapes","tokenizer","root","cases","include","whitespace","comment","string"],"mappings":"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","sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/ecl/ecl.ts\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"]\n  ],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"'\", close: \"'\", notIn: [\"string\", \"comment\"] },\n    { open: '\"', close: '\"', notIn: [\"string\", \"comment\"] }\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"<\", close: \">\" },\n    { open: \"'\", close: \"'\" },\n    { open: '\"', close: '\"' }\n  ]\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".ecl\",\n  ignoreCase: true,\n  brackets: [\n    { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\n    { open: \"[\", close: \"]\", token: \"delimiter.square\" },\n    { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"<\", close: \">\", token: \"delimiter.angle\" }\n  ],\n  pounds: [\n    \"append\",\n    \"break\",\n    \"declare\",\n    \"demangle\",\n    \"end\",\n    \"for\",\n    \"getdatatype\",\n    \"if\",\n    \"inmodule\",\n    \"loop\",\n    \"mangle\",\n    \"onwarning\",\n    \"option\",\n    \"set\",\n    \"stored\",\n    \"uniquename\"\n  ].join(\"|\"),\n  keywords: [\n    \"__compressed__\",\n    \"after\",\n    \"all\",\n    \"and\",\n    \"any\",\n    \"as\",\n    \"atmost\",\n    \"before\",\n    \"beginc\",\n    \"best\",\n    \"between\",\n    \"case\",\n    \"cluster\",\n    \"compressed\",\n    \"compression\",\n    \"const\",\n    \"counter\",\n    \"csv\",\n    \"default\",\n    \"descend\",\n    \"embed\",\n    \"encoding\",\n    \"encrypt\",\n    \"end\",\n    \"endc\",\n    \"endembed\",\n    \"endmacro\",\n    \"enum\",\n    \"escape\",\n    \"except\",\n    \"exclusive\",\n    \"expire\",\n    \"export\",\n    \"extend\",\n    \"fail\",\n    \"few\",\n    \"fileposition\",\n    \"first\",\n    \"flat\",\n    \"forward\",\n    \"from\",\n    \"full\",\n    \"function\",\n    \"functionmacro\",\n    \"group\",\n    \"grouped\",\n    \"heading\",\n    \"hole\",\n    \"ifblock\",\n    \"import\",\n    \"in\",\n    \"inner\",\n    \"interface\",\n    \"internal\",\n    \"joined\",\n    \"keep\",\n    \"keyed\",\n    \"last\",\n    \"left\",\n    \"limit\",\n    \"linkcounted\",\n    \"literal\",\n    \"little_endian\",\n    \"load\",\n    \"local\",\n    \"locale\",\n    \"lookup\",\n    \"lzw\",\n    \"macro\",\n    \"many\",\n    \"maxcount\",\n    \"maxlength\",\n    \"min skew\",\n    \"module\",\n    \"mofn\",\n    \"multiple\",\n    \"named\",\n    \"namespace\",\n    \"nocase\",\n    \"noroot\",\n    \"noscan\",\n    \"nosort\",\n    \"not\",\n    \"noxpath\",\n    \"of\",\n    \"onfail\",\n    \"only\",\n    \"opt\",\n    \"or\",\n    \"outer\",\n    \"overwrite\",\n    \"packed\",\n    \"partition\",\n    \"penalty\",\n    \"physicallength\",\n    \"pipe\",\n    \"prefetch\",\n    \"quote\",\n    \"record\",\n    \"repeat\",\n    \"retry\",\n    \"return\",\n    \"right\",\n    \"right1\",\n    \"right2\",\n    \"rows\",\n    \"rowset\",\n    \"scan\",\n    \"scope\",\n    \"self\",\n    \"separator\",\n    \"service\",\n    \"shared\",\n    \"skew\",\n    \"skip\",\n    \"smart\",\n    \"soapaction\",\n    \"sql\",\n    \"stable\",\n    \"store\",\n    \"terminator\",\n    \"thor\",\n    \"threshold\",\n    \"timelimit\",\n    \"timeout\",\n    \"token\",\n    \"transform\",\n    \"trim\",\n    \"type\",\n    \"unicodeorder\",\n    \"unordered\",\n    \"unsorted\",\n    \"unstable\",\n    \"update\",\n    \"use\",\n    \"validate\",\n    \"virtual\",\n    \"whole\",\n    \"width\",\n    \"wild\",\n    \"within\",\n    \"wnotrim\",\n    \"xml\",\n    \"xpath\"\n  ],\n  functions: [\n    \"abs\",\n    \"acos\",\n    \"aggregate\",\n    \"allnodes\",\n    \"apply\",\n    \"ascii\",\n    \"asin\",\n    \"assert\",\n    \"asstring\",\n    \"atan\",\n    \"atan2\",\n    \"ave\",\n    \"build\",\n    \"buildindex\",\n    \"case\",\n    \"catch\",\n    \"choose\",\n    \"choosen\",\n    \"choosesets\",\n    \"clustersize\",\n    \"combine\",\n    \"correlation\",\n    \"cos\",\n    \"cosh\",\n    \"count\",\n    \"covariance\",\n    \"cron\",\n    \"dataset\",\n    \"dedup\",\n    \"define\",\n    \"denormalize\",\n    \"dictionary\",\n    \"distribute\",\n    \"distributed\",\n    \"distribution\",\n    \"ebcdic\",\n    \"enth\",\n    \"error\",\n    \"evaluate\",\n    \"event\",\n    \"eventextra\",\n    \"eventname\",\n    \"exists\",\n    \"exp\",\n    \"fail\",\n    \"failcode\",\n    \"failmessage\",\n    \"fetch\",\n    \"fromunicode\",\n    \"fromxml\",\n    \"getenv\",\n    \"getisvalid\",\n    \"global\",\n    \"graph\",\n    \"group\",\n    \"hash\",\n    \"hash32\",\n    \"hash64\",\n    \"hashcrc\",\n    \"hashmd5\",\n    \"having\",\n    \"httpcall\",\n    \"httpheader\",\n    \"if\",\n    \"iff\",\n    \"index\",\n    \"intformat\",\n    \"isvalid\",\n    \"iterate\",\n    \"join\",\n    \"keydiff\",\n    \"keypatch\",\n    \"keyunicode\",\n    \"length\",\n    \"library\",\n    \"limit\",\n    \"ln\",\n    \"loadxml\",\n    \"local\",\n    \"log\",\n    \"loop\",\n    \"map\",\n    \"matched\",\n    \"matchlength\",\n    \"matchposition\",\n    \"matchtext\",\n    \"matchunicode\",\n    \"max\",\n    \"merge\",\n    \"mergejoin\",\n    \"min\",\n    \"nofold\",\n    \"nolocal\",\n    \"nonempty\",\n    \"normalize\",\n    \"nothor\",\n    \"notify\",\n    \"output\",\n    \"parallel\",\n    \"parse\",\n    \"pipe\",\n    \"power\",\n    \"preload\",\n    \"process\",\n    \"project\",\n    \"pull\",\n    \"random\",\n    \"range\",\n    \"rank\",\n    \"ranked\",\n    \"realformat\",\n    \"recordof\",\n    \"regexfind\",\n    \"regexreplace\",\n    \"regroup\",\n    \"rejected\",\n    \"rollup\",\n    \"round\",\n    \"roundup\",\n    \"row\",\n    \"rowdiff\",\n    \"sample\",\n    \"sequential\",\n    \"set\",\n    \"sin\",\n    \"sinh\",\n    \"sizeof\",\n    \"soapcall\",\n    \"sort\",\n    \"sorted\",\n    \"sqrt\",\n    \"stepped\",\n    \"stored\",\n    \"sum\",\n    \"table\",\n    \"tan\",\n    \"tanh\",\n    \"thisnode\",\n    \"topn\",\n    \"tounicode\",\n    \"toxml\",\n    \"transfer\",\n    \"transform\",\n    \"trim\",\n    \"truncate\",\n    \"typeof\",\n    \"ungroup\",\n    \"unicodeorder\",\n    \"variance\",\n    \"wait\",\n    \"which\",\n    \"workunit\",\n    \"xmldecode\",\n    \"xmlencode\",\n    \"xmltext\",\n    \"xmlunicode\"\n  ],\n  typesint: [\"integer\", \"unsigned\"].join(\"|\"),\n  typesnum: [\"data\", \"qstring\", \"string\", \"unicode\", \"utf8\", \"varstring\", \"varunicode\"],\n  typesone: [\n    \"ascii\",\n    \"big_endian\",\n    \"boolean\",\n    \"data\",\n    \"decimal\",\n    \"ebcdic\",\n    \"grouped\",\n    \"integer\",\n    \"linkcounted\",\n    \"pattern\",\n    \"qstring\",\n    \"real\",\n    \"record\",\n    \"rule\",\n    \"set of\",\n    \"streamed\",\n    \"string\",\n    \"token\",\n    \"udecimal\",\n    \"unicode\",\n    \"unsigned\",\n    \"utf8\",\n    \"varstring\",\n    \"varunicode\"\n  ].join(\"|\"),\n  operators: [\"+\", \"-\", \"/\", \":=\", \"<\", \"<>\", \"=\", \">\", \"\\\\\", \"and\", \"in\", \"not\", \"or\"],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  tokenizer: {\n    root: [\n      [/@typesint[4|8]/, \"type\"],\n      [/#(@pounds)/, \"type\"],\n      [/@typesone/, \"type\"],\n      [\n        /[a-zA-Z_$][\\w-$]*/,\n        {\n          cases: {\n            \"@functions\": \"keyword.function\",\n            \"@keywords\": \"keyword\",\n            \"@operators\": \"operator\"\n          }\n        }\n      ],\n      { include: \"@whitespace\" },\n      [/[{}()\\[\\]]/, \"@brackets\"],\n      [/[<>](?!@symbols)/, \"@brackets\"],\n      [\n        /@symbols/,\n        {\n          cases: {\n            \"@operators\": \"delimiter\",\n            \"@default\": \"\"\n          }\n        }\n      ],\n      [/[0-9_]*\\.[0-9_]+([eE][\\-+]?\\d+)?/, \"number.float\"],\n      [/0[xX][0-9a-fA-F_]+/, \"number.hex\"],\n      [/0[bB][01]+/, \"number.hex\"],\n      [/[0-9_]+/, \"number\"],\n      [/[;,.]/, \"delimiter\"],\n      [/\"([^\"\\\\]|\\\\.)*$/, \"string.invalid\"],\n      [/\"/, \"string\", \"@string\"],\n      [/'[^\\\\']'/, \"string\"],\n      [/(')(@escapes)(')/, [\"string\", \"string.escape\", \"string\"]],\n      [/'/, \"string.invalid\"]\n    ],\n    whitespace: [\n      [/[ \\t\\v\\f\\r\\n]+/, \"\"],\n      [/\\/\\*/, \"comment\", \"@comment\"],\n      [/\\/\\/.*$/, \"comment\"]\n    ],\n    comment: [\n      [/[^\\/*]+/, \"comment\"],\n      [/\\*\\//, \"comment\", \"@pop\"],\n      [/[\\/*]/, \"comment\"]\n    ],\n    string: [\n      [/[^\\\\']+/, \"string\"],\n      [/@escapes/, \"string.escape\"],\n      [/\\\\./, \"string.escape.invalid\"],\n      [/'/, \"string\", \"@pop\"]\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"]},"metadata":{},"sourceType":"module"}