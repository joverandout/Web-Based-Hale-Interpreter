{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../../base/common/event.js';\nexport class ColorPickerModel {\n  constructor(color, availableColorPresentations, presentationIndex) {\n    this.presentationIndex = presentationIndex;\n    this._onColorFlushed = new Emitter();\n    this.onColorFlushed = this._onColorFlushed.event;\n    this._onDidChangeColor = new Emitter();\n    this.onDidChangeColor = this._onDidChangeColor.event;\n    this._onDidChangePresentation = new Emitter();\n    this.onDidChangePresentation = this._onDidChangePresentation.event;\n    this.originalColor = color;\n    this._color = color;\n    this._colorPresentations = availableColorPresentations;\n  }\n\n  get color() {\n    return this._color;\n  }\n\n  set color(color) {\n    if (this._color.equals(color)) {\n      return;\n    }\n\n    this._color = color;\n\n    this._onDidChangeColor.fire(color);\n  }\n\n  get presentation() {\n    return this.colorPresentations[this.presentationIndex];\n  }\n\n  get colorPresentations() {\n    return this._colorPresentations;\n  }\n\n  set colorPresentations(colorPresentations) {\n    this._colorPresentations = colorPresentations;\n\n    if (this.presentationIndex > colorPresentations.length - 1) {\n      this.presentationIndex = 0;\n    }\n\n    this._onDidChangePresentation.fire(this.presentation);\n  }\n\n  selectNextColorPresentation() {\n    this.presentationIndex = (this.presentationIndex + 1) % this.colorPresentations.length;\n    this.flushColor();\n\n    this._onDidChangePresentation.fire(this.presentation);\n  }\n\n  guessColorPresentation(color, originalText) {\n    for (let i = 0; i < this.colorPresentations.length; i++) {\n      if (originalText.toLowerCase() === this.colorPresentations[i].label) {\n        this.presentationIndex = i;\n\n        this._onDidChangePresentation.fire(this.presentation);\n\n        break;\n      }\n    }\n  }\n\n  flushColor() {\n    this._onColorFlushed.fire(this._color);\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/contrib/colorPicker/browser/colorPickerModel.js"],"names":["Emitter","ColorPickerModel","constructor","color","availableColorPresentations","presentationIndex","_onColorFlushed","onColorFlushed","event","_onDidChangeColor","onDidChangeColor","_onDidChangePresentation","onDidChangePresentation","originalColor","_color","_colorPresentations","equals","fire","presentation","colorPresentations","length","selectNextColorPresentation","flushColor","guessColorPresentation","originalText","i","toLowerCase","label"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,OAAT,QAAwB,kCAAxB;AACA,OAAO,MAAMC,gBAAN,CAAuB;AAC1BC,EAAAA,WAAW,CAACC,KAAD,EAAQC,2BAAR,EAAqCC,iBAArC,EAAwD;AAC/D,SAAKA,iBAAL,GAAyBA,iBAAzB;AACA,SAAKC,eAAL,GAAuB,IAAIN,OAAJ,EAAvB;AACA,SAAKO,cAAL,GAAsB,KAAKD,eAAL,CAAqBE,KAA3C;AACA,SAAKC,iBAAL,GAAyB,IAAIT,OAAJ,EAAzB;AACA,SAAKU,gBAAL,GAAwB,KAAKD,iBAAL,CAAuBD,KAA/C;AACA,SAAKG,wBAAL,GAAgC,IAAIX,OAAJ,EAAhC;AACA,SAAKY,uBAAL,GAA+B,KAAKD,wBAAL,CAA8BH,KAA7D;AACA,SAAKK,aAAL,GAAqBV,KAArB;AACA,SAAKW,MAAL,GAAcX,KAAd;AACA,SAAKY,mBAAL,GAA2BX,2BAA3B;AACH;;AACQ,MAALD,KAAK,GAAG;AACR,WAAO,KAAKW,MAAZ;AACH;;AACQ,MAALX,KAAK,CAACA,KAAD,EAAQ;AACb,QAAI,KAAKW,MAAL,CAAYE,MAAZ,CAAmBb,KAAnB,CAAJ,EAA+B;AAC3B;AACH;;AACD,SAAKW,MAAL,GAAcX,KAAd;;AACA,SAAKM,iBAAL,CAAuBQ,IAAvB,CAA4Bd,KAA5B;AACH;;AACe,MAAZe,YAAY,GAAG;AAAE,WAAO,KAAKC,kBAAL,CAAwB,KAAKd,iBAA7B,CAAP;AAAyD;;AACxD,MAAlBc,kBAAkB,GAAG;AACrB,WAAO,KAAKJ,mBAAZ;AACH;;AACqB,MAAlBI,kBAAkB,CAACA,kBAAD,EAAqB;AACvC,SAAKJ,mBAAL,GAA2BI,kBAA3B;;AACA,QAAI,KAAKd,iBAAL,GAAyBc,kBAAkB,CAACC,MAAnB,GAA4B,CAAzD,EAA4D;AACxD,WAAKf,iBAAL,GAAyB,CAAzB;AACH;;AACD,SAAKM,wBAAL,CAA8BM,IAA9B,CAAmC,KAAKC,YAAxC;AACH;;AACDG,EAAAA,2BAA2B,GAAG;AAC1B,SAAKhB,iBAAL,GAAyB,CAAC,KAAKA,iBAAL,GAAyB,CAA1B,IAA+B,KAAKc,kBAAL,CAAwBC,MAAhF;AACA,SAAKE,UAAL;;AACA,SAAKX,wBAAL,CAA8BM,IAA9B,CAAmC,KAAKC,YAAxC;AACH;;AACDK,EAAAA,sBAAsB,CAACpB,KAAD,EAAQqB,YAAR,EAAsB;AACxC,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKN,kBAAL,CAAwBC,MAA5C,EAAoDK,CAAC,EAArD,EAAyD;AACrD,UAAID,YAAY,CAACE,WAAb,OAA+B,KAAKP,kBAAL,CAAwBM,CAAxB,EAA2BE,KAA9D,EAAqE;AACjE,aAAKtB,iBAAL,GAAyBoB,CAAzB;;AACA,aAAKd,wBAAL,CAA8BM,IAA9B,CAAmC,KAAKC,YAAxC;;AACA;AACH;AACJ;AACJ;;AACDI,EAAAA,UAAU,GAAG;AACT,SAAKhB,eAAL,CAAqBW,IAArB,CAA0B,KAAKH,MAA/B;AACH;;AAlDyB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../../base/common/event.js';\nexport class ColorPickerModel {\n    constructor(color, availableColorPresentations, presentationIndex) {\n        this.presentationIndex = presentationIndex;\n        this._onColorFlushed = new Emitter();\n        this.onColorFlushed = this._onColorFlushed.event;\n        this._onDidChangeColor = new Emitter();\n        this.onDidChangeColor = this._onDidChangeColor.event;\n        this._onDidChangePresentation = new Emitter();\n        this.onDidChangePresentation = this._onDidChangePresentation.event;\n        this.originalColor = color;\n        this._color = color;\n        this._colorPresentations = availableColorPresentations;\n    }\n    get color() {\n        return this._color;\n    }\n    set color(color) {\n        if (this._color.equals(color)) {\n            return;\n        }\n        this._color = color;\n        this._onDidChangeColor.fire(color);\n    }\n    get presentation() { return this.colorPresentations[this.presentationIndex]; }\n    get colorPresentations() {\n        return this._colorPresentations;\n    }\n    set colorPresentations(colorPresentations) {\n        this._colorPresentations = colorPresentations;\n        if (this.presentationIndex > colorPresentations.length - 1) {\n            this.presentationIndex = 0;\n        }\n        this._onDidChangePresentation.fire(this.presentation);\n    }\n    selectNextColorPresentation() {\n        this.presentationIndex = (this.presentationIndex + 1) % this.colorPresentations.length;\n        this.flushColor();\n        this._onDidChangePresentation.fire(this.presentation);\n    }\n    guessColorPresentation(color, originalText) {\n        for (let i = 0; i < this.colorPresentations.length; i++) {\n            if (originalText.toLowerCase() === this.colorPresentations[i].label) {\n                this.presentationIndex = i;\n                this._onDidChangePresentation.fire(this.presentation);\n                break;\n            }\n        }\n    }\n    flushColor() {\n        this._onColorFlushed.fire(this._color);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}