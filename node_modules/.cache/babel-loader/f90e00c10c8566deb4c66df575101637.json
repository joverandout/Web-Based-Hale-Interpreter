{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { KeyChord } from '../../../../base/common/keyCodes.js';\nimport { CoreEditingCommands } from '../../../browser/controller/coreCommands.js';\nimport { EditorAction, registerEditorAction } from '../../../browser/editorExtensions.js';\nimport { ReplaceCommand, ReplaceCommandThatPreservesSelection, ReplaceCommandThatSelectsText } from '../../../common/commands/replaceCommand.js';\nimport { TrimTrailingWhitespaceCommand } from '../../../common/commands/trimTrailingWhitespaceCommand.js';\nimport { TypeOperations } from '../../../common/cursor/cursorTypeOperations.js';\nimport { EditOperation } from '../../../common/core/editOperation.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { CopyLinesCommand } from './copyLinesCommand.js';\nimport { MoveLinesCommand } from './moveLinesCommand.js';\nimport { SortLinesCommand } from './sortLinesCommand.js';\nimport * as nls from '../../../../nls.js';\nimport { MenuId } from '../../../../platform/actions/common/actions.js'; // copy lines\n\nclass AbstractCopyLinesAction extends EditorAction {\n  constructor(down, opts) {\n    super(opts);\n    this.down = down;\n  }\n\n  run(_accessor, editor) {\n    if (!editor.hasModel()) {\n      return;\n    }\n\n    const selections = editor.getSelections().map((selection, index) => ({\n      selection,\n      index,\n      ignore: false\n    }));\n    selections.sort((a, b) => Range.compareRangesUsingStarts(a.selection, b.selection)); // Remove selections that would result in copying the same line\n\n    let prev = selections[0];\n\n    for (let i = 1; i < selections.length; i++) {\n      const curr = selections[i];\n\n      if (prev.selection.endLineNumber === curr.selection.startLineNumber) {\n        // these two selections would copy the same line\n        if (prev.index < curr.index) {\n          // prev wins\n          curr.ignore = true;\n        } else {\n          // curr wins\n          prev.ignore = true;\n          prev = curr;\n        }\n      }\n    }\n\n    const commands = [];\n\n    for (const selection of selections) {\n      commands.push(new CopyLinesCommand(selection.selection, this.down, selection.ignore));\n    }\n\n    editor.pushUndoStop();\n    editor.executeCommands(this.id, commands);\n    editor.pushUndoStop();\n  }\n\n}\n\nclass CopyLinesUpAction extends AbstractCopyLinesAction {\n  constructor() {\n    super(false, {\n      id: 'editor.action.copyLinesUpAction',\n      label: nls.localize('lines.copyUp', \"Copy Line Up\"),\n      alias: 'Copy Line Up',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 512\n        /* Alt */\n        | 1024\n        /* Shift */\n        | 16\n        /* UpArrow */\n        ,\n        linux: {\n          primary: 2048\n          /* CtrlCmd */\n          | 512\n          /* Alt */\n          | 1024\n          /* Shift */\n          | 16\n          /* UpArrow */\n\n        },\n        weight: 100\n        /* EditorContrib */\n\n      },\n      menuOpts: {\n        menuId: MenuId.MenubarSelectionMenu,\n        group: '2_line',\n        title: nls.localize({\n          key: 'miCopyLinesUp',\n          comment: ['&& denotes a mnemonic']\n        }, \"&&Copy Line Up\"),\n        order: 1\n      }\n    });\n  }\n\n}\n\nclass CopyLinesDownAction extends AbstractCopyLinesAction {\n  constructor() {\n    super(true, {\n      id: 'editor.action.copyLinesDownAction',\n      label: nls.localize('lines.copyDown', \"Copy Line Down\"),\n      alias: 'Copy Line Down',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 512\n        /* Alt */\n        | 1024\n        /* Shift */\n        | 18\n        /* DownArrow */\n        ,\n        linux: {\n          primary: 2048\n          /* CtrlCmd */\n          | 512\n          /* Alt */\n          | 1024\n          /* Shift */\n          | 18\n          /* DownArrow */\n\n        },\n        weight: 100\n        /* EditorContrib */\n\n      },\n      menuOpts: {\n        menuId: MenuId.MenubarSelectionMenu,\n        group: '2_line',\n        title: nls.localize({\n          key: 'miCopyLinesDown',\n          comment: ['&& denotes a mnemonic']\n        }, \"Co&&py Line Down\"),\n        order: 2\n      }\n    });\n  }\n\n}\n\nexport class DuplicateSelectionAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.duplicateSelection',\n      label: nls.localize('duplicateSelection', \"Duplicate Selection\"),\n      alias: 'Duplicate Selection',\n      precondition: EditorContextKeys.writable,\n      menuOpts: {\n        menuId: MenuId.MenubarSelectionMenu,\n        group: '2_line',\n        title: nls.localize({\n          key: 'miDuplicateSelection',\n          comment: ['&& denotes a mnemonic']\n        }, \"&&Duplicate Selection\"),\n        order: 5\n      }\n    });\n  }\n\n  run(accessor, editor, args) {\n    if (!editor.hasModel()) {\n      return;\n    }\n\n    const commands = [];\n    const selections = editor.getSelections();\n    const model = editor.getModel();\n\n    for (const selection of selections) {\n      if (selection.isEmpty()) {\n        commands.push(new CopyLinesCommand(selection, true));\n      } else {\n        const insertSelection = new Selection(selection.endLineNumber, selection.endColumn, selection.endLineNumber, selection.endColumn);\n        commands.push(new ReplaceCommandThatSelectsText(insertSelection, model.getValueInRange(selection)));\n      }\n    }\n\n    editor.pushUndoStop();\n    editor.executeCommands(this.id, commands);\n    editor.pushUndoStop();\n  }\n\n} // move lines\n\nclass AbstractMoveLinesAction extends EditorAction {\n  constructor(down, opts) {\n    super(opts);\n    this.down = down;\n  }\n\n  run(_accessor, editor) {\n    let commands = [];\n    let selections = editor.getSelections() || [];\n    const autoIndent = editor.getOption(9\n    /* autoIndent */\n    );\n\n    for (const selection of selections) {\n      commands.push(new MoveLinesCommand(selection, this.down, autoIndent));\n    }\n\n    editor.pushUndoStop();\n    editor.executeCommands(this.id, commands);\n    editor.pushUndoStop();\n  }\n\n}\n\nclass MoveLinesUpAction extends AbstractMoveLinesAction {\n  constructor() {\n    super(false, {\n      id: 'editor.action.moveLinesUpAction',\n      label: nls.localize('lines.moveUp', \"Move Line Up\"),\n      alias: 'Move Line Up',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 512\n        /* Alt */\n        | 16\n        /* UpArrow */\n        ,\n        linux: {\n          primary: 512\n          /* Alt */\n          | 16\n          /* UpArrow */\n\n        },\n        weight: 100\n        /* EditorContrib */\n\n      },\n      menuOpts: {\n        menuId: MenuId.MenubarSelectionMenu,\n        group: '2_line',\n        title: nls.localize({\n          key: 'miMoveLinesUp',\n          comment: ['&& denotes a mnemonic']\n        }, \"Mo&&ve Line Up\"),\n        order: 3\n      }\n    });\n  }\n\n}\n\nclass MoveLinesDownAction extends AbstractMoveLinesAction {\n  constructor() {\n    super(true, {\n      id: 'editor.action.moveLinesDownAction',\n      label: nls.localize('lines.moveDown', \"Move Line Down\"),\n      alias: 'Move Line Down',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 512\n        /* Alt */\n        | 18\n        /* DownArrow */\n        ,\n        linux: {\n          primary: 512\n          /* Alt */\n          | 18\n          /* DownArrow */\n\n        },\n        weight: 100\n        /* EditorContrib */\n\n      },\n      menuOpts: {\n        menuId: MenuId.MenubarSelectionMenu,\n        group: '2_line',\n        title: nls.localize({\n          key: 'miMoveLinesDown',\n          comment: ['&& denotes a mnemonic']\n        }, \"Move &&Line Down\"),\n        order: 4\n      }\n    });\n  }\n\n}\n\nexport class AbstractSortLinesAction extends EditorAction {\n  constructor(descending, opts) {\n    super(opts);\n    this.descending = descending;\n  }\n\n  run(_accessor, editor) {\n    const selections = editor.getSelections() || [];\n\n    for (const selection of selections) {\n      if (!SortLinesCommand.canRun(editor.getModel(), selection, this.descending)) {\n        return;\n      }\n    }\n\n    let commands = [];\n\n    for (let i = 0, len = selections.length; i < len; i++) {\n      commands[i] = new SortLinesCommand(selections[i], this.descending);\n    }\n\n    editor.pushUndoStop();\n    editor.executeCommands(this.id, commands);\n    editor.pushUndoStop();\n  }\n\n}\nexport class SortLinesAscendingAction extends AbstractSortLinesAction {\n  constructor() {\n    super(false, {\n      id: 'editor.action.sortLinesAscending',\n      label: nls.localize('lines.sortAscending', \"Sort Lines Ascending\"),\n      alias: 'Sort Lines Ascending',\n      precondition: EditorContextKeys.writable\n    });\n  }\n\n}\nexport class SortLinesDescendingAction extends AbstractSortLinesAction {\n  constructor() {\n    super(true, {\n      id: 'editor.action.sortLinesDescending',\n      label: nls.localize('lines.sortDescending', \"Sort Lines Descending\"),\n      alias: 'Sort Lines Descending',\n      precondition: EditorContextKeys.writable\n    });\n  }\n\n}\nexport class DeleteDuplicateLinesAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.removeDuplicateLines',\n      label: nls.localize('lines.deleteDuplicates', \"Delete Duplicate Lines\"),\n      alias: 'Delete Duplicate Lines',\n      precondition: EditorContextKeys.writable\n    });\n  }\n\n  run(_accessor, editor) {\n    if (!editor.hasModel()) {\n      return;\n    }\n\n    let model = editor.getModel();\n\n    if (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) {\n      return;\n    }\n\n    let edits = [];\n    let endCursorState = [];\n    let linesDeleted = 0;\n\n    for (let selection of editor.getSelections()) {\n      let uniqueLines = new Set();\n      let lines = [];\n\n      for (let i = selection.startLineNumber; i <= selection.endLineNumber; i++) {\n        let line = model.getLineContent(i);\n\n        if (uniqueLines.has(line)) {\n          continue;\n        }\n\n        lines.push(line);\n        uniqueLines.add(line);\n      }\n\n      let selectionToReplace = new Selection(selection.startLineNumber, 1, selection.endLineNumber, model.getLineMaxColumn(selection.endLineNumber));\n      let adjustedSelectionStart = selection.startLineNumber - linesDeleted;\n      let finalSelection = new Selection(adjustedSelectionStart, 1, adjustedSelectionStart + lines.length - 1, lines[lines.length - 1].length);\n      edits.push(EditOperation.replace(selectionToReplace, lines.join('\\n')));\n      endCursorState.push(finalSelection);\n      linesDeleted += selection.endLineNumber - selection.startLineNumber + 1 - lines.length;\n    }\n\n    editor.pushUndoStop();\n    editor.executeEdits(this.id, edits, endCursorState);\n    editor.pushUndoStop();\n  }\n\n}\nexport class TrimTrailingWhitespaceAction extends EditorAction {\n  constructor() {\n    super({\n      id: TrimTrailingWhitespaceAction.ID,\n      label: nls.localize('lines.trimTrailingWhitespace', \"Trim Trailing Whitespace\"),\n      alias: 'Trim Trailing Whitespace',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048\n        /* CtrlCmd */\n        | 41\n        /* KeyK */\n        , 2048\n        /* CtrlCmd */\n        | 54\n        /* KeyX */\n        ),\n        weight: 100\n        /* EditorContrib */\n\n      }\n    });\n  }\n\n  run(_accessor, editor, args) {\n    let cursors = [];\n\n    if (args.reason === 'auto-save') {\n      // See https://github.com/editorconfig/editorconfig-vscode/issues/47\n      // It is very convenient for the editor config extension to invoke this action.\n      // So, if we get a reason:'auto-save' passed in, let's preserve cursor positions.\n      cursors = (editor.getSelections() || []).map(s => new Position(s.positionLineNumber, s.positionColumn));\n    }\n\n    let selection = editor.getSelection();\n\n    if (selection === null) {\n      return;\n    }\n\n    let command = new TrimTrailingWhitespaceCommand(selection, cursors);\n    editor.pushUndoStop();\n    editor.executeCommands(this.id, [command]);\n    editor.pushUndoStop();\n  }\n\n}\nTrimTrailingWhitespaceAction.ID = 'editor.action.trimTrailingWhitespace';\nexport class DeleteLinesAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.deleteLines',\n      label: nls.localize('lines.delete', \"Delete Line\"),\n      alias: 'Delete Line',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.textInputFocus,\n        primary: 2048\n        /* CtrlCmd */\n        | 1024\n        /* Shift */\n        | 41\n        /* KeyK */\n        ,\n        weight: 100\n        /* EditorContrib */\n\n      }\n    });\n  }\n\n  run(_accessor, editor) {\n    if (!editor.hasModel()) {\n      return;\n    }\n\n    let ops = this._getLinesToRemove(editor);\n\n    let model = editor.getModel();\n\n    if (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) {\n      // Model is empty\n      return;\n    }\n\n    let linesDeleted = 0;\n    let edits = [];\n    let cursorState = [];\n\n    for (let i = 0, len = ops.length; i < len; i++) {\n      const op = ops[i];\n      let startLineNumber = op.startLineNumber;\n      let endLineNumber = op.endLineNumber;\n      let startColumn = 1;\n      let endColumn = model.getLineMaxColumn(endLineNumber);\n\n      if (endLineNumber < model.getLineCount()) {\n        endLineNumber += 1;\n        endColumn = 1;\n      } else if (startLineNumber > 1) {\n        startLineNumber -= 1;\n        startColumn = model.getLineMaxColumn(startLineNumber);\n      }\n\n      edits.push(EditOperation.replace(new Selection(startLineNumber, startColumn, endLineNumber, endColumn), ''));\n      cursorState.push(new Selection(startLineNumber - linesDeleted, op.positionColumn, startLineNumber - linesDeleted, op.positionColumn));\n      linesDeleted += op.endLineNumber - op.startLineNumber + 1;\n    }\n\n    editor.pushUndoStop();\n    editor.executeEdits(this.id, edits, cursorState);\n    editor.pushUndoStop();\n  }\n\n  _getLinesToRemove(editor) {\n    // Construct delete operations\n    let operations = editor.getSelections().map(s => {\n      let endLineNumber = s.endLineNumber;\n\n      if (s.startLineNumber < s.endLineNumber && s.endColumn === 1) {\n        endLineNumber -= 1;\n      }\n\n      return {\n        startLineNumber: s.startLineNumber,\n        selectionStartColumn: s.selectionStartColumn,\n        endLineNumber: endLineNumber,\n        positionColumn: s.positionColumn\n      };\n    }); // Sort delete operations\n\n    operations.sort((a, b) => {\n      if (a.startLineNumber === b.startLineNumber) {\n        return a.endLineNumber - b.endLineNumber;\n      }\n\n      return a.startLineNumber - b.startLineNumber;\n    }); // Merge delete operations which are adjacent or overlapping\n\n    let mergedOperations = [];\n    let previousOperation = operations[0];\n\n    for (let i = 1; i < operations.length; i++) {\n      if (previousOperation.endLineNumber + 1 >= operations[i].startLineNumber) {\n        // Merge current operations into the previous one\n        previousOperation.endLineNumber = operations[i].endLineNumber;\n      } else {\n        // Push previous operation\n        mergedOperations.push(previousOperation);\n        previousOperation = operations[i];\n      }\n    } // Push the last operation\n\n\n    mergedOperations.push(previousOperation);\n    return mergedOperations;\n  }\n\n}\nexport class IndentLinesAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.indentLines',\n      label: nls.localize('lines.indent', \"Indent Line\"),\n      alias: 'Indent Line',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 2048\n        /* CtrlCmd */\n        | 89\n        /* BracketRight */\n        ,\n        weight: 100\n        /* EditorContrib */\n\n      }\n    });\n  }\n\n  run(_accessor, editor) {\n    const viewModel = editor._getViewModel();\n\n    if (!viewModel) {\n      return;\n    }\n\n    editor.pushUndoStop();\n    editor.executeCommands(this.id, TypeOperations.indent(viewModel.cursorConfig, editor.getModel(), editor.getSelections()));\n    editor.pushUndoStop();\n  }\n\n}\n\nclass OutdentLinesAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.outdentLines',\n      label: nls.localize('lines.outdent', \"Outdent Line\"),\n      alias: 'Outdent Line',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 2048\n        /* CtrlCmd */\n        | 87\n        /* BracketLeft */\n        ,\n        weight: 100\n        /* EditorContrib */\n\n      }\n    });\n  }\n\n  run(_accessor, editor) {\n    CoreEditingCommands.Outdent.runEditorCommand(_accessor, editor, null);\n  }\n\n}\n\nexport class InsertLineBeforeAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.insertLineBefore',\n      label: nls.localize('lines.insertBefore', \"Insert Line Above\"),\n      alias: 'Insert Line Above',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 2048\n        /* CtrlCmd */\n        | 1024\n        /* Shift */\n        | 3\n        /* Enter */\n        ,\n        weight: 100\n        /* EditorContrib */\n\n      }\n    });\n  }\n\n  run(_accessor, editor) {\n    const viewModel = editor._getViewModel();\n\n    if (!viewModel) {\n      return;\n    }\n\n    editor.pushUndoStop();\n    editor.executeCommands(this.id, TypeOperations.lineInsertBefore(viewModel.cursorConfig, editor.getModel(), editor.getSelections()));\n  }\n\n}\nexport class InsertLineAfterAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.insertLineAfter',\n      label: nls.localize('lines.insertAfter', \"Insert Line Below\"),\n      alias: 'Insert Line Below',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 2048\n        /* CtrlCmd */\n        | 3\n        /* Enter */\n        ,\n        weight: 100\n        /* EditorContrib */\n\n      }\n    });\n  }\n\n  run(_accessor, editor) {\n    const viewModel = editor._getViewModel();\n\n    if (!viewModel) {\n      return;\n    }\n\n    editor.pushUndoStop();\n    editor.executeCommands(this.id, TypeOperations.lineInsertAfter(viewModel.cursorConfig, editor.getModel(), editor.getSelections()));\n  }\n\n}\nexport class AbstractDeleteAllToBoundaryAction extends EditorAction {\n  run(_accessor, editor) {\n    if (!editor.hasModel()) {\n      return;\n    }\n\n    const primaryCursor = editor.getSelection();\n\n    let rangesToDelete = this._getRangesToDelete(editor); // merge overlapping selections\n\n\n    let effectiveRanges = [];\n\n    for (let i = 0, count = rangesToDelete.length - 1; i < count; i++) {\n      let range = rangesToDelete[i];\n      let nextRange = rangesToDelete[i + 1];\n\n      if (Range.intersectRanges(range, nextRange) === null) {\n        effectiveRanges.push(range);\n      } else {\n        rangesToDelete[i + 1] = Range.plusRange(range, nextRange);\n      }\n    }\n\n    effectiveRanges.push(rangesToDelete[rangesToDelete.length - 1]);\n\n    let endCursorState = this._getEndCursorState(primaryCursor, effectiveRanges);\n\n    let edits = effectiveRanges.map(range => {\n      return EditOperation.replace(range, '');\n    });\n    editor.pushUndoStop();\n    editor.executeEdits(this.id, edits, endCursorState);\n    editor.pushUndoStop();\n  }\n\n}\nexport class DeleteAllLeftAction extends AbstractDeleteAllToBoundaryAction {\n  constructor() {\n    super({\n      id: 'deleteAllLeft',\n      label: nls.localize('lines.deleteAllLeft', \"Delete All Left\"),\n      alias: 'Delete All Left',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.textInputFocus,\n        primary: 0,\n        mac: {\n          primary: 2048\n          /* CtrlCmd */\n          | 1\n          /* Backspace */\n\n        },\n        weight: 100\n        /* EditorContrib */\n\n      }\n    });\n  }\n\n  _getEndCursorState(primaryCursor, rangesToDelete) {\n    let endPrimaryCursor = null;\n    let endCursorState = [];\n    let deletedLines = 0;\n    rangesToDelete.forEach(range => {\n      let endCursor;\n\n      if (range.endColumn === 1 && deletedLines > 0) {\n        let newStartLine = range.startLineNumber - deletedLines;\n        endCursor = new Selection(newStartLine, range.startColumn, newStartLine, range.startColumn);\n      } else {\n        endCursor = new Selection(range.startLineNumber, range.startColumn, range.startLineNumber, range.startColumn);\n      }\n\n      deletedLines += range.endLineNumber - range.startLineNumber;\n\n      if (range.intersectRanges(primaryCursor)) {\n        endPrimaryCursor = endCursor;\n      } else {\n        endCursorState.push(endCursor);\n      }\n    });\n\n    if (endPrimaryCursor) {\n      endCursorState.unshift(endPrimaryCursor);\n    }\n\n    return endCursorState;\n  }\n\n  _getRangesToDelete(editor) {\n    let selections = editor.getSelections();\n\n    if (selections === null) {\n      return [];\n    }\n\n    let rangesToDelete = selections;\n    let model = editor.getModel();\n\n    if (model === null) {\n      return [];\n    }\n\n    rangesToDelete.sort(Range.compareRangesUsingStarts);\n    rangesToDelete = rangesToDelete.map(selection => {\n      if (selection.isEmpty()) {\n        if (selection.startColumn === 1) {\n          let deleteFromLine = Math.max(1, selection.startLineNumber - 1);\n          let deleteFromColumn = selection.startLineNumber === 1 ? 1 : model.getLineContent(deleteFromLine).length + 1;\n          return new Range(deleteFromLine, deleteFromColumn, selection.startLineNumber, 1);\n        } else {\n          return new Range(selection.startLineNumber, 1, selection.startLineNumber, selection.startColumn);\n        }\n      } else {\n        return new Range(selection.startLineNumber, 1, selection.endLineNumber, selection.endColumn);\n      }\n    });\n    return rangesToDelete;\n  }\n\n}\nexport class DeleteAllRightAction extends AbstractDeleteAllToBoundaryAction {\n  constructor() {\n    super({\n      id: 'deleteAllRight',\n      label: nls.localize('lines.deleteAllRight', \"Delete All Right\"),\n      alias: 'Delete All Right',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.textInputFocus,\n        primary: 0,\n        mac: {\n          primary: 256\n          /* WinCtrl */\n          | 41\n          /* KeyK */\n          ,\n          secondary: [2048\n          /* CtrlCmd */\n          | 20\n          /* Delete */\n          ]\n        },\n        weight: 100\n        /* EditorContrib */\n\n      }\n    });\n  }\n\n  _getEndCursorState(primaryCursor, rangesToDelete) {\n    let endPrimaryCursor = null;\n    let endCursorState = [];\n\n    for (let i = 0, len = rangesToDelete.length, offset = 0; i < len; i++) {\n      let range = rangesToDelete[i];\n      let endCursor = new Selection(range.startLineNumber - offset, range.startColumn, range.startLineNumber - offset, range.startColumn);\n\n      if (range.intersectRanges(primaryCursor)) {\n        endPrimaryCursor = endCursor;\n      } else {\n        endCursorState.push(endCursor);\n      }\n    }\n\n    if (endPrimaryCursor) {\n      endCursorState.unshift(endPrimaryCursor);\n    }\n\n    return endCursorState;\n  }\n\n  _getRangesToDelete(editor) {\n    let model = editor.getModel();\n\n    if (model === null) {\n      return [];\n    }\n\n    let selections = editor.getSelections();\n\n    if (selections === null) {\n      return [];\n    }\n\n    let rangesToDelete = selections.map(sel => {\n      if (sel.isEmpty()) {\n        const maxColumn = model.getLineMaxColumn(sel.startLineNumber);\n\n        if (sel.startColumn === maxColumn) {\n          return new Range(sel.startLineNumber, sel.startColumn, sel.startLineNumber + 1, 1);\n        } else {\n          return new Range(sel.startLineNumber, sel.startColumn, sel.startLineNumber, maxColumn);\n        }\n      }\n\n      return sel;\n    });\n    rangesToDelete.sort(Range.compareRangesUsingStarts);\n    return rangesToDelete;\n  }\n\n}\nexport class JoinLinesAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.joinLines',\n      label: nls.localize('lines.joinLines', \"Join Lines\"),\n      alias: 'Join Lines',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 0,\n        mac: {\n          primary: 256\n          /* WinCtrl */\n          | 40\n          /* KeyJ */\n\n        },\n        weight: 100\n        /* EditorContrib */\n\n      }\n    });\n  }\n\n  run(_accessor, editor) {\n    let selections = editor.getSelections();\n\n    if (selections === null) {\n      return;\n    }\n\n    let primaryCursor = editor.getSelection();\n\n    if (primaryCursor === null) {\n      return;\n    }\n\n    selections.sort(Range.compareRangesUsingStarts);\n    let reducedSelections = [];\n    let lastSelection = selections.reduce((previousValue, currentValue) => {\n      if (previousValue.isEmpty()) {\n        if (previousValue.endLineNumber === currentValue.startLineNumber) {\n          if (primaryCursor.equalsSelection(previousValue)) {\n            primaryCursor = currentValue;\n          }\n\n          return currentValue;\n        }\n\n        if (currentValue.startLineNumber > previousValue.endLineNumber + 1) {\n          reducedSelections.push(previousValue);\n          return currentValue;\n        } else {\n          return new Selection(previousValue.startLineNumber, previousValue.startColumn, currentValue.endLineNumber, currentValue.endColumn);\n        }\n      } else {\n        if (currentValue.startLineNumber > previousValue.endLineNumber) {\n          reducedSelections.push(previousValue);\n          return currentValue;\n        } else {\n          return new Selection(previousValue.startLineNumber, previousValue.startColumn, currentValue.endLineNumber, currentValue.endColumn);\n        }\n      }\n    });\n    reducedSelections.push(lastSelection);\n    let model = editor.getModel();\n\n    if (model === null) {\n      return;\n    }\n\n    let edits = [];\n    let endCursorState = [];\n    let endPrimaryCursor = primaryCursor;\n    let lineOffset = 0;\n\n    for (let i = 0, len = reducedSelections.length; i < len; i++) {\n      let selection = reducedSelections[i];\n      let startLineNumber = selection.startLineNumber;\n      let startColumn = 1;\n      let columnDeltaOffset = 0;\n      let endLineNumber, endColumn;\n      let selectionEndPositionOffset = model.getLineContent(selection.endLineNumber).length - selection.endColumn;\n\n      if (selection.isEmpty() || selection.startLineNumber === selection.endLineNumber) {\n        let position = selection.getStartPosition();\n\n        if (position.lineNumber < model.getLineCount()) {\n          endLineNumber = startLineNumber + 1;\n          endColumn = model.getLineMaxColumn(endLineNumber);\n        } else {\n          endLineNumber = position.lineNumber;\n          endColumn = model.getLineMaxColumn(position.lineNumber);\n        }\n      } else {\n        endLineNumber = selection.endLineNumber;\n        endColumn = model.getLineMaxColumn(endLineNumber);\n      }\n\n      let trimmedLinesContent = model.getLineContent(startLineNumber);\n\n      for (let i = startLineNumber + 1; i <= endLineNumber; i++) {\n        let lineText = model.getLineContent(i);\n        let firstNonWhitespaceIdx = model.getLineFirstNonWhitespaceColumn(i);\n\n        if (firstNonWhitespaceIdx >= 1) {\n          let insertSpace = true;\n\n          if (trimmedLinesContent === '') {\n            insertSpace = false;\n          }\n\n          if (insertSpace && (trimmedLinesContent.charAt(trimmedLinesContent.length - 1) === ' ' || trimmedLinesContent.charAt(trimmedLinesContent.length - 1) === '\\t')) {\n            insertSpace = false;\n            trimmedLinesContent = trimmedLinesContent.replace(/[\\s\\uFEFF\\xA0]+$/g, ' ');\n          }\n\n          let lineTextWithoutIndent = lineText.substr(firstNonWhitespaceIdx - 1);\n          trimmedLinesContent += (insertSpace ? ' ' : '') + lineTextWithoutIndent;\n\n          if (insertSpace) {\n            columnDeltaOffset = lineTextWithoutIndent.length + 1;\n          } else {\n            columnDeltaOffset = lineTextWithoutIndent.length;\n          }\n        } else {\n          columnDeltaOffset = 0;\n        }\n      }\n\n      let deleteSelection = new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n\n      if (!deleteSelection.isEmpty()) {\n        let resultSelection;\n\n        if (selection.isEmpty()) {\n          edits.push(EditOperation.replace(deleteSelection, trimmedLinesContent));\n          resultSelection = new Selection(deleteSelection.startLineNumber - lineOffset, trimmedLinesContent.length - columnDeltaOffset + 1, startLineNumber - lineOffset, trimmedLinesContent.length - columnDeltaOffset + 1);\n        } else {\n          if (selection.startLineNumber === selection.endLineNumber) {\n            edits.push(EditOperation.replace(deleteSelection, trimmedLinesContent));\n            resultSelection = new Selection(selection.startLineNumber - lineOffset, selection.startColumn, selection.endLineNumber - lineOffset, selection.endColumn);\n          } else {\n            edits.push(EditOperation.replace(deleteSelection, trimmedLinesContent));\n            resultSelection = new Selection(selection.startLineNumber - lineOffset, selection.startColumn, selection.startLineNumber - lineOffset, trimmedLinesContent.length - selectionEndPositionOffset);\n          }\n        }\n\n        if (Range.intersectRanges(deleteSelection, primaryCursor) !== null) {\n          endPrimaryCursor = resultSelection;\n        } else {\n          endCursorState.push(resultSelection);\n        }\n      }\n\n      lineOffset += deleteSelection.endLineNumber - deleteSelection.startLineNumber;\n    }\n\n    endCursorState.unshift(endPrimaryCursor);\n    editor.pushUndoStop();\n    editor.executeEdits(this.id, edits, endCursorState);\n    editor.pushUndoStop();\n  }\n\n}\nexport class TransposeAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.transpose',\n      label: nls.localize('editor.transpose', \"Transpose characters around the cursor\"),\n      alias: 'Transpose characters around the cursor',\n      precondition: EditorContextKeys.writable\n    });\n  }\n\n  run(_accessor, editor) {\n    let selections = editor.getSelections();\n\n    if (selections === null) {\n      return;\n    }\n\n    let model = editor.getModel();\n\n    if (model === null) {\n      return;\n    }\n\n    let commands = [];\n\n    for (let i = 0, len = selections.length; i < len; i++) {\n      let selection = selections[i];\n\n      if (!selection.isEmpty()) {\n        continue;\n      }\n\n      let cursor = selection.getStartPosition();\n      let maxColumn = model.getLineMaxColumn(cursor.lineNumber);\n\n      if (cursor.column >= maxColumn) {\n        if (cursor.lineNumber === model.getLineCount()) {\n          continue;\n        } // The cursor is at the end of current line and current line is not empty\n        // then we transpose the character before the cursor and the line break if there is any following line.\n\n\n        let deleteSelection = new Range(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber + 1, 1);\n        let chars = model.getValueInRange(deleteSelection).split('').reverse().join('');\n        commands.push(new ReplaceCommand(new Selection(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber + 1, 1), chars));\n      } else {\n        let deleteSelection = new Range(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber, cursor.column + 1);\n        let chars = model.getValueInRange(deleteSelection).split('').reverse().join('');\n        commands.push(new ReplaceCommandThatPreservesSelection(deleteSelection, chars, new Selection(cursor.lineNumber, cursor.column + 1, cursor.lineNumber, cursor.column + 1)));\n      }\n    }\n\n    editor.pushUndoStop();\n    editor.executeCommands(this.id, commands);\n    editor.pushUndoStop();\n  }\n\n}\nexport class AbstractCaseAction extends EditorAction {\n  run(_accessor, editor) {\n    const selections = editor.getSelections();\n\n    if (selections === null) {\n      return;\n    }\n\n    const model = editor.getModel();\n\n    if (model === null) {\n      return;\n    }\n\n    const wordSeparators = editor.getOption(117\n    /* wordSeparators */\n    );\n    const textEdits = [];\n\n    for (const selection of selections) {\n      if (selection.isEmpty()) {\n        const cursor = selection.getStartPosition();\n        const word = editor.getConfiguredWordAtPosition(cursor);\n\n        if (!word) {\n          continue;\n        }\n\n        const wordRange = new Range(cursor.lineNumber, word.startColumn, cursor.lineNumber, word.endColumn);\n        const text = model.getValueInRange(wordRange);\n        textEdits.push(EditOperation.replace(wordRange, this._modifyText(text, wordSeparators)));\n      } else {\n        const text = model.getValueInRange(selection);\n        textEdits.push(EditOperation.replace(selection, this._modifyText(text, wordSeparators)));\n      }\n    }\n\n    editor.pushUndoStop();\n    editor.executeEdits(this.id, textEdits);\n    editor.pushUndoStop();\n  }\n\n}\nexport class UpperCaseAction extends AbstractCaseAction {\n  constructor() {\n    super({\n      id: 'editor.action.transformToUppercase',\n      label: nls.localize('editor.transformToUppercase', \"Transform to Uppercase\"),\n      alias: 'Transform to Uppercase',\n      precondition: EditorContextKeys.writable\n    });\n  }\n\n  _modifyText(text, wordSeparators) {\n    return text.toLocaleUpperCase();\n  }\n\n}\nexport class LowerCaseAction extends AbstractCaseAction {\n  constructor() {\n    super({\n      id: 'editor.action.transformToLowercase',\n      label: nls.localize('editor.transformToLowercase', \"Transform to Lowercase\"),\n      alias: 'Transform to Lowercase',\n      precondition: EditorContextKeys.writable\n    });\n  }\n\n  _modifyText(text, wordSeparators) {\n    return text.toLocaleLowerCase();\n  }\n\n}\n\nclass BackwardsCompatibleRegExp {\n  constructor(_pattern, _flags) {\n    this._pattern = _pattern;\n    this._flags = _flags;\n    this._actual = null;\n    this._evaluated = false;\n  }\n\n  get() {\n    if (!this._evaluated) {\n      this._evaluated = true;\n\n      try {\n        this._actual = new RegExp(this._pattern, this._flags);\n      } catch (err) {// this browser does not support this regular expression\n      }\n    }\n\n    return this._actual;\n  }\n\n  isSupported() {\n    return this.get() !== null;\n  }\n\n}\n\nexport class TitleCaseAction extends AbstractCaseAction {\n  constructor() {\n    super({\n      id: 'editor.action.transformToTitlecase',\n      label: nls.localize('editor.transformToTitlecase', \"Transform to Title Case\"),\n      alias: 'Transform to Title Case',\n      precondition: EditorContextKeys.writable\n    });\n  }\n\n  _modifyText(text, wordSeparators) {\n    const titleBoundary = TitleCaseAction.titleBoundary.get();\n\n    if (!titleBoundary) {\n      // cannot support this\n      return text;\n    }\n\n    return text.toLocaleLowerCase().replace(titleBoundary, b => b.toLocaleUpperCase());\n  }\n\n}\nTitleCaseAction.titleBoundary = new BackwardsCompatibleRegExp('(^|[^\\\\p{L}\\\\p{N}\\']|((^|\\\\P{L})\\'))\\\\p{L}', 'gmu');\nexport class SnakeCaseAction extends AbstractCaseAction {\n  constructor() {\n    super({\n      id: 'editor.action.transformToSnakecase',\n      label: nls.localize('editor.transformToSnakecase', \"Transform to Snake Case\"),\n      alias: 'Transform to Snake Case',\n      precondition: EditorContextKeys.writable\n    });\n  }\n\n  _modifyText(text, wordSeparators) {\n    const caseBoundary = SnakeCaseAction.caseBoundary.get();\n    const singleLetters = SnakeCaseAction.singleLetters.get();\n\n    if (!caseBoundary || !singleLetters) {\n      // cannot support this\n      return text;\n    }\n\n    return text.replace(caseBoundary, '$1_$2').replace(singleLetters, '$1_$2$3').toLocaleLowerCase();\n  }\n\n}\nSnakeCaseAction.caseBoundary = new BackwardsCompatibleRegExp('(\\\\p{Ll})(\\\\p{Lu})', 'gmu');\nSnakeCaseAction.singleLetters = new BackwardsCompatibleRegExp('(\\\\p{Lu}|\\\\p{N})(\\\\p{Lu})(\\\\p{Ll})', 'gmu');\nregisterEditorAction(CopyLinesUpAction);\nregisterEditorAction(CopyLinesDownAction);\nregisterEditorAction(DuplicateSelectionAction);\nregisterEditorAction(MoveLinesUpAction);\nregisterEditorAction(MoveLinesDownAction);\nregisterEditorAction(SortLinesAscendingAction);\nregisterEditorAction(SortLinesDescendingAction);\nregisterEditorAction(DeleteDuplicateLinesAction);\nregisterEditorAction(TrimTrailingWhitespaceAction);\nregisterEditorAction(DeleteLinesAction);\nregisterEditorAction(IndentLinesAction);\nregisterEditorAction(OutdentLinesAction);\nregisterEditorAction(InsertLineBeforeAction);\nregisterEditorAction(InsertLineAfterAction);\nregisterEditorAction(DeleteAllLeftAction);\nregisterEditorAction(DeleteAllRightAction);\nregisterEditorAction(JoinLinesAction);\nregisterEditorAction(TransposeAction);\nregisterEditorAction(UpperCaseAction);\nregisterEditorAction(LowerCaseAction);\n\nif (SnakeCaseAction.caseBoundary.isSupported() && SnakeCaseAction.singleLetters.isSupported()) {\n  registerEditorAction(SnakeCaseAction);\n}\n\nif (TitleCaseAction.titleBoundary.isSupported()) {\n  registerEditorAction(TitleCaseAction);\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/contrib/linesOperations/browser/linesOperations.js"],"names":["KeyChord","CoreEditingCommands","EditorAction","registerEditorAction","ReplaceCommand","ReplaceCommandThatPreservesSelection","ReplaceCommandThatSelectsText","TrimTrailingWhitespaceCommand","TypeOperations","EditOperation","Position","Range","Selection","EditorContextKeys","CopyLinesCommand","MoveLinesCommand","SortLinesCommand","nls","MenuId","AbstractCopyLinesAction","constructor","down","opts","run","_accessor","editor","hasModel","selections","getSelections","map","selection","index","ignore","sort","a","b","compareRangesUsingStarts","prev","i","length","curr","endLineNumber","startLineNumber","commands","push","pushUndoStop","executeCommands","id","CopyLinesUpAction","label","localize","alias","precondition","writable","kbOpts","kbExpr","editorTextFocus","primary","linux","weight","menuOpts","menuId","MenubarSelectionMenu","group","title","key","comment","order","CopyLinesDownAction","DuplicateSelectionAction","accessor","args","model","getModel","isEmpty","insertSelection","endColumn","getValueInRange","AbstractMoveLinesAction","autoIndent","getOption","MoveLinesUpAction","MoveLinesDownAction","AbstractSortLinesAction","descending","canRun","len","SortLinesAscendingAction","SortLinesDescendingAction","DeleteDuplicateLinesAction","getLineCount","getLineMaxColumn","edits","endCursorState","linesDeleted","uniqueLines","Set","lines","line","getLineContent","has","add","selectionToReplace","adjustedSelectionStart","finalSelection","replace","join","executeEdits","TrimTrailingWhitespaceAction","ID","cursors","reason","s","positionLineNumber","positionColumn","getSelection","command","DeleteLinesAction","textInputFocus","ops","_getLinesToRemove","cursorState","op","startColumn","operations","selectionStartColumn","mergedOperations","previousOperation","IndentLinesAction","viewModel","_getViewModel","indent","cursorConfig","OutdentLinesAction","Outdent","runEditorCommand","InsertLineBeforeAction","lineInsertBefore","InsertLineAfterAction","lineInsertAfter","AbstractDeleteAllToBoundaryAction","primaryCursor","rangesToDelete","_getRangesToDelete","effectiveRanges","count","range","nextRange","intersectRanges","plusRange","_getEndCursorState","DeleteAllLeftAction","mac","endPrimaryCursor","deletedLines","forEach","endCursor","newStartLine","unshift","deleteFromLine","Math","max","deleteFromColumn","DeleteAllRightAction","secondary","offset","sel","maxColumn","JoinLinesAction","reducedSelections","lastSelection","reduce","previousValue","currentValue","equalsSelection","lineOffset","columnDeltaOffset","selectionEndPositionOffset","position","getStartPosition","lineNumber","trimmedLinesContent","lineText","firstNonWhitespaceIdx","getLineFirstNonWhitespaceColumn","insertSpace","charAt","lineTextWithoutIndent","substr","deleteSelection","resultSelection","TransposeAction","cursor","column","chars","split","reverse","AbstractCaseAction","wordSeparators","textEdits","word","getConfiguredWordAtPosition","wordRange","text","_modifyText","UpperCaseAction","toLocaleUpperCase","LowerCaseAction","toLocaleLowerCase","BackwardsCompatibleRegExp","_pattern","_flags","_actual","_evaluated","get","RegExp","err","isSupported","TitleCaseAction","titleBoundary","SnakeCaseAction","caseBoundary","singleLetters"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { KeyChord } from '../../../../base/common/keyCodes.js';\nimport { CoreEditingCommands } from '../../../browser/controller/coreCommands.js';\nimport { EditorAction, registerEditorAction } from '../../../browser/editorExtensions.js';\nimport { ReplaceCommand, ReplaceCommandThatPreservesSelection, ReplaceCommandThatSelectsText } from '../../../common/commands/replaceCommand.js';\nimport { TrimTrailingWhitespaceCommand } from '../../../common/commands/trimTrailingWhitespaceCommand.js';\nimport { TypeOperations } from '../../../common/cursor/cursorTypeOperations.js';\nimport { EditOperation } from '../../../common/core/editOperation.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { CopyLinesCommand } from './copyLinesCommand.js';\nimport { MoveLinesCommand } from './moveLinesCommand.js';\nimport { SortLinesCommand } from './sortLinesCommand.js';\nimport * as nls from '../../../../nls.js';\nimport { MenuId } from '../../../../platform/actions/common/actions.js';\n// copy lines\nclass AbstractCopyLinesAction extends EditorAction {\n    constructor(down, opts) {\n        super(opts);\n        this.down = down;\n    }\n    run(_accessor, editor) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        const selections = editor.getSelections().map((selection, index) => ({ selection, index, ignore: false }));\n        selections.sort((a, b) => Range.compareRangesUsingStarts(a.selection, b.selection));\n        // Remove selections that would result in copying the same line\n        let prev = selections[0];\n        for (let i = 1; i < selections.length; i++) {\n            const curr = selections[i];\n            if (prev.selection.endLineNumber === curr.selection.startLineNumber) {\n                // these two selections would copy the same line\n                if (prev.index < curr.index) {\n                    // prev wins\n                    curr.ignore = true;\n                }\n                else {\n                    // curr wins\n                    prev.ignore = true;\n                    prev = curr;\n                }\n            }\n        }\n        const commands = [];\n        for (const selection of selections) {\n            commands.push(new CopyLinesCommand(selection.selection, this.down, selection.ignore));\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, commands);\n        editor.pushUndoStop();\n    }\n}\nclass CopyLinesUpAction extends AbstractCopyLinesAction {\n    constructor() {\n        super(false, {\n            id: 'editor.action.copyLinesUpAction',\n            label: nls.localize('lines.copyUp', \"Copy Line Up\"),\n            alias: 'Copy Line Up',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 512 /* Alt */ | 1024 /* Shift */ | 16 /* UpArrow */,\n                linux: { primary: 2048 /* CtrlCmd */ | 512 /* Alt */ | 1024 /* Shift */ | 16 /* UpArrow */ },\n                weight: 100 /* EditorContrib */\n            },\n            menuOpts: {\n                menuId: MenuId.MenubarSelectionMenu,\n                group: '2_line',\n                title: nls.localize({ key: 'miCopyLinesUp', comment: ['&& denotes a mnemonic'] }, \"&&Copy Line Up\"),\n                order: 1\n            }\n        });\n    }\n}\nclass CopyLinesDownAction extends AbstractCopyLinesAction {\n    constructor() {\n        super(true, {\n            id: 'editor.action.copyLinesDownAction',\n            label: nls.localize('lines.copyDown', \"Copy Line Down\"),\n            alias: 'Copy Line Down',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 512 /* Alt */ | 1024 /* Shift */ | 18 /* DownArrow */,\n                linux: { primary: 2048 /* CtrlCmd */ | 512 /* Alt */ | 1024 /* Shift */ | 18 /* DownArrow */ },\n                weight: 100 /* EditorContrib */\n            },\n            menuOpts: {\n                menuId: MenuId.MenubarSelectionMenu,\n                group: '2_line',\n                title: nls.localize({ key: 'miCopyLinesDown', comment: ['&& denotes a mnemonic'] }, \"Co&&py Line Down\"),\n                order: 2\n            }\n        });\n    }\n}\nexport class DuplicateSelectionAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.duplicateSelection',\n            label: nls.localize('duplicateSelection', \"Duplicate Selection\"),\n            alias: 'Duplicate Selection',\n            precondition: EditorContextKeys.writable,\n            menuOpts: {\n                menuId: MenuId.MenubarSelectionMenu,\n                group: '2_line',\n                title: nls.localize({ key: 'miDuplicateSelection', comment: ['&& denotes a mnemonic'] }, \"&&Duplicate Selection\"),\n                order: 5\n            }\n        });\n    }\n    run(accessor, editor, args) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        const commands = [];\n        const selections = editor.getSelections();\n        const model = editor.getModel();\n        for (const selection of selections) {\n            if (selection.isEmpty()) {\n                commands.push(new CopyLinesCommand(selection, true));\n            }\n            else {\n                const insertSelection = new Selection(selection.endLineNumber, selection.endColumn, selection.endLineNumber, selection.endColumn);\n                commands.push(new ReplaceCommandThatSelectsText(insertSelection, model.getValueInRange(selection)));\n            }\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, commands);\n        editor.pushUndoStop();\n    }\n}\n// move lines\nclass AbstractMoveLinesAction extends EditorAction {\n    constructor(down, opts) {\n        super(opts);\n        this.down = down;\n    }\n    run(_accessor, editor) {\n        let commands = [];\n        let selections = editor.getSelections() || [];\n        const autoIndent = editor.getOption(9 /* autoIndent */);\n        for (const selection of selections) {\n            commands.push(new MoveLinesCommand(selection, this.down, autoIndent));\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, commands);\n        editor.pushUndoStop();\n    }\n}\nclass MoveLinesUpAction extends AbstractMoveLinesAction {\n    constructor() {\n        super(false, {\n            id: 'editor.action.moveLinesUpAction',\n            label: nls.localize('lines.moveUp', \"Move Line Up\"),\n            alias: 'Move Line Up',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 512 /* Alt */ | 16 /* UpArrow */,\n                linux: { primary: 512 /* Alt */ | 16 /* UpArrow */ },\n                weight: 100 /* EditorContrib */\n            },\n            menuOpts: {\n                menuId: MenuId.MenubarSelectionMenu,\n                group: '2_line',\n                title: nls.localize({ key: 'miMoveLinesUp', comment: ['&& denotes a mnemonic'] }, \"Mo&&ve Line Up\"),\n                order: 3\n            }\n        });\n    }\n}\nclass MoveLinesDownAction extends AbstractMoveLinesAction {\n    constructor() {\n        super(true, {\n            id: 'editor.action.moveLinesDownAction',\n            label: nls.localize('lines.moveDown', \"Move Line Down\"),\n            alias: 'Move Line Down',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 512 /* Alt */ | 18 /* DownArrow */,\n                linux: { primary: 512 /* Alt */ | 18 /* DownArrow */ },\n                weight: 100 /* EditorContrib */\n            },\n            menuOpts: {\n                menuId: MenuId.MenubarSelectionMenu,\n                group: '2_line',\n                title: nls.localize({ key: 'miMoveLinesDown', comment: ['&& denotes a mnemonic'] }, \"Move &&Line Down\"),\n                order: 4\n            }\n        });\n    }\n}\nexport class AbstractSortLinesAction extends EditorAction {\n    constructor(descending, opts) {\n        super(opts);\n        this.descending = descending;\n    }\n    run(_accessor, editor) {\n        const selections = editor.getSelections() || [];\n        for (const selection of selections) {\n            if (!SortLinesCommand.canRun(editor.getModel(), selection, this.descending)) {\n                return;\n            }\n        }\n        let commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            commands[i] = new SortLinesCommand(selections[i], this.descending);\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, commands);\n        editor.pushUndoStop();\n    }\n}\nexport class SortLinesAscendingAction extends AbstractSortLinesAction {\n    constructor() {\n        super(false, {\n            id: 'editor.action.sortLinesAscending',\n            label: nls.localize('lines.sortAscending', \"Sort Lines Ascending\"),\n            alias: 'Sort Lines Ascending',\n            precondition: EditorContextKeys.writable\n        });\n    }\n}\nexport class SortLinesDescendingAction extends AbstractSortLinesAction {\n    constructor() {\n        super(true, {\n            id: 'editor.action.sortLinesDescending',\n            label: nls.localize('lines.sortDescending', \"Sort Lines Descending\"),\n            alias: 'Sort Lines Descending',\n            precondition: EditorContextKeys.writable\n        });\n    }\n}\nexport class DeleteDuplicateLinesAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.removeDuplicateLines',\n            label: nls.localize('lines.deleteDuplicates', \"Delete Duplicate Lines\"),\n            alias: 'Delete Duplicate Lines',\n            precondition: EditorContextKeys.writable\n        });\n    }\n    run(_accessor, editor) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        let model = editor.getModel();\n        if (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) {\n            return;\n        }\n        let edits = [];\n        let endCursorState = [];\n        let linesDeleted = 0;\n        for (let selection of editor.getSelections()) {\n            let uniqueLines = new Set();\n            let lines = [];\n            for (let i = selection.startLineNumber; i <= selection.endLineNumber; i++) {\n                let line = model.getLineContent(i);\n                if (uniqueLines.has(line)) {\n                    continue;\n                }\n                lines.push(line);\n                uniqueLines.add(line);\n            }\n            let selectionToReplace = new Selection(selection.startLineNumber, 1, selection.endLineNumber, model.getLineMaxColumn(selection.endLineNumber));\n            let adjustedSelectionStart = selection.startLineNumber - linesDeleted;\n            let finalSelection = new Selection(adjustedSelectionStart, 1, adjustedSelectionStart + lines.length - 1, lines[lines.length - 1].length);\n            edits.push(EditOperation.replace(selectionToReplace, lines.join('\\n')));\n            endCursorState.push(finalSelection);\n            linesDeleted += (selection.endLineNumber - selection.startLineNumber + 1) - lines.length;\n        }\n        editor.pushUndoStop();\n        editor.executeEdits(this.id, edits, endCursorState);\n        editor.pushUndoStop();\n    }\n}\nexport class TrimTrailingWhitespaceAction extends EditorAction {\n    constructor() {\n        super({\n            id: TrimTrailingWhitespaceAction.ID,\n            label: nls.localize('lines.trimTrailingWhitespace', \"Trim Trailing Whitespace\"),\n            alias: 'Trim Trailing Whitespace',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* CtrlCmd */ | 41 /* KeyK */, 2048 /* CtrlCmd */ | 54 /* KeyX */),\n                weight: 100 /* EditorContrib */\n            }\n        });\n    }\n    run(_accessor, editor, args) {\n        let cursors = [];\n        if (args.reason === 'auto-save') {\n            // See https://github.com/editorconfig/editorconfig-vscode/issues/47\n            // It is very convenient for the editor config extension to invoke this action.\n            // So, if we get a reason:'auto-save' passed in, let's preserve cursor positions.\n            cursors = (editor.getSelections() || []).map(s => new Position(s.positionLineNumber, s.positionColumn));\n        }\n        let selection = editor.getSelection();\n        if (selection === null) {\n            return;\n        }\n        let command = new TrimTrailingWhitespaceCommand(selection, cursors);\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, [command]);\n        editor.pushUndoStop();\n    }\n}\nTrimTrailingWhitespaceAction.ID = 'editor.action.trimTrailingWhitespace';\nexport class DeleteLinesAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.deleteLines',\n            label: nls.localize('lines.delete', \"Delete Line\"),\n            alias: 'Delete Line',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.textInputFocus,\n                primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 41 /* KeyK */,\n                weight: 100 /* EditorContrib */\n            }\n        });\n    }\n    run(_accessor, editor) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        let ops = this._getLinesToRemove(editor);\n        let model = editor.getModel();\n        if (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) {\n            // Model is empty\n            return;\n        }\n        let linesDeleted = 0;\n        let edits = [];\n        let cursorState = [];\n        for (let i = 0, len = ops.length; i < len; i++) {\n            const op = ops[i];\n            let startLineNumber = op.startLineNumber;\n            let endLineNumber = op.endLineNumber;\n            let startColumn = 1;\n            let endColumn = model.getLineMaxColumn(endLineNumber);\n            if (endLineNumber < model.getLineCount()) {\n                endLineNumber += 1;\n                endColumn = 1;\n            }\n            else if (startLineNumber > 1) {\n                startLineNumber -= 1;\n                startColumn = model.getLineMaxColumn(startLineNumber);\n            }\n            edits.push(EditOperation.replace(new Selection(startLineNumber, startColumn, endLineNumber, endColumn), ''));\n            cursorState.push(new Selection(startLineNumber - linesDeleted, op.positionColumn, startLineNumber - linesDeleted, op.positionColumn));\n            linesDeleted += (op.endLineNumber - op.startLineNumber + 1);\n        }\n        editor.pushUndoStop();\n        editor.executeEdits(this.id, edits, cursorState);\n        editor.pushUndoStop();\n    }\n    _getLinesToRemove(editor) {\n        // Construct delete operations\n        let operations = editor.getSelections().map((s) => {\n            let endLineNumber = s.endLineNumber;\n            if (s.startLineNumber < s.endLineNumber && s.endColumn === 1) {\n                endLineNumber -= 1;\n            }\n            return {\n                startLineNumber: s.startLineNumber,\n                selectionStartColumn: s.selectionStartColumn,\n                endLineNumber: endLineNumber,\n                positionColumn: s.positionColumn\n            };\n        });\n        // Sort delete operations\n        operations.sort((a, b) => {\n            if (a.startLineNumber === b.startLineNumber) {\n                return a.endLineNumber - b.endLineNumber;\n            }\n            return a.startLineNumber - b.startLineNumber;\n        });\n        // Merge delete operations which are adjacent or overlapping\n        let mergedOperations = [];\n        let previousOperation = operations[0];\n        for (let i = 1; i < operations.length; i++) {\n            if (previousOperation.endLineNumber + 1 >= operations[i].startLineNumber) {\n                // Merge current operations into the previous one\n                previousOperation.endLineNumber = operations[i].endLineNumber;\n            }\n            else {\n                // Push previous operation\n                mergedOperations.push(previousOperation);\n                previousOperation = operations[i];\n            }\n        }\n        // Push the last operation\n        mergedOperations.push(previousOperation);\n        return mergedOperations;\n    }\n}\nexport class IndentLinesAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.indentLines',\n            label: nls.localize('lines.indent', \"Indent Line\"),\n            alias: 'Indent Line',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 2048 /* CtrlCmd */ | 89 /* BracketRight */,\n                weight: 100 /* EditorContrib */\n            }\n        });\n    }\n    run(_accessor, editor) {\n        const viewModel = editor._getViewModel();\n        if (!viewModel) {\n            return;\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, TypeOperations.indent(viewModel.cursorConfig, editor.getModel(), editor.getSelections()));\n        editor.pushUndoStop();\n    }\n}\nclass OutdentLinesAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.outdentLines',\n            label: nls.localize('lines.outdent', \"Outdent Line\"),\n            alias: 'Outdent Line',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 2048 /* CtrlCmd */ | 87 /* BracketLeft */,\n                weight: 100 /* EditorContrib */\n            }\n        });\n    }\n    run(_accessor, editor) {\n        CoreEditingCommands.Outdent.runEditorCommand(_accessor, editor, null);\n    }\n}\nexport class InsertLineBeforeAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.insertLineBefore',\n            label: nls.localize('lines.insertBefore', \"Insert Line Above\"),\n            alias: 'Insert Line Above',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 3 /* Enter */,\n                weight: 100 /* EditorContrib */\n            }\n        });\n    }\n    run(_accessor, editor) {\n        const viewModel = editor._getViewModel();\n        if (!viewModel) {\n            return;\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, TypeOperations.lineInsertBefore(viewModel.cursorConfig, editor.getModel(), editor.getSelections()));\n    }\n}\nexport class InsertLineAfterAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.insertLineAfter',\n            label: nls.localize('lines.insertAfter', \"Insert Line Below\"),\n            alias: 'Insert Line Below',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 2048 /* CtrlCmd */ | 3 /* Enter */,\n                weight: 100 /* EditorContrib */\n            }\n        });\n    }\n    run(_accessor, editor) {\n        const viewModel = editor._getViewModel();\n        if (!viewModel) {\n            return;\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, TypeOperations.lineInsertAfter(viewModel.cursorConfig, editor.getModel(), editor.getSelections()));\n    }\n}\nexport class AbstractDeleteAllToBoundaryAction extends EditorAction {\n    run(_accessor, editor) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        const primaryCursor = editor.getSelection();\n        let rangesToDelete = this._getRangesToDelete(editor);\n        // merge overlapping selections\n        let effectiveRanges = [];\n        for (let i = 0, count = rangesToDelete.length - 1; i < count; i++) {\n            let range = rangesToDelete[i];\n            let nextRange = rangesToDelete[i + 1];\n            if (Range.intersectRanges(range, nextRange) === null) {\n                effectiveRanges.push(range);\n            }\n            else {\n                rangesToDelete[i + 1] = Range.plusRange(range, nextRange);\n            }\n        }\n        effectiveRanges.push(rangesToDelete[rangesToDelete.length - 1]);\n        let endCursorState = this._getEndCursorState(primaryCursor, effectiveRanges);\n        let edits = effectiveRanges.map(range => {\n            return EditOperation.replace(range, '');\n        });\n        editor.pushUndoStop();\n        editor.executeEdits(this.id, edits, endCursorState);\n        editor.pushUndoStop();\n    }\n}\nexport class DeleteAllLeftAction extends AbstractDeleteAllToBoundaryAction {\n    constructor() {\n        super({\n            id: 'deleteAllLeft',\n            label: nls.localize('lines.deleteAllLeft', \"Delete All Left\"),\n            alias: 'Delete All Left',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.textInputFocus,\n                primary: 0,\n                mac: { primary: 2048 /* CtrlCmd */ | 1 /* Backspace */ },\n                weight: 100 /* EditorContrib */\n            }\n        });\n    }\n    _getEndCursorState(primaryCursor, rangesToDelete) {\n        let endPrimaryCursor = null;\n        let endCursorState = [];\n        let deletedLines = 0;\n        rangesToDelete.forEach(range => {\n            let endCursor;\n            if (range.endColumn === 1 && deletedLines > 0) {\n                let newStartLine = range.startLineNumber - deletedLines;\n                endCursor = new Selection(newStartLine, range.startColumn, newStartLine, range.startColumn);\n            }\n            else {\n                endCursor = new Selection(range.startLineNumber, range.startColumn, range.startLineNumber, range.startColumn);\n            }\n            deletedLines += range.endLineNumber - range.startLineNumber;\n            if (range.intersectRanges(primaryCursor)) {\n                endPrimaryCursor = endCursor;\n            }\n            else {\n                endCursorState.push(endCursor);\n            }\n        });\n        if (endPrimaryCursor) {\n            endCursorState.unshift(endPrimaryCursor);\n        }\n        return endCursorState;\n    }\n    _getRangesToDelete(editor) {\n        let selections = editor.getSelections();\n        if (selections === null) {\n            return [];\n        }\n        let rangesToDelete = selections;\n        let model = editor.getModel();\n        if (model === null) {\n            return [];\n        }\n        rangesToDelete.sort(Range.compareRangesUsingStarts);\n        rangesToDelete = rangesToDelete.map(selection => {\n            if (selection.isEmpty()) {\n                if (selection.startColumn === 1) {\n                    let deleteFromLine = Math.max(1, selection.startLineNumber - 1);\n                    let deleteFromColumn = selection.startLineNumber === 1 ? 1 : model.getLineContent(deleteFromLine).length + 1;\n                    return new Range(deleteFromLine, deleteFromColumn, selection.startLineNumber, 1);\n                }\n                else {\n                    return new Range(selection.startLineNumber, 1, selection.startLineNumber, selection.startColumn);\n                }\n            }\n            else {\n                return new Range(selection.startLineNumber, 1, selection.endLineNumber, selection.endColumn);\n            }\n        });\n        return rangesToDelete;\n    }\n}\nexport class DeleteAllRightAction extends AbstractDeleteAllToBoundaryAction {\n    constructor() {\n        super({\n            id: 'deleteAllRight',\n            label: nls.localize('lines.deleteAllRight', \"Delete All Right\"),\n            alias: 'Delete All Right',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.textInputFocus,\n                primary: 0,\n                mac: { primary: 256 /* WinCtrl */ | 41 /* KeyK */, secondary: [2048 /* CtrlCmd */ | 20 /* Delete */] },\n                weight: 100 /* EditorContrib */\n            }\n        });\n    }\n    _getEndCursorState(primaryCursor, rangesToDelete) {\n        let endPrimaryCursor = null;\n        let endCursorState = [];\n        for (let i = 0, len = rangesToDelete.length, offset = 0; i < len; i++) {\n            let range = rangesToDelete[i];\n            let endCursor = new Selection(range.startLineNumber - offset, range.startColumn, range.startLineNumber - offset, range.startColumn);\n            if (range.intersectRanges(primaryCursor)) {\n                endPrimaryCursor = endCursor;\n            }\n            else {\n                endCursorState.push(endCursor);\n            }\n        }\n        if (endPrimaryCursor) {\n            endCursorState.unshift(endPrimaryCursor);\n        }\n        return endCursorState;\n    }\n    _getRangesToDelete(editor) {\n        let model = editor.getModel();\n        if (model === null) {\n            return [];\n        }\n        let selections = editor.getSelections();\n        if (selections === null) {\n            return [];\n        }\n        let rangesToDelete = selections.map((sel) => {\n            if (sel.isEmpty()) {\n                const maxColumn = model.getLineMaxColumn(sel.startLineNumber);\n                if (sel.startColumn === maxColumn) {\n                    return new Range(sel.startLineNumber, sel.startColumn, sel.startLineNumber + 1, 1);\n                }\n                else {\n                    return new Range(sel.startLineNumber, sel.startColumn, sel.startLineNumber, maxColumn);\n                }\n            }\n            return sel;\n        });\n        rangesToDelete.sort(Range.compareRangesUsingStarts);\n        return rangesToDelete;\n    }\n}\nexport class JoinLinesAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.joinLines',\n            label: nls.localize('lines.joinLines', \"Join Lines\"),\n            alias: 'Join Lines',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 0,\n                mac: { primary: 256 /* WinCtrl */ | 40 /* KeyJ */ },\n                weight: 100 /* EditorContrib */\n            }\n        });\n    }\n    run(_accessor, editor) {\n        let selections = editor.getSelections();\n        if (selections === null) {\n            return;\n        }\n        let primaryCursor = editor.getSelection();\n        if (primaryCursor === null) {\n            return;\n        }\n        selections.sort(Range.compareRangesUsingStarts);\n        let reducedSelections = [];\n        let lastSelection = selections.reduce((previousValue, currentValue) => {\n            if (previousValue.isEmpty()) {\n                if (previousValue.endLineNumber === currentValue.startLineNumber) {\n                    if (primaryCursor.equalsSelection(previousValue)) {\n                        primaryCursor = currentValue;\n                    }\n                    return currentValue;\n                }\n                if (currentValue.startLineNumber > previousValue.endLineNumber + 1) {\n                    reducedSelections.push(previousValue);\n                    return currentValue;\n                }\n                else {\n                    return new Selection(previousValue.startLineNumber, previousValue.startColumn, currentValue.endLineNumber, currentValue.endColumn);\n                }\n            }\n            else {\n                if (currentValue.startLineNumber > previousValue.endLineNumber) {\n                    reducedSelections.push(previousValue);\n                    return currentValue;\n                }\n                else {\n                    return new Selection(previousValue.startLineNumber, previousValue.startColumn, currentValue.endLineNumber, currentValue.endColumn);\n                }\n            }\n        });\n        reducedSelections.push(lastSelection);\n        let model = editor.getModel();\n        if (model === null) {\n            return;\n        }\n        let edits = [];\n        let endCursorState = [];\n        let endPrimaryCursor = primaryCursor;\n        let lineOffset = 0;\n        for (let i = 0, len = reducedSelections.length; i < len; i++) {\n            let selection = reducedSelections[i];\n            let startLineNumber = selection.startLineNumber;\n            let startColumn = 1;\n            let columnDeltaOffset = 0;\n            let endLineNumber, endColumn;\n            let selectionEndPositionOffset = model.getLineContent(selection.endLineNumber).length - selection.endColumn;\n            if (selection.isEmpty() || selection.startLineNumber === selection.endLineNumber) {\n                let position = selection.getStartPosition();\n                if (position.lineNumber < model.getLineCount()) {\n                    endLineNumber = startLineNumber + 1;\n                    endColumn = model.getLineMaxColumn(endLineNumber);\n                }\n                else {\n                    endLineNumber = position.lineNumber;\n                    endColumn = model.getLineMaxColumn(position.lineNumber);\n                }\n            }\n            else {\n                endLineNumber = selection.endLineNumber;\n                endColumn = model.getLineMaxColumn(endLineNumber);\n            }\n            let trimmedLinesContent = model.getLineContent(startLineNumber);\n            for (let i = startLineNumber + 1; i <= endLineNumber; i++) {\n                let lineText = model.getLineContent(i);\n                let firstNonWhitespaceIdx = model.getLineFirstNonWhitespaceColumn(i);\n                if (firstNonWhitespaceIdx >= 1) {\n                    let insertSpace = true;\n                    if (trimmedLinesContent === '') {\n                        insertSpace = false;\n                    }\n                    if (insertSpace && (trimmedLinesContent.charAt(trimmedLinesContent.length - 1) === ' ' ||\n                        trimmedLinesContent.charAt(trimmedLinesContent.length - 1) === '\\t')) {\n                        insertSpace = false;\n                        trimmedLinesContent = trimmedLinesContent.replace(/[\\s\\uFEFF\\xA0]+$/g, ' ');\n                    }\n                    let lineTextWithoutIndent = lineText.substr(firstNonWhitespaceIdx - 1);\n                    trimmedLinesContent += (insertSpace ? ' ' : '') + lineTextWithoutIndent;\n                    if (insertSpace) {\n                        columnDeltaOffset = lineTextWithoutIndent.length + 1;\n                    }\n                    else {\n                        columnDeltaOffset = lineTextWithoutIndent.length;\n                    }\n                }\n                else {\n                    columnDeltaOffset = 0;\n                }\n            }\n            let deleteSelection = new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n            if (!deleteSelection.isEmpty()) {\n                let resultSelection;\n                if (selection.isEmpty()) {\n                    edits.push(EditOperation.replace(deleteSelection, trimmedLinesContent));\n                    resultSelection = new Selection(deleteSelection.startLineNumber - lineOffset, trimmedLinesContent.length - columnDeltaOffset + 1, startLineNumber - lineOffset, trimmedLinesContent.length - columnDeltaOffset + 1);\n                }\n                else {\n                    if (selection.startLineNumber === selection.endLineNumber) {\n                        edits.push(EditOperation.replace(deleteSelection, trimmedLinesContent));\n                        resultSelection = new Selection(selection.startLineNumber - lineOffset, selection.startColumn, selection.endLineNumber - lineOffset, selection.endColumn);\n                    }\n                    else {\n                        edits.push(EditOperation.replace(deleteSelection, trimmedLinesContent));\n                        resultSelection = new Selection(selection.startLineNumber - lineOffset, selection.startColumn, selection.startLineNumber - lineOffset, trimmedLinesContent.length - selectionEndPositionOffset);\n                    }\n                }\n                if (Range.intersectRanges(deleteSelection, primaryCursor) !== null) {\n                    endPrimaryCursor = resultSelection;\n                }\n                else {\n                    endCursorState.push(resultSelection);\n                }\n            }\n            lineOffset += deleteSelection.endLineNumber - deleteSelection.startLineNumber;\n        }\n        endCursorState.unshift(endPrimaryCursor);\n        editor.pushUndoStop();\n        editor.executeEdits(this.id, edits, endCursorState);\n        editor.pushUndoStop();\n    }\n}\nexport class TransposeAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.transpose',\n            label: nls.localize('editor.transpose', \"Transpose characters around the cursor\"),\n            alias: 'Transpose characters around the cursor',\n            precondition: EditorContextKeys.writable\n        });\n    }\n    run(_accessor, editor) {\n        let selections = editor.getSelections();\n        if (selections === null) {\n            return;\n        }\n        let model = editor.getModel();\n        if (model === null) {\n            return;\n        }\n        let commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            let selection = selections[i];\n            if (!selection.isEmpty()) {\n                continue;\n            }\n            let cursor = selection.getStartPosition();\n            let maxColumn = model.getLineMaxColumn(cursor.lineNumber);\n            if (cursor.column >= maxColumn) {\n                if (cursor.lineNumber === model.getLineCount()) {\n                    continue;\n                }\n                // The cursor is at the end of current line and current line is not empty\n                // then we transpose the character before the cursor and the line break if there is any following line.\n                let deleteSelection = new Range(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber + 1, 1);\n                let chars = model.getValueInRange(deleteSelection).split('').reverse().join('');\n                commands.push(new ReplaceCommand(new Selection(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber + 1, 1), chars));\n            }\n            else {\n                let deleteSelection = new Range(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber, cursor.column + 1);\n                let chars = model.getValueInRange(deleteSelection).split('').reverse().join('');\n                commands.push(new ReplaceCommandThatPreservesSelection(deleteSelection, chars, new Selection(cursor.lineNumber, cursor.column + 1, cursor.lineNumber, cursor.column + 1)));\n            }\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, commands);\n        editor.pushUndoStop();\n    }\n}\nexport class AbstractCaseAction extends EditorAction {\n    run(_accessor, editor) {\n        const selections = editor.getSelections();\n        if (selections === null) {\n            return;\n        }\n        const model = editor.getModel();\n        if (model === null) {\n            return;\n        }\n        const wordSeparators = editor.getOption(117 /* wordSeparators */);\n        const textEdits = [];\n        for (const selection of selections) {\n            if (selection.isEmpty()) {\n                const cursor = selection.getStartPosition();\n                const word = editor.getConfiguredWordAtPosition(cursor);\n                if (!word) {\n                    continue;\n                }\n                const wordRange = new Range(cursor.lineNumber, word.startColumn, cursor.lineNumber, word.endColumn);\n                const text = model.getValueInRange(wordRange);\n                textEdits.push(EditOperation.replace(wordRange, this._modifyText(text, wordSeparators)));\n            }\n            else {\n                const text = model.getValueInRange(selection);\n                textEdits.push(EditOperation.replace(selection, this._modifyText(text, wordSeparators)));\n            }\n        }\n        editor.pushUndoStop();\n        editor.executeEdits(this.id, textEdits);\n        editor.pushUndoStop();\n    }\n}\nexport class UpperCaseAction extends AbstractCaseAction {\n    constructor() {\n        super({\n            id: 'editor.action.transformToUppercase',\n            label: nls.localize('editor.transformToUppercase', \"Transform to Uppercase\"),\n            alias: 'Transform to Uppercase',\n            precondition: EditorContextKeys.writable\n        });\n    }\n    _modifyText(text, wordSeparators) {\n        return text.toLocaleUpperCase();\n    }\n}\nexport class LowerCaseAction extends AbstractCaseAction {\n    constructor() {\n        super({\n            id: 'editor.action.transformToLowercase',\n            label: nls.localize('editor.transformToLowercase', \"Transform to Lowercase\"),\n            alias: 'Transform to Lowercase',\n            precondition: EditorContextKeys.writable\n        });\n    }\n    _modifyText(text, wordSeparators) {\n        return text.toLocaleLowerCase();\n    }\n}\nclass BackwardsCompatibleRegExp {\n    constructor(_pattern, _flags) {\n        this._pattern = _pattern;\n        this._flags = _flags;\n        this._actual = null;\n        this._evaluated = false;\n    }\n    get() {\n        if (!this._evaluated) {\n            this._evaluated = true;\n            try {\n                this._actual = new RegExp(this._pattern, this._flags);\n            }\n            catch (err) {\n                // this browser does not support this regular expression\n            }\n        }\n        return this._actual;\n    }\n    isSupported() {\n        return (this.get() !== null);\n    }\n}\nexport class TitleCaseAction extends AbstractCaseAction {\n    constructor() {\n        super({\n            id: 'editor.action.transformToTitlecase',\n            label: nls.localize('editor.transformToTitlecase', \"Transform to Title Case\"),\n            alias: 'Transform to Title Case',\n            precondition: EditorContextKeys.writable\n        });\n    }\n    _modifyText(text, wordSeparators) {\n        const titleBoundary = TitleCaseAction.titleBoundary.get();\n        if (!titleBoundary) {\n            // cannot support this\n            return text;\n        }\n        return text\n            .toLocaleLowerCase()\n            .replace(titleBoundary, (b) => b.toLocaleUpperCase());\n    }\n}\nTitleCaseAction.titleBoundary = new BackwardsCompatibleRegExp('(^|[^\\\\p{L}\\\\p{N}\\']|((^|\\\\P{L})\\'))\\\\p{L}', 'gmu');\nexport class SnakeCaseAction extends AbstractCaseAction {\n    constructor() {\n        super({\n            id: 'editor.action.transformToSnakecase',\n            label: nls.localize('editor.transformToSnakecase', \"Transform to Snake Case\"),\n            alias: 'Transform to Snake Case',\n            precondition: EditorContextKeys.writable\n        });\n    }\n    _modifyText(text, wordSeparators) {\n        const caseBoundary = SnakeCaseAction.caseBoundary.get();\n        const singleLetters = SnakeCaseAction.singleLetters.get();\n        if (!caseBoundary || !singleLetters) {\n            // cannot support this\n            return text;\n        }\n        return (text\n            .replace(caseBoundary, '$1_$2')\n            .replace(singleLetters, '$1_$2$3')\n            .toLocaleLowerCase());\n    }\n}\nSnakeCaseAction.caseBoundary = new BackwardsCompatibleRegExp('(\\\\p{Ll})(\\\\p{Lu})', 'gmu');\nSnakeCaseAction.singleLetters = new BackwardsCompatibleRegExp('(\\\\p{Lu}|\\\\p{N})(\\\\p{Lu})(\\\\p{Ll})', 'gmu');\nregisterEditorAction(CopyLinesUpAction);\nregisterEditorAction(CopyLinesDownAction);\nregisterEditorAction(DuplicateSelectionAction);\nregisterEditorAction(MoveLinesUpAction);\nregisterEditorAction(MoveLinesDownAction);\nregisterEditorAction(SortLinesAscendingAction);\nregisterEditorAction(SortLinesDescendingAction);\nregisterEditorAction(DeleteDuplicateLinesAction);\nregisterEditorAction(TrimTrailingWhitespaceAction);\nregisterEditorAction(DeleteLinesAction);\nregisterEditorAction(IndentLinesAction);\nregisterEditorAction(OutdentLinesAction);\nregisterEditorAction(InsertLineBeforeAction);\nregisterEditorAction(InsertLineAfterAction);\nregisterEditorAction(DeleteAllLeftAction);\nregisterEditorAction(DeleteAllRightAction);\nregisterEditorAction(JoinLinesAction);\nregisterEditorAction(TransposeAction);\nregisterEditorAction(UpperCaseAction);\nregisterEditorAction(LowerCaseAction);\nif (SnakeCaseAction.caseBoundary.isSupported() && SnakeCaseAction.singleLetters.isSupported()) {\n    registerEditorAction(SnakeCaseAction);\n}\nif (TitleCaseAction.titleBoundary.isSupported()) {\n    registerEditorAction(TitleCaseAction);\n}\n"]},"metadata":{},"sourceType":"module"}