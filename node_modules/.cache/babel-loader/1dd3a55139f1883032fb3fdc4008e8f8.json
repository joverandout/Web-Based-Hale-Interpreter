{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { KeyChord } from '../../../../base/common/keyCodes.js';\nimport { EditorAction, registerEditorAction } from '../../../browser/editorExtensions.js';\nimport { Range } from '../../../common/core/range.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { BlockCommentCommand } from './blockCommentCommand.js';\nimport { LineCommentCommand } from './lineCommentCommand.js';\nimport * as nls from '../../../../nls.js';\nimport { MenuId } from '../../../../platform/actions/common/actions.js';\n\nclass CommentLineAction extends EditorAction {\n  constructor(type, opts) {\n    super(opts);\n    this._type = type;\n  }\n\n  run(accessor, editor) {\n    const languageConfigurationService = accessor.get(ILanguageConfigurationService);\n\n    if (!editor.hasModel()) {\n      return;\n    }\n\n    const model = editor.getModel();\n    const commands = [];\n    const modelOptions = model.getOptions();\n    const commentsOptions = editor.getOption(19\n    /* comments */\n    );\n    const selections = editor.getSelections().map((selection, index) => ({\n      selection,\n      index,\n      ignoreFirstLine: false\n    }));\n    selections.sort((a, b) => Range.compareRangesUsingStarts(a.selection, b.selection)); // Remove selections that would result in copying the same line\n\n    let prev = selections[0];\n\n    for (let i = 1; i < selections.length; i++) {\n      const curr = selections[i];\n\n      if (prev.selection.endLineNumber === curr.selection.startLineNumber) {\n        // these two selections would copy the same line\n        if (prev.index < curr.index) {\n          // prev wins\n          curr.ignoreFirstLine = true;\n        } else {\n          // curr wins\n          prev.ignoreFirstLine = true;\n          prev = curr;\n        }\n      }\n    }\n\n    for (const selection of selections) {\n      commands.push(new LineCommentCommand(languageConfigurationService, selection.selection, modelOptions.tabSize, this._type, commentsOptions.insertSpace, commentsOptions.ignoreEmptyLines, selection.ignoreFirstLine));\n    }\n\n    editor.pushUndoStop();\n    editor.executeCommands(this.id, commands);\n    editor.pushUndoStop();\n  }\n\n}\n\nclass ToggleCommentLineAction extends CommentLineAction {\n  constructor() {\n    super(0\n    /* Toggle */\n    , {\n      id: 'editor.action.commentLine',\n      label: nls.localize('comment.line', \"Toggle Line Comment\"),\n      alias: 'Toggle Line Comment',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 2048\n        /* CtrlCmd */\n        | 85\n        /* Slash */\n        ,\n        weight: 100\n        /* EditorContrib */\n\n      },\n      menuOpts: {\n        menuId: MenuId.MenubarEditMenu,\n        group: '5_insert',\n        title: nls.localize({\n          key: 'miToggleLineComment',\n          comment: ['&& denotes a mnemonic']\n        }, \"&&Toggle Line Comment\"),\n        order: 1\n      }\n    });\n  }\n\n}\n\nclass AddLineCommentAction extends CommentLineAction {\n  constructor() {\n    super(1\n    /* ForceAdd */\n    , {\n      id: 'editor.action.addCommentLine',\n      label: nls.localize('comment.line.add', \"Add Line Comment\"),\n      alias: 'Add Line Comment',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048\n        /* CtrlCmd */\n        | 41\n        /* KeyK */\n        , 2048\n        /* CtrlCmd */\n        | 33\n        /* KeyC */\n        ),\n        weight: 100\n        /* EditorContrib */\n\n      }\n    });\n  }\n\n}\n\nclass RemoveLineCommentAction extends CommentLineAction {\n  constructor() {\n    super(2\n    /* ForceRemove */\n    , {\n      id: 'editor.action.removeCommentLine',\n      label: nls.localize('comment.line.remove', \"Remove Line Comment\"),\n      alias: 'Remove Line Comment',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048\n        /* CtrlCmd */\n        | 41\n        /* KeyK */\n        , 2048\n        /* CtrlCmd */\n        | 51\n        /* KeyU */\n        ),\n        weight: 100\n        /* EditorContrib */\n\n      }\n    });\n  }\n\n}\n\nclass BlockCommentAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.blockComment',\n      label: nls.localize('comment.block', \"Toggle Block Comment\"),\n      alias: 'Toggle Block Comment',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 1024\n        /* Shift */\n        | 512\n        /* Alt */\n        | 31\n        /* KeyA */\n        ,\n        linux: {\n          primary: 2048\n          /* CtrlCmd */\n          | 1024\n          /* Shift */\n          | 31\n          /* KeyA */\n\n        },\n        weight: 100\n        /* EditorContrib */\n\n      },\n      menuOpts: {\n        menuId: MenuId.MenubarEditMenu,\n        group: '5_insert',\n        title: nls.localize({\n          key: 'miToggleBlockComment',\n          comment: ['&& denotes a mnemonic']\n        }, \"Toggle &&Block Comment\"),\n        order: 2\n      }\n    });\n  }\n\n  run(accessor, editor) {\n    const languageConfigurationService = accessor.get(ILanguageConfigurationService);\n\n    if (!editor.hasModel()) {\n      return;\n    }\n\n    const commentsOptions = editor.getOption(19\n    /* comments */\n    );\n    const commands = [];\n    const selections = editor.getSelections();\n\n    for (const selection of selections) {\n      commands.push(new BlockCommentCommand(selection, commentsOptions.insertSpace, languageConfigurationService));\n    }\n\n    editor.pushUndoStop();\n    editor.executeCommands(this.id, commands);\n    editor.pushUndoStop();\n  }\n\n}\n\nregisterEditorAction(ToggleCommentLineAction);\nregisterEditorAction(AddLineCommentAction);\nregisterEditorAction(RemoveLineCommentAction);\nregisterEditorAction(BlockCommentAction);","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/contrib/comment/browser/comment.js"],"names":["KeyChord","EditorAction","registerEditorAction","Range","EditorContextKeys","ILanguageConfigurationService","BlockCommentCommand","LineCommentCommand","nls","MenuId","CommentLineAction","constructor","type","opts","_type","run","accessor","editor","languageConfigurationService","get","hasModel","model","getModel","commands","modelOptions","getOptions","commentsOptions","getOption","selections","getSelections","map","selection","index","ignoreFirstLine","sort","a","b","compareRangesUsingStarts","prev","i","length","curr","endLineNumber","startLineNumber","push","tabSize","insertSpace","ignoreEmptyLines","pushUndoStop","executeCommands","id","ToggleCommentLineAction","label","localize","alias","precondition","writable","kbOpts","kbExpr","editorTextFocus","primary","weight","menuOpts","menuId","MenubarEditMenu","group","title","key","comment","order","AddLineCommentAction","RemoveLineCommentAction","BlockCommentAction","linux"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { KeyChord } from '../../../../base/common/keyCodes.js';\nimport { EditorAction, registerEditorAction } from '../../../browser/editorExtensions.js';\nimport { Range } from '../../../common/core/range.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { BlockCommentCommand } from './blockCommentCommand.js';\nimport { LineCommentCommand } from './lineCommentCommand.js';\nimport * as nls from '../../../../nls.js';\nimport { MenuId } from '../../../../platform/actions/common/actions.js';\nclass CommentLineAction extends EditorAction {\n    constructor(type, opts) {\n        super(opts);\n        this._type = type;\n    }\n    run(accessor, editor) {\n        const languageConfigurationService = accessor.get(ILanguageConfigurationService);\n        if (!editor.hasModel()) {\n            return;\n        }\n        const model = editor.getModel();\n        const commands = [];\n        const modelOptions = model.getOptions();\n        const commentsOptions = editor.getOption(19 /* comments */);\n        const selections = editor.getSelections().map((selection, index) => ({ selection, index, ignoreFirstLine: false }));\n        selections.sort((a, b) => Range.compareRangesUsingStarts(a.selection, b.selection));\n        // Remove selections that would result in copying the same line\n        let prev = selections[0];\n        for (let i = 1; i < selections.length; i++) {\n            const curr = selections[i];\n            if (prev.selection.endLineNumber === curr.selection.startLineNumber) {\n                // these two selections would copy the same line\n                if (prev.index < curr.index) {\n                    // prev wins\n                    curr.ignoreFirstLine = true;\n                }\n                else {\n                    // curr wins\n                    prev.ignoreFirstLine = true;\n                    prev = curr;\n                }\n            }\n        }\n        for (const selection of selections) {\n            commands.push(new LineCommentCommand(languageConfigurationService, selection.selection, modelOptions.tabSize, this._type, commentsOptions.insertSpace, commentsOptions.ignoreEmptyLines, selection.ignoreFirstLine));\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, commands);\n        editor.pushUndoStop();\n    }\n}\nclass ToggleCommentLineAction extends CommentLineAction {\n    constructor() {\n        super(0 /* Toggle */, {\n            id: 'editor.action.commentLine',\n            label: nls.localize('comment.line', \"Toggle Line Comment\"),\n            alias: 'Toggle Line Comment',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 2048 /* CtrlCmd */ | 85 /* Slash */,\n                weight: 100 /* EditorContrib */\n            },\n            menuOpts: {\n                menuId: MenuId.MenubarEditMenu,\n                group: '5_insert',\n                title: nls.localize({ key: 'miToggleLineComment', comment: ['&& denotes a mnemonic'] }, \"&&Toggle Line Comment\"),\n                order: 1\n            }\n        });\n    }\n}\nclass AddLineCommentAction extends CommentLineAction {\n    constructor() {\n        super(1 /* ForceAdd */, {\n            id: 'editor.action.addCommentLine',\n            label: nls.localize('comment.line.add', \"Add Line Comment\"),\n            alias: 'Add Line Comment',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* CtrlCmd */ | 41 /* KeyK */, 2048 /* CtrlCmd */ | 33 /* KeyC */),\n                weight: 100 /* EditorContrib */\n            }\n        });\n    }\n}\nclass RemoveLineCommentAction extends CommentLineAction {\n    constructor() {\n        super(2 /* ForceRemove */, {\n            id: 'editor.action.removeCommentLine',\n            label: nls.localize('comment.line.remove', \"Remove Line Comment\"),\n            alias: 'Remove Line Comment',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* CtrlCmd */ | 41 /* KeyK */, 2048 /* CtrlCmd */ | 51 /* KeyU */),\n                weight: 100 /* EditorContrib */\n            }\n        });\n    }\n}\nclass BlockCommentAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.blockComment',\n            label: nls.localize('comment.block', \"Toggle Block Comment\"),\n            alias: 'Toggle Block Comment',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 1024 /* Shift */ | 512 /* Alt */ | 31 /* KeyA */,\n                linux: { primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 31 /* KeyA */ },\n                weight: 100 /* EditorContrib */\n            },\n            menuOpts: {\n                menuId: MenuId.MenubarEditMenu,\n                group: '5_insert',\n                title: nls.localize({ key: 'miToggleBlockComment', comment: ['&& denotes a mnemonic'] }, \"Toggle &&Block Comment\"),\n                order: 2\n            }\n        });\n    }\n    run(accessor, editor) {\n        const languageConfigurationService = accessor.get(ILanguageConfigurationService);\n        if (!editor.hasModel()) {\n            return;\n        }\n        const commentsOptions = editor.getOption(19 /* comments */);\n        const commands = [];\n        const selections = editor.getSelections();\n        for (const selection of selections) {\n            commands.push(new BlockCommentCommand(selection, commentsOptions.insertSpace, languageConfigurationService));\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, commands);\n        editor.pushUndoStop();\n    }\n}\nregisterEditorAction(ToggleCommentLineAction);\nregisterEditorAction(AddLineCommentAction);\nregisterEditorAction(RemoveLineCommentAction);\nregisterEditorAction(BlockCommentAction);\n"]},"metadata":{},"sourceType":"module"}