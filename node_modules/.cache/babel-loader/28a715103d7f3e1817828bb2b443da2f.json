{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { LanguageAgnosticBracketTokens } from './bracketPairsTree/brackets.js';\nimport { lengthAdd, lengthGetColumnCountIfZeroLineCount, lengthZero } from './bracketPairsTree/length.js';\nimport { parseDocument } from './bracketPairsTree/parser.js';\nimport { DenseKeyProvider } from './bracketPairsTree/smallImmutableSet.js';\nimport { TextBufferTokenizer } from './bracketPairsTree/tokenizer.js';\nexport function fixBracketsInLine(tokens, languageConfigurationService) {\n  const denseKeyProvider = new DenseKeyProvider();\n  const bracketTokens = new LanguageAgnosticBracketTokens(denseKeyProvider, languageId => languageConfigurationService.getLanguageConfiguration(languageId));\n  const tokenizer = new TextBufferTokenizer(new StaticTokenizerSource([tokens]), bracketTokens);\n  const node = parseDocument(tokenizer, [], undefined, true);\n  let str = '';\n  const line = tokens.getLineContent();\n\n  function processNode(node, offset) {\n    if (node.kind === 2\n    /* Pair */\n    ) {\n      processNode(node.openingBracket, offset);\n      offset = lengthAdd(offset, node.openingBracket.length);\n\n      if (node.child) {\n        processNode(node.child, offset);\n        offset = lengthAdd(offset, node.child.length);\n      }\n\n      if (node.closingBracket) {\n        processNode(node.closingBracket, offset);\n        offset = lengthAdd(offset, node.closingBracket.length);\n      } else {\n        const singleLangBracketTokens = bracketTokens.getSingleLanguageBracketTokens(node.openingBracket.languageId);\n        const closingTokenText = singleLangBracketTokens.findClosingTokenText(node.openingBracket.bracketIds);\n        str += closingTokenText;\n      }\n    } else if (node.kind === 3\n    /* UnexpectedClosingBracket */\n    ) {// remove the bracket\n    } else if (node.kind === 0\n    /* Text */\n    || node.kind === 1\n    /* Bracket */\n    ) {\n      str += line.substring(lengthGetColumnCountIfZeroLineCount(offset), lengthGetColumnCountIfZeroLineCount(lengthAdd(offset, node.length)));\n    } else if (node.kind === 4\n    /* List */\n    ) {\n      for (const child of node.children) {\n        processNode(child, offset);\n        offset = lengthAdd(offset, child.length);\n      }\n    }\n  }\n\n  processNode(node, lengthZero);\n  return str;\n}\n\nclass StaticTokenizerSource {\n  constructor(lines) {\n    this.lines = lines;\n  }\n\n  getLineCount() {\n    return this.lines.length;\n  }\n\n  getLineLength(lineNumber) {\n    return this.lines[lineNumber - 1].getLineContent().length;\n  }\n\n  getLineTokens(lineNumber) {\n    return this.lines[lineNumber - 1];\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/fixBrackets.js"],"names":["LanguageAgnosticBracketTokens","lengthAdd","lengthGetColumnCountIfZeroLineCount","lengthZero","parseDocument","DenseKeyProvider","TextBufferTokenizer","fixBracketsInLine","tokens","languageConfigurationService","denseKeyProvider","bracketTokens","languageId","getLanguageConfiguration","tokenizer","StaticTokenizerSource","node","undefined","str","line","getLineContent","processNode","offset","kind","openingBracket","length","child","closingBracket","singleLangBracketTokens","getSingleLanguageBracketTokens","closingTokenText","findClosingTokenText","bracketIds","substring","children","constructor","lines","getLineCount","getLineLength","lineNumber","getLineTokens"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { LanguageAgnosticBracketTokens } from './bracketPairsTree/brackets.js';\nimport { lengthAdd, lengthGetColumnCountIfZeroLineCount, lengthZero } from './bracketPairsTree/length.js';\nimport { parseDocument } from './bracketPairsTree/parser.js';\nimport { DenseKeyProvider } from './bracketPairsTree/smallImmutableSet.js';\nimport { TextBufferTokenizer } from './bracketPairsTree/tokenizer.js';\nexport function fixBracketsInLine(tokens, languageConfigurationService) {\n    const denseKeyProvider = new DenseKeyProvider();\n    const bracketTokens = new LanguageAgnosticBracketTokens(denseKeyProvider, (languageId) => languageConfigurationService.getLanguageConfiguration(languageId));\n    const tokenizer = new TextBufferTokenizer(new StaticTokenizerSource([tokens]), bracketTokens);\n    const node = parseDocument(tokenizer, [], undefined, true);\n    let str = '';\n    const line = tokens.getLineContent();\n    function processNode(node, offset) {\n        if (node.kind === 2 /* Pair */) {\n            processNode(node.openingBracket, offset);\n            offset = lengthAdd(offset, node.openingBracket.length);\n            if (node.child) {\n                processNode(node.child, offset);\n                offset = lengthAdd(offset, node.child.length);\n            }\n            if (node.closingBracket) {\n                processNode(node.closingBracket, offset);\n                offset = lengthAdd(offset, node.closingBracket.length);\n            }\n            else {\n                const singleLangBracketTokens = bracketTokens.getSingleLanguageBracketTokens(node.openingBracket.languageId);\n                const closingTokenText = singleLangBracketTokens.findClosingTokenText(node.openingBracket.bracketIds);\n                str += closingTokenText;\n            }\n        }\n        else if (node.kind === 3 /* UnexpectedClosingBracket */) {\n            // remove the bracket\n        }\n        else if (node.kind === 0 /* Text */ || node.kind === 1 /* Bracket */) {\n            str += line.substring(lengthGetColumnCountIfZeroLineCount(offset), lengthGetColumnCountIfZeroLineCount(lengthAdd(offset, node.length)));\n        }\n        else if (node.kind === 4 /* List */) {\n            for (const child of node.children) {\n                processNode(child, offset);\n                offset = lengthAdd(offset, child.length);\n            }\n        }\n    }\n    processNode(node, lengthZero);\n    return str;\n}\nclass StaticTokenizerSource {\n    constructor(lines) {\n        this.lines = lines;\n    }\n    getLineCount() {\n        return this.lines.length;\n    }\n    getLineLength(lineNumber) {\n        return this.lines[lineNumber - 1].getLineContent().length;\n    }\n    getLineTokens(lineNumber) {\n        return this.lines[lineNumber - 1];\n    }\n}\n"]},"metadata":{},"sourceType":"module"}