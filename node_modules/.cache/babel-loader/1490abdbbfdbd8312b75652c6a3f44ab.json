{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { StandardAutoClosingPairConditional } from '../languageConfiguration.js';\nexport class CharacterPairSupport {\n  constructor(config) {\n    if (config.autoClosingPairs) {\n      this._autoClosingPairs = config.autoClosingPairs.map(el => new StandardAutoClosingPairConditional(el));\n    } else if (config.brackets) {\n      this._autoClosingPairs = config.brackets.map(b => new StandardAutoClosingPairConditional({\n        open: b[0],\n        close: b[1]\n      }));\n    } else {\n      this._autoClosingPairs = [];\n    }\n\n    if (config.colorizedBracketPairs) {\n      this._colorizedBracketPairs = filterValidBrackets(config.colorizedBracketPairs.map(b => [b[0], b[1]]));\n    } else if (config.brackets) {\n      this._colorizedBracketPairs = filterValidBrackets(config.brackets.map(b => [b[0], b[1]]) // Many languages set < ... > as bracket pair, even though they also use it as comparison operator.\n      // This leads to problems when colorizing this bracket, so we exclude it by default.\n      // Languages can still override this by configuring `colorizedBracketPairs`\n      // https://github.com/microsoft/vscode/issues/132476\n      .filter(p => !(p[0] === '<' && p[1] === '>')));\n    } else {\n      this._colorizedBracketPairs = [];\n    }\n\n    if (config.__electricCharacterSupport && config.__electricCharacterSupport.docComment) {\n      const docComment = config.__electricCharacterSupport.docComment; // IDocComment is legacy, only partially supported\n\n      this._autoClosingPairs.push(new StandardAutoClosingPairConditional({\n        open: docComment.open,\n        close: docComment.close || ''\n      }));\n    }\n\n    this._autoCloseBefore = typeof config.autoCloseBefore === 'string' ? config.autoCloseBefore : CharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED;\n    this._surroundingPairs = config.surroundingPairs || this._autoClosingPairs;\n  }\n\n  getAutoClosingPairs() {\n    return this._autoClosingPairs;\n  }\n\n  getAutoCloseBeforeSet() {\n    return this._autoCloseBefore;\n  }\n\n  getSurroundingPairs() {\n    return this._surroundingPairs;\n  }\n\n  getColorizedBrackets() {\n    return this._colorizedBracketPairs;\n  }\n\n}\nCharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED = ';:.,=}])> \\n\\t';\n\nfunction filterValidBrackets(bracketPairs) {\n  return bracketPairs.filter(([open, close]) => open !== '' && close !== '');\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/common/languages/supports/characterPair.js"],"names":["StandardAutoClosingPairConditional","CharacterPairSupport","constructor","config","autoClosingPairs","_autoClosingPairs","map","el","brackets","b","open","close","colorizedBracketPairs","_colorizedBracketPairs","filterValidBrackets","filter","p","__electricCharacterSupport","docComment","push","_autoCloseBefore","autoCloseBefore","DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED","_surroundingPairs","surroundingPairs","getAutoClosingPairs","getAutoCloseBeforeSet","getSurroundingPairs","getColorizedBrackets","bracketPairs"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { StandardAutoClosingPairConditional } from '../languageConfiguration.js';\nexport class CharacterPairSupport {\n    constructor(config) {\n        if (config.autoClosingPairs) {\n            this._autoClosingPairs = config.autoClosingPairs.map(el => new StandardAutoClosingPairConditional(el));\n        }\n        else if (config.brackets) {\n            this._autoClosingPairs = config.brackets.map(b => new StandardAutoClosingPairConditional({ open: b[0], close: b[1] }));\n        }\n        else {\n            this._autoClosingPairs = [];\n        }\n        if (config.colorizedBracketPairs) {\n            this._colorizedBracketPairs = filterValidBrackets(config.colorizedBracketPairs.map(b => [b[0], b[1]]));\n        }\n        else if (config.brackets) {\n            this._colorizedBracketPairs = filterValidBrackets(config.brackets\n                .map((b) => [b[0], b[1]])\n                // Many languages set < ... > as bracket pair, even though they also use it as comparison operator.\n                // This leads to problems when colorizing this bracket, so we exclude it by default.\n                // Languages can still override this by configuring `colorizedBracketPairs`\n                // https://github.com/microsoft/vscode/issues/132476\n                .filter((p) => !(p[0] === '<' && p[1] === '>')));\n        }\n        else {\n            this._colorizedBracketPairs = [];\n        }\n        if (config.__electricCharacterSupport && config.__electricCharacterSupport.docComment) {\n            const docComment = config.__electricCharacterSupport.docComment;\n            // IDocComment is legacy, only partially supported\n            this._autoClosingPairs.push(new StandardAutoClosingPairConditional({ open: docComment.open, close: docComment.close || '' }));\n        }\n        this._autoCloseBefore = typeof config.autoCloseBefore === 'string' ? config.autoCloseBefore : CharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED;\n        this._surroundingPairs = config.surroundingPairs || this._autoClosingPairs;\n    }\n    getAutoClosingPairs() {\n        return this._autoClosingPairs;\n    }\n    getAutoCloseBeforeSet() {\n        return this._autoCloseBefore;\n    }\n    getSurroundingPairs() {\n        return this._surroundingPairs;\n    }\n    getColorizedBrackets() {\n        return this._colorizedBracketPairs;\n    }\n}\nCharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED = ';:.,=}])> \\n\\t';\nfunction filterValidBrackets(bracketPairs) {\n    return bracketPairs.filter(([open, close]) => open !== '' && close !== '');\n}\n"]},"metadata":{},"sourceType":"module"}