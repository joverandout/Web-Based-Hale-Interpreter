{"ast":null,"code":"var mysql = require('../');\n\nvar Connection = require('./Connection');\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar Util = require('util');\n\nvar PoolConnection = require('./PoolConnection');\n\nmodule.exports = Pool;\nUtil.inherits(Pool, EventEmitter);\n\nfunction Pool(options) {\n  EventEmitter.call(this);\n  this.config = options.config;\n  this.config.connectionConfig.pool = this;\n  this._acquiringConnections = [];\n  this._allConnections = [];\n  this._freeConnections = [];\n  this._connectionQueue = [];\n  this._closed = false;\n}\n\nPool.prototype.getConnection = function (cb) {\n  if (this._closed) {\n    var err = new Error('Pool is closed.');\n    err.code = 'POOL_CLOSED';\n    process.nextTick(function () {\n      cb(err);\n    });\n    return;\n  }\n\n  var connection;\n  var pool = this;\n\n  if (this._freeConnections.length > 0) {\n    connection = this._freeConnections.shift();\n    this.acquireConnection(connection, cb);\n    return;\n  }\n\n  if (this.config.connectionLimit === 0 || this._allConnections.length < this.config.connectionLimit) {\n    connection = new PoolConnection(this, {\n      config: this.config.newConnectionConfig()\n    });\n\n    this._acquiringConnections.push(connection);\n\n    this._allConnections.push(connection);\n\n    connection.connect({\n      timeout: this.config.acquireTimeout\n    }, function onConnect(err) {\n      spliceConnection(pool._acquiringConnections, connection);\n\n      if (pool._closed) {\n        err = new Error('Pool is closed.');\n        err.code = 'POOL_CLOSED';\n      }\n\n      if (err) {\n        pool._purgeConnection(connection);\n\n        cb(err);\n        return;\n      }\n\n      pool.emit('connection', connection);\n      pool.emit('acquire', connection);\n      cb(null, connection);\n    });\n    return;\n  }\n\n  if (!this.config.waitForConnections) {\n    process.nextTick(function () {\n      var err = new Error('No connections available.');\n      err.code = 'POOL_CONNLIMIT';\n      cb(err);\n    });\n    return;\n  }\n\n  this._enqueueCallback(cb);\n};\n\nPool.prototype.acquireConnection = function acquireConnection(connection, cb) {\n  if (connection._pool !== this) {\n    throw new Error('Connection acquired from wrong pool.');\n  }\n\n  var changeUser = this._needsChangeUser(connection);\n\n  var pool = this;\n\n  this._acquiringConnections.push(connection);\n\n  function onOperationComplete(err) {\n    spliceConnection(pool._acquiringConnections, connection);\n\n    if (pool._closed) {\n      err = new Error('Pool is closed.');\n      err.code = 'POOL_CLOSED';\n    }\n\n    if (err) {\n      pool._connectionQueue.unshift(cb);\n\n      pool._purgeConnection(connection);\n\n      return;\n    }\n\n    if (changeUser) {\n      pool.emit('connection', connection);\n    }\n\n    pool.emit('acquire', connection);\n    cb(null, connection);\n  }\n\n  if (changeUser) {\n    // restore user back to pool configuration\n    connection.config = this.config.newConnectionConfig();\n    connection.changeUser({\n      timeout: this.config.acquireTimeout\n    }, onOperationComplete);\n  } else {\n    // ping connection\n    connection.ping({\n      timeout: this.config.acquireTimeout\n    }, onOperationComplete);\n  }\n};\n\nPool.prototype.releaseConnection = function releaseConnection(connection) {\n  if (this._acquiringConnections.indexOf(connection) !== -1) {\n    // connection is being acquired\n    return;\n  }\n\n  if (connection._pool) {\n    if (connection._pool !== this) {\n      throw new Error('Connection released to wrong pool');\n    }\n\n    if (this._freeConnections.indexOf(connection) !== -1) {\n      // connection already in free connection pool\n      // this won't catch all double-release cases\n      throw new Error('Connection already released');\n    } else {\n      // add connection to end of free queue\n      this._freeConnections.push(connection);\n\n      this.emit('release', connection);\n    }\n  }\n\n  if (this._closed) {\n    // empty the connection queue\n    this._connectionQueue.splice(0).forEach(function (cb) {\n      var err = new Error('Pool is closed.');\n      err.code = 'POOL_CLOSED';\n      process.nextTick(function () {\n        cb(err);\n      });\n    });\n  } else if (this._connectionQueue.length) {\n    // get connection with next waiting callback\n    this.getConnection(this._connectionQueue.shift());\n  }\n};\n\nPool.prototype.end = function (cb) {\n  this._closed = true;\n\n  if (typeof cb !== 'function') {\n    cb = function (err) {\n      if (err) throw err;\n    };\n  }\n\n  var calledBack = false;\n  var waitingClose = 0;\n\n  function onEnd(err) {\n    if (!calledBack && (err || --waitingClose <= 0)) {\n      calledBack = true;\n      cb(err);\n    }\n  }\n\n  while (this._allConnections.length !== 0) {\n    waitingClose++;\n\n    this._purgeConnection(this._allConnections[0], onEnd);\n  }\n\n  if (waitingClose === 0) {\n    process.nextTick(onEnd);\n  }\n};\n\nPool.prototype.query = function (sql, values, cb) {\n  var query = Connection.createQuery(sql, values, cb);\n\n  if (!(typeof sql === 'object' && 'typeCast' in sql)) {\n    query.typeCast = this.config.connectionConfig.typeCast;\n  }\n\n  if (this.config.connectionConfig.trace) {\n    // Long stack trace support\n    query._callSite = new Error();\n  }\n\n  this.getConnection(function (err, conn) {\n    if (err) {\n      query.on('error', function () {});\n      query.end(err);\n      return;\n    } // Release connection based off event\n\n\n    query.once('end', function () {\n      conn.release();\n    });\n    conn.query(query);\n  });\n  return query;\n};\n\nPool.prototype._enqueueCallback = function _enqueueCallback(callback) {\n  if (this.config.queueLimit && this._connectionQueue.length >= this.config.queueLimit) {\n    process.nextTick(function () {\n      var err = new Error('Queue limit reached.');\n      err.code = 'POOL_ENQUEUELIMIT';\n      callback(err);\n    });\n    return;\n  } // Bind to domain, as dequeue will likely occur in a different domain\n\n\n  var cb = process.domain ? process.domain.bind(callback) : callback;\n\n  this._connectionQueue.push(cb);\n\n  this.emit('enqueue');\n};\n\nPool.prototype._needsChangeUser = function _needsChangeUser(connection) {\n  var connConfig = connection.config;\n  var poolConfig = this.config.connectionConfig; // check if changeUser values are different\n\n  return connConfig.user !== poolConfig.user || connConfig.database !== poolConfig.database || connConfig.password !== poolConfig.password || connConfig.charsetNumber !== poolConfig.charsetNumber;\n};\n\nPool.prototype._purgeConnection = function _purgeConnection(connection, callback) {\n  var cb = callback || function () {};\n\n  if (connection.state === 'disconnected') {\n    connection.destroy();\n  }\n\n  this._removeConnection(connection);\n\n  if (connection.state !== 'disconnected' && !connection._protocol._quitSequence) {\n    connection._realEnd(cb);\n\n    return;\n  }\n\n  process.nextTick(cb);\n};\n\nPool.prototype._removeConnection = function (connection) {\n  connection._pool = null; // Remove connection from all connections\n\n  spliceConnection(this._allConnections, connection); // Remove connection from free connections\n\n  spliceConnection(this._freeConnections, connection);\n  this.releaseConnection(connection);\n};\n\nPool.prototype.escape = function (value) {\n  return mysql.escape(value, this.config.connectionConfig.stringifyObjects, this.config.connectionConfig.timezone);\n};\n\nPool.prototype.escapeId = function escapeId(value) {\n  return mysql.escapeId(value, false);\n};\n\nfunction spliceConnection(array, connection) {\n  var index;\n\n  if ((index = array.indexOf(connection)) !== -1) {\n    // Remove connection from all connections\n    array.splice(index, 1);\n  }\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/mysql/lib/Pool.js"],"names":["mysql","require","Connection","EventEmitter","Util","PoolConnection","module","exports","Pool","inherits","options","call","config","connectionConfig","pool","_acquiringConnections","_allConnections","_freeConnections","_connectionQueue","_closed","prototype","getConnection","cb","err","Error","code","process","nextTick","connection","length","shift","acquireConnection","connectionLimit","newConnectionConfig","push","connect","timeout","acquireTimeout","onConnect","spliceConnection","_purgeConnection","emit","waitForConnections","_enqueueCallback","_pool","changeUser","_needsChangeUser","onOperationComplete","unshift","ping","releaseConnection","indexOf","splice","forEach","end","calledBack","waitingClose","onEnd","query","sql","values","createQuery","typeCast","trace","_callSite","conn","on","once","release","callback","queueLimit","domain","bind","connConfig","poolConfig","user","database","password","charsetNumber","state","destroy","_removeConnection","_protocol","_quitSequence","_realEnd","escape","value","stringifyObjects","timezone","escapeId","array","index"],"mappings":"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","sourcesContent":["var mysql          = require('../');\nvar Connection     = require('./Connection');\nvar EventEmitter   = require('events').EventEmitter;\nvar Util           = require('util');\nvar PoolConnection = require('./PoolConnection');\n\nmodule.exports = Pool;\n\nUtil.inherits(Pool, EventEmitter);\nfunction Pool(options) {\n  EventEmitter.call(this);\n  this.config = options.config;\n  this.config.connectionConfig.pool = this;\n\n  this._acquiringConnections = [];\n  this._allConnections       = [];\n  this._freeConnections      = [];\n  this._connectionQueue      = [];\n  this._closed               = false;\n}\n\nPool.prototype.getConnection = function (cb) {\n\n  if (this._closed) {\n    var err = new Error('Pool is closed.');\n    err.code = 'POOL_CLOSED';\n    process.nextTick(function () {\n      cb(err);\n    });\n    return;\n  }\n\n  var connection;\n  var pool = this;\n\n  if (this._freeConnections.length > 0) {\n    connection = this._freeConnections.shift();\n    this.acquireConnection(connection, cb);\n    return;\n  }\n\n  if (this.config.connectionLimit === 0 || this._allConnections.length < this.config.connectionLimit) {\n    connection = new PoolConnection(this, { config: this.config.newConnectionConfig() });\n\n    this._acquiringConnections.push(connection);\n    this._allConnections.push(connection);\n\n    connection.connect({timeout: this.config.acquireTimeout}, function onConnect(err) {\n      spliceConnection(pool._acquiringConnections, connection);\n\n      if (pool._closed) {\n        err = new Error('Pool is closed.');\n        err.code = 'POOL_CLOSED';\n      }\n\n      if (err) {\n        pool._purgeConnection(connection);\n        cb(err);\n        return;\n      }\n\n      pool.emit('connection', connection);\n      pool.emit('acquire', connection);\n      cb(null, connection);\n    });\n    return;\n  }\n\n  if (!this.config.waitForConnections) {\n    process.nextTick(function(){\n      var err = new Error('No connections available.');\n      err.code = 'POOL_CONNLIMIT';\n      cb(err);\n    });\n    return;\n  }\n\n  this._enqueueCallback(cb);\n};\n\nPool.prototype.acquireConnection = function acquireConnection(connection, cb) {\n  if (connection._pool !== this) {\n    throw new Error('Connection acquired from wrong pool.');\n  }\n\n  var changeUser = this._needsChangeUser(connection);\n  var pool       = this;\n\n  this._acquiringConnections.push(connection);\n\n  function onOperationComplete(err) {\n    spliceConnection(pool._acquiringConnections, connection);\n\n    if (pool._closed) {\n      err = new Error('Pool is closed.');\n      err.code = 'POOL_CLOSED';\n    }\n\n    if (err) {\n      pool._connectionQueue.unshift(cb);\n      pool._purgeConnection(connection);\n      return;\n    }\n\n    if (changeUser) {\n      pool.emit('connection', connection);\n    }\n\n    pool.emit('acquire', connection);\n    cb(null, connection);\n  }\n\n  if (changeUser) {\n    // restore user back to pool configuration\n    connection.config = this.config.newConnectionConfig();\n    connection.changeUser({timeout: this.config.acquireTimeout}, onOperationComplete);\n  } else {\n    // ping connection\n    connection.ping({timeout: this.config.acquireTimeout}, onOperationComplete);\n  }\n};\n\nPool.prototype.releaseConnection = function releaseConnection(connection) {\n\n  if (this._acquiringConnections.indexOf(connection) !== -1) {\n    // connection is being acquired\n    return;\n  }\n\n  if (connection._pool) {\n    if (connection._pool !== this) {\n      throw new Error('Connection released to wrong pool');\n    }\n\n    if (this._freeConnections.indexOf(connection) !== -1) {\n      // connection already in free connection pool\n      // this won't catch all double-release cases\n      throw new Error('Connection already released');\n    } else {\n      // add connection to end of free queue\n      this._freeConnections.push(connection);\n      this.emit('release', connection);\n    }\n  }\n\n  if (this._closed) {\n    // empty the connection queue\n    this._connectionQueue.splice(0).forEach(function (cb) {\n      var err = new Error('Pool is closed.');\n      err.code = 'POOL_CLOSED';\n      process.nextTick(function () {\n        cb(err);\n      });\n    });\n  } else if (this._connectionQueue.length) {\n    // get connection with next waiting callback\n    this.getConnection(this._connectionQueue.shift());\n  }\n};\n\nPool.prototype.end = function (cb) {\n  this._closed = true;\n\n  if (typeof cb !== 'function') {\n    cb = function (err) {\n      if (err) throw err;\n    };\n  }\n\n  var calledBack   = false;\n  var waitingClose = 0;\n\n  function onEnd(err) {\n    if (!calledBack && (err || --waitingClose <= 0)) {\n      calledBack = true;\n      cb(err);\n    }\n  }\n\n  while (this._allConnections.length !== 0) {\n    waitingClose++;\n    this._purgeConnection(this._allConnections[0], onEnd);\n  }\n\n  if (waitingClose === 0) {\n    process.nextTick(onEnd);\n  }\n};\n\nPool.prototype.query = function (sql, values, cb) {\n  var query = Connection.createQuery(sql, values, cb);\n\n  if (!(typeof sql === 'object' && 'typeCast' in sql)) {\n    query.typeCast = this.config.connectionConfig.typeCast;\n  }\n\n  if (this.config.connectionConfig.trace) {\n    // Long stack trace support\n    query._callSite = new Error();\n  }\n\n  this.getConnection(function (err, conn) {\n    if (err) {\n      query.on('error', function () {});\n      query.end(err);\n      return;\n    }\n\n    // Release connection based off event\n    query.once('end', function() {\n      conn.release();\n    });\n\n    conn.query(query);\n  });\n\n  return query;\n};\n\nPool.prototype._enqueueCallback = function _enqueueCallback(callback) {\n\n  if (this.config.queueLimit && this._connectionQueue.length >= this.config.queueLimit) {\n    process.nextTick(function () {\n      var err = new Error('Queue limit reached.');\n      err.code = 'POOL_ENQUEUELIMIT';\n      callback(err);\n    });\n    return;\n  }\n\n  // Bind to domain, as dequeue will likely occur in a different domain\n  var cb = process.domain\n    ? process.domain.bind(callback)\n    : callback;\n\n  this._connectionQueue.push(cb);\n  this.emit('enqueue');\n};\n\nPool.prototype._needsChangeUser = function _needsChangeUser(connection) {\n  var connConfig = connection.config;\n  var poolConfig = this.config.connectionConfig;\n\n  // check if changeUser values are different\n  return connConfig.user !== poolConfig.user\n    || connConfig.database !== poolConfig.database\n    || connConfig.password !== poolConfig.password\n    || connConfig.charsetNumber !== poolConfig.charsetNumber;\n};\n\nPool.prototype._purgeConnection = function _purgeConnection(connection, callback) {\n  var cb = callback || function () {};\n\n  if (connection.state === 'disconnected') {\n    connection.destroy();\n  }\n\n  this._removeConnection(connection);\n\n  if (connection.state !== 'disconnected' && !connection._protocol._quitSequence) {\n    connection._realEnd(cb);\n    return;\n  }\n\n  process.nextTick(cb);\n};\n\nPool.prototype._removeConnection = function(connection) {\n  connection._pool = null;\n\n  // Remove connection from all connections\n  spliceConnection(this._allConnections, connection);\n\n  // Remove connection from free connections\n  spliceConnection(this._freeConnections, connection);\n\n  this.releaseConnection(connection);\n};\n\nPool.prototype.escape = function(value) {\n  return mysql.escape(value, this.config.connectionConfig.stringifyObjects, this.config.connectionConfig.timezone);\n};\n\nPool.prototype.escapeId = function escapeId(value) {\n  return mysql.escapeId(value, false);\n};\n\nfunction spliceConnection(array, connection) {\n  var index;\n  if ((index = array.indexOf(connection)) !== -1) {\n    // Remove connection from all connections\n    array.splice(index, 1);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}