{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { TimeoutTimer } from '../../../common/async.js';\nimport { Disposable } from '../../../common/lifecycle.js';\nexport class ScrollbarVisibilityController extends Disposable {\n  constructor(visibility, visibleClassName, invisibleClassName) {\n    super();\n    this._visibility = visibility;\n    this._visibleClassName = visibleClassName;\n    this._invisibleClassName = invisibleClassName;\n    this._domNode = null;\n    this._isVisible = false;\n    this._isNeeded = false;\n    this._rawShouldBeVisible = false;\n    this._shouldBeVisible = false;\n    this._revealTimer = this._register(new TimeoutTimer());\n  }\n\n  setVisibility(visibility) {\n    if (this._visibility !== visibility) {\n      this._visibility = visibility;\n\n      this._updateShouldBeVisible();\n    }\n  } // ----------------- Hide / Reveal\n\n\n  setShouldBeVisible(rawShouldBeVisible) {\n    this._rawShouldBeVisible = rawShouldBeVisible;\n\n    this._updateShouldBeVisible();\n  }\n\n  _applyVisibilitySetting() {\n    if (this._visibility === 2\n    /* Hidden */\n    ) {\n      return false;\n    }\n\n    if (this._visibility === 3\n    /* Visible */\n    ) {\n      return true;\n    }\n\n    return this._rawShouldBeVisible;\n  }\n\n  _updateShouldBeVisible() {\n    const shouldBeVisible = this._applyVisibilitySetting();\n\n    if (this._shouldBeVisible !== shouldBeVisible) {\n      this._shouldBeVisible = shouldBeVisible;\n      this.ensureVisibility();\n    }\n  }\n\n  setIsNeeded(isNeeded) {\n    if (this._isNeeded !== isNeeded) {\n      this._isNeeded = isNeeded;\n      this.ensureVisibility();\n    }\n  }\n\n  setDomNode(domNode) {\n    this._domNode = domNode;\n\n    this._domNode.setClassName(this._invisibleClassName); // Now that the flags & the dom node are in a consistent state, ensure the Hidden/Visible configuration\n\n\n    this.setShouldBeVisible(false);\n  }\n\n  ensureVisibility() {\n    if (!this._isNeeded) {\n      // Nothing to be rendered\n      this._hide(false);\n\n      return;\n    }\n\n    if (this._shouldBeVisible) {\n      this._reveal();\n    } else {\n      this._hide(true);\n    }\n  }\n\n  _reveal() {\n    if (this._isVisible) {\n      return;\n    }\n\n    this._isVisible = true; // The CSS animation doesn't play otherwise\n\n    this._revealTimer.setIfNotSet(() => {\n      if (this._domNode) {\n        this._domNode.setClassName(this._visibleClassName);\n      }\n    }, 0);\n  }\n\n  _hide(withFadeAway) {\n    this._revealTimer.cancel();\n\n    if (!this._isVisible) {\n      return;\n    }\n\n    this._isVisible = false;\n\n    if (this._domNode) {\n      this._domNode.setClassName(this._invisibleClassName + (withFadeAway ? ' fade' : ''));\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/base/browser/ui/scrollbar/scrollbarVisibilityController.js"],"names":["TimeoutTimer","Disposable","ScrollbarVisibilityController","constructor","visibility","visibleClassName","invisibleClassName","_visibility","_visibleClassName","_invisibleClassName","_domNode","_isVisible","_isNeeded","_rawShouldBeVisible","_shouldBeVisible","_revealTimer","_register","setVisibility","_updateShouldBeVisible","setShouldBeVisible","rawShouldBeVisible","_applyVisibilitySetting","shouldBeVisible","ensureVisibility","setIsNeeded","isNeeded","setDomNode","domNode","setClassName","_hide","_reveal","setIfNotSet","withFadeAway","cancel"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { TimeoutTimer } from '../../../common/async.js';\nimport { Disposable } from '../../../common/lifecycle.js';\nexport class ScrollbarVisibilityController extends Disposable {\n    constructor(visibility, visibleClassName, invisibleClassName) {\n        super();\n        this._visibility = visibility;\n        this._visibleClassName = visibleClassName;\n        this._invisibleClassName = invisibleClassName;\n        this._domNode = null;\n        this._isVisible = false;\n        this._isNeeded = false;\n        this._rawShouldBeVisible = false;\n        this._shouldBeVisible = false;\n        this._revealTimer = this._register(new TimeoutTimer());\n    }\n    setVisibility(visibility) {\n        if (this._visibility !== visibility) {\n            this._visibility = visibility;\n            this._updateShouldBeVisible();\n        }\n    }\n    // ----------------- Hide / Reveal\n    setShouldBeVisible(rawShouldBeVisible) {\n        this._rawShouldBeVisible = rawShouldBeVisible;\n        this._updateShouldBeVisible();\n    }\n    _applyVisibilitySetting() {\n        if (this._visibility === 2 /* Hidden */) {\n            return false;\n        }\n        if (this._visibility === 3 /* Visible */) {\n            return true;\n        }\n        return this._rawShouldBeVisible;\n    }\n    _updateShouldBeVisible() {\n        const shouldBeVisible = this._applyVisibilitySetting();\n        if (this._shouldBeVisible !== shouldBeVisible) {\n            this._shouldBeVisible = shouldBeVisible;\n            this.ensureVisibility();\n        }\n    }\n    setIsNeeded(isNeeded) {\n        if (this._isNeeded !== isNeeded) {\n            this._isNeeded = isNeeded;\n            this.ensureVisibility();\n        }\n    }\n    setDomNode(domNode) {\n        this._domNode = domNode;\n        this._domNode.setClassName(this._invisibleClassName);\n        // Now that the flags & the dom node are in a consistent state, ensure the Hidden/Visible configuration\n        this.setShouldBeVisible(false);\n    }\n    ensureVisibility() {\n        if (!this._isNeeded) {\n            // Nothing to be rendered\n            this._hide(false);\n            return;\n        }\n        if (this._shouldBeVisible) {\n            this._reveal();\n        }\n        else {\n            this._hide(true);\n        }\n    }\n    _reveal() {\n        if (this._isVisible) {\n            return;\n        }\n        this._isVisible = true;\n        // The CSS animation doesn't play otherwise\n        this._revealTimer.setIfNotSet(() => {\n            if (this._domNode) {\n                this._domNode.setClassName(this._visibleClassName);\n            }\n        }, 0);\n    }\n    _hide(withFadeAway) {\n        this._revealTimer.cancel();\n        if (!this._isVisible) {\n            return;\n        }\n        this._isVisible = false;\n        if (this._domNode) {\n            this._domNode.setClassName(this._invisibleClassName + (withFadeAway ? ' fade' : ''));\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}