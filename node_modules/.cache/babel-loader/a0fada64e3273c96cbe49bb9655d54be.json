{"ast":null,"code":"/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n// src/basic-languages/scala/scala.ts\nvar conf = {\n  wordPattern: /(unary_[@~!#%^&*()\\-=+\\\\|:<>\\/?]+)|([a-zA-Z_$][\\w$]*?_=)|(`[^`]+`)|([a-zA-Z_$][\\w$]*)/g,\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"]],\n  autoClosingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }],\n  surroundingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*//\\\\s*(?:(?:#?region\\\\b)|(?:<editor-fold\\\\b))\"),\n      end: new RegExp(\"^\\\\s*//\\\\s*(?:(?:#?endregion\\\\b)|(?:</editor-fold>))\")\n    }\n  }\n};\nvar language = {\n  tokenPostfix: \".scala\",\n  keywords: [\"asInstanceOf\", \"catch\", \"class\", \"classOf\", \"def\", \"do\", \"else\", \"extends\", \"finally\", \"for\", \"foreach\", \"forSome\", \"if\", \"import\", \"isInstanceOf\", \"macro\", \"match\", \"new\", \"object\", \"package\", \"return\", \"throw\", \"trait\", \"try\", \"type\", \"until\", \"val\", \"var\", \"while\", \"with\", \"yield\", \"given\", \"enum\", \"then\"],\n  softKeywords: [\"as\", \"export\", \"extension\", \"end\", \"derives\", \"on\"],\n  constants: [\"true\", \"false\", \"null\", \"this\", \"super\"],\n  modifiers: [\"abstract\", \"final\", \"implicit\", \"lazy\", \"override\", \"private\", \"protected\", \"sealed\"],\n  softModifiers: [\"inline\", \"opaque\", \"open\", \"transparent\", \"using\"],\n  name: /(?:[a-z_$][\\w$]*|`[^`]+`)/,\n  type: /(?:[A-Z][\\w$]*)/,\n  symbols: /[=><!~?:&|+\\-*\\/^\\\\%@#]+/,\n  digits: /\\d+(_+\\d+)*/,\n  hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,\n  escapes: /\\\\(?:[btnfr\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  fstring_conv: /[bBhHsScCdoxXeEfgGaAt]|[Tn](?:[HIklMSLNpzZsQ]|[BbhAaCYyjmde]|[RTrDFC])/,\n  tokenizer: {\n    root: [[/\\braw\"\"\"/, {\n      token: \"string.quote\",\n      bracket: \"@open\",\n      next: \"@rawstringt\"\n    }], [/\\braw\"/, {\n      token: \"string.quote\",\n      bracket: \"@open\",\n      next: \"@rawstring\"\n    }], [/\\bs\"\"\"/, {\n      token: \"string.quote\",\n      bracket: \"@open\",\n      next: \"@sstringt\"\n    }], [/\\bs\"/, {\n      token: \"string.quote\",\n      bracket: \"@open\",\n      next: \"@sstring\"\n    }], [/\\bf\"\"\"\"/, {\n      token: \"string.quote\",\n      bracket: \"@open\",\n      next: \"@fstringt\"\n    }], [/\\bf\"/, {\n      token: \"string.quote\",\n      bracket: \"@open\",\n      next: \"@fstring\"\n    }], [/\"\"\"/, {\n      token: \"string.quote\",\n      bracket: \"@open\",\n      next: \"@stringt\"\n    }], [/\"/, {\n      token: \"string.quote\",\n      bracket: \"@open\",\n      next: \"@string\"\n    }], [/(@digits)[eE]([\\-+]?(@digits))?[fFdD]?/, \"number.float\", \"@allowMethod\"], [/(@digits)\\.(@digits)([eE][\\-+]?(@digits))?[fFdD]?/, \"number.float\", \"@allowMethod\"], [/0[xX](@hexdigits)[Ll]?/, \"number.hex\", \"@allowMethod\"], [/(@digits)[fFdD]/, \"number.float\", \"@allowMethod\"], [/(@digits)[lL]?/, \"number\", \"@allowMethod\"], [/\\b_\\*/, \"key\"], [/\\b(_)\\b/, \"keyword\", \"@allowMethod\"], [/\\bimport\\b/, \"keyword\", \"@import\"], [/\\b(case)([ \\t]+)(class)\\b/, [\"keyword.modifier\", \"white\", \"keyword\"]], [/\\bcase\\b/, \"keyword\", \"@case\"], [/\\bva[lr]\\b/, \"keyword\", \"@vardef\"], [/\\b(def)([ \\t]+)((?:unary_)?@symbols|@name(?:_=)|@name)/, [\"keyword\", \"white\", \"identifier\"]], [/@name(?=[ \\t]*:(?!:))/, \"variable\"], [/(\\.)(@name|@symbols)/, [\"operator\", {\n      token: \"@rematch\",\n      next: \"@allowMethod\"\n    }]], [/([{(])(\\s*)(@name(?=\\s*=>))/, [\"@brackets\", \"white\", \"variable\"]], [/@name/, {\n      cases: {\n        \"@keywords\": \"keyword\",\n        \"@softKeywords\": \"keyword\",\n        \"@modifiers\": \"keyword.modifier\",\n        \"@softModifiers\": \"keyword.modifier\",\n        \"@constants\": {\n          token: \"constant\",\n          next: \"@allowMethod\"\n        },\n        \"@default\": {\n          token: \"identifier\",\n          next: \"@allowMethod\"\n        }\n      }\n    }], [/@type/, \"type\", \"@allowMethod\"], {\n      include: \"@whitespace\"\n    }, [/@[a-zA-Z_$][\\w$]*(?:\\.[a-zA-Z_$][\\w$]*)*/, \"annotation\"], [/[{(]/, \"@brackets\"], [/[})]/, \"@brackets\", \"@allowMethod\"], [/\\[/, \"operator.square\"], [/](?!\\s*(?:va[rl]|def|type)\\b)/, \"operator.square\", \"@allowMethod\"], [/]/, \"operator.square\"], [/([=-]>|<-|>:|<:|:>|<%)(?=[\\s\\w()[\\]{},\\.\"'`])/, \"keyword\"], [/@symbols/, \"operator\"], [/[;,\\.]/, \"delimiter\"], [/'[a-zA-Z$][\\w$]*(?!')/, \"attribute.name\"], [/'[^\\\\']'/, \"string\", \"@allowMethod\"], [/(')(@escapes)(')/, [\"string\", \"string.escape\", {\n      token: \"string\",\n      next: \"@allowMethod\"\n    }]], [/'/, \"string.invalid\"]],\n    import: [[/;/, \"delimiter\", \"@pop\"], [/^|$/, \"\", \"@pop\"], [/[ \\t]+/, \"white\"], [/[\\n\\r]+/, \"white\", \"@pop\"], [/\\/\\*/, \"comment\", \"@comment\"], [/@name|@type/, \"type\"], [/[(){}]/, \"@brackets\"], [/[[\\]]/, \"operator.square\"], [/[\\.,]/, \"delimiter\"]],\n    allowMethod: [[/^|$/, \"\", \"@pop\"], [/[ \\t]+/, \"white\"], [/[\\n\\r]+/, \"white\", \"@pop\"], [/\\/\\*/, \"comment\", \"@comment\"], [/(?==>[\\s\\w([{])/, \"keyword\", \"@pop\"], [/(@name|@symbols)(?=[ \\t]*[[({\"'`]|[ \\t]+(?:[+-]?\\.?\\d|\\w))/, {\n      cases: {\n        \"@keywords\": {\n          token: \"keyword\",\n          next: \"@pop\"\n        },\n        \"->|<-|>:|<:|<%\": {\n          token: \"keyword\",\n          next: \"@pop\"\n        },\n        \"@default\": {\n          token: \"@rematch\",\n          next: \"@pop\"\n        }\n      }\n    }], [\"\", \"\", \"@pop\"]],\n    comment: [[/[^\\/*]+/, \"comment\"], [/\\/\\*/, \"comment\", \"@push\"], [/\\*\\//, \"comment\", \"@pop\"], [/[\\/*]/, \"comment\"]],\n    case: [[/\\b_\\*/, \"key\"], [/\\b(_|true|false|null|this|super)\\b/, \"keyword\", \"@allowMethod\"], [/\\bif\\b|=>/, \"keyword\", \"@pop\"], [/`[^`]+`/, \"identifier\", \"@allowMethod\"], [/@name/, \"variable\", \"@allowMethod\"], [/:::?|\\||@(?![a-z_$])/, \"keyword\"], {\n      include: \"@root\"\n    }],\n    vardef: [[/\\b_\\*/, \"key\"], [/\\b(_|true|false|null|this|super)\\b/, \"keyword\"], [/@name/, \"variable\"], [/:::?|\\||@(?![a-z_$])/, \"keyword\"], [/=|:(?!:)/, \"operator\", \"@pop\"], [/$/, \"white\", \"@pop\"], {\n      include: \"@root\"\n    }],\n    string: [[/[^\\\\\"\\n\\r]+/, \"string\"], [/@escapes/, \"string.escape\"], [/\\\\./, \"string.escape.invalid\"], [/\"/, {\n      token: \"string.quote\",\n      bracket: \"@close\",\n      switchTo: \"@allowMethod\"\n    }]],\n    stringt: [[/[^\\\\\"\\n\\r]+/, \"string\"], [/@escapes/, \"string.escape\"], [/\\\\./, \"string.escape.invalid\"], [/\"(?=\"\"\")/, \"string\"], [/\"\"\"/, {\n      token: \"string.quote\",\n      bracket: \"@close\",\n      switchTo: \"@allowMethod\"\n    }], [/\"/, \"string\"]],\n    fstring: [[/@escapes/, \"string.escape\"], [/\"/, {\n      token: \"string.quote\",\n      bracket: \"@close\",\n      switchTo: \"@allowMethod\"\n    }], [/\\$\\$/, \"string\"], [/(\\$)([a-z_]\\w*)/, [\"operator\", \"identifier\"]], [/\\$\\{/, \"operator\", \"@interp\"], [/%%/, \"string\"], [/(%)([\\-#+ 0,(])(\\d+|\\.\\d+|\\d+\\.\\d+)(@fstring_conv)/, [\"metatag\", \"keyword.modifier\", \"number\", \"metatag\"]], [/(%)(\\d+|\\.\\d+|\\d+\\.\\d+)(@fstring_conv)/, [\"metatag\", \"number\", \"metatag\"]], [/(%)([\\-#+ 0,(])(@fstring_conv)/, [\"metatag\", \"keyword.modifier\", \"metatag\"]], [/(%)(@fstring_conv)/, [\"metatag\", \"metatag\"]], [/./, \"string\"]],\n    fstringt: [[/@escapes/, \"string.escape\"], [/\"(?=\"\"\")/, \"string\"], [/\"\"\"/, {\n      token: \"string.quote\",\n      bracket: \"@close\",\n      switchTo: \"@allowMethod\"\n    }], [/\\$\\$/, \"string\"], [/(\\$)([a-z_]\\w*)/, [\"operator\", \"identifier\"]], [/\\$\\{/, \"operator\", \"@interp\"], [/%%/, \"string\"], [/(%)([\\-#+ 0,(])(\\d+|\\.\\d+|\\d+\\.\\d+)(@fstring_conv)/, [\"metatag\", \"keyword.modifier\", \"number\", \"metatag\"]], [/(%)(\\d+|\\.\\d+|\\d+\\.\\d+)(@fstring_conv)/, [\"metatag\", \"number\", \"metatag\"]], [/(%)([\\-#+ 0,(])(@fstring_conv)/, [\"metatag\", \"keyword.modifier\", \"metatag\"]], [/(%)(@fstring_conv)/, [\"metatag\", \"metatag\"]], [/./, \"string\"]],\n    sstring: [[/@escapes/, \"string.escape\"], [/\"/, {\n      token: \"string.quote\",\n      bracket: \"@close\",\n      switchTo: \"@allowMethod\"\n    }], [/\\$\\$/, \"string\"], [/(\\$)([a-z_]\\w*)/, [\"operator\", \"identifier\"]], [/\\$\\{/, \"operator\", \"@interp\"], [/./, \"string\"]],\n    sstringt: [[/@escapes/, \"string.escape\"], [/\"(?=\"\"\")/, \"string\"], [/\"\"\"/, {\n      token: \"string.quote\",\n      bracket: \"@close\",\n      switchTo: \"@allowMethod\"\n    }], [/\\$\\$/, \"string\"], [/(\\$)([a-z_]\\w*)/, [\"operator\", \"identifier\"]], [/\\$\\{/, \"operator\", \"@interp\"], [/./, \"string\"]],\n    interp: [[/{/, \"operator\", \"@push\"], [/}/, \"operator\", \"@pop\"], {\n      include: \"@root\"\n    }],\n    rawstring: [[/[^\"]/, \"string\"], [/\"/, {\n      token: \"string.quote\",\n      bracket: \"@close\",\n      switchTo: \"@allowMethod\"\n    }]],\n    rawstringt: [[/[^\"]/, \"string\"], [/\"(?=\"\"\")/, \"string\"], [/\"\"\"/, {\n      token: \"string.quote\",\n      bracket: \"@close\",\n      switchTo: \"@allowMethod\"\n    }], [/\"/, \"string\"]],\n    whitespace: [[/[ \\t\\r\\n]+/, \"white\"], [/\\/\\*/, \"comment\", \"@comment\"], [/\\/\\/.*$/, \"comment\"]]\n  }\n};\nexport { conf, language };","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/basic-languages/scala/scala.js"],"names":["conf","wordPattern","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","folding","markers","start","RegExp","end","language","tokenPostfix","keywords","softKeywords","constants","modifiers","softModifiers","name","type","symbols","digits","hexdigits","escapes","fstring_conv","tokenizer","root","token","bracket","next","cases","include","import","allowMethod","comment","case","vardef","string","switchTo","stringt","fstring","fstringt","sstring","sstringt","interp","rawstring","rawstringt","whitespace"],"mappings":"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","sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/scala/scala.ts\nvar conf = {\n  wordPattern: /(unary_[@~!#%^&*()\\-=+\\\\|:<>\\/?]+)|([a-zA-Z_$][\\w$]*?_=)|(`[^`]+`)|([a-zA-Z_$][\\w$]*)/g,\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"]\n  ],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" }\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" }\n  ],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*//\\\\s*(?:(?:#?region\\\\b)|(?:<editor-fold\\\\b))\"),\n      end: new RegExp(\"^\\\\s*//\\\\s*(?:(?:#?endregion\\\\b)|(?:</editor-fold>))\")\n    }\n  }\n};\nvar language = {\n  tokenPostfix: \".scala\",\n  keywords: [\n    \"asInstanceOf\",\n    \"catch\",\n    \"class\",\n    \"classOf\",\n    \"def\",\n    \"do\",\n    \"else\",\n    \"extends\",\n    \"finally\",\n    \"for\",\n    \"foreach\",\n    \"forSome\",\n    \"if\",\n    \"import\",\n    \"isInstanceOf\",\n    \"macro\",\n    \"match\",\n    \"new\",\n    \"object\",\n    \"package\",\n    \"return\",\n    \"throw\",\n    \"trait\",\n    \"try\",\n    \"type\",\n    \"until\",\n    \"val\",\n    \"var\",\n    \"while\",\n    \"with\",\n    \"yield\",\n    \"given\",\n    \"enum\",\n    \"then\"\n  ],\n  softKeywords: [\"as\", \"export\", \"extension\", \"end\", \"derives\", \"on\"],\n  constants: [\"true\", \"false\", \"null\", \"this\", \"super\"],\n  modifiers: [\n    \"abstract\",\n    \"final\",\n    \"implicit\",\n    \"lazy\",\n    \"override\",\n    \"private\",\n    \"protected\",\n    \"sealed\"\n  ],\n  softModifiers: [\"inline\", \"opaque\", \"open\", \"transparent\", \"using\"],\n  name: /(?:[a-z_$][\\w$]*|`[^`]+`)/,\n  type: /(?:[A-Z][\\w$]*)/,\n  symbols: /[=><!~?:&|+\\-*\\/^\\\\%@#]+/,\n  digits: /\\d+(_+\\d+)*/,\n  hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,\n  escapes: /\\\\(?:[btnfr\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  fstring_conv: /[bBhHsScCdoxXeEfgGaAt]|[Tn](?:[HIklMSLNpzZsQ]|[BbhAaCYyjmde]|[RTrDFC])/,\n  tokenizer: {\n    root: [\n      [/\\braw\"\"\"/, { token: \"string.quote\", bracket: \"@open\", next: \"@rawstringt\" }],\n      [/\\braw\"/, { token: \"string.quote\", bracket: \"@open\", next: \"@rawstring\" }],\n      [/\\bs\"\"\"/, { token: \"string.quote\", bracket: \"@open\", next: \"@sstringt\" }],\n      [/\\bs\"/, { token: \"string.quote\", bracket: \"@open\", next: \"@sstring\" }],\n      [/\\bf\"\"\"\"/, { token: \"string.quote\", bracket: \"@open\", next: \"@fstringt\" }],\n      [/\\bf\"/, { token: \"string.quote\", bracket: \"@open\", next: \"@fstring\" }],\n      [/\"\"\"/, { token: \"string.quote\", bracket: \"@open\", next: \"@stringt\" }],\n      [/\"/, { token: \"string.quote\", bracket: \"@open\", next: \"@string\" }],\n      [/(@digits)[eE]([\\-+]?(@digits))?[fFdD]?/, \"number.float\", \"@allowMethod\"],\n      [/(@digits)\\.(@digits)([eE][\\-+]?(@digits))?[fFdD]?/, \"number.float\", \"@allowMethod\"],\n      [/0[xX](@hexdigits)[Ll]?/, \"number.hex\", \"@allowMethod\"],\n      [/(@digits)[fFdD]/, \"number.float\", \"@allowMethod\"],\n      [/(@digits)[lL]?/, \"number\", \"@allowMethod\"],\n      [/\\b_\\*/, \"key\"],\n      [/\\b(_)\\b/, \"keyword\", \"@allowMethod\"],\n      [/\\bimport\\b/, \"keyword\", \"@import\"],\n      [/\\b(case)([ \\t]+)(class)\\b/, [\"keyword.modifier\", \"white\", \"keyword\"]],\n      [/\\bcase\\b/, \"keyword\", \"@case\"],\n      [/\\bva[lr]\\b/, \"keyword\", \"@vardef\"],\n      [\n        /\\b(def)([ \\t]+)((?:unary_)?@symbols|@name(?:_=)|@name)/,\n        [\"keyword\", \"white\", \"identifier\"]\n      ],\n      [/@name(?=[ \\t]*:(?!:))/, \"variable\"],\n      [/(\\.)(@name|@symbols)/, [\"operator\", { token: \"@rematch\", next: \"@allowMethod\" }]],\n      [/([{(])(\\s*)(@name(?=\\s*=>))/, [\"@brackets\", \"white\", \"variable\"]],\n      [\n        /@name/,\n        {\n          cases: {\n            \"@keywords\": \"keyword\",\n            \"@softKeywords\": \"keyword\",\n            \"@modifiers\": \"keyword.modifier\",\n            \"@softModifiers\": \"keyword.modifier\",\n            \"@constants\": {\n              token: \"constant\",\n              next: \"@allowMethod\"\n            },\n            \"@default\": {\n              token: \"identifier\",\n              next: \"@allowMethod\"\n            }\n          }\n        }\n      ],\n      [/@type/, \"type\", \"@allowMethod\"],\n      { include: \"@whitespace\" },\n      [/@[a-zA-Z_$][\\w$]*(?:\\.[a-zA-Z_$][\\w$]*)*/, \"annotation\"],\n      [/[{(]/, \"@brackets\"],\n      [/[})]/, \"@brackets\", \"@allowMethod\"],\n      [/\\[/, \"operator.square\"],\n      [/](?!\\s*(?:va[rl]|def|type)\\b)/, \"operator.square\", \"@allowMethod\"],\n      [/]/, \"operator.square\"],\n      [/([=-]>|<-|>:|<:|:>|<%)(?=[\\s\\w()[\\]{},\\.\"'`])/, \"keyword\"],\n      [/@symbols/, \"operator\"],\n      [/[;,\\.]/, \"delimiter\"],\n      [/'[a-zA-Z$][\\w$]*(?!')/, \"attribute.name\"],\n      [/'[^\\\\']'/, \"string\", \"@allowMethod\"],\n      [/(')(@escapes)(')/, [\"string\", \"string.escape\", { token: \"string\", next: \"@allowMethod\" }]],\n      [/'/, \"string.invalid\"]\n    ],\n    import: [\n      [/;/, \"delimiter\", \"@pop\"],\n      [/^|$/, \"\", \"@pop\"],\n      [/[ \\t]+/, \"white\"],\n      [/[\\n\\r]+/, \"white\", \"@pop\"],\n      [/\\/\\*/, \"comment\", \"@comment\"],\n      [/@name|@type/, \"type\"],\n      [/[(){}]/, \"@brackets\"],\n      [/[[\\]]/, \"operator.square\"],\n      [/[\\.,]/, \"delimiter\"]\n    ],\n    allowMethod: [\n      [/^|$/, \"\", \"@pop\"],\n      [/[ \\t]+/, \"white\"],\n      [/[\\n\\r]+/, \"white\", \"@pop\"],\n      [/\\/\\*/, \"comment\", \"@comment\"],\n      [/(?==>[\\s\\w([{])/, \"keyword\", \"@pop\"],\n      [\n        /(@name|@symbols)(?=[ \\t]*[[({\"'`]|[ \\t]+(?:[+-]?\\.?\\d|\\w))/,\n        {\n          cases: {\n            \"@keywords\": { token: \"keyword\", next: \"@pop\" },\n            \"->|<-|>:|<:|<%\": { token: \"keyword\", next: \"@pop\" },\n            \"@default\": { token: \"@rematch\", next: \"@pop\" }\n          }\n        }\n      ],\n      [\"\", \"\", \"@pop\"]\n    ],\n    comment: [\n      [/[^\\/*]+/, \"comment\"],\n      [/\\/\\*/, \"comment\", \"@push\"],\n      [/\\*\\//, \"comment\", \"@pop\"],\n      [/[\\/*]/, \"comment\"]\n    ],\n    case: [\n      [/\\b_\\*/, \"key\"],\n      [/\\b(_|true|false|null|this|super)\\b/, \"keyword\", \"@allowMethod\"],\n      [/\\bif\\b|=>/, \"keyword\", \"@pop\"],\n      [/`[^`]+`/, \"identifier\", \"@allowMethod\"],\n      [/@name/, \"variable\", \"@allowMethod\"],\n      [/:::?|\\||@(?![a-z_$])/, \"keyword\"],\n      { include: \"@root\" }\n    ],\n    vardef: [\n      [/\\b_\\*/, \"key\"],\n      [/\\b(_|true|false|null|this|super)\\b/, \"keyword\"],\n      [/@name/, \"variable\"],\n      [/:::?|\\||@(?![a-z_$])/, \"keyword\"],\n      [/=|:(?!:)/, \"operator\", \"@pop\"],\n      [/$/, \"white\", \"@pop\"],\n      { include: \"@root\" }\n    ],\n    string: [\n      [/[^\\\\\"\\n\\r]+/, \"string\"],\n      [/@escapes/, \"string.escape\"],\n      [/\\\\./, \"string.escape.invalid\"],\n      [\n        /\"/,\n        {\n          token: \"string.quote\",\n          bracket: \"@close\",\n          switchTo: \"@allowMethod\"\n        }\n      ]\n    ],\n    stringt: [\n      [/[^\\\\\"\\n\\r]+/, \"string\"],\n      [/@escapes/, \"string.escape\"],\n      [/\\\\./, \"string.escape.invalid\"],\n      [/\"(?=\"\"\")/, \"string\"],\n      [\n        /\"\"\"/,\n        {\n          token: \"string.quote\",\n          bracket: \"@close\",\n          switchTo: \"@allowMethod\"\n        }\n      ],\n      [/\"/, \"string\"]\n    ],\n    fstring: [\n      [/@escapes/, \"string.escape\"],\n      [\n        /\"/,\n        {\n          token: \"string.quote\",\n          bracket: \"@close\",\n          switchTo: \"@allowMethod\"\n        }\n      ],\n      [/\\$\\$/, \"string\"],\n      [/(\\$)([a-z_]\\w*)/, [\"operator\", \"identifier\"]],\n      [/\\$\\{/, \"operator\", \"@interp\"],\n      [/%%/, \"string\"],\n      [\n        /(%)([\\-#+ 0,(])(\\d+|\\.\\d+|\\d+\\.\\d+)(@fstring_conv)/,\n        [\"metatag\", \"keyword.modifier\", \"number\", \"metatag\"]\n      ],\n      [/(%)(\\d+|\\.\\d+|\\d+\\.\\d+)(@fstring_conv)/, [\"metatag\", \"number\", \"metatag\"]],\n      [/(%)([\\-#+ 0,(])(@fstring_conv)/, [\"metatag\", \"keyword.modifier\", \"metatag\"]],\n      [/(%)(@fstring_conv)/, [\"metatag\", \"metatag\"]],\n      [/./, \"string\"]\n    ],\n    fstringt: [\n      [/@escapes/, \"string.escape\"],\n      [/\"(?=\"\"\")/, \"string\"],\n      [\n        /\"\"\"/,\n        {\n          token: \"string.quote\",\n          bracket: \"@close\",\n          switchTo: \"@allowMethod\"\n        }\n      ],\n      [/\\$\\$/, \"string\"],\n      [/(\\$)([a-z_]\\w*)/, [\"operator\", \"identifier\"]],\n      [/\\$\\{/, \"operator\", \"@interp\"],\n      [/%%/, \"string\"],\n      [\n        /(%)([\\-#+ 0,(])(\\d+|\\.\\d+|\\d+\\.\\d+)(@fstring_conv)/,\n        [\"metatag\", \"keyword.modifier\", \"number\", \"metatag\"]\n      ],\n      [/(%)(\\d+|\\.\\d+|\\d+\\.\\d+)(@fstring_conv)/, [\"metatag\", \"number\", \"metatag\"]],\n      [/(%)([\\-#+ 0,(])(@fstring_conv)/, [\"metatag\", \"keyword.modifier\", \"metatag\"]],\n      [/(%)(@fstring_conv)/, [\"metatag\", \"metatag\"]],\n      [/./, \"string\"]\n    ],\n    sstring: [\n      [/@escapes/, \"string.escape\"],\n      [\n        /\"/,\n        {\n          token: \"string.quote\",\n          bracket: \"@close\",\n          switchTo: \"@allowMethod\"\n        }\n      ],\n      [/\\$\\$/, \"string\"],\n      [/(\\$)([a-z_]\\w*)/, [\"operator\", \"identifier\"]],\n      [/\\$\\{/, \"operator\", \"@interp\"],\n      [/./, \"string\"]\n    ],\n    sstringt: [\n      [/@escapes/, \"string.escape\"],\n      [/\"(?=\"\"\")/, \"string\"],\n      [\n        /\"\"\"/,\n        {\n          token: \"string.quote\",\n          bracket: \"@close\",\n          switchTo: \"@allowMethod\"\n        }\n      ],\n      [/\\$\\$/, \"string\"],\n      [/(\\$)([a-z_]\\w*)/, [\"operator\", \"identifier\"]],\n      [/\\$\\{/, \"operator\", \"@interp\"],\n      [/./, \"string\"]\n    ],\n    interp: [[/{/, \"operator\", \"@push\"], [/}/, \"operator\", \"@pop\"], { include: \"@root\" }],\n    rawstring: [\n      [/[^\"]/, \"string\"],\n      [\n        /\"/,\n        {\n          token: \"string.quote\",\n          bracket: \"@close\",\n          switchTo: \"@allowMethod\"\n        }\n      ]\n    ],\n    rawstringt: [\n      [/[^\"]/, \"string\"],\n      [/\"(?=\"\"\")/, \"string\"],\n      [\n        /\"\"\"/,\n        {\n          token: \"string.quote\",\n          bracket: \"@close\",\n          switchTo: \"@allowMethod\"\n        }\n      ],\n      [/\"/, \"string\"]\n    ],\n    whitespace: [\n      [/[ \\t\\r\\n]+/, \"white\"],\n      [/\\/\\*/, \"comment\", \"@comment\"],\n      [/\\/\\/.*$/, \"comment\"]\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"]},"metadata":{},"sourceType":"module"}