{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { DragAndDropData, StaticDND } from '../../dnd.js';\nimport { $, addDisposableListener, append, clearNode, createStyleSheet, getDomNodePagePosition, hasParentWithClass } from '../../dom.js';\nimport { DomEmitter } from '../../event.js';\nimport { StandardKeyboardEvent } from '../../keyboardEvent.js';\nimport { ElementsDragAndDropData } from '../list/listView.js';\nimport { DefaultKeyboardNavigationDelegate, isInputElement, isMonacoEditor, List, MouseController } from '../list/listWidget.js';\nimport { getVisibleState, isFilterResult } from './indexTreeModel.js';\nimport { TreeMouseEventTarget } from './tree.js';\nimport { distinct, equals, range } from '../../../common/arrays.js';\nimport { disposableTimeout } from '../../../common/async.js';\nimport { Codicon } from '../../../common/codicons.js';\nimport { SetMap } from '../../../common/collections.js';\nimport { Emitter, Event, EventBufferer, Relay } from '../../../common/event.js';\nimport { fuzzyScore, FuzzyScore } from '../../../common/filters.js';\nimport { Disposable, DisposableStore, dispose, toDisposable } from '../../../common/lifecycle.js';\nimport { clamp } from '../../../common/numbers.js';\nimport { isMacintosh } from '../../../common/platform.js';\nimport './media/tree.css';\nimport { localize } from '../../../../nls.js';\n\nclass TreeElementsDragAndDropData extends ElementsDragAndDropData {\n  constructor(data) {\n    super(data.elements.map(node => node.element));\n    this.data = data;\n  }\n\n}\n\nfunction asTreeDragAndDropData(data) {\n  if (data instanceof ElementsDragAndDropData) {\n    return new TreeElementsDragAndDropData(data);\n  }\n\n  return data;\n}\n\nclass TreeNodeListDragAndDrop {\n  constructor(modelProvider, dnd) {\n    this.modelProvider = modelProvider;\n    this.dnd = dnd;\n    this.autoExpandDisposable = Disposable.None;\n  }\n\n  getDragURI(node) {\n    return this.dnd.getDragURI(node.element);\n  }\n\n  getDragLabel(nodes, originalEvent) {\n    if (this.dnd.getDragLabel) {\n      return this.dnd.getDragLabel(nodes.map(node => node.element), originalEvent);\n    }\n\n    return undefined;\n  }\n\n  onDragStart(data, originalEvent) {\n    if (this.dnd.onDragStart) {\n      this.dnd.onDragStart(asTreeDragAndDropData(data), originalEvent);\n    }\n  }\n\n  onDragOver(data, targetNode, targetIndex, originalEvent, raw = true) {\n    const result = this.dnd.onDragOver(asTreeDragAndDropData(data), targetNode && targetNode.element, targetIndex, originalEvent);\n    const didChangeAutoExpandNode = this.autoExpandNode !== targetNode;\n\n    if (didChangeAutoExpandNode) {\n      this.autoExpandDisposable.dispose();\n      this.autoExpandNode = targetNode;\n    }\n\n    if (typeof targetNode === 'undefined') {\n      return result;\n    }\n\n    if (didChangeAutoExpandNode && typeof result !== 'boolean' && result.autoExpand) {\n      this.autoExpandDisposable = disposableTimeout(() => {\n        const model = this.modelProvider();\n        const ref = model.getNodeLocation(targetNode);\n\n        if (model.isCollapsed(ref)) {\n          model.setCollapsed(ref, false);\n        }\n\n        this.autoExpandNode = undefined;\n      }, 500);\n    }\n\n    if (typeof result === 'boolean' || !result.accept || typeof result.bubble === 'undefined' || result.feedback) {\n      if (!raw) {\n        const accept = typeof result === 'boolean' ? result : result.accept;\n        const effect = typeof result === 'boolean' ? undefined : result.effect;\n        return {\n          accept,\n          effect,\n          feedback: [targetIndex]\n        };\n      }\n\n      return result;\n    }\n\n    if (result.bubble === 1\n    /* Up */\n    ) {\n      const model = this.modelProvider();\n      const ref = model.getNodeLocation(targetNode);\n      const parentRef = model.getParentNodeLocation(ref);\n      const parentNode = model.getNode(parentRef);\n      const parentIndex = parentRef && model.getListIndex(parentRef);\n      return this.onDragOver(data, parentNode, parentIndex, originalEvent, false);\n    }\n\n    const model = this.modelProvider();\n    const ref = model.getNodeLocation(targetNode);\n    const start = model.getListIndex(ref);\n    const length = model.getListRenderCount(ref);\n    return Object.assign(Object.assign({}, result), {\n      feedback: range(start, start + length)\n    });\n  }\n\n  drop(data, targetNode, targetIndex, originalEvent) {\n    this.autoExpandDisposable.dispose();\n    this.autoExpandNode = undefined;\n    this.dnd.drop(asTreeDragAndDropData(data), targetNode && targetNode.element, targetIndex, originalEvent);\n  }\n\n  onDragEnd(originalEvent) {\n    if (this.dnd.onDragEnd) {\n      this.dnd.onDragEnd(originalEvent);\n    }\n  }\n\n}\n\nfunction asListOptions(modelProvider, options) {\n  return options && Object.assign(Object.assign({}, options), {\n    identityProvider: options.identityProvider && {\n      getId(el) {\n        return options.identityProvider.getId(el.element);\n      }\n\n    },\n    dnd: options.dnd && new TreeNodeListDragAndDrop(modelProvider, options.dnd),\n    multipleSelectionController: options.multipleSelectionController && {\n      isSelectionSingleChangeEvent(e) {\n        return options.multipleSelectionController.isSelectionSingleChangeEvent(Object.assign(Object.assign({}, e), {\n          element: e.element\n        }));\n      },\n\n      isSelectionRangeChangeEvent(e) {\n        return options.multipleSelectionController.isSelectionRangeChangeEvent(Object.assign(Object.assign({}, e), {\n          element: e.element\n        }));\n      }\n\n    },\n    accessibilityProvider: options.accessibilityProvider && Object.assign(Object.assign({}, options.accessibilityProvider), {\n      getSetSize(node) {\n        const model = modelProvider();\n        const ref = model.getNodeLocation(node);\n        const parentRef = model.getParentNodeLocation(ref);\n        const parentNode = model.getNode(parentRef);\n        return parentNode.visibleChildrenCount;\n      },\n\n      getPosInSet(node) {\n        return node.visibleChildIndex + 1;\n      },\n\n      isChecked: options.accessibilityProvider && options.accessibilityProvider.isChecked ? node => {\n        return options.accessibilityProvider.isChecked(node.element);\n      } : undefined,\n      getRole: options.accessibilityProvider && options.accessibilityProvider.getRole ? node => {\n        return options.accessibilityProvider.getRole(node.element);\n      } : () => 'treeitem',\n\n      getAriaLabel(e) {\n        return options.accessibilityProvider.getAriaLabel(e.element);\n      },\n\n      getWidgetAriaLabel() {\n        return options.accessibilityProvider.getWidgetAriaLabel();\n      },\n\n      getWidgetRole: options.accessibilityProvider && options.accessibilityProvider.getWidgetRole ? () => options.accessibilityProvider.getWidgetRole() : () => 'tree',\n      getAriaLevel: options.accessibilityProvider && options.accessibilityProvider.getAriaLevel ? node => options.accessibilityProvider.getAriaLevel(node.element) : node => {\n        return node.depth;\n      },\n      getActiveDescendantId: options.accessibilityProvider.getActiveDescendantId && (node => {\n        return options.accessibilityProvider.getActiveDescendantId(node.element);\n      })\n    }),\n    keyboardNavigationLabelProvider: options.keyboardNavigationLabelProvider && Object.assign(Object.assign({}, options.keyboardNavigationLabelProvider), {\n      getKeyboardNavigationLabel(node) {\n        return options.keyboardNavigationLabelProvider.getKeyboardNavigationLabel(node.element);\n      }\n\n    }),\n    enableKeyboardNavigation: options.simpleKeyboardNavigation\n  });\n}\n\nexport class ComposedTreeDelegate {\n  constructor(delegate) {\n    this.delegate = delegate;\n  }\n\n  getHeight(element) {\n    return this.delegate.getHeight(element.element);\n  }\n\n  getTemplateId(element) {\n    return this.delegate.getTemplateId(element.element);\n  }\n\n  hasDynamicHeight(element) {\n    return !!this.delegate.hasDynamicHeight && this.delegate.hasDynamicHeight(element.element);\n  }\n\n  setDynamicHeight(element, height) {\n    if (this.delegate.setDynamicHeight) {\n      this.delegate.setDynamicHeight(element.element, height);\n    }\n  }\n\n}\nexport var RenderIndentGuides;\n\n(function (RenderIndentGuides) {\n  RenderIndentGuides[\"None\"] = \"none\";\n  RenderIndentGuides[\"OnHover\"] = \"onHover\";\n  RenderIndentGuides[\"Always\"] = \"always\";\n})(RenderIndentGuides || (RenderIndentGuides = {}));\n\nclass EventCollection {\n  constructor(onDidChange, _elements = []) {\n    this._elements = _elements;\n    this.onDidChange = Event.forEach(onDidChange, elements => this._elements = elements);\n  }\n\n  get elements() {\n    return this._elements;\n  }\n\n}\n\nclass TreeRenderer {\n  constructor(renderer, modelProvider, onDidChangeCollapseState, activeNodes, options = {}) {\n    this.renderer = renderer;\n    this.modelProvider = modelProvider;\n    this.activeNodes = activeNodes;\n    this.renderedElements = new Map();\n    this.renderedNodes = new Map();\n    this.indent = TreeRenderer.DefaultIndent;\n    this.hideTwistiesOfChildlessElements = false;\n    this.shouldRenderIndentGuides = false;\n    this.renderedIndentGuides = new SetMap();\n    this.activeIndentNodes = new Set();\n    this.indentGuidesDisposable = Disposable.None;\n    this.disposables = new DisposableStore();\n    this.templateId = renderer.templateId;\n    this.updateOptions(options);\n    Event.map(onDidChangeCollapseState, e => e.node)(this.onDidChangeNodeTwistieState, this, this.disposables);\n\n    if (renderer.onDidChangeTwistieState) {\n      renderer.onDidChangeTwistieState(this.onDidChangeTwistieState, this, this.disposables);\n    }\n  }\n\n  updateOptions(options = {}) {\n    if (typeof options.indent !== 'undefined') {\n      this.indent = clamp(options.indent, 0, 40);\n    }\n\n    if (typeof options.renderIndentGuides !== 'undefined') {\n      const shouldRenderIndentGuides = options.renderIndentGuides !== RenderIndentGuides.None;\n\n      if (shouldRenderIndentGuides !== this.shouldRenderIndentGuides) {\n        this.shouldRenderIndentGuides = shouldRenderIndentGuides;\n        this.indentGuidesDisposable.dispose();\n\n        if (shouldRenderIndentGuides) {\n          const disposables = new DisposableStore();\n          this.activeNodes.onDidChange(this._onDidChangeActiveNodes, this, disposables);\n          this.indentGuidesDisposable = disposables;\n\n          this._onDidChangeActiveNodes(this.activeNodes.elements);\n        }\n      }\n    }\n\n    if (typeof options.hideTwistiesOfChildlessElements !== 'undefined') {\n      this.hideTwistiesOfChildlessElements = options.hideTwistiesOfChildlessElements;\n    }\n  }\n\n  renderTemplate(container) {\n    const el = append(container, $('.monaco-tl-row'));\n    const indent = append(el, $('.monaco-tl-indent'));\n    const twistie = append(el, $('.monaco-tl-twistie'));\n    const contents = append(el, $('.monaco-tl-contents'));\n    const templateData = this.renderer.renderTemplate(contents);\n    return {\n      container,\n      indent,\n      twistie,\n      indentGuidesDisposable: Disposable.None,\n      templateData\n    };\n  }\n\n  renderElement(node, index, templateData, height) {\n    if (typeof height === 'number') {\n      this.renderedNodes.set(node, {\n        templateData,\n        height\n      });\n      this.renderedElements.set(node.element, node);\n    }\n\n    const indent = TreeRenderer.DefaultIndent + (node.depth - 1) * this.indent;\n    templateData.twistie.style.paddingLeft = `${indent}px`;\n    templateData.indent.style.width = `${indent + this.indent - 16}px`;\n    this.renderTwistie(node, templateData);\n\n    if (typeof height === 'number') {\n      this.renderIndentGuides(node, templateData);\n    }\n\n    this.renderer.renderElement(node, index, templateData.templateData, height);\n  }\n\n  disposeElement(node, index, templateData, height) {\n    templateData.indentGuidesDisposable.dispose();\n\n    if (this.renderer.disposeElement) {\n      this.renderer.disposeElement(node, index, templateData.templateData, height);\n    }\n\n    if (typeof height === 'number') {\n      this.renderedNodes.delete(node);\n      this.renderedElements.delete(node.element);\n    }\n  }\n\n  disposeTemplate(templateData) {\n    this.renderer.disposeTemplate(templateData.templateData);\n  }\n\n  onDidChangeTwistieState(element) {\n    const node = this.renderedElements.get(element);\n\n    if (!node) {\n      return;\n    }\n\n    this.onDidChangeNodeTwistieState(node);\n  }\n\n  onDidChangeNodeTwistieState(node) {\n    const data = this.renderedNodes.get(node);\n\n    if (!data) {\n      return;\n    }\n\n    this.renderTwistie(node, data.templateData);\n\n    this._onDidChangeActiveNodes(this.activeNodes.elements);\n\n    this.renderIndentGuides(node, data.templateData);\n  }\n\n  renderTwistie(node, templateData) {\n    templateData.twistie.classList.remove(...Codicon.treeItemExpanded.classNamesArray);\n    let twistieRendered = false;\n\n    if (this.renderer.renderTwistie) {\n      twistieRendered = this.renderer.renderTwistie(node.element, templateData.twistie);\n    }\n\n    if (node.collapsible && (!this.hideTwistiesOfChildlessElements || node.visibleChildrenCount > 0)) {\n      if (!twistieRendered) {\n        templateData.twistie.classList.add(...Codicon.treeItemExpanded.classNamesArray);\n      }\n\n      templateData.twistie.classList.add('collapsible');\n      templateData.twistie.classList.toggle('collapsed', node.collapsed);\n    } else {\n      templateData.twistie.classList.remove('collapsible', 'collapsed');\n    }\n\n    if (node.collapsible) {\n      templateData.container.setAttribute('aria-expanded', String(!node.collapsed));\n    } else {\n      templateData.container.removeAttribute('aria-expanded');\n    }\n  }\n\n  renderIndentGuides(target, templateData) {\n    clearNode(templateData.indent);\n    templateData.indentGuidesDisposable.dispose();\n\n    if (!this.shouldRenderIndentGuides) {\n      return;\n    }\n\n    const disposableStore = new DisposableStore();\n    const model = this.modelProvider();\n    let node = target;\n\n    while (true) {\n      const ref = model.getNodeLocation(node);\n      const parentRef = model.getParentNodeLocation(ref);\n\n      if (!parentRef) {\n        break;\n      }\n\n      const parent = model.getNode(parentRef);\n      const guide = $('.indent-guide', {\n        style: `width: ${this.indent}px`\n      });\n\n      if (this.activeIndentNodes.has(parent)) {\n        guide.classList.add('active');\n      }\n\n      if (templateData.indent.childElementCount === 0) {\n        templateData.indent.appendChild(guide);\n      } else {\n        templateData.indent.insertBefore(guide, templateData.indent.firstElementChild);\n      }\n\n      this.renderedIndentGuides.add(parent, guide);\n      disposableStore.add(toDisposable(() => this.renderedIndentGuides.delete(parent, guide)));\n      node = parent;\n    }\n\n    templateData.indentGuidesDisposable = disposableStore;\n  }\n\n  _onDidChangeActiveNodes(nodes) {\n    if (!this.shouldRenderIndentGuides) {\n      return;\n    }\n\n    const set = new Set();\n    const model = this.modelProvider();\n    nodes.forEach(node => {\n      const ref = model.getNodeLocation(node);\n\n      try {\n        const parentRef = model.getParentNodeLocation(ref);\n\n        if (node.collapsible && node.children.length > 0 && !node.collapsed) {\n          set.add(node);\n        } else if (parentRef) {\n          set.add(model.getNode(parentRef));\n        }\n      } catch (_a) {// noop\n      }\n    });\n    this.activeIndentNodes.forEach(node => {\n      if (!set.has(node)) {\n        this.renderedIndentGuides.forEach(node, line => line.classList.remove('active'));\n      }\n    });\n    set.forEach(node => {\n      if (!this.activeIndentNodes.has(node)) {\n        this.renderedIndentGuides.forEach(node, line => line.classList.add('active'));\n      }\n    });\n    this.activeIndentNodes = set;\n  }\n\n  dispose() {\n    this.renderedNodes.clear();\n    this.renderedElements.clear();\n    this.indentGuidesDisposable.dispose();\n    dispose(this.disposables);\n  }\n\n}\n\nTreeRenderer.DefaultIndent = 8;\n\nclass TypeFilter {\n  constructor(tree, keyboardNavigationLabelProvider, _filter) {\n    this.tree = tree;\n    this.keyboardNavigationLabelProvider = keyboardNavigationLabelProvider;\n    this._filter = _filter;\n    this._totalCount = 0;\n    this._matchCount = 0;\n    this._pattern = '';\n    this._lowercasePattern = '';\n    this.disposables = new DisposableStore();\n    tree.onWillRefilter(this.reset, this, this.disposables);\n  }\n\n  get totalCount() {\n    return this._totalCount;\n  }\n\n  get matchCount() {\n    return this._matchCount;\n  }\n\n  set pattern(pattern) {\n    this._pattern = pattern;\n    this._lowercasePattern = pattern.toLowerCase();\n  }\n\n  filter(element, parentVisibility) {\n    if (this._filter) {\n      const result = this._filter.filter(element, parentVisibility);\n\n      if (this.tree.options.simpleKeyboardNavigation) {\n        return result;\n      }\n\n      let visibility;\n\n      if (typeof result === 'boolean') {\n        visibility = result ? 1\n        /* Visible */\n        : 0\n        /* Hidden */\n        ;\n      } else if (isFilterResult(result)) {\n        visibility = getVisibleState(result.visibility);\n      } else {\n        visibility = result;\n      }\n\n      if (visibility === 0\n      /* Hidden */\n      ) {\n        return false;\n      }\n    }\n\n    this._totalCount++;\n\n    if (this.tree.options.simpleKeyboardNavigation || !this._pattern) {\n      this._matchCount++;\n      return {\n        data: FuzzyScore.Default,\n        visibility: true\n      };\n    }\n\n    const label = this.keyboardNavigationLabelProvider.getKeyboardNavigationLabel(element);\n    const labels = Array.isArray(label) ? label : [label];\n\n    for (const l of labels) {\n      const labelStr = l && l.toString();\n\n      if (typeof labelStr === 'undefined') {\n        return {\n          data: FuzzyScore.Default,\n          visibility: true\n        };\n      }\n\n      const score = fuzzyScore(this._pattern, this._lowercasePattern, 0, labelStr, labelStr.toLowerCase(), 0, true);\n\n      if (score) {\n        this._matchCount++;\n        return labels.length === 1 ? {\n          data: score,\n          visibility: true\n        } : {\n          data: {\n            label: labelStr,\n            score: score\n          },\n          visibility: true\n        };\n      }\n    }\n\n    if (this.tree.options.filterOnType) {\n      return 2\n      /* Recurse */\n      ;\n    } else {\n      return {\n        data: FuzzyScore.Default,\n        visibility: true\n      };\n    }\n  }\n\n  reset() {\n    this._totalCount = 0;\n    this._matchCount = 0;\n  }\n\n  dispose() {\n    dispose(this.disposables);\n  }\n\n}\n\nclass TypeFilterController {\n  constructor(tree, model, view, filter, keyboardNavigationDelegate) {\n    this.tree = tree;\n    this.view = view;\n    this.filter = filter;\n    this.keyboardNavigationDelegate = keyboardNavigationDelegate;\n    this._enabled = false;\n    this._pattern = '';\n    this._empty = false;\n    this._onDidChangeEmptyState = new Emitter();\n    this.positionClassName = 'ne';\n    this.automaticKeyboardNavigation = true;\n    this.triggered = false;\n    this._onDidChangePattern = new Emitter();\n    this.enabledDisposables = new DisposableStore();\n    this.disposables = new DisposableStore();\n    this.domNode = $(`.monaco-list-type-filter.${this.positionClassName}`);\n    this.domNode.draggable = true;\n    this.disposables.add(addDisposableListener(this.domNode, 'dragstart', () => this.onDragStart()));\n    this.messageDomNode = append(view.getHTMLElement(), $(`.monaco-list-type-filter-message`));\n    this.labelDomNode = append(this.domNode, $('span.label'));\n    const controls = append(this.domNode, $('.controls'));\n    this._filterOnType = !!tree.options.filterOnType;\n    this.filterOnTypeDomNode = append(controls, $('input.filter'));\n    this.filterOnTypeDomNode.type = 'checkbox';\n    this.filterOnTypeDomNode.checked = this._filterOnType;\n    this.filterOnTypeDomNode.tabIndex = -1;\n    this.updateFilterOnTypeTitleAndIcon();\n    this.disposables.add(addDisposableListener(this.filterOnTypeDomNode, 'input', () => this.onDidChangeFilterOnType()));\n    this.clearDomNode = append(controls, $('button.clear' + Codicon.treeFilterClear.cssSelector));\n    this.clearDomNode.tabIndex = -1;\n    this.clearDomNode.title = localize('clear', \"Clear\");\n    this.keyboardNavigationEventFilter = tree.options.keyboardNavigationEventFilter;\n    model.onDidSplice(this.onDidSpliceModel, this, this.disposables);\n    this.updateOptions(tree.options);\n  }\n\n  get enabled() {\n    return this._enabled;\n  }\n\n  get pattern() {\n    return this._pattern;\n  }\n\n  get filterOnType() {\n    return this._filterOnType;\n  }\n\n  updateOptions(options) {\n    if (options.simpleKeyboardNavigation) {\n      this.disable();\n    } else {\n      this.enable();\n    }\n\n    if (typeof options.filterOnType !== 'undefined') {\n      this._filterOnType = !!options.filterOnType;\n      this.filterOnTypeDomNode.checked = this._filterOnType;\n      this.updateFilterOnTypeTitleAndIcon();\n    }\n\n    if (typeof options.automaticKeyboardNavigation !== 'undefined') {\n      this.automaticKeyboardNavigation = options.automaticKeyboardNavigation;\n    }\n\n    this.tree.refilter();\n    this.render();\n\n    if (!this.automaticKeyboardNavigation) {\n      this.onEventOrInput('');\n    }\n  }\n\n  enable() {\n    if (this._enabled) {\n      return;\n    }\n\n    const onRawKeyDown = this.enabledDisposables.add(new DomEmitter(this.view.getHTMLElement(), 'keydown'));\n    const onKeyDown = Event.chain(onRawKeyDown.event).filter(e => !isInputElement(e.target) || e.target === this.filterOnTypeDomNode).filter(e => e.key !== 'Dead' && !/^Media/.test(e.key)).map(e => new StandardKeyboardEvent(e)).filter(this.keyboardNavigationEventFilter || (() => true)).filter(() => this.automaticKeyboardNavigation || this.triggered).filter(e => this.keyboardNavigationDelegate.mightProducePrintableCharacter(e) && !(e.keyCode === 18\n    /* DownArrow */\n    || e.keyCode === 16\n    /* UpArrow */\n    || e.keyCode === 15\n    /* LeftArrow */\n    || e.keyCode === 17\n    /* RightArrow */\n    ) || (this.pattern.length > 0 || this.triggered) && (e.keyCode === 9\n    /* Escape */\n    || e.keyCode === 1\n    /* Backspace */\n    ) && !e.altKey && !e.ctrlKey && !e.metaKey || e.keyCode === 1\n    /* Backspace */\n    && (isMacintosh ? e.altKey && !e.metaKey : e.ctrlKey) && !e.shiftKey).forEach(e => {\n      e.stopPropagation();\n      e.preventDefault();\n    }).event;\n    const onClearClick = this.enabledDisposables.add(new DomEmitter(this.clearDomNode, 'click'));\n    Event.chain(Event.any(onKeyDown, onClearClick.event)).event(this.onEventOrInput, this, this.enabledDisposables);\n    this.filter.pattern = '';\n    this.tree.refilter();\n    this.render();\n    this._enabled = true;\n    this.triggered = false;\n  }\n\n  disable() {\n    if (!this._enabled) {\n      return;\n    }\n\n    this.domNode.remove();\n    this.enabledDisposables.clear();\n    this.tree.refilter();\n    this.render();\n    this._enabled = false;\n    this.triggered = false;\n  }\n\n  onEventOrInput(e) {\n    if (typeof e === 'string') {\n      this.onInput(e);\n    } else if (e instanceof MouseEvent || e.keyCode === 9\n    /* Escape */\n    || e.keyCode === 1\n    /* Backspace */\n    && (isMacintosh ? e.altKey : e.ctrlKey)) {\n      this.onInput('');\n    } else if (e.keyCode === 1\n    /* Backspace */\n    ) {\n      this.onInput(this.pattern.length === 0 ? '' : this.pattern.substr(0, this.pattern.length - 1));\n    } else {\n      this.onInput(this.pattern + e.browserEvent.key);\n    }\n  }\n\n  onInput(pattern) {\n    const container = this.view.getHTMLElement();\n\n    if (pattern && !this.domNode.parentElement) {\n      container.append(this.domNode);\n    } else if (!pattern && this.domNode.parentElement) {\n      this.domNode.remove();\n      this.tree.domFocus();\n    }\n\n    this._pattern = pattern;\n\n    this._onDidChangePattern.fire(pattern);\n\n    this.filter.pattern = pattern;\n    this.tree.refilter();\n\n    if (pattern) {\n      this.tree.focusNext(0, true, undefined, node => !FuzzyScore.isDefault(node.filterData));\n    }\n\n    const focus = this.tree.getFocus();\n\n    if (focus.length > 0) {\n      const element = focus[0];\n\n      if (this.tree.getRelativeTop(element) === null) {\n        this.tree.reveal(element, 0.5);\n      }\n    }\n\n    this.render();\n\n    if (!pattern) {\n      this.triggered = false;\n    }\n  }\n\n  onDragStart() {\n    const container = this.view.getHTMLElement();\n    const {\n      left\n    } = getDomNodePagePosition(container);\n    const containerWidth = container.clientWidth;\n    const midContainerWidth = containerWidth / 2;\n    const width = this.domNode.clientWidth;\n    const disposables = new DisposableStore();\n    let positionClassName = this.positionClassName;\n\n    const updatePosition = () => {\n      switch (positionClassName) {\n        case 'nw':\n          this.domNode.style.top = `4px`;\n          this.domNode.style.left = `4px`;\n          break;\n\n        case 'ne':\n          this.domNode.style.top = `4px`;\n          this.domNode.style.left = `${containerWidth - width - 6}px`;\n          break;\n      }\n    };\n\n    const onDragOver = event => {\n      event.preventDefault(); // needed so that the drop event fires (https://stackoverflow.com/questions/21339924/drop-event-not-firing-in-chrome)\n\n      const x = event.clientX - left;\n\n      if (event.dataTransfer) {\n        event.dataTransfer.dropEffect = 'none';\n      }\n\n      if (x < midContainerWidth) {\n        positionClassName = 'nw';\n      } else {\n        positionClassName = 'ne';\n      }\n\n      updatePosition();\n    };\n\n    const onDragEnd = () => {\n      this.positionClassName = positionClassName;\n      this.domNode.className = `monaco-list-type-filter ${this.positionClassName}`;\n      this.domNode.style.top = '';\n      this.domNode.style.left = '';\n      dispose(disposables);\n    };\n\n    updatePosition();\n    this.domNode.classList.remove(positionClassName);\n    this.domNode.classList.add('dragging');\n    disposables.add(toDisposable(() => this.domNode.classList.remove('dragging')));\n    disposables.add(addDisposableListener(document, 'dragover', e => onDragOver(e)));\n    disposables.add(addDisposableListener(this.domNode, 'dragend', () => onDragEnd()));\n    StaticDND.CurrentDragAndDropData = new DragAndDropData('vscode-ui');\n    disposables.add(toDisposable(() => StaticDND.CurrentDragAndDropData = undefined));\n  }\n\n  onDidSpliceModel() {\n    if (!this._enabled || this.pattern.length === 0) {\n      return;\n    }\n\n    this.tree.refilter();\n    this.render();\n  }\n\n  onDidChangeFilterOnType() {\n    this.tree.updateOptions({\n      filterOnType: this.filterOnTypeDomNode.checked\n    });\n    this.tree.refilter();\n    this.tree.domFocus();\n    this.render();\n    this.updateFilterOnTypeTitleAndIcon();\n  }\n\n  updateFilterOnTypeTitleAndIcon() {\n    if (this.filterOnType) {\n      this.filterOnTypeDomNode.classList.remove(...Codicon.treeFilterOnTypeOff.classNamesArray);\n      this.filterOnTypeDomNode.classList.add(...Codicon.treeFilterOnTypeOn.classNamesArray);\n      this.filterOnTypeDomNode.title = localize('disable filter on type', \"Disable Filter on Type\");\n    } else {\n      this.filterOnTypeDomNode.classList.remove(...Codicon.treeFilterOnTypeOn.classNamesArray);\n      this.filterOnTypeDomNode.classList.add(...Codicon.treeFilterOnTypeOff.classNamesArray);\n      this.filterOnTypeDomNode.title = localize('enable filter on type', \"Enable Filter on Type\");\n    }\n  }\n\n  render() {\n    const noMatches = this.filter.totalCount > 0 && this.filter.matchCount === 0;\n\n    if (this.pattern && this.tree.options.filterOnType && noMatches) {\n      this.messageDomNode.textContent = localize('empty', \"No elements found\");\n      this._empty = true;\n    } else {\n      this.messageDomNode.innerText = '';\n      this._empty = false;\n    }\n\n    this.domNode.classList.toggle('no-matches', noMatches);\n    this.domNode.title = localize('found', \"Matched {0} out of {1} elements\", this.filter.matchCount, this.filter.totalCount);\n    this.labelDomNode.textContent = this.pattern.length > 16 ? '…' + this.pattern.substr(this.pattern.length - 16) : this.pattern;\n\n    this._onDidChangeEmptyState.fire(this._empty);\n  }\n\n  shouldAllowFocus(node) {\n    if (!this.enabled || !this.pattern || this.filterOnType) {\n      return true;\n    }\n\n    if (this.filter.totalCount > 0 && this.filter.matchCount <= 1) {\n      return true;\n    }\n\n    return !FuzzyScore.isDefault(node.filterData);\n  }\n\n  dispose() {\n    if (this._enabled) {\n      this.domNode.remove();\n      this.enabledDisposables.dispose();\n      this._enabled = false;\n      this.triggered = false;\n    }\n\n    this._onDidChangePattern.dispose();\n\n    dispose(this.disposables);\n  }\n\n}\n\nfunction asTreeMouseEvent(event) {\n  let target = TreeMouseEventTarget.Unknown;\n\n  if (hasParentWithClass(event.browserEvent.target, 'monaco-tl-twistie', 'monaco-tl-row')) {\n    target = TreeMouseEventTarget.Twistie;\n  } else if (hasParentWithClass(event.browserEvent.target, 'monaco-tl-contents', 'monaco-tl-row')) {\n    target = TreeMouseEventTarget.Element;\n  }\n\n  return {\n    browserEvent: event.browserEvent,\n    element: event.element ? event.element.element : null,\n    target\n  };\n}\n\nfunction dfs(node, fn) {\n  fn(node);\n  node.children.forEach(child => dfs(child, fn));\n}\n/**\n * The trait concept needs to exist at the tree level, because collapsed\n * tree nodes will not be known by the list.\n */\n\n\nclass Trait {\n  constructor(getFirstViewElementWithTrait, identityProvider) {\n    this.getFirstViewElementWithTrait = getFirstViewElementWithTrait;\n    this.identityProvider = identityProvider;\n    this.nodes = [];\n    this._onDidChange = new Emitter();\n    this.onDidChange = this._onDidChange.event;\n  }\n\n  get nodeSet() {\n    if (!this._nodeSet) {\n      this._nodeSet = this.createNodeSet();\n    }\n\n    return this._nodeSet;\n  }\n\n  set(nodes, browserEvent) {\n    if (!(browserEvent === null || browserEvent === void 0 ? void 0 : browserEvent.__forceEvent) && equals(this.nodes, nodes)) {\n      return;\n    }\n\n    this._set(nodes, false, browserEvent);\n  }\n\n  _set(nodes, silent, browserEvent) {\n    this.nodes = [...nodes];\n    this.elements = undefined;\n    this._nodeSet = undefined;\n\n    if (!silent) {\n      const that = this;\n\n      this._onDidChange.fire({\n        get elements() {\n          return that.get();\n        },\n\n        browserEvent\n      });\n    }\n  }\n\n  get() {\n    if (!this.elements) {\n      this.elements = this.nodes.map(node => node.element);\n    }\n\n    return [...this.elements];\n  }\n\n  getNodes() {\n    return this.nodes;\n  }\n\n  has(node) {\n    return this.nodeSet.has(node);\n  }\n\n  onDidModelSplice({\n    insertedNodes,\n    deletedNodes\n  }) {\n    if (!this.identityProvider) {\n      const set = this.createNodeSet();\n\n      const visit = node => set.delete(node);\n\n      deletedNodes.forEach(node => dfs(node, visit));\n      this.set([...set.values()]);\n      return;\n    }\n\n    const deletedNodesIdSet = new Set();\n\n    const deletedNodesVisitor = node => deletedNodesIdSet.add(this.identityProvider.getId(node.element).toString());\n\n    deletedNodes.forEach(node => dfs(node, deletedNodesVisitor));\n    const insertedNodesMap = new Map();\n\n    const insertedNodesVisitor = node => insertedNodesMap.set(this.identityProvider.getId(node.element).toString(), node);\n\n    insertedNodes.forEach(node => dfs(node, insertedNodesVisitor));\n    const nodes = [];\n\n    for (const node of this.nodes) {\n      const id = this.identityProvider.getId(node.element).toString();\n      const wasDeleted = deletedNodesIdSet.has(id);\n\n      if (!wasDeleted) {\n        nodes.push(node);\n      } else {\n        const insertedNode = insertedNodesMap.get(id);\n\n        if (insertedNode) {\n          nodes.push(insertedNode);\n        }\n      }\n    }\n\n    if (this.nodes.length > 0 && nodes.length === 0) {\n      const node = this.getFirstViewElementWithTrait();\n\n      if (node) {\n        nodes.push(node);\n      }\n    }\n\n    this._set(nodes, true);\n  }\n\n  createNodeSet() {\n    const set = new Set();\n\n    for (const node of this.nodes) {\n      set.add(node);\n    }\n\n    return set;\n  }\n\n}\n\nclass TreeNodeListMouseController extends MouseController {\n  constructor(list, tree) {\n    super(list);\n    this.tree = tree;\n  }\n\n  onViewPointer(e) {\n    if (isInputElement(e.browserEvent.target) || isMonacoEditor(e.browserEvent.target)) {\n      return;\n    }\n\n    const node = e.element;\n\n    if (!node) {\n      return super.onViewPointer(e);\n    }\n\n    if (this.isSelectionRangeChangeEvent(e) || this.isSelectionSingleChangeEvent(e)) {\n      return super.onViewPointer(e);\n    }\n\n    const target = e.browserEvent.target;\n    const onTwistie = target.classList.contains('monaco-tl-twistie') || target.classList.contains('monaco-icon-label') && target.classList.contains('folder-icon') && e.browserEvent.offsetX < 16;\n    let expandOnlyOnTwistieClick = false;\n\n    if (typeof this.tree.expandOnlyOnTwistieClick === 'function') {\n      expandOnlyOnTwistieClick = this.tree.expandOnlyOnTwistieClick(node.element);\n    } else {\n      expandOnlyOnTwistieClick = !!this.tree.expandOnlyOnTwistieClick;\n    }\n\n    if (expandOnlyOnTwistieClick && !onTwistie && e.browserEvent.detail !== 2) {\n      return super.onViewPointer(e);\n    }\n\n    if (!this.tree.expandOnDoubleClick && e.browserEvent.detail === 2) {\n      return super.onViewPointer(e);\n    }\n\n    if (node.collapsible) {\n      const model = this.tree.model; // internal\n\n      const location = model.getNodeLocation(node);\n      const recursive = e.browserEvent.altKey;\n      this.tree.setFocus([location]);\n      model.setCollapsed(location, undefined, recursive);\n\n      if (expandOnlyOnTwistieClick && onTwistie) {\n        return;\n      }\n    }\n\n    super.onViewPointer(e);\n  }\n\n  onDoubleClick(e) {\n    const onTwistie = e.browserEvent.target.classList.contains('monaco-tl-twistie');\n\n    if (onTwistie || !this.tree.expandOnDoubleClick) {\n      return;\n    }\n\n    super.onDoubleClick(e);\n  }\n\n}\n/**\n * We use this List subclass to restore selection and focus as nodes\n * get rendered in the list, possibly due to a node expand() call.\n */\n\n\nclass TreeNodeList extends List {\n  constructor(user, container, virtualDelegate, renderers, focusTrait, selectionTrait, anchorTrait, options) {\n    super(user, container, virtualDelegate, renderers, options);\n    this.focusTrait = focusTrait;\n    this.selectionTrait = selectionTrait;\n    this.anchorTrait = anchorTrait;\n  }\n\n  createMouseController(options) {\n    return new TreeNodeListMouseController(this, options.tree);\n  }\n\n  splice(start, deleteCount, elements = []) {\n    super.splice(start, deleteCount, elements);\n\n    if (elements.length === 0) {\n      return;\n    }\n\n    const additionalFocus = [];\n    const additionalSelection = [];\n    let anchor;\n    elements.forEach((node, index) => {\n      if (this.focusTrait.has(node)) {\n        additionalFocus.push(start + index);\n      }\n\n      if (this.selectionTrait.has(node)) {\n        additionalSelection.push(start + index);\n      }\n\n      if (this.anchorTrait.has(node)) {\n        anchor = start + index;\n      }\n    });\n\n    if (additionalFocus.length > 0) {\n      super.setFocus(distinct([...super.getFocus(), ...additionalFocus]));\n    }\n\n    if (additionalSelection.length > 0) {\n      super.setSelection(distinct([...super.getSelection(), ...additionalSelection]));\n    }\n\n    if (typeof anchor === 'number') {\n      super.setAnchor(anchor);\n    }\n  }\n\n  setFocus(indexes, browserEvent, fromAPI = false) {\n    super.setFocus(indexes, browserEvent);\n\n    if (!fromAPI) {\n      this.focusTrait.set(indexes.map(i => this.element(i)), browserEvent);\n    }\n  }\n\n  setSelection(indexes, browserEvent, fromAPI = false) {\n    super.setSelection(indexes, browserEvent);\n\n    if (!fromAPI) {\n      this.selectionTrait.set(indexes.map(i => this.element(i)), browserEvent);\n    }\n  }\n\n  setAnchor(index, fromAPI = false) {\n    super.setAnchor(index);\n\n    if (!fromAPI) {\n      if (typeof index === 'undefined') {\n        this.anchorTrait.set([]);\n      } else {\n        this.anchorTrait.set([this.element(index)]);\n      }\n    }\n  }\n\n}\n\nexport class AbstractTree {\n  constructor(_user, container, delegate, renderers, _options = {}) {\n    this._user = _user;\n    this._options = _options;\n    this.eventBufferer = new EventBufferer();\n    this.disposables = new DisposableStore();\n    this._onWillRefilter = new Emitter();\n    this.onWillRefilter = this._onWillRefilter.event;\n    this._onDidUpdateOptions = new Emitter();\n    const treeDelegate = new ComposedTreeDelegate(delegate);\n    const onDidChangeCollapseStateRelay = new Relay();\n    const onDidChangeActiveNodes = new Relay();\n    const activeNodes = new EventCollection(onDidChangeActiveNodes.event);\n    this.renderers = renderers.map(r => new TreeRenderer(r, () => this.model, onDidChangeCollapseStateRelay.event, activeNodes, _options));\n\n    for (let r of this.renderers) {\n      this.disposables.add(r);\n    }\n\n    let filter;\n\n    if (_options.keyboardNavigationLabelProvider) {\n      filter = new TypeFilter(this, _options.keyboardNavigationLabelProvider, _options.filter);\n      _options = Object.assign(Object.assign({}, _options), {\n        filter: filter\n      }); // TODO need typescript help here\n\n      this.disposables.add(filter);\n    }\n\n    this.focus = new Trait(() => this.view.getFocusedElements()[0], _options.identityProvider);\n    this.selection = new Trait(() => this.view.getSelectedElements()[0], _options.identityProvider);\n    this.anchor = new Trait(() => this.view.getAnchorElement(), _options.identityProvider);\n    this.view = new TreeNodeList(_user, container, treeDelegate, this.renderers, this.focus, this.selection, this.anchor, Object.assign(Object.assign({}, asListOptions(() => this.model, _options)), {\n      tree: this\n    }));\n    this.model = this.createModel(_user, this.view, _options);\n    onDidChangeCollapseStateRelay.input = this.model.onDidChangeCollapseState;\n    const onDidModelSplice = Event.forEach(this.model.onDidSplice, e => {\n      this.eventBufferer.bufferEvents(() => {\n        this.focus.onDidModelSplice(e);\n        this.selection.onDidModelSplice(e);\n      });\n    }); // Make sure the `forEach` always runs\n\n    onDidModelSplice(() => null, null, this.disposables); // Active nodes can change when the model changes or when focus or selection change.\n    // We debounce it with 0 delay since these events may fire in the same stack and we only\n    // want to run this once. It also doesn't matter if it runs on the next tick since it's only\n    // a nice to have UI feature.\n\n    onDidChangeActiveNodes.input = Event.chain(Event.any(onDidModelSplice, this.focus.onDidChange, this.selection.onDidChange)).debounce(() => null, 0).map(() => {\n      const set = new Set();\n\n      for (const node of this.focus.getNodes()) {\n        set.add(node);\n      }\n\n      for (const node of this.selection.getNodes()) {\n        set.add(node);\n      }\n\n      return [...set.values()];\n    }).event;\n\n    if (_options.keyboardSupport !== false) {\n      const onKeyDown = Event.chain(this.view.onKeyDown).filter(e => !isInputElement(e.target)).map(e => new StandardKeyboardEvent(e));\n      onKeyDown.filter(e => e.keyCode === 15\n      /* LeftArrow */\n      ).on(this.onLeftArrow, this, this.disposables);\n      onKeyDown.filter(e => e.keyCode === 17\n      /* RightArrow */\n      ).on(this.onRightArrow, this, this.disposables);\n      onKeyDown.filter(e => e.keyCode === 10\n      /* Space */\n      ).on(this.onSpace, this, this.disposables);\n    }\n\n    if (_options.keyboardNavigationLabelProvider) {\n      const delegate = _options.keyboardNavigationDelegate || DefaultKeyboardNavigationDelegate;\n      this.typeFilterController = new TypeFilterController(this, this.model, this.view, filter, delegate);\n\n      this.focusNavigationFilter = node => this.typeFilterController.shouldAllowFocus(node);\n\n      this.disposables.add(this.typeFilterController);\n    }\n\n    this.styleElement = createStyleSheet(this.view.getHTMLElement());\n    this.getHTMLElement().classList.toggle('always', this._options.renderIndentGuides === RenderIndentGuides.Always);\n  }\n\n  get onDidChangeFocus() {\n    return this.eventBufferer.wrapEvent(this.focus.onDidChange);\n  }\n\n  get onDidChangeSelection() {\n    return this.eventBufferer.wrapEvent(this.selection.onDidChange);\n  }\n\n  get onMouseDblClick() {\n    return Event.map(this.view.onMouseDblClick, asTreeMouseEvent);\n  }\n\n  get onPointer() {\n    return Event.map(this.view.onPointer, asTreeMouseEvent);\n  }\n\n  get onDidFocus() {\n    return this.view.onDidFocus;\n  }\n\n  get onDidChangeModel() {\n    return Event.signal(this.model.onDidSplice);\n  }\n\n  get onDidChangeCollapseState() {\n    return this.model.onDidChangeCollapseState;\n  }\n\n  get expandOnDoubleClick() {\n    return typeof this._options.expandOnDoubleClick === 'undefined' ? true : this._options.expandOnDoubleClick;\n  }\n\n  get expandOnlyOnTwistieClick() {\n    return typeof this._options.expandOnlyOnTwistieClick === 'undefined' ? true : this._options.expandOnlyOnTwistieClick;\n  }\n\n  get onDidDispose() {\n    return this.view.onDidDispose;\n  }\n\n  updateOptions(optionsUpdate = {}) {\n    this._options = Object.assign(Object.assign({}, this._options), optionsUpdate);\n\n    for (const renderer of this.renderers) {\n      renderer.updateOptions(optionsUpdate);\n    }\n\n    this.view.updateOptions(Object.assign(Object.assign({}, this._options), {\n      enableKeyboardNavigation: this._options.simpleKeyboardNavigation\n    }));\n\n    if (this.typeFilterController) {\n      this.typeFilterController.updateOptions(this._options);\n    }\n\n    this._onDidUpdateOptions.fire(this._options);\n\n    this.getHTMLElement().classList.toggle('always', this._options.renderIndentGuides === RenderIndentGuides.Always);\n  }\n\n  get options() {\n    return this._options;\n  } // Widget\n\n\n  getHTMLElement() {\n    return this.view.getHTMLElement();\n  }\n\n  get scrollTop() {\n    return this.view.scrollTop;\n  }\n\n  set scrollTop(scrollTop) {\n    this.view.scrollTop = scrollTop;\n  }\n\n  domFocus() {\n    this.view.domFocus();\n  }\n\n  layout(height, width) {\n    this.view.layout(height, width);\n  }\n\n  style(styles) {\n    const suffix = `.${this.view.domId}`;\n    const content = [];\n\n    if (styles.treeIndentGuidesStroke) {\n      content.push(`.monaco-list${suffix}:hover .monaco-tl-indent > .indent-guide, .monaco-list${suffix}.always .monaco-tl-indent > .indent-guide  { border-color: ${styles.treeIndentGuidesStroke.transparent(0.4)}; }`);\n      content.push(`.monaco-list${suffix} .monaco-tl-indent > .indent-guide.active { border-color: ${styles.treeIndentGuidesStroke}; }`);\n    }\n\n    this.styleElement.textContent = content.join('\\n');\n    this.view.style(styles);\n  } // Tree navigation\n\n\n  getParentElement(location) {\n    const parentRef = this.model.getParentNodeLocation(location);\n    const parentNode = this.model.getNode(parentRef);\n    return parentNode.element;\n  }\n\n  getFirstElementChild(location) {\n    return this.model.getFirstElementChild(location);\n  } // Tree\n\n\n  getNode(location) {\n    return this.model.getNode(location);\n  }\n\n  collapse(location, recursive = false) {\n    return this.model.setCollapsed(location, true, recursive);\n  }\n\n  expand(location, recursive = false) {\n    return this.model.setCollapsed(location, false, recursive);\n  }\n\n  isCollapsible(location) {\n    return this.model.isCollapsible(location);\n  }\n\n  setCollapsible(location, collapsible) {\n    return this.model.setCollapsible(location, collapsible);\n  }\n\n  isCollapsed(location) {\n    return this.model.isCollapsed(location);\n  }\n\n  refilter() {\n    this._onWillRefilter.fire(undefined);\n\n    this.model.refilter();\n  }\n\n  setSelection(elements, browserEvent) {\n    const nodes = elements.map(e => this.model.getNode(e));\n    this.selection.set(nodes, browserEvent);\n    const indexes = elements.map(e => this.model.getListIndex(e)).filter(i => i > -1);\n    this.view.setSelection(indexes, browserEvent, true);\n  }\n\n  getSelection() {\n    return this.selection.get();\n  }\n\n  setFocus(elements, browserEvent) {\n    const nodes = elements.map(e => this.model.getNode(e));\n    this.focus.set(nodes, browserEvent);\n    const indexes = elements.map(e => this.model.getListIndex(e)).filter(i => i > -1);\n    this.view.setFocus(indexes, browserEvent, true);\n  }\n\n  focusNext(n = 1, loop = false, browserEvent, filter = this.focusNavigationFilter) {\n    this.view.focusNext(n, loop, browserEvent, filter);\n  }\n\n  getFocus() {\n    return this.focus.get();\n  }\n\n  reveal(location, relativeTop) {\n    this.model.expandTo(location);\n    const index = this.model.getListIndex(location);\n\n    if (index === -1) {\n      return;\n    }\n\n    this.view.reveal(index, relativeTop);\n  }\n  /**\n   * Returns the relative position of an element rendered in the list.\n   * Returns `null` if the element isn't *entirely* in the visible viewport.\n   */\n\n\n  getRelativeTop(location) {\n    const index = this.model.getListIndex(location);\n\n    if (index === -1) {\n      return null;\n    }\n\n    return this.view.getRelativeTop(index);\n  } // List\n\n\n  onLeftArrow(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    const nodes = this.view.getFocusedElements();\n\n    if (nodes.length === 0) {\n      return;\n    }\n\n    const node = nodes[0];\n    const location = this.model.getNodeLocation(node);\n    const didChange = this.model.setCollapsed(location, true);\n\n    if (!didChange) {\n      const parentLocation = this.model.getParentNodeLocation(location);\n\n      if (!parentLocation) {\n        return;\n      }\n\n      const parentListIndex = this.model.getListIndex(parentLocation);\n      this.view.reveal(parentListIndex);\n      this.view.setFocus([parentListIndex]);\n    }\n  }\n\n  onRightArrow(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    const nodes = this.view.getFocusedElements();\n\n    if (nodes.length === 0) {\n      return;\n    }\n\n    const node = nodes[0];\n    const location = this.model.getNodeLocation(node);\n    const didChange = this.model.setCollapsed(location, false);\n\n    if (!didChange) {\n      if (!node.children.some(child => child.visible)) {\n        return;\n      }\n\n      const [focusedIndex] = this.view.getFocus();\n      const firstChildIndex = focusedIndex + 1;\n      this.view.reveal(firstChildIndex);\n      this.view.setFocus([firstChildIndex]);\n    }\n  }\n\n  onSpace(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    const nodes = this.view.getFocusedElements();\n\n    if (nodes.length === 0) {\n      return;\n    }\n\n    const node = nodes[0];\n    const location = this.model.getNodeLocation(node);\n    const recursive = e.browserEvent.altKey;\n    this.model.setCollapsed(location, undefined, recursive);\n  }\n\n  dispose() {\n    dispose(this.disposables);\n    this.view.dispose();\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/base/browser/ui/tree/abstractTree.js"],"names":["DragAndDropData","StaticDND","$","addDisposableListener","append","clearNode","createStyleSheet","getDomNodePagePosition","hasParentWithClass","DomEmitter","StandardKeyboardEvent","ElementsDragAndDropData","DefaultKeyboardNavigationDelegate","isInputElement","isMonacoEditor","List","MouseController","getVisibleState","isFilterResult","TreeMouseEventTarget","distinct","equals","range","disposableTimeout","Codicon","SetMap","Emitter","Event","EventBufferer","Relay","fuzzyScore","FuzzyScore","Disposable","DisposableStore","dispose","toDisposable","clamp","isMacintosh","localize","TreeElementsDragAndDropData","constructor","data","elements","map","node","element","asTreeDragAndDropData","TreeNodeListDragAndDrop","modelProvider","dnd","autoExpandDisposable","None","getDragURI","getDragLabel","nodes","originalEvent","undefined","onDragStart","onDragOver","targetNode","targetIndex","raw","result","didChangeAutoExpandNode","autoExpandNode","autoExpand","model","ref","getNodeLocation","isCollapsed","setCollapsed","accept","bubble","feedback","effect","parentRef","getParentNodeLocation","parentNode","getNode","parentIndex","getListIndex","start","length","getListRenderCount","Object","assign","drop","onDragEnd","asListOptions","options","identityProvider","getId","el","multipleSelectionController","isSelectionSingleChangeEvent","e","isSelectionRangeChangeEvent","accessibilityProvider","getSetSize","visibleChildrenCount","getPosInSet","visibleChildIndex","isChecked","getRole","getAriaLabel","getWidgetAriaLabel","getWidgetRole","getAriaLevel","depth","getActiveDescendantId","keyboardNavigationLabelProvider","getKeyboardNavigationLabel","enableKeyboardNavigation","simpleKeyboardNavigation","ComposedTreeDelegate","delegate","getHeight","getTemplateId","hasDynamicHeight","setDynamicHeight","height","RenderIndentGuides","EventCollection","onDidChange","_elements","forEach","TreeRenderer","renderer","onDidChangeCollapseState","activeNodes","renderedElements","Map","renderedNodes","indent","DefaultIndent","hideTwistiesOfChildlessElements","shouldRenderIndentGuides","renderedIndentGuides","activeIndentNodes","Set","indentGuidesDisposable","disposables","templateId","updateOptions","onDidChangeNodeTwistieState","onDidChangeTwistieState","renderIndentGuides","_onDidChangeActiveNodes","renderTemplate","container","twistie","contents","templateData","renderElement","index","set","style","paddingLeft","width","renderTwistie","disposeElement","delete","disposeTemplate","get","classList","remove","treeItemExpanded","classNamesArray","twistieRendered","collapsible","add","toggle","collapsed","setAttribute","String","removeAttribute","target","disposableStore","parent","guide","has","childElementCount","appendChild","insertBefore","firstElementChild","children","_a","line","clear","TypeFilter","tree","_filter","_totalCount","_matchCount","_pattern","_lowercasePattern","onWillRefilter","reset","totalCount","matchCount","pattern","toLowerCase","filter","parentVisibility","visibility","Default","label","labels","Array","isArray","l","labelStr","toString","score","filterOnType","TypeFilterController","view","keyboardNavigationDelegate","_enabled","_empty","_onDidChangeEmptyState","positionClassName","automaticKeyboardNavigation","triggered","_onDidChangePattern","enabledDisposables","domNode","draggable","messageDomNode","getHTMLElement","labelDomNode","controls","_filterOnType","filterOnTypeDomNode","type","checked","tabIndex","updateFilterOnTypeTitleAndIcon","onDidChangeFilterOnType","clearDomNode","treeFilterClear","cssSelector","title","keyboardNavigationEventFilter","onDidSplice","onDidSpliceModel","enabled","disable","enable","refilter","render","onEventOrInput","onRawKeyDown","onKeyDown","chain","event","key","test","mightProducePrintableCharacter","keyCode","altKey","ctrlKey","metaKey","shiftKey","stopPropagation","preventDefault","onClearClick","any","onInput","MouseEvent","substr","browserEvent","parentElement","domFocus","fire","focusNext","isDefault","filterData","focus","getFocus","getRelativeTop","reveal","left","containerWidth","clientWidth","midContainerWidth","updatePosition","top","x","clientX","dataTransfer","dropEffect","className","document","CurrentDragAndDropData","treeFilterOnTypeOff","treeFilterOnTypeOn","noMatches","textContent","innerText","shouldAllowFocus","asTreeMouseEvent","Unknown","Twistie","Element","dfs","fn","child","Trait","getFirstViewElementWithTrait","_onDidChange","nodeSet","_nodeSet","createNodeSet","__forceEvent","_set","silent","that","getNodes","onDidModelSplice","insertedNodes","deletedNodes","visit","values","deletedNodesIdSet","deletedNodesVisitor","insertedNodesMap","insertedNodesVisitor","id","wasDeleted","push","insertedNode","TreeNodeListMouseController","list","onViewPointer","onTwistie","contains","offsetX","expandOnlyOnTwistieClick","detail","expandOnDoubleClick","location","recursive","setFocus","onDoubleClick","TreeNodeList","user","virtualDelegate","renderers","focusTrait","selectionTrait","anchorTrait","createMouseController","splice","deleteCount","additionalFocus","additionalSelection","anchor","setSelection","getSelection","setAnchor","indexes","fromAPI","i","AbstractTree","_user","_options","eventBufferer","_onWillRefilter","_onDidUpdateOptions","treeDelegate","onDidChangeCollapseStateRelay","onDidChangeActiveNodes","r","getFocusedElements","selection","getSelectedElements","getAnchorElement","createModel","input","bufferEvents","debounce","keyboardSupport","on","onLeftArrow","onRightArrow","onSpace","typeFilterController","focusNavigationFilter","styleElement","Always","onDidChangeFocus","wrapEvent","onDidChangeSelection","onMouseDblClick","onPointer","onDidFocus","onDidChangeModel","signal","onDidDispose","optionsUpdate","scrollTop","layout","styles","suffix","domId","content","treeIndentGuidesStroke","transparent","join","getParentElement","getFirstElementChild","collapse","expand","isCollapsible","setCollapsible","n","loop","relativeTop","expandTo","didChange","parentLocation","parentListIndex","some","visible","focusedIndex","firstChildIndex"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { DragAndDropData, StaticDND } from '../../dnd.js';\nimport { $, addDisposableListener, append, clearNode, createStyleSheet, getDomNodePagePosition, hasParentWithClass } from '../../dom.js';\nimport { DomEmitter } from '../../event.js';\nimport { StandardKeyboardEvent } from '../../keyboardEvent.js';\nimport { ElementsDragAndDropData } from '../list/listView.js';\nimport { DefaultKeyboardNavigationDelegate, isInputElement, isMonacoEditor, List, MouseController } from '../list/listWidget.js';\nimport { getVisibleState, isFilterResult } from './indexTreeModel.js';\nimport { TreeMouseEventTarget } from './tree.js';\nimport { distinct, equals, range } from '../../../common/arrays.js';\nimport { disposableTimeout } from '../../../common/async.js';\nimport { Codicon } from '../../../common/codicons.js';\nimport { SetMap } from '../../../common/collections.js';\nimport { Emitter, Event, EventBufferer, Relay } from '../../../common/event.js';\nimport { fuzzyScore, FuzzyScore } from '../../../common/filters.js';\nimport { Disposable, DisposableStore, dispose, toDisposable } from '../../../common/lifecycle.js';\nimport { clamp } from '../../../common/numbers.js';\nimport { isMacintosh } from '../../../common/platform.js';\nimport './media/tree.css';\nimport { localize } from '../../../../nls.js';\nclass TreeElementsDragAndDropData extends ElementsDragAndDropData {\n    constructor(data) {\n        super(data.elements.map(node => node.element));\n        this.data = data;\n    }\n}\nfunction asTreeDragAndDropData(data) {\n    if (data instanceof ElementsDragAndDropData) {\n        return new TreeElementsDragAndDropData(data);\n    }\n    return data;\n}\nclass TreeNodeListDragAndDrop {\n    constructor(modelProvider, dnd) {\n        this.modelProvider = modelProvider;\n        this.dnd = dnd;\n        this.autoExpandDisposable = Disposable.None;\n    }\n    getDragURI(node) {\n        return this.dnd.getDragURI(node.element);\n    }\n    getDragLabel(nodes, originalEvent) {\n        if (this.dnd.getDragLabel) {\n            return this.dnd.getDragLabel(nodes.map(node => node.element), originalEvent);\n        }\n        return undefined;\n    }\n    onDragStart(data, originalEvent) {\n        if (this.dnd.onDragStart) {\n            this.dnd.onDragStart(asTreeDragAndDropData(data), originalEvent);\n        }\n    }\n    onDragOver(data, targetNode, targetIndex, originalEvent, raw = true) {\n        const result = this.dnd.onDragOver(asTreeDragAndDropData(data), targetNode && targetNode.element, targetIndex, originalEvent);\n        const didChangeAutoExpandNode = this.autoExpandNode !== targetNode;\n        if (didChangeAutoExpandNode) {\n            this.autoExpandDisposable.dispose();\n            this.autoExpandNode = targetNode;\n        }\n        if (typeof targetNode === 'undefined') {\n            return result;\n        }\n        if (didChangeAutoExpandNode && typeof result !== 'boolean' && result.autoExpand) {\n            this.autoExpandDisposable = disposableTimeout(() => {\n                const model = this.modelProvider();\n                const ref = model.getNodeLocation(targetNode);\n                if (model.isCollapsed(ref)) {\n                    model.setCollapsed(ref, false);\n                }\n                this.autoExpandNode = undefined;\n            }, 500);\n        }\n        if (typeof result === 'boolean' || !result.accept || typeof result.bubble === 'undefined' || result.feedback) {\n            if (!raw) {\n                const accept = typeof result === 'boolean' ? result : result.accept;\n                const effect = typeof result === 'boolean' ? undefined : result.effect;\n                return { accept, effect, feedback: [targetIndex] };\n            }\n            return result;\n        }\n        if (result.bubble === 1 /* Up */) {\n            const model = this.modelProvider();\n            const ref = model.getNodeLocation(targetNode);\n            const parentRef = model.getParentNodeLocation(ref);\n            const parentNode = model.getNode(parentRef);\n            const parentIndex = parentRef && model.getListIndex(parentRef);\n            return this.onDragOver(data, parentNode, parentIndex, originalEvent, false);\n        }\n        const model = this.modelProvider();\n        const ref = model.getNodeLocation(targetNode);\n        const start = model.getListIndex(ref);\n        const length = model.getListRenderCount(ref);\n        return Object.assign(Object.assign({}, result), { feedback: range(start, start + length) });\n    }\n    drop(data, targetNode, targetIndex, originalEvent) {\n        this.autoExpandDisposable.dispose();\n        this.autoExpandNode = undefined;\n        this.dnd.drop(asTreeDragAndDropData(data), targetNode && targetNode.element, targetIndex, originalEvent);\n    }\n    onDragEnd(originalEvent) {\n        if (this.dnd.onDragEnd) {\n            this.dnd.onDragEnd(originalEvent);\n        }\n    }\n}\nfunction asListOptions(modelProvider, options) {\n    return options && Object.assign(Object.assign({}, options), { identityProvider: options.identityProvider && {\n            getId(el) {\n                return options.identityProvider.getId(el.element);\n            }\n        }, dnd: options.dnd && new TreeNodeListDragAndDrop(modelProvider, options.dnd), multipleSelectionController: options.multipleSelectionController && {\n            isSelectionSingleChangeEvent(e) {\n                return options.multipleSelectionController.isSelectionSingleChangeEvent(Object.assign(Object.assign({}, e), { element: e.element }));\n            },\n            isSelectionRangeChangeEvent(e) {\n                return options.multipleSelectionController.isSelectionRangeChangeEvent(Object.assign(Object.assign({}, e), { element: e.element }));\n            }\n        }, accessibilityProvider: options.accessibilityProvider && Object.assign(Object.assign({}, options.accessibilityProvider), { getSetSize(node) {\n                const model = modelProvider();\n                const ref = model.getNodeLocation(node);\n                const parentRef = model.getParentNodeLocation(ref);\n                const parentNode = model.getNode(parentRef);\n                return parentNode.visibleChildrenCount;\n            },\n            getPosInSet(node) {\n                return node.visibleChildIndex + 1;\n            }, isChecked: options.accessibilityProvider && options.accessibilityProvider.isChecked ? (node) => {\n                return options.accessibilityProvider.isChecked(node.element);\n            } : undefined, getRole: options.accessibilityProvider && options.accessibilityProvider.getRole ? (node) => {\n                return options.accessibilityProvider.getRole(node.element);\n            } : () => 'treeitem', getAriaLabel(e) {\n                return options.accessibilityProvider.getAriaLabel(e.element);\n            },\n            getWidgetAriaLabel() {\n                return options.accessibilityProvider.getWidgetAriaLabel();\n            }, getWidgetRole: options.accessibilityProvider && options.accessibilityProvider.getWidgetRole ? () => options.accessibilityProvider.getWidgetRole() : () => 'tree', getAriaLevel: options.accessibilityProvider && options.accessibilityProvider.getAriaLevel ? (node) => options.accessibilityProvider.getAriaLevel(node.element) : (node) => {\n                return node.depth;\n            }, getActiveDescendantId: options.accessibilityProvider.getActiveDescendantId && (node => {\n                return options.accessibilityProvider.getActiveDescendantId(node.element);\n            }) }), keyboardNavigationLabelProvider: options.keyboardNavigationLabelProvider && Object.assign(Object.assign({}, options.keyboardNavigationLabelProvider), { getKeyboardNavigationLabel(node) {\n                return options.keyboardNavigationLabelProvider.getKeyboardNavigationLabel(node.element);\n            } }), enableKeyboardNavigation: options.simpleKeyboardNavigation });\n}\nexport class ComposedTreeDelegate {\n    constructor(delegate) {\n        this.delegate = delegate;\n    }\n    getHeight(element) {\n        return this.delegate.getHeight(element.element);\n    }\n    getTemplateId(element) {\n        return this.delegate.getTemplateId(element.element);\n    }\n    hasDynamicHeight(element) {\n        return !!this.delegate.hasDynamicHeight && this.delegate.hasDynamicHeight(element.element);\n    }\n    setDynamicHeight(element, height) {\n        if (this.delegate.setDynamicHeight) {\n            this.delegate.setDynamicHeight(element.element, height);\n        }\n    }\n}\nexport var RenderIndentGuides;\n(function (RenderIndentGuides) {\n    RenderIndentGuides[\"None\"] = \"none\";\n    RenderIndentGuides[\"OnHover\"] = \"onHover\";\n    RenderIndentGuides[\"Always\"] = \"always\";\n})(RenderIndentGuides || (RenderIndentGuides = {}));\nclass EventCollection {\n    constructor(onDidChange, _elements = []) {\n        this._elements = _elements;\n        this.onDidChange = Event.forEach(onDidChange, elements => this._elements = elements);\n    }\n    get elements() {\n        return this._elements;\n    }\n}\nclass TreeRenderer {\n    constructor(renderer, modelProvider, onDidChangeCollapseState, activeNodes, options = {}) {\n        this.renderer = renderer;\n        this.modelProvider = modelProvider;\n        this.activeNodes = activeNodes;\n        this.renderedElements = new Map();\n        this.renderedNodes = new Map();\n        this.indent = TreeRenderer.DefaultIndent;\n        this.hideTwistiesOfChildlessElements = false;\n        this.shouldRenderIndentGuides = false;\n        this.renderedIndentGuides = new SetMap();\n        this.activeIndentNodes = new Set();\n        this.indentGuidesDisposable = Disposable.None;\n        this.disposables = new DisposableStore();\n        this.templateId = renderer.templateId;\n        this.updateOptions(options);\n        Event.map(onDidChangeCollapseState, e => e.node)(this.onDidChangeNodeTwistieState, this, this.disposables);\n        if (renderer.onDidChangeTwistieState) {\n            renderer.onDidChangeTwistieState(this.onDidChangeTwistieState, this, this.disposables);\n        }\n    }\n    updateOptions(options = {}) {\n        if (typeof options.indent !== 'undefined') {\n            this.indent = clamp(options.indent, 0, 40);\n        }\n        if (typeof options.renderIndentGuides !== 'undefined') {\n            const shouldRenderIndentGuides = options.renderIndentGuides !== RenderIndentGuides.None;\n            if (shouldRenderIndentGuides !== this.shouldRenderIndentGuides) {\n                this.shouldRenderIndentGuides = shouldRenderIndentGuides;\n                this.indentGuidesDisposable.dispose();\n                if (shouldRenderIndentGuides) {\n                    const disposables = new DisposableStore();\n                    this.activeNodes.onDidChange(this._onDidChangeActiveNodes, this, disposables);\n                    this.indentGuidesDisposable = disposables;\n                    this._onDidChangeActiveNodes(this.activeNodes.elements);\n                }\n            }\n        }\n        if (typeof options.hideTwistiesOfChildlessElements !== 'undefined') {\n            this.hideTwistiesOfChildlessElements = options.hideTwistiesOfChildlessElements;\n        }\n    }\n    renderTemplate(container) {\n        const el = append(container, $('.monaco-tl-row'));\n        const indent = append(el, $('.monaco-tl-indent'));\n        const twistie = append(el, $('.monaco-tl-twistie'));\n        const contents = append(el, $('.monaco-tl-contents'));\n        const templateData = this.renderer.renderTemplate(contents);\n        return { container, indent, twistie, indentGuidesDisposable: Disposable.None, templateData };\n    }\n    renderElement(node, index, templateData, height) {\n        if (typeof height === 'number') {\n            this.renderedNodes.set(node, { templateData, height });\n            this.renderedElements.set(node.element, node);\n        }\n        const indent = TreeRenderer.DefaultIndent + (node.depth - 1) * this.indent;\n        templateData.twistie.style.paddingLeft = `${indent}px`;\n        templateData.indent.style.width = `${indent + this.indent - 16}px`;\n        this.renderTwistie(node, templateData);\n        if (typeof height === 'number') {\n            this.renderIndentGuides(node, templateData);\n        }\n        this.renderer.renderElement(node, index, templateData.templateData, height);\n    }\n    disposeElement(node, index, templateData, height) {\n        templateData.indentGuidesDisposable.dispose();\n        if (this.renderer.disposeElement) {\n            this.renderer.disposeElement(node, index, templateData.templateData, height);\n        }\n        if (typeof height === 'number') {\n            this.renderedNodes.delete(node);\n            this.renderedElements.delete(node.element);\n        }\n    }\n    disposeTemplate(templateData) {\n        this.renderer.disposeTemplate(templateData.templateData);\n    }\n    onDidChangeTwistieState(element) {\n        const node = this.renderedElements.get(element);\n        if (!node) {\n            return;\n        }\n        this.onDidChangeNodeTwistieState(node);\n    }\n    onDidChangeNodeTwistieState(node) {\n        const data = this.renderedNodes.get(node);\n        if (!data) {\n            return;\n        }\n        this.renderTwistie(node, data.templateData);\n        this._onDidChangeActiveNodes(this.activeNodes.elements);\n        this.renderIndentGuides(node, data.templateData);\n    }\n    renderTwistie(node, templateData) {\n        templateData.twistie.classList.remove(...Codicon.treeItemExpanded.classNamesArray);\n        let twistieRendered = false;\n        if (this.renderer.renderTwistie) {\n            twistieRendered = this.renderer.renderTwistie(node.element, templateData.twistie);\n        }\n        if (node.collapsible && (!this.hideTwistiesOfChildlessElements || node.visibleChildrenCount > 0)) {\n            if (!twistieRendered) {\n                templateData.twistie.classList.add(...Codicon.treeItemExpanded.classNamesArray);\n            }\n            templateData.twistie.classList.add('collapsible');\n            templateData.twistie.classList.toggle('collapsed', node.collapsed);\n        }\n        else {\n            templateData.twistie.classList.remove('collapsible', 'collapsed');\n        }\n        if (node.collapsible) {\n            templateData.container.setAttribute('aria-expanded', String(!node.collapsed));\n        }\n        else {\n            templateData.container.removeAttribute('aria-expanded');\n        }\n    }\n    renderIndentGuides(target, templateData) {\n        clearNode(templateData.indent);\n        templateData.indentGuidesDisposable.dispose();\n        if (!this.shouldRenderIndentGuides) {\n            return;\n        }\n        const disposableStore = new DisposableStore();\n        const model = this.modelProvider();\n        let node = target;\n        while (true) {\n            const ref = model.getNodeLocation(node);\n            const parentRef = model.getParentNodeLocation(ref);\n            if (!parentRef) {\n                break;\n            }\n            const parent = model.getNode(parentRef);\n            const guide = $('.indent-guide', { style: `width: ${this.indent}px` });\n            if (this.activeIndentNodes.has(parent)) {\n                guide.classList.add('active');\n            }\n            if (templateData.indent.childElementCount === 0) {\n                templateData.indent.appendChild(guide);\n            }\n            else {\n                templateData.indent.insertBefore(guide, templateData.indent.firstElementChild);\n            }\n            this.renderedIndentGuides.add(parent, guide);\n            disposableStore.add(toDisposable(() => this.renderedIndentGuides.delete(parent, guide)));\n            node = parent;\n        }\n        templateData.indentGuidesDisposable = disposableStore;\n    }\n    _onDidChangeActiveNodes(nodes) {\n        if (!this.shouldRenderIndentGuides) {\n            return;\n        }\n        const set = new Set();\n        const model = this.modelProvider();\n        nodes.forEach(node => {\n            const ref = model.getNodeLocation(node);\n            try {\n                const parentRef = model.getParentNodeLocation(ref);\n                if (node.collapsible && node.children.length > 0 && !node.collapsed) {\n                    set.add(node);\n                }\n                else if (parentRef) {\n                    set.add(model.getNode(parentRef));\n                }\n            }\n            catch (_a) {\n                // noop\n            }\n        });\n        this.activeIndentNodes.forEach(node => {\n            if (!set.has(node)) {\n                this.renderedIndentGuides.forEach(node, line => line.classList.remove('active'));\n            }\n        });\n        set.forEach(node => {\n            if (!this.activeIndentNodes.has(node)) {\n                this.renderedIndentGuides.forEach(node, line => line.classList.add('active'));\n            }\n        });\n        this.activeIndentNodes = set;\n    }\n    dispose() {\n        this.renderedNodes.clear();\n        this.renderedElements.clear();\n        this.indentGuidesDisposable.dispose();\n        dispose(this.disposables);\n    }\n}\nTreeRenderer.DefaultIndent = 8;\nclass TypeFilter {\n    constructor(tree, keyboardNavigationLabelProvider, _filter) {\n        this.tree = tree;\n        this.keyboardNavigationLabelProvider = keyboardNavigationLabelProvider;\n        this._filter = _filter;\n        this._totalCount = 0;\n        this._matchCount = 0;\n        this._pattern = '';\n        this._lowercasePattern = '';\n        this.disposables = new DisposableStore();\n        tree.onWillRefilter(this.reset, this, this.disposables);\n    }\n    get totalCount() { return this._totalCount; }\n    get matchCount() { return this._matchCount; }\n    set pattern(pattern) {\n        this._pattern = pattern;\n        this._lowercasePattern = pattern.toLowerCase();\n    }\n    filter(element, parentVisibility) {\n        if (this._filter) {\n            const result = this._filter.filter(element, parentVisibility);\n            if (this.tree.options.simpleKeyboardNavigation) {\n                return result;\n            }\n            let visibility;\n            if (typeof result === 'boolean') {\n                visibility = result ? 1 /* Visible */ : 0 /* Hidden */;\n            }\n            else if (isFilterResult(result)) {\n                visibility = getVisibleState(result.visibility);\n            }\n            else {\n                visibility = result;\n            }\n            if (visibility === 0 /* Hidden */) {\n                return false;\n            }\n        }\n        this._totalCount++;\n        if (this.tree.options.simpleKeyboardNavigation || !this._pattern) {\n            this._matchCount++;\n            return { data: FuzzyScore.Default, visibility: true };\n        }\n        const label = this.keyboardNavigationLabelProvider.getKeyboardNavigationLabel(element);\n        const labels = Array.isArray(label) ? label : [label];\n        for (const l of labels) {\n            const labelStr = l && l.toString();\n            if (typeof labelStr === 'undefined') {\n                return { data: FuzzyScore.Default, visibility: true };\n            }\n            const score = fuzzyScore(this._pattern, this._lowercasePattern, 0, labelStr, labelStr.toLowerCase(), 0, true);\n            if (score) {\n                this._matchCount++;\n                return labels.length === 1 ?\n                    { data: score, visibility: true } :\n                    { data: { label: labelStr, score: score }, visibility: true };\n            }\n        }\n        if (this.tree.options.filterOnType) {\n            return 2 /* Recurse */;\n        }\n        else {\n            return { data: FuzzyScore.Default, visibility: true };\n        }\n    }\n    reset() {\n        this._totalCount = 0;\n        this._matchCount = 0;\n    }\n    dispose() {\n        dispose(this.disposables);\n    }\n}\nclass TypeFilterController {\n    constructor(tree, model, view, filter, keyboardNavigationDelegate) {\n        this.tree = tree;\n        this.view = view;\n        this.filter = filter;\n        this.keyboardNavigationDelegate = keyboardNavigationDelegate;\n        this._enabled = false;\n        this._pattern = '';\n        this._empty = false;\n        this._onDidChangeEmptyState = new Emitter();\n        this.positionClassName = 'ne';\n        this.automaticKeyboardNavigation = true;\n        this.triggered = false;\n        this._onDidChangePattern = new Emitter();\n        this.enabledDisposables = new DisposableStore();\n        this.disposables = new DisposableStore();\n        this.domNode = $(`.monaco-list-type-filter.${this.positionClassName}`);\n        this.domNode.draggable = true;\n        this.disposables.add(addDisposableListener(this.domNode, 'dragstart', () => this.onDragStart()));\n        this.messageDomNode = append(view.getHTMLElement(), $(`.monaco-list-type-filter-message`));\n        this.labelDomNode = append(this.domNode, $('span.label'));\n        const controls = append(this.domNode, $('.controls'));\n        this._filterOnType = !!tree.options.filterOnType;\n        this.filterOnTypeDomNode = append(controls, $('input.filter'));\n        this.filterOnTypeDomNode.type = 'checkbox';\n        this.filterOnTypeDomNode.checked = this._filterOnType;\n        this.filterOnTypeDomNode.tabIndex = -1;\n        this.updateFilterOnTypeTitleAndIcon();\n        this.disposables.add(addDisposableListener(this.filterOnTypeDomNode, 'input', () => this.onDidChangeFilterOnType()));\n        this.clearDomNode = append(controls, $('button.clear' + Codicon.treeFilterClear.cssSelector));\n        this.clearDomNode.tabIndex = -1;\n        this.clearDomNode.title = localize('clear', \"Clear\");\n        this.keyboardNavigationEventFilter = tree.options.keyboardNavigationEventFilter;\n        model.onDidSplice(this.onDidSpliceModel, this, this.disposables);\n        this.updateOptions(tree.options);\n    }\n    get enabled() { return this._enabled; }\n    get pattern() { return this._pattern; }\n    get filterOnType() { return this._filterOnType; }\n    updateOptions(options) {\n        if (options.simpleKeyboardNavigation) {\n            this.disable();\n        }\n        else {\n            this.enable();\n        }\n        if (typeof options.filterOnType !== 'undefined') {\n            this._filterOnType = !!options.filterOnType;\n            this.filterOnTypeDomNode.checked = this._filterOnType;\n            this.updateFilterOnTypeTitleAndIcon();\n        }\n        if (typeof options.automaticKeyboardNavigation !== 'undefined') {\n            this.automaticKeyboardNavigation = options.automaticKeyboardNavigation;\n        }\n        this.tree.refilter();\n        this.render();\n        if (!this.automaticKeyboardNavigation) {\n            this.onEventOrInput('');\n        }\n    }\n    enable() {\n        if (this._enabled) {\n            return;\n        }\n        const onRawKeyDown = this.enabledDisposables.add(new DomEmitter(this.view.getHTMLElement(), 'keydown'));\n        const onKeyDown = Event.chain(onRawKeyDown.event)\n            .filter(e => !isInputElement(e.target) || e.target === this.filterOnTypeDomNode)\n            .filter(e => e.key !== 'Dead' && !/^Media/.test(e.key))\n            .map(e => new StandardKeyboardEvent(e))\n            .filter(this.keyboardNavigationEventFilter || (() => true))\n            .filter(() => this.automaticKeyboardNavigation || this.triggered)\n            .filter(e => (this.keyboardNavigationDelegate.mightProducePrintableCharacter(e) && !(e.keyCode === 18 /* DownArrow */ || e.keyCode === 16 /* UpArrow */ || e.keyCode === 15 /* LeftArrow */ || e.keyCode === 17 /* RightArrow */)) || ((this.pattern.length > 0 || this.triggered) && ((e.keyCode === 9 /* Escape */ || e.keyCode === 1 /* Backspace */) && !e.altKey && !e.ctrlKey && !e.metaKey) || (e.keyCode === 1 /* Backspace */ && (isMacintosh ? (e.altKey && !e.metaKey) : e.ctrlKey) && !e.shiftKey)))\n            .forEach(e => { e.stopPropagation(); e.preventDefault(); })\n            .event;\n        const onClearClick = this.enabledDisposables.add(new DomEmitter(this.clearDomNode, 'click'));\n        Event.chain(Event.any(onKeyDown, onClearClick.event))\n            .event(this.onEventOrInput, this, this.enabledDisposables);\n        this.filter.pattern = '';\n        this.tree.refilter();\n        this.render();\n        this._enabled = true;\n        this.triggered = false;\n    }\n    disable() {\n        if (!this._enabled) {\n            return;\n        }\n        this.domNode.remove();\n        this.enabledDisposables.clear();\n        this.tree.refilter();\n        this.render();\n        this._enabled = false;\n        this.triggered = false;\n    }\n    onEventOrInput(e) {\n        if (typeof e === 'string') {\n            this.onInput(e);\n        }\n        else if (e instanceof MouseEvent || e.keyCode === 9 /* Escape */ || (e.keyCode === 1 /* Backspace */ && (isMacintosh ? e.altKey : e.ctrlKey))) {\n            this.onInput('');\n        }\n        else if (e.keyCode === 1 /* Backspace */) {\n            this.onInput(this.pattern.length === 0 ? '' : this.pattern.substr(0, this.pattern.length - 1));\n        }\n        else {\n            this.onInput(this.pattern + e.browserEvent.key);\n        }\n    }\n    onInput(pattern) {\n        const container = this.view.getHTMLElement();\n        if (pattern && !this.domNode.parentElement) {\n            container.append(this.domNode);\n        }\n        else if (!pattern && this.domNode.parentElement) {\n            this.domNode.remove();\n            this.tree.domFocus();\n        }\n        this._pattern = pattern;\n        this._onDidChangePattern.fire(pattern);\n        this.filter.pattern = pattern;\n        this.tree.refilter();\n        if (pattern) {\n            this.tree.focusNext(0, true, undefined, node => !FuzzyScore.isDefault(node.filterData));\n        }\n        const focus = this.tree.getFocus();\n        if (focus.length > 0) {\n            const element = focus[0];\n            if (this.tree.getRelativeTop(element) === null) {\n                this.tree.reveal(element, 0.5);\n            }\n        }\n        this.render();\n        if (!pattern) {\n            this.triggered = false;\n        }\n    }\n    onDragStart() {\n        const container = this.view.getHTMLElement();\n        const { left } = getDomNodePagePosition(container);\n        const containerWidth = container.clientWidth;\n        const midContainerWidth = containerWidth / 2;\n        const width = this.domNode.clientWidth;\n        const disposables = new DisposableStore();\n        let positionClassName = this.positionClassName;\n        const updatePosition = () => {\n            switch (positionClassName) {\n                case 'nw':\n                    this.domNode.style.top = `4px`;\n                    this.domNode.style.left = `4px`;\n                    break;\n                case 'ne':\n                    this.domNode.style.top = `4px`;\n                    this.domNode.style.left = `${containerWidth - width - 6}px`;\n                    break;\n            }\n        };\n        const onDragOver = (event) => {\n            event.preventDefault(); // needed so that the drop event fires (https://stackoverflow.com/questions/21339924/drop-event-not-firing-in-chrome)\n            const x = event.clientX - left;\n            if (event.dataTransfer) {\n                event.dataTransfer.dropEffect = 'none';\n            }\n            if (x < midContainerWidth) {\n                positionClassName = 'nw';\n            }\n            else {\n                positionClassName = 'ne';\n            }\n            updatePosition();\n        };\n        const onDragEnd = () => {\n            this.positionClassName = positionClassName;\n            this.domNode.className = `monaco-list-type-filter ${this.positionClassName}`;\n            this.domNode.style.top = '';\n            this.domNode.style.left = '';\n            dispose(disposables);\n        };\n        updatePosition();\n        this.domNode.classList.remove(positionClassName);\n        this.domNode.classList.add('dragging');\n        disposables.add(toDisposable(() => this.domNode.classList.remove('dragging')));\n        disposables.add(addDisposableListener(document, 'dragover', e => onDragOver(e)));\n        disposables.add(addDisposableListener(this.domNode, 'dragend', () => onDragEnd()));\n        StaticDND.CurrentDragAndDropData = new DragAndDropData('vscode-ui');\n        disposables.add(toDisposable(() => StaticDND.CurrentDragAndDropData = undefined));\n    }\n    onDidSpliceModel() {\n        if (!this._enabled || this.pattern.length === 0) {\n            return;\n        }\n        this.tree.refilter();\n        this.render();\n    }\n    onDidChangeFilterOnType() {\n        this.tree.updateOptions({ filterOnType: this.filterOnTypeDomNode.checked });\n        this.tree.refilter();\n        this.tree.domFocus();\n        this.render();\n        this.updateFilterOnTypeTitleAndIcon();\n    }\n    updateFilterOnTypeTitleAndIcon() {\n        if (this.filterOnType) {\n            this.filterOnTypeDomNode.classList.remove(...Codicon.treeFilterOnTypeOff.classNamesArray);\n            this.filterOnTypeDomNode.classList.add(...Codicon.treeFilterOnTypeOn.classNamesArray);\n            this.filterOnTypeDomNode.title = localize('disable filter on type', \"Disable Filter on Type\");\n        }\n        else {\n            this.filterOnTypeDomNode.classList.remove(...Codicon.treeFilterOnTypeOn.classNamesArray);\n            this.filterOnTypeDomNode.classList.add(...Codicon.treeFilterOnTypeOff.classNamesArray);\n            this.filterOnTypeDomNode.title = localize('enable filter on type', \"Enable Filter on Type\");\n        }\n    }\n    render() {\n        const noMatches = this.filter.totalCount > 0 && this.filter.matchCount === 0;\n        if (this.pattern && this.tree.options.filterOnType && noMatches) {\n            this.messageDomNode.textContent = localize('empty', \"No elements found\");\n            this._empty = true;\n        }\n        else {\n            this.messageDomNode.innerText = '';\n            this._empty = false;\n        }\n        this.domNode.classList.toggle('no-matches', noMatches);\n        this.domNode.title = localize('found', \"Matched {0} out of {1} elements\", this.filter.matchCount, this.filter.totalCount);\n        this.labelDomNode.textContent = this.pattern.length > 16 ? '…' + this.pattern.substr(this.pattern.length - 16) : this.pattern;\n        this._onDidChangeEmptyState.fire(this._empty);\n    }\n    shouldAllowFocus(node) {\n        if (!this.enabled || !this.pattern || this.filterOnType) {\n            return true;\n        }\n        if (this.filter.totalCount > 0 && this.filter.matchCount <= 1) {\n            return true;\n        }\n        return !FuzzyScore.isDefault(node.filterData);\n    }\n    dispose() {\n        if (this._enabled) {\n            this.domNode.remove();\n            this.enabledDisposables.dispose();\n            this._enabled = false;\n            this.triggered = false;\n        }\n        this._onDidChangePattern.dispose();\n        dispose(this.disposables);\n    }\n}\nfunction asTreeMouseEvent(event) {\n    let target = TreeMouseEventTarget.Unknown;\n    if (hasParentWithClass(event.browserEvent.target, 'monaco-tl-twistie', 'monaco-tl-row')) {\n        target = TreeMouseEventTarget.Twistie;\n    }\n    else if (hasParentWithClass(event.browserEvent.target, 'monaco-tl-contents', 'monaco-tl-row')) {\n        target = TreeMouseEventTarget.Element;\n    }\n    return {\n        browserEvent: event.browserEvent,\n        element: event.element ? event.element.element : null,\n        target\n    };\n}\nfunction dfs(node, fn) {\n    fn(node);\n    node.children.forEach(child => dfs(child, fn));\n}\n/**\n * The trait concept needs to exist at the tree level, because collapsed\n * tree nodes will not be known by the list.\n */\nclass Trait {\n    constructor(getFirstViewElementWithTrait, identityProvider) {\n        this.getFirstViewElementWithTrait = getFirstViewElementWithTrait;\n        this.identityProvider = identityProvider;\n        this.nodes = [];\n        this._onDidChange = new Emitter();\n        this.onDidChange = this._onDidChange.event;\n    }\n    get nodeSet() {\n        if (!this._nodeSet) {\n            this._nodeSet = this.createNodeSet();\n        }\n        return this._nodeSet;\n    }\n    set(nodes, browserEvent) {\n        if (!(browserEvent === null || browserEvent === void 0 ? void 0 : browserEvent.__forceEvent) && equals(this.nodes, nodes)) {\n            return;\n        }\n        this._set(nodes, false, browserEvent);\n    }\n    _set(nodes, silent, browserEvent) {\n        this.nodes = [...nodes];\n        this.elements = undefined;\n        this._nodeSet = undefined;\n        if (!silent) {\n            const that = this;\n            this._onDidChange.fire({ get elements() { return that.get(); }, browserEvent });\n        }\n    }\n    get() {\n        if (!this.elements) {\n            this.elements = this.nodes.map(node => node.element);\n        }\n        return [...this.elements];\n    }\n    getNodes() {\n        return this.nodes;\n    }\n    has(node) {\n        return this.nodeSet.has(node);\n    }\n    onDidModelSplice({ insertedNodes, deletedNodes }) {\n        if (!this.identityProvider) {\n            const set = this.createNodeSet();\n            const visit = (node) => set.delete(node);\n            deletedNodes.forEach(node => dfs(node, visit));\n            this.set([...set.values()]);\n            return;\n        }\n        const deletedNodesIdSet = new Set();\n        const deletedNodesVisitor = (node) => deletedNodesIdSet.add(this.identityProvider.getId(node.element).toString());\n        deletedNodes.forEach(node => dfs(node, deletedNodesVisitor));\n        const insertedNodesMap = new Map();\n        const insertedNodesVisitor = (node) => insertedNodesMap.set(this.identityProvider.getId(node.element).toString(), node);\n        insertedNodes.forEach(node => dfs(node, insertedNodesVisitor));\n        const nodes = [];\n        for (const node of this.nodes) {\n            const id = this.identityProvider.getId(node.element).toString();\n            const wasDeleted = deletedNodesIdSet.has(id);\n            if (!wasDeleted) {\n                nodes.push(node);\n            }\n            else {\n                const insertedNode = insertedNodesMap.get(id);\n                if (insertedNode) {\n                    nodes.push(insertedNode);\n                }\n            }\n        }\n        if (this.nodes.length > 0 && nodes.length === 0) {\n            const node = this.getFirstViewElementWithTrait();\n            if (node) {\n                nodes.push(node);\n            }\n        }\n        this._set(nodes, true);\n    }\n    createNodeSet() {\n        const set = new Set();\n        for (const node of this.nodes) {\n            set.add(node);\n        }\n        return set;\n    }\n}\nclass TreeNodeListMouseController extends MouseController {\n    constructor(list, tree) {\n        super(list);\n        this.tree = tree;\n    }\n    onViewPointer(e) {\n        if (isInputElement(e.browserEvent.target) || isMonacoEditor(e.browserEvent.target)) {\n            return;\n        }\n        const node = e.element;\n        if (!node) {\n            return super.onViewPointer(e);\n        }\n        if (this.isSelectionRangeChangeEvent(e) || this.isSelectionSingleChangeEvent(e)) {\n            return super.onViewPointer(e);\n        }\n        const target = e.browserEvent.target;\n        const onTwistie = target.classList.contains('monaco-tl-twistie')\n            || (target.classList.contains('monaco-icon-label') && target.classList.contains('folder-icon') && e.browserEvent.offsetX < 16);\n        let expandOnlyOnTwistieClick = false;\n        if (typeof this.tree.expandOnlyOnTwistieClick === 'function') {\n            expandOnlyOnTwistieClick = this.tree.expandOnlyOnTwistieClick(node.element);\n        }\n        else {\n            expandOnlyOnTwistieClick = !!this.tree.expandOnlyOnTwistieClick;\n        }\n        if (expandOnlyOnTwistieClick && !onTwistie && e.browserEvent.detail !== 2) {\n            return super.onViewPointer(e);\n        }\n        if (!this.tree.expandOnDoubleClick && e.browserEvent.detail === 2) {\n            return super.onViewPointer(e);\n        }\n        if (node.collapsible) {\n            const model = this.tree.model; // internal\n            const location = model.getNodeLocation(node);\n            const recursive = e.browserEvent.altKey;\n            this.tree.setFocus([location]);\n            model.setCollapsed(location, undefined, recursive);\n            if (expandOnlyOnTwistieClick && onTwistie) {\n                return;\n            }\n        }\n        super.onViewPointer(e);\n    }\n    onDoubleClick(e) {\n        const onTwistie = e.browserEvent.target.classList.contains('monaco-tl-twistie');\n        if (onTwistie || !this.tree.expandOnDoubleClick) {\n            return;\n        }\n        super.onDoubleClick(e);\n    }\n}\n/**\n * We use this List subclass to restore selection and focus as nodes\n * get rendered in the list, possibly due to a node expand() call.\n */\nclass TreeNodeList extends List {\n    constructor(user, container, virtualDelegate, renderers, focusTrait, selectionTrait, anchorTrait, options) {\n        super(user, container, virtualDelegate, renderers, options);\n        this.focusTrait = focusTrait;\n        this.selectionTrait = selectionTrait;\n        this.anchorTrait = anchorTrait;\n    }\n    createMouseController(options) {\n        return new TreeNodeListMouseController(this, options.tree);\n    }\n    splice(start, deleteCount, elements = []) {\n        super.splice(start, deleteCount, elements);\n        if (elements.length === 0) {\n            return;\n        }\n        const additionalFocus = [];\n        const additionalSelection = [];\n        let anchor;\n        elements.forEach((node, index) => {\n            if (this.focusTrait.has(node)) {\n                additionalFocus.push(start + index);\n            }\n            if (this.selectionTrait.has(node)) {\n                additionalSelection.push(start + index);\n            }\n            if (this.anchorTrait.has(node)) {\n                anchor = start + index;\n            }\n        });\n        if (additionalFocus.length > 0) {\n            super.setFocus(distinct([...super.getFocus(), ...additionalFocus]));\n        }\n        if (additionalSelection.length > 0) {\n            super.setSelection(distinct([...super.getSelection(), ...additionalSelection]));\n        }\n        if (typeof anchor === 'number') {\n            super.setAnchor(anchor);\n        }\n    }\n    setFocus(indexes, browserEvent, fromAPI = false) {\n        super.setFocus(indexes, browserEvent);\n        if (!fromAPI) {\n            this.focusTrait.set(indexes.map(i => this.element(i)), browserEvent);\n        }\n    }\n    setSelection(indexes, browserEvent, fromAPI = false) {\n        super.setSelection(indexes, browserEvent);\n        if (!fromAPI) {\n            this.selectionTrait.set(indexes.map(i => this.element(i)), browserEvent);\n        }\n    }\n    setAnchor(index, fromAPI = false) {\n        super.setAnchor(index);\n        if (!fromAPI) {\n            if (typeof index === 'undefined') {\n                this.anchorTrait.set([]);\n            }\n            else {\n                this.anchorTrait.set([this.element(index)]);\n            }\n        }\n    }\n}\nexport class AbstractTree {\n    constructor(_user, container, delegate, renderers, _options = {}) {\n        this._user = _user;\n        this._options = _options;\n        this.eventBufferer = new EventBufferer();\n        this.disposables = new DisposableStore();\n        this._onWillRefilter = new Emitter();\n        this.onWillRefilter = this._onWillRefilter.event;\n        this._onDidUpdateOptions = new Emitter();\n        const treeDelegate = new ComposedTreeDelegate(delegate);\n        const onDidChangeCollapseStateRelay = new Relay();\n        const onDidChangeActiveNodes = new Relay();\n        const activeNodes = new EventCollection(onDidChangeActiveNodes.event);\n        this.renderers = renderers.map(r => new TreeRenderer(r, () => this.model, onDidChangeCollapseStateRelay.event, activeNodes, _options));\n        for (let r of this.renderers) {\n            this.disposables.add(r);\n        }\n        let filter;\n        if (_options.keyboardNavigationLabelProvider) {\n            filter = new TypeFilter(this, _options.keyboardNavigationLabelProvider, _options.filter);\n            _options = Object.assign(Object.assign({}, _options), { filter: filter }); // TODO need typescript help here\n            this.disposables.add(filter);\n        }\n        this.focus = new Trait(() => this.view.getFocusedElements()[0], _options.identityProvider);\n        this.selection = new Trait(() => this.view.getSelectedElements()[0], _options.identityProvider);\n        this.anchor = new Trait(() => this.view.getAnchorElement(), _options.identityProvider);\n        this.view = new TreeNodeList(_user, container, treeDelegate, this.renderers, this.focus, this.selection, this.anchor, Object.assign(Object.assign({}, asListOptions(() => this.model, _options)), { tree: this }));\n        this.model = this.createModel(_user, this.view, _options);\n        onDidChangeCollapseStateRelay.input = this.model.onDidChangeCollapseState;\n        const onDidModelSplice = Event.forEach(this.model.onDidSplice, e => {\n            this.eventBufferer.bufferEvents(() => {\n                this.focus.onDidModelSplice(e);\n                this.selection.onDidModelSplice(e);\n            });\n        });\n        // Make sure the `forEach` always runs\n        onDidModelSplice(() => null, null, this.disposables);\n        // Active nodes can change when the model changes or when focus or selection change.\n        // We debounce it with 0 delay since these events may fire in the same stack and we only\n        // want to run this once. It also doesn't matter if it runs on the next tick since it's only\n        // a nice to have UI feature.\n        onDidChangeActiveNodes.input = Event.chain(Event.any(onDidModelSplice, this.focus.onDidChange, this.selection.onDidChange))\n            .debounce(() => null, 0)\n            .map(() => {\n            const set = new Set();\n            for (const node of this.focus.getNodes()) {\n                set.add(node);\n            }\n            for (const node of this.selection.getNodes()) {\n                set.add(node);\n            }\n            return [...set.values()];\n        }).event;\n        if (_options.keyboardSupport !== false) {\n            const onKeyDown = Event.chain(this.view.onKeyDown)\n                .filter(e => !isInputElement(e.target))\n                .map(e => new StandardKeyboardEvent(e));\n            onKeyDown.filter(e => e.keyCode === 15 /* LeftArrow */).on(this.onLeftArrow, this, this.disposables);\n            onKeyDown.filter(e => e.keyCode === 17 /* RightArrow */).on(this.onRightArrow, this, this.disposables);\n            onKeyDown.filter(e => e.keyCode === 10 /* Space */).on(this.onSpace, this, this.disposables);\n        }\n        if (_options.keyboardNavigationLabelProvider) {\n            const delegate = _options.keyboardNavigationDelegate || DefaultKeyboardNavigationDelegate;\n            this.typeFilterController = new TypeFilterController(this, this.model, this.view, filter, delegate);\n            this.focusNavigationFilter = node => this.typeFilterController.shouldAllowFocus(node);\n            this.disposables.add(this.typeFilterController);\n        }\n        this.styleElement = createStyleSheet(this.view.getHTMLElement());\n        this.getHTMLElement().classList.toggle('always', this._options.renderIndentGuides === RenderIndentGuides.Always);\n    }\n    get onDidChangeFocus() { return this.eventBufferer.wrapEvent(this.focus.onDidChange); }\n    get onDidChangeSelection() { return this.eventBufferer.wrapEvent(this.selection.onDidChange); }\n    get onMouseDblClick() { return Event.map(this.view.onMouseDblClick, asTreeMouseEvent); }\n    get onPointer() { return Event.map(this.view.onPointer, asTreeMouseEvent); }\n    get onDidFocus() { return this.view.onDidFocus; }\n    get onDidChangeModel() { return Event.signal(this.model.onDidSplice); }\n    get onDidChangeCollapseState() { return this.model.onDidChangeCollapseState; }\n    get expandOnDoubleClick() { return typeof this._options.expandOnDoubleClick === 'undefined' ? true : this._options.expandOnDoubleClick; }\n    get expandOnlyOnTwistieClick() { return typeof this._options.expandOnlyOnTwistieClick === 'undefined' ? true : this._options.expandOnlyOnTwistieClick; }\n    get onDidDispose() { return this.view.onDidDispose; }\n    updateOptions(optionsUpdate = {}) {\n        this._options = Object.assign(Object.assign({}, this._options), optionsUpdate);\n        for (const renderer of this.renderers) {\n            renderer.updateOptions(optionsUpdate);\n        }\n        this.view.updateOptions(Object.assign(Object.assign({}, this._options), { enableKeyboardNavigation: this._options.simpleKeyboardNavigation }));\n        if (this.typeFilterController) {\n            this.typeFilterController.updateOptions(this._options);\n        }\n        this._onDidUpdateOptions.fire(this._options);\n        this.getHTMLElement().classList.toggle('always', this._options.renderIndentGuides === RenderIndentGuides.Always);\n    }\n    get options() {\n        return this._options;\n    }\n    // Widget\n    getHTMLElement() {\n        return this.view.getHTMLElement();\n    }\n    get scrollTop() {\n        return this.view.scrollTop;\n    }\n    set scrollTop(scrollTop) {\n        this.view.scrollTop = scrollTop;\n    }\n    domFocus() {\n        this.view.domFocus();\n    }\n    layout(height, width) {\n        this.view.layout(height, width);\n    }\n    style(styles) {\n        const suffix = `.${this.view.domId}`;\n        const content = [];\n        if (styles.treeIndentGuidesStroke) {\n            content.push(`.monaco-list${suffix}:hover .monaco-tl-indent > .indent-guide, .monaco-list${suffix}.always .monaco-tl-indent > .indent-guide  { border-color: ${styles.treeIndentGuidesStroke.transparent(0.4)}; }`);\n            content.push(`.monaco-list${suffix} .monaco-tl-indent > .indent-guide.active { border-color: ${styles.treeIndentGuidesStroke}; }`);\n        }\n        this.styleElement.textContent = content.join('\\n');\n        this.view.style(styles);\n    }\n    // Tree navigation\n    getParentElement(location) {\n        const parentRef = this.model.getParentNodeLocation(location);\n        const parentNode = this.model.getNode(parentRef);\n        return parentNode.element;\n    }\n    getFirstElementChild(location) {\n        return this.model.getFirstElementChild(location);\n    }\n    // Tree\n    getNode(location) {\n        return this.model.getNode(location);\n    }\n    collapse(location, recursive = false) {\n        return this.model.setCollapsed(location, true, recursive);\n    }\n    expand(location, recursive = false) {\n        return this.model.setCollapsed(location, false, recursive);\n    }\n    isCollapsible(location) {\n        return this.model.isCollapsible(location);\n    }\n    setCollapsible(location, collapsible) {\n        return this.model.setCollapsible(location, collapsible);\n    }\n    isCollapsed(location) {\n        return this.model.isCollapsed(location);\n    }\n    refilter() {\n        this._onWillRefilter.fire(undefined);\n        this.model.refilter();\n    }\n    setSelection(elements, browserEvent) {\n        const nodes = elements.map(e => this.model.getNode(e));\n        this.selection.set(nodes, browserEvent);\n        const indexes = elements.map(e => this.model.getListIndex(e)).filter(i => i > -1);\n        this.view.setSelection(indexes, browserEvent, true);\n    }\n    getSelection() {\n        return this.selection.get();\n    }\n    setFocus(elements, browserEvent) {\n        const nodes = elements.map(e => this.model.getNode(e));\n        this.focus.set(nodes, browserEvent);\n        const indexes = elements.map(e => this.model.getListIndex(e)).filter(i => i > -1);\n        this.view.setFocus(indexes, browserEvent, true);\n    }\n    focusNext(n = 1, loop = false, browserEvent, filter = this.focusNavigationFilter) {\n        this.view.focusNext(n, loop, browserEvent, filter);\n    }\n    getFocus() {\n        return this.focus.get();\n    }\n    reveal(location, relativeTop) {\n        this.model.expandTo(location);\n        const index = this.model.getListIndex(location);\n        if (index === -1) {\n            return;\n        }\n        this.view.reveal(index, relativeTop);\n    }\n    /**\n     * Returns the relative position of an element rendered in the list.\n     * Returns `null` if the element isn't *entirely* in the visible viewport.\n     */\n    getRelativeTop(location) {\n        const index = this.model.getListIndex(location);\n        if (index === -1) {\n            return null;\n        }\n        return this.view.getRelativeTop(index);\n    }\n    // List\n    onLeftArrow(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        const nodes = this.view.getFocusedElements();\n        if (nodes.length === 0) {\n            return;\n        }\n        const node = nodes[0];\n        const location = this.model.getNodeLocation(node);\n        const didChange = this.model.setCollapsed(location, true);\n        if (!didChange) {\n            const parentLocation = this.model.getParentNodeLocation(location);\n            if (!parentLocation) {\n                return;\n            }\n            const parentListIndex = this.model.getListIndex(parentLocation);\n            this.view.reveal(parentListIndex);\n            this.view.setFocus([parentListIndex]);\n        }\n    }\n    onRightArrow(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        const nodes = this.view.getFocusedElements();\n        if (nodes.length === 0) {\n            return;\n        }\n        const node = nodes[0];\n        const location = this.model.getNodeLocation(node);\n        const didChange = this.model.setCollapsed(location, false);\n        if (!didChange) {\n            if (!node.children.some(child => child.visible)) {\n                return;\n            }\n            const [focusedIndex] = this.view.getFocus();\n            const firstChildIndex = focusedIndex + 1;\n            this.view.reveal(firstChildIndex);\n            this.view.setFocus([firstChildIndex]);\n        }\n    }\n    onSpace(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        const nodes = this.view.getFocusedElements();\n        if (nodes.length === 0) {\n            return;\n        }\n        const node = nodes[0];\n        const location = this.model.getNodeLocation(node);\n        const recursive = e.browserEvent.altKey;\n        this.model.setCollapsed(location, undefined, recursive);\n    }\n    dispose() {\n        dispose(this.disposables);\n        this.view.dispose();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}