{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as arrays from './arrays.js';\nimport * as types from './types.js';\nimport * as nls from '../../nls.js';\n\nfunction exceptionToErrorMessage(exception, verbose) {\n  if (verbose && (exception.stack || exception.stacktrace)) {\n    return nls.localize('stackTrace.format', \"{0}: {1}\", detectSystemErrorMessage(exception), stackToString(exception.stack) || stackToString(exception.stacktrace));\n  }\n\n  return detectSystemErrorMessage(exception);\n}\n\nfunction stackToString(stack) {\n  if (Array.isArray(stack)) {\n    return stack.join('\\n');\n  }\n\n  return stack;\n}\n\nfunction detectSystemErrorMessage(exception) {\n  // See https://nodejs.org/api/errors.html#errors_class_system_error\n  if (typeof exception.code === 'string' && typeof exception.errno === 'number' && typeof exception.syscall === 'string') {\n    return nls.localize('nodeExceptionMessage', \"A system error occurred ({0})\", exception.message);\n  }\n\n  return exception.message || nls.localize('error.defaultMessage', \"An unknown error occurred. Please consult the log for more details.\");\n}\n/**\n * Tries to generate a human readable error message out of the error. If the verbose parameter\n * is set to true, the error message will include stacktrace details if provided.\n *\n * @returns A string containing the error message.\n */\n\n\nexport function toErrorMessage(error = null, verbose = false) {\n  if (!error) {\n    return nls.localize('error.defaultMessage', \"An unknown error occurred. Please consult the log for more details.\");\n  }\n\n  if (Array.isArray(error)) {\n    const errors = arrays.coalesce(error);\n    const msg = toErrorMessage(errors[0], verbose);\n\n    if (errors.length > 1) {\n      return nls.localize('error.moreErrors', \"{0} ({1} errors in total)\", msg, errors.length);\n    }\n\n    return msg;\n  }\n\n  if (types.isString(error)) {\n    return error;\n  }\n\n  if (error.detail) {\n    const detail = error.detail;\n\n    if (detail.error) {\n      return exceptionToErrorMessage(detail.error, verbose);\n    }\n\n    if (detail.exception) {\n      return exceptionToErrorMessage(detail.exception, verbose);\n    }\n  }\n\n  if (error.stack) {\n    return exceptionToErrorMessage(error, verbose);\n  }\n\n  if (error.message) {\n    return error.message;\n  }\n\n  return nls.localize('error.defaultMessage', \"An unknown error occurred. Please consult the log for more details.\");\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/base/common/errorMessage.js"],"names":["arrays","types","nls","exceptionToErrorMessage","exception","verbose","stack","stacktrace","localize","detectSystemErrorMessage","stackToString","Array","isArray","join","code","errno","syscall","message","toErrorMessage","error","errors","coalesce","msg","length","isString","detail"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as arrays from './arrays.js';\nimport * as types from './types.js';\nimport * as nls from '../../nls.js';\nfunction exceptionToErrorMessage(exception, verbose) {\n    if (verbose && (exception.stack || exception.stacktrace)) {\n        return nls.localize('stackTrace.format', \"{0}: {1}\", detectSystemErrorMessage(exception), stackToString(exception.stack) || stackToString(exception.stacktrace));\n    }\n    return detectSystemErrorMessage(exception);\n}\nfunction stackToString(stack) {\n    if (Array.isArray(stack)) {\n        return stack.join('\\n');\n    }\n    return stack;\n}\nfunction detectSystemErrorMessage(exception) {\n    // See https://nodejs.org/api/errors.html#errors_class_system_error\n    if (typeof exception.code === 'string' && typeof exception.errno === 'number' && typeof exception.syscall === 'string') {\n        return nls.localize('nodeExceptionMessage', \"A system error occurred ({0})\", exception.message);\n    }\n    return exception.message || nls.localize('error.defaultMessage', \"An unknown error occurred. Please consult the log for more details.\");\n}\n/**\n * Tries to generate a human readable error message out of the error. If the verbose parameter\n * is set to true, the error message will include stacktrace details if provided.\n *\n * @returns A string containing the error message.\n */\nexport function toErrorMessage(error = null, verbose = false) {\n    if (!error) {\n        return nls.localize('error.defaultMessage', \"An unknown error occurred. Please consult the log for more details.\");\n    }\n    if (Array.isArray(error)) {\n        const errors = arrays.coalesce(error);\n        const msg = toErrorMessage(errors[0], verbose);\n        if (errors.length > 1) {\n            return nls.localize('error.moreErrors', \"{0} ({1} errors in total)\", msg, errors.length);\n        }\n        return msg;\n    }\n    if (types.isString(error)) {\n        return error;\n    }\n    if (error.detail) {\n        const detail = error.detail;\n        if (detail.error) {\n            return exceptionToErrorMessage(detail.error, verbose);\n        }\n        if (detail.exception) {\n            return exceptionToErrorMessage(detail.exception, verbose);\n        }\n    }\n    if (error.stack) {\n        return exceptionToErrorMessage(error, verbose);\n    }\n    if (error.message) {\n        return error.message;\n    }\n    return nls.localize('error.defaultMessage', \"An unknown error occurred. Please consult the log for more details.\");\n}\n"]},"metadata":{},"sourceType":"module"}