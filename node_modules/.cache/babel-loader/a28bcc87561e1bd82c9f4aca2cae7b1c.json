{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { transformErrorForSerialization } from '../errors.js';\nimport { Emitter } from '../event.js';\nimport { Disposable } from '../lifecycle.js';\nimport { globals, isWeb } from '../platform.js';\nimport * as types from '../types.js';\nimport * as strings from '../strings.js';\nconst INITIALIZE = '$initialize';\nlet webWorkerWarningLogged = false;\nexport function logOnceWebWorkerWarning(err) {\n  if (!isWeb) {\n    // running tests\n    return;\n  }\n\n  if (!webWorkerWarningLogged) {\n    webWorkerWarningLogged = true;\n    console.warn('Could not create web worker(s). Falling back to loading web worker code in main thread, which might cause UI freezes. Please see https://github.com/microsoft/monaco-editor#faq');\n  }\n\n  console.warn(err.message);\n}\n\nclass RequestMessage {\n  constructor(vsWorker, req, method, args) {\n    this.vsWorker = vsWorker;\n    this.req = req;\n    this.method = method;\n    this.args = args;\n    this.type = 0\n    /* Request */\n    ;\n  }\n\n}\n\nclass ReplyMessage {\n  constructor(vsWorker, seq, res, err) {\n    this.vsWorker = vsWorker;\n    this.seq = seq;\n    this.res = res;\n    this.err = err;\n    this.type = 1\n    /* Reply */\n    ;\n  }\n\n}\n\nclass SubscribeEventMessage {\n  constructor(vsWorker, req, eventName, arg) {\n    this.vsWorker = vsWorker;\n    this.req = req;\n    this.eventName = eventName;\n    this.arg = arg;\n    this.type = 2\n    /* SubscribeEvent */\n    ;\n  }\n\n}\n\nclass EventMessage {\n  constructor(vsWorker, req, event) {\n    this.vsWorker = vsWorker;\n    this.req = req;\n    this.event = event;\n    this.type = 3\n    /* Event */\n    ;\n  }\n\n}\n\nclass UnsubscribeEventMessage {\n  constructor(vsWorker, req) {\n    this.vsWorker = vsWorker;\n    this.req = req;\n    this.type = 4\n    /* UnsubscribeEvent */\n    ;\n  }\n\n}\n\nclass SimpleWorkerProtocol {\n  constructor(handler) {\n    this._workerId = -1;\n    this._handler = handler;\n    this._lastSentReq = 0;\n    this._pendingReplies = Object.create(null);\n    this._pendingEmitters = new Map();\n    this._pendingEvents = new Map();\n  }\n\n  setWorkerId(workerId) {\n    this._workerId = workerId;\n  }\n\n  sendMessage(method, args) {\n    const req = String(++this._lastSentReq);\n    return new Promise((resolve, reject) => {\n      this._pendingReplies[req] = {\n        resolve: resolve,\n        reject: reject\n      };\n\n      this._send(new RequestMessage(this._workerId, req, method, args));\n    });\n  }\n\n  listen(eventName, arg) {\n    let req = null;\n    const emitter = new Emitter({\n      onFirstListenerAdd: () => {\n        req = String(++this._lastSentReq);\n\n        this._pendingEmitters.set(req, emitter);\n\n        this._send(new SubscribeEventMessage(this._workerId, req, eventName, arg));\n      },\n      onLastListenerRemove: () => {\n        this._pendingEmitters.delete(req);\n\n        this._send(new UnsubscribeEventMessage(this._workerId, req));\n\n        req = null;\n      }\n    });\n    return emitter.event;\n  }\n\n  handleMessage(message) {\n    if (!message || !message.vsWorker) {\n      return;\n    }\n\n    if (this._workerId !== -1 && message.vsWorker !== this._workerId) {\n      return;\n    }\n\n    this._handleMessage(message);\n  }\n\n  _handleMessage(msg) {\n    switch (msg.type) {\n      case 1\n      /* Reply */\n      :\n        return this._handleReplyMessage(msg);\n\n      case 0\n      /* Request */\n      :\n        return this._handleRequestMessage(msg);\n\n      case 2\n      /* SubscribeEvent */\n      :\n        return this._handleSubscribeEventMessage(msg);\n\n      case 3\n      /* Event */\n      :\n        return this._handleEventMessage(msg);\n\n      case 4\n      /* UnsubscribeEvent */\n      :\n        return this._handleUnsubscribeEventMessage(msg);\n    }\n  }\n\n  _handleReplyMessage(replyMessage) {\n    if (!this._pendingReplies[replyMessage.seq]) {\n      console.warn('Got reply to unknown seq');\n      return;\n    }\n\n    let reply = this._pendingReplies[replyMessage.seq];\n    delete this._pendingReplies[replyMessage.seq];\n\n    if (replyMessage.err) {\n      let err = replyMessage.err;\n\n      if (replyMessage.err.$isError) {\n        err = new Error();\n        err.name = replyMessage.err.name;\n        err.message = replyMessage.err.message;\n        err.stack = replyMessage.err.stack;\n      }\n\n      reply.reject(err);\n      return;\n    }\n\n    reply.resolve(replyMessage.res);\n  }\n\n  _handleRequestMessage(requestMessage) {\n    let req = requestMessage.req;\n\n    let result = this._handler.handleMessage(requestMessage.method, requestMessage.args);\n\n    result.then(r => {\n      this._send(new ReplyMessage(this._workerId, req, r, undefined));\n    }, e => {\n      if (e.detail instanceof Error) {\n        // Loading errors have a detail property that points to the actual error\n        e.detail = transformErrorForSerialization(e.detail);\n      }\n\n      this._send(new ReplyMessage(this._workerId, req, undefined, transformErrorForSerialization(e)));\n    });\n  }\n\n  _handleSubscribeEventMessage(msg) {\n    const req = msg.req;\n\n    const disposable = this._handler.handleEvent(msg.eventName, msg.arg)(event => {\n      this._send(new EventMessage(this._workerId, req, event));\n    });\n\n    this._pendingEvents.set(req, disposable);\n  }\n\n  _handleEventMessage(msg) {\n    if (!this._pendingEmitters.has(msg.req)) {\n      console.warn('Got event for unknown req');\n      return;\n    }\n\n    this._pendingEmitters.get(msg.req).fire(msg.event);\n  }\n\n  _handleUnsubscribeEventMessage(msg) {\n    if (!this._pendingEvents.has(msg.req)) {\n      console.warn('Got unsubscribe for unknown req');\n      return;\n    }\n\n    this._pendingEvents.get(msg.req).dispose();\n\n    this._pendingEvents.delete(msg.req);\n  }\n\n  _send(msg) {\n    let transfer = [];\n\n    if (msg.type === 0\n    /* Request */\n    ) {\n      for (let i = 0; i < msg.args.length; i++) {\n        if (msg.args[i] instanceof ArrayBuffer) {\n          transfer.push(msg.args[i]);\n        }\n      }\n    } else if (msg.type === 1\n    /* Reply */\n    ) {\n      if (msg.res instanceof ArrayBuffer) {\n        transfer.push(msg.res);\n      }\n    }\n\n    this._handler.sendMessage(msg, transfer);\n  }\n\n}\n/**\n * Main thread side\n */\n\n\nexport class SimpleWorkerClient extends Disposable {\n  constructor(workerFactory, moduleId, host) {\n    super();\n    let lazyProxyReject = null;\n    this._worker = this._register(workerFactory.create('vs/base/common/worker/simpleWorker', msg => {\n      this._protocol.handleMessage(msg);\n    }, err => {\n      // in Firefox, web workers fail lazily :(\n      // we will reject the proxy\n      if (lazyProxyReject) {\n        lazyProxyReject(err);\n      }\n    }));\n    this._protocol = new SimpleWorkerProtocol({\n      sendMessage: (msg, transfer) => {\n        this._worker.postMessage(msg, transfer);\n      },\n      handleMessage: (method, args) => {\n        if (typeof host[method] !== 'function') {\n          return Promise.reject(new Error('Missing method ' + method + ' on main thread host.'));\n        }\n\n        try {\n          return Promise.resolve(host[method].apply(host, args));\n        } catch (e) {\n          return Promise.reject(e);\n        }\n      },\n      handleEvent: (eventName, arg) => {\n        if (propertyIsDynamicEvent(eventName)) {\n          const event = host[eventName].call(host, arg);\n\n          if (typeof event !== 'function') {\n            throw new Error(`Missing dynamic event ${eventName} on main thread host.`);\n          }\n\n          return event;\n        }\n\n        if (propertyIsEvent(eventName)) {\n          const event = host[eventName];\n\n          if (typeof event !== 'function') {\n            throw new Error(`Missing event ${eventName} on main thread host.`);\n          }\n\n          return event;\n        }\n\n        throw new Error(`Malformed event name ${eventName}`);\n      }\n    });\n\n    this._protocol.setWorkerId(this._worker.getId()); // Gather loader configuration\n\n\n    let loaderConfiguration = null;\n\n    if (typeof globals.require !== 'undefined' && typeof globals.require.getConfig === 'function') {\n      // Get the configuration from the Monaco AMD Loader\n      loaderConfiguration = globals.require.getConfig();\n    } else if (typeof globals.requirejs !== 'undefined') {\n      // Get the configuration from requirejs\n      loaderConfiguration = globals.requirejs.s.contexts._.config;\n    }\n\n    const hostMethods = types.getAllMethodNames(host); // Send initialize message\n\n    this._onModuleLoaded = this._protocol.sendMessage(INITIALIZE, [this._worker.getId(), JSON.parse(JSON.stringify(loaderConfiguration)), moduleId, hostMethods]); // Create proxy to loaded code\n\n    const proxyMethodRequest = (method, args) => {\n      return this._request(method, args);\n    };\n\n    const proxyListen = (eventName, arg) => {\n      return this._protocol.listen(eventName, arg);\n    };\n\n    this._lazyProxy = new Promise((resolve, reject) => {\n      lazyProxyReject = reject;\n\n      this._onModuleLoaded.then(availableMethods => {\n        resolve(createProxyObject(availableMethods, proxyMethodRequest, proxyListen));\n      }, e => {\n        reject(e);\n\n        this._onError('Worker failed to load ' + moduleId, e);\n      });\n    });\n  }\n\n  getProxyObject() {\n    return this._lazyProxy;\n  }\n\n  _request(method, args) {\n    return new Promise((resolve, reject) => {\n      this._onModuleLoaded.then(() => {\n        this._protocol.sendMessage(method, args).then(resolve, reject);\n      }, reject);\n    });\n  }\n\n  _onError(message, error) {\n    console.error(message);\n    console.info(error);\n  }\n\n}\n\nfunction propertyIsEvent(name) {\n  // Assume a property is an event if it has a form of \"onSomething\"\n  return name[0] === 'o' && name[1] === 'n' && strings.isUpperAsciiLetter(name.charCodeAt(2));\n}\n\nfunction propertyIsDynamicEvent(name) {\n  // Assume a property is a dynamic event (a method that returns an event) if it has a form of \"onDynamicSomething\"\n  return /^onDynamic/.test(name) && strings.isUpperAsciiLetter(name.charCodeAt(9));\n}\n\nfunction createProxyObject(methodNames, invoke, proxyListen) {\n  const createProxyMethod = method => {\n    return function () {\n      const args = Array.prototype.slice.call(arguments, 0);\n      return invoke(method, args);\n    };\n  };\n\n  const createProxyDynamicEvent = eventName => {\n    return function (arg) {\n      return proxyListen(eventName, arg);\n    };\n  };\n\n  let result = {};\n\n  for (const methodName of methodNames) {\n    if (propertyIsDynamicEvent(methodName)) {\n      result[methodName] = createProxyDynamicEvent(methodName);\n      continue;\n    }\n\n    if (propertyIsEvent(methodName)) {\n      result[methodName] = proxyListen(methodName, undefined);\n      continue;\n    }\n\n    result[methodName] = createProxyMethod(methodName);\n  }\n\n  return result;\n}\n/**\n * Worker side\n */\n\n\nexport class SimpleWorkerServer {\n  constructor(postMessage, requestHandlerFactory) {\n    this._requestHandlerFactory = requestHandlerFactory;\n    this._requestHandler = null;\n    this._protocol = new SimpleWorkerProtocol({\n      sendMessage: (msg, transfer) => {\n        postMessage(msg, transfer);\n      },\n      handleMessage: (method, args) => this._handleMessage(method, args),\n      handleEvent: (eventName, arg) => this._handleEvent(eventName, arg)\n    });\n  }\n\n  onmessage(msg) {\n    this._protocol.handleMessage(msg);\n  }\n\n  _handleMessage(method, args) {\n    if (method === INITIALIZE) {\n      return this.initialize(args[0], args[1], args[2], args[3]);\n    }\n\n    if (!this._requestHandler || typeof this._requestHandler[method] !== 'function') {\n      return Promise.reject(new Error('Missing requestHandler or method: ' + method));\n    }\n\n    try {\n      return Promise.resolve(this._requestHandler[method].apply(this._requestHandler, args));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n\n  _handleEvent(eventName, arg) {\n    if (!this._requestHandler) {\n      throw new Error(`Missing requestHandler`);\n    }\n\n    if (propertyIsDynamicEvent(eventName)) {\n      const event = this._requestHandler[eventName].call(this._requestHandler, arg);\n\n      if (typeof event !== 'function') {\n        throw new Error(`Missing dynamic event ${eventName} on request handler.`);\n      }\n\n      return event;\n    }\n\n    if (propertyIsEvent(eventName)) {\n      const event = this._requestHandler[eventName];\n\n      if (typeof event !== 'function') {\n        throw new Error(`Missing event ${eventName} on request handler.`);\n      }\n\n      return event;\n    }\n\n    throw new Error(`Malformed event name ${eventName}`);\n  }\n\n  initialize(workerId, loaderConfig, moduleId, hostMethods) {\n    this._protocol.setWorkerId(workerId);\n\n    const proxyMethodRequest = (method, args) => {\n      return this._protocol.sendMessage(method, args);\n    };\n\n    const proxyListen = (eventName, arg) => {\n      return this._protocol.listen(eventName, arg);\n    };\n\n    const hostProxy = createProxyObject(hostMethods, proxyMethodRequest, proxyListen);\n\n    if (this._requestHandlerFactory) {\n      // static request handler\n      this._requestHandler = this._requestHandlerFactory(hostProxy);\n      return Promise.resolve(types.getAllMethodNames(this._requestHandler));\n    }\n\n    if (loaderConfig) {\n      // Remove 'baseUrl', handling it is beyond scope for now\n      if (typeof loaderConfig.baseUrl !== 'undefined') {\n        delete loaderConfig['baseUrl'];\n      }\n\n      if (typeof loaderConfig.paths !== 'undefined') {\n        if (typeof loaderConfig.paths.vs !== 'undefined') {\n          delete loaderConfig.paths['vs'];\n        }\n      }\n\n      if (typeof loaderConfig.trustedTypesPolicy !== undefined) {\n        // don't use, it has been destroyed during serialize\n        delete loaderConfig['trustedTypesPolicy'];\n      } // Since this is in a web worker, enable catching errors\n\n\n      loaderConfig.catchError = true;\n\n      globals.require.config(loaderConfig);\n    }\n\n    return new Promise((resolve, reject) => {\n      // Use the global require to be sure to get the global config\n      // ESM-comment-begin\n      // \t\t\tconst req = (globals.require || require);\n      // ESM-comment-end\n      // ESM-uncomment-begin\n      const req = globals.require; // ESM-uncomment-end\n\n      req([moduleId], module => {\n        this._requestHandler = module.create(hostProxy);\n\n        if (!this._requestHandler) {\n          reject(new Error(`No RequestHandler!`));\n          return;\n        }\n\n        resolve(types.getAllMethodNames(this._requestHandler));\n      }, reject);\n    });\n  }\n\n}\n/**\n * Called on the worker side\n */\n\nexport function create(postMessage) {\n  return new SimpleWorkerServer(postMessage, null);\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/base/common/worker/simpleWorker.js"],"names":["transformErrorForSerialization","Emitter","Disposable","globals","isWeb","types","strings","INITIALIZE","webWorkerWarningLogged","logOnceWebWorkerWarning","err","console","warn","message","RequestMessage","constructor","vsWorker","req","method","args","type","ReplyMessage","seq","res","SubscribeEventMessage","eventName","arg","EventMessage","event","UnsubscribeEventMessage","SimpleWorkerProtocol","handler","_workerId","_handler","_lastSentReq","_pendingReplies","Object","create","_pendingEmitters","Map","_pendingEvents","setWorkerId","workerId","sendMessage","String","Promise","resolve","reject","_send","listen","emitter","onFirstListenerAdd","set","onLastListenerRemove","delete","handleMessage","_handleMessage","msg","_handleReplyMessage","_handleRequestMessage","_handleSubscribeEventMessage","_handleEventMessage","_handleUnsubscribeEventMessage","replyMessage","reply","$isError","Error","name","stack","requestMessage","result","then","r","undefined","e","detail","disposable","handleEvent","has","get","fire","dispose","transfer","i","length","ArrayBuffer","push","SimpleWorkerClient","workerFactory","moduleId","host","lazyProxyReject","_worker","_register","_protocol","postMessage","apply","propertyIsDynamicEvent","call","propertyIsEvent","getId","loaderConfiguration","require","getConfig","requirejs","s","contexts","_","config","hostMethods","getAllMethodNames","_onModuleLoaded","JSON","parse","stringify","proxyMethodRequest","_request","proxyListen","_lazyProxy","availableMethods","createProxyObject","_onError","getProxyObject","error","info","isUpperAsciiLetter","charCodeAt","test","methodNames","invoke","createProxyMethod","Array","prototype","slice","arguments","createProxyDynamicEvent","methodName","SimpleWorkerServer","requestHandlerFactory","_requestHandlerFactory","_requestHandler","_handleEvent","onmessage","initialize","loaderConfig","hostProxy","baseUrl","paths","vs","trustedTypesPolicy","catchError","module"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { transformErrorForSerialization } from '../errors.js';\nimport { Emitter } from '../event.js';\nimport { Disposable } from '../lifecycle.js';\nimport { globals, isWeb } from '../platform.js';\nimport * as types from '../types.js';\nimport * as strings from '../strings.js';\nconst INITIALIZE = '$initialize';\nlet webWorkerWarningLogged = false;\nexport function logOnceWebWorkerWarning(err) {\n    if (!isWeb) {\n        // running tests\n        return;\n    }\n    if (!webWorkerWarningLogged) {\n        webWorkerWarningLogged = true;\n        console.warn('Could not create web worker(s). Falling back to loading web worker code in main thread, which might cause UI freezes. Please see https://github.com/microsoft/monaco-editor#faq');\n    }\n    console.warn(err.message);\n}\nclass RequestMessage {\n    constructor(vsWorker, req, method, args) {\n        this.vsWorker = vsWorker;\n        this.req = req;\n        this.method = method;\n        this.args = args;\n        this.type = 0 /* Request */;\n    }\n}\nclass ReplyMessage {\n    constructor(vsWorker, seq, res, err) {\n        this.vsWorker = vsWorker;\n        this.seq = seq;\n        this.res = res;\n        this.err = err;\n        this.type = 1 /* Reply */;\n    }\n}\nclass SubscribeEventMessage {\n    constructor(vsWorker, req, eventName, arg) {\n        this.vsWorker = vsWorker;\n        this.req = req;\n        this.eventName = eventName;\n        this.arg = arg;\n        this.type = 2 /* SubscribeEvent */;\n    }\n}\nclass EventMessage {\n    constructor(vsWorker, req, event) {\n        this.vsWorker = vsWorker;\n        this.req = req;\n        this.event = event;\n        this.type = 3 /* Event */;\n    }\n}\nclass UnsubscribeEventMessage {\n    constructor(vsWorker, req) {\n        this.vsWorker = vsWorker;\n        this.req = req;\n        this.type = 4 /* UnsubscribeEvent */;\n    }\n}\nclass SimpleWorkerProtocol {\n    constructor(handler) {\n        this._workerId = -1;\n        this._handler = handler;\n        this._lastSentReq = 0;\n        this._pendingReplies = Object.create(null);\n        this._pendingEmitters = new Map();\n        this._pendingEvents = new Map();\n    }\n    setWorkerId(workerId) {\n        this._workerId = workerId;\n    }\n    sendMessage(method, args) {\n        const req = String(++this._lastSentReq);\n        return new Promise((resolve, reject) => {\n            this._pendingReplies[req] = {\n                resolve: resolve,\n                reject: reject\n            };\n            this._send(new RequestMessage(this._workerId, req, method, args));\n        });\n    }\n    listen(eventName, arg) {\n        let req = null;\n        const emitter = new Emitter({\n            onFirstListenerAdd: () => {\n                req = String(++this._lastSentReq);\n                this._pendingEmitters.set(req, emitter);\n                this._send(new SubscribeEventMessage(this._workerId, req, eventName, arg));\n            },\n            onLastListenerRemove: () => {\n                this._pendingEmitters.delete(req);\n                this._send(new UnsubscribeEventMessage(this._workerId, req));\n                req = null;\n            }\n        });\n        return emitter.event;\n    }\n    handleMessage(message) {\n        if (!message || !message.vsWorker) {\n            return;\n        }\n        if (this._workerId !== -1 && message.vsWorker !== this._workerId) {\n            return;\n        }\n        this._handleMessage(message);\n    }\n    _handleMessage(msg) {\n        switch (msg.type) {\n            case 1 /* Reply */:\n                return this._handleReplyMessage(msg);\n            case 0 /* Request */:\n                return this._handleRequestMessage(msg);\n            case 2 /* SubscribeEvent */:\n                return this._handleSubscribeEventMessage(msg);\n            case 3 /* Event */:\n                return this._handleEventMessage(msg);\n            case 4 /* UnsubscribeEvent */:\n                return this._handleUnsubscribeEventMessage(msg);\n        }\n    }\n    _handleReplyMessage(replyMessage) {\n        if (!this._pendingReplies[replyMessage.seq]) {\n            console.warn('Got reply to unknown seq');\n            return;\n        }\n        let reply = this._pendingReplies[replyMessage.seq];\n        delete this._pendingReplies[replyMessage.seq];\n        if (replyMessage.err) {\n            let err = replyMessage.err;\n            if (replyMessage.err.$isError) {\n                err = new Error();\n                err.name = replyMessage.err.name;\n                err.message = replyMessage.err.message;\n                err.stack = replyMessage.err.stack;\n            }\n            reply.reject(err);\n            return;\n        }\n        reply.resolve(replyMessage.res);\n    }\n    _handleRequestMessage(requestMessage) {\n        let req = requestMessage.req;\n        let result = this._handler.handleMessage(requestMessage.method, requestMessage.args);\n        result.then((r) => {\n            this._send(new ReplyMessage(this._workerId, req, r, undefined));\n        }, (e) => {\n            if (e.detail instanceof Error) {\n                // Loading errors have a detail property that points to the actual error\n                e.detail = transformErrorForSerialization(e.detail);\n            }\n            this._send(new ReplyMessage(this._workerId, req, undefined, transformErrorForSerialization(e)));\n        });\n    }\n    _handleSubscribeEventMessage(msg) {\n        const req = msg.req;\n        const disposable = this._handler.handleEvent(msg.eventName, msg.arg)((event) => {\n            this._send(new EventMessage(this._workerId, req, event));\n        });\n        this._pendingEvents.set(req, disposable);\n    }\n    _handleEventMessage(msg) {\n        if (!this._pendingEmitters.has(msg.req)) {\n            console.warn('Got event for unknown req');\n            return;\n        }\n        this._pendingEmitters.get(msg.req).fire(msg.event);\n    }\n    _handleUnsubscribeEventMessage(msg) {\n        if (!this._pendingEvents.has(msg.req)) {\n            console.warn('Got unsubscribe for unknown req');\n            return;\n        }\n        this._pendingEvents.get(msg.req).dispose();\n        this._pendingEvents.delete(msg.req);\n    }\n    _send(msg) {\n        let transfer = [];\n        if (msg.type === 0 /* Request */) {\n            for (let i = 0; i < msg.args.length; i++) {\n                if (msg.args[i] instanceof ArrayBuffer) {\n                    transfer.push(msg.args[i]);\n                }\n            }\n        }\n        else if (msg.type === 1 /* Reply */) {\n            if (msg.res instanceof ArrayBuffer) {\n                transfer.push(msg.res);\n            }\n        }\n        this._handler.sendMessage(msg, transfer);\n    }\n}\n/**\n * Main thread side\n */\nexport class SimpleWorkerClient extends Disposable {\n    constructor(workerFactory, moduleId, host) {\n        super();\n        let lazyProxyReject = null;\n        this._worker = this._register(workerFactory.create('vs/base/common/worker/simpleWorker', (msg) => {\n            this._protocol.handleMessage(msg);\n        }, (err) => {\n            // in Firefox, web workers fail lazily :(\n            // we will reject the proxy\n            if (lazyProxyReject) {\n                lazyProxyReject(err);\n            }\n        }));\n        this._protocol = new SimpleWorkerProtocol({\n            sendMessage: (msg, transfer) => {\n                this._worker.postMessage(msg, transfer);\n            },\n            handleMessage: (method, args) => {\n                if (typeof host[method] !== 'function') {\n                    return Promise.reject(new Error('Missing method ' + method + ' on main thread host.'));\n                }\n                try {\n                    return Promise.resolve(host[method].apply(host, args));\n                }\n                catch (e) {\n                    return Promise.reject(e);\n                }\n            },\n            handleEvent: (eventName, arg) => {\n                if (propertyIsDynamicEvent(eventName)) {\n                    const event = host[eventName].call(host, arg);\n                    if (typeof event !== 'function') {\n                        throw new Error(`Missing dynamic event ${eventName} on main thread host.`);\n                    }\n                    return event;\n                }\n                if (propertyIsEvent(eventName)) {\n                    const event = host[eventName];\n                    if (typeof event !== 'function') {\n                        throw new Error(`Missing event ${eventName} on main thread host.`);\n                    }\n                    return event;\n                }\n                throw new Error(`Malformed event name ${eventName}`);\n            }\n        });\n        this._protocol.setWorkerId(this._worker.getId());\n        // Gather loader configuration\n        let loaderConfiguration = null;\n        if (typeof globals.require !== 'undefined' && typeof globals.require.getConfig === 'function') {\n            // Get the configuration from the Monaco AMD Loader\n            loaderConfiguration = globals.require.getConfig();\n        }\n        else if (typeof globals.requirejs !== 'undefined') {\n            // Get the configuration from requirejs\n            loaderConfiguration = globals.requirejs.s.contexts._.config;\n        }\n        const hostMethods = types.getAllMethodNames(host);\n        // Send initialize message\n        this._onModuleLoaded = this._protocol.sendMessage(INITIALIZE, [\n            this._worker.getId(),\n            JSON.parse(JSON.stringify(loaderConfiguration)),\n            moduleId,\n            hostMethods,\n        ]);\n        // Create proxy to loaded code\n        const proxyMethodRequest = (method, args) => {\n            return this._request(method, args);\n        };\n        const proxyListen = (eventName, arg) => {\n            return this._protocol.listen(eventName, arg);\n        };\n        this._lazyProxy = new Promise((resolve, reject) => {\n            lazyProxyReject = reject;\n            this._onModuleLoaded.then((availableMethods) => {\n                resolve(createProxyObject(availableMethods, proxyMethodRequest, proxyListen));\n            }, (e) => {\n                reject(e);\n                this._onError('Worker failed to load ' + moduleId, e);\n            });\n        });\n    }\n    getProxyObject() {\n        return this._lazyProxy;\n    }\n    _request(method, args) {\n        return new Promise((resolve, reject) => {\n            this._onModuleLoaded.then(() => {\n                this._protocol.sendMessage(method, args).then(resolve, reject);\n            }, reject);\n        });\n    }\n    _onError(message, error) {\n        console.error(message);\n        console.info(error);\n    }\n}\nfunction propertyIsEvent(name) {\n    // Assume a property is an event if it has a form of \"onSomething\"\n    return name[0] === 'o' && name[1] === 'n' && strings.isUpperAsciiLetter(name.charCodeAt(2));\n}\nfunction propertyIsDynamicEvent(name) {\n    // Assume a property is a dynamic event (a method that returns an event) if it has a form of \"onDynamicSomething\"\n    return /^onDynamic/.test(name) && strings.isUpperAsciiLetter(name.charCodeAt(9));\n}\nfunction createProxyObject(methodNames, invoke, proxyListen) {\n    const createProxyMethod = (method) => {\n        return function () {\n            const args = Array.prototype.slice.call(arguments, 0);\n            return invoke(method, args);\n        };\n    };\n    const createProxyDynamicEvent = (eventName) => {\n        return function (arg) {\n            return proxyListen(eventName, arg);\n        };\n    };\n    let result = {};\n    for (const methodName of methodNames) {\n        if (propertyIsDynamicEvent(methodName)) {\n            result[methodName] = createProxyDynamicEvent(methodName);\n            continue;\n        }\n        if (propertyIsEvent(methodName)) {\n            result[methodName] = proxyListen(methodName, undefined);\n            continue;\n        }\n        result[methodName] = createProxyMethod(methodName);\n    }\n    return result;\n}\n/**\n * Worker side\n */\nexport class SimpleWorkerServer {\n    constructor(postMessage, requestHandlerFactory) {\n        this._requestHandlerFactory = requestHandlerFactory;\n        this._requestHandler = null;\n        this._protocol = new SimpleWorkerProtocol({\n            sendMessage: (msg, transfer) => {\n                postMessage(msg, transfer);\n            },\n            handleMessage: (method, args) => this._handleMessage(method, args),\n            handleEvent: (eventName, arg) => this._handleEvent(eventName, arg)\n        });\n    }\n    onmessage(msg) {\n        this._protocol.handleMessage(msg);\n    }\n    _handleMessage(method, args) {\n        if (method === INITIALIZE) {\n            return this.initialize(args[0], args[1], args[2], args[3]);\n        }\n        if (!this._requestHandler || typeof this._requestHandler[method] !== 'function') {\n            return Promise.reject(new Error('Missing requestHandler or method: ' + method));\n        }\n        try {\n            return Promise.resolve(this._requestHandler[method].apply(this._requestHandler, args));\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n    }\n    _handleEvent(eventName, arg) {\n        if (!this._requestHandler) {\n            throw new Error(`Missing requestHandler`);\n        }\n        if (propertyIsDynamicEvent(eventName)) {\n            const event = this._requestHandler[eventName].call(this._requestHandler, arg);\n            if (typeof event !== 'function') {\n                throw new Error(`Missing dynamic event ${eventName} on request handler.`);\n            }\n            return event;\n        }\n        if (propertyIsEvent(eventName)) {\n            const event = this._requestHandler[eventName];\n            if (typeof event !== 'function') {\n                throw new Error(`Missing event ${eventName} on request handler.`);\n            }\n            return event;\n        }\n        throw new Error(`Malformed event name ${eventName}`);\n    }\n    initialize(workerId, loaderConfig, moduleId, hostMethods) {\n        this._protocol.setWorkerId(workerId);\n        const proxyMethodRequest = (method, args) => {\n            return this._protocol.sendMessage(method, args);\n        };\n        const proxyListen = (eventName, arg) => {\n            return this._protocol.listen(eventName, arg);\n        };\n        const hostProxy = createProxyObject(hostMethods, proxyMethodRequest, proxyListen);\n        if (this._requestHandlerFactory) {\n            // static request handler\n            this._requestHandler = this._requestHandlerFactory(hostProxy);\n            return Promise.resolve(types.getAllMethodNames(this._requestHandler));\n        }\n        if (loaderConfig) {\n            // Remove 'baseUrl', handling it is beyond scope for now\n            if (typeof loaderConfig.baseUrl !== 'undefined') {\n                delete loaderConfig['baseUrl'];\n            }\n            if (typeof loaderConfig.paths !== 'undefined') {\n                if (typeof loaderConfig.paths.vs !== 'undefined') {\n                    delete loaderConfig.paths['vs'];\n                }\n            }\n            if (typeof loaderConfig.trustedTypesPolicy !== undefined) {\n                // don't use, it has been destroyed during serialize\n                delete loaderConfig['trustedTypesPolicy'];\n            }\n            // Since this is in a web worker, enable catching errors\n            loaderConfig.catchError = true;\n            globals.require.config(loaderConfig);\n        }\n        return new Promise((resolve, reject) => {\n            // Use the global require to be sure to get the global config\n            // ESM-comment-begin\n            // \t\t\tconst req = (globals.require || require);\n            // ESM-comment-end\n            // ESM-uncomment-begin\n            const req = globals.require;\n            // ESM-uncomment-end\n            req([moduleId], (module) => {\n                this._requestHandler = module.create(hostProxy);\n                if (!this._requestHandler) {\n                    reject(new Error(`No RequestHandler!`));\n                    return;\n                }\n                resolve(types.getAllMethodNames(this._requestHandler));\n            }, reject);\n        });\n    }\n}\n/**\n * Called on the worker side\n */\nexport function create(postMessage) {\n    return new SimpleWorkerServer(postMessage, null);\n}\n"]},"metadata":{},"sourceType":"module"}