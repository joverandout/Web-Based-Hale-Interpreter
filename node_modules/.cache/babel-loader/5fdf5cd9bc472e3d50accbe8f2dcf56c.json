{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nfunction _format(message, args) {\n  let result;\n\n  if (args.length === 0) {\n    result = message;\n  } else {\n    result = message.replace(/\\{(\\d+)\\}/g, function (match, rest) {\n      const index = rest[0];\n      return typeof args[index] !== 'undefined' ? args[index] : match;\n    });\n  }\n\n  return result;\n}\n\nexport function localize(data, message, ...args) {\n  return _format(message, args);\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/nls.js"],"names":["_format","message","args","result","length","replace","match","rest","index","localize","data"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,OAAT,CAAiBC,OAAjB,EAA0BC,IAA1B,EAAgC;AAC5B,MAAIC,MAAJ;;AACA,MAAID,IAAI,CAACE,MAAL,KAAgB,CAApB,EAAuB;AACnBD,IAAAA,MAAM,GAAGF,OAAT;AACH,GAFD,MAGK;AACDE,IAAAA,MAAM,GAAGF,OAAO,CAACI,OAAR,CAAgB,YAAhB,EAA8B,UAAUC,KAAV,EAAiBC,IAAjB,EAAuB;AAC1D,YAAMC,KAAK,GAAGD,IAAI,CAAC,CAAD,CAAlB;AACA,aAAO,OAAOL,IAAI,CAACM,KAAD,CAAX,KAAuB,WAAvB,GAAqCN,IAAI,CAACM,KAAD,CAAzC,GAAmDF,KAA1D;AACH,KAHQ,CAAT;AAIH;;AACD,SAAOH,MAAP;AACH;;AACD,OAAO,SAASM,QAAT,CAAkBC,IAAlB,EAAwBT,OAAxB,EAAiC,GAAGC,IAApC,EAA0C;AAC7C,SAAOF,OAAO,CAACC,OAAD,EAAUC,IAAV,CAAd;AACH","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nfunction _format(message, args) {\n    let result;\n    if (args.length === 0) {\n        result = message;\n    }\n    else {\n        result = message.replace(/\\{(\\d+)\\}/g, function (match, rest) {\n            const index = rest[0];\n            return typeof args[index] !== 'undefined' ? args[index] : match;\n        });\n    }\n    return result;\n}\nexport function localize(data, message, ...args) {\n    return _format(message, args);\n}\n"]},"metadata":{},"sourceType":"module"}