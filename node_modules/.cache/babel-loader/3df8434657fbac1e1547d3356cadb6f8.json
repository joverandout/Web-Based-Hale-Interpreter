{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { isNonEmptyArray } from '../../../../base/common/arrays.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { KeyChord } from '../../../../base/common/keyCodes.js';\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { EditorAction, registerEditorAction, registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { ICodeEditorService } from '../../../browser/services/codeEditorService.js';\nimport { CharacterSet } from '../../../common/core/characterClassifier.js';\nimport { Range } from '../../../common/core/range.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { DocumentRangeFormattingEditProviderRegistry, OnTypeFormattingEditProviderRegistry } from '../../../common/languages.js';\nimport { IEditorWorkerService } from '../../../common/services/editorWorker.js';\nimport { alertFormattingEdits, formatDocumentRangesWithSelectedProvider, formatDocumentWithSelectedProvider, getOnTypeFormattingEdits } from './format.js';\nimport { FormattingEdit } from './formattingEdit.js';\nimport * as nls from '../../../../nls.js';\nimport { CommandsRegistry, ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IEditorProgressService, Progress } from '../../../../platform/progress/common/progress.js';\nlet FormatOnType = class FormatOnType {\n  constructor(_editor, _workerService) {\n    this._editor = _editor;\n    this._workerService = _workerService;\n    this._disposables = new DisposableStore();\n    this._sessionDisposables = new DisposableStore();\n\n    this._disposables.add(OnTypeFormattingEditProviderRegistry.onDidChange(this._update, this));\n\n    this._disposables.add(_editor.onDidChangeModel(() => this._update()));\n\n    this._disposables.add(_editor.onDidChangeModelLanguage(() => this._update()));\n\n    this._disposables.add(_editor.onDidChangeConfiguration(e => {\n      if (e.hasChanged(49\n      /* formatOnType */\n      )) {\n        this._update();\n      }\n    }));\n  }\n\n  dispose() {\n    this._disposables.dispose();\n\n    this._sessionDisposables.dispose();\n  }\n\n  _update() {\n    // clean up\n    this._sessionDisposables.clear(); // we are disabled\n\n\n    if (!this._editor.getOption(49\n    /* formatOnType */\n    )) {\n      return;\n    } // no model\n\n\n    if (!this._editor.hasModel()) {\n      return;\n    }\n\n    const model = this._editor.getModel(); // no support\n\n\n    const [support] = OnTypeFormattingEditProviderRegistry.ordered(model);\n\n    if (!support || !support.autoFormatTriggerCharacters) {\n      return;\n    } // register typing listeners that will trigger the format\n\n\n    let triggerChars = new CharacterSet();\n\n    for (let ch of support.autoFormatTriggerCharacters) {\n      triggerChars.add(ch.charCodeAt(0));\n    }\n\n    this._sessionDisposables.add(this._editor.onDidType(text => {\n      let lastCharCode = text.charCodeAt(text.length - 1);\n\n      if (triggerChars.has(lastCharCode)) {\n        this._trigger(String.fromCharCode(lastCharCode));\n      }\n    }));\n  }\n\n  _trigger(ch) {\n    if (!this._editor.hasModel()) {\n      return;\n    }\n\n    if (this._editor.getSelections().length > 1 || !this._editor.getSelection().isEmpty()) {\n      return;\n    }\n\n    const model = this._editor.getModel();\n\n    const position = this._editor.getPosition();\n\n    const cts = new CancellationTokenSource(); // install a listener that checks if edits happens before the\n    // position on which we format right now. If so, we won't\n    // apply the format edits\n\n    const unbind = this._editor.onDidChangeModelContent(e => {\n      if (e.isFlush) {\n        // a model.setValue() was called\n        // cancel only once\n        cts.cancel();\n        unbind.dispose();\n        return;\n      }\n\n      for (let i = 0, len = e.changes.length; i < len; i++) {\n        const change = e.changes[i];\n\n        if (change.range.endLineNumber <= position.lineNumber) {\n          // cancel only once\n          cts.cancel();\n          unbind.dispose();\n          return;\n        }\n      }\n    });\n\n    getOnTypeFormattingEdits(this._workerService, model, position, ch, model.getFormattingOptions(), cts.token).then(edits => {\n      if (cts.token.isCancellationRequested) {\n        return;\n      }\n\n      if (isNonEmptyArray(edits)) {\n        FormattingEdit.execute(this._editor, edits, true);\n        alertFormattingEdits(edits);\n      }\n    }).finally(() => {\n      unbind.dispose();\n    });\n  }\n\n};\nFormatOnType.ID = 'editor.contrib.autoFormat';\nFormatOnType = __decorate([__param(1, IEditorWorkerService)], FormatOnType);\nlet FormatOnPaste = class FormatOnPaste {\n  constructor(editor, _instantiationService) {\n    this.editor = editor;\n    this._instantiationService = _instantiationService;\n    this._callOnDispose = new DisposableStore();\n    this._callOnModel = new DisposableStore();\n\n    this._callOnDispose.add(editor.onDidChangeConfiguration(() => this._update()));\n\n    this._callOnDispose.add(editor.onDidChangeModel(() => this._update()));\n\n    this._callOnDispose.add(editor.onDidChangeModelLanguage(() => this._update()));\n\n    this._callOnDispose.add(DocumentRangeFormattingEditProviderRegistry.onDidChange(this._update, this));\n  }\n\n  dispose() {\n    this._callOnDispose.dispose();\n\n    this._callOnModel.dispose();\n  }\n\n  _update() {\n    // clean up\n    this._callOnModel.clear(); // we are disabled\n\n\n    if (!this.editor.getOption(48\n    /* formatOnPaste */\n    )) {\n      return;\n    } // no model\n\n\n    if (!this.editor.hasModel()) {\n      return;\n    } // no formatter\n\n\n    if (!DocumentRangeFormattingEditProviderRegistry.has(this.editor.getModel())) {\n      return;\n    }\n\n    this._callOnModel.add(this.editor.onDidPaste(({\n      range\n    }) => this._trigger(range)));\n  }\n\n  _trigger(range) {\n    if (!this.editor.hasModel()) {\n      return;\n    }\n\n    if (this.editor.getSelections().length > 1) {\n      return;\n    }\n\n    this._instantiationService.invokeFunction(formatDocumentRangesWithSelectedProvider, this.editor, range, 2\n    /* Silent */\n    , Progress.None, CancellationToken.None).catch(onUnexpectedError);\n  }\n\n};\nFormatOnPaste.ID = 'editor.contrib.formatOnPaste';\nFormatOnPaste = __decorate([__param(1, IInstantiationService)], FormatOnPaste);\n\nclass FormatDocumentAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.formatDocument',\n      label: nls.localize('formatDocument.label', \"Format Document\"),\n      alias: 'Format Document',\n      precondition: ContextKeyExpr.and(EditorContextKeys.notInCompositeEditor, EditorContextKeys.writable, EditorContextKeys.hasDocumentFormattingProvider),\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 1024\n        /* Shift */\n        | 512\n        /* Alt */\n        | 36\n        /* KeyF */\n        ,\n        linux: {\n          primary: 2048\n          /* CtrlCmd */\n          | 1024\n          /* Shift */\n          | 39\n          /* KeyI */\n\n        },\n        weight: 100\n        /* EditorContrib */\n\n      },\n      contextMenuOpts: {\n        group: '1_modification',\n        order: 1.3\n      }\n    });\n  }\n\n  run(accessor, editor) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (editor.hasModel()) {\n        const instaService = accessor.get(IInstantiationService);\n        const progressService = accessor.get(IEditorProgressService);\n        yield progressService.showWhile(instaService.invokeFunction(formatDocumentWithSelectedProvider, editor, 1\n        /* Explicit */\n        , Progress.None, CancellationToken.None), 250);\n      }\n    });\n  }\n\n}\n\nclass FormatSelectionAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.formatSelection',\n      label: nls.localize('formatSelection.label', \"Format Selection\"),\n      alias: 'Format Selection',\n      precondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasDocumentSelectionFormattingProvider),\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048\n        /* CtrlCmd */\n        | 41\n        /* KeyK */\n        , 2048\n        /* CtrlCmd */\n        | 36\n        /* KeyF */\n        ),\n        weight: 100\n        /* EditorContrib */\n\n      },\n      contextMenuOpts: {\n        when: EditorContextKeys.hasNonEmptySelection,\n        group: '1_modification',\n        order: 1.31\n      }\n    });\n  }\n\n  run(accessor, editor) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!editor.hasModel()) {\n        return;\n      }\n\n      const instaService = accessor.get(IInstantiationService);\n      const model = editor.getModel();\n      const ranges = editor.getSelections().map(range => {\n        return range.isEmpty() ? new Range(range.startLineNumber, 1, range.startLineNumber, model.getLineMaxColumn(range.startLineNumber)) : range;\n      });\n      const progressService = accessor.get(IEditorProgressService);\n      yield progressService.showWhile(instaService.invokeFunction(formatDocumentRangesWithSelectedProvider, editor, ranges, 1\n      /* Explicit */\n      , Progress.None, CancellationToken.None), 250);\n    });\n  }\n\n}\n\nregisterEditorContribution(FormatOnType.ID, FormatOnType);\nregisterEditorContribution(FormatOnPaste.ID, FormatOnPaste);\nregisterEditorAction(FormatDocumentAction);\nregisterEditorAction(FormatSelectionAction); // this is the old format action that does both (format document OR format selection)\n// and we keep it here such that existing keybinding configurations etc will still work\n\nCommandsRegistry.registerCommand('editor.action.format', accessor => __awaiter(void 0, void 0, void 0, function* () {\n  const editor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n\n  if (!editor || !editor.hasModel()) {\n    return;\n  }\n\n  const commandService = accessor.get(ICommandService);\n\n  if (editor.getSelection().isEmpty()) {\n    yield commandService.executeCommand('editor.action.formatDocument');\n  } else {\n    yield commandService.executeCommand('editor.action.formatSelection');\n  }\n}));","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/contrib/format/browser/formatActions.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","isNonEmptyArray","CancellationToken","CancellationTokenSource","onUnexpectedError","KeyChord","DisposableStore","EditorAction","registerEditorAction","registerEditorContribution","ICodeEditorService","CharacterSet","Range","EditorContextKeys","DocumentRangeFormattingEditProviderRegistry","OnTypeFormattingEditProviderRegistry","IEditorWorkerService","alertFormattingEdits","formatDocumentRangesWithSelectedProvider","formatDocumentWithSelectedProvider","getOnTypeFormattingEdits","FormattingEdit","nls","CommandsRegistry","ICommandService","ContextKeyExpr","IInstantiationService","IEditorProgressService","Progress","FormatOnType","constructor","_editor","_workerService","_disposables","_sessionDisposables","add","onDidChange","_update","onDidChangeModel","onDidChangeModelLanguage","onDidChangeConfiguration","hasChanged","dispose","clear","getOption","hasModel","model","getModel","support","ordered","autoFormatTriggerCharacters","triggerChars","ch","charCodeAt","onDidType","text","lastCharCode","has","_trigger","String","fromCharCode","getSelections","getSelection","isEmpty","position","getPosition","cts","unbind","onDidChangeModelContent","isFlush","cancel","len","changes","change","range","endLineNumber","lineNumber","getFormattingOptions","token","edits","isCancellationRequested","execute","finally","ID","FormatOnPaste","editor","_instantiationService","_callOnDispose","_callOnModel","onDidPaste","invokeFunction","None","catch","FormatDocumentAction","id","label","localize","alias","precondition","and","notInCompositeEditor","writable","hasDocumentFormattingProvider","kbOpts","kbExpr","editorTextFocus","primary","linux","weight","contextMenuOpts","group","order","run","accessor","instaService","get","progressService","showWhile","FormatSelectionAction","hasDocumentSelectionFormattingProvider","when","hasNonEmptySelection","ranges","map","startLineNumber","getLineMaxColumn","registerCommand","getFocusedCodeEditor","commandService","executeCommand"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { isNonEmptyArray } from '../../../../base/common/arrays.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { KeyChord } from '../../../../base/common/keyCodes.js';\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { EditorAction, registerEditorAction, registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { ICodeEditorService } from '../../../browser/services/codeEditorService.js';\nimport { CharacterSet } from '../../../common/core/characterClassifier.js';\nimport { Range } from '../../../common/core/range.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { DocumentRangeFormattingEditProviderRegistry, OnTypeFormattingEditProviderRegistry } from '../../../common/languages.js';\nimport { IEditorWorkerService } from '../../../common/services/editorWorker.js';\nimport { alertFormattingEdits, formatDocumentRangesWithSelectedProvider, formatDocumentWithSelectedProvider, getOnTypeFormattingEdits } from './format.js';\nimport { FormattingEdit } from './formattingEdit.js';\nimport * as nls from '../../../../nls.js';\nimport { CommandsRegistry, ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IEditorProgressService, Progress } from '../../../../platform/progress/common/progress.js';\nlet FormatOnType = class FormatOnType {\n    constructor(_editor, _workerService) {\n        this._editor = _editor;\n        this._workerService = _workerService;\n        this._disposables = new DisposableStore();\n        this._sessionDisposables = new DisposableStore();\n        this._disposables.add(OnTypeFormattingEditProviderRegistry.onDidChange(this._update, this));\n        this._disposables.add(_editor.onDidChangeModel(() => this._update()));\n        this._disposables.add(_editor.onDidChangeModelLanguage(() => this._update()));\n        this._disposables.add(_editor.onDidChangeConfiguration(e => {\n            if (e.hasChanged(49 /* formatOnType */)) {\n                this._update();\n            }\n        }));\n    }\n    dispose() {\n        this._disposables.dispose();\n        this._sessionDisposables.dispose();\n    }\n    _update() {\n        // clean up\n        this._sessionDisposables.clear();\n        // we are disabled\n        if (!this._editor.getOption(49 /* formatOnType */)) {\n            return;\n        }\n        // no model\n        if (!this._editor.hasModel()) {\n            return;\n        }\n        const model = this._editor.getModel();\n        // no support\n        const [support] = OnTypeFormattingEditProviderRegistry.ordered(model);\n        if (!support || !support.autoFormatTriggerCharacters) {\n            return;\n        }\n        // register typing listeners that will trigger the format\n        let triggerChars = new CharacterSet();\n        for (let ch of support.autoFormatTriggerCharacters) {\n            triggerChars.add(ch.charCodeAt(0));\n        }\n        this._sessionDisposables.add(this._editor.onDidType((text) => {\n            let lastCharCode = text.charCodeAt(text.length - 1);\n            if (triggerChars.has(lastCharCode)) {\n                this._trigger(String.fromCharCode(lastCharCode));\n            }\n        }));\n    }\n    _trigger(ch) {\n        if (!this._editor.hasModel()) {\n            return;\n        }\n        if (this._editor.getSelections().length > 1 || !this._editor.getSelection().isEmpty()) {\n            return;\n        }\n        const model = this._editor.getModel();\n        const position = this._editor.getPosition();\n        const cts = new CancellationTokenSource();\n        // install a listener that checks if edits happens before the\n        // position on which we format right now. If so, we won't\n        // apply the format edits\n        const unbind = this._editor.onDidChangeModelContent((e) => {\n            if (e.isFlush) {\n                // a model.setValue() was called\n                // cancel only once\n                cts.cancel();\n                unbind.dispose();\n                return;\n            }\n            for (let i = 0, len = e.changes.length; i < len; i++) {\n                const change = e.changes[i];\n                if (change.range.endLineNumber <= position.lineNumber) {\n                    // cancel only once\n                    cts.cancel();\n                    unbind.dispose();\n                    return;\n                }\n            }\n        });\n        getOnTypeFormattingEdits(this._workerService, model, position, ch, model.getFormattingOptions(), cts.token).then(edits => {\n            if (cts.token.isCancellationRequested) {\n                return;\n            }\n            if (isNonEmptyArray(edits)) {\n                FormattingEdit.execute(this._editor, edits, true);\n                alertFormattingEdits(edits);\n            }\n        }).finally(() => {\n            unbind.dispose();\n        });\n    }\n};\nFormatOnType.ID = 'editor.contrib.autoFormat';\nFormatOnType = __decorate([\n    __param(1, IEditorWorkerService)\n], FormatOnType);\nlet FormatOnPaste = class FormatOnPaste {\n    constructor(editor, _instantiationService) {\n        this.editor = editor;\n        this._instantiationService = _instantiationService;\n        this._callOnDispose = new DisposableStore();\n        this._callOnModel = new DisposableStore();\n        this._callOnDispose.add(editor.onDidChangeConfiguration(() => this._update()));\n        this._callOnDispose.add(editor.onDidChangeModel(() => this._update()));\n        this._callOnDispose.add(editor.onDidChangeModelLanguage(() => this._update()));\n        this._callOnDispose.add(DocumentRangeFormattingEditProviderRegistry.onDidChange(this._update, this));\n    }\n    dispose() {\n        this._callOnDispose.dispose();\n        this._callOnModel.dispose();\n    }\n    _update() {\n        // clean up\n        this._callOnModel.clear();\n        // we are disabled\n        if (!this.editor.getOption(48 /* formatOnPaste */)) {\n            return;\n        }\n        // no model\n        if (!this.editor.hasModel()) {\n            return;\n        }\n        // no formatter\n        if (!DocumentRangeFormattingEditProviderRegistry.has(this.editor.getModel())) {\n            return;\n        }\n        this._callOnModel.add(this.editor.onDidPaste(({ range }) => this._trigger(range)));\n    }\n    _trigger(range) {\n        if (!this.editor.hasModel()) {\n            return;\n        }\n        if (this.editor.getSelections().length > 1) {\n            return;\n        }\n        this._instantiationService.invokeFunction(formatDocumentRangesWithSelectedProvider, this.editor, range, 2 /* Silent */, Progress.None, CancellationToken.None).catch(onUnexpectedError);\n    }\n};\nFormatOnPaste.ID = 'editor.contrib.formatOnPaste';\nFormatOnPaste = __decorate([\n    __param(1, IInstantiationService)\n], FormatOnPaste);\nclass FormatDocumentAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.formatDocument',\n            label: nls.localize('formatDocument.label', \"Format Document\"),\n            alias: 'Format Document',\n            precondition: ContextKeyExpr.and(EditorContextKeys.notInCompositeEditor, EditorContextKeys.writable, EditorContextKeys.hasDocumentFormattingProvider),\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 1024 /* Shift */ | 512 /* Alt */ | 36 /* KeyF */,\n                linux: { primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 39 /* KeyI */ },\n                weight: 100 /* EditorContrib */\n            },\n            contextMenuOpts: {\n                group: '1_modification',\n                order: 1.3\n            }\n        });\n    }\n    run(accessor, editor) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (editor.hasModel()) {\n                const instaService = accessor.get(IInstantiationService);\n                const progressService = accessor.get(IEditorProgressService);\n                yield progressService.showWhile(instaService.invokeFunction(formatDocumentWithSelectedProvider, editor, 1 /* Explicit */, Progress.None, CancellationToken.None), 250);\n            }\n        });\n    }\n}\nclass FormatSelectionAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.formatSelection',\n            label: nls.localize('formatSelection.label', \"Format Selection\"),\n            alias: 'Format Selection',\n            precondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasDocumentSelectionFormattingProvider),\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* CtrlCmd */ | 41 /* KeyK */, 2048 /* CtrlCmd */ | 36 /* KeyF */),\n                weight: 100 /* EditorContrib */\n            },\n            contextMenuOpts: {\n                when: EditorContextKeys.hasNonEmptySelection,\n                group: '1_modification',\n                order: 1.31\n            }\n        });\n    }\n    run(accessor, editor) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!editor.hasModel()) {\n                return;\n            }\n            const instaService = accessor.get(IInstantiationService);\n            const model = editor.getModel();\n            const ranges = editor.getSelections().map(range => {\n                return range.isEmpty()\n                    ? new Range(range.startLineNumber, 1, range.startLineNumber, model.getLineMaxColumn(range.startLineNumber))\n                    : range;\n            });\n            const progressService = accessor.get(IEditorProgressService);\n            yield progressService.showWhile(instaService.invokeFunction(formatDocumentRangesWithSelectedProvider, editor, ranges, 1 /* Explicit */, Progress.None, CancellationToken.None), 250);\n        });\n    }\n}\nregisterEditorContribution(FormatOnType.ID, FormatOnType);\nregisterEditorContribution(FormatOnPaste.ID, FormatOnPaste);\nregisterEditorAction(FormatDocumentAction);\nregisterEditorAction(FormatSelectionAction);\n// this is the old format action that does both (format document OR format selection)\n// and we keep it here such that existing keybinding configurations etc will still work\nCommandsRegistry.registerCommand('editor.action.format', (accessor) => __awaiter(void 0, void 0, void 0, function* () {\n    const editor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n    if (!editor || !editor.hasModel()) {\n        return;\n    }\n    const commandService = accessor.get(ICommandService);\n    if (editor.getSelection().isEmpty()) {\n        yield commandService.executeCommand('editor.action.formatDocument');\n    }\n    else {\n        yield commandService.executeCommand('editor.action.formatSelection');\n    }\n}));\n"]},"metadata":{},"sourceType":"module"}