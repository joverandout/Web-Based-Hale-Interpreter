{"ast":null,"code":"var inherits = require('util').inherits;\n\nvar Connection = require('./Connection');\n\nvar Events = require('events');\n\nmodule.exports = PoolConnection;\ninherits(PoolConnection, Connection);\n\nfunction PoolConnection(pool, options) {\n  Connection.call(this, options);\n  this._pool = pool; // Bind connection to pool domain\n\n  if (Events.usingDomains) {\n    this.domain = pool.domain;\n  } // When a fatal error occurs the connection's protocol ends, which will cause\n  // the connection to end as well, thus we only need to watch for the end event\n  // and we will be notified of disconnects.\n\n\n  this.on('end', this._removeFromPool);\n  this.on('error', function (err) {\n    if (err.fatal) {\n      this._removeFromPool();\n    }\n  });\n}\n\nPoolConnection.prototype.release = function release() {\n  var pool = this._pool;\n\n  if (!pool || pool._closed) {\n    return undefined;\n  }\n\n  return pool.releaseConnection(this);\n}; // TODO: Remove this when we are removing PoolConnection#end\n\n\nPoolConnection.prototype._realEnd = Connection.prototype.end;\n\nPoolConnection.prototype.end = function () {\n  console.warn('Calling conn.end() to release a pooled connection is ' + 'deprecated. In next version calling conn.end() will be ' + 'restored to default conn.end() behavior. Use ' + 'conn.release() instead.');\n  this.release();\n};\n\nPoolConnection.prototype.destroy = function () {\n  Connection.prototype.destroy.apply(this, arguments);\n\n  this._removeFromPool(this);\n};\n\nPoolConnection.prototype._removeFromPool = function _removeFromPool() {\n  if (!this._pool || this._pool._closed) {\n    return;\n  }\n\n  var pool = this._pool;\n  this._pool = null;\n\n  pool._purgeConnection(this);\n};","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/mysql/lib/PoolConnection.js"],"names":["inherits","require","Connection","Events","module","exports","PoolConnection","pool","options","call","_pool","usingDomains","domain","on","_removeFromPool","err","fatal","prototype","release","_closed","undefined","releaseConnection","_realEnd","end","console","warn","destroy","apply","arguments","_purgeConnection"],"mappings":"AAAA,IAAIA,QAAQ,GAAKC,OAAO,CAAC,MAAD,CAAP,CAAgBD,QAAjC;;AACA,IAAIE,UAAU,GAAGD,OAAO,CAAC,cAAD,CAAxB;;AACA,IAAIE,MAAM,GAAOF,OAAO,CAAC,QAAD,CAAxB;;AAEAG,MAAM,CAACC,OAAP,GAAiBC,cAAjB;AACAN,QAAQ,CAACM,cAAD,EAAiBJ,UAAjB,CAAR;;AAEA,SAASI,cAAT,CAAwBC,IAAxB,EAA8BC,OAA9B,EAAuC;AACrCN,EAAAA,UAAU,CAACO,IAAX,CAAgB,IAAhB,EAAsBD,OAAtB;AACA,OAAKE,KAAL,GAAcH,IAAd,CAFqC,CAIrC;;AACA,MAAIJ,MAAM,CAACQ,YAAX,EAAyB;AACvB,SAAKC,MAAL,GAAcL,IAAI,CAACK,MAAnB;AACD,GAPoC,CASrC;AACA;AACA;;;AACA,OAAKC,EAAL,CAAQ,KAAR,EAAe,KAAKC,eAApB;AACA,OAAKD,EAAL,CAAQ,OAAR,EAAiB,UAAUE,GAAV,EAAe;AAC9B,QAAIA,GAAG,CAACC,KAAR,EAAe;AACb,WAAKF,eAAL;AACD;AACF,GAJD;AAKD;;AAEDR,cAAc,CAACW,SAAf,CAAyBC,OAAzB,GAAmC,SAASA,OAAT,GAAmB;AACpD,MAAIX,IAAI,GAAG,KAAKG,KAAhB;;AAEA,MAAI,CAACH,IAAD,IAASA,IAAI,CAACY,OAAlB,EAA2B;AACzB,WAAOC,SAAP;AACD;;AAED,SAAOb,IAAI,CAACc,iBAAL,CAAuB,IAAvB,CAAP;AACD,CARD,C,CAUA;;;AACAf,cAAc,CAACW,SAAf,CAAyBK,QAAzB,GAAoCpB,UAAU,CAACe,SAAX,CAAqBM,GAAzD;;AAEAjB,cAAc,CAACW,SAAf,CAAyBM,GAAzB,GAA+B,YAAY;AACzCC,EAAAA,OAAO,CAACC,IAAR,CACE,0DACA,yDADA,GAEA,+CAFA,GAGA,yBAJF;AAMA,OAAKP,OAAL;AACD,CARD;;AAUAZ,cAAc,CAACW,SAAf,CAAyBS,OAAzB,GAAmC,YAAY;AAC7CxB,EAAAA,UAAU,CAACe,SAAX,CAAqBS,OAArB,CAA6BC,KAA7B,CAAmC,IAAnC,EAAyCC,SAAzC;;AACA,OAAKd,eAAL,CAAqB,IAArB;AACD,CAHD;;AAKAR,cAAc,CAACW,SAAf,CAAyBH,eAAzB,GAA2C,SAASA,eAAT,GAA2B;AACpE,MAAI,CAAC,KAAKJ,KAAN,IAAe,KAAKA,KAAL,CAAWS,OAA9B,EAAuC;AACrC;AACD;;AAED,MAAIZ,IAAI,GAAG,KAAKG,KAAhB;AACA,OAAKA,KAAL,GAAa,IAAb;;AAEAH,EAAAA,IAAI,CAACsB,gBAAL,CAAsB,IAAtB;AACD,CATD","sourcesContent":["var inherits   = require('util').inherits;\nvar Connection = require('./Connection');\nvar Events     = require('events');\n\nmodule.exports = PoolConnection;\ninherits(PoolConnection, Connection);\n\nfunction PoolConnection(pool, options) {\n  Connection.call(this, options);\n  this._pool  = pool;\n\n  // Bind connection to pool domain\n  if (Events.usingDomains) {\n    this.domain = pool.domain;\n  }\n\n  // When a fatal error occurs the connection's protocol ends, which will cause\n  // the connection to end as well, thus we only need to watch for the end event\n  // and we will be notified of disconnects.\n  this.on('end', this._removeFromPool);\n  this.on('error', function (err) {\n    if (err.fatal) {\n      this._removeFromPool();\n    }\n  });\n}\n\nPoolConnection.prototype.release = function release() {\n  var pool = this._pool;\n\n  if (!pool || pool._closed) {\n    return undefined;\n  }\n\n  return pool.releaseConnection(this);\n};\n\n// TODO: Remove this when we are removing PoolConnection#end\nPoolConnection.prototype._realEnd = Connection.prototype.end;\n\nPoolConnection.prototype.end = function () {\n  console.warn(\n    'Calling conn.end() to release a pooled connection is ' +\n    'deprecated. In next version calling conn.end() will be ' +\n    'restored to default conn.end() behavior. Use ' +\n    'conn.release() instead.'\n  );\n  this.release();\n};\n\nPoolConnection.prototype.destroy = function () {\n  Connection.prototype.destroy.apply(this, arguments);\n  this._removeFromPool(this);\n};\n\nPoolConnection.prototype._removeFromPool = function _removeFromPool() {\n  if (!this._pool || this._pool._closed) {\n    return;\n  }\n\n  var pool = this._pool;\n  this._pool = null;\n\n  pool._purgeConnection(this);\n};\n"]},"metadata":{},"sourceType":"script"}