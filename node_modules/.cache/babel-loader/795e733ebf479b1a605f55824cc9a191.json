{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { editorOptionsRegistry } from './editorOptions.js';\nimport { EDITOR_MODEL_DEFAULTS } from '../core/textModelDefaults.js';\nimport * as nls from '../../../nls.js';\nimport { Extensions } from '../../../platform/configuration/common/configurationRegistry.js';\nimport { Registry } from '../../../platform/registry/common/platform.js';\nexport const editorConfigurationBaseNode = Object.freeze({\n  id: 'editor',\n  order: 5,\n  type: 'object',\n  title: nls.localize('editorConfigurationTitle', \"Editor\"),\n  scope: 5\n  /* LANGUAGE_OVERRIDABLE */\n\n});\nconst editorConfiguration = Object.assign(Object.assign({}, editorConfigurationBaseNode), {\n  properties: {\n    'editor.tabSize': {\n      type: 'number',\n      default: EDITOR_MODEL_DEFAULTS.tabSize,\n      minimum: 1,\n      markdownDescription: nls.localize('tabSize', \"The number of spaces a tab is equal to. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on.\")\n    },\n    // 'editor.indentSize': {\n    // \t'anyOf': [\n    // \t\t{\n    // \t\t\ttype: 'string',\n    // \t\t\tenum: ['tabSize']\n    // \t\t},\n    // \t\t{\n    // \t\t\ttype: 'number',\n    // \t\t\tminimum: 1\n    // \t\t}\n    // \t],\n    // \tdefault: 'tabSize',\n    // \tmarkdownDescription: nls.localize('indentSize', \"The number of spaces used for indentation or 'tabSize' to use the value from `#editor.tabSize#`. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on.\")\n    // },\n    'editor.insertSpaces': {\n      type: 'boolean',\n      default: EDITOR_MODEL_DEFAULTS.insertSpaces,\n      markdownDescription: nls.localize('insertSpaces', \"Insert spaces when pressing `Tab`. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on.\")\n    },\n    'editor.detectIndentation': {\n      type: 'boolean',\n      default: EDITOR_MODEL_DEFAULTS.detectIndentation,\n      markdownDescription: nls.localize('detectIndentation', \"Controls whether `#editor.tabSize#` and `#editor.insertSpaces#` will be automatically detected when a file is opened based on the file contents.\")\n    },\n    'editor.trimAutoWhitespace': {\n      type: 'boolean',\n      default: EDITOR_MODEL_DEFAULTS.trimAutoWhitespace,\n      description: nls.localize('trimAutoWhitespace', \"Remove trailing auto inserted whitespace.\")\n    },\n    'editor.largeFileOptimizations': {\n      type: 'boolean',\n      default: EDITOR_MODEL_DEFAULTS.largeFileOptimizations,\n      description: nls.localize('largeFileOptimizations', \"Special handling for large files to disable certain memory intensive features.\")\n    },\n    'editor.wordBasedSuggestions': {\n      type: 'boolean',\n      default: true,\n      description: nls.localize('wordBasedSuggestions', \"Controls whether completions should be computed based on words in the document.\")\n    },\n    'editor.wordBasedSuggestionsMode': {\n      enum: ['currentDocument', 'matchingDocuments', 'allDocuments'],\n      default: 'matchingDocuments',\n      enumDescriptions: [nls.localize('wordBasedSuggestionsMode.currentDocument', 'Only suggest words from the active document.'), nls.localize('wordBasedSuggestionsMode.matchingDocuments', 'Suggest words from all open documents of the same language.'), nls.localize('wordBasedSuggestionsMode.allDocuments', 'Suggest words from all open documents.')],\n      description: nls.localize('wordBasedSuggestionsMode', \"Controls from which documents word based completions are computed.\")\n    },\n    'editor.semanticHighlighting.enabled': {\n      enum: [true, false, 'configuredByTheme'],\n      enumDescriptions: [nls.localize('semanticHighlighting.true', 'Semantic highlighting enabled for all color themes.'), nls.localize('semanticHighlighting.false', 'Semantic highlighting disabled for all color themes.'), nls.localize('semanticHighlighting.configuredByTheme', 'Semantic highlighting is configured by the current color theme\\'s `semanticHighlighting` setting.')],\n      default: 'configuredByTheme',\n      description: nls.localize('semanticHighlighting.enabled', \"Controls whether the semanticHighlighting is shown for the languages that support it.\")\n    },\n    'editor.stablePeek': {\n      type: 'boolean',\n      default: false,\n      markdownDescription: nls.localize('stablePeek', \"Keep peek editors open even when double clicking their content or when hitting `Escape`.\")\n    },\n    'editor.maxTokenizationLineLength': {\n      type: 'integer',\n      default: 20000,\n      description: nls.localize('maxTokenizationLineLength', \"Lines above this length will not be tokenized for performance reasons\")\n    },\n    'editor.language.brackets': {\n      type: 'array',\n      default: false,\n      description: nls.localize('schema.brackets', 'Defines the bracket symbols that increase or decrease the indentation.'),\n      items: {\n        type: 'array',\n        items: [{\n          type: 'string',\n          description: nls.localize('schema.openBracket', 'The opening bracket character or string sequence.')\n        }, {\n          type: 'string',\n          description: nls.localize('schema.closeBracket', 'The closing bracket character or string sequence.')\n        }]\n      }\n    },\n    'editor.language.colorizedBracketPairs': {\n      type: 'array',\n      default: false,\n      description: nls.localize('schema.colorizedBracketPairs', 'Defines the bracket pairs that are colorized by their nesting level if bracket pair colorization is enabled.'),\n      items: {\n        type: 'array',\n        items: [{\n          type: 'string',\n          description: nls.localize('schema.openBracket', 'The opening bracket character or string sequence.')\n        }, {\n          type: 'string',\n          description: nls.localize('schema.closeBracket', 'The closing bracket character or string sequence.')\n        }]\n      }\n    },\n    'diffEditor.maxComputationTime': {\n      type: 'number',\n      default: 5000,\n      description: nls.localize('maxComputationTime', \"Timeout in milliseconds after which diff computation is cancelled. Use 0 for no timeout.\")\n    },\n    'diffEditor.maxFileSize': {\n      type: 'number',\n      default: 50,\n      description: nls.localize('maxFileSize', \"Maximum file size in MB for which to compute diffs. Use 0 for no limit.\")\n    },\n    'diffEditor.renderSideBySide': {\n      type: 'boolean',\n      default: true,\n      description: nls.localize('sideBySide', \"Controls whether the diff editor shows the diff side by side or inline.\")\n    },\n    'diffEditor.ignoreTrimWhitespace': {\n      type: 'boolean',\n      default: true,\n      description: nls.localize('ignoreTrimWhitespace', \"When enabled, the diff editor ignores changes in leading or trailing whitespace.\")\n    },\n    'diffEditor.renderIndicators': {\n      type: 'boolean',\n      default: true,\n      description: nls.localize('renderIndicators', \"Controls whether the diff editor shows +/- indicators for added/removed changes.\")\n    },\n    'diffEditor.codeLens': {\n      type: 'boolean',\n      default: false,\n      description: nls.localize('codeLens', \"Controls whether the editor shows CodeLens.\")\n    },\n    'diffEditor.wordWrap': {\n      type: 'string',\n      enum: ['off', 'on', 'inherit'],\n      default: 'inherit',\n      markdownEnumDescriptions: [nls.localize('wordWrap.off', \"Lines will never wrap.\"), nls.localize('wordWrap.on', \"Lines will wrap at the viewport width.\"), nls.localize('wordWrap.inherit', \"Lines will wrap according to the `#editor.wordWrap#` setting.\")]\n    }\n  }\n});\n\nfunction isConfigurationPropertySchema(x) {\n  return typeof x.type !== 'undefined' || typeof x.anyOf !== 'undefined';\n} // Add properties from the Editor Option Registry\n\n\nfor (const editorOption of editorOptionsRegistry) {\n  const schema = editorOption.schema;\n\n  if (typeof schema !== 'undefined') {\n    if (isConfigurationPropertySchema(schema)) {\n      // This is a single schema contribution\n      editorConfiguration.properties[`editor.${editorOption.name}`] = schema;\n    } else {\n      for (const key in schema) {\n        if (Object.hasOwnProperty.call(schema, key)) {\n          editorConfiguration.properties[key] = schema[key];\n        }\n      }\n    }\n  }\n}\n\nlet cachedEditorConfigurationKeys = null;\n\nfunction getEditorConfigurationKeys() {\n  if (cachedEditorConfigurationKeys === null) {\n    cachedEditorConfigurationKeys = Object.create(null);\n    Object.keys(editorConfiguration.properties).forEach(prop => {\n      cachedEditorConfigurationKeys[prop] = true;\n    });\n  }\n\n  return cachedEditorConfigurationKeys;\n}\n\nexport function isEditorConfigurationKey(key) {\n  const editorConfigurationKeys = getEditorConfigurationKeys();\n  return editorConfigurationKeys[`editor.${key}`] || false;\n}\nexport function isDiffEditorConfigurationKey(key) {\n  const editorConfigurationKeys = getEditorConfigurationKeys();\n  return editorConfigurationKeys[`diffEditor.${key}`] || false;\n}\nconst configurationRegistry = Registry.as(Extensions.Configuration);\nconfigurationRegistry.registerConfiguration(editorConfiguration);","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/common/config/editorConfigurationSchema.js"],"names":["editorOptionsRegistry","EDITOR_MODEL_DEFAULTS","nls","Extensions","Registry","editorConfigurationBaseNode","Object","freeze","id","order","type","title","localize","scope","editorConfiguration","assign","properties","default","tabSize","minimum","markdownDescription","insertSpaces","detectIndentation","trimAutoWhitespace","description","largeFileOptimizations","enum","enumDescriptions","items","markdownEnumDescriptions","isConfigurationPropertySchema","x","anyOf","editorOption","schema","name","key","hasOwnProperty","call","cachedEditorConfigurationKeys","getEditorConfigurationKeys","create","keys","forEach","prop","isEditorConfigurationKey","editorConfigurationKeys","isDiffEditorConfigurationKey","configurationRegistry","as","Configuration","registerConfiguration"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { editorOptionsRegistry } from './editorOptions.js';\nimport { EDITOR_MODEL_DEFAULTS } from '../core/textModelDefaults.js';\nimport * as nls from '../../../nls.js';\nimport { Extensions } from '../../../platform/configuration/common/configurationRegistry.js';\nimport { Registry } from '../../../platform/registry/common/platform.js';\nexport const editorConfigurationBaseNode = Object.freeze({\n    id: 'editor',\n    order: 5,\n    type: 'object',\n    title: nls.localize('editorConfigurationTitle', \"Editor\"),\n    scope: 5 /* LANGUAGE_OVERRIDABLE */,\n});\nconst editorConfiguration = Object.assign(Object.assign({}, editorConfigurationBaseNode), { properties: {\n        'editor.tabSize': {\n            type: 'number',\n            default: EDITOR_MODEL_DEFAULTS.tabSize,\n            minimum: 1,\n            markdownDescription: nls.localize('tabSize', \"The number of spaces a tab is equal to. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on.\")\n        },\n        // 'editor.indentSize': {\n        // \t'anyOf': [\n        // \t\t{\n        // \t\t\ttype: 'string',\n        // \t\t\tenum: ['tabSize']\n        // \t\t},\n        // \t\t{\n        // \t\t\ttype: 'number',\n        // \t\t\tminimum: 1\n        // \t\t}\n        // \t],\n        // \tdefault: 'tabSize',\n        // \tmarkdownDescription: nls.localize('indentSize', \"The number of spaces used for indentation or 'tabSize' to use the value from `#editor.tabSize#`. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on.\")\n        // },\n        'editor.insertSpaces': {\n            type: 'boolean',\n            default: EDITOR_MODEL_DEFAULTS.insertSpaces,\n            markdownDescription: nls.localize('insertSpaces', \"Insert spaces when pressing `Tab`. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on.\")\n        },\n        'editor.detectIndentation': {\n            type: 'boolean',\n            default: EDITOR_MODEL_DEFAULTS.detectIndentation,\n            markdownDescription: nls.localize('detectIndentation', \"Controls whether `#editor.tabSize#` and `#editor.insertSpaces#` will be automatically detected when a file is opened based on the file contents.\")\n        },\n        'editor.trimAutoWhitespace': {\n            type: 'boolean',\n            default: EDITOR_MODEL_DEFAULTS.trimAutoWhitespace,\n            description: nls.localize('trimAutoWhitespace', \"Remove trailing auto inserted whitespace.\")\n        },\n        'editor.largeFileOptimizations': {\n            type: 'boolean',\n            default: EDITOR_MODEL_DEFAULTS.largeFileOptimizations,\n            description: nls.localize('largeFileOptimizations', \"Special handling for large files to disable certain memory intensive features.\")\n        },\n        'editor.wordBasedSuggestions': {\n            type: 'boolean',\n            default: true,\n            description: nls.localize('wordBasedSuggestions', \"Controls whether completions should be computed based on words in the document.\")\n        },\n        'editor.wordBasedSuggestionsMode': {\n            enum: ['currentDocument', 'matchingDocuments', 'allDocuments'],\n            default: 'matchingDocuments',\n            enumDescriptions: [\n                nls.localize('wordBasedSuggestionsMode.currentDocument', 'Only suggest words from the active document.'),\n                nls.localize('wordBasedSuggestionsMode.matchingDocuments', 'Suggest words from all open documents of the same language.'),\n                nls.localize('wordBasedSuggestionsMode.allDocuments', 'Suggest words from all open documents.')\n            ],\n            description: nls.localize('wordBasedSuggestionsMode', \"Controls from which documents word based completions are computed.\")\n        },\n        'editor.semanticHighlighting.enabled': {\n            enum: [true, false, 'configuredByTheme'],\n            enumDescriptions: [\n                nls.localize('semanticHighlighting.true', 'Semantic highlighting enabled for all color themes.'),\n                nls.localize('semanticHighlighting.false', 'Semantic highlighting disabled for all color themes.'),\n                nls.localize('semanticHighlighting.configuredByTheme', 'Semantic highlighting is configured by the current color theme\\'s `semanticHighlighting` setting.')\n            ],\n            default: 'configuredByTheme',\n            description: nls.localize('semanticHighlighting.enabled', \"Controls whether the semanticHighlighting is shown for the languages that support it.\")\n        },\n        'editor.stablePeek': {\n            type: 'boolean',\n            default: false,\n            markdownDescription: nls.localize('stablePeek', \"Keep peek editors open even when double clicking their content or when hitting `Escape`.\")\n        },\n        'editor.maxTokenizationLineLength': {\n            type: 'integer',\n            default: 20000,\n            description: nls.localize('maxTokenizationLineLength', \"Lines above this length will not be tokenized for performance reasons\")\n        },\n        'editor.language.brackets': {\n            type: 'array',\n            default: false,\n            description: nls.localize('schema.brackets', 'Defines the bracket symbols that increase or decrease the indentation.'),\n            items: {\n                type: 'array',\n                items: [\n                    {\n                        type: 'string',\n                        description: nls.localize('schema.openBracket', 'The opening bracket character or string sequence.')\n                    },\n                    {\n                        type: 'string',\n                        description: nls.localize('schema.closeBracket', 'The closing bracket character or string sequence.')\n                    }\n                ]\n            }\n        },\n        'editor.language.colorizedBracketPairs': {\n            type: 'array',\n            default: false,\n            description: nls.localize('schema.colorizedBracketPairs', 'Defines the bracket pairs that are colorized by their nesting level if bracket pair colorization is enabled.'),\n            items: {\n                type: 'array',\n                items: [\n                    {\n                        type: 'string',\n                        description: nls.localize('schema.openBracket', 'The opening bracket character or string sequence.')\n                    },\n                    {\n                        type: 'string',\n                        description: nls.localize('schema.closeBracket', 'The closing bracket character or string sequence.')\n                    }\n                ]\n            }\n        },\n        'diffEditor.maxComputationTime': {\n            type: 'number',\n            default: 5000,\n            description: nls.localize('maxComputationTime', \"Timeout in milliseconds after which diff computation is cancelled. Use 0 for no timeout.\")\n        },\n        'diffEditor.maxFileSize': {\n            type: 'number',\n            default: 50,\n            description: nls.localize('maxFileSize', \"Maximum file size in MB for which to compute diffs. Use 0 for no limit.\")\n        },\n        'diffEditor.renderSideBySide': {\n            type: 'boolean',\n            default: true,\n            description: nls.localize('sideBySide', \"Controls whether the diff editor shows the diff side by side or inline.\")\n        },\n        'diffEditor.ignoreTrimWhitespace': {\n            type: 'boolean',\n            default: true,\n            description: nls.localize('ignoreTrimWhitespace', \"When enabled, the diff editor ignores changes in leading or trailing whitespace.\")\n        },\n        'diffEditor.renderIndicators': {\n            type: 'boolean',\n            default: true,\n            description: nls.localize('renderIndicators', \"Controls whether the diff editor shows +/- indicators for added/removed changes.\")\n        },\n        'diffEditor.codeLens': {\n            type: 'boolean',\n            default: false,\n            description: nls.localize('codeLens', \"Controls whether the editor shows CodeLens.\")\n        },\n        'diffEditor.wordWrap': {\n            type: 'string',\n            enum: ['off', 'on', 'inherit'],\n            default: 'inherit',\n            markdownEnumDescriptions: [\n                nls.localize('wordWrap.off', \"Lines will never wrap.\"),\n                nls.localize('wordWrap.on', \"Lines will wrap at the viewport width.\"),\n                nls.localize('wordWrap.inherit', \"Lines will wrap according to the `#editor.wordWrap#` setting.\"),\n            ]\n        }\n    } });\nfunction isConfigurationPropertySchema(x) {\n    return (typeof x.type !== 'undefined' || typeof x.anyOf !== 'undefined');\n}\n// Add properties from the Editor Option Registry\nfor (const editorOption of editorOptionsRegistry) {\n    const schema = editorOption.schema;\n    if (typeof schema !== 'undefined') {\n        if (isConfigurationPropertySchema(schema)) {\n            // This is a single schema contribution\n            editorConfiguration.properties[`editor.${editorOption.name}`] = schema;\n        }\n        else {\n            for (const key in schema) {\n                if (Object.hasOwnProperty.call(schema, key)) {\n                    editorConfiguration.properties[key] = schema[key];\n                }\n            }\n        }\n    }\n}\nlet cachedEditorConfigurationKeys = null;\nfunction getEditorConfigurationKeys() {\n    if (cachedEditorConfigurationKeys === null) {\n        cachedEditorConfigurationKeys = Object.create(null);\n        Object.keys(editorConfiguration.properties).forEach((prop) => {\n            cachedEditorConfigurationKeys[prop] = true;\n        });\n    }\n    return cachedEditorConfigurationKeys;\n}\nexport function isEditorConfigurationKey(key) {\n    const editorConfigurationKeys = getEditorConfigurationKeys();\n    return (editorConfigurationKeys[`editor.${key}`] || false);\n}\nexport function isDiffEditorConfigurationKey(key) {\n    const editorConfigurationKeys = getEditorConfigurationKeys();\n    return (editorConfigurationKeys[`diffEditor.${key}`] || false);\n}\nconst configurationRegistry = Registry.as(Extensions.Configuration);\nconfigurationRegistry.registerConfiguration(editorConfiguration);\n"]},"metadata":{},"sourceType":"module"}