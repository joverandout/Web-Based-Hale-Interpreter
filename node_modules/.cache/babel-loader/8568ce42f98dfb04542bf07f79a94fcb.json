{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { Color } from '../../../../base/common/color.js';\nimport { ViewPart } from '../../view/viewPart.js';\nimport { Position } from '../../../common/core/position.js';\nimport { TokenizationRegistry } from '../../../common/languages.js';\nimport { editorCursorForeground, editorOverviewRulerBorder, editorOverviewRulerBackground } from '../../../common/core/editorColorRegistry.js';\nimport { OverviewRulerDecorationsGroup } from '../../../common/viewModel/viewModel.js';\n\nclass Settings {\n  constructor(config, theme) {\n    const options = config.options;\n    this.lineHeight = options.get(59\n    /* lineHeight */\n    );\n    this.pixelRatio = options.get(129\n    /* pixelRatio */\n    );\n    this.overviewRulerLanes = options.get(74\n    /* overviewRulerLanes */\n    );\n    this.renderBorder = options.get(73\n    /* overviewRulerBorder */\n    );\n    const borderColor = theme.getColor(editorOverviewRulerBorder);\n    this.borderColor = borderColor ? borderColor.toString() : null;\n    this.hideCursor = options.get(52\n    /* hideCursorInOverviewRuler */\n    );\n    const cursorColor = theme.getColor(editorCursorForeground);\n    this.cursorColor = cursorColor ? cursorColor.transparent(0.7).toString() : null;\n    this.themeType = theme.type;\n    const minimapOpts = options.get(65\n    /* minimap */\n    );\n    const minimapEnabled = minimapOpts.enabled;\n    const minimapSide = minimapOpts.side;\n    const backgroundColor = minimapEnabled ? theme.getColor(editorOverviewRulerBackground) || TokenizationRegistry.getDefaultBackground() : null;\n\n    if (backgroundColor === null || minimapSide === 'left') {\n      this.backgroundColor = null;\n    } else {\n      this.backgroundColor = Color.Format.CSS.formatHex(backgroundColor);\n    }\n\n    const layoutInfo = options.get(131\n    /* layoutInfo */\n    );\n    const position = layoutInfo.overviewRuler;\n    this.top = position.top;\n    this.right = position.right;\n    this.domWidth = position.width;\n    this.domHeight = position.height;\n\n    if (this.overviewRulerLanes === 0) {\n      // overview ruler is off\n      this.canvasWidth = 0;\n      this.canvasHeight = 0;\n    } else {\n      this.canvasWidth = this.domWidth * this.pixelRatio | 0;\n      this.canvasHeight = this.domHeight * this.pixelRatio | 0;\n    }\n\n    const [x, w] = this._initLanes(1, this.canvasWidth, this.overviewRulerLanes);\n\n    this.x = x;\n    this.w = w;\n  }\n\n  _initLanes(canvasLeftOffset, canvasWidth, laneCount) {\n    const remainingWidth = canvasWidth - canvasLeftOffset;\n\n    if (laneCount >= 3) {\n      const leftWidth = Math.floor(remainingWidth / 3);\n      const rightWidth = Math.floor(remainingWidth / 3);\n      const centerWidth = remainingWidth - leftWidth - rightWidth;\n      const leftOffset = canvasLeftOffset;\n      const centerOffset = leftOffset + leftWidth;\n      const rightOffset = leftOffset + leftWidth + centerWidth;\n      return [[0, leftOffset, centerOffset, leftOffset, rightOffset, leftOffset, centerOffset, leftOffset // Left | Center | Right\n      ], [0, leftWidth, centerWidth, leftWidth + centerWidth, rightWidth, leftWidth + centerWidth + rightWidth, centerWidth + rightWidth, leftWidth + centerWidth + rightWidth // Left | Center | Right\n      ]];\n    } else if (laneCount === 2) {\n      const leftWidth = Math.floor(remainingWidth / 2);\n      const rightWidth = remainingWidth - leftWidth;\n      const leftOffset = canvasLeftOffset;\n      const rightOffset = leftOffset + leftWidth;\n      return [[0, leftOffset, leftOffset, leftOffset, rightOffset, leftOffset, leftOffset, leftOffset // Left | Center | Right\n      ], [0, leftWidth, leftWidth, leftWidth, rightWidth, leftWidth + rightWidth, leftWidth + rightWidth, leftWidth + rightWidth // Left | Center | Right\n      ]];\n    } else {\n      const offset = canvasLeftOffset;\n      const width = remainingWidth;\n      return [[0, offset, offset, offset, offset, offset, offset, offset // Left | Center | Right\n      ], [0, width, width, width, width, width, width, width // Left | Center | Right\n      ]];\n    }\n  }\n\n  equals(other) {\n    return this.lineHeight === other.lineHeight && this.pixelRatio === other.pixelRatio && this.overviewRulerLanes === other.overviewRulerLanes && this.renderBorder === other.renderBorder && this.borderColor === other.borderColor && this.hideCursor === other.hideCursor && this.cursorColor === other.cursorColor && this.themeType === other.themeType && this.backgroundColor === other.backgroundColor && this.top === other.top && this.right === other.right && this.domWidth === other.domWidth && this.domHeight === other.domHeight && this.canvasWidth === other.canvasWidth && this.canvasHeight === other.canvasHeight;\n  }\n\n}\n\nexport class DecorationsOverviewRuler extends ViewPart {\n  constructor(context) {\n    super(context);\n    this._domNode = createFastDomNode(document.createElement('canvas'));\n\n    this._domNode.setClassName('decorationsOverviewRuler');\n\n    this._domNode.setPosition('absolute');\n\n    this._domNode.setLayerHinting(true);\n\n    this._domNode.setContain('strict');\n\n    this._domNode.setAttribute('aria-hidden', 'true');\n\n    this._updateSettings(false);\n\n    this._tokensColorTrackerListener = TokenizationRegistry.onDidChange(e => {\n      if (e.changedColorMap) {\n        this._updateSettings(true);\n      }\n    });\n    this._cursorPositions = [];\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._tokensColorTrackerListener.dispose();\n  }\n\n  _updateSettings(renderNow) {\n    const newSettings = new Settings(this._context.configuration, this._context.theme);\n\n    if (this._settings && this._settings.equals(newSettings)) {\n      // nothing to do\n      return false;\n    }\n\n    this._settings = newSettings;\n\n    this._domNode.setTop(this._settings.top);\n\n    this._domNode.setRight(this._settings.right);\n\n    this._domNode.setWidth(this._settings.domWidth);\n\n    this._domNode.setHeight(this._settings.domHeight);\n\n    this._domNode.domNode.width = this._settings.canvasWidth;\n    this._domNode.domNode.height = this._settings.canvasHeight;\n\n    if (renderNow) {\n      this._render();\n    }\n\n    return true;\n  } // ---- begin view event handlers\n\n\n  onConfigurationChanged(e) {\n    return this._updateSettings(false);\n  }\n\n  onCursorStateChanged(e) {\n    this._cursorPositions = [];\n\n    for (let i = 0, len = e.selections.length; i < len; i++) {\n      this._cursorPositions[i] = e.selections[i].getPosition();\n    }\n\n    this._cursorPositions.sort(Position.compare);\n\n    return true;\n  }\n\n  onDecorationsChanged(e) {\n    if (e.affectsOverviewRuler) {\n      return true;\n    }\n\n    return false;\n  }\n\n  onFlushed(e) {\n    return true;\n  }\n\n  onScrollChanged(e) {\n    return e.scrollHeightChanged;\n  }\n\n  onZonesChanged(e) {\n    return true;\n  }\n\n  onThemeChanged(e) {\n    // invalidate color cache\n    this._context.model.invalidateOverviewRulerColorCache();\n\n    return this._updateSettings(false);\n  } // ---- end view event handlers\n\n\n  getDomNode() {\n    return this._domNode.domNode;\n  }\n\n  prepareRender(ctx) {// Nothing to read\n  }\n\n  render(editorCtx) {\n    this._render();\n  }\n\n  _render() {\n    if (this._settings.overviewRulerLanes === 0) {\n      // overview ruler is off\n      this._domNode.setBackgroundColor(this._settings.backgroundColor ? this._settings.backgroundColor : '');\n\n      this._domNode.setDisplay('none');\n\n      return;\n    }\n\n    this._domNode.setDisplay('block');\n\n    const canvasWidth = this._settings.canvasWidth;\n    const canvasHeight = this._settings.canvasHeight;\n    const lineHeight = this._settings.lineHeight;\n    const viewLayout = this._context.viewLayout;\n\n    const outerHeight = this._context.viewLayout.getScrollHeight();\n\n    const heightRatio = canvasHeight / outerHeight;\n\n    const decorations = this._context.model.getAllOverviewRulerDecorations(this._context.theme);\n\n    const minDecorationHeight = 6\n    /* MIN_DECORATION_HEIGHT */\n    * this._settings.pixelRatio | 0;\n    const halfMinDecorationHeight = minDecorationHeight / 2 | 0;\n\n    const canvasCtx = this._domNode.domNode.getContext('2d');\n\n    if (this._settings.backgroundColor === null) {\n      canvasCtx.clearRect(0, 0, canvasWidth, canvasHeight);\n    } else {\n      canvasCtx.fillStyle = this._settings.backgroundColor;\n      canvasCtx.fillRect(0, 0, canvasWidth, canvasHeight);\n    }\n\n    const x = this._settings.x;\n    const w = this._settings.w;\n    decorations.sort(OverviewRulerDecorationsGroup.cmp);\n\n    for (const decorationGroup of decorations) {\n      const color = decorationGroup.color;\n      const decorationGroupData = decorationGroup.data;\n      canvasCtx.fillStyle = color;\n      let prevLane = 0;\n      let prevY1 = 0;\n      let prevY2 = 0;\n\n      for (let i = 0, len = decorationGroupData.length / 3; i < len; i++) {\n        const lane = decorationGroupData[3 * i];\n        const startLineNumber = decorationGroupData[3 * i + 1];\n        const endLineNumber = decorationGroupData[3 * i + 2];\n        let y1 = viewLayout.getVerticalOffsetForLineNumber(startLineNumber) * heightRatio | 0;\n        let y2 = (viewLayout.getVerticalOffsetForLineNumber(endLineNumber) + lineHeight) * heightRatio | 0;\n        const height = y2 - y1;\n\n        if (height < minDecorationHeight) {\n          let yCenter = (y1 + y2) / 2 | 0;\n\n          if (yCenter < halfMinDecorationHeight) {\n            yCenter = halfMinDecorationHeight;\n          } else if (yCenter + halfMinDecorationHeight > canvasHeight) {\n            yCenter = canvasHeight - halfMinDecorationHeight;\n          }\n\n          y1 = yCenter - halfMinDecorationHeight;\n          y2 = yCenter + halfMinDecorationHeight;\n        }\n\n        if (y1 > prevY2 + 1 || lane !== prevLane) {\n          // flush prev\n          if (i !== 0) {\n            canvasCtx.fillRect(x[prevLane], prevY1, w[prevLane], prevY2 - prevY1);\n          }\n\n          prevLane = lane;\n          prevY1 = y1;\n          prevY2 = y2;\n        } else {\n          // merge into prev\n          if (y2 > prevY2) {\n            prevY2 = y2;\n          }\n        }\n      }\n\n      canvasCtx.fillRect(x[prevLane], prevY1, w[prevLane], prevY2 - prevY1);\n    } // Draw cursors\n\n\n    if (!this._settings.hideCursor && this._settings.cursorColor) {\n      const cursorHeight = 2 * this._settings.pixelRatio | 0;\n      const halfCursorHeight = cursorHeight / 2 | 0;\n      const cursorX = this._settings.x[7\n      /* Full */\n      ];\n      const cursorW = this._settings.w[7\n      /* Full */\n      ];\n      canvasCtx.fillStyle = this._settings.cursorColor;\n      let prevY1 = -100;\n      let prevY2 = -100;\n\n      for (let i = 0, len = this._cursorPositions.length; i < len; i++) {\n        const cursor = this._cursorPositions[i];\n        let yCenter = viewLayout.getVerticalOffsetForLineNumber(cursor.lineNumber) * heightRatio | 0;\n\n        if (yCenter < halfCursorHeight) {\n          yCenter = halfCursorHeight;\n        } else if (yCenter + halfCursorHeight > canvasHeight) {\n          yCenter = canvasHeight - halfCursorHeight;\n        }\n\n        const y1 = yCenter - halfCursorHeight;\n        const y2 = y1 + cursorHeight;\n\n        if (y1 > prevY2 + 1) {\n          // flush prev\n          if (i !== 0) {\n            canvasCtx.fillRect(cursorX, prevY1, cursorW, prevY2 - prevY1);\n          }\n\n          prevY1 = y1;\n          prevY2 = y2;\n        } else {\n          // merge into prev\n          if (y2 > prevY2) {\n            prevY2 = y2;\n          }\n        }\n      }\n\n      canvasCtx.fillRect(cursorX, prevY1, cursorW, prevY2 - prevY1);\n    }\n\n    if (this._settings.renderBorder && this._settings.borderColor && this._settings.overviewRulerLanes > 0) {\n      canvasCtx.beginPath();\n      canvasCtx.lineWidth = 1;\n      canvasCtx.strokeStyle = this._settings.borderColor;\n      canvasCtx.moveTo(0, 0);\n      canvasCtx.lineTo(0, canvasHeight);\n      canvasCtx.stroke();\n      canvasCtx.moveTo(0, 0);\n      canvasCtx.lineTo(canvasWidth, 0);\n      canvasCtx.stroke();\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/overviewRuler/decorationsOverviewRuler.js"],"names":["createFastDomNode","Color","ViewPart","Position","TokenizationRegistry","editorCursorForeground","editorOverviewRulerBorder","editorOverviewRulerBackground","OverviewRulerDecorationsGroup","Settings","constructor","config","theme","options","lineHeight","get","pixelRatio","overviewRulerLanes","renderBorder","borderColor","getColor","toString","hideCursor","cursorColor","transparent","themeType","type","minimapOpts","minimapEnabled","enabled","minimapSide","side","backgroundColor","getDefaultBackground","Format","CSS","formatHex","layoutInfo","position","overviewRuler","top","right","domWidth","width","domHeight","height","canvasWidth","canvasHeight","x","w","_initLanes","canvasLeftOffset","laneCount","remainingWidth","leftWidth","Math","floor","rightWidth","centerWidth","leftOffset","centerOffset","rightOffset","offset","equals","other","DecorationsOverviewRuler","context","_domNode","document","createElement","setClassName","setPosition","setLayerHinting","setContain","setAttribute","_updateSettings","_tokensColorTrackerListener","onDidChange","e","changedColorMap","_cursorPositions","dispose","renderNow","newSettings","_context","configuration","_settings","setTop","setRight","setWidth","setHeight","domNode","_render","onConfigurationChanged","onCursorStateChanged","i","len","selections","length","getPosition","sort","compare","onDecorationsChanged","affectsOverviewRuler","onFlushed","onScrollChanged","scrollHeightChanged","onZonesChanged","onThemeChanged","model","invalidateOverviewRulerColorCache","getDomNode","prepareRender","ctx","render","editorCtx","setBackgroundColor","setDisplay","viewLayout","outerHeight","getScrollHeight","heightRatio","decorations","getAllOverviewRulerDecorations","minDecorationHeight","halfMinDecorationHeight","canvasCtx","getContext","clearRect","fillStyle","fillRect","cmp","decorationGroup","color","decorationGroupData","data","prevLane","prevY1","prevY2","lane","startLineNumber","endLineNumber","y1","getVerticalOffsetForLineNumber","y2","yCenter","cursorHeight","halfCursorHeight","cursorX","cursorW","cursor","lineNumber","beginPath","lineWidth","strokeStyle","moveTo","lineTo","stroke"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { Color } from '../../../../base/common/color.js';\nimport { ViewPart } from '../../view/viewPart.js';\nimport { Position } from '../../../common/core/position.js';\nimport { TokenizationRegistry } from '../../../common/languages.js';\nimport { editorCursorForeground, editorOverviewRulerBorder, editorOverviewRulerBackground } from '../../../common/core/editorColorRegistry.js';\nimport { OverviewRulerDecorationsGroup } from '../../../common/viewModel/viewModel.js';\nclass Settings {\n    constructor(config, theme) {\n        const options = config.options;\n        this.lineHeight = options.get(59 /* lineHeight */);\n        this.pixelRatio = options.get(129 /* pixelRatio */);\n        this.overviewRulerLanes = options.get(74 /* overviewRulerLanes */);\n        this.renderBorder = options.get(73 /* overviewRulerBorder */);\n        const borderColor = theme.getColor(editorOverviewRulerBorder);\n        this.borderColor = borderColor ? borderColor.toString() : null;\n        this.hideCursor = options.get(52 /* hideCursorInOverviewRuler */);\n        const cursorColor = theme.getColor(editorCursorForeground);\n        this.cursorColor = cursorColor ? cursorColor.transparent(0.7).toString() : null;\n        this.themeType = theme.type;\n        const minimapOpts = options.get(65 /* minimap */);\n        const minimapEnabled = minimapOpts.enabled;\n        const minimapSide = minimapOpts.side;\n        const backgroundColor = minimapEnabled\n            ? theme.getColor(editorOverviewRulerBackground) || TokenizationRegistry.getDefaultBackground()\n            : null;\n        if (backgroundColor === null || minimapSide === 'left') {\n            this.backgroundColor = null;\n        }\n        else {\n            this.backgroundColor = Color.Format.CSS.formatHex(backgroundColor);\n        }\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        const position = layoutInfo.overviewRuler;\n        this.top = position.top;\n        this.right = position.right;\n        this.domWidth = position.width;\n        this.domHeight = position.height;\n        if (this.overviewRulerLanes === 0) {\n            // overview ruler is off\n            this.canvasWidth = 0;\n            this.canvasHeight = 0;\n        }\n        else {\n            this.canvasWidth = (this.domWidth * this.pixelRatio) | 0;\n            this.canvasHeight = (this.domHeight * this.pixelRatio) | 0;\n        }\n        const [x, w] = this._initLanes(1, this.canvasWidth, this.overviewRulerLanes);\n        this.x = x;\n        this.w = w;\n    }\n    _initLanes(canvasLeftOffset, canvasWidth, laneCount) {\n        const remainingWidth = canvasWidth - canvasLeftOffset;\n        if (laneCount >= 3) {\n            const leftWidth = Math.floor(remainingWidth / 3);\n            const rightWidth = Math.floor(remainingWidth / 3);\n            const centerWidth = remainingWidth - leftWidth - rightWidth;\n            const leftOffset = canvasLeftOffset;\n            const centerOffset = leftOffset + leftWidth;\n            const rightOffset = leftOffset + leftWidth + centerWidth;\n            return [\n                [\n                    0,\n                    leftOffset,\n                    centerOffset,\n                    leftOffset,\n                    rightOffset,\n                    leftOffset,\n                    centerOffset,\n                    leftOffset, // Left | Center | Right\n                ], [\n                    0,\n                    leftWidth,\n                    centerWidth,\n                    leftWidth + centerWidth,\n                    rightWidth,\n                    leftWidth + centerWidth + rightWidth,\n                    centerWidth + rightWidth,\n                    leftWidth + centerWidth + rightWidth, // Left | Center | Right\n                ]\n            ];\n        }\n        else if (laneCount === 2) {\n            const leftWidth = Math.floor(remainingWidth / 2);\n            const rightWidth = remainingWidth - leftWidth;\n            const leftOffset = canvasLeftOffset;\n            const rightOffset = leftOffset + leftWidth;\n            return [\n                [\n                    0,\n                    leftOffset,\n                    leftOffset,\n                    leftOffset,\n                    rightOffset,\n                    leftOffset,\n                    leftOffset,\n                    leftOffset, // Left | Center | Right\n                ], [\n                    0,\n                    leftWidth,\n                    leftWidth,\n                    leftWidth,\n                    rightWidth,\n                    leftWidth + rightWidth,\n                    leftWidth + rightWidth,\n                    leftWidth + rightWidth, // Left | Center | Right\n                ]\n            ];\n        }\n        else {\n            const offset = canvasLeftOffset;\n            const width = remainingWidth;\n            return [\n                [\n                    0,\n                    offset,\n                    offset,\n                    offset,\n                    offset,\n                    offset,\n                    offset,\n                    offset, // Left | Center | Right\n                ], [\n                    0,\n                    width,\n                    width,\n                    width,\n                    width,\n                    width,\n                    width,\n                    width, // Left | Center | Right\n                ]\n            ];\n        }\n    }\n    equals(other) {\n        return (this.lineHeight === other.lineHeight\n            && this.pixelRatio === other.pixelRatio\n            && this.overviewRulerLanes === other.overviewRulerLanes\n            && this.renderBorder === other.renderBorder\n            && this.borderColor === other.borderColor\n            && this.hideCursor === other.hideCursor\n            && this.cursorColor === other.cursorColor\n            && this.themeType === other.themeType\n            && this.backgroundColor === other.backgroundColor\n            && this.top === other.top\n            && this.right === other.right\n            && this.domWidth === other.domWidth\n            && this.domHeight === other.domHeight\n            && this.canvasWidth === other.canvasWidth\n            && this.canvasHeight === other.canvasHeight);\n    }\n}\nexport class DecorationsOverviewRuler extends ViewPart {\n    constructor(context) {\n        super(context);\n        this._domNode = createFastDomNode(document.createElement('canvas'));\n        this._domNode.setClassName('decorationsOverviewRuler');\n        this._domNode.setPosition('absolute');\n        this._domNode.setLayerHinting(true);\n        this._domNode.setContain('strict');\n        this._domNode.setAttribute('aria-hidden', 'true');\n        this._updateSettings(false);\n        this._tokensColorTrackerListener = TokenizationRegistry.onDidChange((e) => {\n            if (e.changedColorMap) {\n                this._updateSettings(true);\n            }\n        });\n        this._cursorPositions = [];\n    }\n    dispose() {\n        super.dispose();\n        this._tokensColorTrackerListener.dispose();\n    }\n    _updateSettings(renderNow) {\n        const newSettings = new Settings(this._context.configuration, this._context.theme);\n        if (this._settings && this._settings.equals(newSettings)) {\n            // nothing to do\n            return false;\n        }\n        this._settings = newSettings;\n        this._domNode.setTop(this._settings.top);\n        this._domNode.setRight(this._settings.right);\n        this._domNode.setWidth(this._settings.domWidth);\n        this._domNode.setHeight(this._settings.domHeight);\n        this._domNode.domNode.width = this._settings.canvasWidth;\n        this._domNode.domNode.height = this._settings.canvasHeight;\n        if (renderNow) {\n            this._render();\n        }\n        return true;\n    }\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        return this._updateSettings(false);\n    }\n    onCursorStateChanged(e) {\n        this._cursorPositions = [];\n        for (let i = 0, len = e.selections.length; i < len; i++) {\n            this._cursorPositions[i] = e.selections[i].getPosition();\n        }\n        this._cursorPositions.sort(Position.compare);\n        return true;\n    }\n    onDecorationsChanged(e) {\n        if (e.affectsOverviewRuler) {\n            return true;\n        }\n        return false;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollHeightChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    onThemeChanged(e) {\n        // invalidate color cache\n        this._context.model.invalidateOverviewRulerColorCache();\n        return this._updateSettings(false);\n    }\n    // ---- end view event handlers\n    getDomNode() {\n        return this._domNode.domNode;\n    }\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    render(editorCtx) {\n        this._render();\n    }\n    _render() {\n        if (this._settings.overviewRulerLanes === 0) {\n            // overview ruler is off\n            this._domNode.setBackgroundColor(this._settings.backgroundColor ? this._settings.backgroundColor : '');\n            this._domNode.setDisplay('none');\n            return;\n        }\n        this._domNode.setDisplay('block');\n        const canvasWidth = this._settings.canvasWidth;\n        const canvasHeight = this._settings.canvasHeight;\n        const lineHeight = this._settings.lineHeight;\n        const viewLayout = this._context.viewLayout;\n        const outerHeight = this._context.viewLayout.getScrollHeight();\n        const heightRatio = canvasHeight / outerHeight;\n        const decorations = this._context.model.getAllOverviewRulerDecorations(this._context.theme);\n        const minDecorationHeight = (6 /* MIN_DECORATION_HEIGHT */ * this._settings.pixelRatio) | 0;\n        const halfMinDecorationHeight = (minDecorationHeight / 2) | 0;\n        const canvasCtx = this._domNode.domNode.getContext('2d');\n        if (this._settings.backgroundColor === null) {\n            canvasCtx.clearRect(0, 0, canvasWidth, canvasHeight);\n        }\n        else {\n            canvasCtx.fillStyle = this._settings.backgroundColor;\n            canvasCtx.fillRect(0, 0, canvasWidth, canvasHeight);\n        }\n        const x = this._settings.x;\n        const w = this._settings.w;\n        decorations.sort(OverviewRulerDecorationsGroup.cmp);\n        for (const decorationGroup of decorations) {\n            const color = decorationGroup.color;\n            const decorationGroupData = decorationGroup.data;\n            canvasCtx.fillStyle = color;\n            let prevLane = 0;\n            let prevY1 = 0;\n            let prevY2 = 0;\n            for (let i = 0, len = decorationGroupData.length / 3; i < len; i++) {\n                const lane = decorationGroupData[3 * i];\n                const startLineNumber = decorationGroupData[3 * i + 1];\n                const endLineNumber = decorationGroupData[3 * i + 2];\n                let y1 = (viewLayout.getVerticalOffsetForLineNumber(startLineNumber) * heightRatio) | 0;\n                let y2 = ((viewLayout.getVerticalOffsetForLineNumber(endLineNumber) + lineHeight) * heightRatio) | 0;\n                const height = y2 - y1;\n                if (height < minDecorationHeight) {\n                    let yCenter = ((y1 + y2) / 2) | 0;\n                    if (yCenter < halfMinDecorationHeight) {\n                        yCenter = halfMinDecorationHeight;\n                    }\n                    else if (yCenter + halfMinDecorationHeight > canvasHeight) {\n                        yCenter = canvasHeight - halfMinDecorationHeight;\n                    }\n                    y1 = yCenter - halfMinDecorationHeight;\n                    y2 = yCenter + halfMinDecorationHeight;\n                }\n                if (y1 > prevY2 + 1 || lane !== prevLane) {\n                    // flush prev\n                    if (i !== 0) {\n                        canvasCtx.fillRect(x[prevLane], prevY1, w[prevLane], prevY2 - prevY1);\n                    }\n                    prevLane = lane;\n                    prevY1 = y1;\n                    prevY2 = y2;\n                }\n                else {\n                    // merge into prev\n                    if (y2 > prevY2) {\n                        prevY2 = y2;\n                    }\n                }\n            }\n            canvasCtx.fillRect(x[prevLane], prevY1, w[prevLane], prevY2 - prevY1);\n        }\n        // Draw cursors\n        if (!this._settings.hideCursor && this._settings.cursorColor) {\n            const cursorHeight = (2 * this._settings.pixelRatio) | 0;\n            const halfCursorHeight = (cursorHeight / 2) | 0;\n            const cursorX = this._settings.x[7 /* Full */];\n            const cursorW = this._settings.w[7 /* Full */];\n            canvasCtx.fillStyle = this._settings.cursorColor;\n            let prevY1 = -100;\n            let prevY2 = -100;\n            for (let i = 0, len = this._cursorPositions.length; i < len; i++) {\n                const cursor = this._cursorPositions[i];\n                let yCenter = (viewLayout.getVerticalOffsetForLineNumber(cursor.lineNumber) * heightRatio) | 0;\n                if (yCenter < halfCursorHeight) {\n                    yCenter = halfCursorHeight;\n                }\n                else if (yCenter + halfCursorHeight > canvasHeight) {\n                    yCenter = canvasHeight - halfCursorHeight;\n                }\n                const y1 = yCenter - halfCursorHeight;\n                const y2 = y1 + cursorHeight;\n                if (y1 > prevY2 + 1) {\n                    // flush prev\n                    if (i !== 0) {\n                        canvasCtx.fillRect(cursorX, prevY1, cursorW, prevY2 - prevY1);\n                    }\n                    prevY1 = y1;\n                    prevY2 = y2;\n                }\n                else {\n                    // merge into prev\n                    if (y2 > prevY2) {\n                        prevY2 = y2;\n                    }\n                }\n            }\n            canvasCtx.fillRect(cursorX, prevY1, cursorW, prevY2 - prevY1);\n        }\n        if (this._settings.renderBorder && this._settings.borderColor && this._settings.overviewRulerLanes > 0) {\n            canvasCtx.beginPath();\n            canvasCtx.lineWidth = 1;\n            canvasCtx.strokeStyle = this._settings.borderColor;\n            canvasCtx.moveTo(0, 0);\n            canvasCtx.lineTo(0, canvasHeight);\n            canvasCtx.stroke();\n            canvasCtx.moveTo(0, 0);\n            canvasCtx.lineTo(canvasWidth, 0);\n            canvasCtx.stroke();\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}