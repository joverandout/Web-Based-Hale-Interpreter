{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as browser from './browser.js';\nimport * as platform from '../common/platform.js';\n/**\n * Browser feature we can support in current platform, browser and environment.\n */\n\nexport const BrowserFeatures = {\n  clipboard: {\n    writeText: platform.isNative || document.queryCommandSupported && document.queryCommandSupported('copy') || !!(navigator && navigator.clipboard && navigator.clipboard.writeText),\n    readText: platform.isNative || !!(navigator && navigator.clipboard && navigator.clipboard.readText)\n  },\n  keyboard: (() => {\n    if (platform.isNative || browser.isStandalone) {\n      return 0\n      /* Always */\n      ;\n    }\n\n    if (navigator.keyboard || browser.isSafari) {\n      return 1\n      /* FullScreen */\n      ;\n    }\n\n    return 2\n    /* None */\n    ;\n  })(),\n  // 'ontouchstart' in window always evaluates to true with typescript's modern typings. This causes `window` to be\n  // `never` later in `window.navigator`. That's why we need the explicit `window as Window` cast\n  touch: 'ontouchstart' in window || navigator.maxTouchPoints > 0,\n  pointerEvents: window.PointerEvent && ('ontouchstart' in window || window.navigator.maxTouchPoints > 0 || navigator.maxTouchPoints > 0)\n};","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/base/browser/canIUse.js"],"names":["browser","platform","BrowserFeatures","clipboard","writeText","isNative","document","queryCommandSupported","navigator","readText","keyboard","isStandalone","isSafari","touch","window","maxTouchPoints","pointerEvents","PointerEvent"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,KAAKA,OAAZ,MAAyB,cAAzB;AACA,OAAO,KAAKC,QAAZ,MAA0B,uBAA1B;AACA;AACA;AACA;;AACA,OAAO,MAAMC,eAAe,GAAG;AAC3BC,EAAAA,SAAS,EAAE;AACPC,IAAAA,SAAS,EAAGH,QAAQ,CAACI,QAAT,IACJC,QAAQ,CAACC,qBAAT,IAAkCD,QAAQ,CAACC,qBAAT,CAA+B,MAA/B,CAD9B,IAEL,CAAC,EAAEC,SAAS,IAAIA,SAAS,CAACL,SAAvB,IAAoCK,SAAS,CAACL,SAAV,CAAoBC,SAA1D,CAHD;AAIPK,IAAAA,QAAQ,EAAGR,QAAQ,CAACI,QAAT,IACJ,CAAC,EAAEG,SAAS,IAAIA,SAAS,CAACL,SAAvB,IAAoCK,SAAS,CAACL,SAAV,CAAoBM,QAA1D;AALD,GADgB;AAQ3BC,EAAAA,QAAQ,EAAE,CAAC,MAAM;AACb,QAAIT,QAAQ,CAACI,QAAT,IAAqBL,OAAO,CAACW,YAAjC,EAA+C;AAC3C,aAAO;AAAE;AAAT;AACH;;AACD,QAAIH,SAAS,CAACE,QAAV,IAAsBV,OAAO,CAACY,QAAlC,EAA4C;AACxC,aAAO;AAAE;AAAT;AACH;;AACD,WAAO;AAAE;AAAT;AACH,GARS,GARiB;AAiB3B;AACA;AACAC,EAAAA,KAAK,EAAE,kBAAkBC,MAAlB,IAA4BN,SAAS,CAACO,cAAV,GAA2B,CAnBnC;AAoB3BC,EAAAA,aAAa,EAAEF,MAAM,CAACG,YAAP,KAAwB,kBAAkBH,MAAlB,IAA4BA,MAAM,CAACN,SAAP,CAAiBO,cAAjB,GAAkC,CAA9D,IAAmEP,SAAS,CAACO,cAAV,GAA2B,CAAtH;AApBY,CAAxB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as browser from './browser.js';\nimport * as platform from '../common/platform.js';\n/**\n * Browser feature we can support in current platform, browser and environment.\n */\nexport const BrowserFeatures = {\n    clipboard: {\n        writeText: (platform.isNative\n            || (document.queryCommandSupported && document.queryCommandSupported('copy'))\n            || !!(navigator && navigator.clipboard && navigator.clipboard.writeText)),\n        readText: (platform.isNative\n            || !!(navigator && navigator.clipboard && navigator.clipboard.readText))\n    },\n    keyboard: (() => {\n        if (platform.isNative || browser.isStandalone) {\n            return 0 /* Always */;\n        }\n        if (navigator.keyboard || browser.isSafari) {\n            return 1 /* FullScreen */;\n        }\n        return 2 /* None */;\n    })(),\n    // 'ontouchstart' in window always evaluates to true with typescript's modern typings. This causes `window` to be\n    // `never` later in `window.navigator`. That's why we need the explicit `window as Window` cast\n    touch: 'ontouchstart' in window || navigator.maxTouchPoints > 0,\n    pointerEvents: window.PointerEvent && ('ontouchstart' in window || window.navigator.maxTouchPoints > 0 || navigator.maxTouchPoints > 0)\n};\n"]},"metadata":{},"sourceType":"module"}