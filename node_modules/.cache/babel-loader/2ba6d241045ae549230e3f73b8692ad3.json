{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport function createScopedLineTokens(context, offset) {\n  const tokenCount = context.getCount();\n  const tokenIndex = context.findTokenIndexAtOffset(offset);\n  const desiredLanguageId = context.getLanguageId(tokenIndex);\n  let lastTokenIndex = tokenIndex;\n\n  while (lastTokenIndex + 1 < tokenCount && context.getLanguageId(lastTokenIndex + 1) === desiredLanguageId) {\n    lastTokenIndex++;\n  }\n\n  let firstTokenIndex = tokenIndex;\n\n  while (firstTokenIndex > 0 && context.getLanguageId(firstTokenIndex - 1) === desiredLanguageId) {\n    firstTokenIndex--;\n  }\n\n  return new ScopedLineTokens(context, desiredLanguageId, firstTokenIndex, lastTokenIndex + 1, context.getStartOffset(firstTokenIndex), context.getEndOffset(lastTokenIndex));\n}\nexport class ScopedLineTokens {\n  constructor(actual, languageId, firstTokenIndex, lastTokenIndex, firstCharOffset, lastCharOffset) {\n    this._scopedLineTokensBrand = undefined;\n    this._actual = actual;\n    this.languageId = languageId;\n    this._firstTokenIndex = firstTokenIndex;\n    this._lastTokenIndex = lastTokenIndex;\n    this.firstCharOffset = firstCharOffset;\n    this._lastCharOffset = lastCharOffset;\n  }\n\n  getLineContent() {\n    const actualLineContent = this._actual.getLineContent();\n\n    return actualLineContent.substring(this.firstCharOffset, this._lastCharOffset);\n  }\n\n  getActualLineContentBefore(offset) {\n    const actualLineContent = this._actual.getLineContent();\n\n    return actualLineContent.substring(0, this.firstCharOffset + offset);\n  }\n\n  getTokenCount() {\n    return this._lastTokenIndex - this._firstTokenIndex;\n  }\n\n  findTokenIndexAtOffset(offset) {\n    return this._actual.findTokenIndexAtOffset(offset + this.firstCharOffset) - this._firstTokenIndex;\n  }\n\n  getStandardTokenType(tokenIndex) {\n    return this._actual.getStandardTokenType(tokenIndex + this._firstTokenIndex);\n  }\n\n}\nexport function ignoreBracketsInToken(standardTokenType) {\n  return (standardTokenType & 3\n  /* value */\n  ) !== 0;\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/common/languages/supports.js"],"names":["createScopedLineTokens","context","offset","tokenCount","getCount","tokenIndex","findTokenIndexAtOffset","desiredLanguageId","getLanguageId","lastTokenIndex","firstTokenIndex","ScopedLineTokens","getStartOffset","getEndOffset","constructor","actual","languageId","firstCharOffset","lastCharOffset","_scopedLineTokensBrand","undefined","_actual","_firstTokenIndex","_lastTokenIndex","_lastCharOffset","getLineContent","actualLineContent","substring","getActualLineContentBefore","getTokenCount","getStandardTokenType","ignoreBracketsInToken","standardTokenType"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,SAASA,sBAAT,CAAgCC,OAAhC,EAAyCC,MAAzC,EAAiD;AACpD,QAAMC,UAAU,GAAGF,OAAO,CAACG,QAAR,EAAnB;AACA,QAAMC,UAAU,GAAGJ,OAAO,CAACK,sBAAR,CAA+BJ,MAA/B,CAAnB;AACA,QAAMK,iBAAiB,GAAGN,OAAO,CAACO,aAAR,CAAsBH,UAAtB,CAA1B;AACA,MAAII,cAAc,GAAGJ,UAArB;;AACA,SAAOI,cAAc,GAAG,CAAjB,GAAqBN,UAArB,IAAmCF,OAAO,CAACO,aAAR,CAAsBC,cAAc,GAAG,CAAvC,MAA8CF,iBAAxF,EAA2G;AACvGE,IAAAA,cAAc;AACjB;;AACD,MAAIC,eAAe,GAAGL,UAAtB;;AACA,SAAOK,eAAe,GAAG,CAAlB,IAAuBT,OAAO,CAACO,aAAR,CAAsBE,eAAe,GAAG,CAAxC,MAA+CH,iBAA7E,EAAgG;AAC5FG,IAAAA,eAAe;AAClB;;AACD,SAAO,IAAIC,gBAAJ,CAAqBV,OAArB,EAA8BM,iBAA9B,EAAiDG,eAAjD,EAAkED,cAAc,GAAG,CAAnF,EAAsFR,OAAO,CAACW,cAAR,CAAuBF,eAAvB,CAAtF,EAA+HT,OAAO,CAACY,YAAR,CAAqBJ,cAArB,CAA/H,CAAP;AACH;AACD,OAAO,MAAME,gBAAN,CAAuB;AAC1BG,EAAAA,WAAW,CAACC,MAAD,EAASC,UAAT,EAAqBN,eAArB,EAAsCD,cAAtC,EAAsDQ,eAAtD,EAAuEC,cAAvE,EAAuF;AAC9F,SAAKC,sBAAL,GAA8BC,SAA9B;AACA,SAAKC,OAAL,GAAeN,MAAf;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKM,gBAAL,GAAwBZ,eAAxB;AACA,SAAKa,eAAL,GAAuBd,cAAvB;AACA,SAAKQ,eAAL,GAAuBA,eAAvB;AACA,SAAKO,eAAL,GAAuBN,cAAvB;AACH;;AACDO,EAAAA,cAAc,GAAG;AACb,UAAMC,iBAAiB,GAAG,KAAKL,OAAL,CAAaI,cAAb,EAA1B;;AACA,WAAOC,iBAAiB,CAACC,SAAlB,CAA4B,KAAKV,eAAjC,EAAkD,KAAKO,eAAvD,CAAP;AACH;;AACDI,EAAAA,0BAA0B,CAAC1B,MAAD,EAAS;AAC/B,UAAMwB,iBAAiB,GAAG,KAAKL,OAAL,CAAaI,cAAb,EAA1B;;AACA,WAAOC,iBAAiB,CAACC,SAAlB,CAA4B,CAA5B,EAA+B,KAAKV,eAAL,GAAuBf,MAAtD,CAAP;AACH;;AACD2B,EAAAA,aAAa,GAAG;AACZ,WAAO,KAAKN,eAAL,GAAuB,KAAKD,gBAAnC;AACH;;AACDhB,EAAAA,sBAAsB,CAACJ,MAAD,EAAS;AAC3B,WAAO,KAAKmB,OAAL,CAAaf,sBAAb,CAAoCJ,MAAM,GAAG,KAAKe,eAAlD,IAAqE,KAAKK,gBAAjF;AACH;;AACDQ,EAAAA,oBAAoB,CAACzB,UAAD,EAAa;AAC7B,WAAO,KAAKgB,OAAL,CAAaS,oBAAb,CAAkCzB,UAAU,GAAG,KAAKiB,gBAApD,CAAP;AACH;;AA1ByB;AA4B9B,OAAO,SAASS,qBAAT,CAA+BC,iBAA/B,EAAkD;AACrD,SAAO,CAACA,iBAAiB,GAAG;AAAE;AAAvB,QAAwC,CAA/C;AACH","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport function createScopedLineTokens(context, offset) {\n    const tokenCount = context.getCount();\n    const tokenIndex = context.findTokenIndexAtOffset(offset);\n    const desiredLanguageId = context.getLanguageId(tokenIndex);\n    let lastTokenIndex = tokenIndex;\n    while (lastTokenIndex + 1 < tokenCount && context.getLanguageId(lastTokenIndex + 1) === desiredLanguageId) {\n        lastTokenIndex++;\n    }\n    let firstTokenIndex = tokenIndex;\n    while (firstTokenIndex > 0 && context.getLanguageId(firstTokenIndex - 1) === desiredLanguageId) {\n        firstTokenIndex--;\n    }\n    return new ScopedLineTokens(context, desiredLanguageId, firstTokenIndex, lastTokenIndex + 1, context.getStartOffset(firstTokenIndex), context.getEndOffset(lastTokenIndex));\n}\nexport class ScopedLineTokens {\n    constructor(actual, languageId, firstTokenIndex, lastTokenIndex, firstCharOffset, lastCharOffset) {\n        this._scopedLineTokensBrand = undefined;\n        this._actual = actual;\n        this.languageId = languageId;\n        this._firstTokenIndex = firstTokenIndex;\n        this._lastTokenIndex = lastTokenIndex;\n        this.firstCharOffset = firstCharOffset;\n        this._lastCharOffset = lastCharOffset;\n    }\n    getLineContent() {\n        const actualLineContent = this._actual.getLineContent();\n        return actualLineContent.substring(this.firstCharOffset, this._lastCharOffset);\n    }\n    getActualLineContentBefore(offset) {\n        const actualLineContent = this._actual.getLineContent();\n        return actualLineContent.substring(0, this.firstCharOffset + offset);\n    }\n    getTokenCount() {\n        return this._lastTokenIndex - this._firstTokenIndex;\n    }\n    findTokenIndexAtOffset(offset) {\n        return this._actual.findTokenIndexAtOffset(offset + this.firstCharOffset) - this._firstTokenIndex;\n    }\n    getStandardTokenType(tokenIndex) {\n        return this._actual.getStandardTokenType(tokenIndex + this._firstTokenIndex);\n    }\n}\nexport function ignoreBracketsInToken(standardTokenType) {\n    return (standardTokenType & 3 /* value */) !== 0;\n}\n"]},"metadata":{},"sourceType":"module"}