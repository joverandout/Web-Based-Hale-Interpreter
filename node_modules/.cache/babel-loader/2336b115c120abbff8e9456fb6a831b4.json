{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\nimport { TextModel } from '../model/textModel.js';\nimport { createScopedLineTokens } from '../languages/supports.js';\nimport { CursorColumns } from '../core/cursorColumns.js';\n\nconst autoCloseAlways = () => true;\n\nconst autoCloseNever = () => false;\n\nconst autoCloseBeforeWhitespace = chr => chr === ' ' || chr === '\\t';\n\nexport class CursorConfiguration {\n  constructor(languageId, modelOptions, configuration, languageConfigurationService) {\n    this.languageConfigurationService = languageConfigurationService;\n    this._cursorMoveConfigurationBrand = undefined;\n    this._languageId = languageId;\n    const options = configuration.options;\n    const layoutInfo = options.get(131\n    /* layoutInfo */\n    );\n    this.readOnly = options.get(81\n    /* readOnly */\n    );\n    this.tabSize = modelOptions.tabSize;\n    this.indentSize = modelOptions.indentSize;\n    this.insertSpaces = modelOptions.insertSpaces;\n    this.stickyTabStops = options.get(104\n    /* stickyTabStops */\n    );\n    this.lineHeight = options.get(59\n    /* lineHeight */\n    );\n    this.pageSize = Math.max(1, Math.floor(layoutInfo.height / this.lineHeight) - 2);\n    this.useTabStops = options.get(116\n    /* useTabStops */\n    );\n    this.wordSeparators = options.get(117\n    /* wordSeparators */\n    );\n    this.emptySelectionClipboard = options.get(32\n    /* emptySelectionClipboard */\n    );\n    this.copyWithSyntaxHighlighting = options.get(21\n    /* copyWithSyntaxHighlighting */\n    );\n    this.multiCursorMergeOverlapping = options.get(69\n    /* multiCursorMergeOverlapping */\n    );\n    this.multiCursorPaste = options.get(71\n    /* multiCursorPaste */\n    );\n    this.autoClosingBrackets = options.get(5\n    /* autoClosingBrackets */\n    );\n    this.autoClosingQuotes = options.get(8\n    /* autoClosingQuotes */\n    );\n    this.autoClosingDelete = options.get(6\n    /* autoClosingDelete */\n    );\n    this.autoClosingOvertype = options.get(7\n    /* autoClosingOvertype */\n    );\n    this.autoSurround = options.get(11\n    /* autoSurround */\n    );\n    this.autoIndent = options.get(9\n    /* autoIndent */\n    );\n    this.surroundingPairs = {};\n    this._electricChars = null;\n    this.shouldAutoCloseBefore = {\n      quote: this._getShouldAutoClose(languageId, this.autoClosingQuotes),\n      bracket: this._getShouldAutoClose(languageId, this.autoClosingBrackets)\n    };\n    this.autoClosingPairs = this.languageConfigurationService.getLanguageConfiguration(languageId).getAutoClosingPairs();\n    const surroundingPairs = this.languageConfigurationService.getLanguageConfiguration(languageId).getSurroundingPairs();\n\n    if (surroundingPairs) {\n      for (const pair of surroundingPairs) {\n        this.surroundingPairs[pair.open] = pair.close;\n      }\n    }\n  }\n\n  static shouldRecreate(e) {\n    return e.hasChanged(131\n    /* layoutInfo */\n    ) || e.hasChanged(117\n    /* wordSeparators */\n    ) || e.hasChanged(32\n    /* emptySelectionClipboard */\n    ) || e.hasChanged(69\n    /* multiCursorMergeOverlapping */\n    ) || e.hasChanged(71\n    /* multiCursorPaste */\n    ) || e.hasChanged(5\n    /* autoClosingBrackets */\n    ) || e.hasChanged(8\n    /* autoClosingQuotes */\n    ) || e.hasChanged(6\n    /* autoClosingDelete */\n    ) || e.hasChanged(7\n    /* autoClosingOvertype */\n    ) || e.hasChanged(11\n    /* autoSurround */\n    ) || e.hasChanged(116\n    /* useTabStops */\n    ) || e.hasChanged(59\n    /* lineHeight */\n    ) || e.hasChanged(81\n    /* readOnly */\n    );\n  }\n\n  get electricChars() {\n    var _a;\n\n    if (!this._electricChars) {\n      this._electricChars = {};\n      const electricChars = (_a = this.languageConfigurationService.getLanguageConfiguration(this._languageId).electricCharacter) === null || _a === void 0 ? void 0 : _a.getElectricCharacters();\n\n      if (electricChars) {\n        for (const char of electricChars) {\n          this._electricChars[char] = true;\n        }\n      }\n    }\n\n    return this._electricChars;\n  }\n  /**\n   * Should return opening bracket type to match indentation with\n   */\n\n\n  onElectricCharacter(character, context, column) {\n    const scopedLineTokens = createScopedLineTokens(context, column - 1);\n    const electricCharacterSupport = this.languageConfigurationService.getLanguageConfiguration(scopedLineTokens.languageId).electricCharacter;\n\n    if (!electricCharacterSupport) {\n      return null;\n    }\n\n    return electricCharacterSupport.onElectricCharacter(character, scopedLineTokens, column - scopedLineTokens.firstCharOffset);\n  }\n\n  normalizeIndentation(str) {\n    return TextModel.normalizeIndentation(str, this.indentSize, this.insertSpaces);\n  }\n\n  _getShouldAutoClose(languageId, autoCloseConfig) {\n    switch (autoCloseConfig) {\n      case 'beforeWhitespace':\n        return autoCloseBeforeWhitespace;\n\n      case 'languageDefined':\n        return this._getLanguageDefinedShouldAutoClose(languageId);\n\n      case 'always':\n        return autoCloseAlways;\n\n      case 'never':\n        return autoCloseNever;\n    }\n  }\n\n  _getLanguageDefinedShouldAutoClose(languageId) {\n    const autoCloseBeforeSet = this.languageConfigurationService.getLanguageConfiguration(languageId).getAutoCloseBeforeSet();\n    return c => autoCloseBeforeSet.indexOf(c) !== -1;\n  }\n  /**\n   * Returns a visible column from a column.\n   * @see {@link CursorColumns}\n   */\n\n\n  visibleColumnFromColumn(model, position) {\n    return CursorColumns.visibleColumnFromColumn(model.getLineContent(position.lineNumber), position.column, this.tabSize);\n  }\n  /**\n   * Returns a visible column from a column.\n   * @see {@link CursorColumns}\n   */\n\n\n  columnFromVisibleColumn(model, lineNumber, visibleColumn) {\n    const result = CursorColumns.columnFromVisibleColumn(model.getLineContent(lineNumber), visibleColumn, this.tabSize);\n    const minColumn = model.getLineMinColumn(lineNumber);\n\n    if (result < minColumn) {\n      return minColumn;\n    }\n\n    const maxColumn = model.getLineMaxColumn(lineNumber);\n\n    if (result > maxColumn) {\n      return maxColumn;\n    }\n\n    return result;\n  }\n\n}\nexport class CursorContext {\n  constructor(model, viewModel, coordinatesConverter, cursorConfig) {\n    this._cursorContextBrand = undefined;\n    this.model = model;\n    this.viewModel = viewModel;\n    this.coordinatesConverter = coordinatesConverter;\n    this.cursorConfig = cursorConfig;\n  }\n\n}\nexport class CursorState {\n  constructor(modelState, viewState) {\n    this._cursorStateBrand = undefined;\n    this.modelState = modelState;\n    this.viewState = viewState;\n  }\n\n  static fromModelState(modelState) {\n    return new PartialModelCursorState(modelState);\n  }\n\n  static fromViewState(viewState) {\n    return new PartialViewCursorState(viewState);\n  }\n\n  static fromModelSelection(modelSelection) {\n    const selection = Selection.liftSelection(modelSelection);\n    const modelState = new SingleCursorState(Range.fromPositions(selection.getSelectionStart()), 0, selection.getPosition(), 0);\n    return CursorState.fromModelState(modelState);\n  }\n\n  static fromModelSelections(modelSelections) {\n    const states = [];\n\n    for (let i = 0, len = modelSelections.length; i < len; i++) {\n      states[i] = this.fromModelSelection(modelSelections[i]);\n    }\n\n    return states;\n  }\n\n  equals(other) {\n    return this.viewState.equals(other.viewState) && this.modelState.equals(other.modelState);\n  }\n\n}\nexport class PartialModelCursorState {\n  constructor(modelState) {\n    this.modelState = modelState;\n    this.viewState = null;\n  }\n\n}\nexport class PartialViewCursorState {\n  constructor(viewState) {\n    this.modelState = null;\n    this.viewState = viewState;\n  }\n\n}\n/**\n * Represents the cursor state on either the model or on the view model.\n */\n\nexport class SingleCursorState {\n  constructor(selectionStart, selectionStartLeftoverVisibleColumns, position, leftoverVisibleColumns) {\n    this._singleCursorStateBrand = undefined;\n    this.selectionStart = selectionStart;\n    this.selectionStartLeftoverVisibleColumns = selectionStartLeftoverVisibleColumns;\n    this.position = position;\n    this.leftoverVisibleColumns = leftoverVisibleColumns;\n    this.selection = SingleCursorState._computeSelection(this.selectionStart, this.position);\n  }\n\n  equals(other) {\n    return this.selectionStartLeftoverVisibleColumns === other.selectionStartLeftoverVisibleColumns && this.leftoverVisibleColumns === other.leftoverVisibleColumns && this.position.equals(other.position) && this.selectionStart.equalsRange(other.selectionStart);\n  }\n\n  hasSelection() {\n    return !this.selection.isEmpty() || !this.selectionStart.isEmpty();\n  }\n\n  move(inSelectionMode, lineNumber, column, leftoverVisibleColumns) {\n    if (inSelectionMode) {\n      // move just position\n      return new SingleCursorState(this.selectionStart, this.selectionStartLeftoverVisibleColumns, new Position(lineNumber, column), leftoverVisibleColumns);\n    } else {\n      // move everything\n      return new SingleCursorState(new Range(lineNumber, column, lineNumber, column), leftoverVisibleColumns, new Position(lineNumber, column), leftoverVisibleColumns);\n    }\n  }\n\n  static _computeSelection(selectionStart, position) {\n    if (selectionStart.isEmpty() || !position.isBeforeOrEqual(selectionStart.getStartPosition())) {\n      return Selection.fromPositions(selectionStart.getStartPosition(), position);\n    } else {\n      return Selection.fromPositions(selectionStart.getEndPosition(), position);\n    }\n  }\n\n}\nexport class EditOperationResult {\n  constructor(type, commands, opts) {\n    this._editOperationResultBrand = undefined;\n    this.type = type;\n    this.commands = commands;\n    this.shouldPushStackElementBefore = opts.shouldPushStackElementBefore;\n    this.shouldPushStackElementAfter = opts.shouldPushStackElementAfter;\n  }\n\n}\nexport function isQuote(ch) {\n  return ch === '\\'' || ch === '\"' || ch === '`';\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/common/cursor/cursorCommon.js"],"names":["Position","Range","Selection","TextModel","createScopedLineTokens","CursorColumns","autoCloseAlways","autoCloseNever","autoCloseBeforeWhitespace","chr","CursorConfiguration","constructor","languageId","modelOptions","configuration","languageConfigurationService","_cursorMoveConfigurationBrand","undefined","_languageId","options","layoutInfo","get","readOnly","tabSize","indentSize","insertSpaces","stickyTabStops","lineHeight","pageSize","Math","max","floor","height","useTabStops","wordSeparators","emptySelectionClipboard","copyWithSyntaxHighlighting","multiCursorMergeOverlapping","multiCursorPaste","autoClosingBrackets","autoClosingQuotes","autoClosingDelete","autoClosingOvertype","autoSurround","autoIndent","surroundingPairs","_electricChars","shouldAutoCloseBefore","quote","_getShouldAutoClose","bracket","autoClosingPairs","getLanguageConfiguration","getAutoClosingPairs","getSurroundingPairs","pair","open","close","shouldRecreate","e","hasChanged","electricChars","_a","electricCharacter","getElectricCharacters","char","onElectricCharacter","character","context","column","scopedLineTokens","electricCharacterSupport","firstCharOffset","normalizeIndentation","str","autoCloseConfig","_getLanguageDefinedShouldAutoClose","autoCloseBeforeSet","getAutoCloseBeforeSet","c","indexOf","visibleColumnFromColumn","model","position","getLineContent","lineNumber","columnFromVisibleColumn","visibleColumn","result","minColumn","getLineMinColumn","maxColumn","getLineMaxColumn","CursorContext","viewModel","coordinatesConverter","cursorConfig","_cursorContextBrand","CursorState","modelState","viewState","_cursorStateBrand","fromModelState","PartialModelCursorState","fromViewState","PartialViewCursorState","fromModelSelection","modelSelection","selection","liftSelection","SingleCursorState","fromPositions","getSelectionStart","getPosition","fromModelSelections","modelSelections","states","i","len","length","equals","other","selectionStart","selectionStartLeftoverVisibleColumns","leftoverVisibleColumns","_singleCursorStateBrand","_computeSelection","equalsRange","hasSelection","isEmpty","move","inSelectionMode","isBeforeOrEqual","getStartPosition","getEndPosition","EditOperationResult","type","commands","opts","_editOperationResultBrand","shouldPushStackElementBefore","shouldPushStackElementAfter","isQuote","ch"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\nimport { TextModel } from '../model/textModel.js';\nimport { createScopedLineTokens } from '../languages/supports.js';\nimport { CursorColumns } from '../core/cursorColumns.js';\nconst autoCloseAlways = () => true;\nconst autoCloseNever = () => false;\nconst autoCloseBeforeWhitespace = (chr) => (chr === ' ' || chr === '\\t');\nexport class CursorConfiguration {\n    constructor(languageId, modelOptions, configuration, languageConfigurationService) {\n        this.languageConfigurationService = languageConfigurationService;\n        this._cursorMoveConfigurationBrand = undefined;\n        this._languageId = languageId;\n        const options = configuration.options;\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this.readOnly = options.get(81 /* readOnly */);\n        this.tabSize = modelOptions.tabSize;\n        this.indentSize = modelOptions.indentSize;\n        this.insertSpaces = modelOptions.insertSpaces;\n        this.stickyTabStops = options.get(104 /* stickyTabStops */);\n        this.lineHeight = options.get(59 /* lineHeight */);\n        this.pageSize = Math.max(1, Math.floor(layoutInfo.height / this.lineHeight) - 2);\n        this.useTabStops = options.get(116 /* useTabStops */);\n        this.wordSeparators = options.get(117 /* wordSeparators */);\n        this.emptySelectionClipboard = options.get(32 /* emptySelectionClipboard */);\n        this.copyWithSyntaxHighlighting = options.get(21 /* copyWithSyntaxHighlighting */);\n        this.multiCursorMergeOverlapping = options.get(69 /* multiCursorMergeOverlapping */);\n        this.multiCursorPaste = options.get(71 /* multiCursorPaste */);\n        this.autoClosingBrackets = options.get(5 /* autoClosingBrackets */);\n        this.autoClosingQuotes = options.get(8 /* autoClosingQuotes */);\n        this.autoClosingDelete = options.get(6 /* autoClosingDelete */);\n        this.autoClosingOvertype = options.get(7 /* autoClosingOvertype */);\n        this.autoSurround = options.get(11 /* autoSurround */);\n        this.autoIndent = options.get(9 /* autoIndent */);\n        this.surroundingPairs = {};\n        this._electricChars = null;\n        this.shouldAutoCloseBefore = {\n            quote: this._getShouldAutoClose(languageId, this.autoClosingQuotes),\n            bracket: this._getShouldAutoClose(languageId, this.autoClosingBrackets)\n        };\n        this.autoClosingPairs = this.languageConfigurationService.getLanguageConfiguration(languageId).getAutoClosingPairs();\n        const surroundingPairs = this.languageConfigurationService.getLanguageConfiguration(languageId).getSurroundingPairs();\n        if (surroundingPairs) {\n            for (const pair of surroundingPairs) {\n                this.surroundingPairs[pair.open] = pair.close;\n            }\n        }\n    }\n    static shouldRecreate(e) {\n        return (e.hasChanged(131 /* layoutInfo */)\n            || e.hasChanged(117 /* wordSeparators */)\n            || e.hasChanged(32 /* emptySelectionClipboard */)\n            || e.hasChanged(69 /* multiCursorMergeOverlapping */)\n            || e.hasChanged(71 /* multiCursorPaste */)\n            || e.hasChanged(5 /* autoClosingBrackets */)\n            || e.hasChanged(8 /* autoClosingQuotes */)\n            || e.hasChanged(6 /* autoClosingDelete */)\n            || e.hasChanged(7 /* autoClosingOvertype */)\n            || e.hasChanged(11 /* autoSurround */)\n            || e.hasChanged(116 /* useTabStops */)\n            || e.hasChanged(59 /* lineHeight */)\n            || e.hasChanged(81 /* readOnly */));\n    }\n    get electricChars() {\n        var _a;\n        if (!this._electricChars) {\n            this._electricChars = {};\n            const electricChars = (_a = this.languageConfigurationService.getLanguageConfiguration(this._languageId).electricCharacter) === null || _a === void 0 ? void 0 : _a.getElectricCharacters();\n            if (electricChars) {\n                for (const char of electricChars) {\n                    this._electricChars[char] = true;\n                }\n            }\n        }\n        return this._electricChars;\n    }\n    /**\n     * Should return opening bracket type to match indentation with\n     */\n    onElectricCharacter(character, context, column) {\n        const scopedLineTokens = createScopedLineTokens(context, column - 1);\n        const electricCharacterSupport = this.languageConfigurationService.getLanguageConfiguration(scopedLineTokens.languageId).electricCharacter;\n        if (!electricCharacterSupport) {\n            return null;\n        }\n        return electricCharacterSupport.onElectricCharacter(character, scopedLineTokens, column - scopedLineTokens.firstCharOffset);\n    }\n    normalizeIndentation(str) {\n        return TextModel.normalizeIndentation(str, this.indentSize, this.insertSpaces);\n    }\n    _getShouldAutoClose(languageId, autoCloseConfig) {\n        switch (autoCloseConfig) {\n            case 'beforeWhitespace':\n                return autoCloseBeforeWhitespace;\n            case 'languageDefined':\n                return this._getLanguageDefinedShouldAutoClose(languageId);\n            case 'always':\n                return autoCloseAlways;\n            case 'never':\n                return autoCloseNever;\n        }\n    }\n    _getLanguageDefinedShouldAutoClose(languageId) {\n        const autoCloseBeforeSet = this.languageConfigurationService.getLanguageConfiguration(languageId).getAutoCloseBeforeSet();\n        return c => autoCloseBeforeSet.indexOf(c) !== -1;\n    }\n    /**\n     * Returns a visible column from a column.\n     * @see {@link CursorColumns}\n     */\n    visibleColumnFromColumn(model, position) {\n        return CursorColumns.visibleColumnFromColumn(model.getLineContent(position.lineNumber), position.column, this.tabSize);\n    }\n    /**\n     * Returns a visible column from a column.\n     * @see {@link CursorColumns}\n     */\n    columnFromVisibleColumn(model, lineNumber, visibleColumn) {\n        const result = CursorColumns.columnFromVisibleColumn(model.getLineContent(lineNumber), visibleColumn, this.tabSize);\n        const minColumn = model.getLineMinColumn(lineNumber);\n        if (result < minColumn) {\n            return minColumn;\n        }\n        const maxColumn = model.getLineMaxColumn(lineNumber);\n        if (result > maxColumn) {\n            return maxColumn;\n        }\n        return result;\n    }\n}\nexport class CursorContext {\n    constructor(model, viewModel, coordinatesConverter, cursorConfig) {\n        this._cursorContextBrand = undefined;\n        this.model = model;\n        this.viewModel = viewModel;\n        this.coordinatesConverter = coordinatesConverter;\n        this.cursorConfig = cursorConfig;\n    }\n}\nexport class CursorState {\n    constructor(modelState, viewState) {\n        this._cursorStateBrand = undefined;\n        this.modelState = modelState;\n        this.viewState = viewState;\n    }\n    static fromModelState(modelState) {\n        return new PartialModelCursorState(modelState);\n    }\n    static fromViewState(viewState) {\n        return new PartialViewCursorState(viewState);\n    }\n    static fromModelSelection(modelSelection) {\n        const selection = Selection.liftSelection(modelSelection);\n        const modelState = new SingleCursorState(Range.fromPositions(selection.getSelectionStart()), 0, selection.getPosition(), 0);\n        return CursorState.fromModelState(modelState);\n    }\n    static fromModelSelections(modelSelections) {\n        const states = [];\n        for (let i = 0, len = modelSelections.length; i < len; i++) {\n            states[i] = this.fromModelSelection(modelSelections[i]);\n        }\n        return states;\n    }\n    equals(other) {\n        return (this.viewState.equals(other.viewState) && this.modelState.equals(other.modelState));\n    }\n}\nexport class PartialModelCursorState {\n    constructor(modelState) {\n        this.modelState = modelState;\n        this.viewState = null;\n    }\n}\nexport class PartialViewCursorState {\n    constructor(viewState) {\n        this.modelState = null;\n        this.viewState = viewState;\n    }\n}\n/**\n * Represents the cursor state on either the model or on the view model.\n */\nexport class SingleCursorState {\n    constructor(selectionStart, selectionStartLeftoverVisibleColumns, position, leftoverVisibleColumns) {\n        this._singleCursorStateBrand = undefined;\n        this.selectionStart = selectionStart;\n        this.selectionStartLeftoverVisibleColumns = selectionStartLeftoverVisibleColumns;\n        this.position = position;\n        this.leftoverVisibleColumns = leftoverVisibleColumns;\n        this.selection = SingleCursorState._computeSelection(this.selectionStart, this.position);\n    }\n    equals(other) {\n        return (this.selectionStartLeftoverVisibleColumns === other.selectionStartLeftoverVisibleColumns\n            && this.leftoverVisibleColumns === other.leftoverVisibleColumns\n            && this.position.equals(other.position)\n            && this.selectionStart.equalsRange(other.selectionStart));\n    }\n    hasSelection() {\n        return (!this.selection.isEmpty() || !this.selectionStart.isEmpty());\n    }\n    move(inSelectionMode, lineNumber, column, leftoverVisibleColumns) {\n        if (inSelectionMode) {\n            // move just position\n            return new SingleCursorState(this.selectionStart, this.selectionStartLeftoverVisibleColumns, new Position(lineNumber, column), leftoverVisibleColumns);\n        }\n        else {\n            // move everything\n            return new SingleCursorState(new Range(lineNumber, column, lineNumber, column), leftoverVisibleColumns, new Position(lineNumber, column), leftoverVisibleColumns);\n        }\n    }\n    static _computeSelection(selectionStart, position) {\n        if (selectionStart.isEmpty() || !position.isBeforeOrEqual(selectionStart.getStartPosition())) {\n            return Selection.fromPositions(selectionStart.getStartPosition(), position);\n        }\n        else {\n            return Selection.fromPositions(selectionStart.getEndPosition(), position);\n        }\n    }\n}\nexport class EditOperationResult {\n    constructor(type, commands, opts) {\n        this._editOperationResultBrand = undefined;\n        this.type = type;\n        this.commands = commands;\n        this.shouldPushStackElementBefore = opts.shouldPushStackElementBefore;\n        this.shouldPushStackElementAfter = opts.shouldPushStackElementAfter;\n    }\n}\nexport function isQuote(ch) {\n    return (ch === '\\'' || ch === '\"' || ch === '`');\n}\n"]},"metadata":{},"sourceType":"module"}