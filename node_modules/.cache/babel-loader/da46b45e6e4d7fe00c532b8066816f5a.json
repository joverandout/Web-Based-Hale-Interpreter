{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Position } from './position.js';\nimport { Range } from './range.js';\n/**\n * A selection in the editor.\n * The selection is a range that has an orientation.\n */\n\nexport class Selection extends Range {\n  constructor(selectionStartLineNumber, selectionStartColumn, positionLineNumber, positionColumn) {\n    super(selectionStartLineNumber, selectionStartColumn, positionLineNumber, positionColumn);\n    this.selectionStartLineNumber = selectionStartLineNumber;\n    this.selectionStartColumn = selectionStartColumn;\n    this.positionLineNumber = positionLineNumber;\n    this.positionColumn = positionColumn;\n  }\n  /**\n   * Transform to a human-readable representation.\n   */\n\n\n  toString() {\n    return '[' + this.selectionStartLineNumber + ',' + this.selectionStartColumn + ' -> ' + this.positionLineNumber + ',' + this.positionColumn + ']';\n  }\n  /**\n   * Test if equals other selection.\n   */\n\n\n  equalsSelection(other) {\n    return Selection.selectionsEqual(this, other);\n  }\n  /**\n   * Test if the two selections are equal.\n   */\n\n\n  static selectionsEqual(a, b) {\n    return a.selectionStartLineNumber === b.selectionStartLineNumber && a.selectionStartColumn === b.selectionStartColumn && a.positionLineNumber === b.positionLineNumber && a.positionColumn === b.positionColumn;\n  }\n  /**\n   * Get directions (LTR or RTL).\n   */\n\n\n  getDirection() {\n    if (this.selectionStartLineNumber === this.startLineNumber && this.selectionStartColumn === this.startColumn) {\n      return 0\n      /* LTR */\n      ;\n    }\n\n    return 1\n    /* RTL */\n    ;\n  }\n  /**\n   * Create a new selection with a different `positionLineNumber` and `positionColumn`.\n   */\n\n\n  setEndPosition(endLineNumber, endColumn) {\n    if (this.getDirection() === 0\n    /* LTR */\n    ) {\n      return new Selection(this.startLineNumber, this.startColumn, endLineNumber, endColumn);\n    }\n\n    return new Selection(endLineNumber, endColumn, this.startLineNumber, this.startColumn);\n  }\n  /**\n   * Get the position at `positionLineNumber` and `positionColumn`.\n   */\n\n\n  getPosition() {\n    return new Position(this.positionLineNumber, this.positionColumn);\n  }\n  /**\n   * Get the position at the start of the selection.\n  */\n\n\n  getSelectionStart() {\n    return new Position(this.selectionStartLineNumber, this.selectionStartColumn);\n  }\n  /**\n   * Create a new selection with a different `selectionStartLineNumber` and `selectionStartColumn`.\n   */\n\n\n  setStartPosition(startLineNumber, startColumn) {\n    if (this.getDirection() === 0\n    /* LTR */\n    ) {\n      return new Selection(startLineNumber, startColumn, this.endLineNumber, this.endColumn);\n    }\n\n    return new Selection(this.endLineNumber, this.endColumn, startLineNumber, startColumn);\n  } // ----\n\n  /**\n   * Create a `Selection` from one or two positions\n   */\n\n\n  static fromPositions(start, end = start) {\n    return new Selection(start.lineNumber, start.column, end.lineNumber, end.column);\n  }\n  /**\n   * Creates a `Selection` from a range, given a direction.\n   */\n\n\n  static fromRange(range, direction) {\n    if (direction === 0\n    /* LTR */\n    ) {\n      return new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\n    } else {\n      return new Selection(range.endLineNumber, range.endColumn, range.startLineNumber, range.startColumn);\n    }\n  }\n  /**\n   * Create a `Selection` from an `ISelection`.\n   */\n\n\n  static liftSelection(sel) {\n    return new Selection(sel.selectionStartLineNumber, sel.selectionStartColumn, sel.positionLineNumber, sel.positionColumn);\n  }\n  /**\n   * `a` equals `b`.\n   */\n\n\n  static selectionsArrEqual(a, b) {\n    if (a && !b || !a && b) {\n      return false;\n    }\n\n    if (!a && !b) {\n      return true;\n    }\n\n    if (a.length !== b.length) {\n      return false;\n    }\n\n    for (let i = 0, len = a.length; i < len; i++) {\n      if (!this.selectionsEqual(a[i], b[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Test if `obj` is an `ISelection`.\n   */\n\n\n  static isISelection(obj) {\n    return obj && typeof obj.selectionStartLineNumber === 'number' && typeof obj.selectionStartColumn === 'number' && typeof obj.positionLineNumber === 'number' && typeof obj.positionColumn === 'number';\n  }\n  /**\n   * Create with a direction.\n   */\n\n\n  static createWithDirection(startLineNumber, startColumn, endLineNumber, endColumn, direction) {\n    if (direction === 0\n    /* LTR */\n    ) {\n      return new Selection(startLineNumber, startColumn, endLineNumber, endColumn);\n    }\n\n    return new Selection(endLineNumber, endColumn, startLineNumber, startColumn);\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/common/core/selection.js"],"names":["Position","Range","Selection","constructor","selectionStartLineNumber","selectionStartColumn","positionLineNumber","positionColumn","toString","equalsSelection","other","selectionsEqual","a","b","getDirection","startLineNumber","startColumn","setEndPosition","endLineNumber","endColumn","getPosition","getSelectionStart","setStartPosition","fromPositions","start","end","lineNumber","column","fromRange","range","direction","liftSelection","sel","selectionsArrEqual","length","i","len","isISelection","obj","createWithDirection"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Position } from './position.js';\nimport { Range } from './range.js';\n/**\n * A selection in the editor.\n * The selection is a range that has an orientation.\n */\nexport class Selection extends Range {\n    constructor(selectionStartLineNumber, selectionStartColumn, positionLineNumber, positionColumn) {\n        super(selectionStartLineNumber, selectionStartColumn, positionLineNumber, positionColumn);\n        this.selectionStartLineNumber = selectionStartLineNumber;\n        this.selectionStartColumn = selectionStartColumn;\n        this.positionLineNumber = positionLineNumber;\n        this.positionColumn = positionColumn;\n    }\n    /**\n     * Transform to a human-readable representation.\n     */\n    toString() {\n        return '[' + this.selectionStartLineNumber + ',' + this.selectionStartColumn + ' -> ' + this.positionLineNumber + ',' + this.positionColumn + ']';\n    }\n    /**\n     * Test if equals other selection.\n     */\n    equalsSelection(other) {\n        return (Selection.selectionsEqual(this, other));\n    }\n    /**\n     * Test if the two selections are equal.\n     */\n    static selectionsEqual(a, b) {\n        return (a.selectionStartLineNumber === b.selectionStartLineNumber &&\n            a.selectionStartColumn === b.selectionStartColumn &&\n            a.positionLineNumber === b.positionLineNumber &&\n            a.positionColumn === b.positionColumn);\n    }\n    /**\n     * Get directions (LTR or RTL).\n     */\n    getDirection() {\n        if (this.selectionStartLineNumber === this.startLineNumber && this.selectionStartColumn === this.startColumn) {\n            return 0 /* LTR */;\n        }\n        return 1 /* RTL */;\n    }\n    /**\n     * Create a new selection with a different `positionLineNumber` and `positionColumn`.\n     */\n    setEndPosition(endLineNumber, endColumn) {\n        if (this.getDirection() === 0 /* LTR */) {\n            return new Selection(this.startLineNumber, this.startColumn, endLineNumber, endColumn);\n        }\n        return new Selection(endLineNumber, endColumn, this.startLineNumber, this.startColumn);\n    }\n    /**\n     * Get the position at `positionLineNumber` and `positionColumn`.\n     */\n    getPosition() {\n        return new Position(this.positionLineNumber, this.positionColumn);\n    }\n    /**\n     * Get the position at the start of the selection.\n    */\n    getSelectionStart() {\n        return new Position(this.selectionStartLineNumber, this.selectionStartColumn);\n    }\n    /**\n     * Create a new selection with a different `selectionStartLineNumber` and `selectionStartColumn`.\n     */\n    setStartPosition(startLineNumber, startColumn) {\n        if (this.getDirection() === 0 /* LTR */) {\n            return new Selection(startLineNumber, startColumn, this.endLineNumber, this.endColumn);\n        }\n        return new Selection(this.endLineNumber, this.endColumn, startLineNumber, startColumn);\n    }\n    // ----\n    /**\n     * Create a `Selection` from one or two positions\n     */\n    static fromPositions(start, end = start) {\n        return new Selection(start.lineNumber, start.column, end.lineNumber, end.column);\n    }\n    /**\n     * Creates a `Selection` from a range, given a direction.\n     */\n    static fromRange(range, direction) {\n        if (direction === 0 /* LTR */) {\n            return new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\n        }\n        else {\n            return new Selection(range.endLineNumber, range.endColumn, range.startLineNumber, range.startColumn);\n        }\n    }\n    /**\n     * Create a `Selection` from an `ISelection`.\n     */\n    static liftSelection(sel) {\n        return new Selection(sel.selectionStartLineNumber, sel.selectionStartColumn, sel.positionLineNumber, sel.positionColumn);\n    }\n    /**\n     * `a` equals `b`.\n     */\n    static selectionsArrEqual(a, b) {\n        if (a && !b || !a && b) {\n            return false;\n        }\n        if (!a && !b) {\n            return true;\n        }\n        if (a.length !== b.length) {\n            return false;\n        }\n        for (let i = 0, len = a.length; i < len; i++) {\n            if (!this.selectionsEqual(a[i], b[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Test if `obj` is an `ISelection`.\n     */\n    static isISelection(obj) {\n        return (obj\n            && (typeof obj.selectionStartLineNumber === 'number')\n            && (typeof obj.selectionStartColumn === 'number')\n            && (typeof obj.positionLineNumber === 'number')\n            && (typeof obj.positionColumn === 'number'));\n    }\n    /**\n     * Create with a direction.\n     */\n    static createWithDirection(startLineNumber, startColumn, endLineNumber, endColumn, direction) {\n        if (direction === 0 /* LTR */) {\n            return new Selection(startLineNumber, startColumn, endLineNumber, endColumn);\n        }\n        return new Selection(endLineNumber, endColumn, startLineNumber, startColumn);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}