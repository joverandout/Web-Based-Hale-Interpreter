{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './lineNumbers.css';\nimport * as platform from '../../../../base/common/platform.js';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { Position } from '../../../common/core/position.js';\nimport { editorActiveLineNumber, editorLineNumbers } from '../../../common/core/editorColorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nexport class LineNumbersOverlay extends DynamicViewOverlay {\n  constructor(context) {\n    super();\n    this._context = context;\n\n    this._readConfig();\n\n    this._lastCursorModelPosition = new Position(1, 1);\n    this._renderResult = null;\n    this._activeLineNumber = 1;\n\n    this._context.addEventHandler(this);\n  }\n\n  _readConfig() {\n    const options = this._context.configuration.options;\n    this._lineHeight = options.get(59\n    /* lineHeight */\n    );\n    const lineNumbers = options.get(60\n    /* lineNumbers */\n    );\n    this._renderLineNumbers = lineNumbers.renderType;\n    this._renderCustomLineNumbers = lineNumbers.renderFn;\n    this._renderFinalNewline = options.get(84\n    /* renderFinalNewline */\n    );\n    const layoutInfo = options.get(131\n    /* layoutInfo */\n    );\n    this._lineNumbersLeft = layoutInfo.lineNumbersLeft;\n    this._lineNumbersWidth = layoutInfo.lineNumbersWidth;\n  }\n\n  dispose() {\n    this._context.removeEventHandler(this);\n\n    this._renderResult = null;\n    super.dispose();\n  } // --- begin event handlers\n\n\n  onConfigurationChanged(e) {\n    this._readConfig();\n\n    return true;\n  }\n\n  onCursorStateChanged(e) {\n    const primaryViewPosition = e.selections[0].getPosition();\n    this._lastCursorModelPosition = this._context.model.coordinatesConverter.convertViewPositionToModelPosition(primaryViewPosition);\n    let shouldRender = false;\n\n    if (this._activeLineNumber !== primaryViewPosition.lineNumber) {\n      this._activeLineNumber = primaryViewPosition.lineNumber;\n      shouldRender = true;\n    }\n\n    if (this._renderLineNumbers === 2\n    /* Relative */\n    || this._renderLineNumbers === 3\n    /* Interval */\n    ) {\n      shouldRender = true;\n    }\n\n    return shouldRender;\n  }\n\n  onFlushed(e) {\n    return true;\n  }\n\n  onLinesChanged(e) {\n    return true;\n  }\n\n  onLinesDeleted(e) {\n    return true;\n  }\n\n  onLinesInserted(e) {\n    return true;\n  }\n\n  onScrollChanged(e) {\n    return e.scrollTopChanged;\n  }\n\n  onZonesChanged(e) {\n    return true;\n  } // --- end event handlers\n\n\n  _getLineRenderLineNumber(viewLineNumber) {\n    const modelPosition = this._context.model.coordinatesConverter.convertViewPositionToModelPosition(new Position(viewLineNumber, 1));\n\n    if (modelPosition.column !== 1) {\n      return '';\n    }\n\n    const modelLineNumber = modelPosition.lineNumber;\n\n    if (this._renderCustomLineNumbers) {\n      return this._renderCustomLineNumbers(modelLineNumber);\n    }\n\n    if (this._renderLineNumbers === 2\n    /* Relative */\n    ) {\n      const diff = Math.abs(this._lastCursorModelPosition.lineNumber - modelLineNumber);\n\n      if (diff === 0) {\n        return '<span class=\"relative-current-line-number\">' + modelLineNumber + '</span>';\n      }\n\n      return String(diff);\n    }\n\n    if (this._renderLineNumbers === 3\n    /* Interval */\n    ) {\n      if (this._lastCursorModelPosition.lineNumber === modelLineNumber) {\n        return String(modelLineNumber);\n      }\n\n      if (modelLineNumber % 10 === 0) {\n        return String(modelLineNumber);\n      }\n\n      return '';\n    }\n\n    return String(modelLineNumber);\n  }\n\n  prepareRender(ctx) {\n    if (this._renderLineNumbers === 0\n    /* Off */\n    ) {\n      this._renderResult = null;\n      return;\n    }\n\n    const lineHeightClassName = platform.isLinux ? this._lineHeight % 2 === 0 ? ' lh-even' : ' lh-odd' : '';\n    const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n    const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n    const common = '<div class=\"' + LineNumbersOverlay.CLASS_NAME + lineHeightClassName + '\" style=\"left:' + this._lineNumbersLeft + 'px;width:' + this._lineNumbersWidth + 'px;\">';\n\n    const lineCount = this._context.model.getLineCount();\n\n    const output = [];\n\n    for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n      const lineIndex = lineNumber - visibleStartLineNumber;\n\n      if (!this._renderFinalNewline) {\n        if (lineNumber === lineCount && this._context.model.getLineLength(lineNumber) === 0) {\n          // Do not render last (empty) line\n          output[lineIndex] = '';\n          continue;\n        }\n      }\n\n      const renderLineNumber = this._getLineRenderLineNumber(lineNumber);\n\n      if (renderLineNumber) {\n        if (lineNumber === this._activeLineNumber) {\n          output[lineIndex] = '<div class=\"active-line-number ' + LineNumbersOverlay.CLASS_NAME + lineHeightClassName + '\" style=\"left:' + this._lineNumbersLeft + 'px;width:' + this._lineNumbersWidth + 'px;\">' + renderLineNumber + '</div>';\n        } else {\n          output[lineIndex] = common + renderLineNumber + '</div>';\n        }\n      } else {\n        output[lineIndex] = '';\n      }\n    }\n\n    this._renderResult = output;\n  }\n\n  render(startLineNumber, lineNumber) {\n    if (!this._renderResult) {\n      return '';\n    }\n\n    const lineIndex = lineNumber - startLineNumber;\n\n    if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n      return '';\n    }\n\n    return this._renderResult[lineIndex];\n  }\n\n}\nLineNumbersOverlay.CLASS_NAME = 'line-numbers'; // theming\n\nregisterThemingParticipant((theme, collector) => {\n  const lineNumbers = theme.getColor(editorLineNumbers);\n\n  if (lineNumbers) {\n    collector.addRule(`.monaco-editor .line-numbers { color: ${lineNumbers}; }`);\n  }\n\n  const activeLineNumber = theme.getColor(editorActiveLineNumber);\n\n  if (activeLineNumber) {\n    collector.addRule(`.monaco-editor .line-numbers.active-line-number { color: ${activeLineNumber}; }`);\n  }\n});","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/lineNumbers/lineNumbers.js"],"names":["platform","DynamicViewOverlay","Position","editorActiveLineNumber","editorLineNumbers","registerThemingParticipant","LineNumbersOverlay","constructor","context","_context","_readConfig","_lastCursorModelPosition","_renderResult","_activeLineNumber","addEventHandler","options","configuration","_lineHeight","get","lineNumbers","_renderLineNumbers","renderType","_renderCustomLineNumbers","renderFn","_renderFinalNewline","layoutInfo","_lineNumbersLeft","lineNumbersLeft","_lineNumbersWidth","lineNumbersWidth","dispose","removeEventHandler","onConfigurationChanged","e","onCursorStateChanged","primaryViewPosition","selections","getPosition","model","coordinatesConverter","convertViewPositionToModelPosition","shouldRender","lineNumber","onFlushed","onLinesChanged","onLinesDeleted","onLinesInserted","onScrollChanged","scrollTopChanged","onZonesChanged","_getLineRenderLineNumber","viewLineNumber","modelPosition","column","modelLineNumber","diff","Math","abs","String","prepareRender","ctx","lineHeightClassName","isLinux","visibleStartLineNumber","visibleRange","startLineNumber","visibleEndLineNumber","endLineNumber","common","CLASS_NAME","lineCount","getLineCount","output","lineIndex","getLineLength","renderLineNumber","render","length","theme","collector","getColor","addRule","activeLineNumber"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './lineNumbers.css';\nimport * as platform from '../../../../base/common/platform.js';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { Position } from '../../../common/core/position.js';\nimport { editorActiveLineNumber, editorLineNumbers } from '../../../common/core/editorColorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nexport class LineNumbersOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        this._readConfig();\n        this._lastCursorModelPosition = new Position(1, 1);\n        this._renderResult = null;\n        this._activeLineNumber = 1;\n        this._context.addEventHandler(this);\n    }\n    _readConfig() {\n        const options = this._context.configuration.options;\n        this._lineHeight = options.get(59 /* lineHeight */);\n        const lineNumbers = options.get(60 /* lineNumbers */);\n        this._renderLineNumbers = lineNumbers.renderType;\n        this._renderCustomLineNumbers = lineNumbers.renderFn;\n        this._renderFinalNewline = options.get(84 /* renderFinalNewline */);\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this._lineNumbersLeft = layoutInfo.lineNumbersLeft;\n        this._lineNumbersWidth = layoutInfo.lineNumbersWidth;\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        this._readConfig();\n        return true;\n    }\n    onCursorStateChanged(e) {\n        const primaryViewPosition = e.selections[0].getPosition();\n        this._lastCursorModelPosition = this._context.model.coordinatesConverter.convertViewPositionToModelPosition(primaryViewPosition);\n        let shouldRender = false;\n        if (this._activeLineNumber !== primaryViewPosition.lineNumber) {\n            this._activeLineNumber = primaryViewPosition.lineNumber;\n            shouldRender = true;\n        }\n        if (this._renderLineNumbers === 2 /* Relative */ || this._renderLineNumbers === 3 /* Interval */) {\n            shouldRender = true;\n        }\n        return shouldRender;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    _getLineRenderLineNumber(viewLineNumber) {\n        const modelPosition = this._context.model.coordinatesConverter.convertViewPositionToModelPosition(new Position(viewLineNumber, 1));\n        if (modelPosition.column !== 1) {\n            return '';\n        }\n        const modelLineNumber = modelPosition.lineNumber;\n        if (this._renderCustomLineNumbers) {\n            return this._renderCustomLineNumbers(modelLineNumber);\n        }\n        if (this._renderLineNumbers === 2 /* Relative */) {\n            const diff = Math.abs(this._lastCursorModelPosition.lineNumber - modelLineNumber);\n            if (diff === 0) {\n                return '<span class=\"relative-current-line-number\">' + modelLineNumber + '</span>';\n            }\n            return String(diff);\n        }\n        if (this._renderLineNumbers === 3 /* Interval */) {\n            if (this._lastCursorModelPosition.lineNumber === modelLineNumber) {\n                return String(modelLineNumber);\n            }\n            if (modelLineNumber % 10 === 0) {\n                return String(modelLineNumber);\n            }\n            return '';\n        }\n        return String(modelLineNumber);\n    }\n    prepareRender(ctx) {\n        if (this._renderLineNumbers === 0 /* Off */) {\n            this._renderResult = null;\n            return;\n        }\n        const lineHeightClassName = (platform.isLinux ? (this._lineHeight % 2 === 0 ? ' lh-even' : ' lh-odd') : '');\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const common = '<div class=\"' + LineNumbersOverlay.CLASS_NAME + lineHeightClassName + '\" style=\"left:' + this._lineNumbersLeft + 'px;width:' + this._lineNumbersWidth + 'px;\">';\n        const lineCount = this._context.model.getLineCount();\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            if (!this._renderFinalNewline) {\n                if (lineNumber === lineCount && this._context.model.getLineLength(lineNumber) === 0) {\n                    // Do not render last (empty) line\n                    output[lineIndex] = '';\n                    continue;\n                }\n            }\n            const renderLineNumber = this._getLineRenderLineNumber(lineNumber);\n            if (renderLineNumber) {\n                if (lineNumber === this._activeLineNumber) {\n                    output[lineIndex] = ('<div class=\"active-line-number ' + LineNumbersOverlay.CLASS_NAME + lineHeightClassName + '\" style=\"left:' + this._lineNumbersLeft + 'px;width:' + this._lineNumbersWidth + 'px;\">'\n                        + renderLineNumber\n                        + '</div>');\n                }\n                else {\n                    output[lineIndex] = (common\n                        + renderLineNumber\n                        + '</div>');\n                }\n            }\n            else {\n                output[lineIndex] = '';\n            }\n        }\n        this._renderResult = output;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\nLineNumbersOverlay.CLASS_NAME = 'line-numbers';\n// theming\nregisterThemingParticipant((theme, collector) => {\n    const lineNumbers = theme.getColor(editorLineNumbers);\n    if (lineNumbers) {\n        collector.addRule(`.monaco-editor .line-numbers { color: ${lineNumbers}; }`);\n    }\n    const activeLineNumber = theme.getColor(editorActiveLineNumber);\n    if (activeLineNumber) {\n        collector.addRule(`.monaco-editor .line-numbers.active-line-number { color: ${activeLineNumber}; }`);\n    }\n});\n"]},"metadata":{},"sourceType":"module"}