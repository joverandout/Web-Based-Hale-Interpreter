{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { createCancelablePromise, Delayer } from '../../../../base/common/async.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { Disposable, MutableDisposable } from '../../../../base/common/lifecycle.js';\nimport { CharacterSet } from '../../../common/core/characterClassifier.js';\nimport * as modes from '../../../common/languages.js';\nimport { provideSignatureHelp } from './provideSignatureHelp.js';\nvar ParameterHintState;\n\n(function (ParameterHintState) {\n  ParameterHintState.Default = {\n    type: 0\n    /* Default */\n\n  };\n\n  class Pending {\n    constructor(request, previouslyActiveHints) {\n      this.request = request;\n      this.previouslyActiveHints = previouslyActiveHints;\n      this.type = 2\n      /* Pending */\n      ;\n    }\n\n  }\n\n  ParameterHintState.Pending = Pending;\n\n  class Active {\n    constructor(hints) {\n      this.hints = hints;\n      this.type = 1\n      /* Active */\n      ;\n    }\n\n  }\n\n  ParameterHintState.Active = Active;\n})(ParameterHintState || (ParameterHintState = {}));\n\nexport class ParameterHintsModel extends Disposable {\n  constructor(editor, delay = ParameterHintsModel.DEFAULT_DELAY) {\n    super();\n    this._onChangedHints = this._register(new Emitter());\n    this.onChangedHints = this._onChangedHints.event;\n    this.triggerOnType = false;\n    this._state = ParameterHintState.Default;\n    this._pendingTriggers = [];\n    this._lastSignatureHelpResult = this._register(new MutableDisposable());\n    this.triggerChars = new CharacterSet();\n    this.retriggerChars = new CharacterSet();\n    this.triggerId = 0;\n    this.editor = editor;\n    this.throttledDelayer = new Delayer(delay);\n\n    this._register(this.editor.onDidBlurEditorWidget(() => this.cancel()));\n\n    this._register(this.editor.onDidChangeConfiguration(() => this.onEditorConfigurationChange()));\n\n    this._register(this.editor.onDidChangeModel(e => this.onModelChanged()));\n\n    this._register(this.editor.onDidChangeModelLanguage(_ => this.onModelChanged()));\n\n    this._register(this.editor.onDidChangeCursorSelection(e => this.onCursorChange(e)));\n\n    this._register(this.editor.onDidChangeModelContent(e => this.onModelContentChange()));\n\n    this._register(modes.SignatureHelpProviderRegistry.onDidChange(this.onModelChanged, this));\n\n    this._register(this.editor.onDidType(text => this.onDidType(text)));\n\n    this.onEditorConfigurationChange();\n    this.onModelChanged();\n  }\n\n  get state() {\n    return this._state;\n  }\n\n  set state(value) {\n    if (this._state.type === 2\n    /* Pending */\n    ) {\n      this._state.request.cancel();\n    }\n\n    this._state = value;\n  }\n\n  cancel(silent = false) {\n    this.state = ParameterHintState.Default;\n    this.throttledDelayer.cancel();\n\n    if (!silent) {\n      this._onChangedHints.fire(undefined);\n    }\n  }\n\n  trigger(context, delay) {\n    const model = this.editor.getModel();\n\n    if (!model || !modes.SignatureHelpProviderRegistry.has(model)) {\n      return;\n    }\n\n    const triggerId = ++this.triggerId;\n\n    this._pendingTriggers.push(context);\n\n    this.throttledDelayer.trigger(() => {\n      return this.doTrigger(triggerId);\n    }, delay).catch(onUnexpectedError);\n  }\n\n  next() {\n    if (this.state.type !== 1\n    /* Active */\n    ) {\n      return;\n    }\n\n    const length = this.state.hints.signatures.length;\n    const activeSignature = this.state.hints.activeSignature;\n    const last = activeSignature % length === length - 1;\n    const cycle = this.editor.getOption(76\n    /* parameterHints */\n    ).cycle; // If there is only one signature, or we're on last signature of list\n\n    if ((length < 2 || last) && !cycle) {\n      this.cancel();\n      return;\n    }\n\n    this.updateActiveSignature(last && cycle ? 0 : activeSignature + 1);\n  }\n\n  previous() {\n    if (this.state.type !== 1\n    /* Active */\n    ) {\n      return;\n    }\n\n    const length = this.state.hints.signatures.length;\n    const activeSignature = this.state.hints.activeSignature;\n    const first = activeSignature === 0;\n    const cycle = this.editor.getOption(76\n    /* parameterHints */\n    ).cycle; // If there is only one signature, or we're on first signature of list\n\n    if ((length < 2 || first) && !cycle) {\n      this.cancel();\n      return;\n    }\n\n    this.updateActiveSignature(first && cycle ? length - 1 : activeSignature - 1);\n  }\n\n  updateActiveSignature(activeSignature) {\n    if (this.state.type !== 1\n    /* Active */\n    ) {\n      return;\n    }\n\n    this.state = new ParameterHintState.Active(Object.assign(Object.assign({}, this.state.hints), {\n      activeSignature\n    }));\n\n    this._onChangedHints.fire(this.state.hints);\n  }\n\n  doTrigger(triggerId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const isRetrigger = this.state.type === 1\n      /* Active */\n      || this.state.type === 2\n      /* Pending */\n      ;\n      const activeSignatureHelp = this.getLastActiveHints();\n      this.cancel(true);\n\n      if (this._pendingTriggers.length === 0) {\n        return false;\n      }\n\n      const context = this._pendingTriggers.reduce(mergeTriggerContexts);\n\n      this._pendingTriggers = [];\n      const triggerContext = {\n        triggerKind: context.triggerKind,\n        triggerCharacter: context.triggerCharacter,\n        isRetrigger: isRetrigger,\n        activeSignatureHelp: activeSignatureHelp\n      };\n\n      if (!this.editor.hasModel()) {\n        return false;\n      }\n\n      const model = this.editor.getModel();\n      const position = this.editor.getPosition();\n      this.state = new ParameterHintState.Pending(createCancelablePromise(token => provideSignatureHelp(model, position, triggerContext, token)), activeSignatureHelp);\n\n      try {\n        const result = yield this.state.request; // Check that we are still resolving the correct signature help\n\n        if (triggerId !== this.triggerId) {\n          result === null || result === void 0 ? void 0 : result.dispose();\n          return false;\n        }\n\n        if (!result || !result.value.signatures || result.value.signatures.length === 0) {\n          result === null || result === void 0 ? void 0 : result.dispose();\n\n          this._lastSignatureHelpResult.clear();\n\n          this.cancel();\n          return false;\n        } else {\n          this.state = new ParameterHintState.Active(result.value);\n          this._lastSignatureHelpResult.value = result;\n\n          this._onChangedHints.fire(this.state.hints);\n\n          return true;\n        }\n      } catch (error) {\n        if (triggerId === this.triggerId) {\n          this.state = ParameterHintState.Default;\n        }\n\n        onUnexpectedError(error);\n        return false;\n      }\n    });\n  }\n\n  getLastActiveHints() {\n    switch (this.state.type) {\n      case 1\n      /* Active */\n      :\n        return this.state.hints;\n\n      case 2\n      /* Pending */\n      :\n        return this.state.previouslyActiveHints;\n\n      default:\n        return undefined;\n    }\n  }\n\n  get isTriggered() {\n    return this.state.type === 1\n    /* Active */\n    || this.state.type === 2\n    /* Pending */\n    || this.throttledDelayer.isTriggered();\n  }\n\n  onModelChanged() {\n    this.cancel(); // Update trigger characters\n\n    this.triggerChars = new CharacterSet();\n    this.retriggerChars = new CharacterSet();\n    const model = this.editor.getModel();\n\n    if (!model) {\n      return;\n    }\n\n    for (const support of modes.SignatureHelpProviderRegistry.ordered(model)) {\n      for (const ch of support.signatureHelpTriggerCharacters || []) {\n        this.triggerChars.add(ch.charCodeAt(0)); // All trigger characters are also considered retrigger characters\n\n        this.retriggerChars.add(ch.charCodeAt(0));\n      }\n\n      for (const ch of support.signatureHelpRetriggerCharacters || []) {\n        this.retriggerChars.add(ch.charCodeAt(0));\n      }\n    }\n  }\n\n  onDidType(text) {\n    if (!this.triggerOnType) {\n      return;\n    }\n\n    const lastCharIndex = text.length - 1;\n    const triggerCharCode = text.charCodeAt(lastCharIndex);\n\n    if (this.triggerChars.has(triggerCharCode) || this.isTriggered && this.retriggerChars.has(triggerCharCode)) {\n      this.trigger({\n        triggerKind: modes.SignatureHelpTriggerKind.TriggerCharacter,\n        triggerCharacter: text.charAt(lastCharIndex)\n      });\n    }\n  }\n\n  onCursorChange(e) {\n    if (e.source === 'mouse') {\n      this.cancel();\n    } else if (this.isTriggered) {\n      this.trigger({\n        triggerKind: modes.SignatureHelpTriggerKind.ContentChange\n      });\n    }\n  }\n\n  onModelContentChange() {\n    if (this.isTriggered) {\n      this.trigger({\n        triggerKind: modes.SignatureHelpTriggerKind.ContentChange\n      });\n    }\n  }\n\n  onEditorConfigurationChange() {\n    this.triggerOnType = this.editor.getOption(76\n    /* parameterHints */\n    ).enabled;\n\n    if (!this.triggerOnType) {\n      this.cancel();\n    }\n  }\n\n  dispose() {\n    this.cancel(true);\n    super.dispose();\n  }\n\n}\nParameterHintsModel.DEFAULT_DELAY = 120; // ms\n\nfunction mergeTriggerContexts(previous, current) {\n  switch (current.triggerKind) {\n    case modes.SignatureHelpTriggerKind.Invoke:\n      // Invoke overrides previous triggers.\n      return current;\n\n    case modes.SignatureHelpTriggerKind.ContentChange:\n      // Ignore content changes triggers\n      return previous;\n\n    case modes.SignatureHelpTriggerKind.TriggerCharacter:\n    default:\n      return current;\n  }\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/contrib/parameterHints/browser/parameterHintsModel.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","createCancelablePromise","Delayer","onUnexpectedError","Emitter","Disposable","MutableDisposable","CharacterSet","modes","provideSignatureHelp","ParameterHintState","Default","type","Pending","constructor","request","previouslyActiveHints","Active","hints","ParameterHintsModel","editor","delay","DEFAULT_DELAY","_onChangedHints","_register","onChangedHints","event","triggerOnType","_state","_pendingTriggers","_lastSignatureHelpResult","triggerChars","retriggerChars","triggerId","throttledDelayer","onDidBlurEditorWidget","cancel","onDidChangeConfiguration","onEditorConfigurationChange","onDidChangeModel","onModelChanged","onDidChangeModelLanguage","_","onDidChangeCursorSelection","onCursorChange","onDidChangeModelContent","onModelContentChange","SignatureHelpProviderRegistry","onDidChange","onDidType","text","state","silent","fire","undefined","trigger","context","model","getModel","has","push","doTrigger","catch","length","signatures","activeSignature","last","cycle","getOption","updateActiveSignature","previous","first","Object","assign","isRetrigger","activeSignatureHelp","getLastActiveHints","reduce","mergeTriggerContexts","triggerContext","triggerKind","triggerCharacter","hasModel","position","getPosition","token","dispose","clear","error","isTriggered","support","ordered","ch","signatureHelpTriggerCharacters","add","charCodeAt","signatureHelpRetriggerCharacters","lastCharIndex","triggerCharCode","SignatureHelpTriggerKind","TriggerCharacter","charAt","source","ContentChange","enabled","current","Invoke"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { createCancelablePromise, Delayer } from '../../../../base/common/async.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { Disposable, MutableDisposable } from '../../../../base/common/lifecycle.js';\nimport { CharacterSet } from '../../../common/core/characterClassifier.js';\nimport * as modes from '../../../common/languages.js';\nimport { provideSignatureHelp } from './provideSignatureHelp.js';\nvar ParameterHintState;\n(function (ParameterHintState) {\n    ParameterHintState.Default = { type: 0 /* Default */ };\n    class Pending {\n        constructor(request, previouslyActiveHints) {\n            this.request = request;\n            this.previouslyActiveHints = previouslyActiveHints;\n            this.type = 2 /* Pending */;\n        }\n    }\n    ParameterHintState.Pending = Pending;\n    class Active {\n        constructor(hints) {\n            this.hints = hints;\n            this.type = 1 /* Active */;\n        }\n    }\n    ParameterHintState.Active = Active;\n})(ParameterHintState || (ParameterHintState = {}));\nexport class ParameterHintsModel extends Disposable {\n    constructor(editor, delay = ParameterHintsModel.DEFAULT_DELAY) {\n        super();\n        this._onChangedHints = this._register(new Emitter());\n        this.onChangedHints = this._onChangedHints.event;\n        this.triggerOnType = false;\n        this._state = ParameterHintState.Default;\n        this._pendingTriggers = [];\n        this._lastSignatureHelpResult = this._register(new MutableDisposable());\n        this.triggerChars = new CharacterSet();\n        this.retriggerChars = new CharacterSet();\n        this.triggerId = 0;\n        this.editor = editor;\n        this.throttledDelayer = new Delayer(delay);\n        this._register(this.editor.onDidBlurEditorWidget(() => this.cancel()));\n        this._register(this.editor.onDidChangeConfiguration(() => this.onEditorConfigurationChange()));\n        this._register(this.editor.onDidChangeModel(e => this.onModelChanged()));\n        this._register(this.editor.onDidChangeModelLanguage(_ => this.onModelChanged()));\n        this._register(this.editor.onDidChangeCursorSelection(e => this.onCursorChange(e)));\n        this._register(this.editor.onDidChangeModelContent(e => this.onModelContentChange()));\n        this._register(modes.SignatureHelpProviderRegistry.onDidChange(this.onModelChanged, this));\n        this._register(this.editor.onDidType(text => this.onDidType(text)));\n        this.onEditorConfigurationChange();\n        this.onModelChanged();\n    }\n    get state() { return this._state; }\n    set state(value) {\n        if (this._state.type === 2 /* Pending */) {\n            this._state.request.cancel();\n        }\n        this._state = value;\n    }\n    cancel(silent = false) {\n        this.state = ParameterHintState.Default;\n        this.throttledDelayer.cancel();\n        if (!silent) {\n            this._onChangedHints.fire(undefined);\n        }\n    }\n    trigger(context, delay) {\n        const model = this.editor.getModel();\n        if (!model || !modes.SignatureHelpProviderRegistry.has(model)) {\n            return;\n        }\n        const triggerId = ++this.triggerId;\n        this._pendingTriggers.push(context);\n        this.throttledDelayer.trigger(() => {\n            return this.doTrigger(triggerId);\n        }, delay)\n            .catch(onUnexpectedError);\n    }\n    next() {\n        if (this.state.type !== 1 /* Active */) {\n            return;\n        }\n        const length = this.state.hints.signatures.length;\n        const activeSignature = this.state.hints.activeSignature;\n        const last = (activeSignature % length) === (length - 1);\n        const cycle = this.editor.getOption(76 /* parameterHints */).cycle;\n        // If there is only one signature, or we're on last signature of list\n        if ((length < 2 || last) && !cycle) {\n            this.cancel();\n            return;\n        }\n        this.updateActiveSignature(last && cycle ? 0 : activeSignature + 1);\n    }\n    previous() {\n        if (this.state.type !== 1 /* Active */) {\n            return;\n        }\n        const length = this.state.hints.signatures.length;\n        const activeSignature = this.state.hints.activeSignature;\n        const first = activeSignature === 0;\n        const cycle = this.editor.getOption(76 /* parameterHints */).cycle;\n        // If there is only one signature, or we're on first signature of list\n        if ((length < 2 || first) && !cycle) {\n            this.cancel();\n            return;\n        }\n        this.updateActiveSignature(first && cycle ? length - 1 : activeSignature - 1);\n    }\n    updateActiveSignature(activeSignature) {\n        if (this.state.type !== 1 /* Active */) {\n            return;\n        }\n        this.state = new ParameterHintState.Active(Object.assign(Object.assign({}, this.state.hints), { activeSignature }));\n        this._onChangedHints.fire(this.state.hints);\n    }\n    doTrigger(triggerId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const isRetrigger = this.state.type === 1 /* Active */ || this.state.type === 2 /* Pending */;\n            const activeSignatureHelp = this.getLastActiveHints();\n            this.cancel(true);\n            if (this._pendingTriggers.length === 0) {\n                return false;\n            }\n            const context = this._pendingTriggers.reduce(mergeTriggerContexts);\n            this._pendingTriggers = [];\n            const triggerContext = {\n                triggerKind: context.triggerKind,\n                triggerCharacter: context.triggerCharacter,\n                isRetrigger: isRetrigger,\n                activeSignatureHelp: activeSignatureHelp\n            };\n            if (!this.editor.hasModel()) {\n                return false;\n            }\n            const model = this.editor.getModel();\n            const position = this.editor.getPosition();\n            this.state = new ParameterHintState.Pending(createCancelablePromise(token => provideSignatureHelp(model, position, triggerContext, token)), activeSignatureHelp);\n            try {\n                const result = yield this.state.request;\n                // Check that we are still resolving the correct signature help\n                if (triggerId !== this.triggerId) {\n                    result === null || result === void 0 ? void 0 : result.dispose();\n                    return false;\n                }\n                if (!result || !result.value.signatures || result.value.signatures.length === 0) {\n                    result === null || result === void 0 ? void 0 : result.dispose();\n                    this._lastSignatureHelpResult.clear();\n                    this.cancel();\n                    return false;\n                }\n                else {\n                    this.state = new ParameterHintState.Active(result.value);\n                    this._lastSignatureHelpResult.value = result;\n                    this._onChangedHints.fire(this.state.hints);\n                    return true;\n                }\n            }\n            catch (error) {\n                if (triggerId === this.triggerId) {\n                    this.state = ParameterHintState.Default;\n                }\n                onUnexpectedError(error);\n                return false;\n            }\n        });\n    }\n    getLastActiveHints() {\n        switch (this.state.type) {\n            case 1 /* Active */: return this.state.hints;\n            case 2 /* Pending */: return this.state.previouslyActiveHints;\n            default: return undefined;\n        }\n    }\n    get isTriggered() {\n        return this.state.type === 1 /* Active */\n            || this.state.type === 2 /* Pending */\n            || this.throttledDelayer.isTriggered();\n    }\n    onModelChanged() {\n        this.cancel();\n        // Update trigger characters\n        this.triggerChars = new CharacterSet();\n        this.retriggerChars = new CharacterSet();\n        const model = this.editor.getModel();\n        if (!model) {\n            return;\n        }\n        for (const support of modes.SignatureHelpProviderRegistry.ordered(model)) {\n            for (const ch of support.signatureHelpTriggerCharacters || []) {\n                this.triggerChars.add(ch.charCodeAt(0));\n                // All trigger characters are also considered retrigger characters\n                this.retriggerChars.add(ch.charCodeAt(0));\n            }\n            for (const ch of support.signatureHelpRetriggerCharacters || []) {\n                this.retriggerChars.add(ch.charCodeAt(0));\n            }\n        }\n    }\n    onDidType(text) {\n        if (!this.triggerOnType) {\n            return;\n        }\n        const lastCharIndex = text.length - 1;\n        const triggerCharCode = text.charCodeAt(lastCharIndex);\n        if (this.triggerChars.has(triggerCharCode) || this.isTriggered && this.retriggerChars.has(triggerCharCode)) {\n            this.trigger({\n                triggerKind: modes.SignatureHelpTriggerKind.TriggerCharacter,\n                triggerCharacter: text.charAt(lastCharIndex),\n            });\n        }\n    }\n    onCursorChange(e) {\n        if (e.source === 'mouse') {\n            this.cancel();\n        }\n        else if (this.isTriggered) {\n            this.trigger({ triggerKind: modes.SignatureHelpTriggerKind.ContentChange });\n        }\n    }\n    onModelContentChange() {\n        if (this.isTriggered) {\n            this.trigger({ triggerKind: modes.SignatureHelpTriggerKind.ContentChange });\n        }\n    }\n    onEditorConfigurationChange() {\n        this.triggerOnType = this.editor.getOption(76 /* parameterHints */).enabled;\n        if (!this.triggerOnType) {\n            this.cancel();\n        }\n    }\n    dispose() {\n        this.cancel(true);\n        super.dispose();\n    }\n}\nParameterHintsModel.DEFAULT_DELAY = 120; // ms\nfunction mergeTriggerContexts(previous, current) {\n    switch (current.triggerKind) {\n        case modes.SignatureHelpTriggerKind.Invoke:\n            // Invoke overrides previous triggers.\n            return current;\n        case modes.SignatureHelpTriggerKind.ContentChange:\n            // Ignore content changes triggers\n            return previous;\n        case modes.SignatureHelpTriggerKind.TriggerCharacter:\n        default:\n            return current;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}