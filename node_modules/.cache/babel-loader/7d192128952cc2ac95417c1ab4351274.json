{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class Node {\n  constructor(data) {\n    this.incoming = new Map();\n    this.outgoing = new Map();\n    this.data = data;\n  }\n\n}\nexport class Graph {\n  constructor(_hashFn) {\n    this._hashFn = _hashFn;\n    this._nodes = new Map(); // empty\n  }\n\n  roots() {\n    const ret = [];\n\n    for (let node of this._nodes.values()) {\n      if (node.outgoing.size === 0) {\n        ret.push(node);\n      }\n    }\n\n    return ret;\n  }\n\n  insertEdge(from, to) {\n    const fromNode = this.lookupOrInsertNode(from);\n    const toNode = this.lookupOrInsertNode(to);\n    fromNode.outgoing.set(this._hashFn(to), toNode);\n    toNode.incoming.set(this._hashFn(from), fromNode);\n  }\n\n  removeNode(data) {\n    const key = this._hashFn(data);\n\n    this._nodes.delete(key);\n\n    for (let node of this._nodes.values()) {\n      node.outgoing.delete(key);\n      node.incoming.delete(key);\n    }\n  }\n\n  lookupOrInsertNode(data) {\n    const key = this._hashFn(data);\n\n    let node = this._nodes.get(key);\n\n    if (!node) {\n      node = new Node(data);\n\n      this._nodes.set(key, node);\n    }\n\n    return node;\n  }\n\n  isEmpty() {\n    return this._nodes.size === 0;\n  }\n\n  toString() {\n    let data = [];\n\n    for (let [key, value] of this._nodes) {\n      data.push(`${key}, (incoming)[${[...value.incoming.keys()].join(', ')}], (outgoing)[${[...value.outgoing.keys()].join(',')}]`);\n    }\n\n    return data.join('\\n');\n  }\n  /**\n   * This is brute force and slow and **only** be used\n   * to trouble shoot.\n   */\n\n\n  findCycleSlow() {\n    for (let [id, node] of this._nodes) {\n      const seen = new Set([id]);\n\n      const res = this._findCycle(node, seen);\n\n      if (res) {\n        return res;\n      }\n    }\n\n    return undefined;\n  }\n\n  _findCycle(node, seen) {\n    for (let [id, outgoing] of node.outgoing) {\n      if (seen.has(id)) {\n        return [...seen, id].join(' -> ');\n      }\n\n      seen.add(id);\n\n      const value = this._findCycle(outgoing, seen);\n\n      if (value) {\n        return value;\n      }\n\n      seen.delete(id);\n    }\n\n    return undefined;\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/platform/instantiation/common/graph.js"],"names":["Node","constructor","data","incoming","Map","outgoing","Graph","_hashFn","_nodes","roots","ret","node","values","size","push","insertEdge","from","to","fromNode","lookupOrInsertNode","toNode","set","removeNode","key","delete","get","isEmpty","toString","value","keys","join","findCycleSlow","id","seen","Set","res","_findCycle","undefined","has","add"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class Node {\n    constructor(data) {\n        this.incoming = new Map();\n        this.outgoing = new Map();\n        this.data = data;\n    }\n}\nexport class Graph {\n    constructor(_hashFn) {\n        this._hashFn = _hashFn;\n        this._nodes = new Map();\n        // empty\n    }\n    roots() {\n        const ret = [];\n        for (let node of this._nodes.values()) {\n            if (node.outgoing.size === 0) {\n                ret.push(node);\n            }\n        }\n        return ret;\n    }\n    insertEdge(from, to) {\n        const fromNode = this.lookupOrInsertNode(from);\n        const toNode = this.lookupOrInsertNode(to);\n        fromNode.outgoing.set(this._hashFn(to), toNode);\n        toNode.incoming.set(this._hashFn(from), fromNode);\n    }\n    removeNode(data) {\n        const key = this._hashFn(data);\n        this._nodes.delete(key);\n        for (let node of this._nodes.values()) {\n            node.outgoing.delete(key);\n            node.incoming.delete(key);\n        }\n    }\n    lookupOrInsertNode(data) {\n        const key = this._hashFn(data);\n        let node = this._nodes.get(key);\n        if (!node) {\n            node = new Node(data);\n            this._nodes.set(key, node);\n        }\n        return node;\n    }\n    isEmpty() {\n        return this._nodes.size === 0;\n    }\n    toString() {\n        let data = [];\n        for (let [key, value] of this._nodes) {\n            data.push(`${key}, (incoming)[${[...value.incoming.keys()].join(', ')}], (outgoing)[${[...value.outgoing.keys()].join(',')}]`);\n        }\n        return data.join('\\n');\n    }\n    /**\n     * This is brute force and slow and **only** be used\n     * to trouble shoot.\n     */\n    findCycleSlow() {\n        for (let [id, node] of this._nodes) {\n            const seen = new Set([id]);\n            const res = this._findCycle(node, seen);\n            if (res) {\n                return res;\n            }\n        }\n        return undefined;\n    }\n    _findCycle(node, seen) {\n        for (let [id, outgoing] of node.outgoing) {\n            if (seen.has(id)) {\n                return [...seen, id].join(' -> ');\n            }\n            seen.add(id);\n            const value = this._findCycle(outgoing, seen);\n            if (value) {\n                return value;\n            }\n            seen.delete(id);\n        }\n        return undefined;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}