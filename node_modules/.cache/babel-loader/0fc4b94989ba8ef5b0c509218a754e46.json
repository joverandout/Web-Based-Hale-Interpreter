{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { IntervalTimer, timeout } from '../../../base/common/async.js';\nimport { Disposable, dispose, toDisposable, DisposableStore } from '../../../base/common/lifecycle.js';\nimport { SimpleWorkerClient, logOnceWebWorkerWarning } from '../../../base/common/worker/simpleWorker.js';\nimport { DefaultWorkerFactory } from '../../../base/browser/defaultWorkerFactory.js';\nimport { Range } from '../../common/core/range.js';\nimport * as modes from '../../common/languages.js';\nimport { ILanguageConfigurationService } from '../../common/languages/languageConfigurationRegistry.js';\nimport { EditorSimpleWorker } from '../../common/services/editorSimpleWorker.js';\nimport { IModelService } from '../../common/services/model.js';\nimport { ITextResourceConfigurationService } from '../../common/services/textResourceConfiguration.js';\nimport { regExpFlags } from '../../../base/common/strings.js';\nimport { isNonEmptyArray } from '../../../base/common/arrays.js';\nimport { ILogService } from '../../../platform/log/common/log.js';\nimport { StopWatch } from '../../../base/common/stopwatch.js';\nimport { canceled } from '../../../base/common/errors.js';\n/**\n * Stop syncing a model to the worker if it was not needed for 1 min.\n */\n\nconst STOP_SYNC_MODEL_DELTA_TIME_MS = 60 * 1000;\n/**\n * Stop the worker if it was not needed for 5 min.\n */\n\nconst STOP_WORKER_DELTA_TIME_MS = 5 * 60 * 1000;\n\nfunction canSyncModel(modelService, resource) {\n  const model = modelService.getModel(resource);\n\n  if (!model) {\n    return false;\n  }\n\n  if (model.isTooLargeForSyncing()) {\n    return false;\n  }\n\n  return true;\n}\n\nlet EditorWorkerService = class EditorWorkerService extends Disposable {\n  constructor(modelService, configurationService, logService, languageConfigurationService) {\n    super();\n    this._modelService = modelService;\n    this._workerManager = this._register(new WorkerManager(this._modelService, languageConfigurationService));\n    this._logService = logService; // register default link-provider and default completions-provider\n\n    this._register(modes.LinkProviderRegistry.register({\n      language: '*',\n      hasAccessToAllModels: true\n    }, {\n      provideLinks: (model, token) => {\n        if (!canSyncModel(this._modelService, model.uri)) {\n          return Promise.resolve({\n            links: []\n          }); // File too large\n        }\n\n        return this._workerManager.withWorker().then(client => client.computeLinks(model.uri)).then(links => {\n          return links && {\n            links\n          };\n        });\n      }\n    }));\n\n    this._register(modes.CompletionProviderRegistry.register('*', new WordBasedCompletionItemProvider(this._workerManager, configurationService, this._modelService, languageConfigurationService)));\n  }\n\n  dispose() {\n    super.dispose();\n  }\n\n  canComputeUnicodeHighlights(uri) {\n    return canSyncModel(this._modelService, uri);\n  }\n\n  computedUnicodeHighlights(uri, options, range) {\n    return this._workerManager.withWorker().then(client => client.computedUnicodeHighlights(uri, options, range));\n  }\n\n  computeDiff(original, modified, ignoreTrimWhitespace, maxComputationTime) {\n    return this._workerManager.withWorker().then(client => client.computeDiff(original, modified, ignoreTrimWhitespace, maxComputationTime));\n  }\n\n  computeMoreMinimalEdits(resource, edits) {\n    if (isNonEmptyArray(edits)) {\n      if (!canSyncModel(this._modelService, resource)) {\n        return Promise.resolve(edits); // File too large\n      }\n\n      const sw = StopWatch.create(true);\n\n      const result = this._workerManager.withWorker().then(client => client.computeMoreMinimalEdits(resource, edits));\n\n      result.finally(() => this._logService.trace('FORMAT#computeMoreMinimalEdits', resource.toString(true), sw.elapsed()));\n      return Promise.race([result, timeout(1000).then(() => edits)]);\n    } else {\n      return Promise.resolve(undefined);\n    }\n  }\n\n  canNavigateValueSet(resource) {\n    return canSyncModel(this._modelService, resource);\n  }\n\n  navigateValueSet(resource, range, up) {\n    return this._workerManager.withWorker().then(client => client.navigateValueSet(resource, range, up));\n  }\n\n  canComputeWordRanges(resource) {\n    return canSyncModel(this._modelService, resource);\n  }\n\n  computeWordRanges(resource, range) {\n    return this._workerManager.withWorker().then(client => client.computeWordRanges(resource, range));\n  }\n\n};\nEditorWorkerService = __decorate([__param(0, IModelService), __param(1, ITextResourceConfigurationService), __param(2, ILogService), __param(3, ILanguageConfigurationService)], EditorWorkerService);\nexport { EditorWorkerService };\n\nclass WordBasedCompletionItemProvider {\n  constructor(workerManager, configurationService, modelService, languageConfigurationService) {\n    this.languageConfigurationService = languageConfigurationService;\n    this._debugDisplayName = 'wordbasedCompletions';\n    this._workerManager = workerManager;\n    this._configurationService = configurationService;\n    this._modelService = modelService;\n  }\n\n  provideCompletionItems(model, position) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const config = this._configurationService.getValue(model.uri, position, 'editor');\n\n      if (!config.wordBasedSuggestions) {\n        return undefined;\n      }\n\n      const models = [];\n\n      if (config.wordBasedSuggestionsMode === 'currentDocument') {\n        // only current file and only if not too large\n        if (canSyncModel(this._modelService, model.uri)) {\n          models.push(model.uri);\n        }\n      } else {\n        // either all files or files of same language\n        for (const candidate of this._modelService.getModels()) {\n          if (!canSyncModel(this._modelService, candidate.uri)) {\n            continue;\n          }\n\n          if (candidate === model) {\n            models.unshift(candidate.uri);\n          } else if (config.wordBasedSuggestionsMode === 'allDocuments' || candidate.getLanguageId() === model.getLanguageId()) {\n            models.push(candidate.uri);\n          }\n        }\n      }\n\n      if (models.length === 0) {\n        return undefined; // File too large, no other files\n      }\n\n      const wordDefRegExp = this.languageConfigurationService.getLanguageConfiguration(model.getLanguageId()).getWordDefinition();\n      const word = model.getWordAtPosition(position);\n      const replace = !word ? Range.fromPositions(position) : new Range(position.lineNumber, word.startColumn, position.lineNumber, word.endColumn);\n      const insert = replace.setEndPosition(position.lineNumber, position.column);\n      const client = yield this._workerManager.withWorker();\n      const data = yield client.textualSuggest(models, word === null || word === void 0 ? void 0 : word.word, wordDefRegExp);\n\n      if (!data) {\n        return undefined;\n      }\n\n      return {\n        duration: data.duration,\n        suggestions: data.words.map(word => {\n          return {\n            kind: 18\n            /* Text */\n            ,\n            label: word,\n            insertText: word,\n            range: {\n              insert,\n              replace\n            }\n          };\n        })\n      };\n    });\n  }\n\n}\n\nclass WorkerManager extends Disposable {\n  constructor(modelService, languageConfigurationService) {\n    super();\n    this.languageConfigurationService = languageConfigurationService;\n    this._modelService = modelService;\n    this._editorWorkerClient = null;\n    this._lastWorkerUsedTime = new Date().getTime();\n\n    const stopWorkerInterval = this._register(new IntervalTimer());\n\n    stopWorkerInterval.cancelAndSet(() => this._checkStopIdleWorker(), Math.round(STOP_WORKER_DELTA_TIME_MS / 2));\n\n    this._register(this._modelService.onModelRemoved(_ => this._checkStopEmptyWorker()));\n  }\n\n  dispose() {\n    if (this._editorWorkerClient) {\n      this._editorWorkerClient.dispose();\n\n      this._editorWorkerClient = null;\n    }\n\n    super.dispose();\n  }\n  /**\n   * Check if the model service has no more models and stop the worker if that is the case.\n   */\n\n\n  _checkStopEmptyWorker() {\n    if (!this._editorWorkerClient) {\n      return;\n    }\n\n    const models = this._modelService.getModels();\n\n    if (models.length === 0) {\n      // There are no more models => nothing possible for me to do\n      this._editorWorkerClient.dispose();\n\n      this._editorWorkerClient = null;\n    }\n  }\n  /**\n   * Check if the worker has been idle for a while and then stop it.\n   */\n\n\n  _checkStopIdleWorker() {\n    if (!this._editorWorkerClient) {\n      return;\n    }\n\n    const timeSinceLastWorkerUsedTime = new Date().getTime() - this._lastWorkerUsedTime;\n\n    if (timeSinceLastWorkerUsedTime > STOP_WORKER_DELTA_TIME_MS) {\n      this._editorWorkerClient.dispose();\n\n      this._editorWorkerClient = null;\n    }\n  }\n\n  withWorker() {\n    this._lastWorkerUsedTime = new Date().getTime();\n\n    if (!this._editorWorkerClient) {\n      this._editorWorkerClient = new EditorWorkerClient(this._modelService, false, 'editorWorkerService', this.languageConfigurationService);\n    }\n\n    return Promise.resolve(this._editorWorkerClient);\n  }\n\n}\n\nclass EditorModelManager extends Disposable {\n  constructor(proxy, modelService, keepIdleModels) {\n    super();\n    this._syncedModels = Object.create(null);\n    this._syncedModelsLastUsedTime = Object.create(null);\n    this._proxy = proxy;\n    this._modelService = modelService;\n\n    if (!keepIdleModels) {\n      const timer = new IntervalTimer();\n      timer.cancelAndSet(() => this._checkStopModelSync(), Math.round(STOP_SYNC_MODEL_DELTA_TIME_MS / 2));\n\n      this._register(timer);\n    }\n  }\n\n  dispose() {\n    for (let modelUrl in this._syncedModels) {\n      dispose(this._syncedModels[modelUrl]);\n    }\n\n    this._syncedModels = Object.create(null);\n    this._syncedModelsLastUsedTime = Object.create(null);\n    super.dispose();\n  }\n\n  ensureSyncedResources(resources, forceLargeModels) {\n    for (const resource of resources) {\n      const resourceStr = resource.toString();\n\n      if (!this._syncedModels[resourceStr]) {\n        this._beginModelSync(resource, forceLargeModels);\n      }\n\n      if (this._syncedModels[resourceStr]) {\n        this._syncedModelsLastUsedTime[resourceStr] = new Date().getTime();\n      }\n    }\n  }\n\n  _checkStopModelSync() {\n    const currentTime = new Date().getTime();\n    const toRemove = [];\n\n    for (let modelUrl in this._syncedModelsLastUsedTime) {\n      const elapsedTime = currentTime - this._syncedModelsLastUsedTime[modelUrl];\n\n      if (elapsedTime > STOP_SYNC_MODEL_DELTA_TIME_MS) {\n        toRemove.push(modelUrl);\n      }\n    }\n\n    for (const e of toRemove) {\n      this._stopModelSync(e);\n    }\n  }\n\n  _beginModelSync(resource, forceLargeModels) {\n    const model = this._modelService.getModel(resource);\n\n    if (!model) {\n      return;\n    }\n\n    if (!forceLargeModels && model.isTooLargeForSyncing()) {\n      return;\n    }\n\n    const modelUrl = resource.toString();\n\n    this._proxy.acceptNewModel({\n      url: model.uri.toString(),\n      lines: model.getLinesContent(),\n      EOL: model.getEOL(),\n      versionId: model.getVersionId()\n    });\n\n    const toDispose = new DisposableStore();\n    toDispose.add(model.onDidChangeContent(e => {\n      this._proxy.acceptModelChanged(modelUrl.toString(), e);\n    }));\n    toDispose.add(model.onWillDispose(() => {\n      this._stopModelSync(modelUrl);\n    }));\n    toDispose.add(toDisposable(() => {\n      this._proxy.acceptRemovedModel(modelUrl);\n    }));\n    this._syncedModels[modelUrl] = toDispose;\n  }\n\n  _stopModelSync(modelUrl) {\n    const toDispose = this._syncedModels[modelUrl];\n    delete this._syncedModels[modelUrl];\n    delete this._syncedModelsLastUsedTime[modelUrl];\n    dispose(toDispose);\n  }\n\n}\n\nclass SynchronousWorkerClient {\n  constructor(instance) {\n    this._instance = instance;\n    this._proxyObj = Promise.resolve(this._instance);\n  }\n\n  dispose() {\n    this._instance.dispose();\n  }\n\n  getProxyObject() {\n    return this._proxyObj;\n  }\n\n}\n\nexport class EditorWorkerHost {\n  constructor(workerClient) {\n    this._workerClient = workerClient;\n  } // foreign host request\n\n\n  fhr(method, args) {\n    return this._workerClient.fhr(method, args);\n  }\n\n}\nexport class EditorWorkerClient extends Disposable {\n  constructor(modelService, keepIdleModels, label, languageConfigurationService) {\n    super();\n    this.languageConfigurationService = languageConfigurationService;\n    this._disposed = false;\n    this._modelService = modelService;\n    this._keepIdleModels = keepIdleModels;\n    this._workerFactory = new DefaultWorkerFactory(label);\n    this._worker = null;\n    this._modelManager = null;\n  } // foreign host request\n\n\n  fhr(method, args) {\n    throw new Error(`Not implemented!`);\n  }\n\n  _getOrCreateWorker() {\n    if (!this._worker) {\n      try {\n        this._worker = this._register(new SimpleWorkerClient(this._workerFactory, 'vs/editor/common/services/editorSimpleWorker', new EditorWorkerHost(this)));\n      } catch (err) {\n        logOnceWebWorkerWarning(err);\n        this._worker = new SynchronousWorkerClient(new EditorSimpleWorker(new EditorWorkerHost(this), null));\n      }\n    }\n\n    return this._worker;\n  }\n\n  _getProxy() {\n    return this._getOrCreateWorker().getProxyObject().then(undefined, err => {\n      logOnceWebWorkerWarning(err);\n      this._worker = new SynchronousWorkerClient(new EditorSimpleWorker(new EditorWorkerHost(this), null));\n      return this._getOrCreateWorker().getProxyObject();\n    });\n  }\n\n  _getOrCreateModelManager(proxy) {\n    if (!this._modelManager) {\n      this._modelManager = this._register(new EditorModelManager(proxy, this._modelService, this._keepIdleModels));\n    }\n\n    return this._modelManager;\n  }\n\n  _withSyncedResources(resources, forceLargeModels = false) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this._disposed) {\n        return Promise.reject(canceled());\n      }\n\n      return this._getProxy().then(proxy => {\n        this._getOrCreateModelManager(proxy).ensureSyncedResources(resources, forceLargeModels);\n\n        return proxy;\n      });\n    });\n  }\n\n  computedUnicodeHighlights(uri, options, range) {\n    return this._withSyncedResources([uri]).then(proxy => {\n      return proxy.computeUnicodeHighlights(uri.toString(), options, range);\n    });\n  }\n\n  computeDiff(original, modified, ignoreTrimWhitespace, maxComputationTime) {\n    return this._withSyncedResources([original, modified],\n    /* forceLargeModels */\n    true).then(proxy => {\n      return proxy.computeDiff(original.toString(), modified.toString(), ignoreTrimWhitespace, maxComputationTime);\n    });\n  }\n\n  computeMoreMinimalEdits(resource, edits) {\n    return this._withSyncedResources([resource]).then(proxy => {\n      return proxy.computeMoreMinimalEdits(resource.toString(), edits);\n    });\n  }\n\n  computeLinks(resource) {\n    return this._withSyncedResources([resource]).then(proxy => {\n      return proxy.computeLinks(resource.toString());\n    });\n  }\n\n  textualSuggest(resources, leadingWord, wordDefRegExp) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const proxy = yield this._withSyncedResources(resources);\n      const wordDef = wordDefRegExp.source;\n      const wordDefFlags = regExpFlags(wordDefRegExp);\n      return proxy.textualSuggest(resources.map(r => r.toString()), leadingWord, wordDef, wordDefFlags);\n    });\n  }\n\n  computeWordRanges(resource, range) {\n    return this._withSyncedResources([resource]).then(proxy => {\n      const model = this._modelService.getModel(resource);\n\n      if (!model) {\n        return Promise.resolve(null);\n      }\n\n      const wordDefRegExp = this.languageConfigurationService.getLanguageConfiguration(model.getLanguageId()).getWordDefinition();\n      const wordDef = wordDefRegExp.source;\n      const wordDefFlags = regExpFlags(wordDefRegExp);\n      return proxy.computeWordRanges(resource.toString(), range, wordDef, wordDefFlags);\n    });\n  }\n\n  navigateValueSet(resource, range, up) {\n    return this._withSyncedResources([resource]).then(proxy => {\n      const model = this._modelService.getModel(resource);\n\n      if (!model) {\n        return null;\n      }\n\n      const wordDefRegExp = this.languageConfigurationService.getLanguageConfiguration(model.getLanguageId()).getWordDefinition();\n      const wordDef = wordDefRegExp.source;\n      const wordDefFlags = regExpFlags(wordDefRegExp);\n      return proxy.navigateValueSet(resource.toString(), range, up, wordDef, wordDefFlags);\n    });\n  }\n\n  dispose() {\n    super.dispose();\n    this._disposed = true;\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/browser/services/editorWorkerService.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","IntervalTimer","timeout","Disposable","dispose","toDisposable","DisposableStore","SimpleWorkerClient","logOnceWebWorkerWarning","DefaultWorkerFactory","Range","modes","ILanguageConfigurationService","EditorSimpleWorker","IModelService","ITextResourceConfigurationService","regExpFlags","isNonEmptyArray","ILogService","StopWatch","canceled","STOP_SYNC_MODEL_DELTA_TIME_MS","STOP_WORKER_DELTA_TIME_MS","canSyncModel","modelService","resource","model","getModel","isTooLargeForSyncing","EditorWorkerService","constructor","configurationService","logService","languageConfigurationService","_modelService","_workerManager","_register","WorkerManager","_logService","LinkProviderRegistry","register","language","hasAccessToAllModels","provideLinks","token","uri","links","withWorker","client","computeLinks","CompletionProviderRegistry","WordBasedCompletionItemProvider","canComputeUnicodeHighlights","computedUnicodeHighlights","options","range","computeDiff","original","modified","ignoreTrimWhitespace","maxComputationTime","computeMoreMinimalEdits","edits","sw","create","finally","trace","toString","elapsed","race","undefined","canNavigateValueSet","navigateValueSet","up","canComputeWordRanges","computeWordRanges","workerManager","_debugDisplayName","_configurationService","provideCompletionItems","position","config","getValue","wordBasedSuggestions","models","wordBasedSuggestionsMode","push","candidate","getModels","unshift","getLanguageId","wordDefRegExp","getLanguageConfiguration","getWordDefinition","word","getWordAtPosition","replace","fromPositions","lineNumber","startColumn","endColumn","insert","setEndPosition","column","data","textualSuggest","duration","suggestions","words","map","kind","label","insertText","_editorWorkerClient","_lastWorkerUsedTime","Date","getTime","stopWorkerInterval","cancelAndSet","_checkStopIdleWorker","Math","round","onModelRemoved","_","_checkStopEmptyWorker","timeSinceLastWorkerUsedTime","EditorWorkerClient","EditorModelManager","proxy","keepIdleModels","_syncedModels","_syncedModelsLastUsedTime","_proxy","timer","_checkStopModelSync","modelUrl","ensureSyncedResources","resources","forceLargeModels","resourceStr","_beginModelSync","currentTime","toRemove","elapsedTime","_stopModelSync","acceptNewModel","url","lines","getLinesContent","EOL","getEOL","versionId","getVersionId","toDispose","add","onDidChangeContent","acceptModelChanged","onWillDispose","acceptRemovedModel","SynchronousWorkerClient","instance","_instance","_proxyObj","getProxyObject","EditorWorkerHost","workerClient","_workerClient","fhr","method","args","_disposed","_keepIdleModels","_workerFactory","_worker","_modelManager","Error","_getOrCreateWorker","err","_getProxy","_getOrCreateModelManager","_withSyncedResources","computeUnicodeHighlights","leadingWord","wordDef","source","wordDefFlags"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { IntervalTimer, timeout } from '../../../base/common/async.js';\nimport { Disposable, dispose, toDisposable, DisposableStore } from '../../../base/common/lifecycle.js';\nimport { SimpleWorkerClient, logOnceWebWorkerWarning } from '../../../base/common/worker/simpleWorker.js';\nimport { DefaultWorkerFactory } from '../../../base/browser/defaultWorkerFactory.js';\nimport { Range } from '../../common/core/range.js';\nimport * as modes from '../../common/languages.js';\nimport { ILanguageConfigurationService } from '../../common/languages/languageConfigurationRegistry.js';\nimport { EditorSimpleWorker } from '../../common/services/editorSimpleWorker.js';\nimport { IModelService } from '../../common/services/model.js';\nimport { ITextResourceConfigurationService } from '../../common/services/textResourceConfiguration.js';\nimport { regExpFlags } from '../../../base/common/strings.js';\nimport { isNonEmptyArray } from '../../../base/common/arrays.js';\nimport { ILogService } from '../../../platform/log/common/log.js';\nimport { StopWatch } from '../../../base/common/stopwatch.js';\nimport { canceled } from '../../../base/common/errors.js';\n/**\n * Stop syncing a model to the worker if it was not needed for 1 min.\n */\nconst STOP_SYNC_MODEL_DELTA_TIME_MS = 60 * 1000;\n/**\n * Stop the worker if it was not needed for 5 min.\n */\nconst STOP_WORKER_DELTA_TIME_MS = 5 * 60 * 1000;\nfunction canSyncModel(modelService, resource) {\n    const model = modelService.getModel(resource);\n    if (!model) {\n        return false;\n    }\n    if (model.isTooLargeForSyncing()) {\n        return false;\n    }\n    return true;\n}\nlet EditorWorkerService = class EditorWorkerService extends Disposable {\n    constructor(modelService, configurationService, logService, languageConfigurationService) {\n        super();\n        this._modelService = modelService;\n        this._workerManager = this._register(new WorkerManager(this._modelService, languageConfigurationService));\n        this._logService = logService;\n        // register default link-provider and default completions-provider\n        this._register(modes.LinkProviderRegistry.register({ language: '*', hasAccessToAllModels: true }, {\n            provideLinks: (model, token) => {\n                if (!canSyncModel(this._modelService, model.uri)) {\n                    return Promise.resolve({ links: [] }); // File too large\n                }\n                return this._workerManager.withWorker().then(client => client.computeLinks(model.uri)).then(links => {\n                    return links && { links };\n                });\n            }\n        }));\n        this._register(modes.CompletionProviderRegistry.register('*', new WordBasedCompletionItemProvider(this._workerManager, configurationService, this._modelService, languageConfigurationService)));\n    }\n    dispose() {\n        super.dispose();\n    }\n    canComputeUnicodeHighlights(uri) {\n        return canSyncModel(this._modelService, uri);\n    }\n    computedUnicodeHighlights(uri, options, range) {\n        return this._workerManager.withWorker().then(client => client.computedUnicodeHighlights(uri, options, range));\n    }\n    computeDiff(original, modified, ignoreTrimWhitespace, maxComputationTime) {\n        return this._workerManager.withWorker().then(client => client.computeDiff(original, modified, ignoreTrimWhitespace, maxComputationTime));\n    }\n    computeMoreMinimalEdits(resource, edits) {\n        if (isNonEmptyArray(edits)) {\n            if (!canSyncModel(this._modelService, resource)) {\n                return Promise.resolve(edits); // File too large\n            }\n            const sw = StopWatch.create(true);\n            const result = this._workerManager.withWorker().then(client => client.computeMoreMinimalEdits(resource, edits));\n            result.finally(() => this._logService.trace('FORMAT#computeMoreMinimalEdits', resource.toString(true), sw.elapsed()));\n            return Promise.race([result, timeout(1000).then(() => edits)]);\n        }\n        else {\n            return Promise.resolve(undefined);\n        }\n    }\n    canNavigateValueSet(resource) {\n        return (canSyncModel(this._modelService, resource));\n    }\n    navigateValueSet(resource, range, up) {\n        return this._workerManager.withWorker().then(client => client.navigateValueSet(resource, range, up));\n    }\n    canComputeWordRanges(resource) {\n        return canSyncModel(this._modelService, resource);\n    }\n    computeWordRanges(resource, range) {\n        return this._workerManager.withWorker().then(client => client.computeWordRanges(resource, range));\n    }\n};\nEditorWorkerService = __decorate([\n    __param(0, IModelService),\n    __param(1, ITextResourceConfigurationService),\n    __param(2, ILogService),\n    __param(3, ILanguageConfigurationService)\n], EditorWorkerService);\nexport { EditorWorkerService };\nclass WordBasedCompletionItemProvider {\n    constructor(workerManager, configurationService, modelService, languageConfigurationService) {\n        this.languageConfigurationService = languageConfigurationService;\n        this._debugDisplayName = 'wordbasedCompletions';\n        this._workerManager = workerManager;\n        this._configurationService = configurationService;\n        this._modelService = modelService;\n    }\n    provideCompletionItems(model, position) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const config = this._configurationService.getValue(model.uri, position, 'editor');\n            if (!config.wordBasedSuggestions) {\n                return undefined;\n            }\n            const models = [];\n            if (config.wordBasedSuggestionsMode === 'currentDocument') {\n                // only current file and only if not too large\n                if (canSyncModel(this._modelService, model.uri)) {\n                    models.push(model.uri);\n                }\n            }\n            else {\n                // either all files or files of same language\n                for (const candidate of this._modelService.getModels()) {\n                    if (!canSyncModel(this._modelService, candidate.uri)) {\n                        continue;\n                    }\n                    if (candidate === model) {\n                        models.unshift(candidate.uri);\n                    }\n                    else if (config.wordBasedSuggestionsMode === 'allDocuments' || candidate.getLanguageId() === model.getLanguageId()) {\n                        models.push(candidate.uri);\n                    }\n                }\n            }\n            if (models.length === 0) {\n                return undefined; // File too large, no other files\n            }\n            const wordDefRegExp = this.languageConfigurationService.getLanguageConfiguration(model.getLanguageId()).getWordDefinition();\n            const word = model.getWordAtPosition(position);\n            const replace = !word ? Range.fromPositions(position) : new Range(position.lineNumber, word.startColumn, position.lineNumber, word.endColumn);\n            const insert = replace.setEndPosition(position.lineNumber, position.column);\n            const client = yield this._workerManager.withWorker();\n            const data = yield client.textualSuggest(models, word === null || word === void 0 ? void 0 : word.word, wordDefRegExp);\n            if (!data) {\n                return undefined;\n            }\n            return {\n                duration: data.duration,\n                suggestions: data.words.map((word) => {\n                    return {\n                        kind: 18 /* Text */,\n                        label: word,\n                        insertText: word,\n                        range: { insert, replace }\n                    };\n                }),\n            };\n        });\n    }\n}\nclass WorkerManager extends Disposable {\n    constructor(modelService, languageConfigurationService) {\n        super();\n        this.languageConfigurationService = languageConfigurationService;\n        this._modelService = modelService;\n        this._editorWorkerClient = null;\n        this._lastWorkerUsedTime = (new Date()).getTime();\n        const stopWorkerInterval = this._register(new IntervalTimer());\n        stopWorkerInterval.cancelAndSet(() => this._checkStopIdleWorker(), Math.round(STOP_WORKER_DELTA_TIME_MS / 2));\n        this._register(this._modelService.onModelRemoved(_ => this._checkStopEmptyWorker()));\n    }\n    dispose() {\n        if (this._editorWorkerClient) {\n            this._editorWorkerClient.dispose();\n            this._editorWorkerClient = null;\n        }\n        super.dispose();\n    }\n    /**\n     * Check if the model service has no more models and stop the worker if that is the case.\n     */\n    _checkStopEmptyWorker() {\n        if (!this._editorWorkerClient) {\n            return;\n        }\n        const models = this._modelService.getModels();\n        if (models.length === 0) {\n            // There are no more models => nothing possible for me to do\n            this._editorWorkerClient.dispose();\n            this._editorWorkerClient = null;\n        }\n    }\n    /**\n     * Check if the worker has been idle for a while and then stop it.\n     */\n    _checkStopIdleWorker() {\n        if (!this._editorWorkerClient) {\n            return;\n        }\n        const timeSinceLastWorkerUsedTime = (new Date()).getTime() - this._lastWorkerUsedTime;\n        if (timeSinceLastWorkerUsedTime > STOP_WORKER_DELTA_TIME_MS) {\n            this._editorWorkerClient.dispose();\n            this._editorWorkerClient = null;\n        }\n    }\n    withWorker() {\n        this._lastWorkerUsedTime = (new Date()).getTime();\n        if (!this._editorWorkerClient) {\n            this._editorWorkerClient = new EditorWorkerClient(this._modelService, false, 'editorWorkerService', this.languageConfigurationService);\n        }\n        return Promise.resolve(this._editorWorkerClient);\n    }\n}\nclass EditorModelManager extends Disposable {\n    constructor(proxy, modelService, keepIdleModels) {\n        super();\n        this._syncedModels = Object.create(null);\n        this._syncedModelsLastUsedTime = Object.create(null);\n        this._proxy = proxy;\n        this._modelService = modelService;\n        if (!keepIdleModels) {\n            const timer = new IntervalTimer();\n            timer.cancelAndSet(() => this._checkStopModelSync(), Math.round(STOP_SYNC_MODEL_DELTA_TIME_MS / 2));\n            this._register(timer);\n        }\n    }\n    dispose() {\n        for (let modelUrl in this._syncedModels) {\n            dispose(this._syncedModels[modelUrl]);\n        }\n        this._syncedModels = Object.create(null);\n        this._syncedModelsLastUsedTime = Object.create(null);\n        super.dispose();\n    }\n    ensureSyncedResources(resources, forceLargeModels) {\n        for (const resource of resources) {\n            const resourceStr = resource.toString();\n            if (!this._syncedModels[resourceStr]) {\n                this._beginModelSync(resource, forceLargeModels);\n            }\n            if (this._syncedModels[resourceStr]) {\n                this._syncedModelsLastUsedTime[resourceStr] = (new Date()).getTime();\n            }\n        }\n    }\n    _checkStopModelSync() {\n        const currentTime = (new Date()).getTime();\n        const toRemove = [];\n        for (let modelUrl in this._syncedModelsLastUsedTime) {\n            const elapsedTime = currentTime - this._syncedModelsLastUsedTime[modelUrl];\n            if (elapsedTime > STOP_SYNC_MODEL_DELTA_TIME_MS) {\n                toRemove.push(modelUrl);\n            }\n        }\n        for (const e of toRemove) {\n            this._stopModelSync(e);\n        }\n    }\n    _beginModelSync(resource, forceLargeModels) {\n        const model = this._modelService.getModel(resource);\n        if (!model) {\n            return;\n        }\n        if (!forceLargeModels && model.isTooLargeForSyncing()) {\n            return;\n        }\n        const modelUrl = resource.toString();\n        this._proxy.acceptNewModel({\n            url: model.uri.toString(),\n            lines: model.getLinesContent(),\n            EOL: model.getEOL(),\n            versionId: model.getVersionId()\n        });\n        const toDispose = new DisposableStore();\n        toDispose.add(model.onDidChangeContent((e) => {\n            this._proxy.acceptModelChanged(modelUrl.toString(), e);\n        }));\n        toDispose.add(model.onWillDispose(() => {\n            this._stopModelSync(modelUrl);\n        }));\n        toDispose.add(toDisposable(() => {\n            this._proxy.acceptRemovedModel(modelUrl);\n        }));\n        this._syncedModels[modelUrl] = toDispose;\n    }\n    _stopModelSync(modelUrl) {\n        const toDispose = this._syncedModels[modelUrl];\n        delete this._syncedModels[modelUrl];\n        delete this._syncedModelsLastUsedTime[modelUrl];\n        dispose(toDispose);\n    }\n}\nclass SynchronousWorkerClient {\n    constructor(instance) {\n        this._instance = instance;\n        this._proxyObj = Promise.resolve(this._instance);\n    }\n    dispose() {\n        this._instance.dispose();\n    }\n    getProxyObject() {\n        return this._proxyObj;\n    }\n}\nexport class EditorWorkerHost {\n    constructor(workerClient) {\n        this._workerClient = workerClient;\n    }\n    // foreign host request\n    fhr(method, args) {\n        return this._workerClient.fhr(method, args);\n    }\n}\nexport class EditorWorkerClient extends Disposable {\n    constructor(modelService, keepIdleModels, label, languageConfigurationService) {\n        super();\n        this.languageConfigurationService = languageConfigurationService;\n        this._disposed = false;\n        this._modelService = modelService;\n        this._keepIdleModels = keepIdleModels;\n        this._workerFactory = new DefaultWorkerFactory(label);\n        this._worker = null;\n        this._modelManager = null;\n    }\n    // foreign host request\n    fhr(method, args) {\n        throw new Error(`Not implemented!`);\n    }\n    _getOrCreateWorker() {\n        if (!this._worker) {\n            try {\n                this._worker = this._register(new SimpleWorkerClient(this._workerFactory, 'vs/editor/common/services/editorSimpleWorker', new EditorWorkerHost(this)));\n            }\n            catch (err) {\n                logOnceWebWorkerWarning(err);\n                this._worker = new SynchronousWorkerClient(new EditorSimpleWorker(new EditorWorkerHost(this), null));\n            }\n        }\n        return this._worker;\n    }\n    _getProxy() {\n        return this._getOrCreateWorker().getProxyObject().then(undefined, (err) => {\n            logOnceWebWorkerWarning(err);\n            this._worker = new SynchronousWorkerClient(new EditorSimpleWorker(new EditorWorkerHost(this), null));\n            return this._getOrCreateWorker().getProxyObject();\n        });\n    }\n    _getOrCreateModelManager(proxy) {\n        if (!this._modelManager) {\n            this._modelManager = this._register(new EditorModelManager(proxy, this._modelService, this._keepIdleModels));\n        }\n        return this._modelManager;\n    }\n    _withSyncedResources(resources, forceLargeModels = false) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._disposed) {\n                return Promise.reject(canceled());\n            }\n            return this._getProxy().then((proxy) => {\n                this._getOrCreateModelManager(proxy).ensureSyncedResources(resources, forceLargeModels);\n                return proxy;\n            });\n        });\n    }\n    computedUnicodeHighlights(uri, options, range) {\n        return this._withSyncedResources([uri]).then(proxy => {\n            return proxy.computeUnicodeHighlights(uri.toString(), options, range);\n        });\n    }\n    computeDiff(original, modified, ignoreTrimWhitespace, maxComputationTime) {\n        return this._withSyncedResources([original, modified], /* forceLargeModels */ true).then(proxy => {\n            return proxy.computeDiff(original.toString(), modified.toString(), ignoreTrimWhitespace, maxComputationTime);\n        });\n    }\n    computeMoreMinimalEdits(resource, edits) {\n        return this._withSyncedResources([resource]).then(proxy => {\n            return proxy.computeMoreMinimalEdits(resource.toString(), edits);\n        });\n    }\n    computeLinks(resource) {\n        return this._withSyncedResources([resource]).then(proxy => {\n            return proxy.computeLinks(resource.toString());\n        });\n    }\n    textualSuggest(resources, leadingWord, wordDefRegExp) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const proxy = yield this._withSyncedResources(resources);\n            const wordDef = wordDefRegExp.source;\n            const wordDefFlags = regExpFlags(wordDefRegExp);\n            return proxy.textualSuggest(resources.map(r => r.toString()), leadingWord, wordDef, wordDefFlags);\n        });\n    }\n    computeWordRanges(resource, range) {\n        return this._withSyncedResources([resource]).then(proxy => {\n            const model = this._modelService.getModel(resource);\n            if (!model) {\n                return Promise.resolve(null);\n            }\n            const wordDefRegExp = this.languageConfigurationService.getLanguageConfiguration(model.getLanguageId()).getWordDefinition();\n            const wordDef = wordDefRegExp.source;\n            const wordDefFlags = regExpFlags(wordDefRegExp);\n            return proxy.computeWordRanges(resource.toString(), range, wordDef, wordDefFlags);\n        });\n    }\n    navigateValueSet(resource, range, up) {\n        return this._withSyncedResources([resource]).then(proxy => {\n            const model = this._modelService.getModel(resource);\n            if (!model) {\n                return null;\n            }\n            const wordDefRegExp = this.languageConfigurationService.getLanguageConfiguration(model.getLanguageId()).getWordDefinition();\n            const wordDef = wordDefRegExp.source;\n            const wordDefFlags = regExpFlags(wordDefRegExp);\n            return proxy.navigateValueSet(resource.toString(), range, up, wordDef, wordDefFlags);\n        });\n    }\n    dispose() {\n        super.dispose();\n        this._disposed = true;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}