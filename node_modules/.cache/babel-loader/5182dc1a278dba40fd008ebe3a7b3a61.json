{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport var Iterable;\n\n(function (Iterable) {\n  function is(thing) {\n    return thing && typeof thing === 'object' && typeof thing[Symbol.iterator] === 'function';\n  }\n\n  Iterable.is = is;\n\n  const _empty = Object.freeze([]);\n\n  function empty() {\n    return _empty;\n  }\n\n  Iterable.empty = empty;\n\n  function* single(element) {\n    yield element;\n  }\n\n  Iterable.single = single;\n\n  function from(iterable) {\n    return iterable || _empty;\n  }\n\n  Iterable.from = from;\n\n  function isEmpty(iterable) {\n    return !iterable || iterable[Symbol.iterator]().next().done === true;\n  }\n\n  Iterable.isEmpty = isEmpty;\n\n  function first(iterable) {\n    return iterable[Symbol.iterator]().next().value;\n  }\n\n  Iterable.first = first;\n\n  function some(iterable, predicate) {\n    for (const element of iterable) {\n      if (predicate(element)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  Iterable.some = some;\n\n  function find(iterable, predicate) {\n    for (const element of iterable) {\n      if (predicate(element)) {\n        return element;\n      }\n    }\n\n    return undefined;\n  }\n\n  Iterable.find = find;\n\n  function* filter(iterable, predicate) {\n    for (const element of iterable) {\n      if (predicate(element)) {\n        yield element;\n      }\n    }\n  }\n\n  Iterable.filter = filter;\n\n  function* map(iterable, fn) {\n    let index = 0;\n\n    for (const element of iterable) {\n      yield fn(element, index++);\n    }\n  }\n\n  Iterable.map = map;\n\n  function* concat(...iterables) {\n    for (const iterable of iterables) {\n      for (const element of iterable) {\n        yield element;\n      }\n    }\n  }\n\n  Iterable.concat = concat;\n\n  function* concatNested(iterables) {\n    for (const iterable of iterables) {\n      for (const element of iterable) {\n        yield element;\n      }\n    }\n  }\n\n  Iterable.concatNested = concatNested;\n\n  function reduce(iterable, reducer, initialValue) {\n    let value = initialValue;\n\n    for (const element of iterable) {\n      value = reducer(value, element);\n    }\n\n    return value;\n  }\n\n  Iterable.reduce = reduce;\n  /**\n   * Returns an iterable slice of the array, with the same semantics as `array.slice()`.\n   */\n\n  function* slice(arr, from, to = arr.length) {\n    if (from < 0) {\n      from += arr.length;\n    }\n\n    if (to < 0) {\n      to += arr.length;\n    } else if (to > arr.length) {\n      to = arr.length;\n    }\n\n    for (; from < to; from++) {\n      yield arr[from];\n    }\n  }\n\n  Iterable.slice = slice;\n  /**\n   * Consumes `atMost` elements from iterable and returns the consumed elements,\n   * and an iterable for the rest of the elements.\n   */\n\n  function consume(iterable, atMost = Number.POSITIVE_INFINITY) {\n    const consumed = [];\n\n    if (atMost === 0) {\n      return [consumed, iterable];\n    }\n\n    const iterator = iterable[Symbol.iterator]();\n\n    for (let i = 0; i < atMost; i++) {\n      const next = iterator.next();\n\n      if (next.done) {\n        return [consumed, Iterable.empty()];\n      }\n\n      consumed.push(next.value);\n    }\n\n    return [consumed, {\n      [Symbol.iterator]() {\n        return iterator;\n      }\n\n    }];\n  }\n\n  Iterable.consume = consume;\n  /**\n   * Returns whether the iterables are the same length and all items are\n   * equal using the comparator function.\n   */\n\n  function equals(a, b, comparator = (at, bt) => at === bt) {\n    const ai = a[Symbol.iterator]();\n    const bi = b[Symbol.iterator]();\n\n    while (true) {\n      const an = ai.next();\n      const bn = bi.next();\n\n      if (an.done !== bn.done) {\n        return false;\n      } else if (an.done) {\n        return true;\n      } else if (!comparator(an.value, bn.value)) {\n        return false;\n      }\n    }\n  }\n\n  Iterable.equals = equals;\n})(Iterable || (Iterable = {}));","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/base/common/iterator.js"],"names":["Iterable","is","thing","Symbol","iterator","_empty","Object","freeze","empty","single","element","from","iterable","isEmpty","next","done","first","value","some","predicate","find","undefined","filter","map","fn","index","concat","iterables","concatNested","reduce","reducer","initialValue","slice","arr","to","length","consume","atMost","Number","POSITIVE_INFINITY","consumed","i","push","equals","a","b","comparator","at","bt","ai","bi","an","bn"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport var Iterable;\n(function (Iterable) {\n    function is(thing) {\n        return thing && typeof thing === 'object' && typeof thing[Symbol.iterator] === 'function';\n    }\n    Iterable.is = is;\n    const _empty = Object.freeze([]);\n    function empty() {\n        return _empty;\n    }\n    Iterable.empty = empty;\n    function* single(element) {\n        yield element;\n    }\n    Iterable.single = single;\n    function from(iterable) {\n        return iterable || _empty;\n    }\n    Iterable.from = from;\n    function isEmpty(iterable) {\n        return !iterable || iterable[Symbol.iterator]().next().done === true;\n    }\n    Iterable.isEmpty = isEmpty;\n    function first(iterable) {\n        return iterable[Symbol.iterator]().next().value;\n    }\n    Iterable.first = first;\n    function some(iterable, predicate) {\n        for (const element of iterable) {\n            if (predicate(element)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    Iterable.some = some;\n    function find(iterable, predicate) {\n        for (const element of iterable) {\n            if (predicate(element)) {\n                return element;\n            }\n        }\n        return undefined;\n    }\n    Iterable.find = find;\n    function* filter(iterable, predicate) {\n        for (const element of iterable) {\n            if (predicate(element)) {\n                yield element;\n            }\n        }\n    }\n    Iterable.filter = filter;\n    function* map(iterable, fn) {\n        let index = 0;\n        for (const element of iterable) {\n            yield fn(element, index++);\n        }\n    }\n    Iterable.map = map;\n    function* concat(...iterables) {\n        for (const iterable of iterables) {\n            for (const element of iterable) {\n                yield element;\n            }\n        }\n    }\n    Iterable.concat = concat;\n    function* concatNested(iterables) {\n        for (const iterable of iterables) {\n            for (const element of iterable) {\n                yield element;\n            }\n        }\n    }\n    Iterable.concatNested = concatNested;\n    function reduce(iterable, reducer, initialValue) {\n        let value = initialValue;\n        for (const element of iterable) {\n            value = reducer(value, element);\n        }\n        return value;\n    }\n    Iterable.reduce = reduce;\n    /**\n     * Returns an iterable slice of the array, with the same semantics as `array.slice()`.\n     */\n    function* slice(arr, from, to = arr.length) {\n        if (from < 0) {\n            from += arr.length;\n        }\n        if (to < 0) {\n            to += arr.length;\n        }\n        else if (to > arr.length) {\n            to = arr.length;\n        }\n        for (; from < to; from++) {\n            yield arr[from];\n        }\n    }\n    Iterable.slice = slice;\n    /**\n     * Consumes `atMost` elements from iterable and returns the consumed elements,\n     * and an iterable for the rest of the elements.\n     */\n    function consume(iterable, atMost = Number.POSITIVE_INFINITY) {\n        const consumed = [];\n        if (atMost === 0) {\n            return [consumed, iterable];\n        }\n        const iterator = iterable[Symbol.iterator]();\n        for (let i = 0; i < atMost; i++) {\n            const next = iterator.next();\n            if (next.done) {\n                return [consumed, Iterable.empty()];\n            }\n            consumed.push(next.value);\n        }\n        return [consumed, { [Symbol.iterator]() { return iterator; } }];\n    }\n    Iterable.consume = consume;\n    /**\n     * Returns whether the iterables are the same length and all items are\n     * equal using the comparator function.\n     */\n    function equals(a, b, comparator = (at, bt) => at === bt) {\n        const ai = a[Symbol.iterator]();\n        const bi = b[Symbol.iterator]();\n        while (true) {\n            const an = ai.next();\n            const bn = bi.next();\n            if (an.done !== bn.done) {\n                return false;\n            }\n            else if (an.done) {\n                return true;\n            }\n            else if (!comparator(an.value, bn.value)) {\n                return false;\n            }\n        }\n    }\n    Iterable.equals = equals;\n})(Iterable || (Iterable = {}));\n"]},"metadata":{},"sourceType":"module"}