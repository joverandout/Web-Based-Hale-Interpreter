{"ast":null,"code":"import { nanoid } from 'nanoid/non-secure';\n/**\n * Base router object that can be used when writing custom routers.\n * This provides few helper methods to handle common actions such as `RESET`.\n */\n\nconst BaseRouter = {\n  getStateForAction(state, action) {\n    switch (action.type) {\n      case 'SET_PARAMS':\n        {\n          const index = action.source ? state.routes.findIndex(r => r.key === action.source) : state.index;\n\n          if (index === -1) {\n            return null;\n          }\n\n          return { ...state,\n            routes: state.routes.map((r, i) => i === index ? { ...r,\n              params: { ...r.params,\n                ...action.payload.params\n              }\n            } : r)\n          };\n        }\n\n      case 'RESET':\n        {\n          const nextState = action.payload;\n\n          if (nextState.routes.length === 0 || nextState.routes.some(route => !state.routeNames.includes(route.name))) {\n            return null;\n          }\n\n          if (nextState.stale === false) {\n            if (state.routeNames.length !== nextState.routeNames.length || nextState.routeNames.some(name => !state.routeNames.includes(name))) {\n              return null;\n            }\n\n            return { ...nextState,\n              routes: nextState.routes.map(route => route.key ? route : { ...route,\n                key: `${route.name}-${nanoid()}`\n              })\n            };\n          }\n\n          return nextState;\n        }\n\n      default:\n        return null;\n    }\n  },\n\n  shouldActionChangeFocus(action) {\n    return action.type === 'NAVIGATE';\n  }\n\n};\nexport default BaseRouter;","map":{"version":3,"sources":["BaseRouter.tsx"],"names":["BaseRouter","getStateForAction","action","index","state","r","routes","params","nextState","route","name","key","nanoid","shouldActionChangeFocus"],"mappings":"AAAA,SAAA,MAAA,QAAA,mBAAA;AAQA;AACA;AACA;AACA;;AACA,MAAMA,UAAU,GAAG;AACjBC,EAAAA,iBAAiB,CAAA,KAAA,EAAA,MAAA,EAGqB;AACpC,YAAQC,MAAM,CAAd,IAAA;AACE,WAAA,YAAA;AAAmB;AACjB,gBAAMC,KAAK,GAAGD,MAAM,CAANA,MAAAA,GACVE,KAAK,CAALA,MAAAA,CAAAA,SAAAA,CAAwBC,CAAD,IAAOA,CAAC,CAADA,GAAAA,KAAUH,MAAM,CADpCA,MACVE,CADUF,GAEVE,KAAK,CAFT,KAAA;;AAIA,cAAID,KAAK,KAAK,CAAd,CAAA,EAAkB;AAChB,mBAAA,IAAA;AACD;;AAED,iBAAO,EACL,GADK,KAAA;AAELG,YAAAA,MAAM,EAAE,KAAK,CAAL,MAAA,CAAA,GAAA,CAAiB,CAAA,CAAA,EAAA,CAAA,KACvB,CAAC,KAAD,KAAA,GACI,EAAE,GAAF,CAAA;AAAQC,cAAAA,MAAM,EAAE,EAAE,GAAGF,CAAC,CAAN,MAAA;AAAe,mBAAGH,MAAM,CAANA,OAAAA,CAAeK;AAAjC;AAAhB,aADJ,GADM,CAAA;AAFH,WAAP;AAQD;;AAED,WAAA,OAAA;AAAc;AACZ,gBAAMC,SAAS,GAAGN,MAAM,CAAxB,OAAA;;AAEA,cACEM,SAAS,CAATA,MAAAA,CAAAA,MAAAA,KAAAA,CAAAA,IACAA,SAAS,CAATA,MAAAA,CAAAA,IAAAA,CACGC,KAAD,IAA6B,CAACL,KAAK,CAALA,UAAAA,CAAAA,QAAAA,CAA0BK,KAAK,CAHjE,IAGkCL,CADhCI,CAFF,EAKE;AACA,mBAAA,IAAA;AACD;;AAED,cAAIA,SAAS,CAATA,KAAAA,KAAJ,KAAA,EAA+B;AAC7B,gBACEJ,KAAK,CAALA,UAAAA,CAAAA,MAAAA,KAA4BI,SAAS,CAATA,UAAAA,CAA5BJ,MAAAA,IACAI,SAAS,CAATA,UAAAA,CAAAA,IAAAA,CACGE,IAAD,IAAU,CAACN,KAAK,CAALA,UAAAA,CAAAA,QAAAA,CAHf,IAGeA,CADbI,CAFF,EAKE;AACA,qBAAA,IAAA;AACD;;AAED,mBAAO,EACL,GADK,SAAA;AAELF,cAAAA,MAAM,EAAE,SAAS,CAAT,MAAA,CAAA,GAAA,CAAsBG,KAAD,IAC3BA,KAAK,CAALA,GAAAA,GAAAA,KAAAA,GAAoB,EAAE,GAAF,KAAA;AAAYE,gBAAAA,GAAG,EAAG,GAAEF,KAAK,CAACC,IAAK,IAAGE,MAAM,EAAG;AAA3C,eADd;AAFH,aAAP;AAMD;;AAED,iBAAA,SAAA;AACD;;AAED;AACE,eAAA,IAAA;AAtDJ;AALe,GAAA;;AA+DjBC,EAAAA,uBAAuB,CAAA,MAAA,EAAiC;AACtD,WAAOX,MAAM,CAANA,IAAAA,KAAP,UAAA;AACD;;AAjEgB,CAAnB;AAoEA,eAAA,UAAA","sourcesContent":["import { nanoid } from 'nanoid/non-secure';\n\nimport type {\n  CommonNavigationAction,\n  NavigationState,\n  PartialState,\n} from './types';\n\n/**\n * Base router object that can be used when writing custom routers.\n * This provides few helper methods to handle common actions such as `RESET`.\n */\nconst BaseRouter = {\n  getStateForAction<State extends NavigationState>(\n    state: State,\n    action: CommonNavigationAction\n  ): State | PartialState<State> | null {\n    switch (action.type) {\n      case 'SET_PARAMS': {\n        const index = action.source\n          ? state.routes.findIndex((r) => r.key === action.source)\n          : state.index;\n\n        if (index === -1) {\n          return null;\n        }\n\n        return {\n          ...state,\n          routes: state.routes.map((r, i) =>\n            i === index\n              ? { ...r, params: { ...r.params, ...action.payload.params } }\n              : r\n          ),\n        };\n      }\n\n      case 'RESET': {\n        const nextState = action.payload as State | PartialState<State>;\n\n        if (\n          nextState.routes.length === 0 ||\n          nextState.routes.some(\n            (route: { name: string }) => !state.routeNames.includes(route.name)\n          )\n        ) {\n          return null;\n        }\n\n        if (nextState.stale === false) {\n          if (\n            state.routeNames.length !== nextState.routeNames.length ||\n            nextState.routeNames.some(\n              (name) => !state.routeNames.includes(name)\n            )\n          ) {\n            return null;\n          }\n\n          return {\n            ...nextState,\n            routes: nextState.routes.map((route) =>\n              route.key ? route : { ...route, key: `${route.name}-${nanoid()}` }\n            ),\n          };\n        }\n\n        return nextState;\n      }\n\n      default:\n        return null;\n    }\n  },\n\n  shouldActionChangeFocus(action: CommonNavigationAction) {\n    return action.type === 'NAVIGATE';\n  },\n};\n\nexport default BaseRouter;\n"]},"metadata":{},"sourceType":"module"}