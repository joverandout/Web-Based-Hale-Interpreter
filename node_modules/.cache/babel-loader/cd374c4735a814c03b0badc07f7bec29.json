{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as types from '../../../base/common/types.js';\nimport { CursorState, SingleCursorState } from './cursorCommon.js';\nimport { MoveOperations } from './cursorMoveOperations.js';\nimport { WordOperations } from './cursorWordOperations.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nexport class CursorMoveCommands {\n  static addCursorDown(viewModel, cursors, useLogicalLine) {\n    const result = [];\n    let resultLen = 0;\n\n    for (let i = 0, len = cursors.length; i < len; i++) {\n      const cursor = cursors[i];\n      result[resultLen++] = new CursorState(cursor.modelState, cursor.viewState);\n\n      if (useLogicalLine) {\n        result[resultLen++] = CursorState.fromModelState(MoveOperations.translateDown(viewModel.cursorConfig, viewModel.model, cursor.modelState));\n      } else {\n        result[resultLen++] = CursorState.fromViewState(MoveOperations.translateDown(viewModel.cursorConfig, viewModel, cursor.viewState));\n      }\n    }\n\n    return result;\n  }\n\n  static addCursorUp(viewModel, cursors, useLogicalLine) {\n    const result = [];\n    let resultLen = 0;\n\n    for (let i = 0, len = cursors.length; i < len; i++) {\n      const cursor = cursors[i];\n      result[resultLen++] = new CursorState(cursor.modelState, cursor.viewState);\n\n      if (useLogicalLine) {\n        result[resultLen++] = CursorState.fromModelState(MoveOperations.translateUp(viewModel.cursorConfig, viewModel.model, cursor.modelState));\n      } else {\n        result[resultLen++] = CursorState.fromViewState(MoveOperations.translateUp(viewModel.cursorConfig, viewModel, cursor.viewState));\n      }\n    }\n\n    return result;\n  }\n\n  static moveToBeginningOfLine(viewModel, cursors, inSelectionMode) {\n    let result = [];\n\n    for (let i = 0, len = cursors.length; i < len; i++) {\n      const cursor = cursors[i];\n      result[i] = this._moveToLineStart(viewModel, cursor, inSelectionMode);\n    }\n\n    return result;\n  }\n\n  static _moveToLineStart(viewModel, cursor, inSelectionMode) {\n    const currentViewStateColumn = cursor.viewState.position.column;\n    const currentModelStateColumn = cursor.modelState.position.column;\n    const isFirstLineOfWrappedLine = currentViewStateColumn === currentModelStateColumn;\n    const currentViewStatelineNumber = cursor.viewState.position.lineNumber;\n    const firstNonBlankColumn = viewModel.getLineFirstNonWhitespaceColumn(currentViewStatelineNumber);\n    const isBeginningOfViewLine = currentViewStateColumn === firstNonBlankColumn;\n\n    if (!isFirstLineOfWrappedLine && !isBeginningOfViewLine) {\n      return this._moveToLineStartByView(viewModel, cursor, inSelectionMode);\n    } else {\n      return this._moveToLineStartByModel(viewModel, cursor, inSelectionMode);\n    }\n  }\n\n  static _moveToLineStartByView(viewModel, cursor, inSelectionMode) {\n    return CursorState.fromViewState(MoveOperations.moveToBeginningOfLine(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode));\n  }\n\n  static _moveToLineStartByModel(viewModel, cursor, inSelectionMode) {\n    return CursorState.fromModelState(MoveOperations.moveToBeginningOfLine(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode));\n  }\n\n  static moveToEndOfLine(viewModel, cursors, inSelectionMode, sticky) {\n    const result = [];\n\n    for (let i = 0, len = cursors.length; i < len; i++) {\n      const cursor = cursors[i];\n      result[i] = this._moveToLineEnd(viewModel, cursor, inSelectionMode, sticky);\n    }\n\n    return result;\n  }\n\n  static _moveToLineEnd(viewModel, cursor, inSelectionMode, sticky) {\n    const viewStatePosition = cursor.viewState.position;\n    const viewModelMaxColumn = viewModel.getLineMaxColumn(viewStatePosition.lineNumber);\n    const isEndOfViewLine = viewStatePosition.column === viewModelMaxColumn;\n    const modelStatePosition = cursor.modelState.position;\n    const modelMaxColumn = viewModel.model.getLineMaxColumn(modelStatePosition.lineNumber);\n    const isEndLineOfWrappedLine = viewModelMaxColumn - viewStatePosition.column === modelMaxColumn - modelStatePosition.column;\n\n    if (isEndOfViewLine || isEndLineOfWrappedLine) {\n      return this._moveToLineEndByModel(viewModel, cursor, inSelectionMode, sticky);\n    } else {\n      return this._moveToLineEndByView(viewModel, cursor, inSelectionMode, sticky);\n    }\n  }\n\n  static _moveToLineEndByView(viewModel, cursor, inSelectionMode, sticky) {\n    return CursorState.fromViewState(MoveOperations.moveToEndOfLine(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, sticky));\n  }\n\n  static _moveToLineEndByModel(viewModel, cursor, inSelectionMode, sticky) {\n    return CursorState.fromModelState(MoveOperations.moveToEndOfLine(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode, sticky));\n  }\n\n  static expandLineSelection(viewModel, cursors) {\n    const result = [];\n\n    for (let i = 0, len = cursors.length; i < len; i++) {\n      const cursor = cursors[i];\n      const startLineNumber = cursor.modelState.selection.startLineNumber;\n      const lineCount = viewModel.model.getLineCount();\n      let endLineNumber = cursor.modelState.selection.endLineNumber;\n      let endColumn;\n\n      if (endLineNumber === lineCount) {\n        endColumn = viewModel.model.getLineMaxColumn(lineCount);\n      } else {\n        endLineNumber++;\n        endColumn = 1;\n      }\n\n      result[i] = CursorState.fromModelState(new SingleCursorState(new Range(startLineNumber, 1, startLineNumber, 1), 0, new Position(endLineNumber, endColumn), 0));\n    }\n\n    return result;\n  }\n\n  static moveToBeginningOfBuffer(viewModel, cursors, inSelectionMode) {\n    const result = [];\n\n    for (let i = 0, len = cursors.length; i < len; i++) {\n      const cursor = cursors[i];\n      result[i] = CursorState.fromModelState(MoveOperations.moveToBeginningOfBuffer(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode));\n    }\n\n    return result;\n  }\n\n  static moveToEndOfBuffer(viewModel, cursors, inSelectionMode) {\n    const result = [];\n\n    for (let i = 0, len = cursors.length; i < len; i++) {\n      const cursor = cursors[i];\n      result[i] = CursorState.fromModelState(MoveOperations.moveToEndOfBuffer(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode));\n    }\n\n    return result;\n  }\n\n  static selectAll(viewModel, cursor) {\n    const lineCount = viewModel.model.getLineCount();\n    const maxColumn = viewModel.model.getLineMaxColumn(lineCount);\n    return CursorState.fromModelState(new SingleCursorState(new Range(1, 1, 1, 1), 0, new Position(lineCount, maxColumn), 0));\n  }\n\n  static line(viewModel, cursor, inSelectionMode, _position, _viewPosition) {\n    const position = viewModel.model.validatePosition(_position);\n    const viewPosition = _viewPosition ? viewModel.coordinatesConverter.validateViewPosition(new Position(_viewPosition.lineNumber, _viewPosition.column), position) : viewModel.coordinatesConverter.convertModelPositionToViewPosition(position);\n\n    if (!inSelectionMode || !cursor.modelState.hasSelection()) {\n      // Entering line selection for the first time\n      const lineCount = viewModel.model.getLineCount();\n      let selectToLineNumber = position.lineNumber + 1;\n      let selectToColumn = 1;\n\n      if (selectToLineNumber > lineCount) {\n        selectToLineNumber = lineCount;\n        selectToColumn = viewModel.model.getLineMaxColumn(selectToLineNumber);\n      }\n\n      return CursorState.fromModelState(new SingleCursorState(new Range(position.lineNumber, 1, selectToLineNumber, selectToColumn), 0, new Position(selectToLineNumber, selectToColumn), 0));\n    } // Continuing line selection\n\n\n    const enteringLineNumber = cursor.modelState.selectionStart.getStartPosition().lineNumber;\n\n    if (position.lineNumber < enteringLineNumber) {\n      return CursorState.fromViewState(cursor.viewState.move(cursor.modelState.hasSelection(), viewPosition.lineNumber, 1, 0));\n    } else if (position.lineNumber > enteringLineNumber) {\n      const lineCount = viewModel.getLineCount();\n      let selectToViewLineNumber = viewPosition.lineNumber + 1;\n      let selectToViewColumn = 1;\n\n      if (selectToViewLineNumber > lineCount) {\n        selectToViewLineNumber = lineCount;\n        selectToViewColumn = viewModel.getLineMaxColumn(selectToViewLineNumber);\n      }\n\n      return CursorState.fromViewState(cursor.viewState.move(cursor.modelState.hasSelection(), selectToViewLineNumber, selectToViewColumn, 0));\n    } else {\n      const endPositionOfSelectionStart = cursor.modelState.selectionStart.getEndPosition();\n      return CursorState.fromModelState(cursor.modelState.move(cursor.modelState.hasSelection(), endPositionOfSelectionStart.lineNumber, endPositionOfSelectionStart.column, 0));\n    }\n  }\n\n  static word(viewModel, cursor, inSelectionMode, _position) {\n    const position = viewModel.model.validatePosition(_position);\n    return CursorState.fromModelState(WordOperations.word(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode, position));\n  }\n\n  static cancelSelection(viewModel, cursor) {\n    if (!cursor.modelState.hasSelection()) {\n      return new CursorState(cursor.modelState, cursor.viewState);\n    }\n\n    const lineNumber = cursor.viewState.position.lineNumber;\n    const column = cursor.viewState.position.column;\n    return CursorState.fromViewState(new SingleCursorState(new Range(lineNumber, column, lineNumber, column), 0, new Position(lineNumber, column), 0));\n  }\n\n  static moveTo(viewModel, cursor, inSelectionMode, _position, _viewPosition) {\n    const position = viewModel.model.validatePosition(_position);\n    const viewPosition = _viewPosition ? viewModel.coordinatesConverter.validateViewPosition(new Position(_viewPosition.lineNumber, _viewPosition.column), position) : viewModel.coordinatesConverter.convertModelPositionToViewPosition(position);\n    return CursorState.fromViewState(cursor.viewState.move(inSelectionMode, viewPosition.lineNumber, viewPosition.column, 0));\n  }\n\n  static simpleMove(viewModel, cursors, direction, inSelectionMode, value, unit) {\n    switch (direction) {\n      case 0\n      /* Left */\n      :\n        {\n          if (unit === 4\n          /* HalfLine */\n          ) {\n            // Move left by half the current line length\n            return this._moveHalfLineLeft(viewModel, cursors, inSelectionMode);\n          } else {\n            // Move left by `moveParams.value` columns\n            return this._moveLeft(viewModel, cursors, inSelectionMode, value);\n          }\n        }\n\n      case 1\n      /* Right */\n      :\n        {\n          if (unit === 4\n          /* HalfLine */\n          ) {\n            // Move right by half the current line length\n            return this._moveHalfLineRight(viewModel, cursors, inSelectionMode);\n          } else {\n            // Move right by `moveParams.value` columns\n            return this._moveRight(viewModel, cursors, inSelectionMode, value);\n          }\n        }\n\n      case 2\n      /* Up */\n      :\n        {\n          if (unit === 2\n          /* WrappedLine */\n          ) {\n            // Move up by view lines\n            return this._moveUpByViewLines(viewModel, cursors, inSelectionMode, value);\n          } else {\n            // Move up by model lines\n            return this._moveUpByModelLines(viewModel, cursors, inSelectionMode, value);\n          }\n        }\n\n      case 3\n      /* Down */\n      :\n        {\n          if (unit === 2\n          /* WrappedLine */\n          ) {\n            // Move down by view lines\n            return this._moveDownByViewLines(viewModel, cursors, inSelectionMode, value);\n          } else {\n            // Move down by model lines\n            return this._moveDownByModelLines(viewModel, cursors, inSelectionMode, value);\n          }\n        }\n\n      case 4\n      /* PrevBlankLine */\n      :\n        {\n          if (unit === 2\n          /* WrappedLine */\n          ) {\n            return cursors.map(cursor => CursorState.fromViewState(MoveOperations.moveToPrevBlankLine(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode)));\n          } else {\n            return cursors.map(cursor => CursorState.fromModelState(MoveOperations.moveToPrevBlankLine(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode)));\n          }\n        }\n\n      case 5\n      /* NextBlankLine */\n      :\n        {\n          if (unit === 2\n          /* WrappedLine */\n          ) {\n            return cursors.map(cursor => CursorState.fromViewState(MoveOperations.moveToNextBlankLine(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode)));\n          } else {\n            return cursors.map(cursor => CursorState.fromModelState(MoveOperations.moveToNextBlankLine(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode)));\n          }\n        }\n\n      case 6\n      /* WrappedLineStart */\n      :\n        {\n          // Move to the beginning of the current view line\n          return this._moveToViewMinColumn(viewModel, cursors, inSelectionMode);\n        }\n\n      case 7\n      /* WrappedLineFirstNonWhitespaceCharacter */\n      :\n        {\n          // Move to the first non-whitespace column of the current view line\n          return this._moveToViewFirstNonWhitespaceColumn(viewModel, cursors, inSelectionMode);\n        }\n\n      case 8\n      /* WrappedLineColumnCenter */\n      :\n        {\n          // Move to the \"center\" of the current view line\n          return this._moveToViewCenterColumn(viewModel, cursors, inSelectionMode);\n        }\n\n      case 9\n      /* WrappedLineEnd */\n      :\n        {\n          // Move to the end of the current view line\n          return this._moveToViewMaxColumn(viewModel, cursors, inSelectionMode);\n        }\n\n      case 10\n      /* WrappedLineLastNonWhitespaceCharacter */\n      :\n        {\n          // Move to the last non-whitespace column of the current view line\n          return this._moveToViewLastNonWhitespaceColumn(viewModel, cursors, inSelectionMode);\n        }\n\n      default:\n        return null;\n    }\n  }\n\n  static viewportMove(viewModel, cursors, direction, inSelectionMode, value) {\n    const visibleViewRange = viewModel.getCompletelyVisibleViewRange();\n    const visibleModelRange = viewModel.coordinatesConverter.convertViewRangeToModelRange(visibleViewRange);\n\n    switch (direction) {\n      case 11\n      /* ViewPortTop */\n      :\n        {\n          // Move to the nth line start in the viewport (from the top)\n          const modelLineNumber = this._firstLineNumberInRange(viewModel.model, visibleModelRange, value);\n\n          const modelColumn = viewModel.model.getLineFirstNonWhitespaceColumn(modelLineNumber);\n          return [this._moveToModelPosition(viewModel, cursors[0], inSelectionMode, modelLineNumber, modelColumn)];\n        }\n\n      case 13\n      /* ViewPortBottom */\n      :\n        {\n          // Move to the nth line start in the viewport (from the bottom)\n          const modelLineNumber = this._lastLineNumberInRange(viewModel.model, visibleModelRange, value);\n\n          const modelColumn = viewModel.model.getLineFirstNonWhitespaceColumn(modelLineNumber);\n          return [this._moveToModelPosition(viewModel, cursors[0], inSelectionMode, modelLineNumber, modelColumn)];\n        }\n\n      case 12\n      /* ViewPortCenter */\n      :\n        {\n          // Move to the line start in the viewport center\n          const modelLineNumber = Math.round((visibleModelRange.startLineNumber + visibleModelRange.endLineNumber) / 2);\n          const modelColumn = viewModel.model.getLineFirstNonWhitespaceColumn(modelLineNumber);\n          return [this._moveToModelPosition(viewModel, cursors[0], inSelectionMode, modelLineNumber, modelColumn)];\n        }\n\n      case 14\n      /* ViewPortIfOutside */\n      :\n        {\n          // Move to a position inside the viewport\n          const result = [];\n\n          for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            result[i] = this.findPositionInViewportIfOutside(viewModel, cursor, visibleViewRange, inSelectionMode);\n          }\n\n          return result;\n        }\n\n      default:\n        return null;\n    }\n  }\n\n  static findPositionInViewportIfOutside(viewModel, cursor, visibleViewRange, inSelectionMode) {\n    const viewLineNumber = cursor.viewState.position.lineNumber;\n\n    if (visibleViewRange.startLineNumber <= viewLineNumber && viewLineNumber <= visibleViewRange.endLineNumber - 1) {\n      // Nothing to do, cursor is in viewport\n      return new CursorState(cursor.modelState, cursor.viewState);\n    } else {\n      let newViewLineNumber;\n\n      if (viewLineNumber > visibleViewRange.endLineNumber - 1) {\n        newViewLineNumber = visibleViewRange.endLineNumber - 1;\n      } else if (viewLineNumber < visibleViewRange.startLineNumber) {\n        newViewLineNumber = visibleViewRange.startLineNumber;\n      } else {\n        newViewLineNumber = viewLineNumber;\n      }\n\n      const position = MoveOperations.vertical(viewModel.cursorConfig, viewModel, viewLineNumber, cursor.viewState.position.column, cursor.viewState.leftoverVisibleColumns, newViewLineNumber, false);\n      return CursorState.fromViewState(cursor.viewState.move(inSelectionMode, position.lineNumber, position.column, position.leftoverVisibleColumns));\n    }\n  }\n  /**\n   * Find the nth line start included in the range (from the start).\n   */\n\n\n  static _firstLineNumberInRange(model, range, count) {\n    let startLineNumber = range.startLineNumber;\n\n    if (range.startColumn !== model.getLineMinColumn(startLineNumber)) {\n      // Move on to the second line if the first line start is not included in the range\n      startLineNumber++;\n    }\n\n    return Math.min(range.endLineNumber, startLineNumber + count - 1);\n  }\n  /**\n   * Find the nth line start included in the range (from the end).\n   */\n\n\n  static _lastLineNumberInRange(model, range, count) {\n    let startLineNumber = range.startLineNumber;\n\n    if (range.startColumn !== model.getLineMinColumn(startLineNumber)) {\n      // Move on to the second line if the first line start is not included in the range\n      startLineNumber++;\n    }\n\n    return Math.max(startLineNumber, range.endLineNumber - count + 1);\n  }\n\n  static _moveLeft(viewModel, cursors, inSelectionMode, noOfColumns) {\n    return cursors.map(cursor => CursorState.fromViewState(MoveOperations.moveLeft(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, noOfColumns)));\n  }\n\n  static _moveHalfLineLeft(viewModel, cursors, inSelectionMode) {\n    const result = [];\n\n    for (let i = 0, len = cursors.length; i < len; i++) {\n      const cursor = cursors[i];\n      const viewLineNumber = cursor.viewState.position.lineNumber;\n      const halfLine = Math.round(viewModel.getLineContent(viewLineNumber).length / 2);\n      result[i] = CursorState.fromViewState(MoveOperations.moveLeft(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, halfLine));\n    }\n\n    return result;\n  }\n\n  static _moveRight(viewModel, cursors, inSelectionMode, noOfColumns) {\n    return cursors.map(cursor => CursorState.fromViewState(MoveOperations.moveRight(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, noOfColumns)));\n  }\n\n  static _moveHalfLineRight(viewModel, cursors, inSelectionMode) {\n    const result = [];\n\n    for (let i = 0, len = cursors.length; i < len; i++) {\n      const cursor = cursors[i];\n      const viewLineNumber = cursor.viewState.position.lineNumber;\n      const halfLine = Math.round(viewModel.getLineContent(viewLineNumber).length / 2);\n      result[i] = CursorState.fromViewState(MoveOperations.moveRight(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, halfLine));\n    }\n\n    return result;\n  }\n\n  static _moveDownByViewLines(viewModel, cursors, inSelectionMode, linesCount) {\n    const result = [];\n\n    for (let i = 0, len = cursors.length; i < len; i++) {\n      const cursor = cursors[i];\n      result[i] = CursorState.fromViewState(MoveOperations.moveDown(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, linesCount));\n    }\n\n    return result;\n  }\n\n  static _moveDownByModelLines(viewModel, cursors, inSelectionMode, linesCount) {\n    const result = [];\n\n    for (let i = 0, len = cursors.length; i < len; i++) {\n      const cursor = cursors[i];\n      result[i] = CursorState.fromModelState(MoveOperations.moveDown(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode, linesCount));\n    }\n\n    return result;\n  }\n\n  static _moveUpByViewLines(viewModel, cursors, inSelectionMode, linesCount) {\n    const result = [];\n\n    for (let i = 0, len = cursors.length; i < len; i++) {\n      const cursor = cursors[i];\n      result[i] = CursorState.fromViewState(MoveOperations.moveUp(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, linesCount));\n    }\n\n    return result;\n  }\n\n  static _moveUpByModelLines(viewModel, cursors, inSelectionMode, linesCount) {\n    const result = [];\n\n    for (let i = 0, len = cursors.length; i < len; i++) {\n      const cursor = cursors[i];\n      result[i] = CursorState.fromModelState(MoveOperations.moveUp(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode, linesCount));\n    }\n\n    return result;\n  }\n\n  static _moveToViewPosition(viewModel, cursor, inSelectionMode, toViewLineNumber, toViewColumn) {\n    return CursorState.fromViewState(cursor.viewState.move(inSelectionMode, toViewLineNumber, toViewColumn, 0));\n  }\n\n  static _moveToModelPosition(viewModel, cursor, inSelectionMode, toModelLineNumber, toModelColumn) {\n    return CursorState.fromModelState(cursor.modelState.move(inSelectionMode, toModelLineNumber, toModelColumn, 0));\n  }\n\n  static _moveToViewMinColumn(viewModel, cursors, inSelectionMode) {\n    const result = [];\n\n    for (let i = 0, len = cursors.length; i < len; i++) {\n      const cursor = cursors[i];\n      const viewLineNumber = cursor.viewState.position.lineNumber;\n      const viewColumn = viewModel.getLineMinColumn(viewLineNumber);\n      result[i] = this._moveToViewPosition(viewModel, cursor, inSelectionMode, viewLineNumber, viewColumn);\n    }\n\n    return result;\n  }\n\n  static _moveToViewFirstNonWhitespaceColumn(viewModel, cursors, inSelectionMode) {\n    const result = [];\n\n    for (let i = 0, len = cursors.length; i < len; i++) {\n      const cursor = cursors[i];\n      const viewLineNumber = cursor.viewState.position.lineNumber;\n      const viewColumn = viewModel.getLineFirstNonWhitespaceColumn(viewLineNumber);\n      result[i] = this._moveToViewPosition(viewModel, cursor, inSelectionMode, viewLineNumber, viewColumn);\n    }\n\n    return result;\n  }\n\n  static _moveToViewCenterColumn(viewModel, cursors, inSelectionMode) {\n    const result = [];\n\n    for (let i = 0, len = cursors.length; i < len; i++) {\n      const cursor = cursors[i];\n      const viewLineNumber = cursor.viewState.position.lineNumber;\n      const viewColumn = Math.round((viewModel.getLineMaxColumn(viewLineNumber) + viewModel.getLineMinColumn(viewLineNumber)) / 2);\n      result[i] = this._moveToViewPosition(viewModel, cursor, inSelectionMode, viewLineNumber, viewColumn);\n    }\n\n    return result;\n  }\n\n  static _moveToViewMaxColumn(viewModel, cursors, inSelectionMode) {\n    const result = [];\n\n    for (let i = 0, len = cursors.length; i < len; i++) {\n      const cursor = cursors[i];\n      const viewLineNumber = cursor.viewState.position.lineNumber;\n      const viewColumn = viewModel.getLineMaxColumn(viewLineNumber);\n      result[i] = this._moveToViewPosition(viewModel, cursor, inSelectionMode, viewLineNumber, viewColumn);\n    }\n\n    return result;\n  }\n\n  static _moveToViewLastNonWhitespaceColumn(viewModel, cursors, inSelectionMode) {\n    const result = [];\n\n    for (let i = 0, len = cursors.length; i < len; i++) {\n      const cursor = cursors[i];\n      const viewLineNumber = cursor.viewState.position.lineNumber;\n      const viewColumn = viewModel.getLineLastNonWhitespaceColumn(viewLineNumber);\n      result[i] = this._moveToViewPosition(viewModel, cursor, inSelectionMode, viewLineNumber, viewColumn);\n    }\n\n    return result;\n  }\n\n}\nexport var CursorMove;\n\n(function (CursorMove) {\n  const isCursorMoveArgs = function (arg) {\n    if (!types.isObject(arg)) {\n      return false;\n    }\n\n    const cursorMoveArg = arg;\n\n    if (!types.isString(cursorMoveArg.to)) {\n      return false;\n    }\n\n    if (!types.isUndefined(cursorMoveArg.select) && !types.isBoolean(cursorMoveArg.select)) {\n      return false;\n    }\n\n    if (!types.isUndefined(cursorMoveArg.by) && !types.isString(cursorMoveArg.by)) {\n      return false;\n    }\n\n    if (!types.isUndefined(cursorMoveArg.value) && !types.isNumber(cursorMoveArg.value)) {\n      return false;\n    }\n\n    return true;\n  };\n\n  CursorMove.description = {\n    description: 'Move cursor to a logical position in the view',\n    args: [{\n      name: 'Cursor move argument object',\n      description: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t* 'to': A mandatory logical position value providing where to move the cursor.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'left', 'right', 'up', 'down', 'prevBlankLine', 'nextBlankLine',\n\t\t\t\t\t\t'wrappedLineStart', 'wrappedLineEnd', 'wrappedLineColumnCenter'\n\t\t\t\t\t\t'wrappedLineFirstNonWhitespaceCharacter', 'wrappedLineLastNonWhitespaceCharacter'\n\t\t\t\t\t\t'viewPortTop', 'viewPortCenter', 'viewPortBottom', 'viewPortIfOutside'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t* 'by': Unit to move. Default is computed based on 'to' value.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'line', 'wrappedLine', 'character', 'halfLine'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t* 'value': Number of units to move. Default is '1'.\n\t\t\t\t\t* 'select': If 'true' makes the selection. Default is 'false'.\n\t\t\t\t`,\n      constraint: isCursorMoveArgs,\n      schema: {\n        'type': 'object',\n        'required': ['to'],\n        'properties': {\n          'to': {\n            'type': 'string',\n            'enum': ['left', 'right', 'up', 'down', 'prevBlankLine', 'nextBlankLine', 'wrappedLineStart', 'wrappedLineEnd', 'wrappedLineColumnCenter', 'wrappedLineFirstNonWhitespaceCharacter', 'wrappedLineLastNonWhitespaceCharacter', 'viewPortTop', 'viewPortCenter', 'viewPortBottom', 'viewPortIfOutside']\n          },\n          'by': {\n            'type': 'string',\n            'enum': ['line', 'wrappedLine', 'character', 'halfLine']\n          },\n          'value': {\n            'type': 'number',\n            'default': 1\n          },\n          'select': {\n            'type': 'boolean',\n            'default': false\n          }\n        }\n      }\n    }]\n  };\n  /**\n   * Positions in the view for cursor move command.\n   */\n\n  CursorMove.RawDirection = {\n    Left: 'left',\n    Right: 'right',\n    Up: 'up',\n    Down: 'down',\n    PrevBlankLine: 'prevBlankLine',\n    NextBlankLine: 'nextBlankLine',\n    WrappedLineStart: 'wrappedLineStart',\n    WrappedLineFirstNonWhitespaceCharacter: 'wrappedLineFirstNonWhitespaceCharacter',\n    WrappedLineColumnCenter: 'wrappedLineColumnCenter',\n    WrappedLineEnd: 'wrappedLineEnd',\n    WrappedLineLastNonWhitespaceCharacter: 'wrappedLineLastNonWhitespaceCharacter',\n    ViewPortTop: 'viewPortTop',\n    ViewPortCenter: 'viewPortCenter',\n    ViewPortBottom: 'viewPortBottom',\n    ViewPortIfOutside: 'viewPortIfOutside'\n  };\n  /**\n   * Units for Cursor move 'by' argument\n   */\n\n  CursorMove.RawUnit = {\n    Line: 'line',\n    WrappedLine: 'wrappedLine',\n    Character: 'character',\n    HalfLine: 'halfLine'\n  };\n\n  function parse(args) {\n    if (!args.to) {\n      // illegal arguments\n      return null;\n    }\n\n    let direction;\n\n    switch (args.to) {\n      case CursorMove.RawDirection.Left:\n        direction = 0\n        /* Left */\n        ;\n        break;\n\n      case CursorMove.RawDirection.Right:\n        direction = 1\n        /* Right */\n        ;\n        break;\n\n      case CursorMove.RawDirection.Up:\n        direction = 2\n        /* Up */\n        ;\n        break;\n\n      case CursorMove.RawDirection.Down:\n        direction = 3\n        /* Down */\n        ;\n        break;\n\n      case CursorMove.RawDirection.PrevBlankLine:\n        direction = 4\n        /* PrevBlankLine */\n        ;\n        break;\n\n      case CursorMove.RawDirection.NextBlankLine:\n        direction = 5\n        /* NextBlankLine */\n        ;\n        break;\n\n      case CursorMove.RawDirection.WrappedLineStart:\n        direction = 6\n        /* WrappedLineStart */\n        ;\n        break;\n\n      case CursorMove.RawDirection.WrappedLineFirstNonWhitespaceCharacter:\n        direction = 7\n        /* WrappedLineFirstNonWhitespaceCharacter */\n        ;\n        break;\n\n      case CursorMove.RawDirection.WrappedLineColumnCenter:\n        direction = 8\n        /* WrappedLineColumnCenter */\n        ;\n        break;\n\n      case CursorMove.RawDirection.WrappedLineEnd:\n        direction = 9\n        /* WrappedLineEnd */\n        ;\n        break;\n\n      case CursorMove.RawDirection.WrappedLineLastNonWhitespaceCharacter:\n        direction = 10\n        /* WrappedLineLastNonWhitespaceCharacter */\n        ;\n        break;\n\n      case CursorMove.RawDirection.ViewPortTop:\n        direction = 11\n        /* ViewPortTop */\n        ;\n        break;\n\n      case CursorMove.RawDirection.ViewPortBottom:\n        direction = 13\n        /* ViewPortBottom */\n        ;\n        break;\n\n      case CursorMove.RawDirection.ViewPortCenter:\n        direction = 12\n        /* ViewPortCenter */\n        ;\n        break;\n\n      case CursorMove.RawDirection.ViewPortIfOutside:\n        direction = 14\n        /* ViewPortIfOutside */\n        ;\n        break;\n\n      default:\n        // illegal arguments\n        return null;\n    }\n\n    let unit = 0\n    /* None */\n    ;\n\n    switch (args.by) {\n      case CursorMove.RawUnit.Line:\n        unit = 1\n        /* Line */\n        ;\n        break;\n\n      case CursorMove.RawUnit.WrappedLine:\n        unit = 2\n        /* WrappedLine */\n        ;\n        break;\n\n      case CursorMove.RawUnit.Character:\n        unit = 3\n        /* Character */\n        ;\n        break;\n\n      case CursorMove.RawUnit.HalfLine:\n        unit = 4\n        /* HalfLine */\n        ;\n        break;\n    }\n\n    return {\n      direction: direction,\n      unit: unit,\n      select: !!args.select,\n      value: args.value || 1\n    };\n  }\n\n  CursorMove.parse = parse;\n})(CursorMove || (CursorMove = {}));","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/common/cursor/cursorMoveCommands.js"],"names":["types","CursorState","SingleCursorState","MoveOperations","WordOperations","Position","Range","CursorMoveCommands","addCursorDown","viewModel","cursors","useLogicalLine","result","resultLen","i","len","length","cursor","modelState","viewState","fromModelState","translateDown","cursorConfig","model","fromViewState","addCursorUp","translateUp","moveToBeginningOfLine","inSelectionMode","_moveToLineStart","currentViewStateColumn","position","column","currentModelStateColumn","isFirstLineOfWrappedLine","currentViewStatelineNumber","lineNumber","firstNonBlankColumn","getLineFirstNonWhitespaceColumn","isBeginningOfViewLine","_moveToLineStartByView","_moveToLineStartByModel","moveToEndOfLine","sticky","_moveToLineEnd","viewStatePosition","viewModelMaxColumn","getLineMaxColumn","isEndOfViewLine","modelStatePosition","modelMaxColumn","isEndLineOfWrappedLine","_moveToLineEndByModel","_moveToLineEndByView","expandLineSelection","startLineNumber","selection","lineCount","getLineCount","endLineNumber","endColumn","moveToBeginningOfBuffer","moveToEndOfBuffer","selectAll","maxColumn","line","_position","_viewPosition","validatePosition","viewPosition","coordinatesConverter","validateViewPosition","convertModelPositionToViewPosition","hasSelection","selectToLineNumber","selectToColumn","enteringLineNumber","selectionStart","getStartPosition","move","selectToViewLineNumber","selectToViewColumn","endPositionOfSelectionStart","getEndPosition","word","cancelSelection","moveTo","simpleMove","direction","value","unit","_moveHalfLineLeft","_moveLeft","_moveHalfLineRight","_moveRight","_moveUpByViewLines","_moveUpByModelLines","_moveDownByViewLines","_moveDownByModelLines","map","moveToPrevBlankLine","moveToNextBlankLine","_moveToViewMinColumn","_moveToViewFirstNonWhitespaceColumn","_moveToViewCenterColumn","_moveToViewMaxColumn","_moveToViewLastNonWhitespaceColumn","viewportMove","visibleViewRange","getCompletelyVisibleViewRange","visibleModelRange","convertViewRangeToModelRange","modelLineNumber","_firstLineNumberInRange","modelColumn","_moveToModelPosition","_lastLineNumberInRange","Math","round","findPositionInViewportIfOutside","viewLineNumber","newViewLineNumber","vertical","leftoverVisibleColumns","range","count","startColumn","getLineMinColumn","min","max","noOfColumns","moveLeft","halfLine","getLineContent","moveRight","linesCount","moveDown","moveUp","_moveToViewPosition","toViewLineNumber","toViewColumn","toModelLineNumber","toModelColumn","viewColumn","getLineLastNonWhitespaceColumn","CursorMove","isCursorMoveArgs","arg","isObject","cursorMoveArg","isString","to","isUndefined","select","isBoolean","by","isNumber","description","args","name","constraint","schema","RawDirection","Left","Right","Up","Down","PrevBlankLine","NextBlankLine","WrappedLineStart","WrappedLineFirstNonWhitespaceCharacter","WrappedLineColumnCenter","WrappedLineEnd","WrappedLineLastNonWhitespaceCharacter","ViewPortTop","ViewPortCenter","ViewPortBottom","ViewPortIfOutside","RawUnit","Line","WrappedLine","Character","HalfLine","parse"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,KAAKA,KAAZ,MAAuB,+BAAvB;AACA,SAASC,WAAT,EAAsBC,iBAAtB,QAA+C,mBAA/C;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,OAAO,MAAMC,kBAAN,CAAyB;AACR,SAAbC,aAAa,CAACC,SAAD,EAAYC,OAAZ,EAAqBC,cAArB,EAAqC;AACrD,UAAMC,MAAM,GAAG,EAAf;AACA,QAAIC,SAAS,GAAG,CAAhB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGL,OAAO,CAACM,MAA9B,EAAsCF,CAAC,GAAGC,GAA1C,EAA+CD,CAAC,EAAhD,EAAoD;AAChD,YAAMG,MAAM,GAAGP,OAAO,CAACI,CAAD,CAAtB;AACAF,MAAAA,MAAM,CAACC,SAAS,EAAV,CAAN,GAAsB,IAAIZ,WAAJ,CAAgBgB,MAAM,CAACC,UAAvB,EAAmCD,MAAM,CAACE,SAA1C,CAAtB;;AACA,UAAIR,cAAJ,EAAoB;AAChBC,QAAAA,MAAM,CAACC,SAAS,EAAV,CAAN,GAAsBZ,WAAW,CAACmB,cAAZ,CAA2BjB,cAAc,CAACkB,aAAf,CAA6BZ,SAAS,CAACa,YAAvC,EAAqDb,SAAS,CAACc,KAA/D,EAAsEN,MAAM,CAACC,UAA7E,CAA3B,CAAtB;AACH,OAFD,MAGK;AACDN,QAAAA,MAAM,CAACC,SAAS,EAAV,CAAN,GAAsBZ,WAAW,CAACuB,aAAZ,CAA0BrB,cAAc,CAACkB,aAAf,CAA6BZ,SAAS,CAACa,YAAvC,EAAqDb,SAArD,EAAgEQ,MAAM,CAACE,SAAvE,CAA1B,CAAtB;AACH;AACJ;;AACD,WAAOP,MAAP;AACH;;AACiB,SAAXa,WAAW,CAAChB,SAAD,EAAYC,OAAZ,EAAqBC,cAArB,EAAqC;AACnD,UAAMC,MAAM,GAAG,EAAf;AACA,QAAIC,SAAS,GAAG,CAAhB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGL,OAAO,CAACM,MAA9B,EAAsCF,CAAC,GAAGC,GAA1C,EAA+CD,CAAC,EAAhD,EAAoD;AAChD,YAAMG,MAAM,GAAGP,OAAO,CAACI,CAAD,CAAtB;AACAF,MAAAA,MAAM,CAACC,SAAS,EAAV,CAAN,GAAsB,IAAIZ,WAAJ,CAAgBgB,MAAM,CAACC,UAAvB,EAAmCD,MAAM,CAACE,SAA1C,CAAtB;;AACA,UAAIR,cAAJ,EAAoB;AAChBC,QAAAA,MAAM,CAACC,SAAS,EAAV,CAAN,GAAsBZ,WAAW,CAACmB,cAAZ,CAA2BjB,cAAc,CAACuB,WAAf,CAA2BjB,SAAS,CAACa,YAArC,EAAmDb,SAAS,CAACc,KAA7D,EAAoEN,MAAM,CAACC,UAA3E,CAA3B,CAAtB;AACH,OAFD,MAGK;AACDN,QAAAA,MAAM,CAACC,SAAS,EAAV,CAAN,GAAsBZ,WAAW,CAACuB,aAAZ,CAA0BrB,cAAc,CAACuB,WAAf,CAA2BjB,SAAS,CAACa,YAArC,EAAmDb,SAAnD,EAA8DQ,MAAM,CAACE,SAArE,CAA1B,CAAtB;AACH;AACJ;;AACD,WAAOP,MAAP;AACH;;AAC2B,SAArBe,qBAAqB,CAAClB,SAAD,EAAYC,OAAZ,EAAqBkB,eAArB,EAAsC;AAC9D,QAAIhB,MAAM,GAAG,EAAb;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGL,OAAO,CAACM,MAA9B,EAAsCF,CAAC,GAAGC,GAA1C,EAA+CD,CAAC,EAAhD,EAAoD;AAChD,YAAMG,MAAM,GAAGP,OAAO,CAACI,CAAD,CAAtB;AACAF,MAAAA,MAAM,CAACE,CAAD,CAAN,GAAY,KAAKe,gBAAL,CAAsBpB,SAAtB,EAAiCQ,MAAjC,EAAyCW,eAAzC,CAAZ;AACH;;AACD,WAAOhB,MAAP;AACH;;AACsB,SAAhBiB,gBAAgB,CAACpB,SAAD,EAAYQ,MAAZ,EAAoBW,eAApB,EAAqC;AACxD,UAAME,sBAAsB,GAAGb,MAAM,CAACE,SAAP,CAAiBY,QAAjB,CAA0BC,MAAzD;AACA,UAAMC,uBAAuB,GAAGhB,MAAM,CAACC,UAAP,CAAkBa,QAAlB,CAA2BC,MAA3D;AACA,UAAME,wBAAwB,GAAGJ,sBAAsB,KAAKG,uBAA5D;AACA,UAAME,0BAA0B,GAAGlB,MAAM,CAACE,SAAP,CAAiBY,QAAjB,CAA0BK,UAA7D;AACA,UAAMC,mBAAmB,GAAG5B,SAAS,CAAC6B,+BAAV,CAA0CH,0BAA1C,CAA5B;AACA,UAAMI,qBAAqB,GAAGT,sBAAsB,KAAKO,mBAAzD;;AACA,QAAI,CAACH,wBAAD,IAA6B,CAACK,qBAAlC,EAAyD;AACrD,aAAO,KAAKC,sBAAL,CAA4B/B,SAA5B,EAAuCQ,MAAvC,EAA+CW,eAA/C,CAAP;AACH,KAFD,MAGK;AACD,aAAO,KAAKa,uBAAL,CAA6BhC,SAA7B,EAAwCQ,MAAxC,EAAgDW,eAAhD,CAAP;AACH;AACJ;;AAC4B,SAAtBY,sBAAsB,CAAC/B,SAAD,EAAYQ,MAAZ,EAAoBW,eAApB,EAAqC;AAC9D,WAAO3B,WAAW,CAACuB,aAAZ,CAA0BrB,cAAc,CAACwB,qBAAf,CAAqClB,SAAS,CAACa,YAA/C,EAA6Db,SAA7D,EAAwEQ,MAAM,CAACE,SAA/E,EAA0FS,eAA1F,CAA1B,CAAP;AACH;;AAC6B,SAAvBa,uBAAuB,CAAChC,SAAD,EAAYQ,MAAZ,EAAoBW,eAApB,EAAqC;AAC/D,WAAO3B,WAAW,CAACmB,cAAZ,CAA2BjB,cAAc,CAACwB,qBAAf,CAAqClB,SAAS,CAACa,YAA/C,EAA6Db,SAAS,CAACc,KAAvE,EAA8EN,MAAM,CAACC,UAArF,EAAiGU,eAAjG,CAA3B,CAAP;AACH;;AACqB,SAAfc,eAAe,CAACjC,SAAD,EAAYC,OAAZ,EAAqBkB,eAArB,EAAsCe,MAAtC,EAA8C;AAChE,UAAM/B,MAAM,GAAG,EAAf;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGL,OAAO,CAACM,MAA9B,EAAsCF,CAAC,GAAGC,GAA1C,EAA+CD,CAAC,EAAhD,EAAoD;AAChD,YAAMG,MAAM,GAAGP,OAAO,CAACI,CAAD,CAAtB;AACAF,MAAAA,MAAM,CAACE,CAAD,CAAN,GAAY,KAAK8B,cAAL,CAAoBnC,SAApB,EAA+BQ,MAA/B,EAAuCW,eAAvC,EAAwDe,MAAxD,CAAZ;AACH;;AACD,WAAO/B,MAAP;AACH;;AACoB,SAAdgC,cAAc,CAACnC,SAAD,EAAYQ,MAAZ,EAAoBW,eAApB,EAAqCe,MAArC,EAA6C;AAC9D,UAAME,iBAAiB,GAAG5B,MAAM,CAACE,SAAP,CAAiBY,QAA3C;AACA,UAAMe,kBAAkB,GAAGrC,SAAS,CAACsC,gBAAV,CAA2BF,iBAAiB,CAACT,UAA7C,CAA3B;AACA,UAAMY,eAAe,GAAGH,iBAAiB,CAACb,MAAlB,KAA6Bc,kBAArD;AACA,UAAMG,kBAAkB,GAAGhC,MAAM,CAACC,UAAP,CAAkBa,QAA7C;AACA,UAAMmB,cAAc,GAAGzC,SAAS,CAACc,KAAV,CAAgBwB,gBAAhB,CAAiCE,kBAAkB,CAACb,UAApD,CAAvB;AACA,UAAMe,sBAAsB,GAAGL,kBAAkB,GAAGD,iBAAiB,CAACb,MAAvC,KAAkDkB,cAAc,GAAGD,kBAAkB,CAACjB,MAArH;;AACA,QAAIgB,eAAe,IAAIG,sBAAvB,EAA+C;AAC3C,aAAO,KAAKC,qBAAL,CAA2B3C,SAA3B,EAAsCQ,MAAtC,EAA8CW,eAA9C,EAA+De,MAA/D,CAAP;AACH,KAFD,MAGK;AACD,aAAO,KAAKU,oBAAL,CAA0B5C,SAA1B,EAAqCQ,MAArC,EAA6CW,eAA7C,EAA8De,MAA9D,CAAP;AACH;AACJ;;AAC0B,SAApBU,oBAAoB,CAAC5C,SAAD,EAAYQ,MAAZ,EAAoBW,eAApB,EAAqCe,MAArC,EAA6C;AACpE,WAAO1C,WAAW,CAACuB,aAAZ,CAA0BrB,cAAc,CAACuC,eAAf,CAA+BjC,SAAS,CAACa,YAAzC,EAAuDb,SAAvD,EAAkEQ,MAAM,CAACE,SAAzE,EAAoFS,eAApF,EAAqGe,MAArG,CAA1B,CAAP;AACH;;AAC2B,SAArBS,qBAAqB,CAAC3C,SAAD,EAAYQ,MAAZ,EAAoBW,eAApB,EAAqCe,MAArC,EAA6C;AACrE,WAAO1C,WAAW,CAACmB,cAAZ,CAA2BjB,cAAc,CAACuC,eAAf,CAA+BjC,SAAS,CAACa,YAAzC,EAAuDb,SAAS,CAACc,KAAjE,EAAwEN,MAAM,CAACC,UAA/E,EAA2FU,eAA3F,EAA4Ge,MAA5G,CAA3B,CAAP;AACH;;AACyB,SAAnBW,mBAAmB,CAAC7C,SAAD,EAAYC,OAAZ,EAAqB;AAC3C,UAAME,MAAM,GAAG,EAAf;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGL,OAAO,CAACM,MAA9B,EAAsCF,CAAC,GAAGC,GAA1C,EAA+CD,CAAC,EAAhD,EAAoD;AAChD,YAAMG,MAAM,GAAGP,OAAO,CAACI,CAAD,CAAtB;AACA,YAAMyC,eAAe,GAAGtC,MAAM,CAACC,UAAP,CAAkBsC,SAAlB,CAA4BD,eAApD;AACA,YAAME,SAAS,GAAGhD,SAAS,CAACc,KAAV,CAAgBmC,YAAhB,EAAlB;AACA,UAAIC,aAAa,GAAG1C,MAAM,CAACC,UAAP,CAAkBsC,SAAlB,CAA4BG,aAAhD;AACA,UAAIC,SAAJ;;AACA,UAAID,aAAa,KAAKF,SAAtB,EAAiC;AAC7BG,QAAAA,SAAS,GAAGnD,SAAS,CAACc,KAAV,CAAgBwB,gBAAhB,CAAiCU,SAAjC,CAAZ;AACH,OAFD,MAGK;AACDE,QAAAA,aAAa;AACbC,QAAAA,SAAS,GAAG,CAAZ;AACH;;AACDhD,MAAAA,MAAM,CAACE,CAAD,CAAN,GAAYb,WAAW,CAACmB,cAAZ,CAA2B,IAAIlB,iBAAJ,CAAsB,IAAII,KAAJ,CAAUiD,eAAV,EAA2B,CAA3B,EAA8BA,eAA9B,EAA+C,CAA/C,CAAtB,EAAyE,CAAzE,EAA4E,IAAIlD,QAAJ,CAAasD,aAAb,EAA4BC,SAA5B,CAA5E,EAAoH,CAApH,CAA3B,CAAZ;AACH;;AACD,WAAOhD,MAAP;AACH;;AAC6B,SAAvBiD,uBAAuB,CAACpD,SAAD,EAAYC,OAAZ,EAAqBkB,eAArB,EAAsC;AAChE,UAAMhB,MAAM,GAAG,EAAf;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGL,OAAO,CAACM,MAA9B,EAAsCF,CAAC,GAAGC,GAA1C,EAA+CD,CAAC,EAAhD,EAAoD;AAChD,YAAMG,MAAM,GAAGP,OAAO,CAACI,CAAD,CAAtB;AACAF,MAAAA,MAAM,CAACE,CAAD,CAAN,GAAYb,WAAW,CAACmB,cAAZ,CAA2BjB,cAAc,CAAC0D,uBAAf,CAAuCpD,SAAS,CAACa,YAAjD,EAA+Db,SAAS,CAACc,KAAzE,EAAgFN,MAAM,CAACC,UAAvF,EAAmGU,eAAnG,CAA3B,CAAZ;AACH;;AACD,WAAOhB,MAAP;AACH;;AACuB,SAAjBkD,iBAAiB,CAACrD,SAAD,EAAYC,OAAZ,EAAqBkB,eAArB,EAAsC;AAC1D,UAAMhB,MAAM,GAAG,EAAf;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGL,OAAO,CAACM,MAA9B,EAAsCF,CAAC,GAAGC,GAA1C,EAA+CD,CAAC,EAAhD,EAAoD;AAChD,YAAMG,MAAM,GAAGP,OAAO,CAACI,CAAD,CAAtB;AACAF,MAAAA,MAAM,CAACE,CAAD,CAAN,GAAYb,WAAW,CAACmB,cAAZ,CAA2BjB,cAAc,CAAC2D,iBAAf,CAAiCrD,SAAS,CAACa,YAA3C,EAAyDb,SAAS,CAACc,KAAnE,EAA0EN,MAAM,CAACC,UAAjF,EAA6FU,eAA7F,CAA3B,CAAZ;AACH;;AACD,WAAOhB,MAAP;AACH;;AACe,SAATmD,SAAS,CAACtD,SAAD,EAAYQ,MAAZ,EAAoB;AAChC,UAAMwC,SAAS,GAAGhD,SAAS,CAACc,KAAV,CAAgBmC,YAAhB,EAAlB;AACA,UAAMM,SAAS,GAAGvD,SAAS,CAACc,KAAV,CAAgBwB,gBAAhB,CAAiCU,SAAjC,CAAlB;AACA,WAAOxD,WAAW,CAACmB,cAAZ,CAA2B,IAAIlB,iBAAJ,CAAsB,IAAII,KAAJ,CAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,CAAtB,EAA6C,CAA7C,EAAgD,IAAID,QAAJ,CAAaoD,SAAb,EAAwBO,SAAxB,CAAhD,EAAoF,CAApF,CAA3B,CAAP;AACH;;AACU,SAAJC,IAAI,CAACxD,SAAD,EAAYQ,MAAZ,EAAoBW,eAApB,EAAqCsC,SAArC,EAAgDC,aAAhD,EAA+D;AACtE,UAAMpC,QAAQ,GAAGtB,SAAS,CAACc,KAAV,CAAgB6C,gBAAhB,CAAiCF,SAAjC,CAAjB;AACA,UAAMG,YAAY,GAAIF,aAAa,GAC7B1D,SAAS,CAAC6D,oBAAV,CAA+BC,oBAA/B,CAAoD,IAAIlE,QAAJ,CAAa8D,aAAa,CAAC/B,UAA3B,EAAuC+B,aAAa,CAACnC,MAArD,CAApD,EAAkHD,QAAlH,CAD6B,GAE7BtB,SAAS,CAAC6D,oBAAV,CAA+BE,kCAA/B,CAAkEzC,QAAlE,CAFN;;AAGA,QAAI,CAACH,eAAD,IAAoB,CAACX,MAAM,CAACC,UAAP,CAAkBuD,YAAlB,EAAzB,EAA2D;AACvD;AACA,YAAMhB,SAAS,GAAGhD,SAAS,CAACc,KAAV,CAAgBmC,YAAhB,EAAlB;AACA,UAAIgB,kBAAkB,GAAG3C,QAAQ,CAACK,UAAT,GAAsB,CAA/C;AACA,UAAIuC,cAAc,GAAG,CAArB;;AACA,UAAID,kBAAkB,GAAGjB,SAAzB,EAAoC;AAChCiB,QAAAA,kBAAkB,GAAGjB,SAArB;AACAkB,QAAAA,cAAc,GAAGlE,SAAS,CAACc,KAAV,CAAgBwB,gBAAhB,CAAiC2B,kBAAjC,CAAjB;AACH;;AACD,aAAOzE,WAAW,CAACmB,cAAZ,CAA2B,IAAIlB,iBAAJ,CAAsB,IAAII,KAAJ,CAAUyB,QAAQ,CAACK,UAAnB,EAA+B,CAA/B,EAAkCsC,kBAAlC,EAAsDC,cAAtD,CAAtB,EAA6F,CAA7F,EAAgG,IAAItE,QAAJ,CAAaqE,kBAAb,EAAiCC,cAAjC,CAAhG,EAAkJ,CAAlJ,CAA3B,CAAP;AACH,KAfqE,CAgBtE;;;AACA,UAAMC,kBAAkB,GAAG3D,MAAM,CAACC,UAAP,CAAkB2D,cAAlB,CAAiCC,gBAAjC,GAAoD1C,UAA/E;;AACA,QAAIL,QAAQ,CAACK,UAAT,GAAsBwC,kBAA1B,EAA8C;AAC1C,aAAO3E,WAAW,CAACuB,aAAZ,CAA0BP,MAAM,CAACE,SAAP,CAAiB4D,IAAjB,CAAsB9D,MAAM,CAACC,UAAP,CAAkBuD,YAAlB,EAAtB,EAAwDJ,YAAY,CAACjC,UAArE,EAAiF,CAAjF,EAAoF,CAApF,CAA1B,CAAP;AACH,KAFD,MAGK,IAAIL,QAAQ,CAACK,UAAT,GAAsBwC,kBAA1B,EAA8C;AAC/C,YAAMnB,SAAS,GAAGhD,SAAS,CAACiD,YAAV,EAAlB;AACA,UAAIsB,sBAAsB,GAAGX,YAAY,CAACjC,UAAb,GAA0B,CAAvD;AACA,UAAI6C,kBAAkB,GAAG,CAAzB;;AACA,UAAID,sBAAsB,GAAGvB,SAA7B,EAAwC;AACpCuB,QAAAA,sBAAsB,GAAGvB,SAAzB;AACAwB,QAAAA,kBAAkB,GAAGxE,SAAS,CAACsC,gBAAV,CAA2BiC,sBAA3B,CAArB;AACH;;AACD,aAAO/E,WAAW,CAACuB,aAAZ,CAA0BP,MAAM,CAACE,SAAP,CAAiB4D,IAAjB,CAAsB9D,MAAM,CAACC,UAAP,CAAkBuD,YAAlB,EAAtB,EAAwDO,sBAAxD,EAAgFC,kBAAhF,EAAoG,CAApG,CAA1B,CAAP;AACH,KATI,MAUA;AACD,YAAMC,2BAA2B,GAAGjE,MAAM,CAACC,UAAP,CAAkB2D,cAAlB,CAAiCM,cAAjC,EAApC;AACA,aAAOlF,WAAW,CAACmB,cAAZ,CAA2BH,MAAM,CAACC,UAAP,CAAkB6D,IAAlB,CAAuB9D,MAAM,CAACC,UAAP,CAAkBuD,YAAlB,EAAvB,EAAyDS,2BAA2B,CAAC9C,UAArF,EAAiG8C,2BAA2B,CAAClD,MAA7H,EAAqI,CAArI,CAA3B,CAAP;AACH;AACJ;;AACU,SAAJoD,IAAI,CAAC3E,SAAD,EAAYQ,MAAZ,EAAoBW,eAApB,EAAqCsC,SAArC,EAAgD;AACvD,UAAMnC,QAAQ,GAAGtB,SAAS,CAACc,KAAV,CAAgB6C,gBAAhB,CAAiCF,SAAjC,CAAjB;AACA,WAAOjE,WAAW,CAACmB,cAAZ,CAA2BhB,cAAc,CAACgF,IAAf,CAAoB3E,SAAS,CAACa,YAA9B,EAA4Cb,SAAS,CAACc,KAAtD,EAA6DN,MAAM,CAACC,UAApE,EAAgFU,eAAhF,EAAiGG,QAAjG,CAA3B,CAAP;AACH;;AACqB,SAAfsD,eAAe,CAAC5E,SAAD,EAAYQ,MAAZ,EAAoB;AACtC,QAAI,CAACA,MAAM,CAACC,UAAP,CAAkBuD,YAAlB,EAAL,EAAuC;AACnC,aAAO,IAAIxE,WAAJ,CAAgBgB,MAAM,CAACC,UAAvB,EAAmCD,MAAM,CAACE,SAA1C,CAAP;AACH;;AACD,UAAMiB,UAAU,GAAGnB,MAAM,CAACE,SAAP,CAAiBY,QAAjB,CAA0BK,UAA7C;AACA,UAAMJ,MAAM,GAAGf,MAAM,CAACE,SAAP,CAAiBY,QAAjB,CAA0BC,MAAzC;AACA,WAAO/B,WAAW,CAACuB,aAAZ,CAA0B,IAAItB,iBAAJ,CAAsB,IAAII,KAAJ,CAAU8B,UAAV,EAAsBJ,MAAtB,EAA8BI,UAA9B,EAA0CJ,MAA1C,CAAtB,EAAyE,CAAzE,EAA4E,IAAI3B,QAAJ,CAAa+B,UAAb,EAAyBJ,MAAzB,CAA5E,EAA8G,CAA9G,CAA1B,CAAP;AACH;;AACY,SAANsD,MAAM,CAAC7E,SAAD,EAAYQ,MAAZ,EAAoBW,eAApB,EAAqCsC,SAArC,EAAgDC,aAAhD,EAA+D;AACxE,UAAMpC,QAAQ,GAAGtB,SAAS,CAACc,KAAV,CAAgB6C,gBAAhB,CAAiCF,SAAjC,CAAjB;AACA,UAAMG,YAAY,GAAIF,aAAa,GAC7B1D,SAAS,CAAC6D,oBAAV,CAA+BC,oBAA/B,CAAoD,IAAIlE,QAAJ,CAAa8D,aAAa,CAAC/B,UAA3B,EAAuC+B,aAAa,CAACnC,MAArD,CAApD,EAAkHD,QAAlH,CAD6B,GAE7BtB,SAAS,CAAC6D,oBAAV,CAA+BE,kCAA/B,CAAkEzC,QAAlE,CAFN;AAGA,WAAO9B,WAAW,CAACuB,aAAZ,CAA0BP,MAAM,CAACE,SAAP,CAAiB4D,IAAjB,CAAsBnD,eAAtB,EAAuCyC,YAAY,CAACjC,UAApD,EAAgEiC,YAAY,CAACrC,MAA7E,EAAqF,CAArF,CAA1B,CAAP;AACH;;AACgB,SAAVuD,UAAU,CAAC9E,SAAD,EAAYC,OAAZ,EAAqB8E,SAArB,EAAgC5D,eAAhC,EAAiD6D,KAAjD,EAAwDC,IAAxD,EAA8D;AAC3E,YAAQF,SAAR;AACI,WAAK;AAAE;AAAP;AAAmB;AACf,cAAIE,IAAI,KAAK;AAAE;AAAf,YAA+B;AAC3B;AACA,mBAAO,KAAKC,iBAAL,CAAuBlF,SAAvB,EAAkCC,OAAlC,EAA2CkB,eAA3C,CAAP;AACH,WAHD,MAIK;AACD;AACA,mBAAO,KAAKgE,SAAL,CAAenF,SAAf,EAA0BC,OAA1B,EAAmCkB,eAAnC,EAAoD6D,KAApD,CAAP;AACH;AACJ;;AACD,WAAK;AAAE;AAAP;AAAoB;AAChB,cAAIC,IAAI,KAAK;AAAE;AAAf,YAA+B;AAC3B;AACA,mBAAO,KAAKG,kBAAL,CAAwBpF,SAAxB,EAAmCC,OAAnC,EAA4CkB,eAA5C,CAAP;AACH,WAHD,MAIK;AACD;AACA,mBAAO,KAAKkE,UAAL,CAAgBrF,SAAhB,EAA2BC,OAA3B,EAAoCkB,eAApC,EAAqD6D,KAArD,CAAP;AACH;AACJ;;AACD,WAAK;AAAE;AAAP;AAAiB;AACb,cAAIC,IAAI,KAAK;AAAE;AAAf,YAAkC;AAC9B;AACA,mBAAO,KAAKK,kBAAL,CAAwBtF,SAAxB,EAAmCC,OAAnC,EAA4CkB,eAA5C,EAA6D6D,KAA7D,CAAP;AACH,WAHD,MAIK;AACD;AACA,mBAAO,KAAKO,mBAAL,CAAyBvF,SAAzB,EAAoCC,OAApC,EAA6CkB,eAA7C,EAA8D6D,KAA9D,CAAP;AACH;AACJ;;AACD,WAAK;AAAE;AAAP;AAAmB;AACf,cAAIC,IAAI,KAAK;AAAE;AAAf,YAAkC;AAC9B;AACA,mBAAO,KAAKO,oBAAL,CAA0BxF,SAA1B,EAAqCC,OAArC,EAA8CkB,eAA9C,EAA+D6D,KAA/D,CAAP;AACH,WAHD,MAIK;AACD;AACA,mBAAO,KAAKS,qBAAL,CAA2BzF,SAA3B,EAAsCC,OAAtC,EAA+CkB,eAA/C,EAAgE6D,KAAhE,CAAP;AACH;AACJ;;AACD,WAAK;AAAE;AAAP;AAA4B;AACxB,cAAIC,IAAI,KAAK;AAAE;AAAf,YAAkC;AAC9B,mBAAOhF,OAAO,CAACyF,GAAR,CAAYlF,MAAM,IAAIhB,WAAW,CAACuB,aAAZ,CAA0BrB,cAAc,CAACiG,mBAAf,CAAmC3F,SAAS,CAACa,YAA7C,EAA2Db,SAA3D,EAAsEQ,MAAM,CAACE,SAA7E,EAAwFS,eAAxF,CAA1B,CAAtB,CAAP;AACH,WAFD,MAGK;AACD,mBAAOlB,OAAO,CAACyF,GAAR,CAAYlF,MAAM,IAAIhB,WAAW,CAACmB,cAAZ,CAA2BjB,cAAc,CAACiG,mBAAf,CAAmC3F,SAAS,CAACa,YAA7C,EAA2Db,SAAS,CAACc,KAArE,EAA4EN,MAAM,CAACC,UAAnF,EAA+FU,eAA/F,CAA3B,CAAtB,CAAP;AACH;AACJ;;AACD,WAAK;AAAE;AAAP;AAA4B;AACxB,cAAI8D,IAAI,KAAK;AAAE;AAAf,YAAkC;AAC9B,mBAAOhF,OAAO,CAACyF,GAAR,CAAYlF,MAAM,IAAIhB,WAAW,CAACuB,aAAZ,CAA0BrB,cAAc,CAACkG,mBAAf,CAAmC5F,SAAS,CAACa,YAA7C,EAA2Db,SAA3D,EAAsEQ,MAAM,CAACE,SAA7E,EAAwFS,eAAxF,CAA1B,CAAtB,CAAP;AACH,WAFD,MAGK;AACD,mBAAOlB,OAAO,CAACyF,GAAR,CAAYlF,MAAM,IAAIhB,WAAW,CAACmB,cAAZ,CAA2BjB,cAAc,CAACkG,mBAAf,CAAmC5F,SAAS,CAACa,YAA7C,EAA2Db,SAAS,CAACc,KAArE,EAA4EN,MAAM,CAACC,UAAnF,EAA+FU,eAA/F,CAA3B,CAAtB,CAAP;AACH;AACJ;;AACD,WAAK;AAAE;AAAP;AAA+B;AAC3B;AACA,iBAAO,KAAK0E,oBAAL,CAA0B7F,SAA1B,EAAqCC,OAArC,EAA8CkB,eAA9C,CAAP;AACH;;AACD,WAAK;AAAE;AAAP;AAAqD;AACjD;AACA,iBAAO,KAAK2E,mCAAL,CAAyC9F,SAAzC,EAAoDC,OAApD,EAA6DkB,eAA7D,CAAP;AACH;;AACD,WAAK;AAAE;AAAP;AAAsC;AAClC;AACA,iBAAO,KAAK4E,uBAAL,CAA6B/F,SAA7B,EAAwCC,OAAxC,EAAiDkB,eAAjD,CAAP;AACH;;AACD,WAAK;AAAE;AAAP;AAA6B;AACzB;AACA,iBAAO,KAAK6E,oBAAL,CAA0BhG,SAA1B,EAAqCC,OAArC,EAA8CkB,eAA9C,CAAP;AACH;;AACD,WAAK;AAAG;AAAR;AAAqD;AACjD;AACA,iBAAO,KAAK8E,kCAAL,CAAwCjG,SAAxC,EAAmDC,OAAnD,EAA4DkB,eAA5D,CAAP;AACH;;AACD;AACI,eAAO,IAAP;AA9ER;AAgFH;;AACkB,SAAZ+E,YAAY,CAAClG,SAAD,EAAYC,OAAZ,EAAqB8E,SAArB,EAAgC5D,eAAhC,EAAiD6D,KAAjD,EAAwD;AACvE,UAAMmB,gBAAgB,GAAGnG,SAAS,CAACoG,6BAAV,EAAzB;AACA,UAAMC,iBAAiB,GAAGrG,SAAS,CAAC6D,oBAAV,CAA+ByC,4BAA/B,CAA4DH,gBAA5D,CAA1B;;AACA,YAAQpB,SAAR;AACI,WAAK;AAAG;AAAR;AAA2B;AACvB;AACA,gBAAMwB,eAAe,GAAG,KAAKC,uBAAL,CAA6BxG,SAAS,CAACc,KAAvC,EAA8CuF,iBAA9C,EAAiErB,KAAjE,CAAxB;;AACA,gBAAMyB,WAAW,GAAGzG,SAAS,CAACc,KAAV,CAAgBe,+BAAhB,CAAgD0E,eAAhD,CAApB;AACA,iBAAO,CAAC,KAAKG,oBAAL,CAA0B1G,SAA1B,EAAqCC,OAAO,CAAC,CAAD,CAA5C,EAAiDkB,eAAjD,EAAkEoF,eAAlE,EAAmFE,WAAnF,CAAD,CAAP;AACH;;AACD,WAAK;AAAG;AAAR;AAA8B;AAC1B;AACA,gBAAMF,eAAe,GAAG,KAAKI,sBAAL,CAA4B3G,SAAS,CAACc,KAAtC,EAA6CuF,iBAA7C,EAAgErB,KAAhE,CAAxB;;AACA,gBAAMyB,WAAW,GAAGzG,SAAS,CAACc,KAAV,CAAgBe,+BAAhB,CAAgD0E,eAAhD,CAApB;AACA,iBAAO,CAAC,KAAKG,oBAAL,CAA0B1G,SAA1B,EAAqCC,OAAO,CAAC,CAAD,CAA5C,EAAiDkB,eAAjD,EAAkEoF,eAAlE,EAAmFE,WAAnF,CAAD,CAAP;AACH;;AACD,WAAK;AAAG;AAAR;AAA8B;AAC1B;AACA,gBAAMF,eAAe,GAAGK,IAAI,CAACC,KAAL,CAAW,CAACR,iBAAiB,CAACvD,eAAlB,GAAoCuD,iBAAiB,CAACnD,aAAvD,IAAwE,CAAnF,CAAxB;AACA,gBAAMuD,WAAW,GAAGzG,SAAS,CAACc,KAAV,CAAgBe,+BAAhB,CAAgD0E,eAAhD,CAApB;AACA,iBAAO,CAAC,KAAKG,oBAAL,CAA0B1G,SAA1B,EAAqCC,OAAO,CAAC,CAAD,CAA5C,EAAiDkB,eAAjD,EAAkEoF,eAAlE,EAAmFE,WAAnF,CAAD,CAAP;AACH;;AACD,WAAK;AAAG;AAAR;AAAiC;AAC7B;AACA,gBAAMtG,MAAM,GAAG,EAAf;;AACA,eAAK,IAAIE,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGL,OAAO,CAACM,MAA9B,EAAsCF,CAAC,GAAGC,GAA1C,EAA+CD,CAAC,EAAhD,EAAoD;AAChD,kBAAMG,MAAM,GAAGP,OAAO,CAACI,CAAD,CAAtB;AACAF,YAAAA,MAAM,CAACE,CAAD,CAAN,GAAY,KAAKyG,+BAAL,CAAqC9G,SAArC,EAAgDQ,MAAhD,EAAwD2F,gBAAxD,EAA0EhF,eAA1E,CAAZ;AACH;;AACD,iBAAOhB,MAAP;AACH;;AACD;AACI,eAAO,IAAP;AA7BR;AA+BH;;AACqC,SAA/B2G,+BAA+B,CAAC9G,SAAD,EAAYQ,MAAZ,EAAoB2F,gBAApB,EAAsChF,eAAtC,EAAuD;AACzF,UAAM4F,cAAc,GAAGvG,MAAM,CAACE,SAAP,CAAiBY,QAAjB,CAA0BK,UAAjD;;AACA,QAAIwE,gBAAgB,CAACrD,eAAjB,IAAoCiE,cAApC,IAAsDA,cAAc,IAAIZ,gBAAgB,CAACjD,aAAjB,GAAiC,CAA7G,EAAgH;AAC5G;AACA,aAAO,IAAI1D,WAAJ,CAAgBgB,MAAM,CAACC,UAAvB,EAAmCD,MAAM,CAACE,SAA1C,CAAP;AACH,KAHD,MAIK;AACD,UAAIsG,iBAAJ;;AACA,UAAID,cAAc,GAAGZ,gBAAgB,CAACjD,aAAjB,GAAiC,CAAtD,EAAyD;AACrD8D,QAAAA,iBAAiB,GAAGb,gBAAgB,CAACjD,aAAjB,GAAiC,CAArD;AACH,OAFD,MAGK,IAAI6D,cAAc,GAAGZ,gBAAgB,CAACrD,eAAtC,EAAuD;AACxDkE,QAAAA,iBAAiB,GAAGb,gBAAgB,CAACrD,eAArC;AACH,OAFI,MAGA;AACDkE,QAAAA,iBAAiB,GAAGD,cAApB;AACH;;AACD,YAAMzF,QAAQ,GAAG5B,cAAc,CAACuH,QAAf,CAAwBjH,SAAS,CAACa,YAAlC,EAAgDb,SAAhD,EAA2D+G,cAA3D,EAA2EvG,MAAM,CAACE,SAAP,CAAiBY,QAAjB,CAA0BC,MAArG,EAA6Gf,MAAM,CAACE,SAAP,CAAiBwG,sBAA9H,EAAsJF,iBAAtJ,EAAyK,KAAzK,CAAjB;AACA,aAAOxH,WAAW,CAACuB,aAAZ,CAA0BP,MAAM,CAACE,SAAP,CAAiB4D,IAAjB,CAAsBnD,eAAtB,EAAuCG,QAAQ,CAACK,UAAhD,EAA4DL,QAAQ,CAACC,MAArE,EAA6ED,QAAQ,CAAC4F,sBAAtF,CAA1B,CAAP;AACH;AACJ;AACD;AACJ;AACA;;;AACkC,SAAvBV,uBAAuB,CAAC1F,KAAD,EAAQqG,KAAR,EAAeC,KAAf,EAAsB;AAChD,QAAItE,eAAe,GAAGqE,KAAK,CAACrE,eAA5B;;AACA,QAAIqE,KAAK,CAACE,WAAN,KAAsBvG,KAAK,CAACwG,gBAAN,CAAuBxE,eAAvB,CAA1B,EAAmE;AAC/D;AACAA,MAAAA,eAAe;AAClB;;AACD,WAAO8D,IAAI,CAACW,GAAL,CAASJ,KAAK,CAACjE,aAAf,EAA8BJ,eAAe,GAAGsE,KAAlB,GAA0B,CAAxD,CAAP;AACH;AACD;AACJ;AACA;;;AACiC,SAAtBT,sBAAsB,CAAC7F,KAAD,EAAQqG,KAAR,EAAeC,KAAf,EAAsB;AAC/C,QAAItE,eAAe,GAAGqE,KAAK,CAACrE,eAA5B;;AACA,QAAIqE,KAAK,CAACE,WAAN,KAAsBvG,KAAK,CAACwG,gBAAN,CAAuBxE,eAAvB,CAA1B,EAAmE;AAC/D;AACAA,MAAAA,eAAe;AAClB;;AACD,WAAO8D,IAAI,CAACY,GAAL,CAAS1E,eAAT,EAA0BqE,KAAK,CAACjE,aAAN,GAAsBkE,KAAtB,GAA8B,CAAxD,CAAP;AACH;;AACe,SAATjC,SAAS,CAACnF,SAAD,EAAYC,OAAZ,EAAqBkB,eAArB,EAAsCsG,WAAtC,EAAmD;AAC/D,WAAOxH,OAAO,CAACyF,GAAR,CAAYlF,MAAM,IAAIhB,WAAW,CAACuB,aAAZ,CAA0BrB,cAAc,CAACgI,QAAf,CAAwB1H,SAAS,CAACa,YAAlC,EAAgDb,SAAhD,EAA2DQ,MAAM,CAACE,SAAlE,EAA6ES,eAA7E,EAA8FsG,WAA9F,CAA1B,CAAtB,CAAP;AACH;;AACuB,SAAjBvC,iBAAiB,CAAClF,SAAD,EAAYC,OAAZ,EAAqBkB,eAArB,EAAsC;AAC1D,UAAMhB,MAAM,GAAG,EAAf;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGL,OAAO,CAACM,MAA9B,EAAsCF,CAAC,GAAGC,GAA1C,EAA+CD,CAAC,EAAhD,EAAoD;AAChD,YAAMG,MAAM,GAAGP,OAAO,CAACI,CAAD,CAAtB;AACA,YAAM0G,cAAc,GAAGvG,MAAM,CAACE,SAAP,CAAiBY,QAAjB,CAA0BK,UAAjD;AACA,YAAMgG,QAAQ,GAAGf,IAAI,CAACC,KAAL,CAAW7G,SAAS,CAAC4H,cAAV,CAAyBb,cAAzB,EAAyCxG,MAAzC,GAAkD,CAA7D,CAAjB;AACAJ,MAAAA,MAAM,CAACE,CAAD,CAAN,GAAYb,WAAW,CAACuB,aAAZ,CAA0BrB,cAAc,CAACgI,QAAf,CAAwB1H,SAAS,CAACa,YAAlC,EAAgDb,SAAhD,EAA2DQ,MAAM,CAACE,SAAlE,EAA6ES,eAA7E,EAA8FwG,QAA9F,CAA1B,CAAZ;AACH;;AACD,WAAOxH,MAAP;AACH;;AACgB,SAAVkF,UAAU,CAACrF,SAAD,EAAYC,OAAZ,EAAqBkB,eAArB,EAAsCsG,WAAtC,EAAmD;AAChE,WAAOxH,OAAO,CAACyF,GAAR,CAAYlF,MAAM,IAAIhB,WAAW,CAACuB,aAAZ,CAA0BrB,cAAc,CAACmI,SAAf,CAAyB7H,SAAS,CAACa,YAAnC,EAAiDb,SAAjD,EAA4DQ,MAAM,CAACE,SAAnE,EAA8ES,eAA9E,EAA+FsG,WAA/F,CAA1B,CAAtB,CAAP;AACH;;AACwB,SAAlBrC,kBAAkB,CAACpF,SAAD,EAAYC,OAAZ,EAAqBkB,eAArB,EAAsC;AAC3D,UAAMhB,MAAM,GAAG,EAAf;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGL,OAAO,CAACM,MAA9B,EAAsCF,CAAC,GAAGC,GAA1C,EAA+CD,CAAC,EAAhD,EAAoD;AAChD,YAAMG,MAAM,GAAGP,OAAO,CAACI,CAAD,CAAtB;AACA,YAAM0G,cAAc,GAAGvG,MAAM,CAACE,SAAP,CAAiBY,QAAjB,CAA0BK,UAAjD;AACA,YAAMgG,QAAQ,GAAGf,IAAI,CAACC,KAAL,CAAW7G,SAAS,CAAC4H,cAAV,CAAyBb,cAAzB,EAAyCxG,MAAzC,GAAkD,CAA7D,CAAjB;AACAJ,MAAAA,MAAM,CAACE,CAAD,CAAN,GAAYb,WAAW,CAACuB,aAAZ,CAA0BrB,cAAc,CAACmI,SAAf,CAAyB7H,SAAS,CAACa,YAAnC,EAAiDb,SAAjD,EAA4DQ,MAAM,CAACE,SAAnE,EAA8ES,eAA9E,EAA+FwG,QAA/F,CAA1B,CAAZ;AACH;;AACD,WAAOxH,MAAP;AACH;;AAC0B,SAApBqF,oBAAoB,CAACxF,SAAD,EAAYC,OAAZ,EAAqBkB,eAArB,EAAsC2G,UAAtC,EAAkD;AACzE,UAAM3H,MAAM,GAAG,EAAf;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGL,OAAO,CAACM,MAA9B,EAAsCF,CAAC,GAAGC,GAA1C,EAA+CD,CAAC,EAAhD,EAAoD;AAChD,YAAMG,MAAM,GAAGP,OAAO,CAACI,CAAD,CAAtB;AACAF,MAAAA,MAAM,CAACE,CAAD,CAAN,GAAYb,WAAW,CAACuB,aAAZ,CAA0BrB,cAAc,CAACqI,QAAf,CAAwB/H,SAAS,CAACa,YAAlC,EAAgDb,SAAhD,EAA2DQ,MAAM,CAACE,SAAlE,EAA6ES,eAA7E,EAA8F2G,UAA9F,CAA1B,CAAZ;AACH;;AACD,WAAO3H,MAAP;AACH;;AAC2B,SAArBsF,qBAAqB,CAACzF,SAAD,EAAYC,OAAZ,EAAqBkB,eAArB,EAAsC2G,UAAtC,EAAkD;AAC1E,UAAM3H,MAAM,GAAG,EAAf;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGL,OAAO,CAACM,MAA9B,EAAsCF,CAAC,GAAGC,GAA1C,EAA+CD,CAAC,EAAhD,EAAoD;AAChD,YAAMG,MAAM,GAAGP,OAAO,CAACI,CAAD,CAAtB;AACAF,MAAAA,MAAM,CAACE,CAAD,CAAN,GAAYb,WAAW,CAACmB,cAAZ,CAA2BjB,cAAc,CAACqI,QAAf,CAAwB/H,SAAS,CAACa,YAAlC,EAAgDb,SAAS,CAACc,KAA1D,EAAiEN,MAAM,CAACC,UAAxE,EAAoFU,eAApF,EAAqG2G,UAArG,CAA3B,CAAZ;AACH;;AACD,WAAO3H,MAAP;AACH;;AACwB,SAAlBmF,kBAAkB,CAACtF,SAAD,EAAYC,OAAZ,EAAqBkB,eAArB,EAAsC2G,UAAtC,EAAkD;AACvE,UAAM3H,MAAM,GAAG,EAAf;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGL,OAAO,CAACM,MAA9B,EAAsCF,CAAC,GAAGC,GAA1C,EAA+CD,CAAC,EAAhD,EAAoD;AAChD,YAAMG,MAAM,GAAGP,OAAO,CAACI,CAAD,CAAtB;AACAF,MAAAA,MAAM,CAACE,CAAD,CAAN,GAAYb,WAAW,CAACuB,aAAZ,CAA0BrB,cAAc,CAACsI,MAAf,CAAsBhI,SAAS,CAACa,YAAhC,EAA8Cb,SAA9C,EAAyDQ,MAAM,CAACE,SAAhE,EAA2ES,eAA3E,EAA4F2G,UAA5F,CAA1B,CAAZ;AACH;;AACD,WAAO3H,MAAP;AACH;;AACyB,SAAnBoF,mBAAmB,CAACvF,SAAD,EAAYC,OAAZ,EAAqBkB,eAArB,EAAsC2G,UAAtC,EAAkD;AACxE,UAAM3H,MAAM,GAAG,EAAf;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGL,OAAO,CAACM,MAA9B,EAAsCF,CAAC,GAAGC,GAA1C,EAA+CD,CAAC,EAAhD,EAAoD;AAChD,YAAMG,MAAM,GAAGP,OAAO,CAACI,CAAD,CAAtB;AACAF,MAAAA,MAAM,CAACE,CAAD,CAAN,GAAYb,WAAW,CAACmB,cAAZ,CAA2BjB,cAAc,CAACsI,MAAf,CAAsBhI,SAAS,CAACa,YAAhC,EAA8Cb,SAAS,CAACc,KAAxD,EAA+DN,MAAM,CAACC,UAAtE,EAAkFU,eAAlF,EAAmG2G,UAAnG,CAA3B,CAAZ;AACH;;AACD,WAAO3H,MAAP;AACH;;AACyB,SAAnB8H,mBAAmB,CAACjI,SAAD,EAAYQ,MAAZ,EAAoBW,eAApB,EAAqC+G,gBAArC,EAAuDC,YAAvD,EAAqE;AAC3F,WAAO3I,WAAW,CAACuB,aAAZ,CAA0BP,MAAM,CAACE,SAAP,CAAiB4D,IAAjB,CAAsBnD,eAAtB,EAAuC+G,gBAAvC,EAAyDC,YAAzD,EAAuE,CAAvE,CAA1B,CAAP;AACH;;AAC0B,SAApBzB,oBAAoB,CAAC1G,SAAD,EAAYQ,MAAZ,EAAoBW,eAApB,EAAqCiH,iBAArC,EAAwDC,aAAxD,EAAuE;AAC9F,WAAO7I,WAAW,CAACmB,cAAZ,CAA2BH,MAAM,CAACC,UAAP,CAAkB6D,IAAlB,CAAuBnD,eAAvB,EAAwCiH,iBAAxC,EAA2DC,aAA3D,EAA0E,CAA1E,CAA3B,CAAP;AACH;;AAC0B,SAApBxC,oBAAoB,CAAC7F,SAAD,EAAYC,OAAZ,EAAqBkB,eAArB,EAAsC;AAC7D,UAAMhB,MAAM,GAAG,EAAf;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGL,OAAO,CAACM,MAA9B,EAAsCF,CAAC,GAAGC,GAA1C,EAA+CD,CAAC,EAAhD,EAAoD;AAChD,YAAMG,MAAM,GAAGP,OAAO,CAACI,CAAD,CAAtB;AACA,YAAM0G,cAAc,GAAGvG,MAAM,CAACE,SAAP,CAAiBY,QAAjB,CAA0BK,UAAjD;AACA,YAAM2G,UAAU,GAAGtI,SAAS,CAACsH,gBAAV,CAA2BP,cAA3B,CAAnB;AACA5G,MAAAA,MAAM,CAACE,CAAD,CAAN,GAAY,KAAK4H,mBAAL,CAAyBjI,SAAzB,EAAoCQ,MAApC,EAA4CW,eAA5C,EAA6D4F,cAA7D,EAA6EuB,UAA7E,CAAZ;AACH;;AACD,WAAOnI,MAAP;AACH;;AACyC,SAAnC2F,mCAAmC,CAAC9F,SAAD,EAAYC,OAAZ,EAAqBkB,eAArB,EAAsC;AAC5E,UAAMhB,MAAM,GAAG,EAAf;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGL,OAAO,CAACM,MAA9B,EAAsCF,CAAC,GAAGC,GAA1C,EAA+CD,CAAC,EAAhD,EAAoD;AAChD,YAAMG,MAAM,GAAGP,OAAO,CAACI,CAAD,CAAtB;AACA,YAAM0G,cAAc,GAAGvG,MAAM,CAACE,SAAP,CAAiBY,QAAjB,CAA0BK,UAAjD;AACA,YAAM2G,UAAU,GAAGtI,SAAS,CAAC6B,+BAAV,CAA0CkF,cAA1C,CAAnB;AACA5G,MAAAA,MAAM,CAACE,CAAD,CAAN,GAAY,KAAK4H,mBAAL,CAAyBjI,SAAzB,EAAoCQ,MAApC,EAA4CW,eAA5C,EAA6D4F,cAA7D,EAA6EuB,UAA7E,CAAZ;AACH;;AACD,WAAOnI,MAAP;AACH;;AAC6B,SAAvB4F,uBAAuB,CAAC/F,SAAD,EAAYC,OAAZ,EAAqBkB,eAArB,EAAsC;AAChE,UAAMhB,MAAM,GAAG,EAAf;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGL,OAAO,CAACM,MAA9B,EAAsCF,CAAC,GAAGC,GAA1C,EAA+CD,CAAC,EAAhD,EAAoD;AAChD,YAAMG,MAAM,GAAGP,OAAO,CAACI,CAAD,CAAtB;AACA,YAAM0G,cAAc,GAAGvG,MAAM,CAACE,SAAP,CAAiBY,QAAjB,CAA0BK,UAAjD;AACA,YAAM2G,UAAU,GAAG1B,IAAI,CAACC,KAAL,CAAW,CAAC7G,SAAS,CAACsC,gBAAV,CAA2ByE,cAA3B,IAA6C/G,SAAS,CAACsH,gBAAV,CAA2BP,cAA3B,CAA9C,IAA4F,CAAvG,CAAnB;AACA5G,MAAAA,MAAM,CAACE,CAAD,CAAN,GAAY,KAAK4H,mBAAL,CAAyBjI,SAAzB,EAAoCQ,MAApC,EAA4CW,eAA5C,EAA6D4F,cAA7D,EAA6EuB,UAA7E,CAAZ;AACH;;AACD,WAAOnI,MAAP;AACH;;AAC0B,SAApB6F,oBAAoB,CAAChG,SAAD,EAAYC,OAAZ,EAAqBkB,eAArB,EAAsC;AAC7D,UAAMhB,MAAM,GAAG,EAAf;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGL,OAAO,CAACM,MAA9B,EAAsCF,CAAC,GAAGC,GAA1C,EAA+CD,CAAC,EAAhD,EAAoD;AAChD,YAAMG,MAAM,GAAGP,OAAO,CAACI,CAAD,CAAtB;AACA,YAAM0G,cAAc,GAAGvG,MAAM,CAACE,SAAP,CAAiBY,QAAjB,CAA0BK,UAAjD;AACA,YAAM2G,UAAU,GAAGtI,SAAS,CAACsC,gBAAV,CAA2ByE,cAA3B,CAAnB;AACA5G,MAAAA,MAAM,CAACE,CAAD,CAAN,GAAY,KAAK4H,mBAAL,CAAyBjI,SAAzB,EAAoCQ,MAApC,EAA4CW,eAA5C,EAA6D4F,cAA7D,EAA6EuB,UAA7E,CAAZ;AACH;;AACD,WAAOnI,MAAP;AACH;;AACwC,SAAlC8F,kCAAkC,CAACjG,SAAD,EAAYC,OAAZ,EAAqBkB,eAArB,EAAsC;AAC3E,UAAMhB,MAAM,GAAG,EAAf;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGL,OAAO,CAACM,MAA9B,EAAsCF,CAAC,GAAGC,GAA1C,EAA+CD,CAAC,EAAhD,EAAoD;AAChD,YAAMG,MAAM,GAAGP,OAAO,CAACI,CAAD,CAAtB;AACA,YAAM0G,cAAc,GAAGvG,MAAM,CAACE,SAAP,CAAiBY,QAAjB,CAA0BK,UAAjD;AACA,YAAM2G,UAAU,GAAGtI,SAAS,CAACuI,8BAAV,CAAyCxB,cAAzC,CAAnB;AACA5G,MAAAA,MAAM,CAACE,CAAD,CAAN,GAAY,KAAK4H,mBAAL,CAAyBjI,SAAzB,EAAoCQ,MAApC,EAA4CW,eAA5C,EAA6D4F,cAA7D,EAA6EuB,UAA7E,CAAZ;AACH;;AACD,WAAOnI,MAAP;AACH;;AAvc2B;AAychC,OAAO,IAAIqI,UAAJ;;AACP,CAAC,UAAUA,UAAV,EAAsB;AACnB,QAAMC,gBAAgB,GAAG,UAAUC,GAAV,EAAe;AACpC,QAAI,CAACnJ,KAAK,CAACoJ,QAAN,CAAeD,GAAf,CAAL,EAA0B;AACtB,aAAO,KAAP;AACH;;AACD,UAAME,aAAa,GAAGF,GAAtB;;AACA,QAAI,CAACnJ,KAAK,CAACsJ,QAAN,CAAeD,aAAa,CAACE,EAA7B,CAAL,EAAuC;AACnC,aAAO,KAAP;AACH;;AACD,QAAI,CAACvJ,KAAK,CAACwJ,WAAN,CAAkBH,aAAa,CAACI,MAAhC,CAAD,IAA4C,CAACzJ,KAAK,CAAC0J,SAAN,CAAgBL,aAAa,CAACI,MAA9B,CAAjD,EAAwF;AACpF,aAAO,KAAP;AACH;;AACD,QAAI,CAACzJ,KAAK,CAACwJ,WAAN,CAAkBH,aAAa,CAACM,EAAhC,CAAD,IAAwC,CAAC3J,KAAK,CAACsJ,QAAN,CAAeD,aAAa,CAACM,EAA7B,CAA7C,EAA+E;AAC3E,aAAO,KAAP;AACH;;AACD,QAAI,CAAC3J,KAAK,CAACwJ,WAAN,CAAkBH,aAAa,CAAC5D,KAAhC,CAAD,IAA2C,CAACzF,KAAK,CAAC4J,QAAN,CAAeP,aAAa,CAAC5D,KAA7B,CAAhD,EAAqF;AACjF,aAAO,KAAP;AACH;;AACD,WAAO,IAAP;AACH,GAlBD;;AAmBAwD,EAAAA,UAAU,CAACY,WAAX,GAAyB;AACrBA,IAAAA,WAAW,EAAE,+CADQ;AAErBC,IAAAA,IAAI,EAAE,CACF;AACIC,MAAAA,IAAI,EAAE,6BADV;AAEIF,MAAAA,WAAW,EAAG;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAhBY;AAiBIG,MAAAA,UAAU,EAAEd,gBAjBhB;AAkBIe,MAAAA,MAAM,EAAE;AACJ,gBAAQ,QADJ;AAEJ,oBAAY,CAAC,IAAD,CAFR;AAGJ,sBAAc;AACV,gBAAM;AACF,oBAAQ,QADN;AAEF,oBAAQ,CAAC,MAAD,EAAS,OAAT,EAAkB,IAAlB,EAAwB,MAAxB,EAAgC,eAAhC,EAAiD,eAAjD,EAAkE,kBAAlE,EAAsF,gBAAtF,EAAwG,yBAAxG,EAAmI,wCAAnI,EAA6K,uCAA7K,EAAsN,aAAtN,EAAqO,gBAArO,EAAuP,gBAAvP,EAAyQ,mBAAzQ;AAFN,WADI;AAKV,gBAAM;AACF,oBAAQ,QADN;AAEF,oBAAQ,CAAC,MAAD,EAAS,aAAT,EAAwB,WAAxB,EAAqC,UAArC;AAFN,WALI;AASV,mBAAS;AACL,oBAAQ,QADH;AAEL,uBAAW;AAFN,WATC;AAaV,oBAAU;AACN,oBAAQ,SADF;AAEN,uBAAW;AAFL;AAbA;AAHV;AAlBZ,KADE;AAFe,GAAzB;AA8CA;AACJ;AACA;;AACIhB,EAAAA,UAAU,CAACiB,YAAX,GAA0B;AACtBC,IAAAA,IAAI,EAAE,MADgB;AAEtBC,IAAAA,KAAK,EAAE,OAFe;AAGtBC,IAAAA,EAAE,EAAE,IAHkB;AAItBC,IAAAA,IAAI,EAAE,MAJgB;AAKtBC,IAAAA,aAAa,EAAE,eALO;AAMtBC,IAAAA,aAAa,EAAE,eANO;AAOtBC,IAAAA,gBAAgB,EAAE,kBAPI;AAQtBC,IAAAA,sCAAsC,EAAE,wCARlB;AAStBC,IAAAA,uBAAuB,EAAE,yBATH;AAUtBC,IAAAA,cAAc,EAAE,gBAVM;AAWtBC,IAAAA,qCAAqC,EAAE,uCAXjB;AAYtBC,IAAAA,WAAW,EAAE,aAZS;AAatBC,IAAAA,cAAc,EAAE,gBAbM;AActBC,IAAAA,cAAc,EAAE,gBAdM;AAetBC,IAAAA,iBAAiB,EAAE;AAfG,GAA1B;AAiBA;AACJ;AACA;;AACIhC,EAAAA,UAAU,CAACiC,OAAX,GAAqB;AACjBC,IAAAA,IAAI,EAAE,MADW;AAEjBC,IAAAA,WAAW,EAAE,aAFI;AAGjBC,IAAAA,SAAS,EAAE,WAHM;AAIjBC,IAAAA,QAAQ,EAAE;AAJO,GAArB;;AAMA,WAASC,KAAT,CAAezB,IAAf,EAAqB;AACjB,QAAI,CAACA,IAAI,CAACP,EAAV,EAAc;AACV;AACA,aAAO,IAAP;AACH;;AACD,QAAI/D,SAAJ;;AACA,YAAQsE,IAAI,CAACP,EAAb;AACI,WAAKN,UAAU,CAACiB,YAAX,CAAwBC,IAA7B;AACI3E,QAAAA,SAAS,GAAG;AAAE;AAAd;AACA;;AACJ,WAAKyD,UAAU,CAACiB,YAAX,CAAwBE,KAA7B;AACI5E,QAAAA,SAAS,GAAG;AAAE;AAAd;AACA;;AACJ,WAAKyD,UAAU,CAACiB,YAAX,CAAwBG,EAA7B;AACI7E,QAAAA,SAAS,GAAG;AAAE;AAAd;AACA;;AACJ,WAAKyD,UAAU,CAACiB,YAAX,CAAwBI,IAA7B;AACI9E,QAAAA,SAAS,GAAG;AAAE;AAAd;AACA;;AACJ,WAAKyD,UAAU,CAACiB,YAAX,CAAwBK,aAA7B;AACI/E,QAAAA,SAAS,GAAG;AAAE;AAAd;AACA;;AACJ,WAAKyD,UAAU,CAACiB,YAAX,CAAwBM,aAA7B;AACIhF,QAAAA,SAAS,GAAG;AAAE;AAAd;AACA;;AACJ,WAAKyD,UAAU,CAACiB,YAAX,CAAwBO,gBAA7B;AACIjF,QAAAA,SAAS,GAAG;AAAE;AAAd;AACA;;AACJ,WAAKyD,UAAU,CAACiB,YAAX,CAAwBQ,sCAA7B;AACIlF,QAAAA,SAAS,GAAG;AAAE;AAAd;AACA;;AACJ,WAAKyD,UAAU,CAACiB,YAAX,CAAwBS,uBAA7B;AACInF,QAAAA,SAAS,GAAG;AAAE;AAAd;AACA;;AACJ,WAAKyD,UAAU,CAACiB,YAAX,CAAwBU,cAA7B;AACIpF,QAAAA,SAAS,GAAG;AAAE;AAAd;AACA;;AACJ,WAAKyD,UAAU,CAACiB,YAAX,CAAwBW,qCAA7B;AACIrF,QAAAA,SAAS,GAAG;AAAG;AAAf;AACA;;AACJ,WAAKyD,UAAU,CAACiB,YAAX,CAAwBY,WAA7B;AACItF,QAAAA,SAAS,GAAG;AAAG;AAAf;AACA;;AACJ,WAAKyD,UAAU,CAACiB,YAAX,CAAwBc,cAA7B;AACIxF,QAAAA,SAAS,GAAG;AAAG;AAAf;AACA;;AACJ,WAAKyD,UAAU,CAACiB,YAAX,CAAwBa,cAA7B;AACIvF,QAAAA,SAAS,GAAG;AAAG;AAAf;AACA;;AACJ,WAAKyD,UAAU,CAACiB,YAAX,CAAwBe,iBAA7B;AACIzF,QAAAA,SAAS,GAAG;AAAG;AAAf;AACA;;AACJ;AACI;AACA,eAAO,IAAP;AAhDR;;AAkDA,QAAIE,IAAI,GAAG;AAAE;AAAb;;AACA,YAAQoE,IAAI,CAACH,EAAb;AACI,WAAKV,UAAU,CAACiC,OAAX,CAAmBC,IAAxB;AACIzF,QAAAA,IAAI,GAAG;AAAE;AAAT;AACA;;AACJ,WAAKuD,UAAU,CAACiC,OAAX,CAAmBE,WAAxB;AACI1F,QAAAA,IAAI,GAAG;AAAE;AAAT;AACA;;AACJ,WAAKuD,UAAU,CAACiC,OAAX,CAAmBG,SAAxB;AACI3F,QAAAA,IAAI,GAAG;AAAE;AAAT;AACA;;AACJ,WAAKuD,UAAU,CAACiC,OAAX,CAAmBI,QAAxB;AACI5F,QAAAA,IAAI,GAAG;AAAE;AAAT;AACA;AAZR;;AAcA,WAAO;AACHF,MAAAA,SAAS,EAAEA,SADR;AAEHE,MAAAA,IAAI,EAAEA,IAFH;AAGH+D,MAAAA,MAAM,EAAG,CAAC,CAACK,IAAI,CAACL,MAHb;AAIHhE,MAAAA,KAAK,EAAGqE,IAAI,CAACrE,KAAL,IAAc;AAJnB,KAAP;AAMH;;AACDwD,EAAAA,UAAU,CAACsC,KAAX,GAAmBA,KAAnB;AACH,CA9KD,EA8KGtC,UAAU,KAAKA,UAAU,GAAG,EAAlB,CA9Kb","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as types from '../../../base/common/types.js';\nimport { CursorState, SingleCursorState } from './cursorCommon.js';\nimport { MoveOperations } from './cursorMoveOperations.js';\nimport { WordOperations } from './cursorWordOperations.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nexport class CursorMoveCommands {\n    static addCursorDown(viewModel, cursors, useLogicalLine) {\n        const result = [];\n        let resultLen = 0;\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            result[resultLen++] = new CursorState(cursor.modelState, cursor.viewState);\n            if (useLogicalLine) {\n                result[resultLen++] = CursorState.fromModelState(MoveOperations.translateDown(viewModel.cursorConfig, viewModel.model, cursor.modelState));\n            }\n            else {\n                result[resultLen++] = CursorState.fromViewState(MoveOperations.translateDown(viewModel.cursorConfig, viewModel, cursor.viewState));\n            }\n        }\n        return result;\n    }\n    static addCursorUp(viewModel, cursors, useLogicalLine) {\n        const result = [];\n        let resultLen = 0;\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            result[resultLen++] = new CursorState(cursor.modelState, cursor.viewState);\n            if (useLogicalLine) {\n                result[resultLen++] = CursorState.fromModelState(MoveOperations.translateUp(viewModel.cursorConfig, viewModel.model, cursor.modelState));\n            }\n            else {\n                result[resultLen++] = CursorState.fromViewState(MoveOperations.translateUp(viewModel.cursorConfig, viewModel, cursor.viewState));\n            }\n        }\n        return result;\n    }\n    static moveToBeginningOfLine(viewModel, cursors, inSelectionMode) {\n        let result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            result[i] = this._moveToLineStart(viewModel, cursor, inSelectionMode);\n        }\n        return result;\n    }\n    static _moveToLineStart(viewModel, cursor, inSelectionMode) {\n        const currentViewStateColumn = cursor.viewState.position.column;\n        const currentModelStateColumn = cursor.modelState.position.column;\n        const isFirstLineOfWrappedLine = currentViewStateColumn === currentModelStateColumn;\n        const currentViewStatelineNumber = cursor.viewState.position.lineNumber;\n        const firstNonBlankColumn = viewModel.getLineFirstNonWhitespaceColumn(currentViewStatelineNumber);\n        const isBeginningOfViewLine = currentViewStateColumn === firstNonBlankColumn;\n        if (!isFirstLineOfWrappedLine && !isBeginningOfViewLine) {\n            return this._moveToLineStartByView(viewModel, cursor, inSelectionMode);\n        }\n        else {\n            return this._moveToLineStartByModel(viewModel, cursor, inSelectionMode);\n        }\n    }\n    static _moveToLineStartByView(viewModel, cursor, inSelectionMode) {\n        return CursorState.fromViewState(MoveOperations.moveToBeginningOfLine(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode));\n    }\n    static _moveToLineStartByModel(viewModel, cursor, inSelectionMode) {\n        return CursorState.fromModelState(MoveOperations.moveToBeginningOfLine(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode));\n    }\n    static moveToEndOfLine(viewModel, cursors, inSelectionMode, sticky) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            result[i] = this._moveToLineEnd(viewModel, cursor, inSelectionMode, sticky);\n        }\n        return result;\n    }\n    static _moveToLineEnd(viewModel, cursor, inSelectionMode, sticky) {\n        const viewStatePosition = cursor.viewState.position;\n        const viewModelMaxColumn = viewModel.getLineMaxColumn(viewStatePosition.lineNumber);\n        const isEndOfViewLine = viewStatePosition.column === viewModelMaxColumn;\n        const modelStatePosition = cursor.modelState.position;\n        const modelMaxColumn = viewModel.model.getLineMaxColumn(modelStatePosition.lineNumber);\n        const isEndLineOfWrappedLine = viewModelMaxColumn - viewStatePosition.column === modelMaxColumn - modelStatePosition.column;\n        if (isEndOfViewLine || isEndLineOfWrappedLine) {\n            return this._moveToLineEndByModel(viewModel, cursor, inSelectionMode, sticky);\n        }\n        else {\n            return this._moveToLineEndByView(viewModel, cursor, inSelectionMode, sticky);\n        }\n    }\n    static _moveToLineEndByView(viewModel, cursor, inSelectionMode, sticky) {\n        return CursorState.fromViewState(MoveOperations.moveToEndOfLine(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, sticky));\n    }\n    static _moveToLineEndByModel(viewModel, cursor, inSelectionMode, sticky) {\n        return CursorState.fromModelState(MoveOperations.moveToEndOfLine(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode, sticky));\n    }\n    static expandLineSelection(viewModel, cursors) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            const startLineNumber = cursor.modelState.selection.startLineNumber;\n            const lineCount = viewModel.model.getLineCount();\n            let endLineNumber = cursor.modelState.selection.endLineNumber;\n            let endColumn;\n            if (endLineNumber === lineCount) {\n                endColumn = viewModel.model.getLineMaxColumn(lineCount);\n            }\n            else {\n                endLineNumber++;\n                endColumn = 1;\n            }\n            result[i] = CursorState.fromModelState(new SingleCursorState(new Range(startLineNumber, 1, startLineNumber, 1), 0, new Position(endLineNumber, endColumn), 0));\n        }\n        return result;\n    }\n    static moveToBeginningOfBuffer(viewModel, cursors, inSelectionMode) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            result[i] = CursorState.fromModelState(MoveOperations.moveToBeginningOfBuffer(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode));\n        }\n        return result;\n    }\n    static moveToEndOfBuffer(viewModel, cursors, inSelectionMode) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            result[i] = CursorState.fromModelState(MoveOperations.moveToEndOfBuffer(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode));\n        }\n        return result;\n    }\n    static selectAll(viewModel, cursor) {\n        const lineCount = viewModel.model.getLineCount();\n        const maxColumn = viewModel.model.getLineMaxColumn(lineCount);\n        return CursorState.fromModelState(new SingleCursorState(new Range(1, 1, 1, 1), 0, new Position(lineCount, maxColumn), 0));\n    }\n    static line(viewModel, cursor, inSelectionMode, _position, _viewPosition) {\n        const position = viewModel.model.validatePosition(_position);\n        const viewPosition = (_viewPosition\n            ? viewModel.coordinatesConverter.validateViewPosition(new Position(_viewPosition.lineNumber, _viewPosition.column), position)\n            : viewModel.coordinatesConverter.convertModelPositionToViewPosition(position));\n        if (!inSelectionMode || !cursor.modelState.hasSelection()) {\n            // Entering line selection for the first time\n            const lineCount = viewModel.model.getLineCount();\n            let selectToLineNumber = position.lineNumber + 1;\n            let selectToColumn = 1;\n            if (selectToLineNumber > lineCount) {\n                selectToLineNumber = lineCount;\n                selectToColumn = viewModel.model.getLineMaxColumn(selectToLineNumber);\n            }\n            return CursorState.fromModelState(new SingleCursorState(new Range(position.lineNumber, 1, selectToLineNumber, selectToColumn), 0, new Position(selectToLineNumber, selectToColumn), 0));\n        }\n        // Continuing line selection\n        const enteringLineNumber = cursor.modelState.selectionStart.getStartPosition().lineNumber;\n        if (position.lineNumber < enteringLineNumber) {\n            return CursorState.fromViewState(cursor.viewState.move(cursor.modelState.hasSelection(), viewPosition.lineNumber, 1, 0));\n        }\n        else if (position.lineNumber > enteringLineNumber) {\n            const lineCount = viewModel.getLineCount();\n            let selectToViewLineNumber = viewPosition.lineNumber + 1;\n            let selectToViewColumn = 1;\n            if (selectToViewLineNumber > lineCount) {\n                selectToViewLineNumber = lineCount;\n                selectToViewColumn = viewModel.getLineMaxColumn(selectToViewLineNumber);\n            }\n            return CursorState.fromViewState(cursor.viewState.move(cursor.modelState.hasSelection(), selectToViewLineNumber, selectToViewColumn, 0));\n        }\n        else {\n            const endPositionOfSelectionStart = cursor.modelState.selectionStart.getEndPosition();\n            return CursorState.fromModelState(cursor.modelState.move(cursor.modelState.hasSelection(), endPositionOfSelectionStart.lineNumber, endPositionOfSelectionStart.column, 0));\n        }\n    }\n    static word(viewModel, cursor, inSelectionMode, _position) {\n        const position = viewModel.model.validatePosition(_position);\n        return CursorState.fromModelState(WordOperations.word(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode, position));\n    }\n    static cancelSelection(viewModel, cursor) {\n        if (!cursor.modelState.hasSelection()) {\n            return new CursorState(cursor.modelState, cursor.viewState);\n        }\n        const lineNumber = cursor.viewState.position.lineNumber;\n        const column = cursor.viewState.position.column;\n        return CursorState.fromViewState(new SingleCursorState(new Range(lineNumber, column, lineNumber, column), 0, new Position(lineNumber, column), 0));\n    }\n    static moveTo(viewModel, cursor, inSelectionMode, _position, _viewPosition) {\n        const position = viewModel.model.validatePosition(_position);\n        const viewPosition = (_viewPosition\n            ? viewModel.coordinatesConverter.validateViewPosition(new Position(_viewPosition.lineNumber, _viewPosition.column), position)\n            : viewModel.coordinatesConverter.convertModelPositionToViewPosition(position));\n        return CursorState.fromViewState(cursor.viewState.move(inSelectionMode, viewPosition.lineNumber, viewPosition.column, 0));\n    }\n    static simpleMove(viewModel, cursors, direction, inSelectionMode, value, unit) {\n        switch (direction) {\n            case 0 /* Left */: {\n                if (unit === 4 /* HalfLine */) {\n                    // Move left by half the current line length\n                    return this._moveHalfLineLeft(viewModel, cursors, inSelectionMode);\n                }\n                else {\n                    // Move left by `moveParams.value` columns\n                    return this._moveLeft(viewModel, cursors, inSelectionMode, value);\n                }\n            }\n            case 1 /* Right */: {\n                if (unit === 4 /* HalfLine */) {\n                    // Move right by half the current line length\n                    return this._moveHalfLineRight(viewModel, cursors, inSelectionMode);\n                }\n                else {\n                    // Move right by `moveParams.value` columns\n                    return this._moveRight(viewModel, cursors, inSelectionMode, value);\n                }\n            }\n            case 2 /* Up */: {\n                if (unit === 2 /* WrappedLine */) {\n                    // Move up by view lines\n                    return this._moveUpByViewLines(viewModel, cursors, inSelectionMode, value);\n                }\n                else {\n                    // Move up by model lines\n                    return this._moveUpByModelLines(viewModel, cursors, inSelectionMode, value);\n                }\n            }\n            case 3 /* Down */: {\n                if (unit === 2 /* WrappedLine */) {\n                    // Move down by view lines\n                    return this._moveDownByViewLines(viewModel, cursors, inSelectionMode, value);\n                }\n                else {\n                    // Move down by model lines\n                    return this._moveDownByModelLines(viewModel, cursors, inSelectionMode, value);\n                }\n            }\n            case 4 /* PrevBlankLine */: {\n                if (unit === 2 /* WrappedLine */) {\n                    return cursors.map(cursor => CursorState.fromViewState(MoveOperations.moveToPrevBlankLine(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode)));\n                }\n                else {\n                    return cursors.map(cursor => CursorState.fromModelState(MoveOperations.moveToPrevBlankLine(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode)));\n                }\n            }\n            case 5 /* NextBlankLine */: {\n                if (unit === 2 /* WrappedLine */) {\n                    return cursors.map(cursor => CursorState.fromViewState(MoveOperations.moveToNextBlankLine(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode)));\n                }\n                else {\n                    return cursors.map(cursor => CursorState.fromModelState(MoveOperations.moveToNextBlankLine(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode)));\n                }\n            }\n            case 6 /* WrappedLineStart */: {\n                // Move to the beginning of the current view line\n                return this._moveToViewMinColumn(viewModel, cursors, inSelectionMode);\n            }\n            case 7 /* WrappedLineFirstNonWhitespaceCharacter */: {\n                // Move to the first non-whitespace column of the current view line\n                return this._moveToViewFirstNonWhitespaceColumn(viewModel, cursors, inSelectionMode);\n            }\n            case 8 /* WrappedLineColumnCenter */: {\n                // Move to the \"center\" of the current view line\n                return this._moveToViewCenterColumn(viewModel, cursors, inSelectionMode);\n            }\n            case 9 /* WrappedLineEnd */: {\n                // Move to the end of the current view line\n                return this._moveToViewMaxColumn(viewModel, cursors, inSelectionMode);\n            }\n            case 10 /* WrappedLineLastNonWhitespaceCharacter */: {\n                // Move to the last non-whitespace column of the current view line\n                return this._moveToViewLastNonWhitespaceColumn(viewModel, cursors, inSelectionMode);\n            }\n            default:\n                return null;\n        }\n    }\n    static viewportMove(viewModel, cursors, direction, inSelectionMode, value) {\n        const visibleViewRange = viewModel.getCompletelyVisibleViewRange();\n        const visibleModelRange = viewModel.coordinatesConverter.convertViewRangeToModelRange(visibleViewRange);\n        switch (direction) {\n            case 11 /* ViewPortTop */: {\n                // Move to the nth line start in the viewport (from the top)\n                const modelLineNumber = this._firstLineNumberInRange(viewModel.model, visibleModelRange, value);\n                const modelColumn = viewModel.model.getLineFirstNonWhitespaceColumn(modelLineNumber);\n                return [this._moveToModelPosition(viewModel, cursors[0], inSelectionMode, modelLineNumber, modelColumn)];\n            }\n            case 13 /* ViewPortBottom */: {\n                // Move to the nth line start in the viewport (from the bottom)\n                const modelLineNumber = this._lastLineNumberInRange(viewModel.model, visibleModelRange, value);\n                const modelColumn = viewModel.model.getLineFirstNonWhitespaceColumn(modelLineNumber);\n                return [this._moveToModelPosition(viewModel, cursors[0], inSelectionMode, modelLineNumber, modelColumn)];\n            }\n            case 12 /* ViewPortCenter */: {\n                // Move to the line start in the viewport center\n                const modelLineNumber = Math.round((visibleModelRange.startLineNumber + visibleModelRange.endLineNumber) / 2);\n                const modelColumn = viewModel.model.getLineFirstNonWhitespaceColumn(modelLineNumber);\n                return [this._moveToModelPosition(viewModel, cursors[0], inSelectionMode, modelLineNumber, modelColumn)];\n            }\n            case 14 /* ViewPortIfOutside */: {\n                // Move to a position inside the viewport\n                const result = [];\n                for (let i = 0, len = cursors.length; i < len; i++) {\n                    const cursor = cursors[i];\n                    result[i] = this.findPositionInViewportIfOutside(viewModel, cursor, visibleViewRange, inSelectionMode);\n                }\n                return result;\n            }\n            default:\n                return null;\n        }\n    }\n    static findPositionInViewportIfOutside(viewModel, cursor, visibleViewRange, inSelectionMode) {\n        const viewLineNumber = cursor.viewState.position.lineNumber;\n        if (visibleViewRange.startLineNumber <= viewLineNumber && viewLineNumber <= visibleViewRange.endLineNumber - 1) {\n            // Nothing to do, cursor is in viewport\n            return new CursorState(cursor.modelState, cursor.viewState);\n        }\n        else {\n            let newViewLineNumber;\n            if (viewLineNumber > visibleViewRange.endLineNumber - 1) {\n                newViewLineNumber = visibleViewRange.endLineNumber - 1;\n            }\n            else if (viewLineNumber < visibleViewRange.startLineNumber) {\n                newViewLineNumber = visibleViewRange.startLineNumber;\n            }\n            else {\n                newViewLineNumber = viewLineNumber;\n            }\n            const position = MoveOperations.vertical(viewModel.cursorConfig, viewModel, viewLineNumber, cursor.viewState.position.column, cursor.viewState.leftoverVisibleColumns, newViewLineNumber, false);\n            return CursorState.fromViewState(cursor.viewState.move(inSelectionMode, position.lineNumber, position.column, position.leftoverVisibleColumns));\n        }\n    }\n    /**\n     * Find the nth line start included in the range (from the start).\n     */\n    static _firstLineNumberInRange(model, range, count) {\n        let startLineNumber = range.startLineNumber;\n        if (range.startColumn !== model.getLineMinColumn(startLineNumber)) {\n            // Move on to the second line if the first line start is not included in the range\n            startLineNumber++;\n        }\n        return Math.min(range.endLineNumber, startLineNumber + count - 1);\n    }\n    /**\n     * Find the nth line start included in the range (from the end).\n     */\n    static _lastLineNumberInRange(model, range, count) {\n        let startLineNumber = range.startLineNumber;\n        if (range.startColumn !== model.getLineMinColumn(startLineNumber)) {\n            // Move on to the second line if the first line start is not included in the range\n            startLineNumber++;\n        }\n        return Math.max(startLineNumber, range.endLineNumber - count + 1);\n    }\n    static _moveLeft(viewModel, cursors, inSelectionMode, noOfColumns) {\n        return cursors.map(cursor => CursorState.fromViewState(MoveOperations.moveLeft(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, noOfColumns)));\n    }\n    static _moveHalfLineLeft(viewModel, cursors, inSelectionMode) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            const viewLineNumber = cursor.viewState.position.lineNumber;\n            const halfLine = Math.round(viewModel.getLineContent(viewLineNumber).length / 2);\n            result[i] = CursorState.fromViewState(MoveOperations.moveLeft(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, halfLine));\n        }\n        return result;\n    }\n    static _moveRight(viewModel, cursors, inSelectionMode, noOfColumns) {\n        return cursors.map(cursor => CursorState.fromViewState(MoveOperations.moveRight(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, noOfColumns)));\n    }\n    static _moveHalfLineRight(viewModel, cursors, inSelectionMode) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            const viewLineNumber = cursor.viewState.position.lineNumber;\n            const halfLine = Math.round(viewModel.getLineContent(viewLineNumber).length / 2);\n            result[i] = CursorState.fromViewState(MoveOperations.moveRight(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, halfLine));\n        }\n        return result;\n    }\n    static _moveDownByViewLines(viewModel, cursors, inSelectionMode, linesCount) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            result[i] = CursorState.fromViewState(MoveOperations.moveDown(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, linesCount));\n        }\n        return result;\n    }\n    static _moveDownByModelLines(viewModel, cursors, inSelectionMode, linesCount) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            result[i] = CursorState.fromModelState(MoveOperations.moveDown(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode, linesCount));\n        }\n        return result;\n    }\n    static _moveUpByViewLines(viewModel, cursors, inSelectionMode, linesCount) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            result[i] = CursorState.fromViewState(MoveOperations.moveUp(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, linesCount));\n        }\n        return result;\n    }\n    static _moveUpByModelLines(viewModel, cursors, inSelectionMode, linesCount) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            result[i] = CursorState.fromModelState(MoveOperations.moveUp(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode, linesCount));\n        }\n        return result;\n    }\n    static _moveToViewPosition(viewModel, cursor, inSelectionMode, toViewLineNumber, toViewColumn) {\n        return CursorState.fromViewState(cursor.viewState.move(inSelectionMode, toViewLineNumber, toViewColumn, 0));\n    }\n    static _moveToModelPosition(viewModel, cursor, inSelectionMode, toModelLineNumber, toModelColumn) {\n        return CursorState.fromModelState(cursor.modelState.move(inSelectionMode, toModelLineNumber, toModelColumn, 0));\n    }\n    static _moveToViewMinColumn(viewModel, cursors, inSelectionMode) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            const viewLineNumber = cursor.viewState.position.lineNumber;\n            const viewColumn = viewModel.getLineMinColumn(viewLineNumber);\n            result[i] = this._moveToViewPosition(viewModel, cursor, inSelectionMode, viewLineNumber, viewColumn);\n        }\n        return result;\n    }\n    static _moveToViewFirstNonWhitespaceColumn(viewModel, cursors, inSelectionMode) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            const viewLineNumber = cursor.viewState.position.lineNumber;\n            const viewColumn = viewModel.getLineFirstNonWhitespaceColumn(viewLineNumber);\n            result[i] = this._moveToViewPosition(viewModel, cursor, inSelectionMode, viewLineNumber, viewColumn);\n        }\n        return result;\n    }\n    static _moveToViewCenterColumn(viewModel, cursors, inSelectionMode) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            const viewLineNumber = cursor.viewState.position.lineNumber;\n            const viewColumn = Math.round((viewModel.getLineMaxColumn(viewLineNumber) + viewModel.getLineMinColumn(viewLineNumber)) / 2);\n            result[i] = this._moveToViewPosition(viewModel, cursor, inSelectionMode, viewLineNumber, viewColumn);\n        }\n        return result;\n    }\n    static _moveToViewMaxColumn(viewModel, cursors, inSelectionMode) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            const viewLineNumber = cursor.viewState.position.lineNumber;\n            const viewColumn = viewModel.getLineMaxColumn(viewLineNumber);\n            result[i] = this._moveToViewPosition(viewModel, cursor, inSelectionMode, viewLineNumber, viewColumn);\n        }\n        return result;\n    }\n    static _moveToViewLastNonWhitespaceColumn(viewModel, cursors, inSelectionMode) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            const viewLineNumber = cursor.viewState.position.lineNumber;\n            const viewColumn = viewModel.getLineLastNonWhitespaceColumn(viewLineNumber);\n            result[i] = this._moveToViewPosition(viewModel, cursor, inSelectionMode, viewLineNumber, viewColumn);\n        }\n        return result;\n    }\n}\nexport var CursorMove;\n(function (CursorMove) {\n    const isCursorMoveArgs = function (arg) {\n        if (!types.isObject(arg)) {\n            return false;\n        }\n        const cursorMoveArg = arg;\n        if (!types.isString(cursorMoveArg.to)) {\n            return false;\n        }\n        if (!types.isUndefined(cursorMoveArg.select) && !types.isBoolean(cursorMoveArg.select)) {\n            return false;\n        }\n        if (!types.isUndefined(cursorMoveArg.by) && !types.isString(cursorMoveArg.by)) {\n            return false;\n        }\n        if (!types.isUndefined(cursorMoveArg.value) && !types.isNumber(cursorMoveArg.value)) {\n            return false;\n        }\n        return true;\n    };\n    CursorMove.description = {\n        description: 'Move cursor to a logical position in the view',\n        args: [\n            {\n                name: 'Cursor move argument object',\n                description: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t* 'to': A mandatory logical position value providing where to move the cursor.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'left', 'right', 'up', 'down', 'prevBlankLine', 'nextBlankLine',\n\t\t\t\t\t\t'wrappedLineStart', 'wrappedLineEnd', 'wrappedLineColumnCenter'\n\t\t\t\t\t\t'wrappedLineFirstNonWhitespaceCharacter', 'wrappedLineLastNonWhitespaceCharacter'\n\t\t\t\t\t\t'viewPortTop', 'viewPortCenter', 'viewPortBottom', 'viewPortIfOutside'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t* 'by': Unit to move. Default is computed based on 'to' value.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'line', 'wrappedLine', 'character', 'halfLine'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t* 'value': Number of units to move. Default is '1'.\n\t\t\t\t\t* 'select': If 'true' makes the selection. Default is 'false'.\n\t\t\t\t`,\n                constraint: isCursorMoveArgs,\n                schema: {\n                    'type': 'object',\n                    'required': ['to'],\n                    'properties': {\n                        'to': {\n                            'type': 'string',\n                            'enum': ['left', 'right', 'up', 'down', 'prevBlankLine', 'nextBlankLine', 'wrappedLineStart', 'wrappedLineEnd', 'wrappedLineColumnCenter', 'wrappedLineFirstNonWhitespaceCharacter', 'wrappedLineLastNonWhitespaceCharacter', 'viewPortTop', 'viewPortCenter', 'viewPortBottom', 'viewPortIfOutside']\n                        },\n                        'by': {\n                            'type': 'string',\n                            'enum': ['line', 'wrappedLine', 'character', 'halfLine']\n                        },\n                        'value': {\n                            'type': 'number',\n                            'default': 1\n                        },\n                        'select': {\n                            'type': 'boolean',\n                            'default': false\n                        }\n                    }\n                }\n            }\n        ]\n    };\n    /**\n     * Positions in the view for cursor move command.\n     */\n    CursorMove.RawDirection = {\n        Left: 'left',\n        Right: 'right',\n        Up: 'up',\n        Down: 'down',\n        PrevBlankLine: 'prevBlankLine',\n        NextBlankLine: 'nextBlankLine',\n        WrappedLineStart: 'wrappedLineStart',\n        WrappedLineFirstNonWhitespaceCharacter: 'wrappedLineFirstNonWhitespaceCharacter',\n        WrappedLineColumnCenter: 'wrappedLineColumnCenter',\n        WrappedLineEnd: 'wrappedLineEnd',\n        WrappedLineLastNonWhitespaceCharacter: 'wrappedLineLastNonWhitespaceCharacter',\n        ViewPortTop: 'viewPortTop',\n        ViewPortCenter: 'viewPortCenter',\n        ViewPortBottom: 'viewPortBottom',\n        ViewPortIfOutside: 'viewPortIfOutside'\n    };\n    /**\n     * Units for Cursor move 'by' argument\n     */\n    CursorMove.RawUnit = {\n        Line: 'line',\n        WrappedLine: 'wrappedLine',\n        Character: 'character',\n        HalfLine: 'halfLine'\n    };\n    function parse(args) {\n        if (!args.to) {\n            // illegal arguments\n            return null;\n        }\n        let direction;\n        switch (args.to) {\n            case CursorMove.RawDirection.Left:\n                direction = 0 /* Left */;\n                break;\n            case CursorMove.RawDirection.Right:\n                direction = 1 /* Right */;\n                break;\n            case CursorMove.RawDirection.Up:\n                direction = 2 /* Up */;\n                break;\n            case CursorMove.RawDirection.Down:\n                direction = 3 /* Down */;\n                break;\n            case CursorMove.RawDirection.PrevBlankLine:\n                direction = 4 /* PrevBlankLine */;\n                break;\n            case CursorMove.RawDirection.NextBlankLine:\n                direction = 5 /* NextBlankLine */;\n                break;\n            case CursorMove.RawDirection.WrappedLineStart:\n                direction = 6 /* WrappedLineStart */;\n                break;\n            case CursorMove.RawDirection.WrappedLineFirstNonWhitespaceCharacter:\n                direction = 7 /* WrappedLineFirstNonWhitespaceCharacter */;\n                break;\n            case CursorMove.RawDirection.WrappedLineColumnCenter:\n                direction = 8 /* WrappedLineColumnCenter */;\n                break;\n            case CursorMove.RawDirection.WrappedLineEnd:\n                direction = 9 /* WrappedLineEnd */;\n                break;\n            case CursorMove.RawDirection.WrappedLineLastNonWhitespaceCharacter:\n                direction = 10 /* WrappedLineLastNonWhitespaceCharacter */;\n                break;\n            case CursorMove.RawDirection.ViewPortTop:\n                direction = 11 /* ViewPortTop */;\n                break;\n            case CursorMove.RawDirection.ViewPortBottom:\n                direction = 13 /* ViewPortBottom */;\n                break;\n            case CursorMove.RawDirection.ViewPortCenter:\n                direction = 12 /* ViewPortCenter */;\n                break;\n            case CursorMove.RawDirection.ViewPortIfOutside:\n                direction = 14 /* ViewPortIfOutside */;\n                break;\n            default:\n                // illegal arguments\n                return null;\n        }\n        let unit = 0 /* None */;\n        switch (args.by) {\n            case CursorMove.RawUnit.Line:\n                unit = 1 /* Line */;\n                break;\n            case CursorMove.RawUnit.WrappedLine:\n                unit = 2 /* WrappedLine */;\n                break;\n            case CursorMove.RawUnit.Character:\n                unit = 3 /* Character */;\n                break;\n            case CursorMove.RawUnit.HalfLine:\n                unit = 4 /* HalfLine */;\n                break;\n        }\n        return {\n            direction: direction,\n            unit: unit,\n            select: (!!args.select),\n            value: (args.value || 1)\n        };\n    }\n    CursorMove.parse = parse;\n})(CursorMove || (CursorMove = {}));\n"]},"metadata":{},"sourceType":"module"}