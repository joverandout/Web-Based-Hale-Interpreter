{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { SyncDescriptor } from './descriptors.js';\nconst _registry = [];\nexport function registerSingleton(id, ctorOrDescriptor, supportsDelayedInstantiation) {\n  if (!(ctorOrDescriptor instanceof SyncDescriptor)) {\n    ctorOrDescriptor = new SyncDescriptor(ctorOrDescriptor, [], supportsDelayedInstantiation);\n  }\n\n  _registry.push([id, ctorOrDescriptor]);\n}\nexport function getSingletonServiceDescriptors() {\n  return _registry;\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/platform/instantiation/common/extensions.js"],"names":["SyncDescriptor","_registry","registerSingleton","id","ctorOrDescriptor","supportsDelayedInstantiation","push","getSingletonServiceDescriptors"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,cAAT,QAA+B,kBAA/B;AACA,MAAMC,SAAS,GAAG,EAAlB;AACA,OAAO,SAASC,iBAAT,CAA2BC,EAA3B,EAA+BC,gBAA/B,EAAiDC,4BAAjD,EAA+E;AAClF,MAAI,EAAED,gBAAgB,YAAYJ,cAA9B,CAAJ,EAAmD;AAC/CI,IAAAA,gBAAgB,GAAG,IAAIJ,cAAJ,CAAmBI,gBAAnB,EAAqC,EAArC,EAAyCC,4BAAzC,CAAnB;AACH;;AACDJ,EAAAA,SAAS,CAACK,IAAV,CAAe,CAACH,EAAD,EAAKC,gBAAL,CAAf;AACH;AACD,OAAO,SAASG,8BAAT,GAA0C;AAC7C,SAAON,SAAP;AACH","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { SyncDescriptor } from './descriptors.js';\nconst _registry = [];\nexport function registerSingleton(id, ctorOrDescriptor, supportsDelayedInstantiation) {\n    if (!(ctorOrDescriptor instanceof SyncDescriptor)) {\n        ctorOrDescriptor = new SyncDescriptor(ctorOrDescriptor, [], supportsDelayedInstantiation);\n    }\n    _registry.push([id, ctorOrDescriptor]);\n}\nexport function getSingletonServiceDescriptors() {\n    return _registry;\n}\n"]},"metadata":{},"sourceType":"module"}