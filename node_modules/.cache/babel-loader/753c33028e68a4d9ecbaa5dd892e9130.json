{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n// NOTE: VSCode's copy of nodejs path library to be usable in common (non-node) namespace\n// Copied from: https://github.com/nodejs/node/blob/v14.16.0/lib/path.js\n\n/**\n * Copyright Joyent, Inc. and other Node contributors.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to permit\n * persons to whom the Software is furnished to do so, subject to the\n * following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n * NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n * USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\nimport * as process from './process.js';\nconst CHAR_UPPERCASE_A = 65;\n/* A */\n\nconst CHAR_LOWERCASE_A = 97;\n/* a */\n\nconst CHAR_UPPERCASE_Z = 90;\n/* Z */\n\nconst CHAR_LOWERCASE_Z = 122;\n/* z */\n\nconst CHAR_DOT = 46;\n/* . */\n\nconst CHAR_FORWARD_SLASH = 47;\n/* / */\n\nconst CHAR_BACKWARD_SLASH = 92;\n/* \\ */\n\nconst CHAR_COLON = 58;\n/* : */\n\nconst CHAR_QUESTION_MARK = 63;\n/* ? */\n\nclass ErrorInvalidArgType extends Error {\n  constructor(name, expected, actual) {\n    // determiner: 'must be' or 'must not be'\n    let determiner;\n\n    if (typeof expected === 'string' && expected.indexOf('not ') === 0) {\n      determiner = 'must not be';\n      expected = expected.replace(/^not /, '');\n    } else {\n      determiner = 'must be';\n    }\n\n    const type = name.indexOf('.') !== -1 ? 'property' : 'argument';\n    let msg = `The \"${name}\" ${type} ${determiner} of type ${expected}`;\n    msg += `. Received type ${typeof actual}`;\n    super(msg);\n    this.code = 'ERR_INVALID_ARG_TYPE';\n  }\n\n}\n\nfunction validateString(value, name) {\n  if (typeof value !== 'string') {\n    throw new ErrorInvalidArgType(name, 'string', value);\n  }\n}\n\nfunction isPathSeparator(code) {\n  return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;\n}\n\nfunction isPosixPathSeparator(code) {\n  return code === CHAR_FORWARD_SLASH;\n}\n\nfunction isWindowsDeviceRoot(code) {\n  return code >= CHAR_UPPERCASE_A && code <= CHAR_UPPERCASE_Z || code >= CHAR_LOWERCASE_A && code <= CHAR_LOWERCASE_Z;\n} // Resolves . and .. elements in a path with directory names\n\n\nfunction normalizeString(path, allowAboveRoot, separator, isPathSeparator) {\n  let res = '';\n  let lastSegmentLength = 0;\n  let lastSlash = -1;\n  let dots = 0;\n  let code = 0;\n\n  for (let i = 0; i <= path.length; ++i) {\n    if (i < path.length) {\n      code = path.charCodeAt(i);\n    } else if (isPathSeparator(code)) {\n      break;\n    } else {\n      code = CHAR_FORWARD_SLASH;\n    }\n\n    if (isPathSeparator(code)) {\n      if (lastSlash === i - 1 || dots === 1) {// NOOP\n      } else if (dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== CHAR_DOT || res.charCodeAt(res.length - 2) !== CHAR_DOT) {\n          if (res.length > 2) {\n            const lastSlashIndex = res.lastIndexOf(separator);\n\n            if (lastSlashIndex === -1) {\n              res = '';\n              lastSegmentLength = 0;\n            } else {\n              res = res.slice(0, lastSlashIndex);\n              lastSegmentLength = res.length - 1 - res.lastIndexOf(separator);\n            }\n\n            lastSlash = i;\n            dots = 0;\n            continue;\n          } else if (res.length !== 0) {\n            res = '';\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n\n        if (allowAboveRoot) {\n          res += res.length > 0 ? `${separator}..` : '..';\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0) {\n          res += `${separator}${path.slice(lastSlash + 1, i)}`;\n        } else {\n          res = path.slice(lastSlash + 1, i);\n        }\n\n        lastSegmentLength = i - lastSlash - 1;\n      }\n\n      lastSlash = i;\n      dots = 0;\n    } else if (code === CHAR_DOT && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n\n  return res;\n}\n\nfunction _format(sep, pathObject) {\n  if (pathObject === null || typeof pathObject !== 'object') {\n    throw new ErrorInvalidArgType('pathObject', 'Object', pathObject);\n  }\n\n  const dir = pathObject.dir || pathObject.root;\n  const base = pathObject.base || `${pathObject.name || ''}${pathObject.ext || ''}`;\n\n  if (!dir) {\n    return base;\n  }\n\n  return dir === pathObject.root ? `${dir}${base}` : `${dir}${sep}${base}`;\n}\n\nexport const win32 = {\n  // path.resolve([from ...], to)\n  resolve(...pathSegments) {\n    let resolvedDevice = '';\n    let resolvedTail = '';\n    let resolvedAbsolute = false;\n\n    for (let i = pathSegments.length - 1; i >= -1; i--) {\n      let path;\n\n      if (i >= 0) {\n        path = pathSegments[i];\n        validateString(path, 'path'); // Skip empty entries\n\n        if (path.length === 0) {\n          continue;\n        }\n      } else if (resolvedDevice.length === 0) {\n        path = process.cwd();\n      } else {\n        // Windows has the concept of drive-specific current working\n        // directories. If we've resolved a drive letter but not yet an\n        // absolute path, get cwd for that drive, or the process cwd if\n        // the drive cwd is not available. We're sure the device is not\n        // a UNC path at this points, because UNC paths are always absolute.\n        path = process.env[`=${resolvedDevice}`] || process.cwd(); // Verify that a cwd was found and that it actually points\n        // to our drive. If not, default to the drive's root.\n\n        if (path === undefined || path.slice(0, 2).toLowerCase() !== resolvedDevice.toLowerCase() && path.charCodeAt(2) === CHAR_BACKWARD_SLASH) {\n          path = `${resolvedDevice}\\\\`;\n        }\n      }\n\n      const len = path.length;\n      let rootEnd = 0;\n      let device = '';\n      let isAbsolute = false;\n      const code = path.charCodeAt(0); // Try to match a root\n\n      if (len === 1) {\n        if (isPathSeparator(code)) {\n          // `path` contains just a path separator\n          rootEnd = 1;\n          isAbsolute = true;\n        }\n      } else if (isPathSeparator(code)) {\n        // Possible UNC root\n        // If we started with a separator, we know we at least have an\n        // absolute path of some kind (UNC or otherwise)\n        isAbsolute = true;\n\n        if (isPathSeparator(path.charCodeAt(1))) {\n          // Matched double path separator at beginning\n          let j = 2;\n          let last = j; // Match 1 or more non-path separators\n\n          while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n            j++;\n          }\n\n          if (j < len && j !== last) {\n            const firstPart = path.slice(last, j); // Matched!\n\n            last = j; // Match 1 or more path separators\n\n            while (j < len && isPathSeparator(path.charCodeAt(j))) {\n              j++;\n            }\n\n            if (j < len && j !== last) {\n              // Matched!\n              last = j; // Match 1 or more non-path separators\n\n              while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n                j++;\n              }\n\n              if (j === len || j !== last) {\n                // We matched a UNC root\n                device = `\\\\\\\\${firstPart}\\\\${path.slice(last, j)}`;\n                rootEnd = j;\n              }\n            }\n          }\n        } else {\n          rootEnd = 1;\n        }\n      } else if (isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON) {\n        // Possible device root\n        device = path.slice(0, 2);\n        rootEnd = 2;\n\n        if (len > 2 && isPathSeparator(path.charCodeAt(2))) {\n          // Treat separator following drive name as an absolute path\n          // indicator\n          isAbsolute = true;\n          rootEnd = 3;\n        }\n      }\n\n      if (device.length > 0) {\n        if (resolvedDevice.length > 0) {\n          if (device.toLowerCase() !== resolvedDevice.toLowerCase()) {\n            // This path points to another device so it is not applicable\n            continue;\n          }\n        } else {\n          resolvedDevice = device;\n        }\n      }\n\n      if (resolvedAbsolute) {\n        if (resolvedDevice.length > 0) {\n          break;\n        }\n      } else {\n        resolvedTail = `${path.slice(rootEnd)}\\\\${resolvedTail}`;\n        resolvedAbsolute = isAbsolute;\n\n        if (isAbsolute && resolvedDevice.length > 0) {\n          break;\n        }\n      }\n    } // At this point the path should be resolved to a full absolute path,\n    // but handle relative paths to be safe (might happen when process.cwd()\n    // fails)\n    // Normalize the tail path\n\n\n    resolvedTail = normalizeString(resolvedTail, !resolvedAbsolute, '\\\\', isPathSeparator);\n    return resolvedAbsolute ? `${resolvedDevice}\\\\${resolvedTail}` : `${resolvedDevice}${resolvedTail}` || '.';\n  },\n\n  normalize(path) {\n    validateString(path, 'path');\n    const len = path.length;\n\n    if (len === 0) {\n      return '.';\n    }\n\n    let rootEnd = 0;\n    let device;\n    let isAbsolute = false;\n    const code = path.charCodeAt(0); // Try to match a root\n\n    if (len === 1) {\n      // `path` contains just a single char, exit early to avoid\n      // unnecessary work\n      return isPosixPathSeparator(code) ? '\\\\' : path;\n    }\n\n    if (isPathSeparator(code)) {\n      // Possible UNC root\n      // If we started with a separator, we know we at least have an absolute\n      // path of some kind (UNC or otherwise)\n      isAbsolute = true;\n\n      if (isPathSeparator(path.charCodeAt(1))) {\n        // Matched double path separator at beginning\n        let j = 2;\n        let last = j; // Match 1 or more non-path separators\n\n        while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n          j++;\n        }\n\n        if (j < len && j !== last) {\n          const firstPart = path.slice(last, j); // Matched!\n\n          last = j; // Match 1 or more path separators\n\n          while (j < len && isPathSeparator(path.charCodeAt(j))) {\n            j++;\n          }\n\n          if (j < len && j !== last) {\n            // Matched!\n            last = j; // Match 1 or more non-path separators\n\n            while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n              j++;\n            }\n\n            if (j === len) {\n              // We matched a UNC root only\n              // Return the normalized version of the UNC root since there\n              // is nothing left to process\n              return `\\\\\\\\${firstPart}\\\\${path.slice(last)}\\\\`;\n            }\n\n            if (j !== last) {\n              // We matched a UNC root with leftovers\n              device = `\\\\\\\\${firstPart}\\\\${path.slice(last, j)}`;\n              rootEnd = j;\n            }\n          }\n        }\n      } else {\n        rootEnd = 1;\n      }\n    } else if (isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON) {\n      // Possible device root\n      device = path.slice(0, 2);\n      rootEnd = 2;\n\n      if (len > 2 && isPathSeparator(path.charCodeAt(2))) {\n        // Treat separator following drive name as an absolute path\n        // indicator\n        isAbsolute = true;\n        rootEnd = 3;\n      }\n    }\n\n    let tail = rootEnd < len ? normalizeString(path.slice(rootEnd), !isAbsolute, '\\\\', isPathSeparator) : '';\n\n    if (tail.length === 0 && !isAbsolute) {\n      tail = '.';\n    }\n\n    if (tail.length > 0 && isPathSeparator(path.charCodeAt(len - 1))) {\n      tail += '\\\\';\n    }\n\n    if (device === undefined) {\n      return isAbsolute ? `\\\\${tail}` : tail;\n    }\n\n    return isAbsolute ? `${device}\\\\${tail}` : `${device}${tail}`;\n  },\n\n  isAbsolute(path) {\n    validateString(path, 'path');\n    const len = path.length;\n\n    if (len === 0) {\n      return false;\n    }\n\n    const code = path.charCodeAt(0);\n    return isPathSeparator(code) || // Possible device root\n    len > 2 && isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON && isPathSeparator(path.charCodeAt(2));\n  },\n\n  join(...paths) {\n    if (paths.length === 0) {\n      return '.';\n    }\n\n    let joined;\n    let firstPart;\n\n    for (let i = 0; i < paths.length; ++i) {\n      const arg = paths[i];\n      validateString(arg, 'path');\n\n      if (arg.length > 0) {\n        if (joined === undefined) {\n          joined = firstPart = arg;\n        } else {\n          joined += `\\\\${arg}`;\n        }\n      }\n    }\n\n    if (joined === undefined) {\n      return '.';\n    } // Make sure that the joined path doesn't start with two slashes, because\n    // normalize() will mistake it for a UNC path then.\n    //\n    // This step is skipped when it is very clear that the user actually\n    // intended to point at a UNC path. This is assumed when the first\n    // non-empty string arguments starts with exactly two slashes followed by\n    // at least one more non-slash character.\n    //\n    // Note that for normalize() to treat a path as a UNC path it needs to\n    // have at least 2 components, so we don't filter for that here.\n    // This means that the user can use join to construct UNC paths from\n    // a server name and a share name; for example:\n    //   path.join('//server', 'share') -> '\\\\\\\\server\\\\share\\\\')\n\n\n    let needsReplace = true;\n    let slashCount = 0;\n\n    if (typeof firstPart === 'string' && isPathSeparator(firstPart.charCodeAt(0))) {\n      ++slashCount;\n      const firstLen = firstPart.length;\n\n      if (firstLen > 1 && isPathSeparator(firstPart.charCodeAt(1))) {\n        ++slashCount;\n\n        if (firstLen > 2) {\n          if (isPathSeparator(firstPart.charCodeAt(2))) {\n            ++slashCount;\n          } else {\n            // We matched a UNC path in the first part\n            needsReplace = false;\n          }\n        }\n      }\n    }\n\n    if (needsReplace) {\n      // Find any more consecutive slashes we need to replace\n      while (slashCount < joined.length && isPathSeparator(joined.charCodeAt(slashCount))) {\n        slashCount++;\n      } // Replace the slashes if needed\n\n\n      if (slashCount >= 2) {\n        joined = `\\\\${joined.slice(slashCount)}`;\n      }\n    }\n\n    return win32.normalize(joined);\n  },\n\n  // It will solve the relative path from `from` to `to`, for instance:\n  //  from = 'C:\\\\orandea\\\\test\\\\aaa'\n  //  to = 'C:\\\\orandea\\\\impl\\\\bbb'\n  // The output of the function should be: '..\\\\..\\\\impl\\\\bbb'\n  relative(from, to) {\n    validateString(from, 'from');\n    validateString(to, 'to');\n\n    if (from === to) {\n      return '';\n    }\n\n    const fromOrig = win32.resolve(from);\n    const toOrig = win32.resolve(to);\n\n    if (fromOrig === toOrig) {\n      return '';\n    }\n\n    from = fromOrig.toLowerCase();\n    to = toOrig.toLowerCase();\n\n    if (from === to) {\n      return '';\n    } // Trim any leading backslashes\n\n\n    let fromStart = 0;\n\n    while (fromStart < from.length && from.charCodeAt(fromStart) === CHAR_BACKWARD_SLASH) {\n      fromStart++;\n    } // Trim trailing backslashes (applicable to UNC paths only)\n\n\n    let fromEnd = from.length;\n\n    while (fromEnd - 1 > fromStart && from.charCodeAt(fromEnd - 1) === CHAR_BACKWARD_SLASH) {\n      fromEnd--;\n    }\n\n    const fromLen = fromEnd - fromStart; // Trim any leading backslashes\n\n    let toStart = 0;\n\n    while (toStart < to.length && to.charCodeAt(toStart) === CHAR_BACKWARD_SLASH) {\n      toStart++;\n    } // Trim trailing backslashes (applicable to UNC paths only)\n\n\n    let toEnd = to.length;\n\n    while (toEnd - 1 > toStart && to.charCodeAt(toEnd - 1) === CHAR_BACKWARD_SLASH) {\n      toEnd--;\n    }\n\n    const toLen = toEnd - toStart; // Compare paths to find the longest common path from root\n\n    const length = fromLen < toLen ? fromLen : toLen;\n    let lastCommonSep = -1;\n    let i = 0;\n\n    for (; i < length; i++) {\n      const fromCode = from.charCodeAt(fromStart + i);\n\n      if (fromCode !== to.charCodeAt(toStart + i)) {\n        break;\n      } else if (fromCode === CHAR_BACKWARD_SLASH) {\n        lastCommonSep = i;\n      }\n    } // We found a mismatch before the first common path separator was seen, so\n    // return the original `to`.\n\n\n    if (i !== length) {\n      if (lastCommonSep === -1) {\n        return toOrig;\n      }\n    } else {\n      if (toLen > length) {\n        if (to.charCodeAt(toStart + i) === CHAR_BACKWARD_SLASH) {\n          // We get here if `from` is the exact base path for `to`.\n          // For example: from='C:\\\\foo\\\\bar'; to='C:\\\\foo\\\\bar\\\\baz'\n          return toOrig.slice(toStart + i + 1);\n        }\n\n        if (i === 2) {\n          // We get here if `from` is the device root.\n          // For example: from='C:\\\\'; to='C:\\\\foo'\n          return toOrig.slice(toStart + i);\n        }\n      }\n\n      if (fromLen > length) {\n        if (from.charCodeAt(fromStart + i) === CHAR_BACKWARD_SLASH) {\n          // We get here if `to` is the exact base path for `from`.\n          // For example: from='C:\\\\foo\\\\bar'; to='C:\\\\foo'\n          lastCommonSep = i;\n        } else if (i === 2) {\n          // We get here if `to` is the device root.\n          // For example: from='C:\\\\foo\\\\bar'; to='C:\\\\'\n          lastCommonSep = 3;\n        }\n      }\n\n      if (lastCommonSep === -1) {\n        lastCommonSep = 0;\n      }\n    }\n\n    let out = ''; // Generate the relative path based on the path difference between `to` and\n    // `from`\n\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n      if (i === fromEnd || from.charCodeAt(i) === CHAR_BACKWARD_SLASH) {\n        out += out.length === 0 ? '..' : '\\\\..';\n      }\n    }\n\n    toStart += lastCommonSep; // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts\n\n    if (out.length > 0) {\n      return `${out}${toOrig.slice(toStart, toEnd)}`;\n    }\n\n    if (toOrig.charCodeAt(toStart) === CHAR_BACKWARD_SLASH) {\n      ++toStart;\n    }\n\n    return toOrig.slice(toStart, toEnd);\n  },\n\n  toNamespacedPath(path) {\n    // Note: this will *probably* throw somewhere.\n    if (typeof path !== 'string') {\n      return path;\n    }\n\n    if (path.length === 0) {\n      return '';\n    }\n\n    const resolvedPath = win32.resolve(path);\n\n    if (resolvedPath.length <= 2) {\n      return path;\n    }\n\n    if (resolvedPath.charCodeAt(0) === CHAR_BACKWARD_SLASH) {\n      // Possible UNC root\n      if (resolvedPath.charCodeAt(1) === CHAR_BACKWARD_SLASH) {\n        const code = resolvedPath.charCodeAt(2);\n\n        if (code !== CHAR_QUESTION_MARK && code !== CHAR_DOT) {\n          // Matched non-long UNC root, convert the path to a long UNC path\n          return `\\\\\\\\?\\\\UNC\\\\${resolvedPath.slice(2)}`;\n        }\n      }\n    } else if (isWindowsDeviceRoot(resolvedPath.charCodeAt(0)) && resolvedPath.charCodeAt(1) === CHAR_COLON && resolvedPath.charCodeAt(2) === CHAR_BACKWARD_SLASH) {\n      // Matched device root, convert the path to a long UNC path\n      return `\\\\\\\\?\\\\${resolvedPath}`;\n    }\n\n    return path;\n  },\n\n  dirname(path) {\n    validateString(path, 'path');\n    const len = path.length;\n\n    if (len === 0) {\n      return '.';\n    }\n\n    let rootEnd = -1;\n    let offset = 0;\n    const code = path.charCodeAt(0);\n\n    if (len === 1) {\n      // `path` contains just a path separator, exit early to avoid\n      // unnecessary work or a dot.\n      return isPathSeparator(code) ? path : '.';\n    } // Try to match a root\n\n\n    if (isPathSeparator(code)) {\n      // Possible UNC root\n      rootEnd = offset = 1;\n\n      if (isPathSeparator(path.charCodeAt(1))) {\n        // Matched double path separator at beginning\n        let j = 2;\n        let last = j; // Match 1 or more non-path separators\n\n        while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n          j++;\n        }\n\n        if (j < len && j !== last) {\n          // Matched!\n          last = j; // Match 1 or more path separators\n\n          while (j < len && isPathSeparator(path.charCodeAt(j))) {\n            j++;\n          }\n\n          if (j < len && j !== last) {\n            // Matched!\n            last = j; // Match 1 or more non-path separators\n\n            while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n              j++;\n            }\n\n            if (j === len) {\n              // We matched a UNC root only\n              return path;\n            }\n\n            if (j !== last) {\n              // We matched a UNC root with leftovers\n              // Offset by 1 to include the separator after the UNC root to\n              // treat it as a \"normal root\" on top of a (UNC) root\n              rootEnd = offset = j + 1;\n            }\n          }\n        }\n      } // Possible device root\n\n    } else if (isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON) {\n      rootEnd = len > 2 && isPathSeparator(path.charCodeAt(2)) ? 3 : 2;\n      offset = rootEnd;\n    }\n\n    let end = -1;\n    let matchedSlash = true;\n\n    for (let i = len - 1; i >= offset; --i) {\n      if (isPathSeparator(path.charCodeAt(i))) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n        // We saw the first non-path separator\n        matchedSlash = false;\n      }\n    }\n\n    if (end === -1) {\n      if (rootEnd === -1) {\n        return '.';\n      }\n\n      end = rootEnd;\n    }\n\n    return path.slice(0, end);\n  },\n\n  basename(path, ext) {\n    if (ext !== undefined) {\n      validateString(ext, 'ext');\n    }\n\n    validateString(path, 'path');\n    let start = 0;\n    let end = -1;\n    let matchedSlash = true;\n    let i; // Check for a drive letter prefix so as not to mistake the following\n    // path separator as an extra separator at the end of the path that can be\n    // disregarded\n\n    if (path.length >= 2 && isWindowsDeviceRoot(path.charCodeAt(0)) && path.charCodeAt(1) === CHAR_COLON) {\n      start = 2;\n    }\n\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n      if (ext === path) {\n        return '';\n      }\n\n      let extIdx = ext.length - 1;\n      let firstNonSlashEnd = -1;\n\n      for (i = path.length - 1; i >= start; --i) {\n        const code = path.charCodeAt(i);\n\n        if (isPathSeparator(code)) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            start = i + 1;\n            break;\n          }\n        } else {\n          if (firstNonSlashEnd === -1) {\n            // We saw the first non-path separator, remember this index in case\n            // we need it if the extension ends up not matching\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n\n          if (extIdx >= 0) {\n            // Try to match the explicit extension\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                // We matched the extension, so mark this as the end of our path\n                // component\n                end = i;\n              }\n            } else {\n              // Extension does not match, so our result is the entire path\n              // component\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n\n      if (start === end) {\n        end = firstNonSlashEnd;\n      } else if (end === -1) {\n        end = path.length;\n      }\n\n      return path.slice(start, end);\n    }\n\n    for (i = path.length - 1; i >= start; --i) {\n      if (isPathSeparator(path.charCodeAt(i))) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          start = i + 1;\n          break;\n        }\n      } else if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component\n        matchedSlash = false;\n        end = i + 1;\n      }\n    }\n\n    if (end === -1) {\n      return '';\n    }\n\n    return path.slice(start, end);\n  },\n\n  extname(path) {\n    validateString(path, 'path');\n    let start = 0;\n    let startDot = -1;\n    let startPart = 0;\n    let end = -1;\n    let matchedSlash = true; // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n\n    let preDotState = 0; // Check for a drive letter prefix so as not to mistake the following\n    // path separator as an extra separator at the end of the path that can be\n    // disregarded\n\n    if (path.length >= 2 && path.charCodeAt(1) === CHAR_COLON && isWindowsDeviceRoot(path.charCodeAt(0))) {\n      start = startPart = 2;\n    }\n\n    for (let i = path.length - 1; i >= start; --i) {\n      const code = path.charCodeAt(i);\n\n      if (isPathSeparator(code)) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n\n        continue;\n      }\n\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n\n      if (code === CHAR_DOT) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1) {\n          startDot = i;\n        } else if (preDotState !== 1) {\n          preDotState = 1;\n        }\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot\n    preDotState === 0 || // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return '';\n    }\n\n    return path.slice(startDot, end);\n  },\n\n  format: _format.bind(null, '\\\\'),\n\n  parse(path) {\n    validateString(path, 'path');\n    const ret = {\n      root: '',\n      dir: '',\n      base: '',\n      ext: '',\n      name: ''\n    };\n\n    if (path.length === 0) {\n      return ret;\n    }\n\n    const len = path.length;\n    let rootEnd = 0;\n    let code = path.charCodeAt(0);\n\n    if (len === 1) {\n      if (isPathSeparator(code)) {\n        // `path` contains just a path separator, exit early to avoid\n        // unnecessary work\n        ret.root = ret.dir = path;\n        return ret;\n      }\n\n      ret.base = ret.name = path;\n      return ret;\n    } // Try to match a root\n\n\n    if (isPathSeparator(code)) {\n      // Possible UNC root\n      rootEnd = 1;\n\n      if (isPathSeparator(path.charCodeAt(1))) {\n        // Matched double path separator at beginning\n        let j = 2;\n        let last = j; // Match 1 or more non-path separators\n\n        while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n          j++;\n        }\n\n        if (j < len && j !== last) {\n          // Matched!\n          last = j; // Match 1 or more path separators\n\n          while (j < len && isPathSeparator(path.charCodeAt(j))) {\n            j++;\n          }\n\n          if (j < len && j !== last) {\n            // Matched!\n            last = j; // Match 1 or more non-path separators\n\n            while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n              j++;\n            }\n\n            if (j === len) {\n              // We matched a UNC root only\n              rootEnd = j;\n            } else if (j !== last) {\n              // We matched a UNC root with leftovers\n              rootEnd = j + 1;\n            }\n          }\n        }\n      }\n    } else if (isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON) {\n      // Possible device root\n      if (len <= 2) {\n        // `path` contains just a drive root, exit early to avoid\n        // unnecessary work\n        ret.root = ret.dir = path;\n        return ret;\n      }\n\n      rootEnd = 2;\n\n      if (isPathSeparator(path.charCodeAt(2))) {\n        if (len === 3) {\n          // `path` contains just a drive root, exit early to avoid\n          // unnecessary work\n          ret.root = ret.dir = path;\n          return ret;\n        }\n\n        rootEnd = 3;\n      }\n    }\n\n    if (rootEnd > 0) {\n      ret.root = path.slice(0, rootEnd);\n    }\n\n    let startDot = -1;\n    let startPart = rootEnd;\n    let end = -1;\n    let matchedSlash = true;\n    let i = path.length - 1; // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n\n    let preDotState = 0; // Get non-dir info\n\n    for (; i >= rootEnd; --i) {\n      code = path.charCodeAt(i);\n\n      if (isPathSeparator(code)) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n\n        continue;\n      }\n\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n\n      if (code === CHAR_DOT) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1) {\n          startDot = i;\n        } else if (preDotState !== 1) {\n          preDotState = 1;\n        }\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (end !== -1) {\n      if (startDot === -1 || // We saw a non-dot character immediately before the dot\n      preDotState === 0 || // The (right-most) trimmed path component is exactly '..'\n      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n        ret.base = ret.name = path.slice(startPart, end);\n      } else {\n        ret.name = path.slice(startPart, startDot);\n        ret.base = path.slice(startPart, end);\n        ret.ext = path.slice(startDot, end);\n      }\n    } // If the directory is the root, use the entire root as the `dir` including\n    // the trailing slash if any (`C:\\abc` -> `C:\\`). Otherwise, strip out the\n    // trailing slash (`C:\\abc\\def` -> `C:\\abc`).\n\n\n    if (startPart > 0 && startPart !== rootEnd) {\n      ret.dir = path.slice(0, startPart - 1);\n    } else {\n      ret.dir = ret.root;\n    }\n\n    return ret;\n  },\n\n  sep: '\\\\',\n  delimiter: ';',\n  win32: null,\n  posix: null\n};\nexport const posix = {\n  // path.resolve([from ...], to)\n  resolve(...pathSegments) {\n    let resolvedPath = '';\n    let resolvedAbsolute = false;\n\n    for (let i = pathSegments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      const path = i >= 0 ? pathSegments[i] : process.cwd();\n      validateString(path, 'path'); // Skip empty entries\n\n      if (path.length === 0) {\n        continue;\n      }\n\n      resolvedPath = `${path}/${resolvedPath}`;\n      resolvedAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n    } // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n    // Normalize the path\n\n\n    resolvedPath = normalizeString(resolvedPath, !resolvedAbsolute, '/', isPosixPathSeparator);\n\n    if (resolvedAbsolute) {\n      return `/${resolvedPath}`;\n    }\n\n    return resolvedPath.length > 0 ? resolvedPath : '.';\n  },\n\n  normalize(path) {\n    validateString(path, 'path');\n\n    if (path.length === 0) {\n      return '.';\n    }\n\n    const isAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n    const trailingSeparator = path.charCodeAt(path.length - 1) === CHAR_FORWARD_SLASH; // Normalize the path\n\n    path = normalizeString(path, !isAbsolute, '/', isPosixPathSeparator);\n\n    if (path.length === 0) {\n      if (isAbsolute) {\n        return '/';\n      }\n\n      return trailingSeparator ? './' : '.';\n    }\n\n    if (trailingSeparator) {\n      path += '/';\n    }\n\n    return isAbsolute ? `/${path}` : path;\n  },\n\n  isAbsolute(path) {\n    validateString(path, 'path');\n    return path.length > 0 && path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n  },\n\n  join(...paths) {\n    if (paths.length === 0) {\n      return '.';\n    }\n\n    let joined;\n\n    for (let i = 0; i < paths.length; ++i) {\n      const arg = paths[i];\n      validateString(arg, 'path');\n\n      if (arg.length > 0) {\n        if (joined === undefined) {\n          joined = arg;\n        } else {\n          joined += `/${arg}`;\n        }\n      }\n    }\n\n    if (joined === undefined) {\n      return '.';\n    }\n\n    return posix.normalize(joined);\n  },\n\n  relative(from, to) {\n    validateString(from, 'from');\n    validateString(to, 'to');\n\n    if (from === to) {\n      return '';\n    } // Trim leading forward slashes.\n\n\n    from = posix.resolve(from);\n    to = posix.resolve(to);\n\n    if (from === to) {\n      return '';\n    }\n\n    const fromStart = 1;\n    const fromEnd = from.length;\n    const fromLen = fromEnd - fromStart;\n    const toStart = 1;\n    const toLen = to.length - toStart; // Compare paths to find the longest common path from root\n\n    const length = fromLen < toLen ? fromLen : toLen;\n    let lastCommonSep = -1;\n    let i = 0;\n\n    for (; i < length; i++) {\n      const fromCode = from.charCodeAt(fromStart + i);\n\n      if (fromCode !== to.charCodeAt(toStart + i)) {\n        break;\n      } else if (fromCode === CHAR_FORWARD_SLASH) {\n        lastCommonSep = i;\n      }\n    }\n\n    if (i === length) {\n      if (toLen > length) {\n        if (to.charCodeAt(toStart + i) === CHAR_FORWARD_SLASH) {\n          // We get here if `from` is the exact base path for `to`.\n          // For example: from='/foo/bar'; to='/foo/bar/baz'\n          return to.slice(toStart + i + 1);\n        }\n\n        if (i === 0) {\n          // We get here if `from` is the root\n          // For example: from='/'; to='/foo'\n          return to.slice(toStart + i);\n        }\n      } else if (fromLen > length) {\n        if (from.charCodeAt(fromStart + i) === CHAR_FORWARD_SLASH) {\n          // We get here if `to` is the exact base path for `from`.\n          // For example: from='/foo/bar/baz'; to='/foo/bar'\n          lastCommonSep = i;\n        } else if (i === 0) {\n          // We get here if `to` is the root.\n          // For example: from='/foo/bar'; to='/'\n          lastCommonSep = 0;\n        }\n      }\n    }\n\n    let out = ''; // Generate the relative path based on the path difference between `to`\n    // and `from`.\n\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n      if (i === fromEnd || from.charCodeAt(i) === CHAR_FORWARD_SLASH) {\n        out += out.length === 0 ? '..' : '/..';\n      }\n    } // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts.\n\n\n    return `${out}${to.slice(toStart + lastCommonSep)}`;\n  },\n\n  toNamespacedPath(path) {\n    // Non-op on posix systems\n    return path;\n  },\n\n  dirname(path) {\n    validateString(path, 'path');\n\n    if (path.length === 0) {\n      return '.';\n    }\n\n    const hasRoot = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n    let end = -1;\n    let matchedSlash = true;\n\n    for (let i = path.length - 1; i >= 1; --i) {\n      if (path.charCodeAt(i) === CHAR_FORWARD_SLASH) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n        // We saw the first non-path separator\n        matchedSlash = false;\n      }\n    }\n\n    if (end === -1) {\n      return hasRoot ? '/' : '.';\n    }\n\n    if (hasRoot && end === 1) {\n      return '//';\n    }\n\n    return path.slice(0, end);\n  },\n\n  basename(path, ext) {\n    if (ext !== undefined) {\n      validateString(ext, 'ext');\n    }\n\n    validateString(path, 'path');\n    let start = 0;\n    let end = -1;\n    let matchedSlash = true;\n    let i;\n\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n      if (ext === path) {\n        return '';\n      }\n\n      let extIdx = ext.length - 1;\n      let firstNonSlashEnd = -1;\n\n      for (i = path.length - 1; i >= 0; --i) {\n        const code = path.charCodeAt(i);\n\n        if (code === CHAR_FORWARD_SLASH) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            start = i + 1;\n            break;\n          }\n        } else {\n          if (firstNonSlashEnd === -1) {\n            // We saw the first non-path separator, remember this index in case\n            // we need it if the extension ends up not matching\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n\n          if (extIdx >= 0) {\n            // Try to match the explicit extension\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                // We matched the extension, so mark this as the end of our path\n                // component\n                end = i;\n              }\n            } else {\n              // Extension does not match, so our result is the entire path\n              // component\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n\n      if (start === end) {\n        end = firstNonSlashEnd;\n      } else if (end === -1) {\n        end = path.length;\n      }\n\n      return path.slice(start, end);\n    }\n\n    for (i = path.length - 1; i >= 0; --i) {\n      if (path.charCodeAt(i) === CHAR_FORWARD_SLASH) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          start = i + 1;\n          break;\n        }\n      } else if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component\n        matchedSlash = false;\n        end = i + 1;\n      }\n    }\n\n    if (end === -1) {\n      return '';\n    }\n\n    return path.slice(start, end);\n  },\n\n  extname(path) {\n    validateString(path, 'path');\n    let startDot = -1;\n    let startPart = 0;\n    let end = -1;\n    let matchedSlash = true; // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n\n    let preDotState = 0;\n\n    for (let i = path.length - 1; i >= 0; --i) {\n      const code = path.charCodeAt(i);\n\n      if (code === CHAR_FORWARD_SLASH) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n\n        continue;\n      }\n\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n\n      if (code === CHAR_DOT) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1) {\n          startDot = i;\n        } else if (preDotState !== 1) {\n          preDotState = 1;\n        }\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot\n    preDotState === 0 || // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return '';\n    }\n\n    return path.slice(startDot, end);\n  },\n\n  format: _format.bind(null, '/'),\n\n  parse(path) {\n    validateString(path, 'path');\n    const ret = {\n      root: '',\n      dir: '',\n      base: '',\n      ext: '',\n      name: ''\n    };\n\n    if (path.length === 0) {\n      return ret;\n    }\n\n    const isAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n    let start;\n\n    if (isAbsolute) {\n      ret.root = '/';\n      start = 1;\n    } else {\n      start = 0;\n    }\n\n    let startDot = -1;\n    let startPart = 0;\n    let end = -1;\n    let matchedSlash = true;\n    let i = path.length - 1; // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n\n    let preDotState = 0; // Get non-dir info\n\n    for (; i >= start; --i) {\n      const code = path.charCodeAt(i);\n\n      if (code === CHAR_FORWARD_SLASH) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n\n        continue;\n      }\n\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n\n      if (code === CHAR_DOT) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1) {\n          startDot = i;\n        } else if (preDotState !== 1) {\n          preDotState = 1;\n        }\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (end !== -1) {\n      const start = startPart === 0 && isAbsolute ? 1 : startPart;\n\n      if (startDot === -1 || // We saw a non-dot character immediately before the dot\n      preDotState === 0 || // The (right-most) trimmed path component is exactly '..'\n      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n        ret.base = ret.name = path.slice(start, end);\n      } else {\n        ret.name = path.slice(start, startDot);\n        ret.base = path.slice(start, end);\n        ret.ext = path.slice(startDot, end);\n      }\n    }\n\n    if (startPart > 0) {\n      ret.dir = path.slice(0, startPart - 1);\n    } else if (isAbsolute) {\n      ret.dir = '/';\n    }\n\n    return ret;\n  },\n\n  sep: '/',\n  delimiter: ':',\n  win32: null,\n  posix: null\n};\nposix.win32 = win32.win32 = win32;\nposix.posix = win32.posix = posix;\nexport const normalize = process.platform === 'win32' ? win32.normalize : posix.normalize;\nexport const resolve = process.platform === 'win32' ? win32.resolve : posix.resolve;\nexport const relative = process.platform === 'win32' ? win32.relative : posix.relative;\nexport const dirname = process.platform === 'win32' ? win32.dirname : posix.dirname;\nexport const basename = process.platform === 'win32' ? win32.basename : posix.basename;\nexport const extname = process.platform === 'win32' ? win32.extname : posix.extname;\nexport const sep = process.platform === 'win32' ? win32.sep : posix.sep;","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/base/common/path.js"],"names":["process","CHAR_UPPERCASE_A","CHAR_LOWERCASE_A","CHAR_UPPERCASE_Z","CHAR_LOWERCASE_Z","CHAR_DOT","CHAR_FORWARD_SLASH","CHAR_BACKWARD_SLASH","CHAR_COLON","CHAR_QUESTION_MARK","ErrorInvalidArgType","Error","constructor","name","expected","actual","determiner","indexOf","replace","type","msg","code","validateString","value","isPathSeparator","isPosixPathSeparator","isWindowsDeviceRoot","normalizeString","path","allowAboveRoot","separator","res","lastSegmentLength","lastSlash","dots","i","length","charCodeAt","lastSlashIndex","lastIndexOf","slice","_format","sep","pathObject","dir","root","base","ext","win32","resolve","pathSegments","resolvedDevice","resolvedTail","resolvedAbsolute","cwd","env","undefined","toLowerCase","len","rootEnd","device","isAbsolute","j","last","firstPart","normalize","tail","join","paths","joined","arg","needsReplace","slashCount","firstLen","relative","from","to","fromOrig","toOrig","fromStart","fromEnd","fromLen","toStart","toEnd","toLen","lastCommonSep","fromCode","out","toNamespacedPath","resolvedPath","dirname","offset","end","matchedSlash","basename","start","extIdx","firstNonSlashEnd","extname","startDot","startPart","preDotState","format","bind","parse","ret","delimiter","posix","trailingSeparator","hasRoot","platform"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n// NOTE: VSCode's copy of nodejs path library to be usable in common (non-node) namespace\n// Copied from: https://github.com/nodejs/node/blob/v14.16.0/lib/path.js\n/**\n * Copyright Joyent, Inc. and other Node contributors.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to permit\n * persons to whom the Software is furnished to do so, subject to the\n * following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n * NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n * USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\nimport * as process from './process.js';\nconst CHAR_UPPERCASE_A = 65; /* A */\nconst CHAR_LOWERCASE_A = 97; /* a */\nconst CHAR_UPPERCASE_Z = 90; /* Z */\nconst CHAR_LOWERCASE_Z = 122; /* z */\nconst CHAR_DOT = 46; /* . */\nconst CHAR_FORWARD_SLASH = 47; /* / */\nconst CHAR_BACKWARD_SLASH = 92; /* \\ */\nconst CHAR_COLON = 58; /* : */\nconst CHAR_QUESTION_MARK = 63; /* ? */\nclass ErrorInvalidArgType extends Error {\n    constructor(name, expected, actual) {\n        // determiner: 'must be' or 'must not be'\n        let determiner;\n        if (typeof expected === 'string' && expected.indexOf('not ') === 0) {\n            determiner = 'must not be';\n            expected = expected.replace(/^not /, '');\n        }\n        else {\n            determiner = 'must be';\n        }\n        const type = name.indexOf('.') !== -1 ? 'property' : 'argument';\n        let msg = `The \"${name}\" ${type} ${determiner} of type ${expected}`;\n        msg += `. Received type ${typeof actual}`;\n        super(msg);\n        this.code = 'ERR_INVALID_ARG_TYPE';\n    }\n}\nfunction validateString(value, name) {\n    if (typeof value !== 'string') {\n        throw new ErrorInvalidArgType(name, 'string', value);\n    }\n}\nfunction isPathSeparator(code) {\n    return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;\n}\nfunction isPosixPathSeparator(code) {\n    return code === CHAR_FORWARD_SLASH;\n}\nfunction isWindowsDeviceRoot(code) {\n    return (code >= CHAR_UPPERCASE_A && code <= CHAR_UPPERCASE_Z) ||\n        (code >= CHAR_LOWERCASE_A && code <= CHAR_LOWERCASE_Z);\n}\n// Resolves . and .. elements in a path with directory names\nfunction normalizeString(path, allowAboveRoot, separator, isPathSeparator) {\n    let res = '';\n    let lastSegmentLength = 0;\n    let lastSlash = -1;\n    let dots = 0;\n    let code = 0;\n    for (let i = 0; i <= path.length; ++i) {\n        if (i < path.length) {\n            code = path.charCodeAt(i);\n        }\n        else if (isPathSeparator(code)) {\n            break;\n        }\n        else {\n            code = CHAR_FORWARD_SLASH;\n        }\n        if (isPathSeparator(code)) {\n            if (lastSlash === i - 1 || dots === 1) {\n                // NOOP\n            }\n            else if (dots === 2) {\n                if (res.length < 2 || lastSegmentLength !== 2 ||\n                    res.charCodeAt(res.length - 1) !== CHAR_DOT ||\n                    res.charCodeAt(res.length - 2) !== CHAR_DOT) {\n                    if (res.length > 2) {\n                        const lastSlashIndex = res.lastIndexOf(separator);\n                        if (lastSlashIndex === -1) {\n                            res = '';\n                            lastSegmentLength = 0;\n                        }\n                        else {\n                            res = res.slice(0, lastSlashIndex);\n                            lastSegmentLength = res.length - 1 - res.lastIndexOf(separator);\n                        }\n                        lastSlash = i;\n                        dots = 0;\n                        continue;\n                    }\n                    else if (res.length !== 0) {\n                        res = '';\n                        lastSegmentLength = 0;\n                        lastSlash = i;\n                        dots = 0;\n                        continue;\n                    }\n                }\n                if (allowAboveRoot) {\n                    res += res.length > 0 ? `${separator}..` : '..';\n                    lastSegmentLength = 2;\n                }\n            }\n            else {\n                if (res.length > 0) {\n                    res += `${separator}${path.slice(lastSlash + 1, i)}`;\n                }\n                else {\n                    res = path.slice(lastSlash + 1, i);\n                }\n                lastSegmentLength = i - lastSlash - 1;\n            }\n            lastSlash = i;\n            dots = 0;\n        }\n        else if (code === CHAR_DOT && dots !== -1) {\n            ++dots;\n        }\n        else {\n            dots = -1;\n        }\n    }\n    return res;\n}\nfunction _format(sep, pathObject) {\n    if (pathObject === null || typeof pathObject !== 'object') {\n        throw new ErrorInvalidArgType('pathObject', 'Object', pathObject);\n    }\n    const dir = pathObject.dir || pathObject.root;\n    const base = pathObject.base ||\n        `${pathObject.name || ''}${pathObject.ext || ''}`;\n    if (!dir) {\n        return base;\n    }\n    return dir === pathObject.root ? `${dir}${base}` : `${dir}${sep}${base}`;\n}\nexport const win32 = {\n    // path.resolve([from ...], to)\n    resolve(...pathSegments) {\n        let resolvedDevice = '';\n        let resolvedTail = '';\n        let resolvedAbsolute = false;\n        for (let i = pathSegments.length - 1; i >= -1; i--) {\n            let path;\n            if (i >= 0) {\n                path = pathSegments[i];\n                validateString(path, 'path');\n                // Skip empty entries\n                if (path.length === 0) {\n                    continue;\n                }\n            }\n            else if (resolvedDevice.length === 0) {\n                path = process.cwd();\n            }\n            else {\n                // Windows has the concept of drive-specific current working\n                // directories. If we've resolved a drive letter but not yet an\n                // absolute path, get cwd for that drive, or the process cwd if\n                // the drive cwd is not available. We're sure the device is not\n                // a UNC path at this points, because UNC paths are always absolute.\n                path = process.env[`=${resolvedDevice}`] || process.cwd();\n                // Verify that a cwd was found and that it actually points\n                // to our drive. If not, default to the drive's root.\n                if (path === undefined ||\n                    (path.slice(0, 2).toLowerCase() !== resolvedDevice.toLowerCase() &&\n                        path.charCodeAt(2) === CHAR_BACKWARD_SLASH)) {\n                    path = `${resolvedDevice}\\\\`;\n                }\n            }\n            const len = path.length;\n            let rootEnd = 0;\n            let device = '';\n            let isAbsolute = false;\n            const code = path.charCodeAt(0);\n            // Try to match a root\n            if (len === 1) {\n                if (isPathSeparator(code)) {\n                    // `path` contains just a path separator\n                    rootEnd = 1;\n                    isAbsolute = true;\n                }\n            }\n            else if (isPathSeparator(code)) {\n                // Possible UNC root\n                // If we started with a separator, we know we at least have an\n                // absolute path of some kind (UNC or otherwise)\n                isAbsolute = true;\n                if (isPathSeparator(path.charCodeAt(1))) {\n                    // Matched double path separator at beginning\n                    let j = 2;\n                    let last = j;\n                    // Match 1 or more non-path separators\n                    while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n                        j++;\n                    }\n                    if (j < len && j !== last) {\n                        const firstPart = path.slice(last, j);\n                        // Matched!\n                        last = j;\n                        // Match 1 or more path separators\n                        while (j < len && isPathSeparator(path.charCodeAt(j))) {\n                            j++;\n                        }\n                        if (j < len && j !== last) {\n                            // Matched!\n                            last = j;\n                            // Match 1 or more non-path separators\n                            while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n                                j++;\n                            }\n                            if (j === len || j !== last) {\n                                // We matched a UNC root\n                                device = `\\\\\\\\${firstPart}\\\\${path.slice(last, j)}`;\n                                rootEnd = j;\n                            }\n                        }\n                    }\n                }\n                else {\n                    rootEnd = 1;\n                }\n            }\n            else if (isWindowsDeviceRoot(code) &&\n                path.charCodeAt(1) === CHAR_COLON) {\n                // Possible device root\n                device = path.slice(0, 2);\n                rootEnd = 2;\n                if (len > 2 && isPathSeparator(path.charCodeAt(2))) {\n                    // Treat separator following drive name as an absolute path\n                    // indicator\n                    isAbsolute = true;\n                    rootEnd = 3;\n                }\n            }\n            if (device.length > 0) {\n                if (resolvedDevice.length > 0) {\n                    if (device.toLowerCase() !== resolvedDevice.toLowerCase()) {\n                        // This path points to another device so it is not applicable\n                        continue;\n                    }\n                }\n                else {\n                    resolvedDevice = device;\n                }\n            }\n            if (resolvedAbsolute) {\n                if (resolvedDevice.length > 0) {\n                    break;\n                }\n            }\n            else {\n                resolvedTail = `${path.slice(rootEnd)}\\\\${resolvedTail}`;\n                resolvedAbsolute = isAbsolute;\n                if (isAbsolute && resolvedDevice.length > 0) {\n                    break;\n                }\n            }\n        }\n        // At this point the path should be resolved to a full absolute path,\n        // but handle relative paths to be safe (might happen when process.cwd()\n        // fails)\n        // Normalize the tail path\n        resolvedTail = normalizeString(resolvedTail, !resolvedAbsolute, '\\\\', isPathSeparator);\n        return resolvedAbsolute ?\n            `${resolvedDevice}\\\\${resolvedTail}` :\n            `${resolvedDevice}${resolvedTail}` || '.';\n    },\n    normalize(path) {\n        validateString(path, 'path');\n        const len = path.length;\n        if (len === 0) {\n            return '.';\n        }\n        let rootEnd = 0;\n        let device;\n        let isAbsolute = false;\n        const code = path.charCodeAt(0);\n        // Try to match a root\n        if (len === 1) {\n            // `path` contains just a single char, exit early to avoid\n            // unnecessary work\n            return isPosixPathSeparator(code) ? '\\\\' : path;\n        }\n        if (isPathSeparator(code)) {\n            // Possible UNC root\n            // If we started with a separator, we know we at least have an absolute\n            // path of some kind (UNC or otherwise)\n            isAbsolute = true;\n            if (isPathSeparator(path.charCodeAt(1))) {\n                // Matched double path separator at beginning\n                let j = 2;\n                let last = j;\n                // Match 1 or more non-path separators\n                while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n                    j++;\n                }\n                if (j < len && j !== last) {\n                    const firstPart = path.slice(last, j);\n                    // Matched!\n                    last = j;\n                    // Match 1 or more path separators\n                    while (j < len && isPathSeparator(path.charCodeAt(j))) {\n                        j++;\n                    }\n                    if (j < len && j !== last) {\n                        // Matched!\n                        last = j;\n                        // Match 1 or more non-path separators\n                        while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n                            j++;\n                        }\n                        if (j === len) {\n                            // We matched a UNC root only\n                            // Return the normalized version of the UNC root since there\n                            // is nothing left to process\n                            return `\\\\\\\\${firstPart}\\\\${path.slice(last)}\\\\`;\n                        }\n                        if (j !== last) {\n                            // We matched a UNC root with leftovers\n                            device = `\\\\\\\\${firstPart}\\\\${path.slice(last, j)}`;\n                            rootEnd = j;\n                        }\n                    }\n                }\n            }\n            else {\n                rootEnd = 1;\n            }\n        }\n        else if (isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON) {\n            // Possible device root\n            device = path.slice(0, 2);\n            rootEnd = 2;\n            if (len > 2 && isPathSeparator(path.charCodeAt(2))) {\n                // Treat separator following drive name as an absolute path\n                // indicator\n                isAbsolute = true;\n                rootEnd = 3;\n            }\n        }\n        let tail = rootEnd < len ?\n            normalizeString(path.slice(rootEnd), !isAbsolute, '\\\\', isPathSeparator) :\n            '';\n        if (tail.length === 0 && !isAbsolute) {\n            tail = '.';\n        }\n        if (tail.length > 0 && isPathSeparator(path.charCodeAt(len - 1))) {\n            tail += '\\\\';\n        }\n        if (device === undefined) {\n            return isAbsolute ? `\\\\${tail}` : tail;\n        }\n        return isAbsolute ? `${device}\\\\${tail}` : `${device}${tail}`;\n    },\n    isAbsolute(path) {\n        validateString(path, 'path');\n        const len = path.length;\n        if (len === 0) {\n            return false;\n        }\n        const code = path.charCodeAt(0);\n        return isPathSeparator(code) ||\n            // Possible device root\n            (len > 2 &&\n                isWindowsDeviceRoot(code) &&\n                path.charCodeAt(1) === CHAR_COLON &&\n                isPathSeparator(path.charCodeAt(2)));\n    },\n    join(...paths) {\n        if (paths.length === 0) {\n            return '.';\n        }\n        let joined;\n        let firstPart;\n        for (let i = 0; i < paths.length; ++i) {\n            const arg = paths[i];\n            validateString(arg, 'path');\n            if (arg.length > 0) {\n                if (joined === undefined) {\n                    joined = firstPart = arg;\n                }\n                else {\n                    joined += `\\\\${arg}`;\n                }\n            }\n        }\n        if (joined === undefined) {\n            return '.';\n        }\n        // Make sure that the joined path doesn't start with two slashes, because\n        // normalize() will mistake it for a UNC path then.\n        //\n        // This step is skipped when it is very clear that the user actually\n        // intended to point at a UNC path. This is assumed when the first\n        // non-empty string arguments starts with exactly two slashes followed by\n        // at least one more non-slash character.\n        //\n        // Note that for normalize() to treat a path as a UNC path it needs to\n        // have at least 2 components, so we don't filter for that here.\n        // This means that the user can use join to construct UNC paths from\n        // a server name and a share name; for example:\n        //   path.join('//server', 'share') -> '\\\\\\\\server\\\\share\\\\')\n        let needsReplace = true;\n        let slashCount = 0;\n        if (typeof firstPart === 'string' && isPathSeparator(firstPart.charCodeAt(0))) {\n            ++slashCount;\n            const firstLen = firstPart.length;\n            if (firstLen > 1 && isPathSeparator(firstPart.charCodeAt(1))) {\n                ++slashCount;\n                if (firstLen > 2) {\n                    if (isPathSeparator(firstPart.charCodeAt(2))) {\n                        ++slashCount;\n                    }\n                    else {\n                        // We matched a UNC path in the first part\n                        needsReplace = false;\n                    }\n                }\n            }\n        }\n        if (needsReplace) {\n            // Find any more consecutive slashes we need to replace\n            while (slashCount < joined.length &&\n                isPathSeparator(joined.charCodeAt(slashCount))) {\n                slashCount++;\n            }\n            // Replace the slashes if needed\n            if (slashCount >= 2) {\n                joined = `\\\\${joined.slice(slashCount)}`;\n            }\n        }\n        return win32.normalize(joined);\n    },\n    // It will solve the relative path from `from` to `to`, for instance:\n    //  from = 'C:\\\\orandea\\\\test\\\\aaa'\n    //  to = 'C:\\\\orandea\\\\impl\\\\bbb'\n    // The output of the function should be: '..\\\\..\\\\impl\\\\bbb'\n    relative(from, to) {\n        validateString(from, 'from');\n        validateString(to, 'to');\n        if (from === to) {\n            return '';\n        }\n        const fromOrig = win32.resolve(from);\n        const toOrig = win32.resolve(to);\n        if (fromOrig === toOrig) {\n            return '';\n        }\n        from = fromOrig.toLowerCase();\n        to = toOrig.toLowerCase();\n        if (from === to) {\n            return '';\n        }\n        // Trim any leading backslashes\n        let fromStart = 0;\n        while (fromStart < from.length &&\n            from.charCodeAt(fromStart) === CHAR_BACKWARD_SLASH) {\n            fromStart++;\n        }\n        // Trim trailing backslashes (applicable to UNC paths only)\n        let fromEnd = from.length;\n        while (fromEnd - 1 > fromStart &&\n            from.charCodeAt(fromEnd - 1) === CHAR_BACKWARD_SLASH) {\n            fromEnd--;\n        }\n        const fromLen = fromEnd - fromStart;\n        // Trim any leading backslashes\n        let toStart = 0;\n        while (toStart < to.length &&\n            to.charCodeAt(toStart) === CHAR_BACKWARD_SLASH) {\n            toStart++;\n        }\n        // Trim trailing backslashes (applicable to UNC paths only)\n        let toEnd = to.length;\n        while (toEnd - 1 > toStart &&\n            to.charCodeAt(toEnd - 1) === CHAR_BACKWARD_SLASH) {\n            toEnd--;\n        }\n        const toLen = toEnd - toStart;\n        // Compare paths to find the longest common path from root\n        const length = fromLen < toLen ? fromLen : toLen;\n        let lastCommonSep = -1;\n        let i = 0;\n        for (; i < length; i++) {\n            const fromCode = from.charCodeAt(fromStart + i);\n            if (fromCode !== to.charCodeAt(toStart + i)) {\n                break;\n            }\n            else if (fromCode === CHAR_BACKWARD_SLASH) {\n                lastCommonSep = i;\n            }\n        }\n        // We found a mismatch before the first common path separator was seen, so\n        // return the original `to`.\n        if (i !== length) {\n            if (lastCommonSep === -1) {\n                return toOrig;\n            }\n        }\n        else {\n            if (toLen > length) {\n                if (to.charCodeAt(toStart + i) === CHAR_BACKWARD_SLASH) {\n                    // We get here if `from` is the exact base path for `to`.\n                    // For example: from='C:\\\\foo\\\\bar'; to='C:\\\\foo\\\\bar\\\\baz'\n                    return toOrig.slice(toStart + i + 1);\n                }\n                if (i === 2) {\n                    // We get here if `from` is the device root.\n                    // For example: from='C:\\\\'; to='C:\\\\foo'\n                    return toOrig.slice(toStart + i);\n                }\n            }\n            if (fromLen > length) {\n                if (from.charCodeAt(fromStart + i) === CHAR_BACKWARD_SLASH) {\n                    // We get here if `to` is the exact base path for `from`.\n                    // For example: from='C:\\\\foo\\\\bar'; to='C:\\\\foo'\n                    lastCommonSep = i;\n                }\n                else if (i === 2) {\n                    // We get here if `to` is the device root.\n                    // For example: from='C:\\\\foo\\\\bar'; to='C:\\\\'\n                    lastCommonSep = 3;\n                }\n            }\n            if (lastCommonSep === -1) {\n                lastCommonSep = 0;\n            }\n        }\n        let out = '';\n        // Generate the relative path based on the path difference between `to` and\n        // `from`\n        for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n            if (i === fromEnd || from.charCodeAt(i) === CHAR_BACKWARD_SLASH) {\n                out += out.length === 0 ? '..' : '\\\\..';\n            }\n        }\n        toStart += lastCommonSep;\n        // Lastly, append the rest of the destination (`to`) path that comes after\n        // the common path parts\n        if (out.length > 0) {\n            return `${out}${toOrig.slice(toStart, toEnd)}`;\n        }\n        if (toOrig.charCodeAt(toStart) === CHAR_BACKWARD_SLASH) {\n            ++toStart;\n        }\n        return toOrig.slice(toStart, toEnd);\n    },\n    toNamespacedPath(path) {\n        // Note: this will *probably* throw somewhere.\n        if (typeof path !== 'string') {\n            return path;\n        }\n        if (path.length === 0) {\n            return '';\n        }\n        const resolvedPath = win32.resolve(path);\n        if (resolvedPath.length <= 2) {\n            return path;\n        }\n        if (resolvedPath.charCodeAt(0) === CHAR_BACKWARD_SLASH) {\n            // Possible UNC root\n            if (resolvedPath.charCodeAt(1) === CHAR_BACKWARD_SLASH) {\n                const code = resolvedPath.charCodeAt(2);\n                if (code !== CHAR_QUESTION_MARK && code !== CHAR_DOT) {\n                    // Matched non-long UNC root, convert the path to a long UNC path\n                    return `\\\\\\\\?\\\\UNC\\\\${resolvedPath.slice(2)}`;\n                }\n            }\n        }\n        else if (isWindowsDeviceRoot(resolvedPath.charCodeAt(0)) &&\n            resolvedPath.charCodeAt(1) === CHAR_COLON &&\n            resolvedPath.charCodeAt(2) === CHAR_BACKWARD_SLASH) {\n            // Matched device root, convert the path to a long UNC path\n            return `\\\\\\\\?\\\\${resolvedPath}`;\n        }\n        return path;\n    },\n    dirname(path) {\n        validateString(path, 'path');\n        const len = path.length;\n        if (len === 0) {\n            return '.';\n        }\n        let rootEnd = -1;\n        let offset = 0;\n        const code = path.charCodeAt(0);\n        if (len === 1) {\n            // `path` contains just a path separator, exit early to avoid\n            // unnecessary work or a dot.\n            return isPathSeparator(code) ? path : '.';\n        }\n        // Try to match a root\n        if (isPathSeparator(code)) {\n            // Possible UNC root\n            rootEnd = offset = 1;\n            if (isPathSeparator(path.charCodeAt(1))) {\n                // Matched double path separator at beginning\n                let j = 2;\n                let last = j;\n                // Match 1 or more non-path separators\n                while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n                    j++;\n                }\n                if (j < len && j !== last) {\n                    // Matched!\n                    last = j;\n                    // Match 1 or more path separators\n                    while (j < len && isPathSeparator(path.charCodeAt(j))) {\n                        j++;\n                    }\n                    if (j < len && j !== last) {\n                        // Matched!\n                        last = j;\n                        // Match 1 or more non-path separators\n                        while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n                            j++;\n                        }\n                        if (j === len) {\n                            // We matched a UNC root only\n                            return path;\n                        }\n                        if (j !== last) {\n                            // We matched a UNC root with leftovers\n                            // Offset by 1 to include the separator after the UNC root to\n                            // treat it as a \"normal root\" on top of a (UNC) root\n                            rootEnd = offset = j + 1;\n                        }\n                    }\n                }\n            }\n            // Possible device root\n        }\n        else if (isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON) {\n            rootEnd = len > 2 && isPathSeparator(path.charCodeAt(2)) ? 3 : 2;\n            offset = rootEnd;\n        }\n        let end = -1;\n        let matchedSlash = true;\n        for (let i = len - 1; i >= offset; --i) {\n            if (isPathSeparator(path.charCodeAt(i))) {\n                if (!matchedSlash) {\n                    end = i;\n                    break;\n                }\n            }\n            else {\n                // We saw the first non-path separator\n                matchedSlash = false;\n            }\n        }\n        if (end === -1) {\n            if (rootEnd === -1) {\n                return '.';\n            }\n            end = rootEnd;\n        }\n        return path.slice(0, end);\n    },\n    basename(path, ext) {\n        if (ext !== undefined) {\n            validateString(ext, 'ext');\n        }\n        validateString(path, 'path');\n        let start = 0;\n        let end = -1;\n        let matchedSlash = true;\n        let i;\n        // Check for a drive letter prefix so as not to mistake the following\n        // path separator as an extra separator at the end of the path that can be\n        // disregarded\n        if (path.length >= 2 &&\n            isWindowsDeviceRoot(path.charCodeAt(0)) &&\n            path.charCodeAt(1) === CHAR_COLON) {\n            start = 2;\n        }\n        if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n            if (ext === path) {\n                return '';\n            }\n            let extIdx = ext.length - 1;\n            let firstNonSlashEnd = -1;\n            for (i = path.length - 1; i >= start; --i) {\n                const code = path.charCodeAt(i);\n                if (isPathSeparator(code)) {\n                    // If we reached a path separator that was not part of a set of path\n                    // separators at the end of the string, stop now\n                    if (!matchedSlash) {\n                        start = i + 1;\n                        break;\n                    }\n                }\n                else {\n                    if (firstNonSlashEnd === -1) {\n                        // We saw the first non-path separator, remember this index in case\n                        // we need it if the extension ends up not matching\n                        matchedSlash = false;\n                        firstNonSlashEnd = i + 1;\n                    }\n                    if (extIdx >= 0) {\n                        // Try to match the explicit extension\n                        if (code === ext.charCodeAt(extIdx)) {\n                            if (--extIdx === -1) {\n                                // We matched the extension, so mark this as the end of our path\n                                // component\n                                end = i;\n                            }\n                        }\n                        else {\n                            // Extension does not match, so our result is the entire path\n                            // component\n                            extIdx = -1;\n                            end = firstNonSlashEnd;\n                        }\n                    }\n                }\n            }\n            if (start === end) {\n                end = firstNonSlashEnd;\n            }\n            else if (end === -1) {\n                end = path.length;\n            }\n            return path.slice(start, end);\n        }\n        for (i = path.length - 1; i >= start; --i) {\n            if (isPathSeparator(path.charCodeAt(i))) {\n                // If we reached a path separator that was not part of a set of path\n                // separators at the end of the string, stop now\n                if (!matchedSlash) {\n                    start = i + 1;\n                    break;\n                }\n            }\n            else if (end === -1) {\n                // We saw the first non-path separator, mark this as the end of our\n                // path component\n                matchedSlash = false;\n                end = i + 1;\n            }\n        }\n        if (end === -1) {\n            return '';\n        }\n        return path.slice(start, end);\n    },\n    extname(path) {\n        validateString(path, 'path');\n        let start = 0;\n        let startDot = -1;\n        let startPart = 0;\n        let end = -1;\n        let matchedSlash = true;\n        // Track the state of characters (if any) we see before our first dot and\n        // after any path separator we find\n        let preDotState = 0;\n        // Check for a drive letter prefix so as not to mistake the following\n        // path separator as an extra separator at the end of the path that can be\n        // disregarded\n        if (path.length >= 2 &&\n            path.charCodeAt(1) === CHAR_COLON &&\n            isWindowsDeviceRoot(path.charCodeAt(0))) {\n            start = startPart = 2;\n        }\n        for (let i = path.length - 1; i >= start; --i) {\n            const code = path.charCodeAt(i);\n            if (isPathSeparator(code)) {\n                // If we reached a path separator that was not part of a set of path\n                // separators at the end of the string, stop now\n                if (!matchedSlash) {\n                    startPart = i + 1;\n                    break;\n                }\n                continue;\n            }\n            if (end === -1) {\n                // We saw the first non-path separator, mark this as the end of our\n                // extension\n                matchedSlash = false;\n                end = i + 1;\n            }\n            if (code === CHAR_DOT) {\n                // If this is our first dot, mark it as the start of our extension\n                if (startDot === -1) {\n                    startDot = i;\n                }\n                else if (preDotState !== 1) {\n                    preDotState = 1;\n                }\n            }\n            else if (startDot !== -1) {\n                // We saw a non-dot and non-path separator before our dot, so we should\n                // have a good chance at having a non-empty extension\n                preDotState = -1;\n            }\n        }\n        if (startDot === -1 ||\n            end === -1 ||\n            // We saw a non-dot character immediately before the dot\n            preDotState === 0 ||\n            // The (right-most) trimmed path component is exactly '..'\n            (preDotState === 1 &&\n                startDot === end - 1 &&\n                startDot === startPart + 1)) {\n            return '';\n        }\n        return path.slice(startDot, end);\n    },\n    format: _format.bind(null, '\\\\'),\n    parse(path) {\n        validateString(path, 'path');\n        const ret = { root: '', dir: '', base: '', ext: '', name: '' };\n        if (path.length === 0) {\n            return ret;\n        }\n        const len = path.length;\n        let rootEnd = 0;\n        let code = path.charCodeAt(0);\n        if (len === 1) {\n            if (isPathSeparator(code)) {\n                // `path` contains just a path separator, exit early to avoid\n                // unnecessary work\n                ret.root = ret.dir = path;\n                return ret;\n            }\n            ret.base = ret.name = path;\n            return ret;\n        }\n        // Try to match a root\n        if (isPathSeparator(code)) {\n            // Possible UNC root\n            rootEnd = 1;\n            if (isPathSeparator(path.charCodeAt(1))) {\n                // Matched double path separator at beginning\n                let j = 2;\n                let last = j;\n                // Match 1 or more non-path separators\n                while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n                    j++;\n                }\n                if (j < len && j !== last) {\n                    // Matched!\n                    last = j;\n                    // Match 1 or more path separators\n                    while (j < len && isPathSeparator(path.charCodeAt(j))) {\n                        j++;\n                    }\n                    if (j < len && j !== last) {\n                        // Matched!\n                        last = j;\n                        // Match 1 or more non-path separators\n                        while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n                            j++;\n                        }\n                        if (j === len) {\n                            // We matched a UNC root only\n                            rootEnd = j;\n                        }\n                        else if (j !== last) {\n                            // We matched a UNC root with leftovers\n                            rootEnd = j + 1;\n                        }\n                    }\n                }\n            }\n        }\n        else if (isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON) {\n            // Possible device root\n            if (len <= 2) {\n                // `path` contains just a drive root, exit early to avoid\n                // unnecessary work\n                ret.root = ret.dir = path;\n                return ret;\n            }\n            rootEnd = 2;\n            if (isPathSeparator(path.charCodeAt(2))) {\n                if (len === 3) {\n                    // `path` contains just a drive root, exit early to avoid\n                    // unnecessary work\n                    ret.root = ret.dir = path;\n                    return ret;\n                }\n                rootEnd = 3;\n            }\n        }\n        if (rootEnd > 0) {\n            ret.root = path.slice(0, rootEnd);\n        }\n        let startDot = -1;\n        let startPart = rootEnd;\n        let end = -1;\n        let matchedSlash = true;\n        let i = path.length - 1;\n        // Track the state of characters (if any) we see before our first dot and\n        // after any path separator we find\n        let preDotState = 0;\n        // Get non-dir info\n        for (; i >= rootEnd; --i) {\n            code = path.charCodeAt(i);\n            if (isPathSeparator(code)) {\n                // If we reached a path separator that was not part of a set of path\n                // separators at the end of the string, stop now\n                if (!matchedSlash) {\n                    startPart = i + 1;\n                    break;\n                }\n                continue;\n            }\n            if (end === -1) {\n                // We saw the first non-path separator, mark this as the end of our\n                // extension\n                matchedSlash = false;\n                end = i + 1;\n            }\n            if (code === CHAR_DOT) {\n                // If this is our first dot, mark it as the start of our extension\n                if (startDot === -1) {\n                    startDot = i;\n                }\n                else if (preDotState !== 1) {\n                    preDotState = 1;\n                }\n            }\n            else if (startDot !== -1) {\n                // We saw a non-dot and non-path separator before our dot, so we should\n                // have a good chance at having a non-empty extension\n                preDotState = -1;\n            }\n        }\n        if (end !== -1) {\n            if (startDot === -1 ||\n                // We saw a non-dot character immediately before the dot\n                preDotState === 0 ||\n                // The (right-most) trimmed path component is exactly '..'\n                (preDotState === 1 &&\n                    startDot === end - 1 &&\n                    startDot === startPart + 1)) {\n                ret.base = ret.name = path.slice(startPart, end);\n            }\n            else {\n                ret.name = path.slice(startPart, startDot);\n                ret.base = path.slice(startPart, end);\n                ret.ext = path.slice(startDot, end);\n            }\n        }\n        // If the directory is the root, use the entire root as the `dir` including\n        // the trailing slash if any (`C:\\abc` -> `C:\\`). Otherwise, strip out the\n        // trailing slash (`C:\\abc\\def` -> `C:\\abc`).\n        if (startPart > 0 && startPart !== rootEnd) {\n            ret.dir = path.slice(0, startPart - 1);\n        }\n        else {\n            ret.dir = ret.root;\n        }\n        return ret;\n    },\n    sep: '\\\\',\n    delimiter: ';',\n    win32: null,\n    posix: null\n};\nexport const posix = {\n    // path.resolve([from ...], to)\n    resolve(...pathSegments) {\n        let resolvedPath = '';\n        let resolvedAbsolute = false;\n        for (let i = pathSegments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n            const path = i >= 0 ? pathSegments[i] : process.cwd();\n            validateString(path, 'path');\n            // Skip empty entries\n            if (path.length === 0) {\n                continue;\n            }\n            resolvedPath = `${path}/${resolvedPath}`;\n            resolvedAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n        }\n        // At this point the path should be resolved to a full absolute path, but\n        // handle relative paths to be safe (might happen when process.cwd() fails)\n        // Normalize the path\n        resolvedPath = normalizeString(resolvedPath, !resolvedAbsolute, '/', isPosixPathSeparator);\n        if (resolvedAbsolute) {\n            return `/${resolvedPath}`;\n        }\n        return resolvedPath.length > 0 ? resolvedPath : '.';\n    },\n    normalize(path) {\n        validateString(path, 'path');\n        if (path.length === 0) {\n            return '.';\n        }\n        const isAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n        const trailingSeparator = path.charCodeAt(path.length - 1) === CHAR_FORWARD_SLASH;\n        // Normalize the path\n        path = normalizeString(path, !isAbsolute, '/', isPosixPathSeparator);\n        if (path.length === 0) {\n            if (isAbsolute) {\n                return '/';\n            }\n            return trailingSeparator ? './' : '.';\n        }\n        if (trailingSeparator) {\n            path += '/';\n        }\n        return isAbsolute ? `/${path}` : path;\n    },\n    isAbsolute(path) {\n        validateString(path, 'path');\n        return path.length > 0 && path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n    },\n    join(...paths) {\n        if (paths.length === 0) {\n            return '.';\n        }\n        let joined;\n        for (let i = 0; i < paths.length; ++i) {\n            const arg = paths[i];\n            validateString(arg, 'path');\n            if (arg.length > 0) {\n                if (joined === undefined) {\n                    joined = arg;\n                }\n                else {\n                    joined += `/${arg}`;\n                }\n            }\n        }\n        if (joined === undefined) {\n            return '.';\n        }\n        return posix.normalize(joined);\n    },\n    relative(from, to) {\n        validateString(from, 'from');\n        validateString(to, 'to');\n        if (from === to) {\n            return '';\n        }\n        // Trim leading forward slashes.\n        from = posix.resolve(from);\n        to = posix.resolve(to);\n        if (from === to) {\n            return '';\n        }\n        const fromStart = 1;\n        const fromEnd = from.length;\n        const fromLen = fromEnd - fromStart;\n        const toStart = 1;\n        const toLen = to.length - toStart;\n        // Compare paths to find the longest common path from root\n        const length = (fromLen < toLen ? fromLen : toLen);\n        let lastCommonSep = -1;\n        let i = 0;\n        for (; i < length; i++) {\n            const fromCode = from.charCodeAt(fromStart + i);\n            if (fromCode !== to.charCodeAt(toStart + i)) {\n                break;\n            }\n            else if (fromCode === CHAR_FORWARD_SLASH) {\n                lastCommonSep = i;\n            }\n        }\n        if (i === length) {\n            if (toLen > length) {\n                if (to.charCodeAt(toStart + i) === CHAR_FORWARD_SLASH) {\n                    // We get here if `from` is the exact base path for `to`.\n                    // For example: from='/foo/bar'; to='/foo/bar/baz'\n                    return to.slice(toStart + i + 1);\n                }\n                if (i === 0) {\n                    // We get here if `from` is the root\n                    // For example: from='/'; to='/foo'\n                    return to.slice(toStart + i);\n                }\n            }\n            else if (fromLen > length) {\n                if (from.charCodeAt(fromStart + i) === CHAR_FORWARD_SLASH) {\n                    // We get here if `to` is the exact base path for `from`.\n                    // For example: from='/foo/bar/baz'; to='/foo/bar'\n                    lastCommonSep = i;\n                }\n                else if (i === 0) {\n                    // We get here if `to` is the root.\n                    // For example: from='/foo/bar'; to='/'\n                    lastCommonSep = 0;\n                }\n            }\n        }\n        let out = '';\n        // Generate the relative path based on the path difference between `to`\n        // and `from`.\n        for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n            if (i === fromEnd || from.charCodeAt(i) === CHAR_FORWARD_SLASH) {\n                out += out.length === 0 ? '..' : '/..';\n            }\n        }\n        // Lastly, append the rest of the destination (`to`) path that comes after\n        // the common path parts.\n        return `${out}${to.slice(toStart + lastCommonSep)}`;\n    },\n    toNamespacedPath(path) {\n        // Non-op on posix systems\n        return path;\n    },\n    dirname(path) {\n        validateString(path, 'path');\n        if (path.length === 0) {\n            return '.';\n        }\n        const hasRoot = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n        let end = -1;\n        let matchedSlash = true;\n        for (let i = path.length - 1; i >= 1; --i) {\n            if (path.charCodeAt(i) === CHAR_FORWARD_SLASH) {\n                if (!matchedSlash) {\n                    end = i;\n                    break;\n                }\n            }\n            else {\n                // We saw the first non-path separator\n                matchedSlash = false;\n            }\n        }\n        if (end === -1) {\n            return hasRoot ? '/' : '.';\n        }\n        if (hasRoot && end === 1) {\n            return '//';\n        }\n        return path.slice(0, end);\n    },\n    basename(path, ext) {\n        if (ext !== undefined) {\n            validateString(ext, 'ext');\n        }\n        validateString(path, 'path');\n        let start = 0;\n        let end = -1;\n        let matchedSlash = true;\n        let i;\n        if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n            if (ext === path) {\n                return '';\n            }\n            let extIdx = ext.length - 1;\n            let firstNonSlashEnd = -1;\n            for (i = path.length - 1; i >= 0; --i) {\n                const code = path.charCodeAt(i);\n                if (code === CHAR_FORWARD_SLASH) {\n                    // If we reached a path separator that was not part of a set of path\n                    // separators at the end of the string, stop now\n                    if (!matchedSlash) {\n                        start = i + 1;\n                        break;\n                    }\n                }\n                else {\n                    if (firstNonSlashEnd === -1) {\n                        // We saw the first non-path separator, remember this index in case\n                        // we need it if the extension ends up not matching\n                        matchedSlash = false;\n                        firstNonSlashEnd = i + 1;\n                    }\n                    if (extIdx >= 0) {\n                        // Try to match the explicit extension\n                        if (code === ext.charCodeAt(extIdx)) {\n                            if (--extIdx === -1) {\n                                // We matched the extension, so mark this as the end of our path\n                                // component\n                                end = i;\n                            }\n                        }\n                        else {\n                            // Extension does not match, so our result is the entire path\n                            // component\n                            extIdx = -1;\n                            end = firstNonSlashEnd;\n                        }\n                    }\n                }\n            }\n            if (start === end) {\n                end = firstNonSlashEnd;\n            }\n            else if (end === -1) {\n                end = path.length;\n            }\n            return path.slice(start, end);\n        }\n        for (i = path.length - 1; i >= 0; --i) {\n            if (path.charCodeAt(i) === CHAR_FORWARD_SLASH) {\n                // If we reached a path separator that was not part of a set of path\n                // separators at the end of the string, stop now\n                if (!matchedSlash) {\n                    start = i + 1;\n                    break;\n                }\n            }\n            else if (end === -1) {\n                // We saw the first non-path separator, mark this as the end of our\n                // path component\n                matchedSlash = false;\n                end = i + 1;\n            }\n        }\n        if (end === -1) {\n            return '';\n        }\n        return path.slice(start, end);\n    },\n    extname(path) {\n        validateString(path, 'path');\n        let startDot = -1;\n        let startPart = 0;\n        let end = -1;\n        let matchedSlash = true;\n        // Track the state of characters (if any) we see before our first dot and\n        // after any path separator we find\n        let preDotState = 0;\n        for (let i = path.length - 1; i >= 0; --i) {\n            const code = path.charCodeAt(i);\n            if (code === CHAR_FORWARD_SLASH) {\n                // If we reached a path separator that was not part of a set of path\n                // separators at the end of the string, stop now\n                if (!matchedSlash) {\n                    startPart = i + 1;\n                    break;\n                }\n                continue;\n            }\n            if (end === -1) {\n                // We saw the first non-path separator, mark this as the end of our\n                // extension\n                matchedSlash = false;\n                end = i + 1;\n            }\n            if (code === CHAR_DOT) {\n                // If this is our first dot, mark it as the start of our extension\n                if (startDot === -1) {\n                    startDot = i;\n                }\n                else if (preDotState !== 1) {\n                    preDotState = 1;\n                }\n            }\n            else if (startDot !== -1) {\n                // We saw a non-dot and non-path separator before our dot, so we should\n                // have a good chance at having a non-empty extension\n                preDotState = -1;\n            }\n        }\n        if (startDot === -1 ||\n            end === -1 ||\n            // We saw a non-dot character immediately before the dot\n            preDotState === 0 ||\n            // The (right-most) trimmed path component is exactly '..'\n            (preDotState === 1 &&\n                startDot === end - 1 &&\n                startDot === startPart + 1)) {\n            return '';\n        }\n        return path.slice(startDot, end);\n    },\n    format: _format.bind(null, '/'),\n    parse(path) {\n        validateString(path, 'path');\n        const ret = { root: '', dir: '', base: '', ext: '', name: '' };\n        if (path.length === 0) {\n            return ret;\n        }\n        const isAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n        let start;\n        if (isAbsolute) {\n            ret.root = '/';\n            start = 1;\n        }\n        else {\n            start = 0;\n        }\n        let startDot = -1;\n        let startPart = 0;\n        let end = -1;\n        let matchedSlash = true;\n        let i = path.length - 1;\n        // Track the state of characters (if any) we see before our first dot and\n        // after any path separator we find\n        let preDotState = 0;\n        // Get non-dir info\n        for (; i >= start; --i) {\n            const code = path.charCodeAt(i);\n            if (code === CHAR_FORWARD_SLASH) {\n                // If we reached a path separator that was not part of a set of path\n                // separators at the end of the string, stop now\n                if (!matchedSlash) {\n                    startPart = i + 1;\n                    break;\n                }\n                continue;\n            }\n            if (end === -1) {\n                // We saw the first non-path separator, mark this as the end of our\n                // extension\n                matchedSlash = false;\n                end = i + 1;\n            }\n            if (code === CHAR_DOT) {\n                // If this is our first dot, mark it as the start of our extension\n                if (startDot === -1) {\n                    startDot = i;\n                }\n                else if (preDotState !== 1) {\n                    preDotState = 1;\n                }\n            }\n            else if (startDot !== -1) {\n                // We saw a non-dot and non-path separator before our dot, so we should\n                // have a good chance at having a non-empty extension\n                preDotState = -1;\n            }\n        }\n        if (end !== -1) {\n            const start = startPart === 0 && isAbsolute ? 1 : startPart;\n            if (startDot === -1 ||\n                // We saw a non-dot character immediately before the dot\n                preDotState === 0 ||\n                // The (right-most) trimmed path component is exactly '..'\n                (preDotState === 1 &&\n                    startDot === end - 1 &&\n                    startDot === startPart + 1)) {\n                ret.base = ret.name = path.slice(start, end);\n            }\n            else {\n                ret.name = path.slice(start, startDot);\n                ret.base = path.slice(start, end);\n                ret.ext = path.slice(startDot, end);\n            }\n        }\n        if (startPart > 0) {\n            ret.dir = path.slice(0, startPart - 1);\n        }\n        else if (isAbsolute) {\n            ret.dir = '/';\n        }\n        return ret;\n    },\n    sep: '/',\n    delimiter: ':',\n    win32: null,\n    posix: null\n};\nposix.win32 = win32.win32 = win32;\nposix.posix = win32.posix = posix;\nexport const normalize = (process.platform === 'win32' ? win32.normalize : posix.normalize);\nexport const resolve = (process.platform === 'win32' ? win32.resolve : posix.resolve);\nexport const relative = (process.platform === 'win32' ? win32.relative : posix.relative);\nexport const dirname = (process.platform === 'win32' ? win32.dirname : posix.dirname);\nexport const basename = (process.platform === 'win32' ? win32.basename : posix.basename);\nexport const extname = (process.platform === 'win32' ? win32.extname : posix.extname);\nexport const sep = (process.platform === 'win32' ? win32.sep : posix.sep);\n"]},"metadata":{},"sourceType":"module"}