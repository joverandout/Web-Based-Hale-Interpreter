{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nimport { createStyleSheet } from '../../../base/browser/dom.js';\nimport { PagedList } from '../../../base/browser/ui/list/listPaging.js';\nimport { DefaultStyleController, isSelectionRangeChangeEvent, isSelectionSingleChangeEvent, List } from '../../../base/browser/ui/list/listWidget.js';\nimport { Table } from '../../../base/browser/ui/table/tableWidget.js';\nimport { AsyncDataTree, CompressibleAsyncDataTree } from '../../../base/browser/ui/tree/asyncDataTree.js';\nimport { DataTree } from '../../../base/browser/ui/tree/dataTree.js';\nimport { CompressibleObjectTree, ObjectTree } from '../../../base/browser/ui/tree/objectTree.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { combinedDisposable, Disposable, DisposableStore, dispose, toDisposable } from '../../../base/common/lifecycle.js';\nimport { localize } from '../../../nls.js';\nimport { IAccessibilityService } from '../../accessibility/common/accessibility.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { Extensions as ConfigurationExtensions } from '../../configuration/common/configurationRegistry.js';\nimport { ContextKeyExpr, IContextKeyService, RawContextKey } from '../../contextkey/common/contextkey.js';\nimport { InputFocusedContextKey } from '../../contextkey/common/contextkeys.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport { IKeybindingService } from '../../keybinding/common/keybinding.js';\nimport { Registry } from '../../registry/common/platform.js';\nimport { attachListStyler, computeStyles, defaultListStyles } from '../../theme/common/styler.js';\nimport { IThemeService } from '../../theme/common/themeService.js';\nexport const IListService = createDecorator('listService');\nlet ListService = class ListService {\n  constructor(_themeService) {\n    this._themeService = _themeService;\n    this.disposables = new DisposableStore();\n    this.lists = [];\n    this._lastFocusedWidget = undefined;\n    this._hasCreatedStyleController = false;\n  }\n\n  get lastFocusedList() {\n    return this._lastFocusedWidget;\n  }\n\n  setLastFocusedList(widget) {\n    var _a, _b;\n\n    if (widget === this._lastFocusedWidget) {\n      return;\n    }\n\n    (_a = this._lastFocusedWidget) === null || _a === void 0 ? void 0 : _a.getHTMLElement().classList.remove('last-focused');\n    this._lastFocusedWidget = widget;\n    (_b = this._lastFocusedWidget) === null || _b === void 0 ? void 0 : _b.getHTMLElement().classList.add('last-focused');\n  }\n\n  register(widget, extraContextKeys) {\n    if (!this._hasCreatedStyleController) {\n      this._hasCreatedStyleController = true; // create a shared default tree style sheet for performance reasons\n\n      const styleController = new DefaultStyleController(createStyleSheet(), '');\n      this.disposables.add(attachListStyler(styleController, this._themeService));\n    }\n\n    if (this.lists.some(l => l.widget === widget)) {\n      throw new Error('Cannot register the same widget multiple times');\n    } // Keep in our lists list\n\n\n    const registeredList = {\n      widget,\n      extraContextKeys\n    };\n    this.lists.push(registeredList); // Check for currently being focused\n\n    if (widget.getHTMLElement() === document.activeElement) {\n      this.setLastFocusedList(widget);\n    }\n\n    return combinedDisposable(widget.onDidFocus(() => this.setLastFocusedList(widget)), toDisposable(() => this.lists.splice(this.lists.indexOf(registeredList), 1)), widget.onDidDispose(() => {\n      this.lists = this.lists.filter(l => l !== registeredList);\n\n      if (this._lastFocusedWidget === widget) {\n        this.setLastFocusedList(undefined);\n      }\n    }));\n  }\n\n  dispose() {\n    this.disposables.dispose();\n  }\n\n};\nListService = __decorate([__param(0, IThemeService)], ListService);\nexport { ListService };\nconst RawWorkbenchListFocusContextKey = new RawContextKey('listFocus', true);\nexport const WorkbenchListSupportsMultiSelectContextKey = new RawContextKey('listSupportsMultiselect', true);\nexport const WorkbenchListFocusContextKey = ContextKeyExpr.and(RawWorkbenchListFocusContextKey, ContextKeyExpr.not(InputFocusedContextKey));\nexport const WorkbenchListHasSelectionOrFocus = new RawContextKey('listHasSelectionOrFocus', false);\nexport const WorkbenchListDoubleSelection = new RawContextKey('listDoubleSelection', false);\nexport const WorkbenchListMultiSelection = new RawContextKey('listMultiSelection', false);\nexport const WorkbenchListSelectionNavigation = new RawContextKey('listSelectionNavigation', false);\nexport const WorkbenchTreeElementCanCollapse = new RawContextKey('treeElementCanCollapse', false);\nexport const WorkbenchTreeElementHasParent = new RawContextKey('treeElementHasParent', false);\nexport const WorkbenchTreeElementCanExpand = new RawContextKey('treeElementCanExpand', false);\nexport const WorkbenchTreeElementHasChild = new RawContextKey('treeElementHasChild', false);\nexport const WorkbenchListAutomaticKeyboardNavigationKey = 'listAutomaticKeyboardNavigation';\n\nfunction createScopedContextKeyService(contextKeyService, widget) {\n  const result = contextKeyService.createScoped(widget.getHTMLElement());\n  RawWorkbenchListFocusContextKey.bindTo(result);\n  return result;\n}\n\nconst multiSelectModifierSettingKey = 'workbench.list.multiSelectModifier';\nconst openModeSettingKey = 'workbench.list.openMode';\nconst horizontalScrollingKey = 'workbench.list.horizontalScrolling';\nconst keyboardNavigationSettingKey = 'workbench.list.keyboardNavigation';\nconst automaticKeyboardNavigationSettingKey = 'workbench.list.automaticKeyboardNavigation';\nconst treeIndentKey = 'workbench.tree.indent';\nconst treeRenderIndentGuidesKey = 'workbench.tree.renderIndentGuides';\nconst listSmoothScrolling = 'workbench.list.smoothScrolling';\nconst mouseWheelScrollSensitivityKey = 'workbench.list.mouseWheelScrollSensitivity';\nconst fastScrollSensitivityKey = 'workbench.list.fastScrollSensitivity';\nconst treeExpandMode = 'workbench.tree.expandMode';\n\nfunction useAltAsMultipleSelectionModifier(configurationService) {\n  return configurationService.getValue(multiSelectModifierSettingKey) === 'alt';\n}\n\nclass MultipleSelectionController extends Disposable {\n  constructor(configurationService) {\n    super();\n    this.configurationService = configurationService;\n    this.useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n    this.registerListeners();\n  }\n\n  registerListeners() {\n    this._register(this.configurationService.onDidChangeConfiguration(e => {\n      if (e.affectsConfiguration(multiSelectModifierSettingKey)) {\n        this.useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(this.configurationService);\n      }\n    }));\n  }\n\n  isSelectionSingleChangeEvent(event) {\n    if (this.useAltAsMultipleSelectionModifier) {\n      return event.browserEvent.altKey;\n    }\n\n    return isSelectionSingleChangeEvent(event);\n  }\n\n  isSelectionRangeChangeEvent(event) {\n    return isSelectionRangeChangeEvent(event);\n  }\n\n}\n\nfunction toWorkbenchListOptions(options, configurationService, keybindingService) {\n  var _a;\n\n  const disposables = new DisposableStore();\n  const result = Object.assign(Object.assign({}, options), {\n    keyboardNavigationDelegate: {\n      mightProducePrintableCharacter(e) {\n        return keybindingService.mightProducePrintableCharacter(e);\n      }\n\n    },\n    smoothScrolling: Boolean(configurationService.getValue(listSmoothScrolling)),\n    mouseWheelScrollSensitivity: configurationService.getValue(mouseWheelScrollSensitivityKey),\n    fastScrollSensitivity: configurationService.getValue(fastScrollSensitivityKey),\n    multipleSelectionController: (_a = options.multipleSelectionController) !== null && _a !== void 0 ? _a : disposables.add(new MultipleSelectionController(configurationService))\n  });\n  return [result, disposables];\n}\n\nlet WorkbenchList = class WorkbenchList extends List {\n  constructor(user, container, delegate, renderers, options, contextKeyService, listService, themeService, configurationService, keybindingService) {\n    const horizontalScrolling = typeof options.horizontalScrolling !== 'undefined' ? options.horizontalScrolling : Boolean(configurationService.getValue(horizontalScrollingKey));\n    const [workbenchListOptions, workbenchListOptionsDisposable] = toWorkbenchListOptions(options, configurationService, keybindingService);\n    super(user, container, delegate, renderers, Object.assign(Object.assign(Object.assign({\n      keyboardSupport: false\n    }, computeStyles(themeService.getColorTheme(), defaultListStyles)), workbenchListOptions), {\n      horizontalScrolling\n    }));\n    this.disposables.add(workbenchListOptionsDisposable);\n    this.contextKeyService = createScopedContextKeyService(contextKeyService, this);\n    this.themeService = themeService;\n    this.listSupportsMultiSelect = WorkbenchListSupportsMultiSelectContextKey.bindTo(this.contextKeyService);\n    this.listSupportsMultiSelect.set(options.multipleSelectionSupport !== false);\n    const listSelectionNavigation = WorkbenchListSelectionNavigation.bindTo(this.contextKeyService);\n    listSelectionNavigation.set(Boolean(options.selectionNavigation));\n    this.listHasSelectionOrFocus = WorkbenchListHasSelectionOrFocus.bindTo(this.contextKeyService);\n    this.listDoubleSelection = WorkbenchListDoubleSelection.bindTo(this.contextKeyService);\n    this.listMultiSelection = WorkbenchListMultiSelection.bindTo(this.contextKeyService);\n    this.horizontalScrolling = options.horizontalScrolling;\n    this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n    this.disposables.add(this.contextKeyService);\n    this.disposables.add(listService.register(this));\n\n    if (options.overrideStyles) {\n      this.updateStyles(options.overrideStyles);\n    }\n\n    this.disposables.add(this.onDidChangeSelection(() => {\n      const selection = this.getSelection();\n      const focus = this.getFocus();\n      this.contextKeyService.bufferChangeEvents(() => {\n        this.listHasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n        this.listMultiSelection.set(selection.length > 1);\n        this.listDoubleSelection.set(selection.length === 2);\n      });\n    }));\n    this.disposables.add(this.onDidChangeFocus(() => {\n      const selection = this.getSelection();\n      const focus = this.getFocus();\n      this.listHasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n    }));\n    this.disposables.add(configurationService.onDidChangeConfiguration(e => {\n      if (e.affectsConfiguration(multiSelectModifierSettingKey)) {\n        this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n      }\n\n      let options = {};\n\n      if (e.affectsConfiguration(horizontalScrollingKey) && this.horizontalScrolling === undefined) {\n        const horizontalScrolling = Boolean(configurationService.getValue(horizontalScrollingKey));\n        options = Object.assign(Object.assign({}, options), {\n          horizontalScrolling\n        });\n      }\n\n      if (e.affectsConfiguration(listSmoothScrolling)) {\n        const smoothScrolling = Boolean(configurationService.getValue(listSmoothScrolling));\n        options = Object.assign(Object.assign({}, options), {\n          smoothScrolling\n        });\n      }\n\n      if (e.affectsConfiguration(mouseWheelScrollSensitivityKey)) {\n        const mouseWheelScrollSensitivity = configurationService.getValue(mouseWheelScrollSensitivityKey);\n        options = Object.assign(Object.assign({}, options), {\n          mouseWheelScrollSensitivity\n        });\n      }\n\n      if (e.affectsConfiguration(fastScrollSensitivityKey)) {\n        const fastScrollSensitivity = configurationService.getValue(fastScrollSensitivityKey);\n        options = Object.assign(Object.assign({}, options), {\n          fastScrollSensitivity\n        });\n      }\n\n      if (Object.keys(options).length > 0) {\n        this.updateOptions(options);\n      }\n    }));\n    this.navigator = new ListResourceNavigator(this, Object.assign({\n      configurationService\n    }, options));\n    this.disposables.add(this.navigator);\n  }\n\n  updateOptions(options) {\n    super.updateOptions(options);\n\n    if (options.overrideStyles) {\n      this.updateStyles(options.overrideStyles);\n    }\n\n    if (options.multipleSelectionSupport !== undefined) {\n      this.listSupportsMultiSelect.set(!!options.multipleSelectionSupport);\n    }\n  }\n\n  updateStyles(styles) {\n    var _a;\n\n    (_a = this._styler) === null || _a === void 0 ? void 0 : _a.dispose();\n    this._styler = attachListStyler(this, this.themeService, styles);\n  }\n\n  dispose() {\n    var _a;\n\n    (_a = this._styler) === null || _a === void 0 ? void 0 : _a.dispose();\n    super.dispose();\n  }\n\n};\nWorkbenchList = __decorate([__param(5, IContextKeyService), __param(6, IListService), __param(7, IThemeService), __param(8, IConfigurationService), __param(9, IKeybindingService)], WorkbenchList);\nexport { WorkbenchList };\nlet WorkbenchPagedList = class WorkbenchPagedList extends PagedList {\n  constructor(user, container, delegate, renderers, options, contextKeyService, listService, themeService, configurationService, keybindingService) {\n    const horizontalScrolling = typeof options.horizontalScrolling !== 'undefined' ? options.horizontalScrolling : Boolean(configurationService.getValue(horizontalScrollingKey));\n    const [workbenchListOptions, workbenchListOptionsDisposable] = toWorkbenchListOptions(options, configurationService, keybindingService);\n    super(user, container, delegate, renderers, Object.assign(Object.assign(Object.assign({\n      keyboardSupport: false\n    }, computeStyles(themeService.getColorTheme(), defaultListStyles)), workbenchListOptions), {\n      horizontalScrolling\n    }));\n    this.disposables = new DisposableStore();\n    this.disposables.add(workbenchListOptionsDisposable);\n    this.contextKeyService = createScopedContextKeyService(contextKeyService, this);\n    this.themeService = themeService;\n    this.horizontalScrolling = options.horizontalScrolling;\n    this.listSupportsMultiSelect = WorkbenchListSupportsMultiSelectContextKey.bindTo(this.contextKeyService);\n    this.listSupportsMultiSelect.set(options.multipleSelectionSupport !== false);\n    const listSelectionNavigation = WorkbenchListSelectionNavigation.bindTo(this.contextKeyService);\n    listSelectionNavigation.set(Boolean(options.selectionNavigation));\n    this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n    this.disposables.add(this.contextKeyService);\n    this.disposables.add(listService.register(this));\n\n    if (options.overrideStyles) {\n      this.updateStyles(options.overrideStyles);\n    }\n\n    if (options.overrideStyles) {\n      this.disposables.add(attachListStyler(this, themeService, options.overrideStyles));\n    }\n\n    this.disposables.add(configurationService.onDidChangeConfiguration(e => {\n      if (e.affectsConfiguration(multiSelectModifierSettingKey)) {\n        this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n      }\n\n      let options = {};\n\n      if (e.affectsConfiguration(horizontalScrollingKey) && this.horizontalScrolling === undefined) {\n        const horizontalScrolling = Boolean(configurationService.getValue(horizontalScrollingKey));\n        options = Object.assign(Object.assign({}, options), {\n          horizontalScrolling\n        });\n      }\n\n      if (e.affectsConfiguration(listSmoothScrolling)) {\n        const smoothScrolling = Boolean(configurationService.getValue(listSmoothScrolling));\n        options = Object.assign(Object.assign({}, options), {\n          smoothScrolling\n        });\n      }\n\n      if (e.affectsConfiguration(mouseWheelScrollSensitivityKey)) {\n        const mouseWheelScrollSensitivity = configurationService.getValue(mouseWheelScrollSensitivityKey);\n        options = Object.assign(Object.assign({}, options), {\n          mouseWheelScrollSensitivity\n        });\n      }\n\n      if (e.affectsConfiguration(fastScrollSensitivityKey)) {\n        const fastScrollSensitivity = configurationService.getValue(fastScrollSensitivityKey);\n        options = Object.assign(Object.assign({}, options), {\n          fastScrollSensitivity\n        });\n      }\n\n      if (Object.keys(options).length > 0) {\n        this.updateOptions(options);\n      }\n    }));\n    this.navigator = new ListResourceNavigator(this, Object.assign({\n      configurationService\n    }, options));\n    this.disposables.add(this.navigator);\n  }\n\n  updateOptions(options) {\n    super.updateOptions(options);\n\n    if (options.overrideStyles) {\n      this.updateStyles(options.overrideStyles);\n    }\n\n    if (options.multipleSelectionSupport !== undefined) {\n      this.listSupportsMultiSelect.set(!!options.multipleSelectionSupport);\n    }\n  }\n\n  updateStyles(styles) {\n    var _a;\n\n    (_a = this._styler) === null || _a === void 0 ? void 0 : _a.dispose();\n    this._styler = attachListStyler(this, this.themeService, styles);\n  }\n\n  dispose() {\n    var _a;\n\n    (_a = this._styler) === null || _a === void 0 ? void 0 : _a.dispose();\n    this.disposables.dispose();\n    super.dispose();\n  }\n\n};\nWorkbenchPagedList = __decorate([__param(5, IContextKeyService), __param(6, IListService), __param(7, IThemeService), __param(8, IConfigurationService), __param(9, IKeybindingService)], WorkbenchPagedList);\nexport { WorkbenchPagedList };\nlet WorkbenchTable = class WorkbenchTable extends Table {\n  constructor(user, container, delegate, columns, renderers, options, contextKeyService, listService, themeService, configurationService, keybindingService) {\n    const horizontalScrolling = typeof options.horizontalScrolling !== 'undefined' ? options.horizontalScrolling : Boolean(configurationService.getValue(horizontalScrollingKey));\n    const [workbenchListOptions, workbenchListOptionsDisposable] = toWorkbenchListOptions(options, configurationService, keybindingService);\n    super(user, container, delegate, columns, renderers, Object.assign(Object.assign(Object.assign({\n      keyboardSupport: false\n    }, computeStyles(themeService.getColorTheme(), defaultListStyles)), workbenchListOptions), {\n      horizontalScrolling\n    }));\n    this.disposables.add(workbenchListOptionsDisposable);\n    this.contextKeyService = createScopedContextKeyService(contextKeyService, this);\n    this.themeService = themeService;\n    this.listSupportsMultiSelect = WorkbenchListSupportsMultiSelectContextKey.bindTo(this.contextKeyService);\n    this.listSupportsMultiSelect.set(options.multipleSelectionSupport !== false);\n    const listSelectionNavigation = WorkbenchListSelectionNavigation.bindTo(this.contextKeyService);\n    listSelectionNavigation.set(Boolean(options.selectionNavigation));\n    this.listHasSelectionOrFocus = WorkbenchListHasSelectionOrFocus.bindTo(this.contextKeyService);\n    this.listDoubleSelection = WorkbenchListDoubleSelection.bindTo(this.contextKeyService);\n    this.listMultiSelection = WorkbenchListMultiSelection.bindTo(this.contextKeyService);\n    this.horizontalScrolling = options.horizontalScrolling;\n    this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n    this.disposables.add(this.contextKeyService);\n    this.disposables.add(listService.register(this));\n\n    if (options.overrideStyles) {\n      this.updateStyles(options.overrideStyles);\n    }\n\n    this.disposables.add(this.onDidChangeSelection(() => {\n      const selection = this.getSelection();\n      const focus = this.getFocus();\n      this.contextKeyService.bufferChangeEvents(() => {\n        this.listHasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n        this.listMultiSelection.set(selection.length > 1);\n        this.listDoubleSelection.set(selection.length === 2);\n      });\n    }));\n    this.disposables.add(this.onDidChangeFocus(() => {\n      const selection = this.getSelection();\n      const focus = this.getFocus();\n      this.listHasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n    }));\n    this.disposables.add(configurationService.onDidChangeConfiguration(e => {\n      if (e.affectsConfiguration(multiSelectModifierSettingKey)) {\n        this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n      }\n\n      let options = {};\n\n      if (e.affectsConfiguration(horizontalScrollingKey) && this.horizontalScrolling === undefined) {\n        const horizontalScrolling = Boolean(configurationService.getValue(horizontalScrollingKey));\n        options = Object.assign(Object.assign({}, options), {\n          horizontalScrolling\n        });\n      }\n\n      if (e.affectsConfiguration(listSmoothScrolling)) {\n        const smoothScrolling = Boolean(configurationService.getValue(listSmoothScrolling));\n        options = Object.assign(Object.assign({}, options), {\n          smoothScrolling\n        });\n      }\n\n      if (e.affectsConfiguration(mouseWheelScrollSensitivityKey)) {\n        const mouseWheelScrollSensitivity = configurationService.getValue(mouseWheelScrollSensitivityKey);\n        options = Object.assign(Object.assign({}, options), {\n          mouseWheelScrollSensitivity\n        });\n      }\n\n      if (e.affectsConfiguration(fastScrollSensitivityKey)) {\n        const fastScrollSensitivity = configurationService.getValue(fastScrollSensitivityKey);\n        options = Object.assign(Object.assign({}, options), {\n          fastScrollSensitivity\n        });\n      }\n\n      if (Object.keys(options).length > 0) {\n        this.updateOptions(options);\n      }\n    }));\n    this.navigator = new TableResourceNavigator(this, Object.assign({\n      configurationService\n    }, options));\n    this.disposables.add(this.navigator);\n  }\n\n  updateOptions(options) {\n    super.updateOptions(options);\n\n    if (options.overrideStyles) {\n      this.updateStyles(options.overrideStyles);\n    }\n\n    if (options.multipleSelectionSupport !== undefined) {\n      this.listSupportsMultiSelect.set(!!options.multipleSelectionSupport);\n    }\n  }\n\n  updateStyles(styles) {\n    var _a;\n\n    (_a = this._styler) === null || _a === void 0 ? void 0 : _a.dispose();\n    this._styler = attachListStyler(this, this.themeService, styles);\n  }\n\n  dispose() {\n    var _a;\n\n    (_a = this._styler) === null || _a === void 0 ? void 0 : _a.dispose();\n    this.disposables.dispose();\n    super.dispose();\n  }\n\n};\nWorkbenchTable = __decorate([__param(6, IContextKeyService), __param(7, IListService), __param(8, IThemeService), __param(9, IConfigurationService), __param(10, IKeybindingService)], WorkbenchTable);\nexport { WorkbenchTable };\n\nclass ResourceNavigator extends Disposable {\n  constructor(widget, options) {\n    var _a;\n\n    super();\n    this.widget = widget;\n    this._onDidOpen = this._register(new Emitter());\n    this.onDidOpen = this._onDidOpen.event;\n\n    this._register(Event.filter(this.widget.onDidChangeSelection, e => e.browserEvent instanceof KeyboardEvent)(e => this.onSelectionFromKeyboard(e)));\n\n    this._register(this.widget.onPointer(e => this.onPointer(e.element, e.browserEvent)));\n\n    this._register(this.widget.onMouseDblClick(e => this.onMouseDblClick(e.element, e.browserEvent)));\n\n    if (typeof (options === null || options === void 0 ? void 0 : options.openOnSingleClick) !== 'boolean' && (options === null || options === void 0 ? void 0 : options.configurationService)) {\n      this.openOnSingleClick = (options === null || options === void 0 ? void 0 : options.configurationService.getValue(openModeSettingKey)) !== 'doubleClick';\n\n      this._register(options === null || options === void 0 ? void 0 : options.configurationService.onDidChangeConfiguration(() => {\n        this.openOnSingleClick = (options === null || options === void 0 ? void 0 : options.configurationService.getValue(openModeSettingKey)) !== 'doubleClick';\n      }));\n    } else {\n      this.openOnSingleClick = (_a = options === null || options === void 0 ? void 0 : options.openOnSingleClick) !== null && _a !== void 0 ? _a : true;\n    }\n  }\n\n  onSelectionFromKeyboard(event) {\n    if (event.elements.length !== 1) {\n      return;\n    }\n\n    const selectionKeyboardEvent = event.browserEvent;\n    const preserveFocus = typeof selectionKeyboardEvent.preserveFocus === 'boolean' ? selectionKeyboardEvent.preserveFocus : true;\n    const pinned = typeof selectionKeyboardEvent.pinned === 'boolean' ? selectionKeyboardEvent.pinned : !preserveFocus;\n    const sideBySide = false;\n\n    this._open(this.getSelectedElement(), preserveFocus, pinned, sideBySide, event.browserEvent);\n  }\n\n  onPointer(element, browserEvent) {\n    if (!this.openOnSingleClick) {\n      return;\n    }\n\n    const isDoubleClick = browserEvent.detail === 2;\n\n    if (isDoubleClick) {\n      return;\n    }\n\n    const isMiddleClick = browserEvent.button === 1;\n    const preserveFocus = true;\n    const pinned = isMiddleClick;\n    const sideBySide = browserEvent.ctrlKey || browserEvent.metaKey || browserEvent.altKey;\n\n    this._open(element, preserveFocus, pinned, sideBySide, browserEvent);\n  }\n\n  onMouseDblClick(element, browserEvent) {\n    if (!browserEvent) {\n      return;\n    } // copied from AbstractTree\n\n\n    const target = browserEvent.target;\n    const onTwistie = target.classList.contains('monaco-tl-twistie') || target.classList.contains('monaco-icon-label') && target.classList.contains('folder-icon') && browserEvent.offsetX < 16;\n\n    if (onTwistie) {\n      return;\n    }\n\n    const preserveFocus = false;\n    const pinned = true;\n    const sideBySide = browserEvent.ctrlKey || browserEvent.metaKey || browserEvent.altKey;\n\n    this._open(element, preserveFocus, pinned, sideBySide, browserEvent);\n  }\n\n  _open(element, preserveFocus, pinned, sideBySide, browserEvent) {\n    if (!element) {\n      return;\n    }\n\n    this._onDidOpen.fire({\n      editorOptions: {\n        preserveFocus,\n        pinned,\n        revealIfVisible: true\n      },\n      sideBySide,\n      element,\n      browserEvent\n    });\n  }\n\n}\n\nclass ListResourceNavigator extends ResourceNavigator {\n  constructor(widget, options) {\n    super(widget, options);\n    this.widget = widget;\n  }\n\n  getSelectedElement() {\n    return this.widget.getSelectedElements()[0];\n  }\n\n}\n\nclass TableResourceNavigator extends ResourceNavigator {\n  constructor(widget, options) {\n    super(widget, options);\n  }\n\n  getSelectedElement() {\n    return this.widget.getSelectedElements()[0];\n  }\n\n}\n\nclass TreeResourceNavigator extends ResourceNavigator {\n  constructor(widget, options) {\n    super(widget, options);\n  }\n\n  getSelectedElement() {\n    var _a;\n\n    return (_a = this.widget.getSelection()[0]) !== null && _a !== void 0 ? _a : undefined;\n  }\n\n}\n\nfunction createKeyboardNavigationEventFilter(container, keybindingService) {\n  let inChord = false;\n  return event => {\n    if (event.toKeybinding().isModifierKey()) {\n      return false;\n    }\n\n    if (inChord) {\n      inChord = false;\n      return false;\n    }\n\n    const result = keybindingService.softDispatch(event, container);\n\n    if (result && result.enterChord) {\n      inChord = true;\n      return false;\n    }\n\n    inChord = false;\n    return true;\n  };\n}\n\nlet WorkbenchObjectTree = class WorkbenchObjectTree extends ObjectTree {\n  constructor(user, container, delegate, renderers, options, contextKeyService, listService, themeService, configurationService, keybindingService, accessibilityService) {\n    const {\n      options: treeOptions,\n      getAutomaticKeyboardNavigation,\n      disposable\n    } = workbenchTreeDataPreamble(container, options, contextKeyService, configurationService, keybindingService, accessibilityService);\n    super(user, container, delegate, renderers, treeOptions);\n    this.disposables.add(disposable);\n    this.internals = new WorkbenchTreeInternals(this, options, getAutomaticKeyboardNavigation, options.overrideStyles, contextKeyService, listService, themeService, configurationService, accessibilityService);\n    this.disposables.add(this.internals);\n  }\n\n  updateOptions(options) {\n    super.updateOptions(options);\n    this.internals.updateOptions(options);\n  }\n\n};\nWorkbenchObjectTree = __decorate([__param(5, IContextKeyService), __param(6, IListService), __param(7, IThemeService), __param(8, IConfigurationService), __param(9, IKeybindingService), __param(10, IAccessibilityService)], WorkbenchObjectTree);\nexport { WorkbenchObjectTree };\nlet WorkbenchCompressibleObjectTree = class WorkbenchCompressibleObjectTree extends CompressibleObjectTree {\n  constructor(user, container, delegate, renderers, options, contextKeyService, listService, themeService, configurationService, keybindingService, accessibilityService) {\n    const {\n      options: treeOptions,\n      getAutomaticKeyboardNavigation,\n      disposable\n    } = workbenchTreeDataPreamble(container, options, contextKeyService, configurationService, keybindingService, accessibilityService);\n    super(user, container, delegate, renderers, treeOptions);\n    this.disposables.add(disposable);\n    this.internals = new WorkbenchTreeInternals(this, options, getAutomaticKeyboardNavigation, options.overrideStyles, contextKeyService, listService, themeService, configurationService, accessibilityService);\n    this.disposables.add(this.internals);\n  }\n\n  updateOptions(options = {}) {\n    super.updateOptions(options);\n\n    if (options.overrideStyles) {\n      this.internals.updateStyleOverrides(options.overrideStyles);\n    }\n\n    this.internals.updateOptions(options);\n  }\n\n};\nWorkbenchCompressibleObjectTree = __decorate([__param(5, IContextKeyService), __param(6, IListService), __param(7, IThemeService), __param(8, IConfigurationService), __param(9, IKeybindingService), __param(10, IAccessibilityService)], WorkbenchCompressibleObjectTree);\nexport { WorkbenchCompressibleObjectTree };\nlet WorkbenchDataTree = class WorkbenchDataTree extends DataTree {\n  constructor(user, container, delegate, renderers, dataSource, options, contextKeyService, listService, themeService, configurationService, keybindingService, accessibilityService) {\n    const {\n      options: treeOptions,\n      getAutomaticKeyboardNavigation,\n      disposable\n    } = workbenchTreeDataPreamble(container, options, contextKeyService, configurationService, keybindingService, accessibilityService);\n    super(user, container, delegate, renderers, dataSource, treeOptions);\n    this.disposables.add(disposable);\n    this.internals = new WorkbenchTreeInternals(this, options, getAutomaticKeyboardNavigation, options.overrideStyles, contextKeyService, listService, themeService, configurationService, accessibilityService);\n    this.disposables.add(this.internals);\n  }\n\n  updateOptions(options = {}) {\n    super.updateOptions(options);\n\n    if (options.overrideStyles) {\n      this.internals.updateStyleOverrides(options.overrideStyles);\n    }\n\n    this.internals.updateOptions(options);\n  }\n\n};\nWorkbenchDataTree = __decorate([__param(6, IContextKeyService), __param(7, IListService), __param(8, IThemeService), __param(9, IConfigurationService), __param(10, IKeybindingService), __param(11, IAccessibilityService)], WorkbenchDataTree);\nexport { WorkbenchDataTree };\nlet WorkbenchAsyncDataTree = class WorkbenchAsyncDataTree extends AsyncDataTree {\n  constructor(user, container, delegate, renderers, dataSource, options, contextKeyService, listService, themeService, configurationService, keybindingService, accessibilityService) {\n    const {\n      options: treeOptions,\n      getAutomaticKeyboardNavigation,\n      disposable\n    } = workbenchTreeDataPreamble(container, options, contextKeyService, configurationService, keybindingService, accessibilityService);\n    super(user, container, delegate, renderers, dataSource, treeOptions);\n    this.disposables.add(disposable);\n    this.internals = new WorkbenchTreeInternals(this, options, getAutomaticKeyboardNavigation, options.overrideStyles, contextKeyService, listService, themeService, configurationService, accessibilityService);\n    this.disposables.add(this.internals);\n  }\n\n  get onDidOpen() {\n    return this.internals.onDidOpen;\n  }\n\n  updateOptions(options = {}) {\n    super.updateOptions(options);\n\n    if (options.overrideStyles) {\n      this.internals.updateStyleOverrides(options.overrideStyles);\n    }\n\n    this.internals.updateOptions(options);\n  }\n\n};\nWorkbenchAsyncDataTree = __decorate([__param(6, IContextKeyService), __param(7, IListService), __param(8, IThemeService), __param(9, IConfigurationService), __param(10, IKeybindingService), __param(11, IAccessibilityService)], WorkbenchAsyncDataTree);\nexport { WorkbenchAsyncDataTree };\nlet WorkbenchCompressibleAsyncDataTree = class WorkbenchCompressibleAsyncDataTree extends CompressibleAsyncDataTree {\n  constructor(user, container, virtualDelegate, compressionDelegate, renderers, dataSource, options, contextKeyService, listService, themeService, configurationService, keybindingService, accessibilityService) {\n    const {\n      options: treeOptions,\n      getAutomaticKeyboardNavigation,\n      disposable\n    } = workbenchTreeDataPreamble(container, options, contextKeyService, configurationService, keybindingService, accessibilityService);\n    super(user, container, virtualDelegate, compressionDelegate, renderers, dataSource, treeOptions);\n    this.disposables.add(disposable);\n    this.internals = new WorkbenchTreeInternals(this, options, getAutomaticKeyboardNavigation, options.overrideStyles, contextKeyService, listService, themeService, configurationService, accessibilityService);\n    this.disposables.add(this.internals);\n  }\n\n  updateOptions(options) {\n    super.updateOptions(options);\n    this.internals.updateOptions(options);\n  }\n\n};\nWorkbenchCompressibleAsyncDataTree = __decorate([__param(7, IContextKeyService), __param(8, IListService), __param(9, IThemeService), __param(10, IConfigurationService), __param(11, IKeybindingService), __param(12, IAccessibilityService)], WorkbenchCompressibleAsyncDataTree);\nexport { WorkbenchCompressibleAsyncDataTree };\n\nfunction workbenchTreeDataPreamble(container, options, contextKeyService, configurationService, keybindingService, accessibilityService) {\n  var _a;\n\n  const getAutomaticKeyboardNavigation = () => {\n    // give priority to the context key value to disable this completely\n    let automaticKeyboardNavigation = Boolean(contextKeyService.getContextKeyValue(WorkbenchListAutomaticKeyboardNavigationKey));\n\n    if (automaticKeyboardNavigation) {\n      automaticKeyboardNavigation = Boolean(configurationService.getValue(automaticKeyboardNavigationSettingKey));\n    }\n\n    return automaticKeyboardNavigation;\n  };\n\n  const accessibilityOn = accessibilityService.isScreenReaderOptimized();\n  const keyboardNavigation = options.simpleKeyboardNavigation || accessibilityOn ? 'simple' : configurationService.getValue(keyboardNavigationSettingKey);\n  const horizontalScrolling = options.horizontalScrolling !== undefined ? options.horizontalScrolling : Boolean(configurationService.getValue(horizontalScrollingKey));\n  const [workbenchListOptions, disposable] = toWorkbenchListOptions(options, configurationService, keybindingService);\n  const additionalScrollHeight = options.additionalScrollHeight;\n  return {\n    getAutomaticKeyboardNavigation,\n    disposable,\n    options: Object.assign(Object.assign({\n      // ...options, // TODO@Joao why is this not splatted here?\n      keyboardSupport: false\n    }, workbenchListOptions), {\n      indent: typeof configurationService.getValue(treeIndentKey) === 'number' ? configurationService.getValue(treeIndentKey) : undefined,\n      renderIndentGuides: configurationService.getValue(treeRenderIndentGuidesKey),\n      smoothScrolling: Boolean(configurationService.getValue(listSmoothScrolling)),\n      automaticKeyboardNavigation: getAutomaticKeyboardNavigation(),\n      simpleKeyboardNavigation: keyboardNavigation === 'simple',\n      filterOnType: keyboardNavigation === 'filter',\n      horizontalScrolling,\n      keyboardNavigationEventFilter: createKeyboardNavigationEventFilter(container, keybindingService),\n      additionalScrollHeight,\n      hideTwistiesOfChildlessElements: options.hideTwistiesOfChildlessElements,\n      expandOnlyOnTwistieClick: (_a = options.expandOnlyOnTwistieClick) !== null && _a !== void 0 ? _a : configurationService.getValue(treeExpandMode) === 'doubleClick'\n    })\n  };\n}\n\nlet WorkbenchTreeInternals = class WorkbenchTreeInternals {\n  constructor(tree, options, getAutomaticKeyboardNavigation, overrideStyles, contextKeyService, listService, themeService, configurationService, accessibilityService) {\n    this.tree = tree;\n    this.themeService = themeService;\n    this.disposables = [];\n    this.contextKeyService = createScopedContextKeyService(contextKeyService, tree);\n    this.listSupportsMultiSelect = WorkbenchListSupportsMultiSelectContextKey.bindTo(this.contextKeyService);\n    this.listSupportsMultiSelect.set(options.multipleSelectionSupport !== false);\n    const listSelectionNavigation = WorkbenchListSelectionNavigation.bindTo(this.contextKeyService);\n    listSelectionNavigation.set(Boolean(options.selectionNavigation));\n    this.hasSelectionOrFocus = WorkbenchListHasSelectionOrFocus.bindTo(this.contextKeyService);\n    this.hasDoubleSelection = WorkbenchListDoubleSelection.bindTo(this.contextKeyService);\n    this.hasMultiSelection = WorkbenchListMultiSelection.bindTo(this.contextKeyService);\n    this.treeElementCanCollapse = WorkbenchTreeElementCanCollapse.bindTo(this.contextKeyService);\n    this.treeElementHasParent = WorkbenchTreeElementHasParent.bindTo(this.contextKeyService);\n    this.treeElementCanExpand = WorkbenchTreeElementCanExpand.bindTo(this.contextKeyService);\n    this.treeElementHasChild = WorkbenchTreeElementHasChild.bindTo(this.contextKeyService);\n    this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n    const interestingContextKeys = new Set();\n    interestingContextKeys.add(WorkbenchListAutomaticKeyboardNavigationKey);\n\n    const updateKeyboardNavigation = () => {\n      const accessibilityOn = accessibilityService.isScreenReaderOptimized();\n      const keyboardNavigation = accessibilityOn ? 'simple' : configurationService.getValue(keyboardNavigationSettingKey);\n      tree.updateOptions({\n        simpleKeyboardNavigation: keyboardNavigation === 'simple',\n        filterOnType: keyboardNavigation === 'filter'\n      });\n    };\n\n    this.updateStyleOverrides(overrideStyles);\n\n    const updateCollapseContextKeys = () => {\n      const focus = tree.getFocus()[0];\n\n      if (!focus) {\n        return;\n      }\n\n      const node = tree.getNode(focus);\n      this.treeElementCanCollapse.set(node.collapsible && !node.collapsed);\n      this.treeElementHasParent.set(!!tree.getParentElement(focus));\n      this.treeElementCanExpand.set(node.collapsible && node.collapsed);\n      this.treeElementHasChild.set(!!tree.getFirstElementChild(focus));\n    };\n\n    this.disposables.push(this.contextKeyService, listService.register(tree), tree.onDidChangeSelection(() => {\n      const selection = tree.getSelection();\n      const focus = tree.getFocus();\n      this.contextKeyService.bufferChangeEvents(() => {\n        this.hasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n        this.hasMultiSelection.set(selection.length > 1);\n        this.hasDoubleSelection.set(selection.length === 2);\n      });\n    }), tree.onDidChangeFocus(() => {\n      const selection = tree.getSelection();\n      const focus = tree.getFocus();\n      this.hasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n      updateCollapseContextKeys();\n    }), tree.onDidChangeCollapseState(updateCollapseContextKeys), tree.onDidChangeModel(updateCollapseContextKeys), configurationService.onDidChangeConfiguration(e => {\n      let newOptions = {};\n\n      if (e.affectsConfiguration(multiSelectModifierSettingKey)) {\n        this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n      }\n\n      if (e.affectsConfiguration(treeIndentKey)) {\n        const indent = configurationService.getValue(treeIndentKey);\n        newOptions = Object.assign(Object.assign({}, newOptions), {\n          indent\n        });\n      }\n\n      if (e.affectsConfiguration(treeRenderIndentGuidesKey)) {\n        const renderIndentGuides = configurationService.getValue(treeRenderIndentGuidesKey);\n        newOptions = Object.assign(Object.assign({}, newOptions), {\n          renderIndentGuides\n        });\n      }\n\n      if (e.affectsConfiguration(listSmoothScrolling)) {\n        const smoothScrolling = Boolean(configurationService.getValue(listSmoothScrolling));\n        newOptions = Object.assign(Object.assign({}, newOptions), {\n          smoothScrolling\n        });\n      }\n\n      if (e.affectsConfiguration(keyboardNavigationSettingKey)) {\n        updateKeyboardNavigation();\n      }\n\n      if (e.affectsConfiguration(automaticKeyboardNavigationSettingKey)) {\n        newOptions = Object.assign(Object.assign({}, newOptions), {\n          automaticKeyboardNavigation: getAutomaticKeyboardNavigation()\n        });\n      }\n\n      if (e.affectsConfiguration(horizontalScrollingKey) && options.horizontalScrolling === undefined) {\n        const horizontalScrolling = Boolean(configurationService.getValue(horizontalScrollingKey));\n        newOptions = Object.assign(Object.assign({}, newOptions), {\n          horizontalScrolling\n        });\n      }\n\n      if (e.affectsConfiguration(treeExpandMode) && options.expandOnlyOnTwistieClick === undefined) {\n        newOptions = Object.assign(Object.assign({}, newOptions), {\n          expandOnlyOnTwistieClick: configurationService.getValue(treeExpandMode) === 'doubleClick'\n        });\n      }\n\n      if (e.affectsConfiguration(mouseWheelScrollSensitivityKey)) {\n        const mouseWheelScrollSensitivity = configurationService.getValue(mouseWheelScrollSensitivityKey);\n        newOptions = Object.assign(Object.assign({}, newOptions), {\n          mouseWheelScrollSensitivity\n        });\n      }\n\n      if (e.affectsConfiguration(fastScrollSensitivityKey)) {\n        const fastScrollSensitivity = configurationService.getValue(fastScrollSensitivityKey);\n        newOptions = Object.assign(Object.assign({}, newOptions), {\n          fastScrollSensitivity\n        });\n      }\n\n      if (Object.keys(newOptions).length > 0) {\n        tree.updateOptions(newOptions);\n      }\n    }), this.contextKeyService.onDidChangeContext(e => {\n      if (e.affectsSome(interestingContextKeys)) {\n        tree.updateOptions({\n          automaticKeyboardNavigation: getAutomaticKeyboardNavigation()\n        });\n      }\n    }), accessibilityService.onDidChangeScreenReaderOptimized(() => updateKeyboardNavigation()));\n    this.navigator = new TreeResourceNavigator(tree, Object.assign({\n      configurationService\n    }, options));\n    this.disposables.push(this.navigator);\n  }\n\n  get onDidOpen() {\n    return this.navigator.onDidOpen;\n  }\n\n  updateOptions(options) {\n    if (options.multipleSelectionSupport !== undefined) {\n      this.listSupportsMultiSelect.set(!!options.multipleSelectionSupport);\n    }\n  }\n\n  updateStyleOverrides(overrideStyles) {\n    dispose(this.styler);\n    this.styler = overrideStyles ? attachListStyler(this.tree, this.themeService, overrideStyles) : Disposable.None;\n  }\n\n  dispose() {\n    this.disposables = dispose(this.disposables);\n    dispose(this.styler);\n    this.styler = undefined;\n  }\n\n};\nWorkbenchTreeInternals = __decorate([__param(4, IContextKeyService), __param(5, IListService), __param(6, IThemeService), __param(7, IConfigurationService), __param(8, IAccessibilityService)], WorkbenchTreeInternals);\nconst configurationRegistry = Registry.as(ConfigurationExtensions.Configuration);\nconfigurationRegistry.registerConfiguration({\n  id: 'workbench',\n  order: 7,\n  title: localize('workbenchConfigurationTitle', \"Workbench\"),\n  type: 'object',\n  properties: {\n    [multiSelectModifierSettingKey]: {\n      type: 'string',\n      enum: ['ctrlCmd', 'alt'],\n      enumDescriptions: [localize('multiSelectModifier.ctrlCmd', \"Maps to `Control` on Windows and Linux and to `Command` on macOS.\"), localize('multiSelectModifier.alt', \"Maps to `Alt` on Windows and Linux and to `Option` on macOS.\")],\n      default: 'ctrlCmd',\n      description: localize({\n        key: 'multiSelectModifier',\n        comment: ['- `ctrlCmd` refers to a value the setting can take and should not be localized.', '- `Control` and `Command` refer to the modifier keys Ctrl or Cmd on the keyboard and can be localized.']\n      }, \"The modifier to be used to add an item in trees and lists to a multi-selection with the mouse (for example in the explorer, open editors and scm view). The 'Open to Side' mouse gestures - if supported - will adapt such that they do not conflict with the multiselect modifier.\")\n    },\n    [openModeSettingKey]: {\n      type: 'string',\n      enum: ['singleClick', 'doubleClick'],\n      default: 'singleClick',\n      description: localize({\n        key: 'openModeModifier',\n        comment: ['`singleClick` and `doubleClick` refers to a value the setting can take and should not be localized.']\n      }, \"Controls how to open items in trees and lists using the mouse (if supported). Note that some trees and lists might choose to ignore this setting if it is not applicable.\")\n    },\n    [horizontalScrollingKey]: {\n      type: 'boolean',\n      default: false,\n      description: localize('horizontalScrolling setting', \"Controls whether lists and trees support horizontal scrolling in the workbench. Warning: turning on this setting has a performance implication.\")\n    },\n    [treeIndentKey]: {\n      type: 'number',\n      default: 8,\n      minimum: 4,\n      maximum: 40,\n      description: localize('tree indent setting', \"Controls tree indentation in pixels.\")\n    },\n    [treeRenderIndentGuidesKey]: {\n      type: 'string',\n      enum: ['none', 'onHover', 'always'],\n      default: 'onHover',\n      description: localize('render tree indent guides', \"Controls whether the tree should render indent guides.\")\n    },\n    [listSmoothScrolling]: {\n      type: 'boolean',\n      default: false,\n      description: localize('list smoothScrolling setting', \"Controls whether lists and trees have smooth scrolling.\")\n    },\n    [mouseWheelScrollSensitivityKey]: {\n      type: 'number',\n      default: 1,\n      description: localize('Mouse Wheel Scroll Sensitivity', \"A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.\")\n    },\n    [fastScrollSensitivityKey]: {\n      type: 'number',\n      default: 5,\n      description: localize('Fast Scroll Sensitivity', \"Scrolling speed multiplier when pressing `Alt`.\")\n    },\n    [keyboardNavigationSettingKey]: {\n      type: 'string',\n      enum: ['simple', 'highlight', 'filter'],\n      enumDescriptions: [localize('keyboardNavigationSettingKey.simple', \"Simple keyboard navigation focuses elements which match the keyboard input. Matching is done only on prefixes.\"), localize('keyboardNavigationSettingKey.highlight', \"Highlight keyboard navigation highlights elements which match the keyboard input. Further up and down navigation will traverse only the highlighted elements.\"), localize('keyboardNavigationSettingKey.filter', \"Filter keyboard navigation will filter out and hide all the elements which do not match the keyboard input.\")],\n      default: 'highlight',\n      description: localize('keyboardNavigationSettingKey', \"Controls the keyboard navigation style for lists and trees in the workbench. Can be simple, highlight and filter.\")\n    },\n    [automaticKeyboardNavigationSettingKey]: {\n      type: 'boolean',\n      default: true,\n      markdownDescription: localize('automatic keyboard navigation setting', \"Controls whether keyboard navigation in lists and trees is automatically triggered simply by typing. If set to `false`, keyboard navigation is only triggered when executing the `list.toggleKeyboardNavigation` command, for which you can assign a keyboard shortcut.\")\n    },\n    [treeExpandMode]: {\n      type: 'string',\n      enum: ['singleClick', 'doubleClick'],\n      default: 'singleClick',\n      description: localize('expand mode', \"Controls how tree folders are expanded when clicking the folder names. Note that some trees and lists might choose to ignore this setting if it is not applicable.\")\n    }\n  }\n});","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/platform/list/browser/listService.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","createStyleSheet","PagedList","DefaultStyleController","isSelectionRangeChangeEvent","isSelectionSingleChangeEvent","List","Table","AsyncDataTree","CompressibleAsyncDataTree","DataTree","CompressibleObjectTree","ObjectTree","Emitter","Event","combinedDisposable","Disposable","DisposableStore","dispose","toDisposable","localize","IAccessibilityService","IConfigurationService","Extensions","ConfigurationExtensions","ContextKeyExpr","IContextKeyService","RawContextKey","InputFocusedContextKey","createDecorator","IKeybindingService","Registry","attachListStyler","computeStyles","defaultListStyles","IThemeService","IListService","ListService","constructor","_themeService","disposables","lists","_lastFocusedWidget","undefined","_hasCreatedStyleController","lastFocusedList","setLastFocusedList","widget","_a","_b","getHTMLElement","classList","remove","add","register","extraContextKeys","styleController","some","l","Error","registeredList","push","document","activeElement","onDidFocus","splice","indexOf","onDidDispose","filter","RawWorkbenchListFocusContextKey","WorkbenchListSupportsMultiSelectContextKey","WorkbenchListFocusContextKey","and","not","WorkbenchListHasSelectionOrFocus","WorkbenchListDoubleSelection","WorkbenchListMultiSelection","WorkbenchListSelectionNavigation","WorkbenchTreeElementCanCollapse","WorkbenchTreeElementHasParent","WorkbenchTreeElementCanExpand","WorkbenchTreeElementHasChild","WorkbenchListAutomaticKeyboardNavigationKey","createScopedContextKeyService","contextKeyService","result","createScoped","bindTo","multiSelectModifierSettingKey","openModeSettingKey","horizontalScrollingKey","keyboardNavigationSettingKey","automaticKeyboardNavigationSettingKey","treeIndentKey","treeRenderIndentGuidesKey","listSmoothScrolling","mouseWheelScrollSensitivityKey","fastScrollSensitivityKey","treeExpandMode","useAltAsMultipleSelectionModifier","configurationService","getValue","MultipleSelectionController","registerListeners","_register","onDidChangeConfiguration","e","affectsConfiguration","event","browserEvent","altKey","toWorkbenchListOptions","options","keybindingService","assign","keyboardNavigationDelegate","mightProducePrintableCharacter","smoothScrolling","Boolean","mouseWheelScrollSensitivity","fastScrollSensitivity","multipleSelectionController","WorkbenchList","user","container","delegate","renderers","listService","themeService","horizontalScrolling","workbenchListOptions","workbenchListOptionsDisposable","keyboardSupport","getColorTheme","listSupportsMultiSelect","set","multipleSelectionSupport","listSelectionNavigation","selectionNavigation","listHasSelectionOrFocus","listDoubleSelection","listMultiSelection","_useAltAsMultipleSelectionModifier","overrideStyles","updateStyles","onDidChangeSelection","selection","getSelection","focus","getFocus","bufferChangeEvents","onDidChangeFocus","keys","updateOptions","navigator","ListResourceNavigator","styles","_styler","WorkbenchPagedList","WorkbenchTable","columns","TableResourceNavigator","ResourceNavigator","_onDidOpen","onDidOpen","KeyboardEvent","onSelectionFromKeyboard","onPointer","element","onMouseDblClick","openOnSingleClick","elements","selectionKeyboardEvent","preserveFocus","pinned","sideBySide","_open","getSelectedElement","isDoubleClick","detail","isMiddleClick","button","ctrlKey","metaKey","onTwistie","contains","offsetX","fire","editorOptions","revealIfVisible","getSelectedElements","TreeResourceNavigator","createKeyboardNavigationEventFilter","inChord","toKeybinding","isModifierKey","softDispatch","enterChord","WorkbenchObjectTree","accessibilityService","treeOptions","getAutomaticKeyboardNavigation","disposable","workbenchTreeDataPreamble","internals","WorkbenchTreeInternals","WorkbenchCompressibleObjectTree","updateStyleOverrides","WorkbenchDataTree","dataSource","WorkbenchAsyncDataTree","WorkbenchCompressibleAsyncDataTree","virtualDelegate","compressionDelegate","automaticKeyboardNavigation","getContextKeyValue","accessibilityOn","isScreenReaderOptimized","keyboardNavigation","simpleKeyboardNavigation","additionalScrollHeight","indent","renderIndentGuides","filterOnType","keyboardNavigationEventFilter","hideTwistiesOfChildlessElements","expandOnlyOnTwistieClick","tree","hasSelectionOrFocus","hasDoubleSelection","hasMultiSelection","treeElementCanCollapse","treeElementHasParent","treeElementCanExpand","treeElementHasChild","interestingContextKeys","Set","updateKeyboardNavigation","updateCollapseContextKeys","node","getNode","collapsible","collapsed","getParentElement","getFirstElementChild","onDidChangeCollapseState","onDidChangeModel","newOptions","onDidChangeContext","affectsSome","onDidChangeScreenReaderOptimized","styler","None","configurationRegistry","as","Configuration","registerConfiguration","id","order","title","type","properties","enum","enumDescriptions","default","description","comment","minimum","maximum","markdownDescription"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { createStyleSheet } from '../../../base/browser/dom.js';\nimport { PagedList } from '../../../base/browser/ui/list/listPaging.js';\nimport { DefaultStyleController, isSelectionRangeChangeEvent, isSelectionSingleChangeEvent, List } from '../../../base/browser/ui/list/listWidget.js';\nimport { Table } from '../../../base/browser/ui/table/tableWidget.js';\nimport { AsyncDataTree, CompressibleAsyncDataTree } from '../../../base/browser/ui/tree/asyncDataTree.js';\nimport { DataTree } from '../../../base/browser/ui/tree/dataTree.js';\nimport { CompressibleObjectTree, ObjectTree } from '../../../base/browser/ui/tree/objectTree.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { combinedDisposable, Disposable, DisposableStore, dispose, toDisposable } from '../../../base/common/lifecycle.js';\nimport { localize } from '../../../nls.js';\nimport { IAccessibilityService } from '../../accessibility/common/accessibility.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { Extensions as ConfigurationExtensions } from '../../configuration/common/configurationRegistry.js';\nimport { ContextKeyExpr, IContextKeyService, RawContextKey } from '../../contextkey/common/contextkey.js';\nimport { InputFocusedContextKey } from '../../contextkey/common/contextkeys.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport { IKeybindingService } from '../../keybinding/common/keybinding.js';\nimport { Registry } from '../../registry/common/platform.js';\nimport { attachListStyler, computeStyles, defaultListStyles } from '../../theme/common/styler.js';\nimport { IThemeService } from '../../theme/common/themeService.js';\nexport const IListService = createDecorator('listService');\nlet ListService = class ListService {\n    constructor(_themeService) {\n        this._themeService = _themeService;\n        this.disposables = new DisposableStore();\n        this.lists = [];\n        this._lastFocusedWidget = undefined;\n        this._hasCreatedStyleController = false;\n    }\n    get lastFocusedList() {\n        return this._lastFocusedWidget;\n    }\n    setLastFocusedList(widget) {\n        var _a, _b;\n        if (widget === this._lastFocusedWidget) {\n            return;\n        }\n        (_a = this._lastFocusedWidget) === null || _a === void 0 ? void 0 : _a.getHTMLElement().classList.remove('last-focused');\n        this._lastFocusedWidget = widget;\n        (_b = this._lastFocusedWidget) === null || _b === void 0 ? void 0 : _b.getHTMLElement().classList.add('last-focused');\n    }\n    register(widget, extraContextKeys) {\n        if (!this._hasCreatedStyleController) {\n            this._hasCreatedStyleController = true;\n            // create a shared default tree style sheet for performance reasons\n            const styleController = new DefaultStyleController(createStyleSheet(), '');\n            this.disposables.add(attachListStyler(styleController, this._themeService));\n        }\n        if (this.lists.some(l => l.widget === widget)) {\n            throw new Error('Cannot register the same widget multiple times');\n        }\n        // Keep in our lists list\n        const registeredList = { widget, extraContextKeys };\n        this.lists.push(registeredList);\n        // Check for currently being focused\n        if (widget.getHTMLElement() === document.activeElement) {\n            this.setLastFocusedList(widget);\n        }\n        return combinedDisposable(widget.onDidFocus(() => this.setLastFocusedList(widget)), toDisposable(() => this.lists.splice(this.lists.indexOf(registeredList), 1)), widget.onDidDispose(() => {\n            this.lists = this.lists.filter(l => l !== registeredList);\n            if (this._lastFocusedWidget === widget) {\n                this.setLastFocusedList(undefined);\n            }\n        }));\n    }\n    dispose() {\n        this.disposables.dispose();\n    }\n};\nListService = __decorate([\n    __param(0, IThemeService)\n], ListService);\nexport { ListService };\nconst RawWorkbenchListFocusContextKey = new RawContextKey('listFocus', true);\nexport const WorkbenchListSupportsMultiSelectContextKey = new RawContextKey('listSupportsMultiselect', true);\nexport const WorkbenchListFocusContextKey = ContextKeyExpr.and(RawWorkbenchListFocusContextKey, ContextKeyExpr.not(InputFocusedContextKey));\nexport const WorkbenchListHasSelectionOrFocus = new RawContextKey('listHasSelectionOrFocus', false);\nexport const WorkbenchListDoubleSelection = new RawContextKey('listDoubleSelection', false);\nexport const WorkbenchListMultiSelection = new RawContextKey('listMultiSelection', false);\nexport const WorkbenchListSelectionNavigation = new RawContextKey('listSelectionNavigation', false);\nexport const WorkbenchTreeElementCanCollapse = new RawContextKey('treeElementCanCollapse', false);\nexport const WorkbenchTreeElementHasParent = new RawContextKey('treeElementHasParent', false);\nexport const WorkbenchTreeElementCanExpand = new RawContextKey('treeElementCanExpand', false);\nexport const WorkbenchTreeElementHasChild = new RawContextKey('treeElementHasChild', false);\nexport const WorkbenchListAutomaticKeyboardNavigationKey = 'listAutomaticKeyboardNavigation';\nfunction createScopedContextKeyService(contextKeyService, widget) {\n    const result = contextKeyService.createScoped(widget.getHTMLElement());\n    RawWorkbenchListFocusContextKey.bindTo(result);\n    return result;\n}\nconst multiSelectModifierSettingKey = 'workbench.list.multiSelectModifier';\nconst openModeSettingKey = 'workbench.list.openMode';\nconst horizontalScrollingKey = 'workbench.list.horizontalScrolling';\nconst keyboardNavigationSettingKey = 'workbench.list.keyboardNavigation';\nconst automaticKeyboardNavigationSettingKey = 'workbench.list.automaticKeyboardNavigation';\nconst treeIndentKey = 'workbench.tree.indent';\nconst treeRenderIndentGuidesKey = 'workbench.tree.renderIndentGuides';\nconst listSmoothScrolling = 'workbench.list.smoothScrolling';\nconst mouseWheelScrollSensitivityKey = 'workbench.list.mouseWheelScrollSensitivity';\nconst fastScrollSensitivityKey = 'workbench.list.fastScrollSensitivity';\nconst treeExpandMode = 'workbench.tree.expandMode';\nfunction useAltAsMultipleSelectionModifier(configurationService) {\n    return configurationService.getValue(multiSelectModifierSettingKey) === 'alt';\n}\nclass MultipleSelectionController extends Disposable {\n    constructor(configurationService) {\n        super();\n        this.configurationService = configurationService;\n        this.useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n        this.registerListeners();\n    }\n    registerListeners() {\n        this._register(this.configurationService.onDidChangeConfiguration(e => {\n            if (e.affectsConfiguration(multiSelectModifierSettingKey)) {\n                this.useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(this.configurationService);\n            }\n        }));\n    }\n    isSelectionSingleChangeEvent(event) {\n        if (this.useAltAsMultipleSelectionModifier) {\n            return event.browserEvent.altKey;\n        }\n        return isSelectionSingleChangeEvent(event);\n    }\n    isSelectionRangeChangeEvent(event) {\n        return isSelectionRangeChangeEvent(event);\n    }\n}\nfunction toWorkbenchListOptions(options, configurationService, keybindingService) {\n    var _a;\n    const disposables = new DisposableStore();\n    const result = Object.assign(Object.assign({}, options), { keyboardNavigationDelegate: { mightProducePrintableCharacter(e) { return keybindingService.mightProducePrintableCharacter(e); } }, smoothScrolling: Boolean(configurationService.getValue(listSmoothScrolling)), mouseWheelScrollSensitivity: configurationService.getValue(mouseWheelScrollSensitivityKey), fastScrollSensitivity: configurationService.getValue(fastScrollSensitivityKey), multipleSelectionController: (_a = options.multipleSelectionController) !== null && _a !== void 0 ? _a : disposables.add(new MultipleSelectionController(configurationService)) });\n    return [result, disposables];\n}\nlet WorkbenchList = class WorkbenchList extends List {\n    constructor(user, container, delegate, renderers, options, contextKeyService, listService, themeService, configurationService, keybindingService) {\n        const horizontalScrolling = typeof options.horizontalScrolling !== 'undefined' ? options.horizontalScrolling : Boolean(configurationService.getValue(horizontalScrollingKey));\n        const [workbenchListOptions, workbenchListOptionsDisposable] = toWorkbenchListOptions(options, configurationService, keybindingService);\n        super(user, container, delegate, renderers, Object.assign(Object.assign(Object.assign({ keyboardSupport: false }, computeStyles(themeService.getColorTheme(), defaultListStyles)), workbenchListOptions), { horizontalScrolling }));\n        this.disposables.add(workbenchListOptionsDisposable);\n        this.contextKeyService = createScopedContextKeyService(contextKeyService, this);\n        this.themeService = themeService;\n        this.listSupportsMultiSelect = WorkbenchListSupportsMultiSelectContextKey.bindTo(this.contextKeyService);\n        this.listSupportsMultiSelect.set(options.multipleSelectionSupport !== false);\n        const listSelectionNavigation = WorkbenchListSelectionNavigation.bindTo(this.contextKeyService);\n        listSelectionNavigation.set(Boolean(options.selectionNavigation));\n        this.listHasSelectionOrFocus = WorkbenchListHasSelectionOrFocus.bindTo(this.contextKeyService);\n        this.listDoubleSelection = WorkbenchListDoubleSelection.bindTo(this.contextKeyService);\n        this.listMultiSelection = WorkbenchListMultiSelection.bindTo(this.contextKeyService);\n        this.horizontalScrolling = options.horizontalScrolling;\n        this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n        this.disposables.add(this.contextKeyService);\n        this.disposables.add(listService.register(this));\n        if (options.overrideStyles) {\n            this.updateStyles(options.overrideStyles);\n        }\n        this.disposables.add(this.onDidChangeSelection(() => {\n            const selection = this.getSelection();\n            const focus = this.getFocus();\n            this.contextKeyService.bufferChangeEvents(() => {\n                this.listHasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n                this.listMultiSelection.set(selection.length > 1);\n                this.listDoubleSelection.set(selection.length === 2);\n            });\n        }));\n        this.disposables.add(this.onDidChangeFocus(() => {\n            const selection = this.getSelection();\n            const focus = this.getFocus();\n            this.listHasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n        }));\n        this.disposables.add(configurationService.onDidChangeConfiguration(e => {\n            if (e.affectsConfiguration(multiSelectModifierSettingKey)) {\n                this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n            }\n            let options = {};\n            if (e.affectsConfiguration(horizontalScrollingKey) && this.horizontalScrolling === undefined) {\n                const horizontalScrolling = Boolean(configurationService.getValue(horizontalScrollingKey));\n                options = Object.assign(Object.assign({}, options), { horizontalScrolling });\n            }\n            if (e.affectsConfiguration(listSmoothScrolling)) {\n                const smoothScrolling = Boolean(configurationService.getValue(listSmoothScrolling));\n                options = Object.assign(Object.assign({}, options), { smoothScrolling });\n            }\n            if (e.affectsConfiguration(mouseWheelScrollSensitivityKey)) {\n                const mouseWheelScrollSensitivity = configurationService.getValue(mouseWheelScrollSensitivityKey);\n                options = Object.assign(Object.assign({}, options), { mouseWheelScrollSensitivity });\n            }\n            if (e.affectsConfiguration(fastScrollSensitivityKey)) {\n                const fastScrollSensitivity = configurationService.getValue(fastScrollSensitivityKey);\n                options = Object.assign(Object.assign({}, options), { fastScrollSensitivity });\n            }\n            if (Object.keys(options).length > 0) {\n                this.updateOptions(options);\n            }\n        }));\n        this.navigator = new ListResourceNavigator(this, Object.assign({ configurationService }, options));\n        this.disposables.add(this.navigator);\n    }\n    updateOptions(options) {\n        super.updateOptions(options);\n        if (options.overrideStyles) {\n            this.updateStyles(options.overrideStyles);\n        }\n        if (options.multipleSelectionSupport !== undefined) {\n            this.listSupportsMultiSelect.set(!!options.multipleSelectionSupport);\n        }\n    }\n    updateStyles(styles) {\n        var _a;\n        (_a = this._styler) === null || _a === void 0 ? void 0 : _a.dispose();\n        this._styler = attachListStyler(this, this.themeService, styles);\n    }\n    dispose() {\n        var _a;\n        (_a = this._styler) === null || _a === void 0 ? void 0 : _a.dispose();\n        super.dispose();\n    }\n};\nWorkbenchList = __decorate([\n    __param(5, IContextKeyService),\n    __param(6, IListService),\n    __param(7, IThemeService),\n    __param(8, IConfigurationService),\n    __param(9, IKeybindingService)\n], WorkbenchList);\nexport { WorkbenchList };\nlet WorkbenchPagedList = class WorkbenchPagedList extends PagedList {\n    constructor(user, container, delegate, renderers, options, contextKeyService, listService, themeService, configurationService, keybindingService) {\n        const horizontalScrolling = typeof options.horizontalScrolling !== 'undefined' ? options.horizontalScrolling : Boolean(configurationService.getValue(horizontalScrollingKey));\n        const [workbenchListOptions, workbenchListOptionsDisposable] = toWorkbenchListOptions(options, configurationService, keybindingService);\n        super(user, container, delegate, renderers, Object.assign(Object.assign(Object.assign({ keyboardSupport: false }, computeStyles(themeService.getColorTheme(), defaultListStyles)), workbenchListOptions), { horizontalScrolling }));\n        this.disposables = new DisposableStore();\n        this.disposables.add(workbenchListOptionsDisposable);\n        this.contextKeyService = createScopedContextKeyService(contextKeyService, this);\n        this.themeService = themeService;\n        this.horizontalScrolling = options.horizontalScrolling;\n        this.listSupportsMultiSelect = WorkbenchListSupportsMultiSelectContextKey.bindTo(this.contextKeyService);\n        this.listSupportsMultiSelect.set(options.multipleSelectionSupport !== false);\n        const listSelectionNavigation = WorkbenchListSelectionNavigation.bindTo(this.contextKeyService);\n        listSelectionNavigation.set(Boolean(options.selectionNavigation));\n        this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n        this.disposables.add(this.contextKeyService);\n        this.disposables.add(listService.register(this));\n        if (options.overrideStyles) {\n            this.updateStyles(options.overrideStyles);\n        }\n        if (options.overrideStyles) {\n            this.disposables.add(attachListStyler(this, themeService, options.overrideStyles));\n        }\n        this.disposables.add(configurationService.onDidChangeConfiguration(e => {\n            if (e.affectsConfiguration(multiSelectModifierSettingKey)) {\n                this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n            }\n            let options = {};\n            if (e.affectsConfiguration(horizontalScrollingKey) && this.horizontalScrolling === undefined) {\n                const horizontalScrolling = Boolean(configurationService.getValue(horizontalScrollingKey));\n                options = Object.assign(Object.assign({}, options), { horizontalScrolling });\n            }\n            if (e.affectsConfiguration(listSmoothScrolling)) {\n                const smoothScrolling = Boolean(configurationService.getValue(listSmoothScrolling));\n                options = Object.assign(Object.assign({}, options), { smoothScrolling });\n            }\n            if (e.affectsConfiguration(mouseWheelScrollSensitivityKey)) {\n                const mouseWheelScrollSensitivity = configurationService.getValue(mouseWheelScrollSensitivityKey);\n                options = Object.assign(Object.assign({}, options), { mouseWheelScrollSensitivity });\n            }\n            if (e.affectsConfiguration(fastScrollSensitivityKey)) {\n                const fastScrollSensitivity = configurationService.getValue(fastScrollSensitivityKey);\n                options = Object.assign(Object.assign({}, options), { fastScrollSensitivity });\n            }\n            if (Object.keys(options).length > 0) {\n                this.updateOptions(options);\n            }\n        }));\n        this.navigator = new ListResourceNavigator(this, Object.assign({ configurationService }, options));\n        this.disposables.add(this.navigator);\n    }\n    updateOptions(options) {\n        super.updateOptions(options);\n        if (options.overrideStyles) {\n            this.updateStyles(options.overrideStyles);\n        }\n        if (options.multipleSelectionSupport !== undefined) {\n            this.listSupportsMultiSelect.set(!!options.multipleSelectionSupport);\n        }\n    }\n    updateStyles(styles) {\n        var _a;\n        (_a = this._styler) === null || _a === void 0 ? void 0 : _a.dispose();\n        this._styler = attachListStyler(this, this.themeService, styles);\n    }\n    dispose() {\n        var _a;\n        (_a = this._styler) === null || _a === void 0 ? void 0 : _a.dispose();\n        this.disposables.dispose();\n        super.dispose();\n    }\n};\nWorkbenchPagedList = __decorate([\n    __param(5, IContextKeyService),\n    __param(6, IListService),\n    __param(7, IThemeService),\n    __param(8, IConfigurationService),\n    __param(9, IKeybindingService)\n], WorkbenchPagedList);\nexport { WorkbenchPagedList };\nlet WorkbenchTable = class WorkbenchTable extends Table {\n    constructor(user, container, delegate, columns, renderers, options, contextKeyService, listService, themeService, configurationService, keybindingService) {\n        const horizontalScrolling = typeof options.horizontalScrolling !== 'undefined' ? options.horizontalScrolling : Boolean(configurationService.getValue(horizontalScrollingKey));\n        const [workbenchListOptions, workbenchListOptionsDisposable] = toWorkbenchListOptions(options, configurationService, keybindingService);\n        super(user, container, delegate, columns, renderers, Object.assign(Object.assign(Object.assign({ keyboardSupport: false }, computeStyles(themeService.getColorTheme(), defaultListStyles)), workbenchListOptions), { horizontalScrolling }));\n        this.disposables.add(workbenchListOptionsDisposable);\n        this.contextKeyService = createScopedContextKeyService(contextKeyService, this);\n        this.themeService = themeService;\n        this.listSupportsMultiSelect = WorkbenchListSupportsMultiSelectContextKey.bindTo(this.contextKeyService);\n        this.listSupportsMultiSelect.set(options.multipleSelectionSupport !== false);\n        const listSelectionNavigation = WorkbenchListSelectionNavigation.bindTo(this.contextKeyService);\n        listSelectionNavigation.set(Boolean(options.selectionNavigation));\n        this.listHasSelectionOrFocus = WorkbenchListHasSelectionOrFocus.bindTo(this.contextKeyService);\n        this.listDoubleSelection = WorkbenchListDoubleSelection.bindTo(this.contextKeyService);\n        this.listMultiSelection = WorkbenchListMultiSelection.bindTo(this.contextKeyService);\n        this.horizontalScrolling = options.horizontalScrolling;\n        this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n        this.disposables.add(this.contextKeyService);\n        this.disposables.add(listService.register(this));\n        if (options.overrideStyles) {\n            this.updateStyles(options.overrideStyles);\n        }\n        this.disposables.add(this.onDidChangeSelection(() => {\n            const selection = this.getSelection();\n            const focus = this.getFocus();\n            this.contextKeyService.bufferChangeEvents(() => {\n                this.listHasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n                this.listMultiSelection.set(selection.length > 1);\n                this.listDoubleSelection.set(selection.length === 2);\n            });\n        }));\n        this.disposables.add(this.onDidChangeFocus(() => {\n            const selection = this.getSelection();\n            const focus = this.getFocus();\n            this.listHasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n        }));\n        this.disposables.add(configurationService.onDidChangeConfiguration(e => {\n            if (e.affectsConfiguration(multiSelectModifierSettingKey)) {\n                this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n            }\n            let options = {};\n            if (e.affectsConfiguration(horizontalScrollingKey) && this.horizontalScrolling === undefined) {\n                const horizontalScrolling = Boolean(configurationService.getValue(horizontalScrollingKey));\n                options = Object.assign(Object.assign({}, options), { horizontalScrolling });\n            }\n            if (e.affectsConfiguration(listSmoothScrolling)) {\n                const smoothScrolling = Boolean(configurationService.getValue(listSmoothScrolling));\n                options = Object.assign(Object.assign({}, options), { smoothScrolling });\n            }\n            if (e.affectsConfiguration(mouseWheelScrollSensitivityKey)) {\n                const mouseWheelScrollSensitivity = configurationService.getValue(mouseWheelScrollSensitivityKey);\n                options = Object.assign(Object.assign({}, options), { mouseWheelScrollSensitivity });\n            }\n            if (e.affectsConfiguration(fastScrollSensitivityKey)) {\n                const fastScrollSensitivity = configurationService.getValue(fastScrollSensitivityKey);\n                options = Object.assign(Object.assign({}, options), { fastScrollSensitivity });\n            }\n            if (Object.keys(options).length > 0) {\n                this.updateOptions(options);\n            }\n        }));\n        this.navigator = new TableResourceNavigator(this, Object.assign({ configurationService }, options));\n        this.disposables.add(this.navigator);\n    }\n    updateOptions(options) {\n        super.updateOptions(options);\n        if (options.overrideStyles) {\n            this.updateStyles(options.overrideStyles);\n        }\n        if (options.multipleSelectionSupport !== undefined) {\n            this.listSupportsMultiSelect.set(!!options.multipleSelectionSupport);\n        }\n    }\n    updateStyles(styles) {\n        var _a;\n        (_a = this._styler) === null || _a === void 0 ? void 0 : _a.dispose();\n        this._styler = attachListStyler(this, this.themeService, styles);\n    }\n    dispose() {\n        var _a;\n        (_a = this._styler) === null || _a === void 0 ? void 0 : _a.dispose();\n        this.disposables.dispose();\n        super.dispose();\n    }\n};\nWorkbenchTable = __decorate([\n    __param(6, IContextKeyService),\n    __param(7, IListService),\n    __param(8, IThemeService),\n    __param(9, IConfigurationService),\n    __param(10, IKeybindingService)\n], WorkbenchTable);\nexport { WorkbenchTable };\nclass ResourceNavigator extends Disposable {\n    constructor(widget, options) {\n        var _a;\n        super();\n        this.widget = widget;\n        this._onDidOpen = this._register(new Emitter());\n        this.onDidOpen = this._onDidOpen.event;\n        this._register(Event.filter(this.widget.onDidChangeSelection, e => e.browserEvent instanceof KeyboardEvent)(e => this.onSelectionFromKeyboard(e)));\n        this._register(this.widget.onPointer((e) => this.onPointer(e.element, e.browserEvent)));\n        this._register(this.widget.onMouseDblClick((e) => this.onMouseDblClick(e.element, e.browserEvent)));\n        if (typeof (options === null || options === void 0 ? void 0 : options.openOnSingleClick) !== 'boolean' && (options === null || options === void 0 ? void 0 : options.configurationService)) {\n            this.openOnSingleClick = (options === null || options === void 0 ? void 0 : options.configurationService.getValue(openModeSettingKey)) !== 'doubleClick';\n            this._register(options === null || options === void 0 ? void 0 : options.configurationService.onDidChangeConfiguration(() => {\n                this.openOnSingleClick = (options === null || options === void 0 ? void 0 : options.configurationService.getValue(openModeSettingKey)) !== 'doubleClick';\n            }));\n        }\n        else {\n            this.openOnSingleClick = (_a = options === null || options === void 0 ? void 0 : options.openOnSingleClick) !== null && _a !== void 0 ? _a : true;\n        }\n    }\n    onSelectionFromKeyboard(event) {\n        if (event.elements.length !== 1) {\n            return;\n        }\n        const selectionKeyboardEvent = event.browserEvent;\n        const preserveFocus = typeof selectionKeyboardEvent.preserveFocus === 'boolean' ? selectionKeyboardEvent.preserveFocus : true;\n        const pinned = typeof selectionKeyboardEvent.pinned === 'boolean' ? selectionKeyboardEvent.pinned : !preserveFocus;\n        const sideBySide = false;\n        this._open(this.getSelectedElement(), preserveFocus, pinned, sideBySide, event.browserEvent);\n    }\n    onPointer(element, browserEvent) {\n        if (!this.openOnSingleClick) {\n            return;\n        }\n        const isDoubleClick = browserEvent.detail === 2;\n        if (isDoubleClick) {\n            return;\n        }\n        const isMiddleClick = browserEvent.button === 1;\n        const preserveFocus = true;\n        const pinned = isMiddleClick;\n        const sideBySide = browserEvent.ctrlKey || browserEvent.metaKey || browserEvent.altKey;\n        this._open(element, preserveFocus, pinned, sideBySide, browserEvent);\n    }\n    onMouseDblClick(element, browserEvent) {\n        if (!browserEvent) {\n            return;\n        }\n        // copied from AbstractTree\n        const target = browserEvent.target;\n        const onTwistie = target.classList.contains('monaco-tl-twistie')\n            || (target.classList.contains('monaco-icon-label') && target.classList.contains('folder-icon') && browserEvent.offsetX < 16);\n        if (onTwistie) {\n            return;\n        }\n        const preserveFocus = false;\n        const pinned = true;\n        const sideBySide = (browserEvent.ctrlKey || browserEvent.metaKey || browserEvent.altKey);\n        this._open(element, preserveFocus, pinned, sideBySide, browserEvent);\n    }\n    _open(element, preserveFocus, pinned, sideBySide, browserEvent) {\n        if (!element) {\n            return;\n        }\n        this._onDidOpen.fire({\n            editorOptions: {\n                preserveFocus,\n                pinned,\n                revealIfVisible: true\n            },\n            sideBySide,\n            element,\n            browserEvent\n        });\n    }\n}\nclass ListResourceNavigator extends ResourceNavigator {\n    constructor(widget, options) {\n        super(widget, options);\n        this.widget = widget;\n    }\n    getSelectedElement() {\n        return this.widget.getSelectedElements()[0];\n    }\n}\nclass TableResourceNavigator extends ResourceNavigator {\n    constructor(widget, options) {\n        super(widget, options);\n    }\n    getSelectedElement() {\n        return this.widget.getSelectedElements()[0];\n    }\n}\nclass TreeResourceNavigator extends ResourceNavigator {\n    constructor(widget, options) {\n        super(widget, options);\n    }\n    getSelectedElement() {\n        var _a;\n        return (_a = this.widget.getSelection()[0]) !== null && _a !== void 0 ? _a : undefined;\n    }\n}\nfunction createKeyboardNavigationEventFilter(container, keybindingService) {\n    let inChord = false;\n    return event => {\n        if (event.toKeybinding().isModifierKey()) {\n            return false;\n        }\n        if (inChord) {\n            inChord = false;\n            return false;\n        }\n        const result = keybindingService.softDispatch(event, container);\n        if (result && result.enterChord) {\n            inChord = true;\n            return false;\n        }\n        inChord = false;\n        return true;\n    };\n}\nlet WorkbenchObjectTree = class WorkbenchObjectTree extends ObjectTree {\n    constructor(user, container, delegate, renderers, options, contextKeyService, listService, themeService, configurationService, keybindingService, accessibilityService) {\n        const { options: treeOptions, getAutomaticKeyboardNavigation, disposable } = workbenchTreeDataPreamble(container, options, contextKeyService, configurationService, keybindingService, accessibilityService);\n        super(user, container, delegate, renderers, treeOptions);\n        this.disposables.add(disposable);\n        this.internals = new WorkbenchTreeInternals(this, options, getAutomaticKeyboardNavigation, options.overrideStyles, contextKeyService, listService, themeService, configurationService, accessibilityService);\n        this.disposables.add(this.internals);\n    }\n    updateOptions(options) {\n        super.updateOptions(options);\n        this.internals.updateOptions(options);\n    }\n};\nWorkbenchObjectTree = __decorate([\n    __param(5, IContextKeyService),\n    __param(6, IListService),\n    __param(7, IThemeService),\n    __param(8, IConfigurationService),\n    __param(9, IKeybindingService),\n    __param(10, IAccessibilityService)\n], WorkbenchObjectTree);\nexport { WorkbenchObjectTree };\nlet WorkbenchCompressibleObjectTree = class WorkbenchCompressibleObjectTree extends CompressibleObjectTree {\n    constructor(user, container, delegate, renderers, options, contextKeyService, listService, themeService, configurationService, keybindingService, accessibilityService) {\n        const { options: treeOptions, getAutomaticKeyboardNavigation, disposable } = workbenchTreeDataPreamble(container, options, contextKeyService, configurationService, keybindingService, accessibilityService);\n        super(user, container, delegate, renderers, treeOptions);\n        this.disposables.add(disposable);\n        this.internals = new WorkbenchTreeInternals(this, options, getAutomaticKeyboardNavigation, options.overrideStyles, contextKeyService, listService, themeService, configurationService, accessibilityService);\n        this.disposables.add(this.internals);\n    }\n    updateOptions(options = {}) {\n        super.updateOptions(options);\n        if (options.overrideStyles) {\n            this.internals.updateStyleOverrides(options.overrideStyles);\n        }\n        this.internals.updateOptions(options);\n    }\n};\nWorkbenchCompressibleObjectTree = __decorate([\n    __param(5, IContextKeyService),\n    __param(6, IListService),\n    __param(7, IThemeService),\n    __param(8, IConfigurationService),\n    __param(9, IKeybindingService),\n    __param(10, IAccessibilityService)\n], WorkbenchCompressibleObjectTree);\nexport { WorkbenchCompressibleObjectTree };\nlet WorkbenchDataTree = class WorkbenchDataTree extends DataTree {\n    constructor(user, container, delegate, renderers, dataSource, options, contextKeyService, listService, themeService, configurationService, keybindingService, accessibilityService) {\n        const { options: treeOptions, getAutomaticKeyboardNavigation, disposable } = workbenchTreeDataPreamble(container, options, contextKeyService, configurationService, keybindingService, accessibilityService);\n        super(user, container, delegate, renderers, dataSource, treeOptions);\n        this.disposables.add(disposable);\n        this.internals = new WorkbenchTreeInternals(this, options, getAutomaticKeyboardNavigation, options.overrideStyles, contextKeyService, listService, themeService, configurationService, accessibilityService);\n        this.disposables.add(this.internals);\n    }\n    updateOptions(options = {}) {\n        super.updateOptions(options);\n        if (options.overrideStyles) {\n            this.internals.updateStyleOverrides(options.overrideStyles);\n        }\n        this.internals.updateOptions(options);\n    }\n};\nWorkbenchDataTree = __decorate([\n    __param(6, IContextKeyService),\n    __param(7, IListService),\n    __param(8, IThemeService),\n    __param(9, IConfigurationService),\n    __param(10, IKeybindingService),\n    __param(11, IAccessibilityService)\n], WorkbenchDataTree);\nexport { WorkbenchDataTree };\nlet WorkbenchAsyncDataTree = class WorkbenchAsyncDataTree extends AsyncDataTree {\n    constructor(user, container, delegate, renderers, dataSource, options, contextKeyService, listService, themeService, configurationService, keybindingService, accessibilityService) {\n        const { options: treeOptions, getAutomaticKeyboardNavigation, disposable } = workbenchTreeDataPreamble(container, options, contextKeyService, configurationService, keybindingService, accessibilityService);\n        super(user, container, delegate, renderers, dataSource, treeOptions);\n        this.disposables.add(disposable);\n        this.internals = new WorkbenchTreeInternals(this, options, getAutomaticKeyboardNavigation, options.overrideStyles, contextKeyService, listService, themeService, configurationService, accessibilityService);\n        this.disposables.add(this.internals);\n    }\n    get onDidOpen() { return this.internals.onDidOpen; }\n    updateOptions(options = {}) {\n        super.updateOptions(options);\n        if (options.overrideStyles) {\n            this.internals.updateStyleOverrides(options.overrideStyles);\n        }\n        this.internals.updateOptions(options);\n    }\n};\nWorkbenchAsyncDataTree = __decorate([\n    __param(6, IContextKeyService),\n    __param(7, IListService),\n    __param(8, IThemeService),\n    __param(9, IConfigurationService),\n    __param(10, IKeybindingService),\n    __param(11, IAccessibilityService)\n], WorkbenchAsyncDataTree);\nexport { WorkbenchAsyncDataTree };\nlet WorkbenchCompressibleAsyncDataTree = class WorkbenchCompressibleAsyncDataTree extends CompressibleAsyncDataTree {\n    constructor(user, container, virtualDelegate, compressionDelegate, renderers, dataSource, options, contextKeyService, listService, themeService, configurationService, keybindingService, accessibilityService) {\n        const { options: treeOptions, getAutomaticKeyboardNavigation, disposable } = workbenchTreeDataPreamble(container, options, contextKeyService, configurationService, keybindingService, accessibilityService);\n        super(user, container, virtualDelegate, compressionDelegate, renderers, dataSource, treeOptions);\n        this.disposables.add(disposable);\n        this.internals = new WorkbenchTreeInternals(this, options, getAutomaticKeyboardNavigation, options.overrideStyles, contextKeyService, listService, themeService, configurationService, accessibilityService);\n        this.disposables.add(this.internals);\n    }\n    updateOptions(options) {\n        super.updateOptions(options);\n        this.internals.updateOptions(options);\n    }\n};\nWorkbenchCompressibleAsyncDataTree = __decorate([\n    __param(7, IContextKeyService),\n    __param(8, IListService),\n    __param(9, IThemeService),\n    __param(10, IConfigurationService),\n    __param(11, IKeybindingService),\n    __param(12, IAccessibilityService)\n], WorkbenchCompressibleAsyncDataTree);\nexport { WorkbenchCompressibleAsyncDataTree };\nfunction workbenchTreeDataPreamble(container, options, contextKeyService, configurationService, keybindingService, accessibilityService) {\n    var _a;\n    const getAutomaticKeyboardNavigation = () => {\n        // give priority to the context key value to disable this completely\n        let automaticKeyboardNavigation = Boolean(contextKeyService.getContextKeyValue(WorkbenchListAutomaticKeyboardNavigationKey));\n        if (automaticKeyboardNavigation) {\n            automaticKeyboardNavigation = Boolean(configurationService.getValue(automaticKeyboardNavigationSettingKey));\n        }\n        return automaticKeyboardNavigation;\n    };\n    const accessibilityOn = accessibilityService.isScreenReaderOptimized();\n    const keyboardNavigation = options.simpleKeyboardNavigation || accessibilityOn ? 'simple' : configurationService.getValue(keyboardNavigationSettingKey);\n    const horizontalScrolling = options.horizontalScrolling !== undefined ? options.horizontalScrolling : Boolean(configurationService.getValue(horizontalScrollingKey));\n    const [workbenchListOptions, disposable] = toWorkbenchListOptions(options, configurationService, keybindingService);\n    const additionalScrollHeight = options.additionalScrollHeight;\n    return {\n        getAutomaticKeyboardNavigation,\n        disposable,\n        options: Object.assign(Object.assign({ \n            // ...options, // TODO@Joao why is this not splatted here?\n            keyboardSupport: false }, workbenchListOptions), { indent: typeof configurationService.getValue(treeIndentKey) === 'number' ? configurationService.getValue(treeIndentKey) : undefined, renderIndentGuides: configurationService.getValue(treeRenderIndentGuidesKey), smoothScrolling: Boolean(configurationService.getValue(listSmoothScrolling)), automaticKeyboardNavigation: getAutomaticKeyboardNavigation(), simpleKeyboardNavigation: keyboardNavigation === 'simple', filterOnType: keyboardNavigation === 'filter', horizontalScrolling, keyboardNavigationEventFilter: createKeyboardNavigationEventFilter(container, keybindingService), additionalScrollHeight, hideTwistiesOfChildlessElements: options.hideTwistiesOfChildlessElements, expandOnlyOnTwistieClick: (_a = options.expandOnlyOnTwistieClick) !== null && _a !== void 0 ? _a : (configurationService.getValue(treeExpandMode) === 'doubleClick') })\n    };\n}\nlet WorkbenchTreeInternals = class WorkbenchTreeInternals {\n    constructor(tree, options, getAutomaticKeyboardNavigation, overrideStyles, contextKeyService, listService, themeService, configurationService, accessibilityService) {\n        this.tree = tree;\n        this.themeService = themeService;\n        this.disposables = [];\n        this.contextKeyService = createScopedContextKeyService(contextKeyService, tree);\n        this.listSupportsMultiSelect = WorkbenchListSupportsMultiSelectContextKey.bindTo(this.contextKeyService);\n        this.listSupportsMultiSelect.set(options.multipleSelectionSupport !== false);\n        const listSelectionNavigation = WorkbenchListSelectionNavigation.bindTo(this.contextKeyService);\n        listSelectionNavigation.set(Boolean(options.selectionNavigation));\n        this.hasSelectionOrFocus = WorkbenchListHasSelectionOrFocus.bindTo(this.contextKeyService);\n        this.hasDoubleSelection = WorkbenchListDoubleSelection.bindTo(this.contextKeyService);\n        this.hasMultiSelection = WorkbenchListMultiSelection.bindTo(this.contextKeyService);\n        this.treeElementCanCollapse = WorkbenchTreeElementCanCollapse.bindTo(this.contextKeyService);\n        this.treeElementHasParent = WorkbenchTreeElementHasParent.bindTo(this.contextKeyService);\n        this.treeElementCanExpand = WorkbenchTreeElementCanExpand.bindTo(this.contextKeyService);\n        this.treeElementHasChild = WorkbenchTreeElementHasChild.bindTo(this.contextKeyService);\n        this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n        const interestingContextKeys = new Set();\n        interestingContextKeys.add(WorkbenchListAutomaticKeyboardNavigationKey);\n        const updateKeyboardNavigation = () => {\n            const accessibilityOn = accessibilityService.isScreenReaderOptimized();\n            const keyboardNavigation = accessibilityOn ? 'simple' : configurationService.getValue(keyboardNavigationSettingKey);\n            tree.updateOptions({\n                simpleKeyboardNavigation: keyboardNavigation === 'simple',\n                filterOnType: keyboardNavigation === 'filter'\n            });\n        };\n        this.updateStyleOverrides(overrideStyles);\n        const updateCollapseContextKeys = () => {\n            const focus = tree.getFocus()[0];\n            if (!focus) {\n                return;\n            }\n            const node = tree.getNode(focus);\n            this.treeElementCanCollapse.set(node.collapsible && !node.collapsed);\n            this.treeElementHasParent.set(!!tree.getParentElement(focus));\n            this.treeElementCanExpand.set(node.collapsible && node.collapsed);\n            this.treeElementHasChild.set(!!tree.getFirstElementChild(focus));\n        };\n        this.disposables.push(this.contextKeyService, listService.register(tree), tree.onDidChangeSelection(() => {\n            const selection = tree.getSelection();\n            const focus = tree.getFocus();\n            this.contextKeyService.bufferChangeEvents(() => {\n                this.hasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n                this.hasMultiSelection.set(selection.length > 1);\n                this.hasDoubleSelection.set(selection.length === 2);\n            });\n        }), tree.onDidChangeFocus(() => {\n            const selection = tree.getSelection();\n            const focus = tree.getFocus();\n            this.hasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n            updateCollapseContextKeys();\n        }), tree.onDidChangeCollapseState(updateCollapseContextKeys), tree.onDidChangeModel(updateCollapseContextKeys), configurationService.onDidChangeConfiguration(e => {\n            let newOptions = {};\n            if (e.affectsConfiguration(multiSelectModifierSettingKey)) {\n                this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n            }\n            if (e.affectsConfiguration(treeIndentKey)) {\n                const indent = configurationService.getValue(treeIndentKey);\n                newOptions = Object.assign(Object.assign({}, newOptions), { indent });\n            }\n            if (e.affectsConfiguration(treeRenderIndentGuidesKey)) {\n                const renderIndentGuides = configurationService.getValue(treeRenderIndentGuidesKey);\n                newOptions = Object.assign(Object.assign({}, newOptions), { renderIndentGuides });\n            }\n            if (e.affectsConfiguration(listSmoothScrolling)) {\n                const smoothScrolling = Boolean(configurationService.getValue(listSmoothScrolling));\n                newOptions = Object.assign(Object.assign({}, newOptions), { smoothScrolling });\n            }\n            if (e.affectsConfiguration(keyboardNavigationSettingKey)) {\n                updateKeyboardNavigation();\n            }\n            if (e.affectsConfiguration(automaticKeyboardNavigationSettingKey)) {\n                newOptions = Object.assign(Object.assign({}, newOptions), { automaticKeyboardNavigation: getAutomaticKeyboardNavigation() });\n            }\n            if (e.affectsConfiguration(horizontalScrollingKey) && options.horizontalScrolling === undefined) {\n                const horizontalScrolling = Boolean(configurationService.getValue(horizontalScrollingKey));\n                newOptions = Object.assign(Object.assign({}, newOptions), { horizontalScrolling });\n            }\n            if (e.affectsConfiguration(treeExpandMode) && options.expandOnlyOnTwistieClick === undefined) {\n                newOptions = Object.assign(Object.assign({}, newOptions), { expandOnlyOnTwistieClick: configurationService.getValue(treeExpandMode) === 'doubleClick' });\n            }\n            if (e.affectsConfiguration(mouseWheelScrollSensitivityKey)) {\n                const mouseWheelScrollSensitivity = configurationService.getValue(mouseWheelScrollSensitivityKey);\n                newOptions = Object.assign(Object.assign({}, newOptions), { mouseWheelScrollSensitivity });\n            }\n            if (e.affectsConfiguration(fastScrollSensitivityKey)) {\n                const fastScrollSensitivity = configurationService.getValue(fastScrollSensitivityKey);\n                newOptions = Object.assign(Object.assign({}, newOptions), { fastScrollSensitivity });\n            }\n            if (Object.keys(newOptions).length > 0) {\n                tree.updateOptions(newOptions);\n            }\n        }), this.contextKeyService.onDidChangeContext(e => {\n            if (e.affectsSome(interestingContextKeys)) {\n                tree.updateOptions({ automaticKeyboardNavigation: getAutomaticKeyboardNavigation() });\n            }\n        }), accessibilityService.onDidChangeScreenReaderOptimized(() => updateKeyboardNavigation()));\n        this.navigator = new TreeResourceNavigator(tree, Object.assign({ configurationService }, options));\n        this.disposables.push(this.navigator);\n    }\n    get onDidOpen() { return this.navigator.onDidOpen; }\n    updateOptions(options) {\n        if (options.multipleSelectionSupport !== undefined) {\n            this.listSupportsMultiSelect.set(!!options.multipleSelectionSupport);\n        }\n    }\n    updateStyleOverrides(overrideStyles) {\n        dispose(this.styler);\n        this.styler = overrideStyles ? attachListStyler(this.tree, this.themeService, overrideStyles) : Disposable.None;\n    }\n    dispose() {\n        this.disposables = dispose(this.disposables);\n        dispose(this.styler);\n        this.styler = undefined;\n    }\n};\nWorkbenchTreeInternals = __decorate([\n    __param(4, IContextKeyService),\n    __param(5, IListService),\n    __param(6, IThemeService),\n    __param(7, IConfigurationService),\n    __param(8, IAccessibilityService)\n], WorkbenchTreeInternals);\nconst configurationRegistry = Registry.as(ConfigurationExtensions.Configuration);\nconfigurationRegistry.registerConfiguration({\n    id: 'workbench',\n    order: 7,\n    title: localize('workbenchConfigurationTitle', \"Workbench\"),\n    type: 'object',\n    properties: {\n        [multiSelectModifierSettingKey]: {\n            type: 'string',\n            enum: ['ctrlCmd', 'alt'],\n            enumDescriptions: [\n                localize('multiSelectModifier.ctrlCmd', \"Maps to `Control` on Windows and Linux and to `Command` on macOS.\"),\n                localize('multiSelectModifier.alt', \"Maps to `Alt` on Windows and Linux and to `Option` on macOS.\")\n            ],\n            default: 'ctrlCmd',\n            description: localize({\n                key: 'multiSelectModifier',\n                comment: [\n                    '- `ctrlCmd` refers to a value the setting can take and should not be localized.',\n                    '- `Control` and `Command` refer to the modifier keys Ctrl or Cmd on the keyboard and can be localized.'\n                ]\n            }, \"The modifier to be used to add an item in trees and lists to a multi-selection with the mouse (for example in the explorer, open editors and scm view). The 'Open to Side' mouse gestures - if supported - will adapt such that they do not conflict with the multiselect modifier.\")\n        },\n        [openModeSettingKey]: {\n            type: 'string',\n            enum: ['singleClick', 'doubleClick'],\n            default: 'singleClick',\n            description: localize({\n                key: 'openModeModifier',\n                comment: ['`singleClick` and `doubleClick` refers to a value the setting can take and should not be localized.']\n            }, \"Controls how to open items in trees and lists using the mouse (if supported). Note that some trees and lists might choose to ignore this setting if it is not applicable.\")\n        },\n        [horizontalScrollingKey]: {\n            type: 'boolean',\n            default: false,\n            description: localize('horizontalScrolling setting', \"Controls whether lists and trees support horizontal scrolling in the workbench. Warning: turning on this setting has a performance implication.\")\n        },\n        [treeIndentKey]: {\n            type: 'number',\n            default: 8,\n            minimum: 4,\n            maximum: 40,\n            description: localize('tree indent setting', \"Controls tree indentation in pixels.\")\n        },\n        [treeRenderIndentGuidesKey]: {\n            type: 'string',\n            enum: ['none', 'onHover', 'always'],\n            default: 'onHover',\n            description: localize('render tree indent guides', \"Controls whether the tree should render indent guides.\")\n        },\n        [listSmoothScrolling]: {\n            type: 'boolean',\n            default: false,\n            description: localize('list smoothScrolling setting', \"Controls whether lists and trees have smooth scrolling.\"),\n        },\n        [mouseWheelScrollSensitivityKey]: {\n            type: 'number',\n            default: 1,\n            description: localize('Mouse Wheel Scroll Sensitivity', \"A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.\")\n        },\n        [fastScrollSensitivityKey]: {\n            type: 'number',\n            default: 5,\n            description: localize('Fast Scroll Sensitivity', \"Scrolling speed multiplier when pressing `Alt`.\")\n        },\n        [keyboardNavigationSettingKey]: {\n            type: 'string',\n            enum: ['simple', 'highlight', 'filter'],\n            enumDescriptions: [\n                localize('keyboardNavigationSettingKey.simple', \"Simple keyboard navigation focuses elements which match the keyboard input. Matching is done only on prefixes.\"),\n                localize('keyboardNavigationSettingKey.highlight', \"Highlight keyboard navigation highlights elements which match the keyboard input. Further up and down navigation will traverse only the highlighted elements.\"),\n                localize('keyboardNavigationSettingKey.filter', \"Filter keyboard navigation will filter out and hide all the elements which do not match the keyboard input.\")\n            ],\n            default: 'highlight',\n            description: localize('keyboardNavigationSettingKey', \"Controls the keyboard navigation style for lists and trees in the workbench. Can be simple, highlight and filter.\")\n        },\n        [automaticKeyboardNavigationSettingKey]: {\n            type: 'boolean',\n            default: true,\n            markdownDescription: localize('automatic keyboard navigation setting', \"Controls whether keyboard navigation in lists and trees is automatically triggered simply by typing. If set to `false`, keyboard navigation is only triggered when executing the `list.toggleKeyboardNavigation` command, for which you can assign a keyboard shortcut.\")\n        },\n        [treeExpandMode]: {\n            type: 'string',\n            enum: ['singleClick', 'doubleClick'],\n            default: 'singleClick',\n            description: localize('expand mode', \"Controls how tree folders are expanded when clicking the folder names. Note that some trees and lists might choose to ignore this setting if it is not applicable.\"),\n        }\n    }\n});\n"]},"metadata":{},"sourceType":"module"}