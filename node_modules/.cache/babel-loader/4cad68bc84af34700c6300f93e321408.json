{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './currentLineHighlight.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { editorLineHighlight, editorLineHighlightBorder } from '../../../common/core/editorColorRegistry.js';\nimport * as arrays from '../../../../base/common/arrays.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nimport { Selection } from '../../../common/core/selection.js';\nexport class AbstractLineHighlightOverlay extends DynamicViewOverlay {\n  constructor(context) {\n    super();\n    this._context = context;\n    const options = this._context.configuration.options;\n    const layoutInfo = options.get(131\n    /* layoutInfo */\n    );\n    this._lineHeight = options.get(59\n    /* lineHeight */\n    );\n    this._renderLineHighlight = options.get(85\n    /* renderLineHighlight */\n    );\n    this._renderLineHighlightOnlyWhenFocus = options.get(86\n    /* renderLineHighlightOnlyWhenFocus */\n    );\n    this._contentLeft = layoutInfo.contentLeft;\n    this._contentWidth = layoutInfo.contentWidth;\n    this._selectionIsEmpty = true;\n    this._focused = false;\n    this._cursorLineNumbers = [1];\n    this._selections = [new Selection(1, 1, 1, 1)];\n    this._renderData = null;\n\n    this._context.addEventHandler(this);\n  }\n\n  dispose() {\n    this._context.removeEventHandler(this);\n\n    super.dispose();\n  }\n\n  _readFromSelections() {\n    let hasChanged = false;\n\n    const cursorsLineNumbers = this._selections.map(s => s.positionLineNumber);\n\n    cursorsLineNumbers.sort((a, b) => a - b);\n\n    if (!arrays.equals(this._cursorLineNumbers, cursorsLineNumbers)) {\n      this._cursorLineNumbers = cursorsLineNumbers;\n      hasChanged = true;\n    }\n\n    const selectionIsEmpty = this._selections.every(s => s.isEmpty());\n\n    if (this._selectionIsEmpty !== selectionIsEmpty) {\n      this._selectionIsEmpty = selectionIsEmpty;\n      hasChanged = true;\n    }\n\n    return hasChanged;\n  } // --- begin event handlers\n\n\n  onThemeChanged(e) {\n    return this._readFromSelections();\n  }\n\n  onConfigurationChanged(e) {\n    const options = this._context.configuration.options;\n    const layoutInfo = options.get(131\n    /* layoutInfo */\n    );\n    this._lineHeight = options.get(59\n    /* lineHeight */\n    );\n    this._renderLineHighlight = options.get(85\n    /* renderLineHighlight */\n    );\n    this._renderLineHighlightOnlyWhenFocus = options.get(86\n    /* renderLineHighlightOnlyWhenFocus */\n    );\n    this._contentLeft = layoutInfo.contentLeft;\n    this._contentWidth = layoutInfo.contentWidth;\n    return true;\n  }\n\n  onCursorStateChanged(e) {\n    this._selections = e.selections;\n    return this._readFromSelections();\n  }\n\n  onFlushed(e) {\n    return true;\n  }\n\n  onLinesDeleted(e) {\n    return true;\n  }\n\n  onLinesInserted(e) {\n    return true;\n  }\n\n  onScrollChanged(e) {\n    return e.scrollWidthChanged || e.scrollTopChanged;\n  }\n\n  onZonesChanged(e) {\n    return true;\n  }\n\n  onFocusChanged(e) {\n    if (!this._renderLineHighlightOnlyWhenFocus) {\n      return false;\n    }\n\n    this._focused = e.isFocused;\n    return true;\n  } // --- end event handlers\n\n\n  prepareRender(ctx) {\n    if (!this._shouldRenderThis()) {\n      this._renderData = null;\n      return;\n    }\n\n    const renderedLine = this._renderOne(ctx);\n\n    const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n    const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n    const len = this._cursorLineNumbers.length;\n    let index = 0;\n    const renderData = [];\n\n    for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n      const lineIndex = lineNumber - visibleStartLineNumber;\n\n      while (index < len && this._cursorLineNumbers[index] < lineNumber) {\n        index++;\n      }\n\n      if (index < len && this._cursorLineNumbers[index] === lineNumber) {\n        renderData[lineIndex] = renderedLine;\n      } else {\n        renderData[lineIndex] = '';\n      }\n    }\n\n    this._renderData = renderData;\n  }\n\n  render(startLineNumber, lineNumber) {\n    if (!this._renderData) {\n      return '';\n    }\n\n    const lineIndex = lineNumber - startLineNumber;\n\n    if (lineIndex >= this._renderData.length) {\n      return '';\n    }\n\n    return this._renderData[lineIndex];\n  }\n\n  _shouldRenderInMargin() {\n    return (this._renderLineHighlight === 'gutter' || this._renderLineHighlight === 'all') && (!this._renderLineHighlightOnlyWhenFocus || this._focused);\n  }\n\n  _shouldRenderInContent() {\n    return (this._renderLineHighlight === 'line' || this._renderLineHighlight === 'all') && this._selectionIsEmpty && (!this._renderLineHighlightOnlyWhenFocus || this._focused);\n  }\n\n}\nexport class CurrentLineHighlightOverlay extends AbstractLineHighlightOverlay {\n  _renderOne(ctx) {\n    const className = 'current-line' + (this._shouldRenderOther() ? ' current-line-both' : '');\n    return `<div class=\"${className}\" style=\"width:${Math.max(ctx.scrollWidth, this._contentWidth)}px; height:${this._lineHeight}px;\"></div>`;\n  }\n\n  _shouldRenderThis() {\n    return this._shouldRenderInContent();\n  }\n\n  _shouldRenderOther() {\n    return this._shouldRenderInMargin();\n  }\n\n}\nexport class CurrentLineMarginHighlightOverlay extends AbstractLineHighlightOverlay {\n  _renderOne(ctx) {\n    const className = 'current-line' + (this._shouldRenderInMargin() ? ' current-line-margin' : '') + (this._shouldRenderOther() ? ' current-line-margin-both' : '');\n    return `<div class=\"${className}\" style=\"width:${this._contentLeft}px; height:${this._lineHeight}px;\"></div>`;\n  }\n\n  _shouldRenderThis() {\n    return true;\n  }\n\n  _shouldRenderOther() {\n    return this._shouldRenderInContent();\n  }\n\n}\nregisterThemingParticipant((theme, collector) => {\n  const lineHighlight = theme.getColor(editorLineHighlight);\n\n  if (lineHighlight) {\n    collector.addRule(`.monaco-editor .view-overlays .current-line { background-color: ${lineHighlight}; }`);\n    collector.addRule(`.monaco-editor .margin-view-overlays .current-line-margin { background-color: ${lineHighlight}; border: none; }`);\n  }\n\n  if (!lineHighlight || lineHighlight.isTransparent() || theme.defines(editorLineHighlightBorder)) {\n    const lineHighlightBorder = theme.getColor(editorLineHighlightBorder);\n\n    if (lineHighlightBorder) {\n      collector.addRule(`.monaco-editor .view-overlays .current-line { border: 2px solid ${lineHighlightBorder}; }`);\n      collector.addRule(`.monaco-editor .margin-view-overlays .current-line-margin { border: 2px solid ${lineHighlightBorder}; }`);\n\n      if (theme.type === 'hc') {\n        collector.addRule(`.monaco-editor .view-overlays .current-line { border-width: 1px; }`);\n        collector.addRule(`.monaco-editor .margin-view-overlays .current-line-margin { border-width: 1px; }`);\n      }\n    }\n  }\n});","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/currentLineHighlight/currentLineHighlight.js"],"names":["DynamicViewOverlay","editorLineHighlight","editorLineHighlightBorder","arrays","registerThemingParticipant","Selection","AbstractLineHighlightOverlay","constructor","context","_context","options","configuration","layoutInfo","get","_lineHeight","_renderLineHighlight","_renderLineHighlightOnlyWhenFocus","_contentLeft","contentLeft","_contentWidth","contentWidth","_selectionIsEmpty","_focused","_cursorLineNumbers","_selections","_renderData","addEventHandler","dispose","removeEventHandler","_readFromSelections","hasChanged","cursorsLineNumbers","map","s","positionLineNumber","sort","a","b","equals","selectionIsEmpty","every","isEmpty","onThemeChanged","e","onConfigurationChanged","onCursorStateChanged","selections","onFlushed","onLinesDeleted","onLinesInserted","onScrollChanged","scrollWidthChanged","scrollTopChanged","onZonesChanged","onFocusChanged","isFocused","prepareRender","ctx","_shouldRenderThis","renderedLine","_renderOne","visibleStartLineNumber","visibleRange","startLineNumber","visibleEndLineNumber","endLineNumber","len","length","index","renderData","lineNumber","lineIndex","render","_shouldRenderInMargin","_shouldRenderInContent","CurrentLineHighlightOverlay","className","_shouldRenderOther","Math","max","scrollWidth","CurrentLineMarginHighlightOverlay","theme","collector","lineHighlight","getColor","addRule","isTransparent","defines","lineHighlightBorder","type"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './currentLineHighlight.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { editorLineHighlight, editorLineHighlightBorder } from '../../../common/core/editorColorRegistry.js';\nimport * as arrays from '../../../../base/common/arrays.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nimport { Selection } from '../../../common/core/selection.js';\nexport class AbstractLineHighlightOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this._lineHeight = options.get(59 /* lineHeight */);\n        this._renderLineHighlight = options.get(85 /* renderLineHighlight */);\n        this._renderLineHighlightOnlyWhenFocus = options.get(86 /* renderLineHighlightOnlyWhenFocus */);\n        this._contentLeft = layoutInfo.contentLeft;\n        this._contentWidth = layoutInfo.contentWidth;\n        this._selectionIsEmpty = true;\n        this._focused = false;\n        this._cursorLineNumbers = [1];\n        this._selections = [new Selection(1, 1, 1, 1)];\n        this._renderData = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        super.dispose();\n    }\n    _readFromSelections() {\n        let hasChanged = false;\n        const cursorsLineNumbers = this._selections.map(s => s.positionLineNumber);\n        cursorsLineNumbers.sort((a, b) => a - b);\n        if (!arrays.equals(this._cursorLineNumbers, cursorsLineNumbers)) {\n            this._cursorLineNumbers = cursorsLineNumbers;\n            hasChanged = true;\n        }\n        const selectionIsEmpty = this._selections.every(s => s.isEmpty());\n        if (this._selectionIsEmpty !== selectionIsEmpty) {\n            this._selectionIsEmpty = selectionIsEmpty;\n            hasChanged = true;\n        }\n        return hasChanged;\n    }\n    // --- begin event handlers\n    onThemeChanged(e) {\n        return this._readFromSelections();\n    }\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this._lineHeight = options.get(59 /* lineHeight */);\n        this._renderLineHighlight = options.get(85 /* renderLineHighlight */);\n        this._renderLineHighlightOnlyWhenFocus = options.get(86 /* renderLineHighlightOnlyWhenFocus */);\n        this._contentLeft = layoutInfo.contentLeft;\n        this._contentWidth = layoutInfo.contentWidth;\n        return true;\n    }\n    onCursorStateChanged(e) {\n        this._selections = e.selections;\n        return this._readFromSelections();\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollWidthChanged || e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    onFocusChanged(e) {\n        if (!this._renderLineHighlightOnlyWhenFocus) {\n            return false;\n        }\n        this._focused = e.isFocused;\n        return true;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        if (!this._shouldRenderThis()) {\n            this._renderData = null;\n            return;\n        }\n        const renderedLine = this._renderOne(ctx);\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const len = this._cursorLineNumbers.length;\n        let index = 0;\n        const renderData = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            while (index < len && this._cursorLineNumbers[index] < lineNumber) {\n                index++;\n            }\n            if (index < len && this._cursorLineNumbers[index] === lineNumber) {\n                renderData[lineIndex] = renderedLine;\n            }\n            else {\n                renderData[lineIndex] = '';\n            }\n        }\n        this._renderData = renderData;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderData) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex >= this._renderData.length) {\n            return '';\n        }\n        return this._renderData[lineIndex];\n    }\n    _shouldRenderInMargin() {\n        return ((this._renderLineHighlight === 'gutter' || this._renderLineHighlight === 'all')\n            && (!this._renderLineHighlightOnlyWhenFocus || this._focused));\n    }\n    _shouldRenderInContent() {\n        return ((this._renderLineHighlight === 'line' || this._renderLineHighlight === 'all')\n            && this._selectionIsEmpty\n            && (!this._renderLineHighlightOnlyWhenFocus || this._focused));\n    }\n}\nexport class CurrentLineHighlightOverlay extends AbstractLineHighlightOverlay {\n    _renderOne(ctx) {\n        const className = 'current-line' + (this._shouldRenderOther() ? ' current-line-both' : '');\n        return `<div class=\"${className}\" style=\"width:${Math.max(ctx.scrollWidth, this._contentWidth)}px; height:${this._lineHeight}px;\"></div>`;\n    }\n    _shouldRenderThis() {\n        return this._shouldRenderInContent();\n    }\n    _shouldRenderOther() {\n        return this._shouldRenderInMargin();\n    }\n}\nexport class CurrentLineMarginHighlightOverlay extends AbstractLineHighlightOverlay {\n    _renderOne(ctx) {\n        const className = 'current-line' + (this._shouldRenderInMargin() ? ' current-line-margin' : '') + (this._shouldRenderOther() ? ' current-line-margin-both' : '');\n        return `<div class=\"${className}\" style=\"width:${this._contentLeft}px; height:${this._lineHeight}px;\"></div>`;\n    }\n    _shouldRenderThis() {\n        return true;\n    }\n    _shouldRenderOther() {\n        return this._shouldRenderInContent();\n    }\n}\nregisterThemingParticipant((theme, collector) => {\n    const lineHighlight = theme.getColor(editorLineHighlight);\n    if (lineHighlight) {\n        collector.addRule(`.monaco-editor .view-overlays .current-line { background-color: ${lineHighlight}; }`);\n        collector.addRule(`.monaco-editor .margin-view-overlays .current-line-margin { background-color: ${lineHighlight}; border: none; }`);\n    }\n    if (!lineHighlight || lineHighlight.isTransparent() || theme.defines(editorLineHighlightBorder)) {\n        const lineHighlightBorder = theme.getColor(editorLineHighlightBorder);\n        if (lineHighlightBorder) {\n            collector.addRule(`.monaco-editor .view-overlays .current-line { border: 2px solid ${lineHighlightBorder}; }`);\n            collector.addRule(`.monaco-editor .margin-view-overlays .current-line-margin { border: 2px solid ${lineHighlightBorder}; }`);\n            if (theme.type === 'hc') {\n                collector.addRule(`.monaco-editor .view-overlays .current-line { border-width: 1px; }`);\n                collector.addRule(`.monaco-editor .margin-view-overlays .current-line-margin { border-width: 1px; }`);\n            }\n        }\n    }\n});\n"]},"metadata":{},"sourceType":"module"}