{"ast":null,"code":"import { getPathFromState, NavigationHelpersContext } from '@react-navigation/core';\nimport * as React from 'react';\nimport LinkingContext from './LinkingContext';\n\nconst getRootStateForNavigate = (navigation, state) => {\n  const parent = navigation.getParent();\n\n  if (parent) {\n    const parentState = parent.getState();\n    return getRootStateForNavigate(parent, {\n      index: 0,\n      routes: [{ ...parentState.routes[parentState.index],\n        state: state\n      }]\n    });\n  }\n\n  return state;\n};\n/**\n * Build destination link for a navigate action.\n * Useful for showing anchor tags on the web for buttons that perform navigation.\n */\n\n\nexport default function useLinkBuilder() {\n  const navigation = React.useContext(NavigationHelpersContext);\n  const linking = React.useContext(LinkingContext);\n  const buildLink = React.useCallback((name, params) => {\n    const {\n      options\n    } = linking;\n\n    if ((options === null || options === void 0 ? void 0 : options.enabled) === false) {\n      return undefined;\n    }\n\n    const state = navigation ? getRootStateForNavigate(navigation, {\n      index: 0,\n      routes: [{\n        name,\n        params\n      }]\n    }) : // If we couldn't find a navigation object in context, we're at root\n    // So we'll construct a basic state object to use\n    {\n      index: 0,\n      routes: [{\n        name,\n        params\n      }]\n    };\n    const path = options !== null && options !== void 0 && options.getPathFromState ? options.getPathFromState(state, options === null || options === void 0 ? void 0 : options.config) : getPathFromState(state, options === null || options === void 0 ? void 0 : options.config);\n    return path;\n  }, [linking, navigation]);\n  return buildLink;\n}","map":{"version":3,"sources":["useLinkBuilder.tsx"],"names":["getRootStateForNavigate","parent","navigation","parentState","index","routes","state","React","linking","buildLink","options","params","path","getPathFromState"],"mappings":"AAAA,SAAA,gBAAA,EAAA,wBAAA,QAAA,wBAAA;AAOA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,OAAA,cAAA,MAAA,kBAAA;;AAWA,MAAMA,uBAAuB,GAAG,CAAA,UAAA,EAAA,KAAA,KAGb;AACjB,QAAMC,MAAM,GAAGC,UAAU,CAAzB,SAAeA,EAAf;;AAEA,MAAA,MAAA,EAAY;AACV,UAAMC,WAAW,GAAGF,MAAM,CAA1B,QAAoBA,EAApB;AAEA,WAAOD,uBAAuB,CAAA,MAAA,EAAS;AACrCI,MAAAA,KAAK,EADgC,CAAA;AAErCC,MAAAA,MAAM,EAAE,CACN,EACE,GAAGF,WAAW,CAAXA,MAAAA,CAAmBA,WAAW,CADnC,KACKA,CADL;AAEEG,QAAAA,KAAK,EAAEA;AAFT,OADM;AAF6B,KAAT,CAA9B;AASD;;AAED,SAAA,KAAA;AApBF,CAAA;AAuBA;AACA;AACA;AACA;;;AACA,eAAe,SAAA,cAAA,GAA0B;AACvC,QAAMJ,UAAU,GAAGK,KAAK,CAALA,UAAAA,CAAnB,wBAAmBA,CAAnB;AACA,QAAMC,OAAO,GAAGD,KAAK,CAALA,UAAAA,CAAhB,cAAgBA,CAAhB;AAEA,QAAME,SAAS,GAAG,KAAK,CAAL,WAAA,CAChB,CAAA,IAAA,EAAA,MAAA,KAAmC;AACjC,UAAM;AAAEC,MAAAA;AAAF,QAAN,OAAA;;AAEA,QAAI,CAAA,OAAO,KAAP,IAAA,IAAA,OAAO,KAAA,KAAP,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAP,OAAA,MAAJ,KAAA,EAAgC;AAC9B,aAAA,SAAA;AACD;;AAED,UAAMJ,KAAK,GAAGJ,UAAU,GACpBF,uBAAuB,CAAA,UAAA,EAAa;AAClCI,MAAAA,KAAK,EAD6B,CAAA;AAElCC,MAAAA,MAAM,EAAE,CAAC;AAAA,QAAA,IAAA;AAAQM,QAAAA;AAAR,OAAD;AAF0B,KAAb,CADH,GAKpB;AACA;AACA;AACEP,MAAAA,KAAK,EADP,CAAA;AAEEC,MAAAA,MAAM,EAAE,CAAC;AAAA,QAAA,IAAA;AAAQM,QAAAA;AAAR,OAAD;AAFV,KAPJ;AAYA,UAAMC,IAAI,GAAGF,OAAO,KAAPA,IAAAA,IAAAA,OAAO,KAAA,KAAPA,CAAAA,IAAAA,OAAO,CAAPA,gBAAAA,GACTA,OAAO,CAAPA,gBAAAA,CAAAA,KAAAA,EAAgCA,OAAhCA,KAAAA,IAAgCA,IAAAA,OAAhCA,KAAAA,KAAAA,CAAgCA,GAAhCA,KAAAA,CAAgCA,GAAAA,OAAO,CAD9BA,MACTA,CADSA,GAETG,gBAAgB,CAAA,KAAA,EAAQH,OAAR,KAAA,IAAQA,IAAAA,OAAR,KAAA,KAAA,CAAQA,GAAR,KAAA,CAAQA,GAAAA,OAAO,CAFnC,MAEoB,CAFpB;AAIA,WAAA,IAAA;AAxBc,GAAA,EA0BhB,CAAA,OAAA,EA1BF,UA0BE,CA1BgB,CAAlB;AA6BA,SAAA,SAAA;AACD","sourcesContent":["import {\n  getPathFromState,\n  NavigationHelpers,\n  NavigationHelpersContext,\n  NavigationProp,\n  ParamListBase,\n} from '@react-navigation/core';\nimport * as React from 'react';\n\nimport LinkingContext from './LinkingContext';\n\ntype NavigationObject =\n  | NavigationHelpers<ParamListBase>\n  | NavigationProp<ParamListBase>;\n\ntype MinimalState = {\n  index: number;\n  routes: { name: string; params?: object; state?: MinimalState }[];\n};\n\nconst getRootStateForNavigate = (\n  navigation: NavigationObject,\n  state: MinimalState\n): MinimalState => {\n  const parent = navigation.getParent();\n\n  if (parent) {\n    const parentState = parent.getState();\n\n    return getRootStateForNavigate(parent, {\n      index: 0,\n      routes: [\n        {\n          ...parentState.routes[parentState.index],\n          state: state,\n        },\n      ],\n    });\n  }\n\n  return state;\n};\n\n/**\n * Build destination link for a navigate action.\n * Useful for showing anchor tags on the web for buttons that perform navigation.\n */\nexport default function useLinkBuilder() {\n  const navigation = React.useContext(NavigationHelpersContext);\n  const linking = React.useContext(LinkingContext);\n\n  const buildLink = React.useCallback(\n    (name: string, params?: object) => {\n      const { options } = linking;\n\n      if (options?.enabled === false) {\n        return undefined;\n      }\n\n      const state = navigation\n        ? getRootStateForNavigate(navigation, {\n            index: 0,\n            routes: [{ name, params }],\n          })\n        : // If we couldn't find a navigation object in context, we're at root\n          // So we'll construct a basic state object to use\n          {\n            index: 0,\n            routes: [{ name, params }],\n          };\n\n      const path = options?.getPathFromState\n        ? options.getPathFromState(state, options?.config)\n        : getPathFromState(state, options?.config);\n\n      return path;\n    },\n    [linking, navigation]\n  );\n\n  return buildLink;\n}\n"]},"metadata":{},"sourceType":"module"}