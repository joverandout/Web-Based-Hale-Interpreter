{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nexport class MoveCaretCommand {\n  constructor(selection, isMovingLeft) {\n    this._selection = selection;\n    this._isMovingLeft = isMovingLeft;\n  }\n\n  getEditOperations(model, builder) {\n    if (this._selection.startLineNumber !== this._selection.endLineNumber || this._selection.isEmpty()) {\n      return;\n    }\n\n    const lineNumber = this._selection.startLineNumber;\n    const startColumn = this._selection.startColumn;\n    const endColumn = this._selection.endColumn;\n\n    if (this._isMovingLeft && startColumn === 1) {\n      return;\n    }\n\n    if (!this._isMovingLeft && endColumn === model.getLineMaxColumn(lineNumber)) {\n      return;\n    }\n\n    if (this._isMovingLeft) {\n      const rangeBefore = new Range(lineNumber, startColumn - 1, lineNumber, startColumn);\n      const charBefore = model.getValueInRange(rangeBefore);\n      builder.addEditOperation(rangeBefore, null);\n      builder.addEditOperation(new Range(lineNumber, endColumn, lineNumber, endColumn), charBefore);\n    } else {\n      const rangeAfter = new Range(lineNumber, endColumn, lineNumber, endColumn + 1);\n      const charAfter = model.getValueInRange(rangeAfter);\n      builder.addEditOperation(rangeAfter, null);\n      builder.addEditOperation(new Range(lineNumber, startColumn, lineNumber, startColumn), charAfter);\n    }\n  }\n\n  computeCursorState(model, helper) {\n    if (this._isMovingLeft) {\n      return new Selection(this._selection.startLineNumber, this._selection.startColumn - 1, this._selection.endLineNumber, this._selection.endColumn - 1);\n    } else {\n      return new Selection(this._selection.startLineNumber, this._selection.startColumn + 1, this._selection.endLineNumber, this._selection.endColumn + 1);\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/contrib/caretOperations/browser/moveCaretCommand.js"],"names":["Range","Selection","MoveCaretCommand","constructor","selection","isMovingLeft","_selection","_isMovingLeft","getEditOperations","model","builder","startLineNumber","endLineNumber","isEmpty","lineNumber","startColumn","endColumn","getLineMaxColumn","rangeBefore","charBefore","getValueInRange","addEditOperation","rangeAfter","charAfter","computeCursorState","helper"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,KAAT,QAAsB,+BAAtB;AACA,SAASC,SAAT,QAA0B,mCAA1B;AACA,OAAO,MAAMC,gBAAN,CAAuB;AAC1BC,EAAAA,WAAW,CAACC,SAAD,EAAYC,YAAZ,EAA0B;AACjC,SAAKC,UAAL,GAAkBF,SAAlB;AACA,SAAKG,aAAL,GAAqBF,YAArB;AACH;;AACDG,EAAAA,iBAAiB,CAACC,KAAD,EAAQC,OAAR,EAAiB;AAC9B,QAAI,KAAKJ,UAAL,CAAgBK,eAAhB,KAAoC,KAAKL,UAAL,CAAgBM,aAApD,IAAqE,KAAKN,UAAL,CAAgBO,OAAhB,EAAzE,EAAoG;AAChG;AACH;;AACD,UAAMC,UAAU,GAAG,KAAKR,UAAL,CAAgBK,eAAnC;AACA,UAAMI,WAAW,GAAG,KAAKT,UAAL,CAAgBS,WAApC;AACA,UAAMC,SAAS,GAAG,KAAKV,UAAL,CAAgBU,SAAlC;;AACA,QAAI,KAAKT,aAAL,IAAsBQ,WAAW,KAAK,CAA1C,EAA6C;AACzC;AACH;;AACD,QAAI,CAAC,KAAKR,aAAN,IAAuBS,SAAS,KAAKP,KAAK,CAACQ,gBAAN,CAAuBH,UAAvB,CAAzC,EAA6E;AACzE;AACH;;AACD,QAAI,KAAKP,aAAT,EAAwB;AACpB,YAAMW,WAAW,GAAG,IAAIlB,KAAJ,CAAUc,UAAV,EAAsBC,WAAW,GAAG,CAApC,EAAuCD,UAAvC,EAAmDC,WAAnD,CAApB;AACA,YAAMI,UAAU,GAAGV,KAAK,CAACW,eAAN,CAAsBF,WAAtB,CAAnB;AACAR,MAAAA,OAAO,CAACW,gBAAR,CAAyBH,WAAzB,EAAsC,IAAtC;AACAR,MAAAA,OAAO,CAACW,gBAAR,CAAyB,IAAIrB,KAAJ,CAAUc,UAAV,EAAsBE,SAAtB,EAAiCF,UAAjC,EAA6CE,SAA7C,CAAzB,EAAkFG,UAAlF;AACH,KALD,MAMK;AACD,YAAMG,UAAU,GAAG,IAAItB,KAAJ,CAAUc,UAAV,EAAsBE,SAAtB,EAAiCF,UAAjC,EAA6CE,SAAS,GAAG,CAAzD,CAAnB;AACA,YAAMO,SAAS,GAAGd,KAAK,CAACW,eAAN,CAAsBE,UAAtB,CAAlB;AACAZ,MAAAA,OAAO,CAACW,gBAAR,CAAyBC,UAAzB,EAAqC,IAArC;AACAZ,MAAAA,OAAO,CAACW,gBAAR,CAAyB,IAAIrB,KAAJ,CAAUc,UAAV,EAAsBC,WAAtB,EAAmCD,UAAnC,EAA+CC,WAA/C,CAAzB,EAAsFQ,SAAtF;AACH;AACJ;;AACDC,EAAAA,kBAAkB,CAACf,KAAD,EAAQgB,MAAR,EAAgB;AAC9B,QAAI,KAAKlB,aAAT,EAAwB;AACpB,aAAO,IAAIN,SAAJ,CAAc,KAAKK,UAAL,CAAgBK,eAA9B,EAA+C,KAAKL,UAAL,CAAgBS,WAAhB,GAA8B,CAA7E,EAAgF,KAAKT,UAAL,CAAgBM,aAAhG,EAA+G,KAAKN,UAAL,CAAgBU,SAAhB,GAA4B,CAA3I,CAAP;AACH,KAFD,MAGK;AACD,aAAO,IAAIf,SAAJ,CAAc,KAAKK,UAAL,CAAgBK,eAA9B,EAA+C,KAAKL,UAAL,CAAgBS,WAAhB,GAA8B,CAA7E,EAAgF,KAAKT,UAAL,CAAgBM,aAAhG,EAA+G,KAAKN,UAAL,CAAgBU,SAAhB,GAA4B,CAA3I,CAAP;AACH;AACJ;;AAtCyB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nexport class MoveCaretCommand {\n    constructor(selection, isMovingLeft) {\n        this._selection = selection;\n        this._isMovingLeft = isMovingLeft;\n    }\n    getEditOperations(model, builder) {\n        if (this._selection.startLineNumber !== this._selection.endLineNumber || this._selection.isEmpty()) {\n            return;\n        }\n        const lineNumber = this._selection.startLineNumber;\n        const startColumn = this._selection.startColumn;\n        const endColumn = this._selection.endColumn;\n        if (this._isMovingLeft && startColumn === 1) {\n            return;\n        }\n        if (!this._isMovingLeft && endColumn === model.getLineMaxColumn(lineNumber)) {\n            return;\n        }\n        if (this._isMovingLeft) {\n            const rangeBefore = new Range(lineNumber, startColumn - 1, lineNumber, startColumn);\n            const charBefore = model.getValueInRange(rangeBefore);\n            builder.addEditOperation(rangeBefore, null);\n            builder.addEditOperation(new Range(lineNumber, endColumn, lineNumber, endColumn), charBefore);\n        }\n        else {\n            const rangeAfter = new Range(lineNumber, endColumn, lineNumber, endColumn + 1);\n            const charAfter = model.getValueInRange(rangeAfter);\n            builder.addEditOperation(rangeAfter, null);\n            builder.addEditOperation(new Range(lineNumber, startColumn, lineNumber, startColumn), charAfter);\n        }\n    }\n    computeCursorState(model, helper) {\n        if (this._isMovingLeft) {\n            return new Selection(this._selection.startLineNumber, this._selection.startColumn - 1, this._selection.endLineNumber, this._selection.endColumn - 1);\n        }\n        else {\n            return new Selection(this._selection.startLineNumber, this._selection.startColumn + 1, this._selection.endLineNumber, this._selection.endColumn + 1);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}