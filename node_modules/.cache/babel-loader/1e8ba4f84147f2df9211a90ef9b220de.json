{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { sanitizeRanges } from './syntaxRangeProvider.js';\nexport const ID_INIT_PROVIDER = 'init';\nexport class InitializingRangeProvider {\n  constructor(editorModel, initialRanges, onTimeout, timeoutTime) {\n    this.editorModel = editorModel;\n    this.id = ID_INIT_PROVIDER;\n\n    if (initialRanges.length) {\n      let toDecorationRange = range => {\n        return {\n          range: {\n            startLineNumber: range.startLineNumber,\n            startColumn: 0,\n            endLineNumber: range.endLineNumber,\n            endColumn: editorModel.getLineLength(range.endLineNumber)\n          },\n          options: {\n            description: 'folding-initializing-range-provider',\n            stickiness: 1\n            /* NeverGrowsWhenTypingAtEdges */\n\n          }\n        };\n      };\n\n      this.decorationIds = editorModel.deltaDecorations([], initialRanges.map(toDecorationRange));\n      this.timeout = setTimeout(onTimeout, timeoutTime);\n    }\n  }\n\n  dispose() {\n    if (this.decorationIds) {\n      this.editorModel.deltaDecorations(this.decorationIds, []);\n      this.decorationIds = undefined;\n    }\n\n    if (typeof this.timeout === 'number') {\n      clearTimeout(this.timeout);\n      this.timeout = undefined;\n    }\n  }\n\n  compute(cancelationToken) {\n    let foldingRangeData = [];\n\n    if (this.decorationIds) {\n      for (let id of this.decorationIds) {\n        let range = this.editorModel.getDecorationRange(id);\n\n        if (range) {\n          foldingRangeData.push({\n            start: range.startLineNumber,\n            end: range.endLineNumber,\n            rank: 1\n          });\n        }\n      }\n    }\n\n    return Promise.resolve(sanitizeRanges(foldingRangeData, Number.MAX_VALUE));\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/contrib/folding/browser/intializingRangeProvider.js"],"names":["sanitizeRanges","ID_INIT_PROVIDER","InitializingRangeProvider","constructor","editorModel","initialRanges","onTimeout","timeoutTime","id","length","toDecorationRange","range","startLineNumber","startColumn","endLineNumber","endColumn","getLineLength","options","description","stickiness","decorationIds","deltaDecorations","map","timeout","setTimeout","dispose","undefined","clearTimeout","compute","cancelationToken","foldingRangeData","getDecorationRange","push","start","end","rank","Promise","resolve","Number","MAX_VALUE"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,cAAT,QAA+B,0BAA/B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAzB;AACP,OAAO,MAAMC,yBAAN,CAAgC;AACnCC,EAAAA,WAAW,CAACC,WAAD,EAAcC,aAAd,EAA6BC,SAA7B,EAAwCC,WAAxC,EAAqD;AAC5D,SAAKH,WAAL,GAAmBA,WAAnB;AACA,SAAKI,EAAL,GAAUP,gBAAV;;AACA,QAAII,aAAa,CAACI,MAAlB,EAA0B;AACtB,UAAIC,iBAAiB,GAAIC,KAAD,IAAW;AAC/B,eAAO;AACHA,UAAAA,KAAK,EAAE;AACHC,YAAAA,eAAe,EAAED,KAAK,CAACC,eADpB;AAEHC,YAAAA,WAAW,EAAE,CAFV;AAGHC,YAAAA,aAAa,EAAEH,KAAK,CAACG,aAHlB;AAIHC,YAAAA,SAAS,EAAEX,WAAW,CAACY,aAAZ,CAA0BL,KAAK,CAACG,aAAhC;AAJR,WADJ;AAOHG,UAAAA,OAAO,EAAE;AACLC,YAAAA,WAAW,EAAE,qCADR;AAELC,YAAAA,UAAU,EAAE;AAAE;;AAFT;AAPN,SAAP;AAYH,OAbD;;AAcA,WAAKC,aAAL,GAAqBhB,WAAW,CAACiB,gBAAZ,CAA6B,EAA7B,EAAiChB,aAAa,CAACiB,GAAd,CAAkBZ,iBAAlB,CAAjC,CAArB;AACA,WAAKa,OAAL,GAAeC,UAAU,CAAClB,SAAD,EAAYC,WAAZ,CAAzB;AACH;AACJ;;AACDkB,EAAAA,OAAO,GAAG;AACN,QAAI,KAAKL,aAAT,EAAwB;AACpB,WAAKhB,WAAL,CAAiBiB,gBAAjB,CAAkC,KAAKD,aAAvC,EAAsD,EAAtD;AACA,WAAKA,aAAL,GAAqBM,SAArB;AACH;;AACD,QAAI,OAAO,KAAKH,OAAZ,KAAwB,QAA5B,EAAsC;AAClCI,MAAAA,YAAY,CAAC,KAAKJ,OAAN,CAAZ;AACA,WAAKA,OAAL,GAAeG,SAAf;AACH;AACJ;;AACDE,EAAAA,OAAO,CAACC,gBAAD,EAAmB;AACtB,QAAIC,gBAAgB,GAAG,EAAvB;;AACA,QAAI,KAAKV,aAAT,EAAwB;AACpB,WAAK,IAAIZ,EAAT,IAAe,KAAKY,aAApB,EAAmC;AAC/B,YAAIT,KAAK,GAAG,KAAKP,WAAL,CAAiB2B,kBAAjB,CAAoCvB,EAApC,CAAZ;;AACA,YAAIG,KAAJ,EAAW;AACPmB,UAAAA,gBAAgB,CAACE,IAAjB,CAAsB;AAAEC,YAAAA,KAAK,EAAEtB,KAAK,CAACC,eAAf;AAAgCsB,YAAAA,GAAG,EAAEvB,KAAK,CAACG,aAA3C;AAA0DqB,YAAAA,IAAI,EAAE;AAAhE,WAAtB;AACH;AACJ;AACJ;;AACD,WAAOC,OAAO,CAACC,OAAR,CAAgBrC,cAAc,CAAC8B,gBAAD,EAAmBQ,MAAM,CAACC,SAA1B,CAA9B,CAAP;AACH;;AA5CkC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { sanitizeRanges } from './syntaxRangeProvider.js';\nexport const ID_INIT_PROVIDER = 'init';\nexport class InitializingRangeProvider {\n    constructor(editorModel, initialRanges, onTimeout, timeoutTime) {\n        this.editorModel = editorModel;\n        this.id = ID_INIT_PROVIDER;\n        if (initialRanges.length) {\n            let toDecorationRange = (range) => {\n                return {\n                    range: {\n                        startLineNumber: range.startLineNumber,\n                        startColumn: 0,\n                        endLineNumber: range.endLineNumber,\n                        endColumn: editorModel.getLineLength(range.endLineNumber)\n                    },\n                    options: {\n                        description: 'folding-initializing-range-provider',\n                        stickiness: 1 /* NeverGrowsWhenTypingAtEdges */\n                    }\n                };\n            };\n            this.decorationIds = editorModel.deltaDecorations([], initialRanges.map(toDecorationRange));\n            this.timeout = setTimeout(onTimeout, timeoutTime);\n        }\n    }\n    dispose() {\n        if (this.decorationIds) {\n            this.editorModel.deltaDecorations(this.decorationIds, []);\n            this.decorationIds = undefined;\n        }\n        if (typeof this.timeout === 'number') {\n            clearTimeout(this.timeout);\n            this.timeout = undefined;\n        }\n    }\n    compute(cancelationToken) {\n        let foldingRangeData = [];\n        if (this.decorationIds) {\n            for (let id of this.decorationIds) {\n                let range = this.editorModel.getDecorationRange(id);\n                if (range) {\n                    foldingRangeData.push({ start: range.startLineNumber, end: range.endLineNumber, rank: 1 });\n                }\n            }\n        }\n        return Promise.resolve(sanitizeRanges(foldingRangeData, Number.MAX_VALUE));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}