{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { findFirstInSorted } from '../../../../base/common/arrays.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { Range } from '../../../common/core/range.js';\nimport { countEOL } from '../../../common/core/eolCounter.js';\nexport class HiddenRangeModel {\n  constructor(model) {\n    this._updateEventEmitter = new Emitter();\n    this._hasLineChanges = false;\n    this._foldingModel = model;\n    this._foldingModelListener = model.onDidChange(_ => this.updateHiddenRanges());\n    this._hiddenRanges = [];\n\n    if (model.regions.length) {\n      this.updateHiddenRanges();\n    }\n  }\n\n  get onDidChange() {\n    return this._updateEventEmitter.event;\n  }\n\n  get hiddenRanges() {\n    return this._hiddenRanges;\n  }\n\n  notifyChangeModelContent(e) {\n    if (this._hiddenRanges.length && !this._hasLineChanges) {\n      this._hasLineChanges = e.changes.some(change => {\n        return change.range.endLineNumber !== change.range.startLineNumber || countEOL(change.text)[0] !== 0;\n      });\n    }\n  }\n\n  updateHiddenRanges() {\n    let updateHiddenAreas = false;\n    let newHiddenAreas = [];\n    let i = 0; // index into hidden\n\n    let k = 0;\n    let lastCollapsedStart = Number.MAX_VALUE;\n    let lastCollapsedEnd = -1;\n    let ranges = this._foldingModel.regions;\n\n    for (; i < ranges.length; i++) {\n      if (!ranges.isCollapsed(i)) {\n        continue;\n      }\n\n      let startLineNumber = ranges.getStartLineNumber(i) + 1; // the first line is not hidden\n\n      let endLineNumber = ranges.getEndLineNumber(i);\n\n      if (lastCollapsedStart <= startLineNumber && endLineNumber <= lastCollapsedEnd) {\n        // ignore ranges contained in collapsed regions\n        continue;\n      }\n\n      if (!updateHiddenAreas && k < this._hiddenRanges.length && this._hiddenRanges[k].startLineNumber === startLineNumber && this._hiddenRanges[k].endLineNumber === endLineNumber) {\n        // reuse the old ranges\n        newHiddenAreas.push(this._hiddenRanges[k]);\n        k++;\n      } else {\n        updateHiddenAreas = true;\n        newHiddenAreas.push(new Range(startLineNumber, 1, endLineNumber, 1));\n      }\n\n      lastCollapsedStart = startLineNumber;\n      lastCollapsedEnd = endLineNumber;\n    }\n\n    if (this._hasLineChanges || updateHiddenAreas || k < this._hiddenRanges.length) {\n      this.applyHiddenRanges(newHiddenAreas);\n    }\n  }\n\n  applyMemento(state) {\n    if (!Array.isArray(state) || state.length === 0) {\n      return false;\n    }\n\n    let hiddenRanges = [];\n\n    for (let r of state) {\n      if (!r.startLineNumber || !r.endLineNumber) {\n        return false;\n      }\n\n      hiddenRanges.push(new Range(r.startLineNumber + 1, 1, r.endLineNumber, 1));\n    }\n\n    this.applyHiddenRanges(hiddenRanges);\n    return true;\n  }\n  /**\n   * Collapse state memento, for persistence only, only used if folding model is not yet initialized\n   */\n\n\n  getMemento() {\n    return this._hiddenRanges.map(r => ({\n      startLineNumber: r.startLineNumber - 1,\n      endLineNumber: r.endLineNumber\n    }));\n  }\n\n  applyHiddenRanges(newHiddenAreas) {\n    this._hiddenRanges = newHiddenAreas;\n    this._hasLineChanges = false;\n\n    this._updateEventEmitter.fire(newHiddenAreas);\n  }\n\n  hasRanges() {\n    return this._hiddenRanges.length > 0;\n  }\n\n  isHidden(line) {\n    return findRange(this._hiddenRanges, line) !== null;\n  }\n\n  adjustSelections(selections) {\n    let hasChanges = false;\n    let editorModel = this._foldingModel.textModel;\n    let lastRange = null;\n\n    let adjustLine = line => {\n      if (!lastRange || !isInside(line, lastRange)) {\n        lastRange = findRange(this._hiddenRanges, line);\n      }\n\n      if (lastRange) {\n        return lastRange.startLineNumber - 1;\n      }\n\n      return null;\n    };\n\n    for (let i = 0, len = selections.length; i < len; i++) {\n      let selection = selections[i];\n      let adjustedStartLine = adjustLine(selection.startLineNumber);\n\n      if (adjustedStartLine) {\n        selection = selection.setStartPosition(adjustedStartLine, editorModel.getLineMaxColumn(adjustedStartLine));\n        hasChanges = true;\n      }\n\n      let adjustedEndLine = adjustLine(selection.endLineNumber);\n\n      if (adjustedEndLine) {\n        selection = selection.setEndPosition(adjustedEndLine, editorModel.getLineMaxColumn(adjustedEndLine));\n        hasChanges = true;\n      }\n\n      selections[i] = selection;\n    }\n\n    return hasChanges;\n  }\n\n  dispose() {\n    if (this.hiddenRanges.length > 0) {\n      this._hiddenRanges = [];\n\n      this._updateEventEmitter.fire(this._hiddenRanges);\n    }\n\n    if (this._foldingModelListener) {\n      this._foldingModelListener.dispose();\n\n      this._foldingModelListener = null;\n    }\n  }\n\n}\n\nfunction isInside(line, range) {\n  return line >= range.startLineNumber && line <= range.endLineNumber;\n}\n\nfunction findRange(ranges, line) {\n  let i = findFirstInSorted(ranges, r => line < r.startLineNumber) - 1;\n\n  if (i >= 0 && ranges[i].endLineNumber >= line) {\n    return ranges[i];\n  }\n\n  return null;\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/contrib/folding/browser/hiddenRangeModel.js"],"names":["findFirstInSorted","Emitter","Range","countEOL","HiddenRangeModel","constructor","model","_updateEventEmitter","_hasLineChanges","_foldingModel","_foldingModelListener","onDidChange","_","updateHiddenRanges","_hiddenRanges","regions","length","event","hiddenRanges","notifyChangeModelContent","e","changes","some","change","range","endLineNumber","startLineNumber","text","updateHiddenAreas","newHiddenAreas","i","k","lastCollapsedStart","Number","MAX_VALUE","lastCollapsedEnd","ranges","isCollapsed","getStartLineNumber","getEndLineNumber","push","applyHiddenRanges","applyMemento","state","Array","isArray","r","getMemento","map","fire","hasRanges","isHidden","line","findRange","adjustSelections","selections","hasChanges","editorModel","textModel","lastRange","adjustLine","isInside","len","selection","adjustedStartLine","setStartPosition","getLineMaxColumn","adjustedEndLine","setEndPosition","dispose"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { findFirstInSorted } from '../../../../base/common/arrays.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { Range } from '../../../common/core/range.js';\nimport { countEOL } from '../../../common/core/eolCounter.js';\nexport class HiddenRangeModel {\n    constructor(model) {\n        this._updateEventEmitter = new Emitter();\n        this._hasLineChanges = false;\n        this._foldingModel = model;\n        this._foldingModelListener = model.onDidChange(_ => this.updateHiddenRanges());\n        this._hiddenRanges = [];\n        if (model.regions.length) {\n            this.updateHiddenRanges();\n        }\n    }\n    get onDidChange() { return this._updateEventEmitter.event; }\n    get hiddenRanges() { return this._hiddenRanges; }\n    notifyChangeModelContent(e) {\n        if (this._hiddenRanges.length && !this._hasLineChanges) {\n            this._hasLineChanges = e.changes.some(change => {\n                return change.range.endLineNumber !== change.range.startLineNumber || countEOL(change.text)[0] !== 0;\n            });\n        }\n    }\n    updateHiddenRanges() {\n        let updateHiddenAreas = false;\n        let newHiddenAreas = [];\n        let i = 0; // index into hidden\n        let k = 0;\n        let lastCollapsedStart = Number.MAX_VALUE;\n        let lastCollapsedEnd = -1;\n        let ranges = this._foldingModel.regions;\n        for (; i < ranges.length; i++) {\n            if (!ranges.isCollapsed(i)) {\n                continue;\n            }\n            let startLineNumber = ranges.getStartLineNumber(i) + 1; // the first line is not hidden\n            let endLineNumber = ranges.getEndLineNumber(i);\n            if (lastCollapsedStart <= startLineNumber && endLineNumber <= lastCollapsedEnd) {\n                // ignore ranges contained in collapsed regions\n                continue;\n            }\n            if (!updateHiddenAreas && k < this._hiddenRanges.length && this._hiddenRanges[k].startLineNumber === startLineNumber && this._hiddenRanges[k].endLineNumber === endLineNumber) {\n                // reuse the old ranges\n                newHiddenAreas.push(this._hiddenRanges[k]);\n                k++;\n            }\n            else {\n                updateHiddenAreas = true;\n                newHiddenAreas.push(new Range(startLineNumber, 1, endLineNumber, 1));\n            }\n            lastCollapsedStart = startLineNumber;\n            lastCollapsedEnd = endLineNumber;\n        }\n        if (this._hasLineChanges || updateHiddenAreas || k < this._hiddenRanges.length) {\n            this.applyHiddenRanges(newHiddenAreas);\n        }\n    }\n    applyMemento(state) {\n        if (!Array.isArray(state) || state.length === 0) {\n            return false;\n        }\n        let hiddenRanges = [];\n        for (let r of state) {\n            if (!r.startLineNumber || !r.endLineNumber) {\n                return false;\n            }\n            hiddenRanges.push(new Range(r.startLineNumber + 1, 1, r.endLineNumber, 1));\n        }\n        this.applyHiddenRanges(hiddenRanges);\n        return true;\n    }\n    /**\n     * Collapse state memento, for persistence only, only used if folding model is not yet initialized\n     */\n    getMemento() {\n        return this._hiddenRanges.map(r => ({ startLineNumber: r.startLineNumber - 1, endLineNumber: r.endLineNumber }));\n    }\n    applyHiddenRanges(newHiddenAreas) {\n        this._hiddenRanges = newHiddenAreas;\n        this._hasLineChanges = false;\n        this._updateEventEmitter.fire(newHiddenAreas);\n    }\n    hasRanges() {\n        return this._hiddenRanges.length > 0;\n    }\n    isHidden(line) {\n        return findRange(this._hiddenRanges, line) !== null;\n    }\n    adjustSelections(selections) {\n        let hasChanges = false;\n        let editorModel = this._foldingModel.textModel;\n        let lastRange = null;\n        let adjustLine = (line) => {\n            if (!lastRange || !isInside(line, lastRange)) {\n                lastRange = findRange(this._hiddenRanges, line);\n            }\n            if (lastRange) {\n                return lastRange.startLineNumber - 1;\n            }\n            return null;\n        };\n        for (let i = 0, len = selections.length; i < len; i++) {\n            let selection = selections[i];\n            let adjustedStartLine = adjustLine(selection.startLineNumber);\n            if (adjustedStartLine) {\n                selection = selection.setStartPosition(adjustedStartLine, editorModel.getLineMaxColumn(adjustedStartLine));\n                hasChanges = true;\n            }\n            let adjustedEndLine = adjustLine(selection.endLineNumber);\n            if (adjustedEndLine) {\n                selection = selection.setEndPosition(adjustedEndLine, editorModel.getLineMaxColumn(adjustedEndLine));\n                hasChanges = true;\n            }\n            selections[i] = selection;\n        }\n        return hasChanges;\n    }\n    dispose() {\n        if (this.hiddenRanges.length > 0) {\n            this._hiddenRanges = [];\n            this._updateEventEmitter.fire(this._hiddenRanges);\n        }\n        if (this._foldingModelListener) {\n            this._foldingModelListener.dispose();\n            this._foldingModelListener = null;\n        }\n    }\n}\nfunction isInside(line, range) {\n    return line >= range.startLineNumber && line <= range.endLineNumber;\n}\nfunction findRange(ranges, line) {\n    let i = findFirstInSorted(ranges, r => line < r.startLineNumber) - 1;\n    if (i >= 0 && ranges[i].endLineNumber >= line) {\n        return ranges[i];\n    }\n    return null;\n}\n"]},"metadata":{},"sourceType":"module"}