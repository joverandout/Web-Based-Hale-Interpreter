{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../../base/common/event.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { Range } from '../../../common/core/range.js';\nimport { MATCHES_LIMIT } from './findModel.js';\n\nfunction effectiveOptionValue(override, value) {\n  if (override === 1\n  /* True */\n  ) {\n    return true;\n  }\n\n  if (override === 2\n  /* False */\n  ) {\n    return false;\n  }\n\n  return value;\n}\n\nexport class FindReplaceState extends Disposable {\n  constructor() {\n    super();\n    this._onFindReplaceStateChange = this._register(new Emitter());\n    this.onFindReplaceStateChange = this._onFindReplaceStateChange.event;\n    this._searchString = '';\n    this._replaceString = '';\n    this._isRevealed = false;\n    this._isReplaceRevealed = false;\n    this._isRegex = false;\n    this._isRegexOverride = 0\n    /* NotSet */\n    ;\n    this._wholeWord = false;\n    this._wholeWordOverride = 0\n    /* NotSet */\n    ;\n    this._matchCase = false;\n    this._matchCaseOverride = 0\n    /* NotSet */\n    ;\n    this._preserveCase = false;\n    this._preserveCaseOverride = 0\n    /* NotSet */\n    ;\n    this._searchScope = null;\n    this._matchesPosition = 0;\n    this._matchesCount = 0;\n    this._currentMatch = null;\n    this._loop = true;\n    this._isSearching = false;\n    this._filters = null;\n  }\n\n  get searchString() {\n    return this._searchString;\n  }\n\n  get replaceString() {\n    return this._replaceString;\n  }\n\n  get isRevealed() {\n    return this._isRevealed;\n  }\n\n  get isReplaceRevealed() {\n    return this._isReplaceRevealed;\n  }\n\n  get isRegex() {\n    return effectiveOptionValue(this._isRegexOverride, this._isRegex);\n  }\n\n  get wholeWord() {\n    return effectiveOptionValue(this._wholeWordOverride, this._wholeWord);\n  }\n\n  get matchCase() {\n    return effectiveOptionValue(this._matchCaseOverride, this._matchCase);\n  }\n\n  get preserveCase() {\n    return effectiveOptionValue(this._preserveCaseOverride, this._preserveCase);\n  }\n\n  get actualIsRegex() {\n    return this._isRegex;\n  }\n\n  get actualWholeWord() {\n    return this._wholeWord;\n  }\n\n  get actualMatchCase() {\n    return this._matchCase;\n  }\n\n  get actualPreserveCase() {\n    return this._preserveCase;\n  }\n\n  get searchScope() {\n    return this._searchScope;\n  }\n\n  get matchesPosition() {\n    return this._matchesPosition;\n  }\n\n  get matchesCount() {\n    return this._matchesCount;\n  }\n\n  get currentMatch() {\n    return this._currentMatch;\n  }\n\n  changeMatchInfo(matchesPosition, matchesCount, currentMatch) {\n    let changeEvent = {\n      moveCursor: false,\n      updateHistory: false,\n      searchString: false,\n      replaceString: false,\n      isRevealed: false,\n      isReplaceRevealed: false,\n      isRegex: false,\n      wholeWord: false,\n      matchCase: false,\n      preserveCase: false,\n      searchScope: false,\n      matchesPosition: false,\n      matchesCount: false,\n      currentMatch: false,\n      loop: false,\n      isSearching: false,\n      filters: false\n    };\n    let somethingChanged = false;\n\n    if (matchesCount === 0) {\n      matchesPosition = 0;\n    }\n\n    if (matchesPosition > matchesCount) {\n      matchesPosition = matchesCount;\n    }\n\n    if (this._matchesPosition !== matchesPosition) {\n      this._matchesPosition = matchesPosition;\n      changeEvent.matchesPosition = true;\n      somethingChanged = true;\n    }\n\n    if (this._matchesCount !== matchesCount) {\n      this._matchesCount = matchesCount;\n      changeEvent.matchesCount = true;\n      somethingChanged = true;\n    }\n\n    if (typeof currentMatch !== 'undefined') {\n      if (!Range.equalsRange(this._currentMatch, currentMatch)) {\n        this._currentMatch = currentMatch;\n        changeEvent.currentMatch = true;\n        somethingChanged = true;\n      }\n    }\n\n    if (somethingChanged) {\n      this._onFindReplaceStateChange.fire(changeEvent);\n    }\n  }\n\n  change(newState, moveCursor, updateHistory = true) {\n    var _a;\n\n    let changeEvent = {\n      moveCursor: moveCursor,\n      updateHistory: updateHistory,\n      searchString: false,\n      replaceString: false,\n      isRevealed: false,\n      isReplaceRevealed: false,\n      isRegex: false,\n      wholeWord: false,\n      matchCase: false,\n      preserveCase: false,\n      searchScope: false,\n      matchesPosition: false,\n      matchesCount: false,\n      currentMatch: false,\n      loop: false,\n      isSearching: false,\n      filters: false\n    };\n    let somethingChanged = false;\n    const oldEffectiveIsRegex = this.isRegex;\n    const oldEffectiveWholeWords = this.wholeWord;\n    const oldEffectiveMatchCase = this.matchCase;\n    const oldEffectivePreserveCase = this.preserveCase;\n\n    if (typeof newState.searchString !== 'undefined') {\n      if (this._searchString !== newState.searchString) {\n        this._searchString = newState.searchString;\n        changeEvent.searchString = true;\n        somethingChanged = true;\n      }\n    }\n\n    if (typeof newState.replaceString !== 'undefined') {\n      if (this._replaceString !== newState.replaceString) {\n        this._replaceString = newState.replaceString;\n        changeEvent.replaceString = true;\n        somethingChanged = true;\n      }\n    }\n\n    if (typeof newState.isRevealed !== 'undefined') {\n      if (this._isRevealed !== newState.isRevealed) {\n        this._isRevealed = newState.isRevealed;\n        changeEvent.isRevealed = true;\n        somethingChanged = true;\n      }\n    }\n\n    if (typeof newState.isReplaceRevealed !== 'undefined') {\n      if (this._isReplaceRevealed !== newState.isReplaceRevealed) {\n        this._isReplaceRevealed = newState.isReplaceRevealed;\n        changeEvent.isReplaceRevealed = true;\n        somethingChanged = true;\n      }\n    }\n\n    if (typeof newState.isRegex !== 'undefined') {\n      this._isRegex = newState.isRegex;\n    }\n\n    if (typeof newState.wholeWord !== 'undefined') {\n      this._wholeWord = newState.wholeWord;\n    }\n\n    if (typeof newState.matchCase !== 'undefined') {\n      this._matchCase = newState.matchCase;\n    }\n\n    if (typeof newState.preserveCase !== 'undefined') {\n      this._preserveCase = newState.preserveCase;\n    }\n\n    if (typeof newState.searchScope !== 'undefined') {\n      if (!((_a = newState.searchScope) === null || _a === void 0 ? void 0 : _a.every(newSearchScope => {\n        var _a;\n\n        return (_a = this._searchScope) === null || _a === void 0 ? void 0 : _a.some(existingSearchScope => {\n          return !Range.equalsRange(existingSearchScope, newSearchScope);\n        });\n      }))) {\n        this._searchScope = newState.searchScope;\n        changeEvent.searchScope = true;\n        somethingChanged = true;\n      }\n    }\n\n    if (typeof newState.loop !== 'undefined') {\n      if (this._loop !== newState.loop) {\n        this._loop = newState.loop;\n        changeEvent.loop = true;\n        somethingChanged = true;\n      }\n    }\n\n    if (typeof newState.isSearching !== 'undefined') {\n      if (this._isSearching !== newState.isSearching) {\n        this._isSearching = newState.isSearching;\n        changeEvent.isSearching = true;\n        somethingChanged = true;\n      }\n    }\n\n    if (typeof newState.filters !== 'undefined') {\n      if (this._filters) {\n        this._filters.update(newState.filters);\n      } else {\n        this._filters = newState.filters;\n      }\n\n      changeEvent.filters = true;\n      somethingChanged = true;\n    } // Overrides get set when they explicitly come in and get reset anytime something else changes\n\n\n    this._isRegexOverride = typeof newState.isRegexOverride !== 'undefined' ? newState.isRegexOverride : 0\n    /* NotSet */\n    ;\n    this._wholeWordOverride = typeof newState.wholeWordOverride !== 'undefined' ? newState.wholeWordOverride : 0\n    /* NotSet */\n    ;\n    this._matchCaseOverride = typeof newState.matchCaseOverride !== 'undefined' ? newState.matchCaseOverride : 0\n    /* NotSet */\n    ;\n    this._preserveCaseOverride = typeof newState.preserveCaseOverride !== 'undefined' ? newState.preserveCaseOverride : 0\n    /* NotSet */\n    ;\n\n    if (oldEffectiveIsRegex !== this.isRegex) {\n      somethingChanged = true;\n      changeEvent.isRegex = true;\n    }\n\n    if (oldEffectiveWholeWords !== this.wholeWord) {\n      somethingChanged = true;\n      changeEvent.wholeWord = true;\n    }\n\n    if (oldEffectiveMatchCase !== this.matchCase) {\n      somethingChanged = true;\n      changeEvent.matchCase = true;\n    }\n\n    if (oldEffectivePreserveCase !== this.preserveCase) {\n      somethingChanged = true;\n      changeEvent.preserveCase = true;\n    }\n\n    if (somethingChanged) {\n      this._onFindReplaceStateChange.fire(changeEvent);\n    }\n  }\n\n  canNavigateBack() {\n    return this.canNavigateInLoop() || this.matchesPosition !== 1;\n  }\n\n  canNavigateForward() {\n    return this.canNavigateInLoop() || this.matchesPosition < this.matchesCount;\n  }\n\n  canNavigateInLoop() {\n    return this._loop || this.matchesCount >= MATCHES_LIMIT;\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/contrib/find/browser/findState.js"],"names":["Emitter","Disposable","Range","MATCHES_LIMIT","effectiveOptionValue","override","value","FindReplaceState","constructor","_onFindReplaceStateChange","_register","onFindReplaceStateChange","event","_searchString","_replaceString","_isRevealed","_isReplaceRevealed","_isRegex","_isRegexOverride","_wholeWord","_wholeWordOverride","_matchCase","_matchCaseOverride","_preserveCase","_preserveCaseOverride","_searchScope","_matchesPosition","_matchesCount","_currentMatch","_loop","_isSearching","_filters","searchString","replaceString","isRevealed","isReplaceRevealed","isRegex","wholeWord","matchCase","preserveCase","actualIsRegex","actualWholeWord","actualMatchCase","actualPreserveCase","searchScope","matchesPosition","matchesCount","currentMatch","changeMatchInfo","changeEvent","moveCursor","updateHistory","loop","isSearching","filters","somethingChanged","equalsRange","fire","change","newState","_a","oldEffectiveIsRegex","oldEffectiveWholeWords","oldEffectiveMatchCase","oldEffectivePreserveCase","every","newSearchScope","some","existingSearchScope","update","isRegexOverride","wholeWordOverride","matchCaseOverride","preserveCaseOverride","canNavigateBack","canNavigateInLoop","canNavigateForward"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../../base/common/event.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { Range } from '../../../common/core/range.js';\nimport { MATCHES_LIMIT } from './findModel.js';\nfunction effectiveOptionValue(override, value) {\n    if (override === 1 /* True */) {\n        return true;\n    }\n    if (override === 2 /* False */) {\n        return false;\n    }\n    return value;\n}\nexport class FindReplaceState extends Disposable {\n    constructor() {\n        super();\n        this._onFindReplaceStateChange = this._register(new Emitter());\n        this.onFindReplaceStateChange = this._onFindReplaceStateChange.event;\n        this._searchString = '';\n        this._replaceString = '';\n        this._isRevealed = false;\n        this._isReplaceRevealed = false;\n        this._isRegex = false;\n        this._isRegexOverride = 0 /* NotSet */;\n        this._wholeWord = false;\n        this._wholeWordOverride = 0 /* NotSet */;\n        this._matchCase = false;\n        this._matchCaseOverride = 0 /* NotSet */;\n        this._preserveCase = false;\n        this._preserveCaseOverride = 0 /* NotSet */;\n        this._searchScope = null;\n        this._matchesPosition = 0;\n        this._matchesCount = 0;\n        this._currentMatch = null;\n        this._loop = true;\n        this._isSearching = false;\n        this._filters = null;\n    }\n    get searchString() { return this._searchString; }\n    get replaceString() { return this._replaceString; }\n    get isRevealed() { return this._isRevealed; }\n    get isReplaceRevealed() { return this._isReplaceRevealed; }\n    get isRegex() { return effectiveOptionValue(this._isRegexOverride, this._isRegex); }\n    get wholeWord() { return effectiveOptionValue(this._wholeWordOverride, this._wholeWord); }\n    get matchCase() { return effectiveOptionValue(this._matchCaseOverride, this._matchCase); }\n    get preserveCase() { return effectiveOptionValue(this._preserveCaseOverride, this._preserveCase); }\n    get actualIsRegex() { return this._isRegex; }\n    get actualWholeWord() { return this._wholeWord; }\n    get actualMatchCase() { return this._matchCase; }\n    get actualPreserveCase() { return this._preserveCase; }\n    get searchScope() { return this._searchScope; }\n    get matchesPosition() { return this._matchesPosition; }\n    get matchesCount() { return this._matchesCount; }\n    get currentMatch() { return this._currentMatch; }\n    changeMatchInfo(matchesPosition, matchesCount, currentMatch) {\n        let changeEvent = {\n            moveCursor: false,\n            updateHistory: false,\n            searchString: false,\n            replaceString: false,\n            isRevealed: false,\n            isReplaceRevealed: false,\n            isRegex: false,\n            wholeWord: false,\n            matchCase: false,\n            preserveCase: false,\n            searchScope: false,\n            matchesPosition: false,\n            matchesCount: false,\n            currentMatch: false,\n            loop: false,\n            isSearching: false,\n            filters: false\n        };\n        let somethingChanged = false;\n        if (matchesCount === 0) {\n            matchesPosition = 0;\n        }\n        if (matchesPosition > matchesCount) {\n            matchesPosition = matchesCount;\n        }\n        if (this._matchesPosition !== matchesPosition) {\n            this._matchesPosition = matchesPosition;\n            changeEvent.matchesPosition = true;\n            somethingChanged = true;\n        }\n        if (this._matchesCount !== matchesCount) {\n            this._matchesCount = matchesCount;\n            changeEvent.matchesCount = true;\n            somethingChanged = true;\n        }\n        if (typeof currentMatch !== 'undefined') {\n            if (!Range.equalsRange(this._currentMatch, currentMatch)) {\n                this._currentMatch = currentMatch;\n                changeEvent.currentMatch = true;\n                somethingChanged = true;\n            }\n        }\n        if (somethingChanged) {\n            this._onFindReplaceStateChange.fire(changeEvent);\n        }\n    }\n    change(newState, moveCursor, updateHistory = true) {\n        var _a;\n        let changeEvent = {\n            moveCursor: moveCursor,\n            updateHistory: updateHistory,\n            searchString: false,\n            replaceString: false,\n            isRevealed: false,\n            isReplaceRevealed: false,\n            isRegex: false,\n            wholeWord: false,\n            matchCase: false,\n            preserveCase: false,\n            searchScope: false,\n            matchesPosition: false,\n            matchesCount: false,\n            currentMatch: false,\n            loop: false,\n            isSearching: false,\n            filters: false\n        };\n        let somethingChanged = false;\n        const oldEffectiveIsRegex = this.isRegex;\n        const oldEffectiveWholeWords = this.wholeWord;\n        const oldEffectiveMatchCase = this.matchCase;\n        const oldEffectivePreserveCase = this.preserveCase;\n        if (typeof newState.searchString !== 'undefined') {\n            if (this._searchString !== newState.searchString) {\n                this._searchString = newState.searchString;\n                changeEvent.searchString = true;\n                somethingChanged = true;\n            }\n        }\n        if (typeof newState.replaceString !== 'undefined') {\n            if (this._replaceString !== newState.replaceString) {\n                this._replaceString = newState.replaceString;\n                changeEvent.replaceString = true;\n                somethingChanged = true;\n            }\n        }\n        if (typeof newState.isRevealed !== 'undefined') {\n            if (this._isRevealed !== newState.isRevealed) {\n                this._isRevealed = newState.isRevealed;\n                changeEvent.isRevealed = true;\n                somethingChanged = true;\n            }\n        }\n        if (typeof newState.isReplaceRevealed !== 'undefined') {\n            if (this._isReplaceRevealed !== newState.isReplaceRevealed) {\n                this._isReplaceRevealed = newState.isReplaceRevealed;\n                changeEvent.isReplaceRevealed = true;\n                somethingChanged = true;\n            }\n        }\n        if (typeof newState.isRegex !== 'undefined') {\n            this._isRegex = newState.isRegex;\n        }\n        if (typeof newState.wholeWord !== 'undefined') {\n            this._wholeWord = newState.wholeWord;\n        }\n        if (typeof newState.matchCase !== 'undefined') {\n            this._matchCase = newState.matchCase;\n        }\n        if (typeof newState.preserveCase !== 'undefined') {\n            this._preserveCase = newState.preserveCase;\n        }\n        if (typeof newState.searchScope !== 'undefined') {\n            if (!((_a = newState.searchScope) === null || _a === void 0 ? void 0 : _a.every((newSearchScope) => {\n                var _a;\n                return (_a = this._searchScope) === null || _a === void 0 ? void 0 : _a.some(existingSearchScope => {\n                    return !Range.equalsRange(existingSearchScope, newSearchScope);\n                });\n            }))) {\n                this._searchScope = newState.searchScope;\n                changeEvent.searchScope = true;\n                somethingChanged = true;\n            }\n        }\n        if (typeof newState.loop !== 'undefined') {\n            if (this._loop !== newState.loop) {\n                this._loop = newState.loop;\n                changeEvent.loop = true;\n                somethingChanged = true;\n            }\n        }\n        if (typeof newState.isSearching !== 'undefined') {\n            if (this._isSearching !== newState.isSearching) {\n                this._isSearching = newState.isSearching;\n                changeEvent.isSearching = true;\n                somethingChanged = true;\n            }\n        }\n        if (typeof newState.filters !== 'undefined') {\n            if (this._filters) {\n                this._filters.update(newState.filters);\n            }\n            else {\n                this._filters = newState.filters;\n            }\n            changeEvent.filters = true;\n            somethingChanged = true;\n        }\n        // Overrides get set when they explicitly come in and get reset anytime something else changes\n        this._isRegexOverride = (typeof newState.isRegexOverride !== 'undefined' ? newState.isRegexOverride : 0 /* NotSet */);\n        this._wholeWordOverride = (typeof newState.wholeWordOverride !== 'undefined' ? newState.wholeWordOverride : 0 /* NotSet */);\n        this._matchCaseOverride = (typeof newState.matchCaseOverride !== 'undefined' ? newState.matchCaseOverride : 0 /* NotSet */);\n        this._preserveCaseOverride = (typeof newState.preserveCaseOverride !== 'undefined' ? newState.preserveCaseOverride : 0 /* NotSet */);\n        if (oldEffectiveIsRegex !== this.isRegex) {\n            somethingChanged = true;\n            changeEvent.isRegex = true;\n        }\n        if (oldEffectiveWholeWords !== this.wholeWord) {\n            somethingChanged = true;\n            changeEvent.wholeWord = true;\n        }\n        if (oldEffectiveMatchCase !== this.matchCase) {\n            somethingChanged = true;\n            changeEvent.matchCase = true;\n        }\n        if (oldEffectivePreserveCase !== this.preserveCase) {\n            somethingChanged = true;\n            changeEvent.preserveCase = true;\n        }\n        if (somethingChanged) {\n            this._onFindReplaceStateChange.fire(changeEvent);\n        }\n    }\n    canNavigateBack() {\n        return this.canNavigateInLoop() || (this.matchesPosition !== 1);\n    }\n    canNavigateForward() {\n        return this.canNavigateInLoop() || (this.matchesPosition < this.matchesCount);\n    }\n    canNavigateInLoop() {\n        return this._loop || (this.matchesCount >= MATCHES_LIMIT);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}