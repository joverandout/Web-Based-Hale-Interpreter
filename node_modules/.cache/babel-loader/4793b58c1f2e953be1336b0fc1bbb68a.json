{"ast":null,"code":"/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n// src/basic-languages/ruby/ruby.ts\nvar conf = {\n  comments: {\n    lineComment: \"#\",\n    blockComment: [\"=begin\", \"=end\"]\n  },\n  brackets: [[\"(\", \")\"], [\"{\", \"}\"], [\"[\", \"]\"]],\n  autoClosingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }],\n  surroundingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }],\n  indentationRules: {\n    increaseIndentPattern: new RegExp(`^\\\\s*((begin|class|(private|protected)\\\\s+def|def|else|elsif|ensure|for|if|module|rescue|unless|until|when|while|case)|([^#]*\\\\sdo\\\\b)|([^#]*=\\\\s*(case|if|unless)))\\\\b([^#\\\\{;]|(\"|'|/).*\\\\4)*(#.*)?$`),\n    decreaseIndentPattern: new RegExp(\"^\\\\s*([}\\\\]]([,)]?\\\\s*(#|$)|\\\\.[a-zA-Z_]\\\\w*\\\\b)|(end|rescue|ensure|else|elsif|when)\\\\b)\")\n  }\n};\nvar language = {\n  tokenPostfix: \".ruby\",\n  keywords: [\"__LINE__\", \"__ENCODING__\", \"__FILE__\", \"BEGIN\", \"END\", \"alias\", \"and\", \"begin\", \"break\", \"case\", \"class\", \"def\", \"defined?\", \"do\", \"else\", \"elsif\", \"end\", \"ensure\", \"for\", \"false\", \"if\", \"in\", \"module\", \"next\", \"nil\", \"not\", \"or\", \"redo\", \"rescue\", \"retry\", \"return\", \"self\", \"super\", \"then\", \"true\", \"undef\", \"unless\", \"until\", \"when\", \"while\", \"yield\"],\n  keywordops: [\"::\", \"..\", \"...\", \"?\", \":\", \"=>\"],\n  builtins: [\"require\", \"public\", \"private\", \"include\", \"extend\", \"attr_reader\", \"protected\", \"private_class_method\", \"protected_class_method\", \"new\"],\n  declarations: [\"module\", \"class\", \"def\", \"case\", \"do\", \"begin\", \"for\", \"if\", \"while\", \"until\", \"unless\"],\n  linedecls: [\"def\", \"case\", \"do\", \"begin\", \"for\", \"if\", \"while\", \"until\", \"unless\"],\n  operators: [\"^\", \"&\", \"|\", \"<=>\", \"==\", \"===\", \"!~\", \"=~\", \">\", \">=\", \"<\", \"<=\", \"<<\", \">>\", \"+\", \"-\", \"*\", \"/\", \"%\", \"**\", \"~\", \"+@\", \"-@\", \"[]\", \"[]=\", \"`\", \"+=\", \"-=\", \"*=\", \"**=\", \"/=\", \"^=\", \"%=\", \"<<=\", \">>=\", \"&=\", \"&&=\", \"||=\", \"|=\"],\n  brackets: [{\n    open: \"(\",\n    close: \")\",\n    token: \"delimiter.parenthesis\"\n  }, {\n    open: \"{\",\n    close: \"}\",\n    token: \"delimiter.curly\"\n  }, {\n    open: \"[\",\n    close: \"]\",\n    token: \"delimiter.square\"\n  }],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%\\.]+/,\n  escape: /(?:[abefnrstv\\\\\"'\\n\\r]|[0-7]{1,3}|x[0-9A-Fa-f]{1,2}|u[0-9A-Fa-f]{4})/,\n  escapes: /\\\\(?:C\\-(@escape|.)|c(@escape|.)|@escape)/,\n  decpart: /\\d(_?\\d)*/,\n  decimal: /0|@decpart/,\n  delim: /[^a-zA-Z0-9\\s\\n\\r]/,\n  heredelim: /(?:\\w+|'[^']*'|\"[^\"]*\"|`[^`]*`)/,\n  regexpctl: /[(){}\\[\\]\\$\\^|\\-*+?\\.]/,\n  regexpesc: /\\\\(?:[AzZbBdDfnrstvwWn0\\\\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})?/,\n  tokenizer: {\n    root: [[/^(\\s*)([a-z_]\\w*[!?=]?)/, [\"white\", {\n      cases: {\n        \"for|until|while\": {\n          token: \"keyword.$2\",\n          next: \"@dodecl.$2\"\n        },\n        \"@declarations\": {\n          token: \"keyword.$2\",\n          next: \"@root.$2\"\n        },\n        end: {\n          token: \"keyword.$S2\",\n          next: \"@pop\"\n        },\n        \"@keywords\": \"keyword\",\n        \"@builtins\": \"predefined\",\n        \"@default\": \"identifier\"\n      }\n    }]], [/[a-z_]\\w*[!?=]?/, {\n      cases: {\n        \"if|unless|while|until\": {\n          token: \"keyword.$0x\",\n          next: \"@modifier.$0x\"\n        },\n        for: {\n          token: \"keyword.$2\",\n          next: \"@dodecl.$2\"\n        },\n        \"@linedecls\": {\n          token: \"keyword.$0\",\n          next: \"@root.$0\"\n        },\n        end: {\n          token: \"keyword.$S2\",\n          next: \"@pop\"\n        },\n        \"@keywords\": \"keyword\",\n        \"@builtins\": \"predefined\",\n        \"@default\": \"identifier\"\n      }\n    }], [/[A-Z][\\w]*[!?=]?/, \"constructor.identifier\"], [/\\$[\\w]*/, \"global.constant\"], [/@[\\w]*/, \"namespace.instance.identifier\"], [/@@@[\\w]*/, \"namespace.class.identifier\"], [/<<[-~](@heredelim).*/, {\n      token: \"string.heredoc.delimiter\",\n      next: \"@heredoc.$1\"\n    }], [/[ \\t\\r\\n]+<<(@heredelim).*/, {\n      token: \"string.heredoc.delimiter\",\n      next: \"@heredoc.$1\"\n    }], [/^<<(@heredelim).*/, {\n      token: \"string.heredoc.delimiter\",\n      next: \"@heredoc.$1\"\n    }], {\n      include: \"@whitespace\"\n    }, [/\"/, {\n      token: \"string.d.delim\",\n      next: '@dstring.d.\"'\n    }], [/'/, {\n      token: \"string.sq.delim\",\n      next: \"@sstring.sq\"\n    }], [/%([rsqxwW]|Q?)/, {\n      token: \"@rematch\",\n      next: \"pstring\"\n    }], [/`/, {\n      token: \"string.x.delim\",\n      next: \"@dstring.x.`\"\n    }], [/:(\\w|[$@])\\w*[!?=]?/, \"string.s\"], [/:\"/, {\n      token: \"string.s.delim\",\n      next: '@dstring.s.\"'\n    }], [/:'/, {\n      token: \"string.s.delim\",\n      next: \"@sstring.s\"\n    }], [/\\/(?=(\\\\\\/|[^\\/\\n])+\\/)/, {\n      token: \"regexp.delim\",\n      next: \"@regexp\"\n    }], [/[{}()\\[\\]]/, \"@brackets\"], [/@symbols/, {\n      cases: {\n        \"@keywordops\": \"keyword\",\n        \"@operators\": \"operator\",\n        \"@default\": \"\"\n      }\n    }], [/[;,]/, \"delimiter\"], [/0[xX][0-9a-fA-F](_?[0-9a-fA-F])*/, \"number.hex\"], [/0[_oO][0-7](_?[0-7])*/, \"number.octal\"], [/0[bB][01](_?[01])*/, \"number.binary\"], [/0[dD]@decpart/, \"number\"], [/@decimal((\\.@decpart)?([eE][\\-+]?@decpart)?)/, {\n      cases: {\n        $1: \"number.float\",\n        \"@default\": \"number\"\n      }\n    }]],\n    dodecl: [[/^/, {\n      token: \"\",\n      switchTo: \"@root.$S2\"\n    }], [/[a-z_]\\w*[!?=]?/, {\n      cases: {\n        end: {\n          token: \"keyword.$S2\",\n          next: \"@pop\"\n        },\n        do: {\n          token: \"keyword\",\n          switchTo: \"@root.$S2\"\n        },\n        \"@linedecls\": {\n          token: \"@rematch\",\n          switchTo: \"@root.$S2\"\n        },\n        \"@keywords\": \"keyword\",\n        \"@builtins\": \"predefined\",\n        \"@default\": \"identifier\"\n      }\n    }], {\n      include: \"@root\"\n    }],\n    modifier: [[/^/, \"\", \"@pop\"], [/[a-z_]\\w*[!?=]?/, {\n      cases: {\n        end: {\n          token: \"keyword.$S2\",\n          next: \"@pop\"\n        },\n        \"then|else|elsif|do\": {\n          token: \"keyword\",\n          switchTo: \"@root.$S2\"\n        },\n        \"@linedecls\": {\n          token: \"@rematch\",\n          switchTo: \"@root.$S2\"\n        },\n        \"@keywords\": \"keyword\",\n        \"@builtins\": \"predefined\",\n        \"@default\": \"identifier\"\n      }\n    }], {\n      include: \"@root\"\n    }],\n    sstring: [[/[^\\\\']+/, \"string.$S2\"], [/\\\\\\\\|\\\\'|\\\\$/, \"string.$S2.escape\"], [/\\\\./, \"string.$S2.invalid\"], [/'/, {\n      token: \"string.$S2.delim\",\n      next: \"@pop\"\n    }]],\n    dstring: [[/[^\\\\`\"#]+/, \"string.$S2\"], [/#/, \"string.$S2.escape\", \"@interpolated\"], [/\\\\$/, \"string.$S2.escape\"], [/@escapes/, \"string.$S2.escape\"], [/\\\\./, \"string.$S2.escape.invalid\"], [/[`\"]/, {\n      cases: {\n        \"$#==$S3\": {\n          token: \"string.$S2.delim\",\n          next: \"@pop\"\n        },\n        \"@default\": \"string.$S2\"\n      }\n    }]],\n    heredoc: [[/^(\\s*)(@heredelim)$/, {\n      cases: {\n        \"$2==$S2\": [\"string.heredoc\", {\n          token: \"string.heredoc.delimiter\",\n          next: \"@pop\"\n        }],\n        \"@default\": [\"string.heredoc\", \"string.heredoc\"]\n      }\n    }], [/.*/, \"string.heredoc\"]],\n    interpolated: [[/\\$\\w*/, \"global.constant\", \"@pop\"], [/@\\w*/, \"namespace.class.identifier\", \"@pop\"], [/@@@\\w*/, \"namespace.instance.identifier\", \"@pop\"], [/[{]/, {\n      token: \"string.escape.curly\",\n      switchTo: \"@interpolated_compound\"\n    }], [\"\", \"\", \"@pop\"]],\n    interpolated_compound: [[/[}]/, {\n      token: \"string.escape.curly\",\n      next: \"@pop\"\n    }], {\n      include: \"@root\"\n    }],\n    pregexp: [{\n      include: \"@whitespace\"\n    }, [/[^\\(\\{\\[\\\\]/, {\n      cases: {\n        \"$#==$S3\": {\n          token: \"regexp.delim\",\n          next: \"@pop\"\n        },\n        \"$#==$S2\": {\n          token: \"regexp.delim\",\n          next: \"@push\"\n        },\n        \"~[)}\\\\]]\": \"@brackets.regexp.escape.control\",\n        \"~@regexpctl\": \"regexp.escape.control\",\n        \"@default\": \"regexp\"\n      }\n    }], {\n      include: \"@regexcontrol\"\n    }],\n    regexp: [{\n      include: \"@regexcontrol\"\n    }, [/[^\\\\\\/]/, \"regexp\"], [\"/[ixmp]*\", {\n      token: \"regexp.delim\"\n    }, \"@pop\"]],\n    regexcontrol: [[/(\\{)(\\d+(?:,\\d*)?)(\\})/, [\"@brackets.regexp.escape.control\", \"regexp.escape.control\", \"@brackets.regexp.escape.control\"]], [/(\\[)(\\^?)/, [\"@brackets.regexp.escape.control\", {\n      token: \"regexp.escape.control\",\n      next: \"@regexrange\"\n    }]], [/(\\()(\\?[:=!])/, [\"@brackets.regexp.escape.control\", \"regexp.escape.control\"]], [/\\(\\?#/, {\n      token: \"regexp.escape.control\",\n      next: \"@regexpcomment\"\n    }], [/[()]/, \"@brackets.regexp.escape.control\"], [/@regexpctl/, \"regexp.escape.control\"], [/\\\\$/, \"regexp.escape\"], [/@regexpesc/, \"regexp.escape\"], [/\\\\\\./, \"regexp.invalid\"], [/#/, \"regexp.escape\", \"@interpolated\"]],\n    regexrange: [[/-/, \"regexp.escape.control\"], [/\\^/, \"regexp.invalid\"], [/\\\\$/, \"regexp.escape\"], [/@regexpesc/, \"regexp.escape\"], [/[^\\]]/, \"regexp\"], [/\\]/, \"@brackets.regexp.escape.control\", \"@pop\"]],\n    regexpcomment: [[/[^)]+/, \"comment\"], [/\\)/, {\n      token: \"regexp.escape.control\",\n      next: \"@pop\"\n    }]],\n    pstring: [[/%([qws])\\(/, {\n      token: \"string.$1.delim\",\n      switchTo: \"@qstring.$1.(.)\"\n    }], [/%([qws])\\[/, {\n      token: \"string.$1.delim\",\n      switchTo: \"@qstring.$1.[.]\"\n    }], [/%([qws])\\{/, {\n      token: \"string.$1.delim\",\n      switchTo: \"@qstring.$1.{.}\"\n    }], [/%([qws])</, {\n      token: \"string.$1.delim\",\n      switchTo: \"@qstring.$1.<.>\"\n    }], [/%([qws])(@delim)/, {\n      token: \"string.$1.delim\",\n      switchTo: \"@qstring.$1.$2.$2\"\n    }], [/%r\\(/, {\n      token: \"regexp.delim\",\n      switchTo: \"@pregexp.(.)\"\n    }], [/%r\\[/, {\n      token: \"regexp.delim\",\n      switchTo: \"@pregexp.[.]\"\n    }], [/%r\\{/, {\n      token: \"regexp.delim\",\n      switchTo: \"@pregexp.{.}\"\n    }], [/%r</, {\n      token: \"regexp.delim\",\n      switchTo: \"@pregexp.<.>\"\n    }], [/%r(@delim)/, {\n      token: \"regexp.delim\",\n      switchTo: \"@pregexp.$1.$1\"\n    }], [/%(x|W|Q?)\\(/, {\n      token: \"string.$1.delim\",\n      switchTo: \"@qqstring.$1.(.)\"\n    }], [/%(x|W|Q?)\\[/, {\n      token: \"string.$1.delim\",\n      switchTo: \"@qqstring.$1.[.]\"\n    }], [/%(x|W|Q?)\\{/, {\n      token: \"string.$1.delim\",\n      switchTo: \"@qqstring.$1.{.}\"\n    }], [/%(x|W|Q?)</, {\n      token: \"string.$1.delim\",\n      switchTo: \"@qqstring.$1.<.>\"\n    }], [/%(x|W|Q?)(@delim)/, {\n      token: \"string.$1.delim\",\n      switchTo: \"@qqstring.$1.$2.$2\"\n    }], [/%([rqwsxW]|Q?)./, {\n      token: \"invalid\",\n      next: \"@pop\"\n    }], [/./, {\n      token: \"invalid\",\n      next: \"@pop\"\n    }]],\n    qstring: [[/\\\\$/, \"string.$S2.escape\"], [/\\\\./, \"string.$S2.escape\"], [/./, {\n      cases: {\n        \"$#==$S4\": {\n          token: \"string.$S2.delim\",\n          next: \"@pop\"\n        },\n        \"$#==$S3\": {\n          token: \"string.$S2.delim\",\n          next: \"@push\"\n        },\n        \"@default\": \"string.$S2\"\n      }\n    }]],\n    qqstring: [[/#/, \"string.$S2.escape\", \"@interpolated\"], {\n      include: \"@qstring\"\n    }],\n    whitespace: [[/[ \\t\\r\\n]+/, \"\"], [/^\\s*=begin\\b/, \"comment\", \"@comment\"], [/#.*$/, \"comment\"]],\n    comment: [[/[^=]+/, \"comment\"], [/^\\s*=begin\\b/, \"comment.invalid\"], [/^\\s*=end\\b.*/, \"comment\", \"@pop\"], [/[=]/, \"comment\"]]\n  }\n};\nexport { conf, language };","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/basic-languages/ruby/ruby.js"],"names":["conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","indentationRules","increaseIndentPattern","RegExp","decreaseIndentPattern","language","tokenPostfix","keywords","keywordops","builtins","declarations","linedecls","operators","token","symbols","escape","escapes","decpart","decimal","delim","heredelim","regexpctl","regexpesc","tokenizer","root","cases","next","end","for","include","$1","dodecl","switchTo","do","modifier","sstring","dstring","heredoc","interpolated","interpolated_compound","pregexp","regexp","regexcontrol","regexrange","regexpcomment","pstring","qstring","qqstring","whitespace","comment"],"mappings":"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","sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/ruby/ruby.ts\nvar conf = {\n  comments: {\n    lineComment: \"#\",\n    blockComment: [\"=begin\", \"=end\"]\n  },\n  brackets: [\n    [\"(\", \")\"],\n    [\"{\", \"}\"],\n    [\"[\", \"]\"]\n  ],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" }\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" }\n  ],\n  indentationRules: {\n    increaseIndentPattern: new RegExp(`^\\\\s*((begin|class|(private|protected)\\\\s+def|def|else|elsif|ensure|for|if|module|rescue|unless|until|when|while|case)|([^#]*\\\\sdo\\\\b)|([^#]*=\\\\s*(case|if|unless)))\\\\b([^#\\\\{;]|(\"|'|/).*\\\\4)*(#.*)?$`),\n    decreaseIndentPattern: new RegExp(\"^\\\\s*([}\\\\]]([,)]?\\\\s*(#|$)|\\\\.[a-zA-Z_]\\\\w*\\\\b)|(end|rescue|ensure|else|elsif|when)\\\\b)\")\n  }\n};\nvar language = {\n  tokenPostfix: \".ruby\",\n  keywords: [\n    \"__LINE__\",\n    \"__ENCODING__\",\n    \"__FILE__\",\n    \"BEGIN\",\n    \"END\",\n    \"alias\",\n    \"and\",\n    \"begin\",\n    \"break\",\n    \"case\",\n    \"class\",\n    \"def\",\n    \"defined?\",\n    \"do\",\n    \"else\",\n    \"elsif\",\n    \"end\",\n    \"ensure\",\n    \"for\",\n    \"false\",\n    \"if\",\n    \"in\",\n    \"module\",\n    \"next\",\n    \"nil\",\n    \"not\",\n    \"or\",\n    \"redo\",\n    \"rescue\",\n    \"retry\",\n    \"return\",\n    \"self\",\n    \"super\",\n    \"then\",\n    \"true\",\n    \"undef\",\n    \"unless\",\n    \"until\",\n    \"when\",\n    \"while\",\n    \"yield\"\n  ],\n  keywordops: [\"::\", \"..\", \"...\", \"?\", \":\", \"=>\"],\n  builtins: [\n    \"require\",\n    \"public\",\n    \"private\",\n    \"include\",\n    \"extend\",\n    \"attr_reader\",\n    \"protected\",\n    \"private_class_method\",\n    \"protected_class_method\",\n    \"new\"\n  ],\n  declarations: [\n    \"module\",\n    \"class\",\n    \"def\",\n    \"case\",\n    \"do\",\n    \"begin\",\n    \"for\",\n    \"if\",\n    \"while\",\n    \"until\",\n    \"unless\"\n  ],\n  linedecls: [\"def\", \"case\", \"do\", \"begin\", \"for\", \"if\", \"while\", \"until\", \"unless\"],\n  operators: [\n    \"^\",\n    \"&\",\n    \"|\",\n    \"<=>\",\n    \"==\",\n    \"===\",\n    \"!~\",\n    \"=~\",\n    \">\",\n    \">=\",\n    \"<\",\n    \"<=\",\n    \"<<\",\n    \">>\",\n    \"+\",\n    \"-\",\n    \"*\",\n    \"/\",\n    \"%\",\n    \"**\",\n    \"~\",\n    \"+@\",\n    \"-@\",\n    \"[]\",\n    \"[]=\",\n    \"`\",\n    \"+=\",\n    \"-=\",\n    \"*=\",\n    \"**=\",\n    \"/=\",\n    \"^=\",\n    \"%=\",\n    \"<<=\",\n    \">>=\",\n    \"&=\",\n    \"&&=\",\n    \"||=\",\n    \"|=\"\n  ],\n  brackets: [\n    { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\n    { open: \"[\", close: \"]\", token: \"delimiter.square\" }\n  ],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%\\.]+/,\n  escape: /(?:[abefnrstv\\\\\"'\\n\\r]|[0-7]{1,3}|x[0-9A-Fa-f]{1,2}|u[0-9A-Fa-f]{4})/,\n  escapes: /\\\\(?:C\\-(@escape|.)|c(@escape|.)|@escape)/,\n  decpart: /\\d(_?\\d)*/,\n  decimal: /0|@decpart/,\n  delim: /[^a-zA-Z0-9\\s\\n\\r]/,\n  heredelim: /(?:\\w+|'[^']*'|\"[^\"]*\"|`[^`]*`)/,\n  regexpctl: /[(){}\\[\\]\\$\\^|\\-*+?\\.]/,\n  regexpesc: /\\\\(?:[AzZbBdDfnrstvwWn0\\\\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})?/,\n  tokenizer: {\n    root: [\n      [\n        /^(\\s*)([a-z_]\\w*[!?=]?)/,\n        [\n          \"white\",\n          {\n            cases: {\n              \"for|until|while\": {\n                token: \"keyword.$2\",\n                next: \"@dodecl.$2\"\n              },\n              \"@declarations\": {\n                token: \"keyword.$2\",\n                next: \"@root.$2\"\n              },\n              end: { token: \"keyword.$S2\", next: \"@pop\" },\n              \"@keywords\": \"keyword\",\n              \"@builtins\": \"predefined\",\n              \"@default\": \"identifier\"\n            }\n          }\n        ]\n      ],\n      [\n        /[a-z_]\\w*[!?=]?/,\n        {\n          cases: {\n            \"if|unless|while|until\": {\n              token: \"keyword.$0x\",\n              next: \"@modifier.$0x\"\n            },\n            for: { token: \"keyword.$2\", next: \"@dodecl.$2\" },\n            \"@linedecls\": { token: \"keyword.$0\", next: \"@root.$0\" },\n            end: { token: \"keyword.$S2\", next: \"@pop\" },\n            \"@keywords\": \"keyword\",\n            \"@builtins\": \"predefined\",\n            \"@default\": \"identifier\"\n          }\n        }\n      ],\n      [/[A-Z][\\w]*[!?=]?/, \"constructor.identifier\"],\n      [/\\$[\\w]*/, \"global.constant\"],\n      [/@[\\w]*/, \"namespace.instance.identifier\"],\n      [/@@@[\\w]*/, \"namespace.class.identifier\"],\n      [/<<[-~](@heredelim).*/, { token: \"string.heredoc.delimiter\", next: \"@heredoc.$1\" }],\n      [/[ \\t\\r\\n]+<<(@heredelim).*/, { token: \"string.heredoc.delimiter\", next: \"@heredoc.$1\" }],\n      [/^<<(@heredelim).*/, { token: \"string.heredoc.delimiter\", next: \"@heredoc.$1\" }],\n      { include: \"@whitespace\" },\n      [/\"/, { token: \"string.d.delim\", next: '@dstring.d.\"' }],\n      [/'/, { token: \"string.sq.delim\", next: \"@sstring.sq\" }],\n      [/%([rsqxwW]|Q?)/, { token: \"@rematch\", next: \"pstring\" }],\n      [/`/, { token: \"string.x.delim\", next: \"@dstring.x.`\" }],\n      [/:(\\w|[$@])\\w*[!?=]?/, \"string.s\"],\n      [/:\"/, { token: \"string.s.delim\", next: '@dstring.s.\"' }],\n      [/:'/, { token: \"string.s.delim\", next: \"@sstring.s\" }],\n      [/\\/(?=(\\\\\\/|[^\\/\\n])+\\/)/, { token: \"regexp.delim\", next: \"@regexp\" }],\n      [/[{}()\\[\\]]/, \"@brackets\"],\n      [\n        /@symbols/,\n        {\n          cases: {\n            \"@keywordops\": \"keyword\",\n            \"@operators\": \"operator\",\n            \"@default\": \"\"\n          }\n        }\n      ],\n      [/[;,]/, \"delimiter\"],\n      [/0[xX][0-9a-fA-F](_?[0-9a-fA-F])*/, \"number.hex\"],\n      [/0[_oO][0-7](_?[0-7])*/, \"number.octal\"],\n      [/0[bB][01](_?[01])*/, \"number.binary\"],\n      [/0[dD]@decpart/, \"number\"],\n      [\n        /@decimal((\\.@decpart)?([eE][\\-+]?@decpart)?)/,\n        {\n          cases: {\n            $1: \"number.float\",\n            \"@default\": \"number\"\n          }\n        }\n      ]\n    ],\n    dodecl: [\n      [/^/, { token: \"\", switchTo: \"@root.$S2\" }],\n      [\n        /[a-z_]\\w*[!?=]?/,\n        {\n          cases: {\n            end: { token: \"keyword.$S2\", next: \"@pop\" },\n            do: { token: \"keyword\", switchTo: \"@root.$S2\" },\n            \"@linedecls\": {\n              token: \"@rematch\",\n              switchTo: \"@root.$S2\"\n            },\n            \"@keywords\": \"keyword\",\n            \"@builtins\": \"predefined\",\n            \"@default\": \"identifier\"\n          }\n        }\n      ],\n      { include: \"@root\" }\n    ],\n    modifier: [\n      [/^/, \"\", \"@pop\"],\n      [\n        /[a-z_]\\w*[!?=]?/,\n        {\n          cases: {\n            end: { token: \"keyword.$S2\", next: \"@pop\" },\n            \"then|else|elsif|do\": {\n              token: \"keyword\",\n              switchTo: \"@root.$S2\"\n            },\n            \"@linedecls\": {\n              token: \"@rematch\",\n              switchTo: \"@root.$S2\"\n            },\n            \"@keywords\": \"keyword\",\n            \"@builtins\": \"predefined\",\n            \"@default\": \"identifier\"\n          }\n        }\n      ],\n      { include: \"@root\" }\n    ],\n    sstring: [\n      [/[^\\\\']+/, \"string.$S2\"],\n      [/\\\\\\\\|\\\\'|\\\\$/, \"string.$S2.escape\"],\n      [/\\\\./, \"string.$S2.invalid\"],\n      [/'/, { token: \"string.$S2.delim\", next: \"@pop\" }]\n    ],\n    dstring: [\n      [/[^\\\\`\"#]+/, \"string.$S2\"],\n      [/#/, \"string.$S2.escape\", \"@interpolated\"],\n      [/\\\\$/, \"string.$S2.escape\"],\n      [/@escapes/, \"string.$S2.escape\"],\n      [/\\\\./, \"string.$S2.escape.invalid\"],\n      [\n        /[`\"]/,\n        {\n          cases: {\n            \"$#==$S3\": { token: \"string.$S2.delim\", next: \"@pop\" },\n            \"@default\": \"string.$S2\"\n          }\n        }\n      ]\n    ],\n    heredoc: [\n      [\n        /^(\\s*)(@heredelim)$/,\n        {\n          cases: {\n            \"$2==$S2\": [\"string.heredoc\", { token: \"string.heredoc.delimiter\", next: \"@pop\" }],\n            \"@default\": [\"string.heredoc\", \"string.heredoc\"]\n          }\n        }\n      ],\n      [/.*/, \"string.heredoc\"]\n    ],\n    interpolated: [\n      [/\\$\\w*/, \"global.constant\", \"@pop\"],\n      [/@\\w*/, \"namespace.class.identifier\", \"@pop\"],\n      [/@@@\\w*/, \"namespace.instance.identifier\", \"@pop\"],\n      [\n        /[{]/,\n        {\n          token: \"string.escape.curly\",\n          switchTo: \"@interpolated_compound\"\n        }\n      ],\n      [\"\", \"\", \"@pop\"]\n    ],\n    interpolated_compound: [\n      [/[}]/, { token: \"string.escape.curly\", next: \"@pop\" }],\n      { include: \"@root\" }\n    ],\n    pregexp: [\n      { include: \"@whitespace\" },\n      [\n        /[^\\(\\{\\[\\\\]/,\n        {\n          cases: {\n            \"$#==$S3\": { token: \"regexp.delim\", next: \"@pop\" },\n            \"$#==$S2\": { token: \"regexp.delim\", next: \"@push\" },\n            \"~[)}\\\\]]\": \"@brackets.regexp.escape.control\",\n            \"~@regexpctl\": \"regexp.escape.control\",\n            \"@default\": \"regexp\"\n          }\n        }\n      ],\n      { include: \"@regexcontrol\" }\n    ],\n    regexp: [\n      { include: \"@regexcontrol\" },\n      [/[^\\\\\\/]/, \"regexp\"],\n      [\"/[ixmp]*\", { token: \"regexp.delim\" }, \"@pop\"]\n    ],\n    regexcontrol: [\n      [\n        /(\\{)(\\d+(?:,\\d*)?)(\\})/,\n        [\n          \"@brackets.regexp.escape.control\",\n          \"regexp.escape.control\",\n          \"@brackets.regexp.escape.control\"\n        ]\n      ],\n      [\n        /(\\[)(\\^?)/,\n        [\"@brackets.regexp.escape.control\", { token: \"regexp.escape.control\", next: \"@regexrange\" }]\n      ],\n      [/(\\()(\\?[:=!])/, [\"@brackets.regexp.escape.control\", \"regexp.escape.control\"]],\n      [/\\(\\?#/, { token: \"regexp.escape.control\", next: \"@regexpcomment\" }],\n      [/[()]/, \"@brackets.regexp.escape.control\"],\n      [/@regexpctl/, \"regexp.escape.control\"],\n      [/\\\\$/, \"regexp.escape\"],\n      [/@regexpesc/, \"regexp.escape\"],\n      [/\\\\\\./, \"regexp.invalid\"],\n      [/#/, \"regexp.escape\", \"@interpolated\"]\n    ],\n    regexrange: [\n      [/-/, \"regexp.escape.control\"],\n      [/\\^/, \"regexp.invalid\"],\n      [/\\\\$/, \"regexp.escape\"],\n      [/@regexpesc/, \"regexp.escape\"],\n      [/[^\\]]/, \"regexp\"],\n      [/\\]/, \"@brackets.regexp.escape.control\", \"@pop\"]\n    ],\n    regexpcomment: [\n      [/[^)]+/, \"comment\"],\n      [/\\)/, { token: \"regexp.escape.control\", next: \"@pop\" }]\n    ],\n    pstring: [\n      [/%([qws])\\(/, { token: \"string.$1.delim\", switchTo: \"@qstring.$1.(.)\" }],\n      [/%([qws])\\[/, { token: \"string.$1.delim\", switchTo: \"@qstring.$1.[.]\" }],\n      [/%([qws])\\{/, { token: \"string.$1.delim\", switchTo: \"@qstring.$1.{.}\" }],\n      [/%([qws])</, { token: \"string.$1.delim\", switchTo: \"@qstring.$1.<.>\" }],\n      [/%([qws])(@delim)/, { token: \"string.$1.delim\", switchTo: \"@qstring.$1.$2.$2\" }],\n      [/%r\\(/, { token: \"regexp.delim\", switchTo: \"@pregexp.(.)\" }],\n      [/%r\\[/, { token: \"regexp.delim\", switchTo: \"@pregexp.[.]\" }],\n      [/%r\\{/, { token: \"regexp.delim\", switchTo: \"@pregexp.{.}\" }],\n      [/%r</, { token: \"regexp.delim\", switchTo: \"@pregexp.<.>\" }],\n      [/%r(@delim)/, { token: \"regexp.delim\", switchTo: \"@pregexp.$1.$1\" }],\n      [/%(x|W|Q?)\\(/, { token: \"string.$1.delim\", switchTo: \"@qqstring.$1.(.)\" }],\n      [/%(x|W|Q?)\\[/, { token: \"string.$1.delim\", switchTo: \"@qqstring.$1.[.]\" }],\n      [/%(x|W|Q?)\\{/, { token: \"string.$1.delim\", switchTo: \"@qqstring.$1.{.}\" }],\n      [/%(x|W|Q?)</, { token: \"string.$1.delim\", switchTo: \"@qqstring.$1.<.>\" }],\n      [/%(x|W|Q?)(@delim)/, { token: \"string.$1.delim\", switchTo: \"@qqstring.$1.$2.$2\" }],\n      [/%([rqwsxW]|Q?)./, { token: \"invalid\", next: \"@pop\" }],\n      [/./, { token: \"invalid\", next: \"@pop\" }]\n    ],\n    qstring: [\n      [/\\\\$/, \"string.$S2.escape\"],\n      [/\\\\./, \"string.$S2.escape\"],\n      [\n        /./,\n        {\n          cases: {\n            \"$#==$S4\": { token: \"string.$S2.delim\", next: \"@pop\" },\n            \"$#==$S3\": { token: \"string.$S2.delim\", next: \"@push\" },\n            \"@default\": \"string.$S2\"\n          }\n        }\n      ]\n    ],\n    qqstring: [[/#/, \"string.$S2.escape\", \"@interpolated\"], { include: \"@qstring\" }],\n    whitespace: [\n      [/[ \\t\\r\\n]+/, \"\"],\n      [/^\\s*=begin\\b/, \"comment\", \"@comment\"],\n      [/#.*$/, \"comment\"]\n    ],\n    comment: [\n      [/[^=]+/, \"comment\"],\n      [/^\\s*=begin\\b/, \"comment.invalid\"],\n      [/^\\s*=end\\b.*/, \"comment\", \"@pop\"],\n      [/[=]/, \"comment\"]\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"]},"metadata":{},"sourceType":"module"}