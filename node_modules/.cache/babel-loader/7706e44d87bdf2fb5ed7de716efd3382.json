{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport * as browser from '../../../../base/browser/browser.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport { CopyOptions, InMemoryClipboardMetadataManager } from '../../../browser/controller/textAreaInput.js';\nimport { EditorAction, MultiCommand, registerEditorAction } from '../../../browser/editorExtensions.js';\nimport { ICodeEditorService } from '../../../browser/services/codeEditorService.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport * as nls from '../../../../nls.js';\nimport { MenuId, MenuRegistry } from '../../../../platform/actions/common/actions.js';\nimport { IClipboardService } from '../../../../platform/clipboard/common/clipboardService.js';\nconst CLIPBOARD_CONTEXT_MENU_GROUP = '9_cutcopypaste';\nconst supportsCut = platform.isNative || document.queryCommandSupported('cut');\nconst supportsCopy = platform.isNative || document.queryCommandSupported('copy'); // Firefox only supports navigator.clipboard.readText() in browser extensions.\n// See https://developer.mozilla.org/en-US/docs/Web/API/Clipboard/readText#Browser_compatibility\n// When loading over http, navigator.clipboard can be undefined. See https://github.com/microsoft/monaco-editor/issues/2313\n\nconst supportsPaste = typeof navigator.clipboard === 'undefined' || browser.isFirefox ? document.queryCommandSupported('paste') : true;\n\nfunction registerCommand(command) {\n  command.register();\n  return command;\n}\n\nexport const CutAction = supportsCut ? registerCommand(new MultiCommand({\n  id: 'editor.action.clipboardCutAction',\n  precondition: undefined,\n  kbOpts: // Do not bind cut keybindings in the browser,\n  // since browsers do that for us and it avoids security prompts\n  platform.isNative ? {\n    primary: 2048\n    /* CtrlCmd */\n    | 54\n    /* KeyX */\n    ,\n    win: {\n      primary: 2048\n      /* CtrlCmd */\n      | 54\n      /* KeyX */\n      ,\n      secondary: [1024\n      /* Shift */\n      | 20\n      /* Delete */\n      ]\n    },\n    weight: 100\n    /* EditorContrib */\n\n  } : undefined,\n  menuOpts: [{\n    menuId: MenuId.MenubarEditMenu,\n    group: '2_ccp',\n    title: nls.localize({\n      key: 'miCut',\n      comment: ['&& denotes a mnemonic']\n    }, \"Cu&&t\"),\n    order: 1\n  }, {\n    menuId: MenuId.EditorContext,\n    group: CLIPBOARD_CONTEXT_MENU_GROUP,\n    title: nls.localize('actions.clipboard.cutLabel', \"Cut\"),\n    when: EditorContextKeys.writable,\n    order: 1\n  }, {\n    menuId: MenuId.CommandPalette,\n    group: '',\n    title: nls.localize('actions.clipboard.cutLabel', \"Cut\"),\n    order: 1\n  }, {\n    menuId: MenuId.SimpleEditorContext,\n    group: CLIPBOARD_CONTEXT_MENU_GROUP,\n    title: nls.localize('actions.clipboard.cutLabel', \"Cut\"),\n    when: EditorContextKeys.writable,\n    order: 1\n  }]\n})) : undefined;\nexport const CopyAction = supportsCopy ? registerCommand(new MultiCommand({\n  id: 'editor.action.clipboardCopyAction',\n  precondition: undefined,\n  kbOpts: // Do not bind copy keybindings in the browser,\n  // since browsers do that for us and it avoids security prompts\n  platform.isNative ? {\n    primary: 2048\n    /* CtrlCmd */\n    | 33\n    /* KeyC */\n    ,\n    win: {\n      primary: 2048\n      /* CtrlCmd */\n      | 33\n      /* KeyC */\n      ,\n      secondary: [2048\n      /* CtrlCmd */\n      | 19\n      /* Insert */\n      ]\n    },\n    weight: 100\n    /* EditorContrib */\n\n  } : undefined,\n  menuOpts: [{\n    menuId: MenuId.MenubarEditMenu,\n    group: '2_ccp',\n    title: nls.localize({\n      key: 'miCopy',\n      comment: ['&& denotes a mnemonic']\n    }, \"&&Copy\"),\n    order: 2\n  }, {\n    menuId: MenuId.EditorContext,\n    group: CLIPBOARD_CONTEXT_MENU_GROUP,\n    title: nls.localize('actions.clipboard.copyLabel', \"Copy\"),\n    order: 2\n  }, {\n    menuId: MenuId.CommandPalette,\n    group: '',\n    title: nls.localize('actions.clipboard.copyLabel', \"Copy\"),\n    order: 1\n  }, {\n    menuId: MenuId.SimpleEditorContext,\n    group: CLIPBOARD_CONTEXT_MENU_GROUP,\n    title: nls.localize('actions.clipboard.copyLabel', \"Copy\"),\n    order: 2\n  }]\n})) : undefined;\nMenuRegistry.appendMenuItem(MenuId.MenubarEditMenu, {\n  submenu: MenuId.MenubarCopy,\n  title: {\n    value: nls.localize('copy as', \"Copy As\"),\n    original: 'Copy As'\n  },\n  group: '2_ccp',\n  order: 3\n});\nMenuRegistry.appendMenuItem(MenuId.EditorContext, {\n  submenu: MenuId.EditorContextCopy,\n  title: {\n    value: nls.localize('copy as', \"Copy As\"),\n    original: 'Copy As'\n  },\n  group: CLIPBOARD_CONTEXT_MENU_GROUP,\n  order: 3\n});\nexport const PasteAction = supportsPaste ? registerCommand(new MultiCommand({\n  id: 'editor.action.clipboardPasteAction',\n  precondition: undefined,\n  kbOpts: // Do not bind paste keybindings in the browser,\n  // since browsers do that for us and it avoids security prompts\n  platform.isNative ? {\n    primary: 2048\n    /* CtrlCmd */\n    | 52\n    /* KeyV */\n    ,\n    win: {\n      primary: 2048\n      /* CtrlCmd */\n      | 52\n      /* KeyV */\n      ,\n      secondary: [1024\n      /* Shift */\n      | 19\n      /* Insert */\n      ]\n    },\n    linux: {\n      primary: 2048\n      /* CtrlCmd */\n      | 52\n      /* KeyV */\n      ,\n      secondary: [1024\n      /* Shift */\n      | 19\n      /* Insert */\n      ]\n    },\n    weight: 100\n    /* EditorContrib */\n\n  } : undefined,\n  menuOpts: [{\n    menuId: MenuId.MenubarEditMenu,\n    group: '2_ccp',\n    title: nls.localize({\n      key: 'miPaste',\n      comment: ['&& denotes a mnemonic']\n    }, \"&&Paste\"),\n    order: 4\n  }, {\n    menuId: MenuId.EditorContext,\n    group: CLIPBOARD_CONTEXT_MENU_GROUP,\n    title: nls.localize('actions.clipboard.pasteLabel', \"Paste\"),\n    when: EditorContextKeys.writable,\n    order: 4\n  }, {\n    menuId: MenuId.CommandPalette,\n    group: '',\n    title: nls.localize('actions.clipboard.pasteLabel', \"Paste\"),\n    order: 1\n  }, {\n    menuId: MenuId.SimpleEditorContext,\n    group: CLIPBOARD_CONTEXT_MENU_GROUP,\n    title: nls.localize('actions.clipboard.pasteLabel', \"Paste\"),\n    when: EditorContextKeys.writable,\n    order: 4\n  }]\n})) : undefined;\n\nclass ExecCommandCopyWithSyntaxHighlightingAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.clipboardCopyWithSyntaxHighlightingAction',\n      label: nls.localize('actions.clipboard.copyWithSyntaxHighlightingLabel', \"Copy With Syntax Highlighting\"),\n      alias: 'Copy With Syntax Highlighting',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: EditorContextKeys.textInputFocus,\n        primary: 0,\n        weight: 100\n        /* EditorContrib */\n\n      }\n    });\n  }\n\n  run(accessor, editor) {\n    if (!editor.hasModel()) {\n      return;\n    }\n\n    const emptySelectionClipboard = editor.getOption(32\n    /* emptySelectionClipboard */\n    );\n\n    if (!emptySelectionClipboard && editor.getSelection().isEmpty()) {\n      return;\n    }\n\n    CopyOptions.forceCopyWithSyntaxHighlighting = true;\n    editor.focus();\n    document.execCommand('copy');\n    CopyOptions.forceCopyWithSyntaxHighlighting = false;\n  }\n\n}\n\nfunction registerExecCommandImpl(target, browserCommand) {\n  if (!target) {\n    return;\n  } // 1. handle case when focus is in editor.\n\n\n  target.addImplementation(10000, 'code-editor', (accessor, args) => {\n    // Only if editor text focus (i.e. not if editor has widget focus).\n    const focusedEditor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n\n    if (focusedEditor && focusedEditor.hasTextFocus()) {\n      // Do not execute if there is no selection and empty selection clipboard is off\n      const emptySelectionClipboard = focusedEditor.getOption(32\n      /* emptySelectionClipboard */\n      );\n      const selection = focusedEditor.getSelection();\n\n      if (selection && selection.isEmpty() && !emptySelectionClipboard) {\n        return true;\n      }\n\n      document.execCommand(browserCommand);\n      return true;\n    }\n\n    return false;\n  }); // 2. (default) handle case when focus is somewhere else.\n\n  target.addImplementation(0, 'generic-dom', (accessor, args) => {\n    document.execCommand(browserCommand);\n    return true;\n  });\n}\n\nregisterExecCommandImpl(CutAction, 'cut');\nregisterExecCommandImpl(CopyAction, 'copy');\n\nif (PasteAction) {\n  // 1. Paste: handle case when focus is in editor.\n  PasteAction.addImplementation(10000, 'code-editor', (accessor, args) => {\n    const codeEditorService = accessor.get(ICodeEditorService);\n    const clipboardService = accessor.get(IClipboardService); // Only if editor text focus (i.e. not if editor has widget focus).\n\n    const focusedEditor = codeEditorService.getFocusedCodeEditor();\n\n    if (focusedEditor && focusedEditor.hasTextFocus()) {\n      const result = document.execCommand('paste'); // Use the clipboard service if document.execCommand('paste') was not successful\n\n      if (!result && platform.isWeb) {\n        return (() => __awaiter(void 0, void 0, void 0, function* () {\n          const clipboardText = yield clipboardService.readText();\n\n          if (clipboardText !== '') {\n            const metadata = InMemoryClipboardMetadataManager.INSTANCE.get(clipboardText);\n            let pasteOnNewLine = false;\n            let multicursorText = null;\n            let mode = null;\n\n            if (metadata) {\n              pasteOnNewLine = focusedEditor.getOption(32\n              /* emptySelectionClipboard */\n              ) && !!metadata.isFromEmptySelection;\n              multicursorText = typeof metadata.multicursorText !== 'undefined' ? metadata.multicursorText : null;\n              mode = metadata.mode;\n            }\n\n            focusedEditor.trigger('keyboard', \"paste\"\n            /* Paste */\n            , {\n              text: clipboardText,\n              pasteOnNewLine,\n              multicursorText,\n              mode\n            });\n          }\n        }))();\n      }\n\n      return true;\n    }\n\n    return false;\n  }); // 2. Paste: (default) handle case when focus is somewhere else.\n\n  PasteAction.addImplementation(0, 'generic-dom', (accessor, args) => {\n    document.execCommand('paste');\n    return true;\n  });\n}\n\nif (supportsCopy) {\n  registerEditorAction(ExecCommandCopyWithSyntaxHighlightingAction);\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/contrib/clipboard/browser/clipboard.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","browser","platform","CopyOptions","InMemoryClipboardMetadataManager","EditorAction","MultiCommand","registerEditorAction","ICodeEditorService","EditorContextKeys","nls","MenuId","MenuRegistry","IClipboardService","CLIPBOARD_CONTEXT_MENU_GROUP","supportsCut","isNative","document","queryCommandSupported","supportsCopy","supportsPaste","navigator","clipboard","isFirefox","registerCommand","command","register","CutAction","id","precondition","undefined","kbOpts","primary","win","secondary","weight","menuOpts","menuId","MenubarEditMenu","group","title","localize","key","comment","order","EditorContext","when","writable","CommandPalette","SimpleEditorContext","CopyAction","appendMenuItem","submenu","MenubarCopy","original","EditorContextCopy","PasteAction","linux","ExecCommandCopyWithSyntaxHighlightingAction","constructor","label","alias","kbExpr","textInputFocus","run","accessor","editor","hasModel","emptySelectionClipboard","getOption","getSelection","isEmpty","forceCopyWithSyntaxHighlighting","focus","execCommand","registerExecCommandImpl","target","browserCommand","addImplementation","args","focusedEditor","get","getFocusedCodeEditor","hasTextFocus","selection","codeEditorService","clipboardService","isWeb","clipboardText","readText","metadata","INSTANCE","pasteOnNewLine","multicursorText","mode","isFromEmptySelection","trigger","text"],"mappings":"AAAA;AACA;AACA;AACA;AACA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA4B,UAAUC,OAAV,EAAmBC,UAAnB,EAA+BC,CAA/B,EAAkCC,SAAlC,EAA6C;AACrF,WAASC,KAAT,CAAeC,KAAf,EAAsB;AAAE,WAAOA,KAAK,YAAYH,CAAjB,GAAqBG,KAArB,GAA6B,IAAIH,CAAJ,CAAM,UAAUI,OAAV,EAAmB;AAAEA,MAAAA,OAAO,CAACD,KAAD,CAAP;AAAiB,KAA5C,CAApC;AAAoF;;AAC5G,SAAO,KAAKH,CAAC,KAAKA,CAAC,GAAGK,OAAT,CAAN,EAAyB,UAAUD,OAAV,EAAmBE,MAAnB,EAA2B;AACvD,aAASC,SAAT,CAAmBJ,KAAnB,EAA0B;AAAE,UAAI;AAAEK,QAAAA,IAAI,CAACP,SAAS,CAACQ,IAAV,CAAeN,KAAf,CAAD,CAAJ;AAA8B,OAApC,CAAqC,OAAOO,CAAP,EAAU;AAAEJ,QAAAA,MAAM,CAACI,CAAD,CAAN;AAAY;AAAE;;AAC3F,aAASC,QAAT,CAAkBR,KAAlB,EAAyB;AAAE,UAAI;AAAEK,QAAAA,IAAI,CAACP,SAAS,CAAC,OAAD,CAAT,CAAmBE,KAAnB,CAAD,CAAJ;AAAkC,OAAxC,CAAyC,OAAOO,CAAP,EAAU;AAAEJ,QAAAA,MAAM,CAACI,CAAD,CAAN;AAAY;AAAE;;AAC9F,aAASF,IAAT,CAAcI,MAAd,EAAsB;AAAEA,MAAAA,MAAM,CAACC,IAAP,GAAcT,OAAO,CAACQ,MAAM,CAACT,KAAR,CAArB,GAAsCD,KAAK,CAACU,MAAM,CAACT,KAAR,CAAL,CAAoBW,IAApB,CAAyBP,SAAzB,EAAoCI,QAApC,CAAtC;AAAsF;;AAC9GH,IAAAA,IAAI,CAAC,CAACP,SAAS,GAAGA,SAAS,CAACc,KAAV,CAAgBjB,OAAhB,EAAyBC,UAAU,IAAI,EAAvC,CAAb,EAAyDU,IAAzD,EAAD,CAAJ;AACH,GALM,CAAP;AAMH,CARD;;AASA,OAAO,KAAKO,OAAZ,MAAyB,qCAAzB;AACA,OAAO,KAAKC,QAAZ,MAA0B,qCAA1B;AACA,SAASC,WAAT,EAAsBC,gCAAtB,QAA8D,8CAA9D;AACA,SAASC,YAAT,EAAuBC,YAAvB,EAAqCC,oBAArC,QAAiE,sCAAjE;AACA,SAASC,kBAAT,QAAmC,gDAAnC;AACA,SAASC,iBAAT,QAAkC,sCAAlC;AACA,OAAO,KAAKC,GAAZ,MAAqB,oBAArB;AACA,SAASC,MAAT,EAAiBC,YAAjB,QAAqC,gDAArC;AACA,SAASC,iBAAT,QAAkC,2DAAlC;AACA,MAAMC,4BAA4B,GAAG,gBAArC;AACA,MAAMC,WAAW,GAAIb,QAAQ,CAACc,QAAT,IAAqBC,QAAQ,CAACC,qBAAT,CAA+B,KAA/B,CAA1C;AACA,MAAMC,YAAY,GAAIjB,QAAQ,CAACc,QAAT,IAAqBC,QAAQ,CAACC,qBAAT,CAA+B,MAA/B,CAA3C,C,CACA;AACA;AACA;;AACA,MAAME,aAAa,GAAI,OAAOC,SAAS,CAACC,SAAjB,KAA+B,WAA/B,IAA8CrB,OAAO,CAACsB,SAAvD,GAAoEN,QAAQ,CAACC,qBAAT,CAA+B,OAA/B,CAApE,GAA8G,IAApI;;AACA,SAASM,eAAT,CAAyBC,OAAzB,EAAkC;AAC9BA,EAAAA,OAAO,CAACC,QAAR;AACA,SAAOD,OAAP;AACH;;AACD,OAAO,MAAME,SAAS,GAAGZ,WAAW,GAAGS,eAAe,CAAC,IAAIlB,YAAJ,CAAiB;AACpEsB,EAAAA,EAAE,EAAE,kCADgE;AAEpEC,EAAAA,YAAY,EAAEC,SAFsD;AAGpEC,EAAAA,MAAM,EACN;AACA;AACA7B,EAAAA,QAAQ,CAACc,QAAT,GAAoB;AAChBgB,IAAAA,OAAO,EAAE;AAAK;AAAL,MAAqB;AAAG;AADjB;AAEhBC,IAAAA,GAAG,EAAE;AAAED,MAAAA,OAAO,EAAE;AAAK;AAAL,QAAqB;AAAG;AAAnC;AAA+CE,MAAAA,SAAS,EAAE,CAAC;AAAK;AAAL,QAAmB;AAAG;AAAvB;AAA1D,KAFW;AAGhBC,IAAAA,MAAM,EAAE;AAAI;;AAHI,GAApB,GAIIL,SAVgE;AAWpEM,EAAAA,QAAQ,EAAE,CAAC;AACHC,IAAAA,MAAM,EAAE1B,MAAM,CAAC2B,eADZ;AAEHC,IAAAA,KAAK,EAAE,OAFJ;AAGHC,IAAAA,KAAK,EAAE9B,GAAG,CAAC+B,QAAJ,CAAa;AAAEC,MAAAA,GAAG,EAAE,OAAP;AAAgBC,MAAAA,OAAO,EAAE,CAAC,uBAAD;AAAzB,KAAb,EAAmE,OAAnE,CAHJ;AAIHC,IAAAA,KAAK,EAAE;AAJJ,GAAD,EAKH;AACCP,IAAAA,MAAM,EAAE1B,MAAM,CAACkC,aADhB;AAECN,IAAAA,KAAK,EAAEzB,4BAFR;AAGC0B,IAAAA,KAAK,EAAE9B,GAAG,CAAC+B,QAAJ,CAAa,4BAAb,EAA2C,KAA3C,CAHR;AAICK,IAAAA,IAAI,EAAErC,iBAAiB,CAACsC,QAJzB;AAKCH,IAAAA,KAAK,EAAE;AALR,GALG,EAWH;AACCP,IAAAA,MAAM,EAAE1B,MAAM,CAACqC,cADhB;AAECT,IAAAA,KAAK,EAAE,EAFR;AAGCC,IAAAA,KAAK,EAAE9B,GAAG,CAAC+B,QAAJ,CAAa,4BAAb,EAA2C,KAA3C,CAHR;AAICG,IAAAA,KAAK,EAAE;AAJR,GAXG,EAgBH;AACCP,IAAAA,MAAM,EAAE1B,MAAM,CAACsC,mBADhB;AAECV,IAAAA,KAAK,EAAEzB,4BAFR;AAGC0B,IAAAA,KAAK,EAAE9B,GAAG,CAAC+B,QAAJ,CAAa,4BAAb,EAA2C,KAA3C,CAHR;AAICK,IAAAA,IAAI,EAAErC,iBAAiB,CAACsC,QAJzB;AAKCH,IAAAA,KAAK,EAAE;AALR,GAhBG;AAX0D,CAAjB,CAAD,CAAlB,GAkC9Bd,SAlCC;AAmCP,OAAO,MAAMoB,UAAU,GAAG/B,YAAY,GAAGK,eAAe,CAAC,IAAIlB,YAAJ,CAAiB;AACtEsB,EAAAA,EAAE,EAAE,mCADkE;AAEtEC,EAAAA,YAAY,EAAEC,SAFwD;AAGtEC,EAAAA,MAAM,EACN;AACA;AACA7B,EAAAA,QAAQ,CAACc,QAAT,GAAoB;AAChBgB,IAAAA,OAAO,EAAE;AAAK;AAAL,MAAqB;AAAG;AADjB;AAEhBC,IAAAA,GAAG,EAAE;AAAED,MAAAA,OAAO,EAAE;AAAK;AAAL,QAAqB;AAAG;AAAnC;AAA+CE,MAAAA,SAAS,EAAE,CAAC;AAAK;AAAL,QAAqB;AAAG;AAAzB;AAA1D,KAFW;AAGhBC,IAAAA,MAAM,EAAE;AAAI;;AAHI,GAApB,GAIIL,SAVkE;AAWtEM,EAAAA,QAAQ,EAAE,CAAC;AACHC,IAAAA,MAAM,EAAE1B,MAAM,CAAC2B,eADZ;AAEHC,IAAAA,KAAK,EAAE,OAFJ;AAGHC,IAAAA,KAAK,EAAE9B,GAAG,CAAC+B,QAAJ,CAAa;AAAEC,MAAAA,GAAG,EAAE,QAAP;AAAiBC,MAAAA,OAAO,EAAE,CAAC,uBAAD;AAA1B,KAAb,EAAoE,QAApE,CAHJ;AAIHC,IAAAA,KAAK,EAAE;AAJJ,GAAD,EAKH;AACCP,IAAAA,MAAM,EAAE1B,MAAM,CAACkC,aADhB;AAECN,IAAAA,KAAK,EAAEzB,4BAFR;AAGC0B,IAAAA,KAAK,EAAE9B,GAAG,CAAC+B,QAAJ,CAAa,6BAAb,EAA4C,MAA5C,CAHR;AAICG,IAAAA,KAAK,EAAE;AAJR,GALG,EAUH;AACCP,IAAAA,MAAM,EAAE1B,MAAM,CAACqC,cADhB;AAECT,IAAAA,KAAK,EAAE,EAFR;AAGCC,IAAAA,KAAK,EAAE9B,GAAG,CAAC+B,QAAJ,CAAa,6BAAb,EAA4C,MAA5C,CAHR;AAICG,IAAAA,KAAK,EAAE;AAJR,GAVG,EAeH;AACCP,IAAAA,MAAM,EAAE1B,MAAM,CAACsC,mBADhB;AAECV,IAAAA,KAAK,EAAEzB,4BAFR;AAGC0B,IAAAA,KAAK,EAAE9B,GAAG,CAAC+B,QAAJ,CAAa,6BAAb,EAA4C,MAA5C,CAHR;AAICG,IAAAA,KAAK,EAAE;AAJR,GAfG;AAX4D,CAAjB,CAAD,CAAlB,GAgChCd,SAhCC;AAiCPlB,YAAY,CAACuC,cAAb,CAA4BxC,MAAM,CAAC2B,eAAnC,EAAoD;AAAEc,EAAAA,OAAO,EAAEzC,MAAM,CAAC0C,WAAlB;AAA+Bb,EAAAA,KAAK,EAAE;AAAEpD,IAAAA,KAAK,EAAEsB,GAAG,CAAC+B,QAAJ,CAAa,SAAb,EAAwB,SAAxB,CAAT;AAA6Ca,IAAAA,QAAQ,EAAE;AAAvD,GAAtC;AAA2Gf,EAAAA,KAAK,EAAE,OAAlH;AAA2HK,EAAAA,KAAK,EAAE;AAAlI,CAApD;AACAhC,YAAY,CAACuC,cAAb,CAA4BxC,MAAM,CAACkC,aAAnC,EAAkD;AAAEO,EAAAA,OAAO,EAAEzC,MAAM,CAAC4C,iBAAlB;AAAqCf,EAAAA,KAAK,EAAE;AAAEpD,IAAAA,KAAK,EAAEsB,GAAG,CAAC+B,QAAJ,CAAa,SAAb,EAAwB,SAAxB,CAAT;AAA6Ca,IAAAA,QAAQ,EAAE;AAAvD,GAA5C;AAAiHf,EAAAA,KAAK,EAAEzB,4BAAxH;AAAsJ8B,EAAAA,KAAK,EAAE;AAA7J,CAAlD;AACA,OAAO,MAAMY,WAAW,GAAGpC,aAAa,GAAGI,eAAe,CAAC,IAAIlB,YAAJ,CAAiB;AACxEsB,EAAAA,EAAE,EAAE,oCADoE;AAExEC,EAAAA,YAAY,EAAEC,SAF0D;AAGxEC,EAAAA,MAAM,EACN;AACA;AACA7B,EAAAA,QAAQ,CAACc,QAAT,GAAoB;AAChBgB,IAAAA,OAAO,EAAE;AAAK;AAAL,MAAqB;AAAG;AADjB;AAEhBC,IAAAA,GAAG,EAAE;AAAED,MAAAA,OAAO,EAAE;AAAK;AAAL,QAAqB;AAAG;AAAnC;AAA+CE,MAAAA,SAAS,EAAE,CAAC;AAAK;AAAL,QAAmB;AAAG;AAAvB;AAA1D,KAFW;AAGhBuB,IAAAA,KAAK,EAAE;AAAEzB,MAAAA,OAAO,EAAE;AAAK;AAAL,QAAqB;AAAG;AAAnC;AAA+CE,MAAAA,SAAS,EAAE,CAAC;AAAK;AAAL,QAAmB;AAAG;AAAvB;AAA1D,KAHS;AAIhBC,IAAAA,MAAM,EAAE;AAAI;;AAJI,GAApB,GAKIL,SAXoE;AAYxEM,EAAAA,QAAQ,EAAE,CAAC;AACHC,IAAAA,MAAM,EAAE1B,MAAM,CAAC2B,eADZ;AAEHC,IAAAA,KAAK,EAAE,OAFJ;AAGHC,IAAAA,KAAK,EAAE9B,GAAG,CAAC+B,QAAJ,CAAa;AAAEC,MAAAA,GAAG,EAAE,SAAP;AAAkBC,MAAAA,OAAO,EAAE,CAAC,uBAAD;AAA3B,KAAb,EAAqE,SAArE,CAHJ;AAIHC,IAAAA,KAAK,EAAE;AAJJ,GAAD,EAKH;AACCP,IAAAA,MAAM,EAAE1B,MAAM,CAACkC,aADhB;AAECN,IAAAA,KAAK,EAAEzB,4BAFR;AAGC0B,IAAAA,KAAK,EAAE9B,GAAG,CAAC+B,QAAJ,CAAa,8BAAb,EAA6C,OAA7C,CAHR;AAICK,IAAAA,IAAI,EAAErC,iBAAiB,CAACsC,QAJzB;AAKCH,IAAAA,KAAK,EAAE;AALR,GALG,EAWH;AACCP,IAAAA,MAAM,EAAE1B,MAAM,CAACqC,cADhB;AAECT,IAAAA,KAAK,EAAE,EAFR;AAGCC,IAAAA,KAAK,EAAE9B,GAAG,CAAC+B,QAAJ,CAAa,8BAAb,EAA6C,OAA7C,CAHR;AAICG,IAAAA,KAAK,EAAE;AAJR,GAXG,EAgBH;AACCP,IAAAA,MAAM,EAAE1B,MAAM,CAACsC,mBADhB;AAECV,IAAAA,KAAK,EAAEzB,4BAFR;AAGC0B,IAAAA,KAAK,EAAE9B,GAAG,CAAC+B,QAAJ,CAAa,8BAAb,EAA6C,OAA7C,CAHR;AAICK,IAAAA,IAAI,EAAErC,iBAAiB,CAACsC,QAJzB;AAKCH,IAAAA,KAAK,EAAE;AALR,GAhBG;AAZ8D,CAAjB,CAAD,CAAlB,GAmClCd,SAnCC;;AAoCP,MAAM4B,2CAAN,SAA0DrD,YAA1D,CAAuE;AACnEsD,EAAAA,WAAW,GAAG;AACV,UAAM;AACF/B,MAAAA,EAAE,EAAE,yDADF;AAEFgC,MAAAA,KAAK,EAAElD,GAAG,CAAC+B,QAAJ,CAAa,mDAAb,EAAkE,+BAAlE,CAFL;AAGFoB,MAAAA,KAAK,EAAE,+BAHL;AAIFhC,MAAAA,YAAY,EAAEC,SAJZ;AAKFC,MAAAA,MAAM,EAAE;AACJ+B,QAAAA,MAAM,EAAErD,iBAAiB,CAACsD,cADtB;AAEJ/B,QAAAA,OAAO,EAAE,CAFL;AAGJG,QAAAA,MAAM,EAAE;AAAI;;AAHR;AALN,KAAN;AAWH;;AACD6B,EAAAA,GAAG,CAACC,QAAD,EAAWC,MAAX,EAAmB;AAClB,QAAI,CAACA,MAAM,CAACC,QAAP,EAAL,EAAwB;AACpB;AACH;;AACD,UAAMC,uBAAuB,GAAGF,MAAM,CAACG,SAAP,CAAiB;AAAG;AAApB,KAAhC;;AACA,QAAI,CAACD,uBAAD,IAA4BF,MAAM,CAACI,YAAP,GAAsBC,OAAtB,EAAhC,EAAiE;AAC7D;AACH;;AACDpE,IAAAA,WAAW,CAACqE,+BAAZ,GAA8C,IAA9C;AACAN,IAAAA,MAAM,CAACO,KAAP;AACAxD,IAAAA,QAAQ,CAACyD,WAAT,CAAqB,MAArB;AACAvE,IAAAA,WAAW,CAACqE,+BAAZ,GAA8C,KAA9C;AACH;;AA1BkE;;AA4BvE,SAASG,uBAAT,CAAiCC,MAAjC,EAAyCC,cAAzC,EAAyD;AACrD,MAAI,CAACD,MAAL,EAAa;AACT;AACH,GAHoD,CAIrD;;;AACAA,EAAAA,MAAM,CAACE,iBAAP,CAAyB,KAAzB,EAAgC,aAAhC,EAA+C,CAACb,QAAD,EAAWc,IAAX,KAAoB;AAC/D;AACA,UAAMC,aAAa,GAAGf,QAAQ,CAACgB,GAAT,CAAazE,kBAAb,EAAiC0E,oBAAjC,EAAtB;;AACA,QAAIF,aAAa,IAAIA,aAAa,CAACG,YAAd,EAArB,EAAmD;AAC/C;AACA,YAAMf,uBAAuB,GAAGY,aAAa,CAACX,SAAd,CAAwB;AAAG;AAA3B,OAAhC;AACA,YAAMe,SAAS,GAAGJ,aAAa,CAACV,YAAd,EAAlB;;AACA,UAAIc,SAAS,IAAIA,SAAS,CAACb,OAAV,EAAb,IAAoC,CAACH,uBAAzC,EAAkE;AAC9D,eAAO,IAAP;AACH;;AACDnD,MAAAA,QAAQ,CAACyD,WAAT,CAAqBG,cAArB;AACA,aAAO,IAAP;AACH;;AACD,WAAO,KAAP;AACH,GAdD,EALqD,CAoBrD;;AACAD,EAAAA,MAAM,CAACE,iBAAP,CAAyB,CAAzB,EAA4B,aAA5B,EAA2C,CAACb,QAAD,EAAWc,IAAX,KAAoB;AAC3D9D,IAAAA,QAAQ,CAACyD,WAAT,CAAqBG,cAArB;AACA,WAAO,IAAP;AACH,GAHD;AAIH;;AACDF,uBAAuB,CAAChD,SAAD,EAAY,KAAZ,CAAvB;AACAgD,uBAAuB,CAACzB,UAAD,EAAa,MAAb,CAAvB;;AACA,IAAIM,WAAJ,EAAiB;AACb;AACAA,EAAAA,WAAW,CAACsB,iBAAZ,CAA8B,KAA9B,EAAqC,aAArC,EAAoD,CAACb,QAAD,EAAWc,IAAX,KAAoB;AACpE,UAAMM,iBAAiB,GAAGpB,QAAQ,CAACgB,GAAT,CAAazE,kBAAb,CAA1B;AACA,UAAM8E,gBAAgB,GAAGrB,QAAQ,CAACgB,GAAT,CAAapE,iBAAb,CAAzB,CAFoE,CAGpE;;AACA,UAAMmE,aAAa,GAAGK,iBAAiB,CAACH,oBAAlB,EAAtB;;AACA,QAAIF,aAAa,IAAIA,aAAa,CAACG,YAAd,EAArB,EAAmD;AAC/C,YAAMtF,MAAM,GAAGoB,QAAQ,CAACyD,WAAT,CAAqB,OAArB,CAAf,CAD+C,CAE/C;;AACA,UAAI,CAAC7E,MAAD,IAAWK,QAAQ,CAACqF,KAAxB,EAA+B;AAC3B,eAAO,CAAC,MAAMzG,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,aAAa;AACzD,gBAAM0G,aAAa,GAAG,MAAMF,gBAAgB,CAACG,QAAjB,EAA5B;;AACA,cAAID,aAAa,KAAK,EAAtB,EAA0B;AACtB,kBAAME,QAAQ,GAAGtF,gCAAgC,CAACuF,QAAjC,CAA0CV,GAA1C,CAA8CO,aAA9C,CAAjB;AACA,gBAAII,cAAc,GAAG,KAArB;AACA,gBAAIC,eAAe,GAAG,IAAtB;AACA,gBAAIC,IAAI,GAAG,IAAX;;AACA,gBAAIJ,QAAJ,EAAc;AACVE,cAAAA,cAAc,GAAIZ,aAAa,CAACX,SAAd,CAAwB;AAAG;AAA3B,mBAA6D,CAAC,CAACqB,QAAQ,CAACK,oBAA1F;AACAF,cAAAA,eAAe,GAAI,OAAOH,QAAQ,CAACG,eAAhB,KAAoC,WAApC,GAAkDH,QAAQ,CAACG,eAA3D,GAA6E,IAAhG;AACAC,cAAAA,IAAI,GAAGJ,QAAQ,CAACI,IAAhB;AACH;;AACDd,YAAAA,aAAa,CAACgB,OAAd,CAAsB,UAAtB,EAAkC;AAAQ;AAA1C,cAAuD;AACnDC,cAAAA,IAAI,EAAET,aAD6C;AAEnDI,cAAAA,cAFmD;AAGnDC,cAAAA,eAHmD;AAInDC,cAAAA;AAJmD,aAAvD;AAMH;AACJ,SAnBsB,CAAhB,GAAP;AAoBH;;AACD,aAAO,IAAP;AACH;;AACD,WAAO,KAAP;AACH,GAjCD,EAFa,CAoCb;;AACAtC,EAAAA,WAAW,CAACsB,iBAAZ,CAA8B,CAA9B,EAAiC,aAAjC,EAAgD,CAACb,QAAD,EAAWc,IAAX,KAAoB;AAChE9D,IAAAA,QAAQ,CAACyD,WAAT,CAAqB,OAArB;AACA,WAAO,IAAP;AACH,GAHD;AAIH;;AACD,IAAIvD,YAAJ,EAAkB;AACdZ,EAAAA,oBAAoB,CAACmD,2CAAD,CAApB;AACH","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as browser from '../../../../base/browser/browser.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport { CopyOptions, InMemoryClipboardMetadataManager } from '../../../browser/controller/textAreaInput.js';\nimport { EditorAction, MultiCommand, registerEditorAction } from '../../../browser/editorExtensions.js';\nimport { ICodeEditorService } from '../../../browser/services/codeEditorService.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport * as nls from '../../../../nls.js';\nimport { MenuId, MenuRegistry } from '../../../../platform/actions/common/actions.js';\nimport { IClipboardService } from '../../../../platform/clipboard/common/clipboardService.js';\nconst CLIPBOARD_CONTEXT_MENU_GROUP = '9_cutcopypaste';\nconst supportsCut = (platform.isNative || document.queryCommandSupported('cut'));\nconst supportsCopy = (platform.isNative || document.queryCommandSupported('copy'));\n// Firefox only supports navigator.clipboard.readText() in browser extensions.\n// See https://developer.mozilla.org/en-US/docs/Web/API/Clipboard/readText#Browser_compatibility\n// When loading over http, navigator.clipboard can be undefined. See https://github.com/microsoft/monaco-editor/issues/2313\nconst supportsPaste = (typeof navigator.clipboard === 'undefined' || browser.isFirefox) ? document.queryCommandSupported('paste') : true;\nfunction registerCommand(command) {\n    command.register();\n    return command;\n}\nexport const CutAction = supportsCut ? registerCommand(new MultiCommand({\n    id: 'editor.action.clipboardCutAction',\n    precondition: undefined,\n    kbOpts: (\n    // Do not bind cut keybindings in the browser,\n    // since browsers do that for us and it avoids security prompts\n    platform.isNative ? {\n        primary: 2048 /* CtrlCmd */ | 54 /* KeyX */,\n        win: { primary: 2048 /* CtrlCmd */ | 54 /* KeyX */, secondary: [1024 /* Shift */ | 20 /* Delete */] },\n        weight: 100 /* EditorContrib */\n    } : undefined),\n    menuOpts: [{\n            menuId: MenuId.MenubarEditMenu,\n            group: '2_ccp',\n            title: nls.localize({ key: 'miCut', comment: ['&& denotes a mnemonic'] }, \"Cu&&t\"),\n            order: 1\n        }, {\n            menuId: MenuId.EditorContext,\n            group: CLIPBOARD_CONTEXT_MENU_GROUP,\n            title: nls.localize('actions.clipboard.cutLabel', \"Cut\"),\n            when: EditorContextKeys.writable,\n            order: 1,\n        }, {\n            menuId: MenuId.CommandPalette,\n            group: '',\n            title: nls.localize('actions.clipboard.cutLabel', \"Cut\"),\n            order: 1\n        }, {\n            menuId: MenuId.SimpleEditorContext,\n            group: CLIPBOARD_CONTEXT_MENU_GROUP,\n            title: nls.localize('actions.clipboard.cutLabel', \"Cut\"),\n            when: EditorContextKeys.writable,\n            order: 1,\n        }]\n})) : undefined;\nexport const CopyAction = supportsCopy ? registerCommand(new MultiCommand({\n    id: 'editor.action.clipboardCopyAction',\n    precondition: undefined,\n    kbOpts: (\n    // Do not bind copy keybindings in the browser,\n    // since browsers do that for us and it avoids security prompts\n    platform.isNative ? {\n        primary: 2048 /* CtrlCmd */ | 33 /* KeyC */,\n        win: { primary: 2048 /* CtrlCmd */ | 33 /* KeyC */, secondary: [2048 /* CtrlCmd */ | 19 /* Insert */] },\n        weight: 100 /* EditorContrib */\n    } : undefined),\n    menuOpts: [{\n            menuId: MenuId.MenubarEditMenu,\n            group: '2_ccp',\n            title: nls.localize({ key: 'miCopy', comment: ['&& denotes a mnemonic'] }, \"&&Copy\"),\n            order: 2\n        }, {\n            menuId: MenuId.EditorContext,\n            group: CLIPBOARD_CONTEXT_MENU_GROUP,\n            title: nls.localize('actions.clipboard.copyLabel', \"Copy\"),\n            order: 2,\n        }, {\n            menuId: MenuId.CommandPalette,\n            group: '',\n            title: nls.localize('actions.clipboard.copyLabel', \"Copy\"),\n            order: 1\n        }, {\n            menuId: MenuId.SimpleEditorContext,\n            group: CLIPBOARD_CONTEXT_MENU_GROUP,\n            title: nls.localize('actions.clipboard.copyLabel', \"Copy\"),\n            order: 2,\n        }]\n})) : undefined;\nMenuRegistry.appendMenuItem(MenuId.MenubarEditMenu, { submenu: MenuId.MenubarCopy, title: { value: nls.localize('copy as', \"Copy As\"), original: 'Copy As', }, group: '2_ccp', order: 3 });\nMenuRegistry.appendMenuItem(MenuId.EditorContext, { submenu: MenuId.EditorContextCopy, title: { value: nls.localize('copy as', \"Copy As\"), original: 'Copy As', }, group: CLIPBOARD_CONTEXT_MENU_GROUP, order: 3 });\nexport const PasteAction = supportsPaste ? registerCommand(new MultiCommand({\n    id: 'editor.action.clipboardPasteAction',\n    precondition: undefined,\n    kbOpts: (\n    // Do not bind paste keybindings in the browser,\n    // since browsers do that for us and it avoids security prompts\n    platform.isNative ? {\n        primary: 2048 /* CtrlCmd */ | 52 /* KeyV */,\n        win: { primary: 2048 /* CtrlCmd */ | 52 /* KeyV */, secondary: [1024 /* Shift */ | 19 /* Insert */] },\n        linux: { primary: 2048 /* CtrlCmd */ | 52 /* KeyV */, secondary: [1024 /* Shift */ | 19 /* Insert */] },\n        weight: 100 /* EditorContrib */\n    } : undefined),\n    menuOpts: [{\n            menuId: MenuId.MenubarEditMenu,\n            group: '2_ccp',\n            title: nls.localize({ key: 'miPaste', comment: ['&& denotes a mnemonic'] }, \"&&Paste\"),\n            order: 4\n        }, {\n            menuId: MenuId.EditorContext,\n            group: CLIPBOARD_CONTEXT_MENU_GROUP,\n            title: nls.localize('actions.clipboard.pasteLabel', \"Paste\"),\n            when: EditorContextKeys.writable,\n            order: 4,\n        }, {\n            menuId: MenuId.CommandPalette,\n            group: '',\n            title: nls.localize('actions.clipboard.pasteLabel', \"Paste\"),\n            order: 1\n        }, {\n            menuId: MenuId.SimpleEditorContext,\n            group: CLIPBOARD_CONTEXT_MENU_GROUP,\n            title: nls.localize('actions.clipboard.pasteLabel', \"Paste\"),\n            when: EditorContextKeys.writable,\n            order: 4,\n        }]\n})) : undefined;\nclass ExecCommandCopyWithSyntaxHighlightingAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.clipboardCopyWithSyntaxHighlightingAction',\n            label: nls.localize('actions.clipboard.copyWithSyntaxHighlightingLabel', \"Copy With Syntax Highlighting\"),\n            alias: 'Copy With Syntax Highlighting',\n            precondition: undefined,\n            kbOpts: {\n                kbExpr: EditorContextKeys.textInputFocus,\n                primary: 0,\n                weight: 100 /* EditorContrib */\n            }\n        });\n    }\n    run(accessor, editor) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        const emptySelectionClipboard = editor.getOption(32 /* emptySelectionClipboard */);\n        if (!emptySelectionClipboard && editor.getSelection().isEmpty()) {\n            return;\n        }\n        CopyOptions.forceCopyWithSyntaxHighlighting = true;\n        editor.focus();\n        document.execCommand('copy');\n        CopyOptions.forceCopyWithSyntaxHighlighting = false;\n    }\n}\nfunction registerExecCommandImpl(target, browserCommand) {\n    if (!target) {\n        return;\n    }\n    // 1. handle case when focus is in editor.\n    target.addImplementation(10000, 'code-editor', (accessor, args) => {\n        // Only if editor text focus (i.e. not if editor has widget focus).\n        const focusedEditor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n        if (focusedEditor && focusedEditor.hasTextFocus()) {\n            // Do not execute if there is no selection and empty selection clipboard is off\n            const emptySelectionClipboard = focusedEditor.getOption(32 /* emptySelectionClipboard */);\n            const selection = focusedEditor.getSelection();\n            if (selection && selection.isEmpty() && !emptySelectionClipboard) {\n                return true;\n            }\n            document.execCommand(browserCommand);\n            return true;\n        }\n        return false;\n    });\n    // 2. (default) handle case when focus is somewhere else.\n    target.addImplementation(0, 'generic-dom', (accessor, args) => {\n        document.execCommand(browserCommand);\n        return true;\n    });\n}\nregisterExecCommandImpl(CutAction, 'cut');\nregisterExecCommandImpl(CopyAction, 'copy');\nif (PasteAction) {\n    // 1. Paste: handle case when focus is in editor.\n    PasteAction.addImplementation(10000, 'code-editor', (accessor, args) => {\n        const codeEditorService = accessor.get(ICodeEditorService);\n        const clipboardService = accessor.get(IClipboardService);\n        // Only if editor text focus (i.e. not if editor has widget focus).\n        const focusedEditor = codeEditorService.getFocusedCodeEditor();\n        if (focusedEditor && focusedEditor.hasTextFocus()) {\n            const result = document.execCommand('paste');\n            // Use the clipboard service if document.execCommand('paste') was not successful\n            if (!result && platform.isWeb) {\n                return (() => __awaiter(void 0, void 0, void 0, function* () {\n                    const clipboardText = yield clipboardService.readText();\n                    if (clipboardText !== '') {\n                        const metadata = InMemoryClipboardMetadataManager.INSTANCE.get(clipboardText);\n                        let pasteOnNewLine = false;\n                        let multicursorText = null;\n                        let mode = null;\n                        if (metadata) {\n                            pasteOnNewLine = (focusedEditor.getOption(32 /* emptySelectionClipboard */) && !!metadata.isFromEmptySelection);\n                            multicursorText = (typeof metadata.multicursorText !== 'undefined' ? metadata.multicursorText : null);\n                            mode = metadata.mode;\n                        }\n                        focusedEditor.trigger('keyboard', \"paste\" /* Paste */, {\n                            text: clipboardText,\n                            pasteOnNewLine,\n                            multicursorText,\n                            mode\n                        });\n                    }\n                }))();\n            }\n            return true;\n        }\n        return false;\n    });\n    // 2. Paste: (default) handle case when focus is somewhere else.\n    PasteAction.addImplementation(0, 'generic-dom', (accessor, args) => {\n        document.execCommand('paste');\n        return true;\n    });\n}\nif (supportsCopy) {\n    registerEditorAction(ExecCommandCopyWithSyntaxHighlightingAction);\n}\n"]},"metadata":{},"sourceType":"module"}