{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { TimeoutTimer } from '../../../../base/common/async.js';\nimport { CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { DisposableStore, dispose } from '../../../../base/common/lifecycle.js';\nimport { getLeadingWhitespace, isHighSurrogate, isLowSurrogate } from '../../../../base/common/strings.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { CompletionProviderRegistry } from '../../../common/languages.js';\nimport { IEditorWorkerService } from '../../../common/services/editorWorker.js';\nimport { SnippetController2 } from '../../snippet/browser/snippetController2.js';\nimport { WordDistance } from './wordDistance.js';\nimport { IClipboardService } from '../../../../platform/clipboard/common/clipboardService.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { CompletionModel } from './completionModel.js';\nimport { CompletionOptions, getSnippetSuggestSupport, getSuggestionComparator, provideSuggestionItems } from './suggest.js';\nexport class LineContext {\n  constructor(model, position, auto, shy) {\n    this.leadingLineContent = model.getLineContent(position.lineNumber).substr(0, position.column - 1);\n    this.leadingWord = model.getWordUntilPosition(position);\n    this.lineNumber = position.lineNumber;\n    this.column = position.column;\n    this.auto = auto;\n    this.shy = shy;\n  }\n\n  static shouldAutoTrigger(editor) {\n    if (!editor.hasModel()) {\n      return false;\n    }\n\n    const model = editor.getModel();\n    const pos = editor.getPosition();\n    model.tokenizeIfCheap(pos.lineNumber);\n    const word = model.getWordAtPosition(pos);\n\n    if (!word) {\n      return false;\n    }\n\n    if (word.endColumn !== pos.column) {\n      return false;\n    }\n\n    if (!isNaN(Number(word.word))) {\n      return false;\n    }\n\n    return true;\n  }\n\n}\n\nfunction isSuggestPreviewEnabled(editor) {\n  return editor.getOption(106\n  /* suggest */\n  ).preview;\n}\n\nfunction canShowQuickSuggest(editor, contextKeyService, configurationService) {\n  if (!Boolean(contextKeyService.getContextKeyValue('inlineSuggestionVisible'))) {\n    // Allow if there is no inline suggestion.\n    return true;\n  }\n\n  const allowQuickSuggestions = configurationService.getValue('editor.inlineSuggest.allowQuickSuggestions');\n\n  if (allowQuickSuggestions !== undefined) {\n    // Use setting if available.\n    return Boolean(allowQuickSuggestions);\n  } // Don't allow if inline suggestions are visible and no suggest preview is configured.\n  // TODO disabled for copilot\n\n\n  return false && isSuggestPreviewEnabled(editor);\n}\n\nfunction canShowSuggestOnTriggerCharacters(editor, contextKeyService, configurationService) {\n  if (!Boolean(contextKeyService.getContextKeyValue('inlineSuggestionVisible'))) {\n    // Allow if there is no inline suggestion.\n    return true;\n  }\n\n  const allowQuickSuggestions = configurationService.getValue('editor.inlineSuggest.allowSuggestOnTriggerCharacters');\n\n  if (allowQuickSuggestions !== undefined) {\n    // Use setting if available.\n    return Boolean(allowQuickSuggestions);\n  } // Don't allow if inline suggestions are visible and no suggest preview is configured.\n  // TODO disabled for copilot\n\n\n  return false && isSuggestPreviewEnabled(editor);\n}\n\nlet SuggestModel = class SuggestModel {\n  constructor(_editor, _editorWorkerService, _clipboardService, _telemetryService, _logService, _contextKeyService, _configurationService) {\n    this._editor = _editor;\n    this._editorWorkerService = _editorWorkerService;\n    this._clipboardService = _clipboardService;\n    this._telemetryService = _telemetryService;\n    this._logService = _logService;\n    this._contextKeyService = _contextKeyService;\n    this._configurationService = _configurationService;\n    this._toDispose = new DisposableStore();\n    this._quickSuggestDelay = 10;\n    this._triggerCharacterListener = new DisposableStore();\n    this._triggerQuickSuggest = new TimeoutTimer();\n    this._state = 0\n    /* Idle */\n    ;\n    this._completionDisposables = new DisposableStore();\n    this._onDidCancel = new Emitter();\n    this._onDidTrigger = new Emitter();\n    this._onDidSuggest = new Emitter();\n    this.onDidCancel = this._onDidCancel.event;\n    this.onDidTrigger = this._onDidTrigger.event;\n    this.onDidSuggest = this._onDidSuggest.event;\n    this._telemetryGate = 0;\n    this._currentSelection = this._editor.getSelection() || new Selection(1, 1, 1, 1); // wire up various listeners\n\n    this._toDispose.add(this._editor.onDidChangeModel(() => {\n      this._updateTriggerCharacters();\n\n      this.cancel();\n    }));\n\n    this._toDispose.add(this._editor.onDidChangeModelLanguage(() => {\n      this._updateTriggerCharacters();\n\n      this.cancel();\n    }));\n\n    this._toDispose.add(this._editor.onDidChangeConfiguration(() => {\n      this._updateTriggerCharacters();\n\n      this._updateQuickSuggest();\n    }));\n\n    this._toDispose.add(CompletionProviderRegistry.onDidChange(() => {\n      this._updateTriggerCharacters();\n\n      this._updateActiveSuggestSession();\n    }));\n\n    let editorIsComposing = false;\n\n    this._toDispose.add(this._editor.onDidCompositionStart(() => {\n      editorIsComposing = true;\n    }));\n\n    this._toDispose.add(this._editor.onDidCompositionEnd(() => {\n      editorIsComposing = false;\n\n      this._onCompositionEnd();\n    }));\n\n    this._toDispose.add(this._editor.onDidChangeCursorSelection(e => {\n      // only trigger suggest when the editor isn't composing a character\n      if (!editorIsComposing) {\n        this._onCursorChange(e);\n      }\n    }));\n\n    this._toDispose.add(this._editor.onDidChangeModelContent(() => {\n      // only filter completions when the editor isn't composing a character\n      // allow-any-unicode-next-line\n      // e.g. ¨ + u makes ü but just ¨ cannot be used for filtering\n      if (!editorIsComposing) {\n        this._refilterCompletionItems();\n      }\n    }));\n\n    this._updateTriggerCharacters();\n\n    this._updateQuickSuggest();\n  }\n\n  dispose() {\n    dispose(this._triggerCharacterListener);\n    dispose([this._onDidCancel, this._onDidSuggest, this._onDidTrigger, this._triggerQuickSuggest]);\n\n    this._toDispose.dispose();\n\n    this._completionDisposables.dispose();\n\n    this.cancel();\n  } // --- handle configuration & precondition changes\n\n\n  _updateQuickSuggest() {\n    this._quickSuggestDelay = this._editor.getOption(80\n    /* quickSuggestionsDelay */\n    );\n\n    if (isNaN(this._quickSuggestDelay) || !this._quickSuggestDelay && this._quickSuggestDelay !== 0 || this._quickSuggestDelay < 0) {\n      this._quickSuggestDelay = 10;\n    }\n  }\n\n  _updateTriggerCharacters() {\n    this._triggerCharacterListener.clear();\n\n    if (this._editor.getOption(81\n    /* readOnly */\n    ) || !this._editor.hasModel() || !this._editor.getOption(109\n    /* suggestOnTriggerCharacters */\n    )) {\n      return;\n    }\n\n    const supportsByTriggerCharacter = new Map();\n\n    for (const support of CompletionProviderRegistry.all(this._editor.getModel())) {\n      for (const ch of support.triggerCharacters || []) {\n        let set = supportsByTriggerCharacter.get(ch);\n\n        if (!set) {\n          set = new Set();\n          set.add(getSnippetSuggestSupport());\n          supportsByTriggerCharacter.set(ch, set);\n        }\n\n        set.add(support);\n      }\n    }\n\n    const checkTriggerCharacter = text => {\n      if (!canShowSuggestOnTriggerCharacters(this._editor, this._contextKeyService, this._configurationService)) {\n        return;\n      }\n\n      if (LineContext.shouldAutoTrigger(this._editor)) {\n        // don't trigger by trigger characters when this is a case for quick suggest\n        return;\n      }\n\n      if (!text) {\n        // came here from the compositionEnd-event\n        const position = this._editor.getPosition();\n\n        const model = this._editor.getModel();\n\n        text = model.getLineContent(position.lineNumber).substr(0, position.column - 1);\n      }\n\n      let lastChar = '';\n\n      if (isLowSurrogate(text.charCodeAt(text.length - 1))) {\n        if (isHighSurrogate(text.charCodeAt(text.length - 2))) {\n          lastChar = text.substr(text.length - 2);\n        }\n      } else {\n        lastChar = text.charAt(text.length - 1);\n      }\n\n      const supports = supportsByTriggerCharacter.get(lastChar);\n\n      if (supports) {\n        // keep existing items that where not computed by the\n        // supports/providers that want to trigger now\n        const existing = this._completionModel ? {\n          items: this._completionModel.adopt(supports),\n          clipboardText: this._completionModel.clipboardText\n        } : undefined;\n        this.trigger({\n          auto: true,\n          shy: false,\n          triggerCharacter: lastChar\n        }, Boolean(this._completionModel), supports, existing);\n      }\n    };\n\n    this._triggerCharacterListener.add(this._editor.onDidType(checkTriggerCharacter));\n\n    this._triggerCharacterListener.add(this._editor.onDidCompositionEnd(() => checkTriggerCharacter()));\n  } // --- trigger/retrigger/cancel suggest\n\n\n  get state() {\n    return this._state;\n  }\n\n  cancel(retrigger = false) {\n    var _a;\n\n    if (this._state !== 0\n    /* Idle */\n    ) {\n      this._triggerQuickSuggest.cancel();\n\n      (_a = this._requestToken) === null || _a === void 0 ? void 0 : _a.cancel();\n      this._requestToken = undefined;\n      this._state = 0\n      /* Idle */\n      ;\n      this._completionModel = undefined;\n      this._context = undefined;\n\n      this._onDidCancel.fire({\n        retrigger\n      });\n    }\n  }\n\n  clear() {\n    this._completionDisposables.clear();\n  }\n\n  _updateActiveSuggestSession() {\n    if (this._state !== 0\n    /* Idle */\n    ) {\n      if (!this._editor.hasModel() || !CompletionProviderRegistry.has(this._editor.getModel())) {\n        this.cancel();\n      } else {\n        this.trigger({\n          auto: this._state === 2\n          /* Auto */\n          ,\n          shy: false\n        }, true);\n      }\n    }\n  }\n\n  _onCursorChange(e) {\n    if (!this._editor.hasModel()) {\n      return;\n    }\n\n    const prevSelection = this._currentSelection;\n    this._currentSelection = this._editor.getSelection();\n\n    if (!e.selection.isEmpty() || e.reason !== 0\n    /* NotSet */\n    && e.reason !== 3\n    /* Explicit */\n    || e.source !== 'keyboard' && e.source !== 'deleteLeft') {\n      // Early exit if nothing needs to be done!\n      // Leave some form of early exit check here if you wish to continue being a cursor position change listener ;)\n      this.cancel();\n      return;\n    }\n\n    if (this._state === 0\n    /* Idle */\n    && e.reason === 0\n    /* NotSet */\n    ) {\n      if (prevSelection.containsRange(this._currentSelection) || prevSelection.getEndPosition().isBeforeOrEqual(this._currentSelection.getPosition())) {\n        // cursor did move RIGHT due to typing -> trigger quick suggest\n        this._doTriggerQuickSuggest();\n      }\n    } else if (this._state !== 0\n    /* Idle */\n    && e.reason === 3\n    /* Explicit */\n    ) {\n      // suggest is active and something like cursor keys are used to move\n      // the cursor. this means we can refilter at the new position\n      this._refilterCompletionItems();\n    }\n  }\n\n  _onCompositionEnd() {\n    // trigger or refilter when composition ends\n    if (this._state === 0\n    /* Idle */\n    ) {\n      this._doTriggerQuickSuggest();\n    } else {\n      this._refilterCompletionItems();\n    }\n  }\n\n  _doTriggerQuickSuggest() {\n    var _a;\n\n    if (this._editor.getOption(79\n    /* quickSuggestions */\n    ) === false) {\n      // not enabled\n      return;\n    }\n\n    if (this._editor.getOption(106\n    /* suggest */\n    ).snippetsPreventQuickSuggestions && ((_a = SnippetController2.get(this._editor)) === null || _a === void 0 ? void 0 : _a.isInSnippet())) {\n      // no quick suggestion when in snippet mode\n      return;\n    }\n\n    this.cancel();\n\n    this._triggerQuickSuggest.cancelAndSet(() => {\n      if (this._state !== 0\n      /* Idle */\n      ) {\n        return;\n      }\n\n      if (!LineContext.shouldAutoTrigger(this._editor)) {\n        return;\n      }\n\n      if (!this._editor.hasModel()) {\n        return;\n      }\n\n      const model = this._editor.getModel();\n\n      const pos = this._editor.getPosition(); // validate enabled now\n\n\n      const quickSuggestions = this._editor.getOption(79\n      /* quickSuggestions */\n      );\n\n      if (quickSuggestions === false) {\n        return;\n      } else if (quickSuggestions === true) {// all good\n      } else {\n        // Check the type of the token that triggered this\n        model.tokenizeIfCheap(pos.lineNumber);\n        const lineTokens = model.getLineTokens(pos.lineNumber);\n        const tokenType = lineTokens.getStandardTokenType(lineTokens.findTokenIndexAtOffset(Math.max(pos.column - 1 - 1, 0)));\n        const inValidScope = quickSuggestions.other && tokenType === 0\n        /* Other */\n        || quickSuggestions.comments && tokenType === 1\n        /* Comment */\n        || quickSuggestions.strings && tokenType === 2\n        /* String */\n        ;\n\n        if (!inValidScope) {\n          return;\n        }\n      }\n\n      if (!canShowQuickSuggest(this._editor, this._contextKeyService, this._configurationService)) {\n        // do not trigger quick suggestions if inline suggestions are shown\n        return;\n      }\n\n      if (!CompletionProviderRegistry.has(model)) {\n        return;\n      } // we made it till here -> trigger now\n\n\n      this.trigger({\n        auto: true,\n        shy: false\n      });\n    }, this._quickSuggestDelay);\n  }\n\n  _refilterCompletionItems() {\n    // Re-filter suggestions. This MUST run async because filtering/scoring\n    // uses the model content AND the cursor position. The latter is NOT\n    // updated when the document has changed (the event which drives this method)\n    // and therefore a little pause (next mirco task) is needed. See:\n    // https://stackoverflow.com/questions/25915634/difference-between-microtask-and-macrotask-within-an-event-loop-context#25933985\n    Promise.resolve().then(() => {\n      if (this._state === 0\n      /* Idle */\n      ) {\n        return;\n      }\n\n      if (!this._editor.hasModel()) {\n        return;\n      }\n\n      const model = this._editor.getModel();\n\n      const position = this._editor.getPosition();\n\n      const ctx = new LineContext(model, position, this._state === 2\n      /* Auto */\n      , false);\n\n      this._onNewContext(ctx);\n    });\n  }\n\n  trigger(context, retrigger = false, onlyFrom, existing) {\n    var _a;\n\n    if (!this._editor.hasModel()) {\n      return;\n    }\n\n    const model = this._editor.getModel();\n\n    const auto = context.auto;\n    const ctx = new LineContext(model, this._editor.getPosition(), auto, context.shy); // Cancel previous requests, change state & update UI\n\n    this.cancel(retrigger);\n    this._state = auto ? 2\n    /* Auto */\n    : 1\n    /* Manual */\n    ;\n\n    this._onDidTrigger.fire({\n      auto,\n      shy: context.shy,\n      position: this._editor.getPosition()\n    }); // Capture context when request was sent\n\n\n    this._context = ctx; // Build context for request\n\n    let suggestCtx = {\n      triggerKind: (_a = context.triggerKind) !== null && _a !== void 0 ? _a : 0\n      /* Invoke */\n\n    };\n\n    if (context.triggerCharacter) {\n      suggestCtx = {\n        triggerKind: 1\n        /* TriggerCharacter */\n        ,\n        triggerCharacter: context.triggerCharacter\n      };\n    }\n\n    this._requestToken = new CancellationTokenSource(); // kind filter and snippet sort rules\n\n    const snippetSuggestions = this._editor.getOption(101\n    /* snippetSuggestions */\n    );\n\n    let snippetSortOrder = 1\n    /* Inline */\n    ;\n\n    switch (snippetSuggestions) {\n      case 'top':\n        snippetSortOrder = 0\n        /* Top */\n        ;\n        break;\n      // \t↓ that's the default anyways...\n      // case 'inline':\n      // \tsnippetSortOrder = SnippetSortOrder.Inline;\n      // \tbreak;\n\n      case 'bottom':\n        snippetSortOrder = 2\n        /* Bottom */\n        ;\n        break;\n    }\n\n    const {\n      itemKind: itemKindFilter,\n      showDeprecated\n    } = SuggestModel._createSuggestFilter(this._editor);\n\n    const wordDistance = WordDistance.create(this._editorWorkerService, this._editor);\n    const completions = provideSuggestionItems(model, this._editor.getPosition(), new CompletionOptions(snippetSortOrder, itemKindFilter, onlyFrom, showDeprecated), suggestCtx, this._requestToken.token);\n    Promise.all([completions, wordDistance]).then(([completions, wordDistance]) => __awaiter(this, void 0, void 0, function* () {\n      var _b;\n\n      (_b = this._requestToken) === null || _b === void 0 ? void 0 : _b.dispose();\n\n      if (!this._editor.hasModel()) {\n        return;\n      }\n\n      let clipboardText = existing === null || existing === void 0 ? void 0 : existing.clipboardText;\n\n      if (!clipboardText && completions.needsClipboard) {\n        clipboardText = yield this._clipboardService.readText();\n      }\n\n      if (this._state === 0\n      /* Idle */\n      ) {\n        return;\n      }\n\n      const model = this._editor.getModel();\n\n      let items = completions.items;\n\n      if (existing) {\n        const cmpFn = getSuggestionComparator(snippetSortOrder);\n        items = items.concat(existing.items).sort(cmpFn);\n      }\n\n      const ctx = new LineContext(model, this._editor.getPosition(), auto, context.shy);\n      this._completionModel = new CompletionModel(items, this._context.column, {\n        leadingLineContent: ctx.leadingLineContent,\n        characterCountDelta: ctx.column - this._context.column\n      }, wordDistance, this._editor.getOption(106\n      /* suggest */\n      ), this._editor.getOption(101\n      /* snippetSuggestions */\n      ), clipboardText); // store containers so that they can be disposed later\n\n      this._completionDisposables.add(completions.disposable);\n\n      this._onNewContext(ctx); // finally report telemetry about durations\n\n\n      this._reportDurationsTelemetry(completions.durations);\n    })).catch(onUnexpectedError);\n  }\n\n  _reportDurationsTelemetry(durations) {\n    if (this._telemetryGate++ % 230 !== 0) {\n      return;\n    }\n\n    setTimeout(() => {\n      this._telemetryService.publicLog2('suggest.durations.json', {\n        data: JSON.stringify(durations)\n      });\n\n      this._logService.debug('suggest.durations.json', durations);\n    });\n  }\n\n  static _createSuggestFilter(editor) {\n    // kind filter and snippet sort rules\n    const result = new Set(); // snippet setting\n\n    const snippetSuggestions = editor.getOption(101\n    /* snippetSuggestions */\n    );\n\n    if (snippetSuggestions === 'none') {\n      result.add(27\n      /* Snippet */\n      );\n    } // type setting\n\n\n    const suggestOptions = editor.getOption(106\n    /* suggest */\n    );\n\n    if (!suggestOptions.showMethods) {\n      result.add(0\n      /* Method */\n      );\n    }\n\n    if (!suggestOptions.showFunctions) {\n      result.add(1\n      /* Function */\n      );\n    }\n\n    if (!suggestOptions.showConstructors) {\n      result.add(2\n      /* Constructor */\n      );\n    }\n\n    if (!suggestOptions.showFields) {\n      result.add(3\n      /* Field */\n      );\n    }\n\n    if (!suggestOptions.showVariables) {\n      result.add(4\n      /* Variable */\n      );\n    }\n\n    if (!suggestOptions.showClasses) {\n      result.add(5\n      /* Class */\n      );\n    }\n\n    if (!suggestOptions.showStructs) {\n      result.add(6\n      /* Struct */\n      );\n    }\n\n    if (!suggestOptions.showInterfaces) {\n      result.add(7\n      /* Interface */\n      );\n    }\n\n    if (!suggestOptions.showModules) {\n      result.add(8\n      /* Module */\n      );\n    }\n\n    if (!suggestOptions.showProperties) {\n      result.add(9\n      /* Property */\n      );\n    }\n\n    if (!suggestOptions.showEvents) {\n      result.add(10\n      /* Event */\n      );\n    }\n\n    if (!suggestOptions.showOperators) {\n      result.add(11\n      /* Operator */\n      );\n    }\n\n    if (!suggestOptions.showUnits) {\n      result.add(12\n      /* Unit */\n      );\n    }\n\n    if (!suggestOptions.showValues) {\n      result.add(13\n      /* Value */\n      );\n    }\n\n    if (!suggestOptions.showConstants) {\n      result.add(14\n      /* Constant */\n      );\n    }\n\n    if (!suggestOptions.showEnums) {\n      result.add(15\n      /* Enum */\n      );\n    }\n\n    if (!suggestOptions.showEnumMembers) {\n      result.add(16\n      /* EnumMember */\n      );\n    }\n\n    if (!suggestOptions.showKeywords) {\n      result.add(17\n      /* Keyword */\n      );\n    }\n\n    if (!suggestOptions.showWords) {\n      result.add(18\n      /* Text */\n      );\n    }\n\n    if (!suggestOptions.showColors) {\n      result.add(19\n      /* Color */\n      );\n    }\n\n    if (!suggestOptions.showFiles) {\n      result.add(20\n      /* File */\n      );\n    }\n\n    if (!suggestOptions.showReferences) {\n      result.add(21\n      /* Reference */\n      );\n    }\n\n    if (!suggestOptions.showColors) {\n      result.add(22\n      /* Customcolor */\n      );\n    }\n\n    if (!suggestOptions.showFolders) {\n      result.add(23\n      /* Folder */\n      );\n    }\n\n    if (!suggestOptions.showTypeParameters) {\n      result.add(24\n      /* TypeParameter */\n      );\n    }\n\n    if (!suggestOptions.showSnippets) {\n      result.add(27\n      /* Snippet */\n      );\n    }\n\n    if (!suggestOptions.showUsers) {\n      result.add(25\n      /* User */\n      );\n    }\n\n    if (!suggestOptions.showIssues) {\n      result.add(26\n      /* Issue */\n      );\n    }\n\n    return {\n      itemKind: result,\n      showDeprecated: suggestOptions.showDeprecated\n    };\n  }\n\n  _onNewContext(ctx) {\n    if (!this._context) {\n      // happens when 24x7 IntelliSense is enabled and still in its delay\n      return;\n    }\n\n    if (ctx.lineNumber !== this._context.lineNumber) {\n      // e.g. happens when pressing Enter while IntelliSense is computed\n      this.cancel();\n      return;\n    }\n\n    if (getLeadingWhitespace(ctx.leadingLineContent) !== getLeadingWhitespace(this._context.leadingLineContent)) {\n      // cancel IntelliSense when line start changes\n      // happens when the current word gets outdented\n      this.cancel();\n      return;\n    }\n\n    if (ctx.column < this._context.column) {\n      // typed -> moved cursor LEFT -> retrigger if still on a word\n      if (ctx.leadingWord.word) {\n        this.trigger({\n          auto: this._context.auto,\n          shy: false\n        }, true);\n      } else {\n        this.cancel();\n      }\n\n      return;\n    }\n\n    if (!this._completionModel) {\n      // happens when IntelliSense is not yet computed\n      return;\n    }\n\n    if (ctx.leadingWord.word.length !== 0 && ctx.leadingWord.startColumn > this._context.leadingWord.startColumn) {\n      // started a new word while IntelliSense shows -> retrigger\n      // Select those providers have not contributed to this completion model and re-trigger completions for\n      // them. Also adopt the existing items and merge them into the new completion model\n      const inactiveProvider = new Set(CompletionProviderRegistry.all(this._editor.getModel()));\n\n      for (let provider of this._completionModel.allProvider) {\n        inactiveProvider.delete(provider);\n      }\n\n      const items = this._completionModel.adopt(new Set());\n\n      this.trigger({\n        auto: this._context.auto,\n        shy: false\n      }, true, inactiveProvider, {\n        items,\n        clipboardText: this._completionModel.clipboardText\n      });\n      return;\n    }\n\n    if (ctx.column > this._context.column && this._completionModel.incomplete.size > 0 && ctx.leadingWord.word.length !== 0) {\n      // typed -> moved cursor RIGHT & incomple model & still on a word -> retrigger\n      const {\n        incomplete\n      } = this._completionModel;\n\n      const items = this._completionModel.adopt(incomplete);\n\n      this.trigger({\n        auto: this._state === 2\n        /* Auto */\n        ,\n        shy: false,\n        triggerKind: 2\n        /* TriggerForIncompleteCompletions */\n\n      }, true, incomplete, {\n        items,\n        clipboardText: this._completionModel.clipboardText\n      });\n    } else {\n      // typed -> moved cursor RIGHT -> update UI\n      let oldLineContext = this._completionModel.lineContext;\n      let isFrozen = false;\n      this._completionModel.lineContext = {\n        leadingLineContent: ctx.leadingLineContent,\n        characterCountDelta: ctx.column - this._context.column\n      };\n\n      if (this._completionModel.items.length === 0) {\n        if (LineContext.shouldAutoTrigger(this._editor) && this._context.leadingWord.endColumn < ctx.leadingWord.startColumn) {\n          // retrigger when heading into a new word\n          this.trigger({\n            auto: this._context.auto,\n            shy: false\n          }, true);\n          return;\n        }\n\n        if (!this._context.auto) {\n          // freeze when IntelliSense was manually requested\n          this._completionModel.lineContext = oldLineContext;\n          isFrozen = this._completionModel.items.length > 0;\n\n          if (isFrozen && ctx.leadingWord.word.length === 0) {\n            // there were results before but now there aren't\n            // and also we are not on a word anymore -> cancel\n            this.cancel();\n            return;\n          }\n        } else {\n          // nothing left\n          this.cancel();\n          return;\n        }\n      }\n\n      this._onDidSuggest.fire({\n        completionModel: this._completionModel,\n        auto: this._context.auto,\n        shy: this._context.shy,\n        isFrozen\n      });\n    }\n  }\n\n};\nSuggestModel = __decorate([__param(1, IEditorWorkerService), __param(2, IClipboardService), __param(3, ITelemetryService), __param(4, ILogService), __param(5, IContextKeyService), __param(6, IConfigurationService)], SuggestModel);\nexport { SuggestModel };","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/contrib/suggest/browser/suggestModel.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","TimeoutTimer","CancellationTokenSource","onUnexpectedError","Emitter","DisposableStore","dispose","getLeadingWhitespace","isHighSurrogate","isLowSurrogate","Selection","CompletionProviderRegistry","IEditorWorkerService","SnippetController2","WordDistance","IClipboardService","IConfigurationService","IContextKeyService","ILogService","ITelemetryService","CompletionModel","CompletionOptions","getSnippetSuggestSupport","getSuggestionComparator","provideSuggestionItems","LineContext","constructor","model","position","auto","shy","leadingLineContent","getLineContent","lineNumber","substr","column","leadingWord","getWordUntilPosition","shouldAutoTrigger","editor","hasModel","getModel","pos","getPosition","tokenizeIfCheap","word","getWordAtPosition","endColumn","isNaN","Number","isSuggestPreviewEnabled","getOption","preview","canShowQuickSuggest","contextKeyService","configurationService","Boolean","getContextKeyValue","allowQuickSuggestions","getValue","undefined","canShowSuggestOnTriggerCharacters","SuggestModel","_editor","_editorWorkerService","_clipboardService","_telemetryService","_logService","_contextKeyService","_configurationService","_toDispose","_quickSuggestDelay","_triggerCharacterListener","_triggerQuickSuggest","_state","_completionDisposables","_onDidCancel","_onDidTrigger","_onDidSuggest","onDidCancel","event","onDidTrigger","onDidSuggest","_telemetryGate","_currentSelection","getSelection","add","onDidChangeModel","_updateTriggerCharacters","cancel","onDidChangeModelLanguage","onDidChangeConfiguration","_updateQuickSuggest","onDidChange","_updateActiveSuggestSession","editorIsComposing","onDidCompositionStart","onDidCompositionEnd","_onCompositionEnd","onDidChangeCursorSelection","_onCursorChange","onDidChangeModelContent","_refilterCompletionItems","clear","supportsByTriggerCharacter","Map","support","all","ch","triggerCharacters","set","get","Set","checkTriggerCharacter","text","lastChar","charCodeAt","charAt","supports","existing","_completionModel","items","clipboardText","trigger","triggerCharacter","onDidType","state","retrigger","_a","_requestToken","_context","fire","has","prevSelection","selection","isEmpty","reason","source","containsRange","getEndPosition","isBeforeOrEqual","_doTriggerQuickSuggest","snippetsPreventQuickSuggestions","isInSnippet","cancelAndSet","quickSuggestions","lineTokens","getLineTokens","tokenType","getStandardTokenType","findTokenIndexAtOffset","Math","max","inValidScope","other","comments","strings","ctx","_onNewContext","context","onlyFrom","suggestCtx","triggerKind","snippetSuggestions","snippetSortOrder","itemKind","itemKindFilter","showDeprecated","_createSuggestFilter","wordDistance","create","completions","token","_b","needsClipboard","readText","cmpFn","concat","sort","characterCountDelta","disposable","_reportDurationsTelemetry","durations","catch","setTimeout","publicLog2","data","JSON","stringify","debug","suggestOptions","showMethods","showFunctions","showConstructors","showFields","showVariables","showClasses","showStructs","showInterfaces","showModules","showProperties","showEvents","showOperators","showUnits","showValues","showConstants","showEnums","showEnumMembers","showKeywords","showWords","showColors","showFiles","showReferences","showFolders","showTypeParameters","showSnippets","showUsers","showIssues","startColumn","inactiveProvider","provider","allProvider","delete","incomplete","size","oldLineContext","lineContext","isFrozen","completionModel"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { TimeoutTimer } from '../../../../base/common/async.js';\nimport { CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { DisposableStore, dispose } from '../../../../base/common/lifecycle.js';\nimport { getLeadingWhitespace, isHighSurrogate, isLowSurrogate } from '../../../../base/common/strings.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { CompletionProviderRegistry } from '../../../common/languages.js';\nimport { IEditorWorkerService } from '../../../common/services/editorWorker.js';\nimport { SnippetController2 } from '../../snippet/browser/snippetController2.js';\nimport { WordDistance } from './wordDistance.js';\nimport { IClipboardService } from '../../../../platform/clipboard/common/clipboardService.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { CompletionModel } from './completionModel.js';\nimport { CompletionOptions, getSnippetSuggestSupport, getSuggestionComparator, provideSuggestionItems } from './suggest.js';\nexport class LineContext {\n    constructor(model, position, auto, shy) {\n        this.leadingLineContent = model.getLineContent(position.lineNumber).substr(0, position.column - 1);\n        this.leadingWord = model.getWordUntilPosition(position);\n        this.lineNumber = position.lineNumber;\n        this.column = position.column;\n        this.auto = auto;\n        this.shy = shy;\n    }\n    static shouldAutoTrigger(editor) {\n        if (!editor.hasModel()) {\n            return false;\n        }\n        const model = editor.getModel();\n        const pos = editor.getPosition();\n        model.tokenizeIfCheap(pos.lineNumber);\n        const word = model.getWordAtPosition(pos);\n        if (!word) {\n            return false;\n        }\n        if (word.endColumn !== pos.column) {\n            return false;\n        }\n        if (!isNaN(Number(word.word))) {\n            return false;\n        }\n        return true;\n    }\n}\nfunction isSuggestPreviewEnabled(editor) {\n    return editor.getOption(106 /* suggest */).preview;\n}\nfunction canShowQuickSuggest(editor, contextKeyService, configurationService) {\n    if (!Boolean(contextKeyService.getContextKeyValue('inlineSuggestionVisible'))) {\n        // Allow if there is no inline suggestion.\n        return true;\n    }\n    const allowQuickSuggestions = configurationService.getValue('editor.inlineSuggest.allowQuickSuggestions');\n    if (allowQuickSuggestions !== undefined) {\n        // Use setting if available.\n        return Boolean(allowQuickSuggestions);\n    }\n    // Don't allow if inline suggestions are visible and no suggest preview is configured.\n    // TODO disabled for copilot\n    return false && isSuggestPreviewEnabled(editor);\n}\nfunction canShowSuggestOnTriggerCharacters(editor, contextKeyService, configurationService) {\n    if (!Boolean(contextKeyService.getContextKeyValue('inlineSuggestionVisible'))) {\n        // Allow if there is no inline suggestion.\n        return true;\n    }\n    const allowQuickSuggestions = configurationService.getValue('editor.inlineSuggest.allowSuggestOnTriggerCharacters');\n    if (allowQuickSuggestions !== undefined) {\n        // Use setting if available.\n        return Boolean(allowQuickSuggestions);\n    }\n    // Don't allow if inline suggestions are visible and no suggest preview is configured.\n    // TODO disabled for copilot\n    return false && isSuggestPreviewEnabled(editor);\n}\nlet SuggestModel = class SuggestModel {\n    constructor(_editor, _editorWorkerService, _clipboardService, _telemetryService, _logService, _contextKeyService, _configurationService) {\n        this._editor = _editor;\n        this._editorWorkerService = _editorWorkerService;\n        this._clipboardService = _clipboardService;\n        this._telemetryService = _telemetryService;\n        this._logService = _logService;\n        this._contextKeyService = _contextKeyService;\n        this._configurationService = _configurationService;\n        this._toDispose = new DisposableStore();\n        this._quickSuggestDelay = 10;\n        this._triggerCharacterListener = new DisposableStore();\n        this._triggerQuickSuggest = new TimeoutTimer();\n        this._state = 0 /* Idle */;\n        this._completionDisposables = new DisposableStore();\n        this._onDidCancel = new Emitter();\n        this._onDidTrigger = new Emitter();\n        this._onDidSuggest = new Emitter();\n        this.onDidCancel = this._onDidCancel.event;\n        this.onDidTrigger = this._onDidTrigger.event;\n        this.onDidSuggest = this._onDidSuggest.event;\n        this._telemetryGate = 0;\n        this._currentSelection = this._editor.getSelection() || new Selection(1, 1, 1, 1);\n        // wire up various listeners\n        this._toDispose.add(this._editor.onDidChangeModel(() => {\n            this._updateTriggerCharacters();\n            this.cancel();\n        }));\n        this._toDispose.add(this._editor.onDidChangeModelLanguage(() => {\n            this._updateTriggerCharacters();\n            this.cancel();\n        }));\n        this._toDispose.add(this._editor.onDidChangeConfiguration(() => {\n            this._updateTriggerCharacters();\n            this._updateQuickSuggest();\n        }));\n        this._toDispose.add(CompletionProviderRegistry.onDidChange(() => {\n            this._updateTriggerCharacters();\n            this._updateActiveSuggestSession();\n        }));\n        let editorIsComposing = false;\n        this._toDispose.add(this._editor.onDidCompositionStart(() => {\n            editorIsComposing = true;\n        }));\n        this._toDispose.add(this._editor.onDidCompositionEnd(() => {\n            editorIsComposing = false;\n            this._onCompositionEnd();\n        }));\n        this._toDispose.add(this._editor.onDidChangeCursorSelection(e => {\n            // only trigger suggest when the editor isn't composing a character\n            if (!editorIsComposing) {\n                this._onCursorChange(e);\n            }\n        }));\n        this._toDispose.add(this._editor.onDidChangeModelContent(() => {\n            // only filter completions when the editor isn't composing a character\n            // allow-any-unicode-next-line\n            // e.g. ¨ + u makes ü but just ¨ cannot be used for filtering\n            if (!editorIsComposing) {\n                this._refilterCompletionItems();\n            }\n        }));\n        this._updateTriggerCharacters();\n        this._updateQuickSuggest();\n    }\n    dispose() {\n        dispose(this._triggerCharacterListener);\n        dispose([this._onDidCancel, this._onDidSuggest, this._onDidTrigger, this._triggerQuickSuggest]);\n        this._toDispose.dispose();\n        this._completionDisposables.dispose();\n        this.cancel();\n    }\n    // --- handle configuration & precondition changes\n    _updateQuickSuggest() {\n        this._quickSuggestDelay = this._editor.getOption(80 /* quickSuggestionsDelay */);\n        if (isNaN(this._quickSuggestDelay) || (!this._quickSuggestDelay && this._quickSuggestDelay !== 0) || this._quickSuggestDelay < 0) {\n            this._quickSuggestDelay = 10;\n        }\n    }\n    _updateTriggerCharacters() {\n        this._triggerCharacterListener.clear();\n        if (this._editor.getOption(81 /* readOnly */)\n            || !this._editor.hasModel()\n            || !this._editor.getOption(109 /* suggestOnTriggerCharacters */)) {\n            return;\n        }\n        const supportsByTriggerCharacter = new Map();\n        for (const support of CompletionProviderRegistry.all(this._editor.getModel())) {\n            for (const ch of support.triggerCharacters || []) {\n                let set = supportsByTriggerCharacter.get(ch);\n                if (!set) {\n                    set = new Set();\n                    set.add(getSnippetSuggestSupport());\n                    supportsByTriggerCharacter.set(ch, set);\n                }\n                set.add(support);\n            }\n        }\n        const checkTriggerCharacter = (text) => {\n            if (!canShowSuggestOnTriggerCharacters(this._editor, this._contextKeyService, this._configurationService)) {\n                return;\n            }\n            if (LineContext.shouldAutoTrigger(this._editor)) {\n                // don't trigger by trigger characters when this is a case for quick suggest\n                return;\n            }\n            if (!text) {\n                // came here from the compositionEnd-event\n                const position = this._editor.getPosition();\n                const model = this._editor.getModel();\n                text = model.getLineContent(position.lineNumber).substr(0, position.column - 1);\n            }\n            let lastChar = '';\n            if (isLowSurrogate(text.charCodeAt(text.length - 1))) {\n                if (isHighSurrogate(text.charCodeAt(text.length - 2))) {\n                    lastChar = text.substr(text.length - 2);\n                }\n            }\n            else {\n                lastChar = text.charAt(text.length - 1);\n            }\n            const supports = supportsByTriggerCharacter.get(lastChar);\n            if (supports) {\n                // keep existing items that where not computed by the\n                // supports/providers that want to trigger now\n                const existing = this._completionModel\n                    ? { items: this._completionModel.adopt(supports), clipboardText: this._completionModel.clipboardText }\n                    : undefined;\n                this.trigger({ auto: true, shy: false, triggerCharacter: lastChar }, Boolean(this._completionModel), supports, existing);\n            }\n        };\n        this._triggerCharacterListener.add(this._editor.onDidType(checkTriggerCharacter));\n        this._triggerCharacterListener.add(this._editor.onDidCompositionEnd(() => checkTriggerCharacter()));\n    }\n    // --- trigger/retrigger/cancel suggest\n    get state() {\n        return this._state;\n    }\n    cancel(retrigger = false) {\n        var _a;\n        if (this._state !== 0 /* Idle */) {\n            this._triggerQuickSuggest.cancel();\n            (_a = this._requestToken) === null || _a === void 0 ? void 0 : _a.cancel();\n            this._requestToken = undefined;\n            this._state = 0 /* Idle */;\n            this._completionModel = undefined;\n            this._context = undefined;\n            this._onDidCancel.fire({ retrigger });\n        }\n    }\n    clear() {\n        this._completionDisposables.clear();\n    }\n    _updateActiveSuggestSession() {\n        if (this._state !== 0 /* Idle */) {\n            if (!this._editor.hasModel() || !CompletionProviderRegistry.has(this._editor.getModel())) {\n                this.cancel();\n            }\n            else {\n                this.trigger({ auto: this._state === 2 /* Auto */, shy: false }, true);\n            }\n        }\n    }\n    _onCursorChange(e) {\n        if (!this._editor.hasModel()) {\n            return;\n        }\n        const prevSelection = this._currentSelection;\n        this._currentSelection = this._editor.getSelection();\n        if (!e.selection.isEmpty()\n            || (e.reason !== 0 /* NotSet */ && e.reason !== 3 /* Explicit */)\n            || (e.source !== 'keyboard' && e.source !== 'deleteLeft')) {\n            // Early exit if nothing needs to be done!\n            // Leave some form of early exit check here if you wish to continue being a cursor position change listener ;)\n            this.cancel();\n            return;\n        }\n        if (this._state === 0 /* Idle */ && e.reason === 0 /* NotSet */) {\n            if (prevSelection.containsRange(this._currentSelection) || prevSelection.getEndPosition().isBeforeOrEqual(this._currentSelection.getPosition())) {\n                // cursor did move RIGHT due to typing -> trigger quick suggest\n                this._doTriggerQuickSuggest();\n            }\n        }\n        else if (this._state !== 0 /* Idle */ && e.reason === 3 /* Explicit */) {\n            // suggest is active and something like cursor keys are used to move\n            // the cursor. this means we can refilter at the new position\n            this._refilterCompletionItems();\n        }\n    }\n    _onCompositionEnd() {\n        // trigger or refilter when composition ends\n        if (this._state === 0 /* Idle */) {\n            this._doTriggerQuickSuggest();\n        }\n        else {\n            this._refilterCompletionItems();\n        }\n    }\n    _doTriggerQuickSuggest() {\n        var _a;\n        if (this._editor.getOption(79 /* quickSuggestions */) === false) {\n            // not enabled\n            return;\n        }\n        if (this._editor.getOption(106 /* suggest */).snippetsPreventQuickSuggestions && ((_a = SnippetController2.get(this._editor)) === null || _a === void 0 ? void 0 : _a.isInSnippet())) {\n            // no quick suggestion when in snippet mode\n            return;\n        }\n        this.cancel();\n        this._triggerQuickSuggest.cancelAndSet(() => {\n            if (this._state !== 0 /* Idle */) {\n                return;\n            }\n            if (!LineContext.shouldAutoTrigger(this._editor)) {\n                return;\n            }\n            if (!this._editor.hasModel()) {\n                return;\n            }\n            const model = this._editor.getModel();\n            const pos = this._editor.getPosition();\n            // validate enabled now\n            const quickSuggestions = this._editor.getOption(79 /* quickSuggestions */);\n            if (quickSuggestions === false) {\n                return;\n            }\n            else if (quickSuggestions === true) {\n                // all good\n            }\n            else {\n                // Check the type of the token that triggered this\n                model.tokenizeIfCheap(pos.lineNumber);\n                const lineTokens = model.getLineTokens(pos.lineNumber);\n                const tokenType = lineTokens.getStandardTokenType(lineTokens.findTokenIndexAtOffset(Math.max(pos.column - 1 - 1, 0)));\n                const inValidScope = quickSuggestions.other && tokenType === 0 /* Other */\n                    || quickSuggestions.comments && tokenType === 1 /* Comment */\n                    || quickSuggestions.strings && tokenType === 2 /* String */;\n                if (!inValidScope) {\n                    return;\n                }\n            }\n            if (!canShowQuickSuggest(this._editor, this._contextKeyService, this._configurationService)) {\n                // do not trigger quick suggestions if inline suggestions are shown\n                return;\n            }\n            if (!CompletionProviderRegistry.has(model)) {\n                return;\n            }\n            // we made it till here -> trigger now\n            this.trigger({ auto: true, shy: false });\n        }, this._quickSuggestDelay);\n    }\n    _refilterCompletionItems() {\n        // Re-filter suggestions. This MUST run async because filtering/scoring\n        // uses the model content AND the cursor position. The latter is NOT\n        // updated when the document has changed (the event which drives this method)\n        // and therefore a little pause (next mirco task) is needed. See:\n        // https://stackoverflow.com/questions/25915634/difference-between-microtask-and-macrotask-within-an-event-loop-context#25933985\n        Promise.resolve().then(() => {\n            if (this._state === 0 /* Idle */) {\n                return;\n            }\n            if (!this._editor.hasModel()) {\n                return;\n            }\n            const model = this._editor.getModel();\n            const position = this._editor.getPosition();\n            const ctx = new LineContext(model, position, this._state === 2 /* Auto */, false);\n            this._onNewContext(ctx);\n        });\n    }\n    trigger(context, retrigger = false, onlyFrom, existing) {\n        var _a;\n        if (!this._editor.hasModel()) {\n            return;\n        }\n        const model = this._editor.getModel();\n        const auto = context.auto;\n        const ctx = new LineContext(model, this._editor.getPosition(), auto, context.shy);\n        // Cancel previous requests, change state & update UI\n        this.cancel(retrigger);\n        this._state = auto ? 2 /* Auto */ : 1 /* Manual */;\n        this._onDidTrigger.fire({ auto, shy: context.shy, position: this._editor.getPosition() });\n        // Capture context when request was sent\n        this._context = ctx;\n        // Build context for request\n        let suggestCtx = { triggerKind: (_a = context.triggerKind) !== null && _a !== void 0 ? _a : 0 /* Invoke */ };\n        if (context.triggerCharacter) {\n            suggestCtx = {\n                triggerKind: 1 /* TriggerCharacter */,\n                triggerCharacter: context.triggerCharacter\n            };\n        }\n        this._requestToken = new CancellationTokenSource();\n        // kind filter and snippet sort rules\n        const snippetSuggestions = this._editor.getOption(101 /* snippetSuggestions */);\n        let snippetSortOrder = 1 /* Inline */;\n        switch (snippetSuggestions) {\n            case 'top':\n                snippetSortOrder = 0 /* Top */;\n                break;\n            // \t↓ that's the default anyways...\n            // case 'inline':\n            // \tsnippetSortOrder = SnippetSortOrder.Inline;\n            // \tbreak;\n            case 'bottom':\n                snippetSortOrder = 2 /* Bottom */;\n                break;\n        }\n        const { itemKind: itemKindFilter, showDeprecated } = SuggestModel._createSuggestFilter(this._editor);\n        const wordDistance = WordDistance.create(this._editorWorkerService, this._editor);\n        const completions = provideSuggestionItems(model, this._editor.getPosition(), new CompletionOptions(snippetSortOrder, itemKindFilter, onlyFrom, showDeprecated), suggestCtx, this._requestToken.token);\n        Promise.all([completions, wordDistance]).then(([completions, wordDistance]) => __awaiter(this, void 0, void 0, function* () {\n            var _b;\n            (_b = this._requestToken) === null || _b === void 0 ? void 0 : _b.dispose();\n            if (!this._editor.hasModel()) {\n                return;\n            }\n            let clipboardText = existing === null || existing === void 0 ? void 0 : existing.clipboardText;\n            if (!clipboardText && completions.needsClipboard) {\n                clipboardText = yield this._clipboardService.readText();\n            }\n            if (this._state === 0 /* Idle */) {\n                return;\n            }\n            const model = this._editor.getModel();\n            let items = completions.items;\n            if (existing) {\n                const cmpFn = getSuggestionComparator(snippetSortOrder);\n                items = items.concat(existing.items).sort(cmpFn);\n            }\n            const ctx = new LineContext(model, this._editor.getPosition(), auto, context.shy);\n            this._completionModel = new CompletionModel(items, this._context.column, {\n                leadingLineContent: ctx.leadingLineContent,\n                characterCountDelta: ctx.column - this._context.column\n            }, wordDistance, this._editor.getOption(106 /* suggest */), this._editor.getOption(101 /* snippetSuggestions */), clipboardText);\n            // store containers so that they can be disposed later\n            this._completionDisposables.add(completions.disposable);\n            this._onNewContext(ctx);\n            // finally report telemetry about durations\n            this._reportDurationsTelemetry(completions.durations);\n        })).catch(onUnexpectedError);\n    }\n    _reportDurationsTelemetry(durations) {\n        if (this._telemetryGate++ % 230 !== 0) {\n            return;\n        }\n        setTimeout(() => {\n            this._telemetryService.publicLog2('suggest.durations.json', { data: JSON.stringify(durations) });\n            this._logService.debug('suggest.durations.json', durations);\n        });\n    }\n    static _createSuggestFilter(editor) {\n        // kind filter and snippet sort rules\n        const result = new Set();\n        // snippet setting\n        const snippetSuggestions = editor.getOption(101 /* snippetSuggestions */);\n        if (snippetSuggestions === 'none') {\n            result.add(27 /* Snippet */);\n        }\n        // type setting\n        const suggestOptions = editor.getOption(106 /* suggest */);\n        if (!suggestOptions.showMethods) {\n            result.add(0 /* Method */);\n        }\n        if (!suggestOptions.showFunctions) {\n            result.add(1 /* Function */);\n        }\n        if (!suggestOptions.showConstructors) {\n            result.add(2 /* Constructor */);\n        }\n        if (!suggestOptions.showFields) {\n            result.add(3 /* Field */);\n        }\n        if (!suggestOptions.showVariables) {\n            result.add(4 /* Variable */);\n        }\n        if (!suggestOptions.showClasses) {\n            result.add(5 /* Class */);\n        }\n        if (!suggestOptions.showStructs) {\n            result.add(6 /* Struct */);\n        }\n        if (!suggestOptions.showInterfaces) {\n            result.add(7 /* Interface */);\n        }\n        if (!suggestOptions.showModules) {\n            result.add(8 /* Module */);\n        }\n        if (!suggestOptions.showProperties) {\n            result.add(9 /* Property */);\n        }\n        if (!suggestOptions.showEvents) {\n            result.add(10 /* Event */);\n        }\n        if (!suggestOptions.showOperators) {\n            result.add(11 /* Operator */);\n        }\n        if (!suggestOptions.showUnits) {\n            result.add(12 /* Unit */);\n        }\n        if (!suggestOptions.showValues) {\n            result.add(13 /* Value */);\n        }\n        if (!suggestOptions.showConstants) {\n            result.add(14 /* Constant */);\n        }\n        if (!suggestOptions.showEnums) {\n            result.add(15 /* Enum */);\n        }\n        if (!suggestOptions.showEnumMembers) {\n            result.add(16 /* EnumMember */);\n        }\n        if (!suggestOptions.showKeywords) {\n            result.add(17 /* Keyword */);\n        }\n        if (!suggestOptions.showWords) {\n            result.add(18 /* Text */);\n        }\n        if (!suggestOptions.showColors) {\n            result.add(19 /* Color */);\n        }\n        if (!suggestOptions.showFiles) {\n            result.add(20 /* File */);\n        }\n        if (!suggestOptions.showReferences) {\n            result.add(21 /* Reference */);\n        }\n        if (!suggestOptions.showColors) {\n            result.add(22 /* Customcolor */);\n        }\n        if (!suggestOptions.showFolders) {\n            result.add(23 /* Folder */);\n        }\n        if (!suggestOptions.showTypeParameters) {\n            result.add(24 /* TypeParameter */);\n        }\n        if (!suggestOptions.showSnippets) {\n            result.add(27 /* Snippet */);\n        }\n        if (!suggestOptions.showUsers) {\n            result.add(25 /* User */);\n        }\n        if (!suggestOptions.showIssues) {\n            result.add(26 /* Issue */);\n        }\n        return { itemKind: result, showDeprecated: suggestOptions.showDeprecated };\n    }\n    _onNewContext(ctx) {\n        if (!this._context) {\n            // happens when 24x7 IntelliSense is enabled and still in its delay\n            return;\n        }\n        if (ctx.lineNumber !== this._context.lineNumber) {\n            // e.g. happens when pressing Enter while IntelliSense is computed\n            this.cancel();\n            return;\n        }\n        if (getLeadingWhitespace(ctx.leadingLineContent) !== getLeadingWhitespace(this._context.leadingLineContent)) {\n            // cancel IntelliSense when line start changes\n            // happens when the current word gets outdented\n            this.cancel();\n            return;\n        }\n        if (ctx.column < this._context.column) {\n            // typed -> moved cursor LEFT -> retrigger if still on a word\n            if (ctx.leadingWord.word) {\n                this.trigger({ auto: this._context.auto, shy: false }, true);\n            }\n            else {\n                this.cancel();\n            }\n            return;\n        }\n        if (!this._completionModel) {\n            // happens when IntelliSense is not yet computed\n            return;\n        }\n        if (ctx.leadingWord.word.length !== 0 && ctx.leadingWord.startColumn > this._context.leadingWord.startColumn) {\n            // started a new word while IntelliSense shows -> retrigger\n            // Select those providers have not contributed to this completion model and re-trigger completions for\n            // them. Also adopt the existing items and merge them into the new completion model\n            const inactiveProvider = new Set(CompletionProviderRegistry.all(this._editor.getModel()));\n            for (let provider of this._completionModel.allProvider) {\n                inactiveProvider.delete(provider);\n            }\n            const items = this._completionModel.adopt(new Set());\n            this.trigger({ auto: this._context.auto, shy: false }, true, inactiveProvider, { items, clipboardText: this._completionModel.clipboardText });\n            return;\n        }\n        if (ctx.column > this._context.column && this._completionModel.incomplete.size > 0 && ctx.leadingWord.word.length !== 0) {\n            // typed -> moved cursor RIGHT & incomple model & still on a word -> retrigger\n            const { incomplete } = this._completionModel;\n            const items = this._completionModel.adopt(incomplete);\n            this.trigger({ auto: this._state === 2 /* Auto */, shy: false, triggerKind: 2 /* TriggerForIncompleteCompletions */ }, true, incomplete, { items, clipboardText: this._completionModel.clipboardText });\n        }\n        else {\n            // typed -> moved cursor RIGHT -> update UI\n            let oldLineContext = this._completionModel.lineContext;\n            let isFrozen = false;\n            this._completionModel.lineContext = {\n                leadingLineContent: ctx.leadingLineContent,\n                characterCountDelta: ctx.column - this._context.column\n            };\n            if (this._completionModel.items.length === 0) {\n                if (LineContext.shouldAutoTrigger(this._editor) && this._context.leadingWord.endColumn < ctx.leadingWord.startColumn) {\n                    // retrigger when heading into a new word\n                    this.trigger({ auto: this._context.auto, shy: false }, true);\n                    return;\n                }\n                if (!this._context.auto) {\n                    // freeze when IntelliSense was manually requested\n                    this._completionModel.lineContext = oldLineContext;\n                    isFrozen = this._completionModel.items.length > 0;\n                    if (isFrozen && ctx.leadingWord.word.length === 0) {\n                        // there were results before but now there aren't\n                        // and also we are not on a word anymore -> cancel\n                        this.cancel();\n                        return;\n                    }\n                }\n                else {\n                    // nothing left\n                    this.cancel();\n                    return;\n                }\n            }\n            this._onDidSuggest.fire({\n                completionModel: this._completionModel,\n                auto: this._context.auto,\n                shy: this._context.shy,\n                isFrozen,\n            });\n        }\n    }\n};\nSuggestModel = __decorate([\n    __param(1, IEditorWorkerService),\n    __param(2, IClipboardService),\n    __param(3, ITelemetryService),\n    __param(4, ILogService),\n    __param(5, IContextKeyService),\n    __param(6, IConfigurationService)\n], SuggestModel);\nexport { SuggestModel };\n"]},"metadata":{},"sourceType":"module"}