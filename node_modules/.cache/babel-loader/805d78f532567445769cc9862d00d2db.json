{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { $, append } from '../../dom.js';\nimport { BaseActionViewItem } from '../actionbar/actionViewItems.js';\nimport { DropdownMenu } from './dropdown.js';\nimport { Emitter } from '../../../common/event.js';\nimport './dropdown.css';\nexport class DropdownMenuActionViewItem extends BaseActionViewItem {\n  constructor(action, menuActionsOrProvider, contextMenuProvider, options = Object.create(null)) {\n    super(null, action, options);\n    this.actionItem = null;\n    this._onDidChangeVisibility = this._register(new Emitter());\n    this.menuActionsOrProvider = menuActionsOrProvider;\n    this.contextMenuProvider = contextMenuProvider;\n    this.options = options;\n\n    if (this.options.actionRunner) {\n      this.actionRunner = this.options.actionRunner;\n    }\n  }\n\n  render(container) {\n    this.actionItem = container;\n\n    const labelRenderer = el => {\n      this.element = append(el, $('a.action-label'));\n      let classNames = [];\n\n      if (typeof this.options.classNames === 'string') {\n        classNames = this.options.classNames.split(/\\s+/g).filter(s => !!s);\n      } else if (this.options.classNames) {\n        classNames = this.options.classNames;\n      } // todo@aeschli: remove codicon, should come through `this.options.classNames`\n\n\n      if (!classNames.find(c => c === 'icon')) {\n        classNames.push('codicon');\n      }\n\n      this.element.classList.add(...classNames);\n      this.element.setAttribute('role', 'button');\n      this.element.setAttribute('aria-haspopup', 'true');\n      this.element.setAttribute('aria-expanded', 'false');\n      this.element.title = this._action.label || '';\n      return null;\n    };\n\n    const isActionsArray = Array.isArray(this.menuActionsOrProvider);\n    const options = {\n      contextMenuProvider: this.contextMenuProvider,\n      labelRenderer: labelRenderer,\n      menuAsChild: this.options.menuAsChild,\n      actions: isActionsArray ? this.menuActionsOrProvider : undefined,\n      actionProvider: isActionsArray ? undefined : this.menuActionsOrProvider\n    };\n    this.dropdownMenu = this._register(new DropdownMenu(container, options));\n\n    this._register(this.dropdownMenu.onDidChangeVisibility(visible => {\n      var _a;\n\n      (_a = this.element) === null || _a === void 0 ? void 0 : _a.setAttribute('aria-expanded', `${visible}`);\n\n      this._onDidChangeVisibility.fire(visible);\n    }));\n\n    this.dropdownMenu.menuOptions = {\n      actionViewItemProvider: this.options.actionViewItemProvider,\n      actionRunner: this.actionRunner,\n      getKeyBinding: this.options.keybindingProvider,\n      context: this._context\n    };\n\n    if (this.options.anchorAlignmentProvider) {\n      const that = this;\n      this.dropdownMenu.menuOptions = Object.assign(Object.assign({}, this.dropdownMenu.menuOptions), {\n        get anchorAlignment() {\n          return that.options.anchorAlignmentProvider();\n        }\n\n      });\n    }\n\n    this.updateEnabled();\n  }\n\n  setActionContext(newContext) {\n    super.setActionContext(newContext);\n\n    if (this.dropdownMenu) {\n      if (this.dropdownMenu.menuOptions) {\n        this.dropdownMenu.menuOptions.context = newContext;\n      } else {\n        this.dropdownMenu.menuOptions = {\n          context: newContext\n        };\n      }\n    }\n  }\n\n  updateEnabled() {\n    var _a, _b;\n\n    const disabled = !this.getAction().enabled;\n    (_a = this.actionItem) === null || _a === void 0 ? void 0 : _a.classList.toggle('disabled', disabled);\n    (_b = this.element) === null || _b === void 0 ? void 0 : _b.classList.toggle('disabled', disabled);\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/base/browser/ui/dropdown/dropdownActionViewItem.js"],"names":["$","append","BaseActionViewItem","DropdownMenu","Emitter","DropdownMenuActionViewItem","constructor","action","menuActionsOrProvider","contextMenuProvider","options","Object","create","actionItem","_onDidChangeVisibility","_register","actionRunner","render","container","labelRenderer","el","element","classNames","split","filter","s","find","c","push","classList","add","setAttribute","title","_action","label","isActionsArray","Array","isArray","menuAsChild","actions","undefined","actionProvider","dropdownMenu","onDidChangeVisibility","visible","_a","fire","menuOptions","actionViewItemProvider","getKeyBinding","keybindingProvider","context","_context","anchorAlignmentProvider","that","assign","anchorAlignment","updateEnabled","setActionContext","newContext","_b","disabled","getAction","enabled","toggle"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { $, append } from '../../dom.js';\nimport { BaseActionViewItem } from '../actionbar/actionViewItems.js';\nimport { DropdownMenu } from './dropdown.js';\nimport { Emitter } from '../../../common/event.js';\nimport './dropdown.css';\nexport class DropdownMenuActionViewItem extends BaseActionViewItem {\n    constructor(action, menuActionsOrProvider, contextMenuProvider, options = Object.create(null)) {\n        super(null, action, options);\n        this.actionItem = null;\n        this._onDidChangeVisibility = this._register(new Emitter());\n        this.menuActionsOrProvider = menuActionsOrProvider;\n        this.contextMenuProvider = contextMenuProvider;\n        this.options = options;\n        if (this.options.actionRunner) {\n            this.actionRunner = this.options.actionRunner;\n        }\n    }\n    render(container) {\n        this.actionItem = container;\n        const labelRenderer = (el) => {\n            this.element = append(el, $('a.action-label'));\n            let classNames = [];\n            if (typeof this.options.classNames === 'string') {\n                classNames = this.options.classNames.split(/\\s+/g).filter(s => !!s);\n            }\n            else if (this.options.classNames) {\n                classNames = this.options.classNames;\n            }\n            // todo@aeschli: remove codicon, should come through `this.options.classNames`\n            if (!classNames.find(c => c === 'icon')) {\n                classNames.push('codicon');\n            }\n            this.element.classList.add(...classNames);\n            this.element.setAttribute('role', 'button');\n            this.element.setAttribute('aria-haspopup', 'true');\n            this.element.setAttribute('aria-expanded', 'false');\n            this.element.title = this._action.label || '';\n            return null;\n        };\n        const isActionsArray = Array.isArray(this.menuActionsOrProvider);\n        const options = {\n            contextMenuProvider: this.contextMenuProvider,\n            labelRenderer: labelRenderer,\n            menuAsChild: this.options.menuAsChild,\n            actions: isActionsArray ? this.menuActionsOrProvider : undefined,\n            actionProvider: isActionsArray ? undefined : this.menuActionsOrProvider\n        };\n        this.dropdownMenu = this._register(new DropdownMenu(container, options));\n        this._register(this.dropdownMenu.onDidChangeVisibility(visible => {\n            var _a;\n            (_a = this.element) === null || _a === void 0 ? void 0 : _a.setAttribute('aria-expanded', `${visible}`);\n            this._onDidChangeVisibility.fire(visible);\n        }));\n        this.dropdownMenu.menuOptions = {\n            actionViewItemProvider: this.options.actionViewItemProvider,\n            actionRunner: this.actionRunner,\n            getKeyBinding: this.options.keybindingProvider,\n            context: this._context\n        };\n        if (this.options.anchorAlignmentProvider) {\n            const that = this;\n            this.dropdownMenu.menuOptions = Object.assign(Object.assign({}, this.dropdownMenu.menuOptions), { get anchorAlignment() {\n                    return that.options.anchorAlignmentProvider();\n                } });\n        }\n        this.updateEnabled();\n    }\n    setActionContext(newContext) {\n        super.setActionContext(newContext);\n        if (this.dropdownMenu) {\n            if (this.dropdownMenu.menuOptions) {\n                this.dropdownMenu.menuOptions.context = newContext;\n            }\n            else {\n                this.dropdownMenu.menuOptions = { context: newContext };\n            }\n        }\n    }\n    updateEnabled() {\n        var _a, _b;\n        const disabled = !this.getAction().enabled;\n        (_a = this.actionItem) === null || _a === void 0 ? void 0 : _a.classList.toggle('disabled', disabled);\n        (_b = this.element) === null || _b === void 0 ? void 0 : _b.classList.toggle('disabled', disabled);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}