{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './decorations.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { Range } from '../../../common/core/range.js';\nimport { HorizontalRange } from '../../view/renderingContext.js';\nexport class DecorationsOverlay extends DynamicViewOverlay {\n  constructor(context) {\n    super();\n    this._context = context;\n    const options = this._context.configuration.options;\n    this._lineHeight = options.get(59\n    /* lineHeight */\n    );\n    this._typicalHalfwidthCharacterWidth = options.get(44\n    /* fontInfo */\n    ).typicalHalfwidthCharacterWidth;\n    this._renderResult = null;\n\n    this._context.addEventHandler(this);\n  }\n\n  dispose() {\n    this._context.removeEventHandler(this);\n\n    this._renderResult = null;\n    super.dispose();\n  } // --- begin event handlers\n\n\n  onConfigurationChanged(e) {\n    const options = this._context.configuration.options;\n    this._lineHeight = options.get(59\n    /* lineHeight */\n    );\n    this._typicalHalfwidthCharacterWidth = options.get(44\n    /* fontInfo */\n    ).typicalHalfwidthCharacterWidth;\n    return true;\n  }\n\n  onDecorationsChanged(e) {\n    return true;\n  }\n\n  onFlushed(e) {\n    return true;\n  }\n\n  onLinesChanged(e) {\n    return true;\n  }\n\n  onLinesDeleted(e) {\n    return true;\n  }\n\n  onLinesInserted(e) {\n    return true;\n  }\n\n  onScrollChanged(e) {\n    return e.scrollTopChanged || e.scrollWidthChanged;\n  }\n\n  onZonesChanged(e) {\n    return true;\n  } // --- end event handlers\n\n\n  prepareRender(ctx) {\n    const _decorations = ctx.getDecorationsInViewport(); // Keep only decorations with `className`\n\n\n    let decorations = [];\n    let decorationsLen = 0;\n\n    for (let i = 0, len = _decorations.length; i < len; i++) {\n      const d = _decorations[i];\n\n      if (d.options.className) {\n        decorations[decorationsLen++] = d;\n      }\n    } // Sort decorations for consistent render output\n\n\n    decorations = decorations.sort((a, b) => {\n      if (a.options.zIndex < b.options.zIndex) {\n        return -1;\n      }\n\n      if (a.options.zIndex > b.options.zIndex) {\n        return 1;\n      }\n\n      const aClassName = a.options.className;\n      const bClassName = b.options.className;\n\n      if (aClassName < bClassName) {\n        return -1;\n      }\n\n      if (aClassName > bClassName) {\n        return 1;\n      }\n\n      return Range.compareRangesUsingStarts(a.range, b.range);\n    });\n    const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n    const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n    const output = [];\n\n    for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n      const lineIndex = lineNumber - visibleStartLineNumber;\n      output[lineIndex] = '';\n    } // Render first whole line decorations and then regular decorations\n\n\n    this._renderWholeLineDecorations(ctx, decorations, output);\n\n    this._renderNormalDecorations(ctx, decorations, output);\n\n    this._renderResult = output;\n  }\n\n  _renderWholeLineDecorations(ctx, decorations, output) {\n    const lineHeight = String(this._lineHeight);\n    const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n    const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n\n    for (let i = 0, lenI = decorations.length; i < lenI; i++) {\n      const d = decorations[i];\n\n      if (!d.options.isWholeLine) {\n        continue;\n      }\n\n      const decorationOutput = '<div class=\"cdr ' + d.options.className + '\" style=\"left:0;width:100%;height:' + lineHeight + 'px;\"></div>';\n      const startLineNumber = Math.max(d.range.startLineNumber, visibleStartLineNumber);\n      const endLineNumber = Math.min(d.range.endLineNumber, visibleEndLineNumber);\n\n      for (let j = startLineNumber; j <= endLineNumber; j++) {\n        const lineIndex = j - visibleStartLineNumber;\n        output[lineIndex] += decorationOutput;\n      }\n    }\n  }\n\n  _renderNormalDecorations(ctx, decorations, output) {\n    const lineHeight = String(this._lineHeight);\n    const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n    let prevClassName = null;\n    let prevShowIfCollapsed = false;\n    let prevRange = null;\n\n    for (let i = 0, lenI = decorations.length; i < lenI; i++) {\n      const d = decorations[i];\n\n      if (d.options.isWholeLine) {\n        continue;\n      }\n\n      const className = d.options.className;\n      const showIfCollapsed = Boolean(d.options.showIfCollapsed);\n      let range = d.range;\n\n      if (showIfCollapsed && range.endColumn === 1 && range.endLineNumber !== range.startLineNumber) {\n        range = new Range(range.startLineNumber, range.startColumn, range.endLineNumber - 1, this._context.model.getLineMaxColumn(range.endLineNumber - 1));\n      }\n\n      if (prevClassName === className && prevShowIfCollapsed === showIfCollapsed && Range.areIntersectingOrTouching(prevRange, range)) {\n        // merge into previous decoration\n        prevRange = Range.plusRange(prevRange, range);\n        continue;\n      } // flush previous decoration\n\n\n      if (prevClassName !== null) {\n        this._renderNormalDecoration(ctx, prevRange, prevClassName, prevShowIfCollapsed, lineHeight, visibleStartLineNumber, output);\n      }\n\n      prevClassName = className;\n      prevShowIfCollapsed = showIfCollapsed;\n      prevRange = range;\n    }\n\n    if (prevClassName !== null) {\n      this._renderNormalDecoration(ctx, prevRange, prevClassName, prevShowIfCollapsed, lineHeight, visibleStartLineNumber, output);\n    }\n  }\n\n  _renderNormalDecoration(ctx, range, className, showIfCollapsed, lineHeight, visibleStartLineNumber, output) {\n    const linesVisibleRanges = ctx.linesVisibleRangesForRange(range,\n    /*TODO@Alex*/\n    className === 'findMatch');\n\n    if (!linesVisibleRanges) {\n      return;\n    }\n\n    for (let j = 0, lenJ = linesVisibleRanges.length; j < lenJ; j++) {\n      const lineVisibleRanges = linesVisibleRanges[j];\n\n      if (lineVisibleRanges.outsideRenderedLine) {\n        continue;\n      }\n\n      const lineIndex = lineVisibleRanges.lineNumber - visibleStartLineNumber;\n\n      if (showIfCollapsed && lineVisibleRanges.ranges.length === 1) {\n        const singleVisibleRange = lineVisibleRanges.ranges[0];\n\n        if (singleVisibleRange.width < this._typicalHalfwidthCharacterWidth) {\n          // collapsed/very small range case => make the decoration visible by expanding its width\n          // expand its size on both sides (both to the left and to the right, keeping it centered)\n          const center = Math.round(singleVisibleRange.left + singleVisibleRange.width / 2);\n          const left = Math.max(0, Math.round(center - this._typicalHalfwidthCharacterWidth / 2));\n          lineVisibleRanges.ranges[0] = new HorizontalRange(left, this._typicalHalfwidthCharacterWidth);\n        }\n      }\n\n      for (let k = 0, lenK = lineVisibleRanges.ranges.length; k < lenK; k++) {\n        const visibleRange = lineVisibleRanges.ranges[k];\n        const decorationOutput = '<div class=\"cdr ' + className + '\" style=\"left:' + String(visibleRange.left) + 'px;width:' + String(visibleRange.width) + 'px;height:' + lineHeight + 'px;\"></div>';\n        output[lineIndex] += decorationOutput;\n      }\n    }\n  }\n\n  render(startLineNumber, lineNumber) {\n    if (!this._renderResult) {\n      return '';\n    }\n\n    const lineIndex = lineNumber - startLineNumber;\n\n    if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n      return '';\n    }\n\n    return this._renderResult[lineIndex];\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/decorations/decorations.js"],"names":["DynamicViewOverlay","Range","HorizontalRange","DecorationsOverlay","constructor","context","_context","options","configuration","_lineHeight","get","_typicalHalfwidthCharacterWidth","typicalHalfwidthCharacterWidth","_renderResult","addEventHandler","dispose","removeEventHandler","onConfigurationChanged","e","onDecorationsChanged","onFlushed","onLinesChanged","onLinesDeleted","onLinesInserted","onScrollChanged","scrollTopChanged","scrollWidthChanged","onZonesChanged","prepareRender","ctx","_decorations","getDecorationsInViewport","decorations","decorationsLen","i","len","length","d","className","sort","a","b","zIndex","aClassName","bClassName","compareRangesUsingStarts","range","visibleStartLineNumber","visibleRange","startLineNumber","visibleEndLineNumber","endLineNumber","output","lineNumber","lineIndex","_renderWholeLineDecorations","_renderNormalDecorations","lineHeight","String","lenI","isWholeLine","decorationOutput","Math","max","min","j","prevClassName","prevShowIfCollapsed","prevRange","showIfCollapsed","Boolean","endColumn","startColumn","model","getLineMaxColumn","areIntersectingOrTouching","plusRange","_renderNormalDecoration","linesVisibleRanges","linesVisibleRangesForRange","lenJ","lineVisibleRanges","outsideRenderedLine","ranges","singleVisibleRange","width","center","round","left","k","lenK","render"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './decorations.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { Range } from '../../../common/core/range.js';\nimport { HorizontalRange } from '../../view/renderingContext.js';\nexport class DecorationsOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        const options = this._context.configuration.options;\n        this._lineHeight = options.get(59 /* lineHeight */);\n        this._typicalHalfwidthCharacterWidth = options.get(44 /* fontInfo */).typicalHalfwidthCharacterWidth;\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        this._lineHeight = options.get(59 /* lineHeight */);\n        this._typicalHalfwidthCharacterWidth = options.get(44 /* fontInfo */).typicalHalfwidthCharacterWidth;\n        return true;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged || e.scrollWidthChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        const _decorations = ctx.getDecorationsInViewport();\n        // Keep only decorations with `className`\n        let decorations = [];\n        let decorationsLen = 0;\n        for (let i = 0, len = _decorations.length; i < len; i++) {\n            const d = _decorations[i];\n            if (d.options.className) {\n                decorations[decorationsLen++] = d;\n            }\n        }\n        // Sort decorations for consistent render output\n        decorations = decorations.sort((a, b) => {\n            if (a.options.zIndex < b.options.zIndex) {\n                return -1;\n            }\n            if (a.options.zIndex > b.options.zIndex) {\n                return 1;\n            }\n            const aClassName = a.options.className;\n            const bClassName = b.options.className;\n            if (aClassName < bClassName) {\n                return -1;\n            }\n            if (aClassName > bClassName) {\n                return 1;\n            }\n            return Range.compareRangesUsingStarts(a.range, b.range);\n        });\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            output[lineIndex] = '';\n        }\n        // Render first whole line decorations and then regular decorations\n        this._renderWholeLineDecorations(ctx, decorations, output);\n        this._renderNormalDecorations(ctx, decorations, output);\n        this._renderResult = output;\n    }\n    _renderWholeLineDecorations(ctx, decorations, output) {\n        const lineHeight = String(this._lineHeight);\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        for (let i = 0, lenI = decorations.length; i < lenI; i++) {\n            const d = decorations[i];\n            if (!d.options.isWholeLine) {\n                continue;\n            }\n            const decorationOutput = ('<div class=\"cdr '\n                + d.options.className\n                + '\" style=\"left:0;width:100%;height:'\n                + lineHeight\n                + 'px;\"></div>');\n            const startLineNumber = Math.max(d.range.startLineNumber, visibleStartLineNumber);\n            const endLineNumber = Math.min(d.range.endLineNumber, visibleEndLineNumber);\n            for (let j = startLineNumber; j <= endLineNumber; j++) {\n                const lineIndex = j - visibleStartLineNumber;\n                output[lineIndex] += decorationOutput;\n            }\n        }\n    }\n    _renderNormalDecorations(ctx, decorations, output) {\n        const lineHeight = String(this._lineHeight);\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        let prevClassName = null;\n        let prevShowIfCollapsed = false;\n        let prevRange = null;\n        for (let i = 0, lenI = decorations.length; i < lenI; i++) {\n            const d = decorations[i];\n            if (d.options.isWholeLine) {\n                continue;\n            }\n            const className = d.options.className;\n            const showIfCollapsed = Boolean(d.options.showIfCollapsed);\n            let range = d.range;\n            if (showIfCollapsed && range.endColumn === 1 && range.endLineNumber !== range.startLineNumber) {\n                range = new Range(range.startLineNumber, range.startColumn, range.endLineNumber - 1, this._context.model.getLineMaxColumn(range.endLineNumber - 1));\n            }\n            if (prevClassName === className && prevShowIfCollapsed === showIfCollapsed && Range.areIntersectingOrTouching(prevRange, range)) {\n                // merge into previous decoration\n                prevRange = Range.plusRange(prevRange, range);\n                continue;\n            }\n            // flush previous decoration\n            if (prevClassName !== null) {\n                this._renderNormalDecoration(ctx, prevRange, prevClassName, prevShowIfCollapsed, lineHeight, visibleStartLineNumber, output);\n            }\n            prevClassName = className;\n            prevShowIfCollapsed = showIfCollapsed;\n            prevRange = range;\n        }\n        if (prevClassName !== null) {\n            this._renderNormalDecoration(ctx, prevRange, prevClassName, prevShowIfCollapsed, lineHeight, visibleStartLineNumber, output);\n        }\n    }\n    _renderNormalDecoration(ctx, range, className, showIfCollapsed, lineHeight, visibleStartLineNumber, output) {\n        const linesVisibleRanges = ctx.linesVisibleRangesForRange(range, /*TODO@Alex*/ className === 'findMatch');\n        if (!linesVisibleRanges) {\n            return;\n        }\n        for (let j = 0, lenJ = linesVisibleRanges.length; j < lenJ; j++) {\n            const lineVisibleRanges = linesVisibleRanges[j];\n            if (lineVisibleRanges.outsideRenderedLine) {\n                continue;\n            }\n            const lineIndex = lineVisibleRanges.lineNumber - visibleStartLineNumber;\n            if (showIfCollapsed && lineVisibleRanges.ranges.length === 1) {\n                const singleVisibleRange = lineVisibleRanges.ranges[0];\n                if (singleVisibleRange.width < this._typicalHalfwidthCharacterWidth) {\n                    // collapsed/very small range case => make the decoration visible by expanding its width\n                    // expand its size on both sides (both to the left and to the right, keeping it centered)\n                    const center = Math.round(singleVisibleRange.left + singleVisibleRange.width / 2);\n                    const left = Math.max(0, Math.round(center - this._typicalHalfwidthCharacterWidth / 2));\n                    lineVisibleRanges.ranges[0] = new HorizontalRange(left, this._typicalHalfwidthCharacterWidth);\n                }\n            }\n            for (let k = 0, lenK = lineVisibleRanges.ranges.length; k < lenK; k++) {\n                const visibleRange = lineVisibleRanges.ranges[k];\n                const decorationOutput = ('<div class=\"cdr '\n                    + className\n                    + '\" style=\"left:'\n                    + String(visibleRange.left)\n                    + 'px;width:'\n                    + String(visibleRange.width)\n                    + 'px;height:'\n                    + lineHeight\n                    + 'px;\"></div>');\n                output[lineIndex] += decorationOutput;\n            }\n        }\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\n"]},"metadata":{},"sourceType":"module"}