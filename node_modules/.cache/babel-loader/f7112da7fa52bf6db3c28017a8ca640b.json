{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from './dom.js';\nimport { IframeUtils } from './iframe.js';\nimport { StandardMouseEvent } from './mouseEvent.js';\nimport { DisposableStore } from '../common/lifecycle.js';\nimport { isIOS } from '../common/platform.js';\nexport function standardMouseMoveMerger(lastEvent, currentEvent) {\n  let ev = new StandardMouseEvent(currentEvent);\n  ev.preventDefault();\n  return {\n    leftButton: ev.leftButton,\n    buttons: ev.buttons,\n    posx: ev.posx,\n    posy: ev.posy\n  };\n}\nexport class GlobalMouseMoveMonitor {\n  constructor() {\n    this._hooks = new DisposableStore();\n    this._mouseMoveEventMerger = null;\n    this._mouseMoveCallback = null;\n    this._onStopCallback = null;\n  }\n\n  dispose() {\n    this.stopMonitoring(false);\n\n    this._hooks.dispose();\n  }\n\n  stopMonitoring(invokeStopCallback, browserEvent) {\n    if (!this.isMonitoring()) {\n      // Not monitoring\n      return;\n    } // Unhook\n\n\n    this._hooks.clear();\n\n    this._mouseMoveEventMerger = null;\n    this._mouseMoveCallback = null;\n    const onStopCallback = this._onStopCallback;\n    this._onStopCallback = null;\n\n    if (invokeStopCallback && onStopCallback) {\n      onStopCallback(browserEvent);\n    }\n  }\n\n  isMonitoring() {\n    return !!this._mouseMoveEventMerger;\n  }\n\n  startMonitoring(initialElement, initialButtons, mouseMoveEventMerger, mouseMoveCallback, onStopCallback) {\n    if (this.isMonitoring()) {\n      // I am already hooked\n      return;\n    }\n\n    this._mouseMoveEventMerger = mouseMoveEventMerger;\n    this._mouseMoveCallback = mouseMoveCallback;\n    this._onStopCallback = onStopCallback;\n    const windowChain = IframeUtils.getSameOriginWindowChain();\n    const mouseMove = isIOS ? 'pointermove' : 'mousemove'; // Safari sends wrong event, workaround for #122653\n\n    const mouseUp = 'mouseup';\n    const listenTo = windowChain.map(element => element.window.document);\n    const shadowRoot = dom.getShadowRoot(initialElement);\n\n    if (shadowRoot) {\n      listenTo.unshift(shadowRoot);\n    }\n\n    for (const element of listenTo) {\n      this._hooks.add(dom.addDisposableThrottledListener(element, mouseMove, data => {\n        if (data.buttons !== initialButtons) {\n          // Buttons state has changed in the meantime\n          this.stopMonitoring(true);\n          return;\n        }\n\n        this._mouseMoveCallback(data);\n      }, (lastEvent, currentEvent) => this._mouseMoveEventMerger(lastEvent, currentEvent)));\n\n      this._hooks.add(dom.addDisposableListener(element, mouseUp, e => this.stopMonitoring(true)));\n    }\n\n    if (IframeUtils.hasDifferentOriginAncestor()) {\n      let lastSameOriginAncestor = windowChain[windowChain.length - 1]; // We might miss a mouse up if it happens outside the iframe\n      // This one is for Chrome\n\n      this._hooks.add(dom.addDisposableListener(lastSameOriginAncestor.window.document, 'mouseout', browserEvent => {\n        let e = new StandardMouseEvent(browserEvent);\n\n        if (e.target.tagName.toLowerCase() === 'html') {\n          this.stopMonitoring(true);\n        }\n      })); // This one is for FF\n\n\n      this._hooks.add(dom.addDisposableListener(lastSameOriginAncestor.window.document, 'mouseover', browserEvent => {\n        let e = new StandardMouseEvent(browserEvent);\n\n        if (e.target.tagName.toLowerCase() === 'html') {\n          this.stopMonitoring(true);\n        }\n      })); // This one is for IE\n\n\n      this._hooks.add(dom.addDisposableListener(lastSameOriginAncestor.window.document.body, 'mouseleave', browserEvent => {\n        this.stopMonitoring(true);\n      }));\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/base/browser/globalMouseMoveMonitor.js"],"names":["dom","IframeUtils","StandardMouseEvent","DisposableStore","isIOS","standardMouseMoveMerger","lastEvent","currentEvent","ev","preventDefault","leftButton","buttons","posx","posy","GlobalMouseMoveMonitor","constructor","_hooks","_mouseMoveEventMerger","_mouseMoveCallback","_onStopCallback","dispose","stopMonitoring","invokeStopCallback","browserEvent","isMonitoring","clear","onStopCallback","startMonitoring","initialElement","initialButtons","mouseMoveEventMerger","mouseMoveCallback","windowChain","getSameOriginWindowChain","mouseMove","mouseUp","listenTo","map","element","window","document","shadowRoot","getShadowRoot","unshift","add","addDisposableThrottledListener","data","addDisposableListener","e","hasDifferentOriginAncestor","lastSameOriginAncestor","length","target","tagName","toLowerCase","body"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from './dom.js';\nimport { IframeUtils } from './iframe.js';\nimport { StandardMouseEvent } from './mouseEvent.js';\nimport { DisposableStore } from '../common/lifecycle.js';\nimport { isIOS } from '../common/platform.js';\nexport function standardMouseMoveMerger(lastEvent, currentEvent) {\n    let ev = new StandardMouseEvent(currentEvent);\n    ev.preventDefault();\n    return {\n        leftButton: ev.leftButton,\n        buttons: ev.buttons,\n        posx: ev.posx,\n        posy: ev.posy\n    };\n}\nexport class GlobalMouseMoveMonitor {\n    constructor() {\n        this._hooks = new DisposableStore();\n        this._mouseMoveEventMerger = null;\n        this._mouseMoveCallback = null;\n        this._onStopCallback = null;\n    }\n    dispose() {\n        this.stopMonitoring(false);\n        this._hooks.dispose();\n    }\n    stopMonitoring(invokeStopCallback, browserEvent) {\n        if (!this.isMonitoring()) {\n            // Not monitoring\n            return;\n        }\n        // Unhook\n        this._hooks.clear();\n        this._mouseMoveEventMerger = null;\n        this._mouseMoveCallback = null;\n        const onStopCallback = this._onStopCallback;\n        this._onStopCallback = null;\n        if (invokeStopCallback && onStopCallback) {\n            onStopCallback(browserEvent);\n        }\n    }\n    isMonitoring() {\n        return !!this._mouseMoveEventMerger;\n    }\n    startMonitoring(initialElement, initialButtons, mouseMoveEventMerger, mouseMoveCallback, onStopCallback) {\n        if (this.isMonitoring()) {\n            // I am already hooked\n            return;\n        }\n        this._mouseMoveEventMerger = mouseMoveEventMerger;\n        this._mouseMoveCallback = mouseMoveCallback;\n        this._onStopCallback = onStopCallback;\n        const windowChain = IframeUtils.getSameOriginWindowChain();\n        const mouseMove = isIOS ? 'pointermove' : 'mousemove'; // Safari sends wrong event, workaround for #122653\n        const mouseUp = 'mouseup';\n        const listenTo = windowChain.map(element => element.window.document);\n        const shadowRoot = dom.getShadowRoot(initialElement);\n        if (shadowRoot) {\n            listenTo.unshift(shadowRoot);\n        }\n        for (const element of listenTo) {\n            this._hooks.add(dom.addDisposableThrottledListener(element, mouseMove, (data) => {\n                if (data.buttons !== initialButtons) {\n                    // Buttons state has changed in the meantime\n                    this.stopMonitoring(true);\n                    return;\n                }\n                this._mouseMoveCallback(data);\n            }, (lastEvent, currentEvent) => this._mouseMoveEventMerger(lastEvent, currentEvent)));\n            this._hooks.add(dom.addDisposableListener(element, mouseUp, (e) => this.stopMonitoring(true)));\n        }\n        if (IframeUtils.hasDifferentOriginAncestor()) {\n            let lastSameOriginAncestor = windowChain[windowChain.length - 1];\n            // We might miss a mouse up if it happens outside the iframe\n            // This one is for Chrome\n            this._hooks.add(dom.addDisposableListener(lastSameOriginAncestor.window.document, 'mouseout', (browserEvent) => {\n                let e = new StandardMouseEvent(browserEvent);\n                if (e.target.tagName.toLowerCase() === 'html') {\n                    this.stopMonitoring(true);\n                }\n            }));\n            // This one is for FF\n            this._hooks.add(dom.addDisposableListener(lastSameOriginAncestor.window.document, 'mouseover', (browserEvent) => {\n                let e = new StandardMouseEvent(browserEvent);\n                if (e.target.tagName.toLowerCase() === 'html') {\n                    this.stopMonitoring(true);\n                }\n            }));\n            // This one is for IE\n            this._hooks.add(dom.addDisposableListener(lastSameOriginAncestor.window.document.body, 'mouseleave', (browserEvent) => {\n                this.stopMonitoring(true);\n            }));\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}