{"ast":null,"code":"module.exports = FieldPacket;\n\nfunction FieldPacket(options) {\n  options = options || {};\n  this.catalog = options.catalog;\n  this.db = options.db;\n  this.table = options.table;\n  this.orgTable = options.orgTable;\n  this.name = options.name;\n  this.orgName = options.orgName;\n  this.charsetNr = options.charsetNr;\n  this.length = options.length;\n  this.type = options.type;\n  this.flags = options.flags;\n  this.decimals = options.decimals;\n  this.default = options.default;\n  this.zeroFill = options.zeroFill;\n  this.protocol41 = options.protocol41;\n}\n\nFieldPacket.prototype.parse = function (parser) {\n  if (this.protocol41) {\n    this.catalog = parser.parseLengthCodedString();\n    this.db = parser.parseLengthCodedString();\n    this.table = parser.parseLengthCodedString();\n    this.orgTable = parser.parseLengthCodedString();\n    this.name = parser.parseLengthCodedString();\n    this.orgName = parser.parseLengthCodedString();\n\n    if (parser.parseLengthCodedNumber() !== 0x0c) {\n      var err = new TypeError('Received invalid field length');\n      err.code = 'PARSER_INVALID_FIELD_LENGTH';\n      throw err;\n    }\n\n    this.charsetNr = parser.parseUnsignedNumber(2);\n    this.length = parser.parseUnsignedNumber(4);\n    this.type = parser.parseUnsignedNumber(1);\n    this.flags = parser.parseUnsignedNumber(2);\n    this.decimals = parser.parseUnsignedNumber(1);\n    var filler = parser.parseBuffer(2);\n\n    if (filler[0] !== 0x0 || filler[1] !== 0x0) {\n      var err = new TypeError('Received invalid filler');\n      err.code = 'PARSER_INVALID_FILLER';\n      throw err;\n    } // parsed flags\n\n\n    this.zeroFill = this.flags & 0x0040 ? true : false;\n\n    if (parser.reachedPacketEnd()) {\n      return;\n    }\n\n    this.default = parser.parseLengthCodedString();\n  } else {\n    this.table = parser.parseLengthCodedString();\n    this.name = parser.parseLengthCodedString();\n    this.length = parser.parseUnsignedNumber(parser.parseUnsignedNumber(1));\n    this.type = parser.parseUnsignedNumber(parser.parseUnsignedNumber(1));\n  }\n};\n\nFieldPacket.prototype.write = function (writer) {\n  if (this.protocol41) {\n    writer.writeLengthCodedString(this.catalog);\n    writer.writeLengthCodedString(this.db);\n    writer.writeLengthCodedString(this.table);\n    writer.writeLengthCodedString(this.orgTable);\n    writer.writeLengthCodedString(this.name);\n    writer.writeLengthCodedString(this.orgName);\n    writer.writeLengthCodedNumber(0x0c);\n    writer.writeUnsignedNumber(2, this.charsetNr || 0);\n    writer.writeUnsignedNumber(4, this.length || 0);\n    writer.writeUnsignedNumber(1, this.type || 0);\n    writer.writeUnsignedNumber(2, this.flags || 0);\n    writer.writeUnsignedNumber(1, this.decimals || 0);\n    writer.writeFiller(2);\n\n    if (this.default !== undefined) {\n      writer.writeLengthCodedString(this.default);\n    }\n  } else {\n    writer.writeLengthCodedString(this.table);\n    writer.writeLengthCodedString(this.name);\n    writer.writeUnsignedNumber(1, 0x01);\n    writer.writeUnsignedNumber(1, this.length);\n    writer.writeUnsignedNumber(1, 0x01);\n    writer.writeUnsignedNumber(1, this.type);\n  }\n};","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/mysql/lib/protocol/packets/FieldPacket.js"],"names":["module","exports","FieldPacket","options","catalog","db","table","orgTable","name","orgName","charsetNr","length","type","flags","decimals","default","zeroFill","protocol41","prototype","parse","parser","parseLengthCodedString","parseLengthCodedNumber","err","TypeError","code","parseUnsignedNumber","filler","parseBuffer","reachedPacketEnd","write","writer","writeLengthCodedString","writeLengthCodedNumber","writeUnsignedNumber","writeFiller","undefined"],"mappings":"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","sourcesContent":["module.exports = FieldPacket;\nfunction FieldPacket(options) {\n  options = options || {};\n\n  this.catalog    = options.catalog;\n  this.db         = options.db;\n  this.table      = options.table;\n  this.orgTable   = options.orgTable;\n  this.name       = options.name;\n  this.orgName    = options.orgName;\n  this.charsetNr  = options.charsetNr;\n  this.length     = options.length;\n  this.type       = options.type;\n  this.flags      = options.flags;\n  this.decimals   = options.decimals;\n  this.default    = options.default;\n  this.zeroFill   = options.zeroFill;\n  this.protocol41 = options.protocol41;\n}\n\nFieldPacket.prototype.parse = function(parser) {\n  if (this.protocol41) {\n    this.catalog     = parser.parseLengthCodedString();\n    this.db          = parser.parseLengthCodedString();\n    this.table       = parser.parseLengthCodedString();\n    this.orgTable    = parser.parseLengthCodedString();\n    this.name        = parser.parseLengthCodedString();\n    this.orgName     = parser.parseLengthCodedString();\n\n    if (parser.parseLengthCodedNumber() !== 0x0c) {\n      var err  = new TypeError('Received invalid field length');\n      err.code = 'PARSER_INVALID_FIELD_LENGTH';\n      throw err;\n    }\n\n    this.charsetNr   = parser.parseUnsignedNumber(2);\n    this.length      = parser.parseUnsignedNumber(4);\n    this.type        = parser.parseUnsignedNumber(1);\n    this.flags       = parser.parseUnsignedNumber(2);\n    this.decimals    = parser.parseUnsignedNumber(1);\n\n    var filler       = parser.parseBuffer(2);\n    if (filler[0] !== 0x0 || filler[1] !== 0x0) {\n      var err  = new TypeError('Received invalid filler');\n      err.code = 'PARSER_INVALID_FILLER';\n      throw err;\n    }\n\n    // parsed flags\n    this.zeroFill    = (this.flags & 0x0040 ? true : false);\n\n    if (parser.reachedPacketEnd()) {\n      return;\n    }\n\n    this.default     = parser.parseLengthCodedString();\n  } else {\n    this.table       = parser.parseLengthCodedString();\n    this.name        = parser.parseLengthCodedString();\n    this.length      = parser.parseUnsignedNumber(parser.parseUnsignedNumber(1));\n    this.type        = parser.parseUnsignedNumber(parser.parseUnsignedNumber(1));\n  }\n};\n\nFieldPacket.prototype.write = function(writer) {\n  if (this.protocol41) {\n    writer.writeLengthCodedString(this.catalog);\n    writer.writeLengthCodedString(this.db);\n    writer.writeLengthCodedString(this.table);\n    writer.writeLengthCodedString(this.orgTable);\n    writer.writeLengthCodedString(this.name);\n    writer.writeLengthCodedString(this.orgName);\n\n    writer.writeLengthCodedNumber(0x0c);\n    writer.writeUnsignedNumber(2, this.charsetNr || 0);\n    writer.writeUnsignedNumber(4, this.length || 0);\n    writer.writeUnsignedNumber(1, this.type || 0);\n    writer.writeUnsignedNumber(2, this.flags || 0);\n    writer.writeUnsignedNumber(1, this.decimals || 0);\n    writer.writeFiller(2);\n\n    if (this.default !== undefined) {\n      writer.writeLengthCodedString(this.default);\n    }\n  } else {\n    writer.writeLengthCodedString(this.table);\n    writer.writeLengthCodedString(this.name);\n    writer.writeUnsignedNumber(1, 0x01);\n    writer.writeUnsignedNumber(1, this.length);\n    writer.writeUnsignedNumber(1, 0x01);\n    writer.writeUnsignedNumber(1, this.type);\n  }\n};\n"]},"metadata":{},"sourceType":"script"}