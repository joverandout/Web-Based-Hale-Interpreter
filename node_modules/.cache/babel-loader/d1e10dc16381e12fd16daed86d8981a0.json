{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport function clamp(value, min, max) {\n  return Math.min(Math.max(value, min), max);\n}\nexport class MovingAverage {\n  constructor() {\n    this._n = 1;\n    this._val = 0;\n  }\n\n  update(value) {\n    this._val = this._val + (value - this._val) / this._n;\n    this._n += 1;\n    return this._val;\n  }\n\n  get value() {\n    return this._val;\n  }\n\n}\nexport class SlidingWindowAverage {\n  constructor(size) {\n    this._n = 0;\n    this._val = 0;\n    this._values = [];\n    this._index = 0;\n    this._sum = 0;\n    this._values = new Array(size);\n\n    this._values.fill(0, 0, size);\n  }\n\n  update(value) {\n    const oldValue = this._values[this._index];\n    this._values[this._index] = value;\n    this._index = (this._index + 1) % this._values.length;\n    this._sum -= oldValue;\n    this._sum += value;\n\n    if (this._n < this._values.length) {\n      this._n += 1;\n    }\n\n    this._val = this._sum / this._n;\n    return this._val;\n  }\n\n  get value() {\n    return this._val;\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/base/common/numbers.js"],"names":["clamp","value","min","max","Math","MovingAverage","constructor","_n","_val","update","SlidingWindowAverage","size","_values","_index","_sum","Array","fill","oldValue","length"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,SAASA,KAAT,CAAeC,KAAf,EAAsBC,GAAtB,EAA2BC,GAA3B,EAAgC;AACnC,SAAOC,IAAI,CAACF,GAAL,CAASE,IAAI,CAACD,GAAL,CAASF,KAAT,EAAgBC,GAAhB,CAAT,EAA+BC,GAA/B,CAAP;AACH;AACD,OAAO,MAAME,aAAN,CAAoB;AACvBC,EAAAA,WAAW,GAAG;AACV,SAAKC,EAAL,GAAU,CAAV;AACA,SAAKC,IAAL,GAAY,CAAZ;AACH;;AACDC,EAAAA,MAAM,CAACR,KAAD,EAAQ;AACV,SAAKO,IAAL,GAAY,KAAKA,IAAL,GAAY,CAACP,KAAK,GAAG,KAAKO,IAAd,IAAsB,KAAKD,EAAnD;AACA,SAAKA,EAAL,IAAW,CAAX;AACA,WAAO,KAAKC,IAAZ;AACH;;AACQ,MAALP,KAAK,GAAG;AACR,WAAO,KAAKO,IAAZ;AACH;;AAZsB;AAc3B,OAAO,MAAME,oBAAN,CAA2B;AAC9BJ,EAAAA,WAAW,CAACK,IAAD,EAAO;AACd,SAAKJ,EAAL,GAAU,CAAV;AACA,SAAKC,IAAL,GAAY,CAAZ;AACA,SAAKI,OAAL,GAAe,EAAf;AACA,SAAKC,MAAL,GAAc,CAAd;AACA,SAAKC,IAAL,GAAY,CAAZ;AACA,SAAKF,OAAL,GAAe,IAAIG,KAAJ,CAAUJ,IAAV,CAAf;;AACA,SAAKC,OAAL,CAAaI,IAAb,CAAkB,CAAlB,EAAqB,CAArB,EAAwBL,IAAxB;AACH;;AACDF,EAAAA,MAAM,CAACR,KAAD,EAAQ;AACV,UAAMgB,QAAQ,GAAG,KAAKL,OAAL,CAAa,KAAKC,MAAlB,CAAjB;AACA,SAAKD,OAAL,CAAa,KAAKC,MAAlB,IAA4BZ,KAA5B;AACA,SAAKY,MAAL,GAAc,CAAC,KAAKA,MAAL,GAAc,CAAf,IAAoB,KAAKD,OAAL,CAAaM,MAA/C;AACA,SAAKJ,IAAL,IAAaG,QAAb;AACA,SAAKH,IAAL,IAAab,KAAb;;AACA,QAAI,KAAKM,EAAL,GAAU,KAAKK,OAAL,CAAaM,MAA3B,EAAmC;AAC/B,WAAKX,EAAL,IAAW,CAAX;AACH;;AACD,SAAKC,IAAL,GAAY,KAAKM,IAAL,GAAY,KAAKP,EAA7B;AACA,WAAO,KAAKC,IAAZ;AACH;;AACQ,MAALP,KAAK,GAAG;AACR,WAAO,KAAKO,IAAZ;AACH;;AAxB6B","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport function clamp(value, min, max) {\n    return Math.min(Math.max(value, min), max);\n}\nexport class MovingAverage {\n    constructor() {\n        this._n = 1;\n        this._val = 0;\n    }\n    update(value) {\n        this._val = this._val + (value - this._val) / this._n;\n        this._n += 1;\n        return this._val;\n    }\n    get value() {\n        return this._val;\n    }\n}\nexport class SlidingWindowAverage {\n    constructor(size) {\n        this._n = 0;\n        this._val = 0;\n        this._values = [];\n        this._index = 0;\n        this._sum = 0;\n        this._values = new Array(size);\n        this._values.fill(0, 0, size);\n    }\n    update(value) {\n        const oldValue = this._values[this._index];\n        this._values[this._index] = value;\n        this._index = (this._index + 1) % this._values.length;\n        this._sum -= oldValue;\n        this._sum += value;\n        if (this._n < this._values.length) {\n            this._n += 1;\n        }\n        this._val = this._sum / this._n;\n        return this._val;\n    }\n    get value() {\n        return this._val;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}