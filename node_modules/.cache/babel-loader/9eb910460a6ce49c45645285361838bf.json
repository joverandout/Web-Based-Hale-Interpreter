{"ast":null,"code":"import * as React from 'react';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport useOnPreventRemove, { shouldPreventRemove } from './useOnPreventRemove';\n/**\n * Hook to handle actions for a navigator, including state updates and bubbling.\n *\n * Bubbling an action is achieved in 2 ways:\n * 1. To bubble action to parent, we expose the action handler in context and then access the parent context\n * 2. To bubble action to child, child adds event listeners subscribing to actions from parent\n *\n * When the action handler handles as action, it returns `true`, otherwise `false`.\n */\n\nexport default function useOnAction(_ref) {\n  let {\n    router,\n    getState,\n    setState,\n    key,\n    actionListeners,\n    beforeRemoveListeners,\n    routerConfigOptions,\n    emitter\n  } = _ref;\n  const {\n    onAction: onActionParent,\n    onRouteFocus: onRouteFocusParent,\n    addListener: addListenerParent,\n    onDispatchAction\n  } = React.useContext(NavigationBuilderContext);\n  const routerConfigOptionsRef = React.useRef(routerConfigOptions);\n  React.useEffect(() => {\n    routerConfigOptionsRef.current = routerConfigOptions;\n  });\n  const onAction = React.useCallback(function (action) {\n    let visitedNavigators = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Set();\n    const state = getState(); // Since actions can bubble both up and down, they could come to the same navigator again\n    // We keep track of navigators which have already tried to handle the action and return if it's already visited\n\n    if (visitedNavigators.has(state.key)) {\n      return false;\n    }\n\n    visitedNavigators.add(state.key);\n\n    if (typeof action.target !== 'string' || action.target === state.key) {\n      let result = router.getStateForAction(state, action, routerConfigOptionsRef.current); // If a target is specified and set to current navigator, the action shouldn't bubble\n      // So instead of `null`, we use the state object for such cases to signal that action was handled\n\n      result = result === null && action.target === state.key ? state : result;\n\n      if (result !== null) {\n        onDispatchAction(action, state === result);\n\n        if (state !== result) {\n          const isPrevented = shouldPreventRemove(emitter, beforeRemoveListeners, state.routes, result.routes, action);\n\n          if (isPrevented) {\n            return true;\n          }\n\n          setState(result);\n        }\n\n        if (onRouteFocusParent !== undefined) {\n          // Some actions such as `NAVIGATE` also want to bring the navigated route to focus in the whole tree\n          // This means we need to focus all of the parent navigators of this navigator as well\n          const shouldFocus = router.shouldActionChangeFocus(action);\n\n          if (shouldFocus && key !== undefined) {\n            onRouteFocusParent(key);\n          }\n        }\n\n        return true;\n      }\n    }\n\n    if (onActionParent !== undefined) {\n      // Bubble action to the parent if the current navigator didn't handle it\n      if (onActionParent(action, visitedNavigators)) {\n        return true;\n      }\n    } // If the action wasn't handled by current navigator or a parent navigator, let children handle it\n\n\n    for (let i = actionListeners.length - 1; i >= 0; i--) {\n      const listener = actionListeners[i];\n\n      if (listener(action, visitedNavigators)) {\n        return true;\n      }\n    }\n\n    return false;\n  }, [actionListeners, beforeRemoveListeners, emitter, getState, key, onActionParent, onDispatchAction, onRouteFocusParent, router, setState]);\n  useOnPreventRemove({\n    getState,\n    emitter,\n    beforeRemoveListeners\n  });\n  React.useEffect(() => addListenerParent === null || addListenerParent === void 0 ? void 0 : addListenerParent('action', onAction), [addListenerParent, onAction]);\n  return onAction;\n}","map":{"version":3,"sources":["useOnAction.tsx"],"names":["emitter","onAction","onRouteFocus","addListener","onDispatchAction","React","routerConfigOptionsRef","visitedNavigators","state","getState","action","result","router","isPrevented","shouldPreventRemove","setState","onRouteFocusParent","shouldFocus","key","onActionParent","i","actionListeners","listener","useOnPreventRemove","beforeRemoveListeners","addListenerParent"],"mappings":"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","sourcesContent":["import type {\n  NavigationAction,\n  NavigationState,\n  PartialState,\n  Router,\n  RouterConfigOptions,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext, {\n  ChildActionListener,\n  ChildBeforeRemoveListener,\n} from './NavigationBuilderContext';\nimport type { EventMapCore } from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\nimport useOnPreventRemove, { shouldPreventRemove } from './useOnPreventRemove';\n\ntype Options = {\n  router: Router<NavigationState, NavigationAction>;\n  key?: string;\n  getState: () => NavigationState;\n  setState: (state: NavigationState | PartialState<NavigationState>) => void;\n  actionListeners: ChildActionListener[];\n  beforeRemoveListeners: Record<string, ChildBeforeRemoveListener | undefined>;\n  routerConfigOptions: RouterConfigOptions;\n  emitter: NavigationEventEmitter<EventMapCore<any>>;\n};\n\n/**\n * Hook to handle actions for a navigator, including state updates and bubbling.\n *\n * Bubbling an action is achieved in 2 ways:\n * 1. To bubble action to parent, we expose the action handler in context and then access the parent context\n * 2. To bubble action to child, child adds event listeners subscribing to actions from parent\n *\n * When the action handler handles as action, it returns `true`, otherwise `false`.\n */\nexport default function useOnAction({\n  router,\n  getState,\n  setState,\n  key,\n  actionListeners,\n  beforeRemoveListeners,\n  routerConfigOptions,\n  emitter,\n}: Options) {\n  const {\n    onAction: onActionParent,\n    onRouteFocus: onRouteFocusParent,\n    addListener: addListenerParent,\n    onDispatchAction,\n  } = React.useContext(NavigationBuilderContext);\n\n  const routerConfigOptionsRef =\n    React.useRef<RouterConfigOptions>(routerConfigOptions);\n\n  React.useEffect(() => {\n    routerConfigOptionsRef.current = routerConfigOptions;\n  });\n\n  const onAction = React.useCallback(\n    (\n      action: NavigationAction,\n      visitedNavigators: Set<string> = new Set<string>()\n    ) => {\n      const state = getState();\n\n      // Since actions can bubble both up and down, they could come to the same navigator again\n      // We keep track of navigators which have already tried to handle the action and return if it's already visited\n      if (visitedNavigators.has(state.key)) {\n        return false;\n      }\n\n      visitedNavigators.add(state.key);\n\n      if (typeof action.target !== 'string' || action.target === state.key) {\n        let result = router.getStateForAction(\n          state,\n          action,\n          routerConfigOptionsRef.current\n        );\n\n        // If a target is specified and set to current navigator, the action shouldn't bubble\n        // So instead of `null`, we use the state object for such cases to signal that action was handled\n        result =\n          result === null && action.target === state.key ? state : result;\n\n        if (result !== null) {\n          onDispatchAction(action, state === result);\n\n          if (state !== result) {\n            const isPrevented = shouldPreventRemove(\n              emitter,\n              beforeRemoveListeners,\n              state.routes,\n              result.routes,\n              action\n            );\n\n            if (isPrevented) {\n              return true;\n            }\n\n            setState(result);\n          }\n\n          if (onRouteFocusParent !== undefined) {\n            // Some actions such as `NAVIGATE` also want to bring the navigated route to focus in the whole tree\n            // This means we need to focus all of the parent navigators of this navigator as well\n            const shouldFocus = router.shouldActionChangeFocus(action);\n\n            if (shouldFocus && key !== undefined) {\n              onRouteFocusParent(key);\n            }\n          }\n\n          return true;\n        }\n      }\n\n      if (onActionParent !== undefined) {\n        // Bubble action to the parent if the current navigator didn't handle it\n        if (onActionParent(action, visitedNavigators)) {\n          return true;\n        }\n      }\n\n      // If the action wasn't handled by current navigator or a parent navigator, let children handle it\n      for (let i = actionListeners.length - 1; i >= 0; i--) {\n        const listener = actionListeners[i];\n\n        if (listener(action, visitedNavigators)) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n    [\n      actionListeners,\n      beforeRemoveListeners,\n      emitter,\n      getState,\n      key,\n      onActionParent,\n      onDispatchAction,\n      onRouteFocusParent,\n      router,\n      setState,\n    ]\n  );\n\n  useOnPreventRemove({\n    getState,\n    emitter,\n    beforeRemoveListeners,\n  });\n\n  React.useEffect(\n    () => addListenerParent?.('action', onAction),\n    [addListenerParent, onAction]\n  );\n\n  return onAction;\n}\n"]},"metadata":{},"sourceType":"module"}