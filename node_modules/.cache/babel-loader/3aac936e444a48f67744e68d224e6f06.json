{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { Disposable, MutableDisposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { firstNonWhitespaceIndex } from '../../../../base/common/strings.js';\nimport { EditorAction, EditorCommand, registerEditorAction, registerEditorCommand, registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { CursorColumns } from '../../../common/core/cursorColumns.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { inlineSuggestCommitId } from './consts.js';\nimport { GhostTextModel } from './ghostTextModel.js';\nimport { GhostTextWidget } from './ghostTextWidget.js';\nimport * as nls from '../../../../nls.js';\nimport { ContextKeyExpr, IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { KeybindingsRegistry } from '../../../../platform/keybinding/common/keybindingsRegistry.js';\nlet GhostTextController = class GhostTextController extends Disposable {\n  constructor(editor, instantiationService) {\n    super();\n    this.editor = editor;\n    this.instantiationService = instantiationService;\n    this.triggeredExplicitly = false;\n    this.activeController = this._register(new MutableDisposable());\n\n    this._register(this.editor.onDidChangeModel(() => {\n      this.updateModelController();\n    }));\n\n    this._register(this.editor.onDidChangeConfiguration(e => {\n      if (e.hasChanged(106\n      /* suggest */\n      )) {\n        this.updateModelController();\n      }\n\n      if (e.hasChanged(55\n      /* inlineSuggest */\n      )) {\n        this.updateModelController();\n      }\n    }));\n\n    this.updateModelController();\n  }\n\n  static get(editor) {\n    return editor.getContribution(GhostTextController.ID);\n  }\n\n  get activeModel() {\n    var _a;\n\n    return (_a = this.activeController.value) === null || _a === void 0 ? void 0 : _a.model;\n  } // Don't call this method when not neccessary. It will recreate the activeController.\n\n\n  updateModelController() {\n    const suggestOptions = this.editor.getOption(106\n    /* suggest */\n    );\n    const inlineSuggestOptions = this.editor.getOption(55\n    /* inlineSuggest */\n    );\n    this.activeController.value = undefined; // ActiveGhostTextController is only created if one of those settings is set or if the inline completions are triggered explicitly.\n\n    this.activeController.value = this.editor.hasModel() && (suggestOptions.preview || inlineSuggestOptions.enabled || this.triggeredExplicitly) ? this.instantiationService.createInstance(ActiveGhostTextController, this.editor) : undefined;\n  }\n\n  shouldShowHoverAt(hoverRange) {\n    var _a;\n\n    return ((_a = this.activeModel) === null || _a === void 0 ? void 0 : _a.shouldShowHoverAt(hoverRange)) || false;\n  }\n\n  shouldShowHoverAtViewZone(viewZoneId) {\n    var _a, _b;\n\n    return ((_b = (_a = this.activeController.value) === null || _a === void 0 ? void 0 : _a.widget) === null || _b === void 0 ? void 0 : _b.shouldShowHoverAtViewZone(viewZoneId)) || false;\n  }\n\n  trigger() {\n    var _a;\n\n    this.triggeredExplicitly = true;\n\n    if (!this.activeController.value) {\n      this.updateModelController();\n    }\n\n    (_a = this.activeModel) === null || _a === void 0 ? void 0 : _a.triggerInlineCompletion();\n  }\n\n  commit() {\n    var _a;\n\n    (_a = this.activeModel) === null || _a === void 0 ? void 0 : _a.commitInlineCompletion();\n  }\n\n  hide() {\n    var _a;\n\n    (_a = this.activeModel) === null || _a === void 0 ? void 0 : _a.hideInlineCompletion();\n  }\n\n  showNextInlineCompletion() {\n    var _a;\n\n    (_a = this.activeModel) === null || _a === void 0 ? void 0 : _a.showNextInlineCompletion();\n  }\n\n  showPreviousInlineCompletion() {\n    var _a;\n\n    (_a = this.activeModel) === null || _a === void 0 ? void 0 : _a.showPreviousInlineCompletion();\n  }\n\n  hasMultipleInlineCompletions() {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield (_a = this.activeModel) === null || _a === void 0 ? void 0 : _a.hasMultipleInlineCompletions();\n      return result !== undefined ? result : false;\n    });\n  }\n\n};\nGhostTextController.inlineSuggestionVisible = new RawContextKey('inlineSuggestionVisible', false, nls.localize('inlineSuggestionVisible', \"Whether an inline suggestion is visible\"));\nGhostTextController.inlineSuggestionHasIndentation = new RawContextKey('inlineSuggestionHasIndentation', false, nls.localize('inlineSuggestionHasIndentation', \"Whether the inline suggestion starts with whitespace\"));\nGhostTextController.inlineSuggestionHasIndentationLessThanTabSize = new RawContextKey('inlineSuggestionHasIndentationLessThanTabSize', true, nls.localize('inlineSuggestionHasIndentationLessThanTabSize', \"Whether the inline suggestion starts with whitespace that is less than what would be inserted by tab\"));\nGhostTextController.ID = 'editor.contrib.ghostTextController';\nGhostTextController = __decorate([__param(1, IInstantiationService)], GhostTextController);\nexport { GhostTextController };\n\nclass GhostTextContextKeys {\n  constructor(contextKeyService) {\n    this.contextKeyService = contextKeyService;\n    this.inlineCompletionVisible = GhostTextController.inlineSuggestionVisible.bindTo(this.contextKeyService);\n    this.inlineCompletionSuggestsIndentation = GhostTextController.inlineSuggestionHasIndentation.bindTo(this.contextKeyService);\n    this.inlineCompletionSuggestsIndentationLessThanTabSize = GhostTextController.inlineSuggestionHasIndentationLessThanTabSize.bindTo(this.contextKeyService);\n  }\n\n}\n/**\n * The controller for a text editor with an initialized text model.\n * Must be disposed as soon as the model detaches from the editor.\n*/\n\n\nlet ActiveGhostTextController = class ActiveGhostTextController extends Disposable {\n  constructor(editor, instantiationService, contextKeyService) {\n    super();\n    this.editor = editor;\n    this.instantiationService = instantiationService;\n    this.contextKeyService = contextKeyService;\n    this.contextKeys = new GhostTextContextKeys(this.contextKeyService);\n    this.model = this._register(this.instantiationService.createInstance(GhostTextModel, this.editor));\n    this.widget = this._register(this.instantiationService.createInstance(GhostTextWidget, this.editor, this.model));\n\n    this._register(toDisposable(() => {\n      this.contextKeys.inlineCompletionVisible.set(false);\n      this.contextKeys.inlineCompletionSuggestsIndentation.set(false);\n      this.contextKeys.inlineCompletionSuggestsIndentationLessThanTabSize.set(true);\n    }));\n\n    this._register(this.model.onDidChange(() => {\n      this.updateContextKeys();\n    }));\n\n    this.updateContextKeys();\n  }\n\n  updateContextKeys() {\n    var _a;\n\n    this.contextKeys.inlineCompletionVisible.set(((_a = this.model.activeInlineCompletionsModel) === null || _a === void 0 ? void 0 : _a.ghostText) !== undefined);\n    let startsWithIndentation = false;\n    let startsWithIndentationLessThanTabSize = true;\n    const ghostText = this.model.inlineCompletionsModel.ghostText;\n\n    if (!!this.model.activeInlineCompletionsModel && ghostText && ghostText.parts.length > 0) {\n      const {\n        column,\n        lines\n      } = ghostText.parts[0];\n      const firstLine = lines[0];\n      const indentationEndColumn = this.editor.getModel().getLineIndentColumn(ghostText.lineNumber);\n      const inIndentation = column <= indentationEndColumn;\n\n      if (inIndentation) {\n        let firstNonWsIdx = firstNonWhitespaceIndex(firstLine);\n\n        if (firstNonWsIdx === -1) {\n          firstNonWsIdx = firstLine.length - 1;\n        }\n\n        startsWithIndentation = firstNonWsIdx > 0;\n        const tabSize = this.editor.getModel().getOptions().tabSize;\n        const visibleColumnIndentation = CursorColumns.visibleColumnFromColumn(firstLine, firstNonWsIdx + 1, tabSize);\n        startsWithIndentationLessThanTabSize = visibleColumnIndentation < tabSize;\n      }\n    }\n\n    this.contextKeys.inlineCompletionSuggestsIndentation.set(startsWithIndentation);\n    this.contextKeys.inlineCompletionSuggestsIndentationLessThanTabSize.set(startsWithIndentationLessThanTabSize);\n  }\n\n};\nActiveGhostTextController = __decorate([__param(1, IInstantiationService), __param(2, IContextKeyService)], ActiveGhostTextController);\nexport { ActiveGhostTextController };\nconst GhostTextCommand = EditorCommand.bindToContribution(GhostTextController.get);\nexport const commitInlineSuggestionAction = new GhostTextCommand({\n  id: inlineSuggestCommitId,\n  precondition: GhostTextController.inlineSuggestionVisible,\n\n  handler(x) {\n    x.commit();\n    x.editor.focus();\n  }\n\n});\nregisterEditorCommand(commitInlineSuggestionAction);\nKeybindingsRegistry.registerKeybindingRule({\n  primary: 2\n  /* Tab */\n  ,\n  weight: 200,\n  id: commitInlineSuggestionAction.id,\n  when: ContextKeyExpr.and(commitInlineSuggestionAction.precondition, EditorContextKeys.tabMovesFocus.toNegated(), GhostTextController.inlineSuggestionHasIndentationLessThanTabSize)\n});\nregisterEditorCommand(new GhostTextCommand({\n  id: 'editor.action.inlineSuggest.hide',\n  precondition: GhostTextController.inlineSuggestionVisible,\n  kbOpts: {\n    weight: 100,\n    primary: 9\n    /* Escape */\n\n  },\n\n  handler(x) {\n    x.hide();\n  }\n\n}));\nexport class ShowNextInlineSuggestionAction extends EditorAction {\n  constructor() {\n    super({\n      id: ShowNextInlineSuggestionAction.ID,\n      label: nls.localize('action.inlineSuggest.showNext', \"Show Next Inline Suggestion\"),\n      alias: 'Show Next Inline Suggestion',\n      precondition: ContextKeyExpr.and(EditorContextKeys.writable, GhostTextController.inlineSuggestionVisible),\n      kbOpts: {\n        weight: 100,\n        primary: 512\n        /* Alt */\n        | 89\n        /* BracketRight */\n\n      }\n    });\n  }\n\n  run(accessor, editor) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const controller = GhostTextController.get(editor);\n\n      if (controller) {\n        controller.showNextInlineCompletion();\n        editor.focus();\n      }\n    });\n  }\n\n}\nShowNextInlineSuggestionAction.ID = 'editor.action.inlineSuggest.showNext';\nexport class ShowPreviousInlineSuggestionAction extends EditorAction {\n  constructor() {\n    super({\n      id: ShowPreviousInlineSuggestionAction.ID,\n      label: nls.localize('action.inlineSuggest.showPrevious', \"Show Previous Inline Suggestion\"),\n      alias: 'Show Previous Inline Suggestion',\n      precondition: ContextKeyExpr.and(EditorContextKeys.writable, GhostTextController.inlineSuggestionVisible),\n      kbOpts: {\n        weight: 100,\n        primary: 512\n        /* Alt */\n        | 87\n        /* BracketLeft */\n\n      }\n    });\n  }\n\n  run(accessor, editor) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const controller = GhostTextController.get(editor);\n\n      if (controller) {\n        controller.showPreviousInlineCompletion();\n        editor.focus();\n      }\n    });\n  }\n\n}\nShowPreviousInlineSuggestionAction.ID = 'editor.action.inlineSuggest.showPrevious';\nexport class TriggerInlineSuggestionAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.inlineSuggest.trigger',\n      label: nls.localize('action.inlineSuggest.trigger', \"Trigger Inline Suggestion\"),\n      alias: 'Trigger Inline Suggestion',\n      precondition: EditorContextKeys.writable\n    });\n  }\n\n  run(accessor, editor) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const controller = GhostTextController.get(editor);\n\n      if (controller) {\n        controller.trigger();\n      }\n    });\n  }\n\n}\nregisterEditorContribution(GhostTextController.ID, GhostTextController);\nregisterEditorAction(TriggerInlineSuggestionAction);\nregisterEditorAction(ShowNextInlineSuggestionAction);\nregisterEditorAction(ShowPreviousInlineSuggestionAction);","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/contrib/inlineCompletions/browser/ghostTextController.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Disposable","MutableDisposable","toDisposable","firstNonWhitespaceIndex","EditorAction","EditorCommand","registerEditorAction","registerEditorCommand","registerEditorContribution","CursorColumns","EditorContextKeys","inlineSuggestCommitId","GhostTextModel","GhostTextWidget","nls","ContextKeyExpr","IContextKeyService","RawContextKey","IInstantiationService","KeybindingsRegistry","GhostTextController","constructor","editor","instantiationService","triggeredExplicitly","activeController","_register","onDidChangeModel","updateModelController","onDidChangeConfiguration","hasChanged","get","getContribution","ID","activeModel","_a","model","suggestOptions","getOption","inlineSuggestOptions","undefined","hasModel","preview","enabled","createInstance","ActiveGhostTextController","shouldShowHoverAt","hoverRange","shouldShowHoverAtViewZone","viewZoneId","_b","widget","trigger","triggerInlineCompletion","commit","commitInlineCompletion","hide","hideInlineCompletion","showNextInlineCompletion","showPreviousInlineCompletion","hasMultipleInlineCompletions","inlineSuggestionVisible","localize","inlineSuggestionHasIndentation","inlineSuggestionHasIndentationLessThanTabSize","GhostTextContextKeys","contextKeyService","inlineCompletionVisible","bindTo","inlineCompletionSuggestsIndentation","inlineCompletionSuggestsIndentationLessThanTabSize","contextKeys","set","onDidChange","updateContextKeys","activeInlineCompletionsModel","ghostText","startsWithIndentation","startsWithIndentationLessThanTabSize","inlineCompletionsModel","parts","column","lines","firstLine","indentationEndColumn","getModel","getLineIndentColumn","lineNumber","inIndentation","firstNonWsIdx","tabSize","getOptions","visibleColumnIndentation","visibleColumnFromColumn","GhostTextCommand","bindToContribution","commitInlineSuggestionAction","id","precondition","handler","x","focus","registerKeybindingRule","primary","weight","when","and","tabMovesFocus","toNegated","kbOpts","ShowNextInlineSuggestionAction","label","alias","writable","run","accessor","controller","ShowPreviousInlineSuggestionAction","TriggerInlineSuggestionAction"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Disposable, MutableDisposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { firstNonWhitespaceIndex } from '../../../../base/common/strings.js';\nimport { EditorAction, EditorCommand, registerEditorAction, registerEditorCommand, registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { CursorColumns } from '../../../common/core/cursorColumns.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { inlineSuggestCommitId } from './consts.js';\nimport { GhostTextModel } from './ghostTextModel.js';\nimport { GhostTextWidget } from './ghostTextWidget.js';\nimport * as nls from '../../../../nls.js';\nimport { ContextKeyExpr, IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { KeybindingsRegistry } from '../../../../platform/keybinding/common/keybindingsRegistry.js';\nlet GhostTextController = class GhostTextController extends Disposable {\n    constructor(editor, instantiationService) {\n        super();\n        this.editor = editor;\n        this.instantiationService = instantiationService;\n        this.triggeredExplicitly = false;\n        this.activeController = this._register(new MutableDisposable());\n        this._register(this.editor.onDidChangeModel(() => {\n            this.updateModelController();\n        }));\n        this._register(this.editor.onDidChangeConfiguration((e) => {\n            if (e.hasChanged(106 /* suggest */)) {\n                this.updateModelController();\n            }\n            if (e.hasChanged(55 /* inlineSuggest */)) {\n                this.updateModelController();\n            }\n        }));\n        this.updateModelController();\n    }\n    static get(editor) {\n        return editor.getContribution(GhostTextController.ID);\n    }\n    get activeModel() {\n        var _a;\n        return (_a = this.activeController.value) === null || _a === void 0 ? void 0 : _a.model;\n    }\n    // Don't call this method when not neccessary. It will recreate the activeController.\n    updateModelController() {\n        const suggestOptions = this.editor.getOption(106 /* suggest */);\n        const inlineSuggestOptions = this.editor.getOption(55 /* inlineSuggest */);\n        this.activeController.value = undefined;\n        // ActiveGhostTextController is only created if one of those settings is set or if the inline completions are triggered explicitly.\n        this.activeController.value =\n            this.editor.hasModel() && (suggestOptions.preview || inlineSuggestOptions.enabled || this.triggeredExplicitly)\n                ? this.instantiationService.createInstance(ActiveGhostTextController, this.editor)\n                : undefined;\n    }\n    shouldShowHoverAt(hoverRange) {\n        var _a;\n        return ((_a = this.activeModel) === null || _a === void 0 ? void 0 : _a.shouldShowHoverAt(hoverRange)) || false;\n    }\n    shouldShowHoverAtViewZone(viewZoneId) {\n        var _a, _b;\n        return ((_b = (_a = this.activeController.value) === null || _a === void 0 ? void 0 : _a.widget) === null || _b === void 0 ? void 0 : _b.shouldShowHoverAtViewZone(viewZoneId)) || false;\n    }\n    trigger() {\n        var _a;\n        this.triggeredExplicitly = true;\n        if (!this.activeController.value) {\n            this.updateModelController();\n        }\n        (_a = this.activeModel) === null || _a === void 0 ? void 0 : _a.triggerInlineCompletion();\n    }\n    commit() {\n        var _a;\n        (_a = this.activeModel) === null || _a === void 0 ? void 0 : _a.commitInlineCompletion();\n    }\n    hide() {\n        var _a;\n        (_a = this.activeModel) === null || _a === void 0 ? void 0 : _a.hideInlineCompletion();\n    }\n    showNextInlineCompletion() {\n        var _a;\n        (_a = this.activeModel) === null || _a === void 0 ? void 0 : _a.showNextInlineCompletion();\n    }\n    showPreviousInlineCompletion() {\n        var _a;\n        (_a = this.activeModel) === null || _a === void 0 ? void 0 : _a.showPreviousInlineCompletion();\n    }\n    hasMultipleInlineCompletions() {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield ((_a = this.activeModel) === null || _a === void 0 ? void 0 : _a.hasMultipleInlineCompletions());\n            return result !== undefined ? result : false;\n        });\n    }\n};\nGhostTextController.inlineSuggestionVisible = new RawContextKey('inlineSuggestionVisible', false, nls.localize('inlineSuggestionVisible', \"Whether an inline suggestion is visible\"));\nGhostTextController.inlineSuggestionHasIndentation = new RawContextKey('inlineSuggestionHasIndentation', false, nls.localize('inlineSuggestionHasIndentation', \"Whether the inline suggestion starts with whitespace\"));\nGhostTextController.inlineSuggestionHasIndentationLessThanTabSize = new RawContextKey('inlineSuggestionHasIndentationLessThanTabSize', true, nls.localize('inlineSuggestionHasIndentationLessThanTabSize', \"Whether the inline suggestion starts with whitespace that is less than what would be inserted by tab\"));\nGhostTextController.ID = 'editor.contrib.ghostTextController';\nGhostTextController = __decorate([\n    __param(1, IInstantiationService)\n], GhostTextController);\nexport { GhostTextController };\nclass GhostTextContextKeys {\n    constructor(contextKeyService) {\n        this.contextKeyService = contextKeyService;\n        this.inlineCompletionVisible = GhostTextController.inlineSuggestionVisible.bindTo(this.contextKeyService);\n        this.inlineCompletionSuggestsIndentation = GhostTextController.inlineSuggestionHasIndentation.bindTo(this.contextKeyService);\n        this.inlineCompletionSuggestsIndentationLessThanTabSize = GhostTextController.inlineSuggestionHasIndentationLessThanTabSize.bindTo(this.contextKeyService);\n    }\n}\n/**\n * The controller for a text editor with an initialized text model.\n * Must be disposed as soon as the model detaches from the editor.\n*/\nlet ActiveGhostTextController = class ActiveGhostTextController extends Disposable {\n    constructor(editor, instantiationService, contextKeyService) {\n        super();\n        this.editor = editor;\n        this.instantiationService = instantiationService;\n        this.contextKeyService = contextKeyService;\n        this.contextKeys = new GhostTextContextKeys(this.contextKeyService);\n        this.model = this._register(this.instantiationService.createInstance(GhostTextModel, this.editor));\n        this.widget = this._register(this.instantiationService.createInstance(GhostTextWidget, this.editor, this.model));\n        this._register(toDisposable(() => {\n            this.contextKeys.inlineCompletionVisible.set(false);\n            this.contextKeys.inlineCompletionSuggestsIndentation.set(false);\n            this.contextKeys.inlineCompletionSuggestsIndentationLessThanTabSize.set(true);\n        }));\n        this._register(this.model.onDidChange(() => {\n            this.updateContextKeys();\n        }));\n        this.updateContextKeys();\n    }\n    updateContextKeys() {\n        var _a;\n        this.contextKeys.inlineCompletionVisible.set(((_a = this.model.activeInlineCompletionsModel) === null || _a === void 0 ? void 0 : _a.ghostText) !== undefined);\n        let startsWithIndentation = false;\n        let startsWithIndentationLessThanTabSize = true;\n        const ghostText = this.model.inlineCompletionsModel.ghostText;\n        if (!!this.model.activeInlineCompletionsModel && ghostText && ghostText.parts.length > 0) {\n            const { column, lines } = ghostText.parts[0];\n            const firstLine = lines[0];\n            const indentationEndColumn = this.editor.getModel().getLineIndentColumn(ghostText.lineNumber);\n            const inIndentation = column <= indentationEndColumn;\n            if (inIndentation) {\n                let firstNonWsIdx = firstNonWhitespaceIndex(firstLine);\n                if (firstNonWsIdx === -1) {\n                    firstNonWsIdx = firstLine.length - 1;\n                }\n                startsWithIndentation = firstNonWsIdx > 0;\n                const tabSize = this.editor.getModel().getOptions().tabSize;\n                const visibleColumnIndentation = CursorColumns.visibleColumnFromColumn(firstLine, firstNonWsIdx + 1, tabSize);\n                startsWithIndentationLessThanTabSize = visibleColumnIndentation < tabSize;\n            }\n        }\n        this.contextKeys.inlineCompletionSuggestsIndentation.set(startsWithIndentation);\n        this.contextKeys.inlineCompletionSuggestsIndentationLessThanTabSize.set(startsWithIndentationLessThanTabSize);\n    }\n};\nActiveGhostTextController = __decorate([\n    __param(1, IInstantiationService),\n    __param(2, IContextKeyService)\n], ActiveGhostTextController);\nexport { ActiveGhostTextController };\nconst GhostTextCommand = EditorCommand.bindToContribution(GhostTextController.get);\nexport const commitInlineSuggestionAction = new GhostTextCommand({\n    id: inlineSuggestCommitId,\n    precondition: GhostTextController.inlineSuggestionVisible,\n    handler(x) {\n        x.commit();\n        x.editor.focus();\n    }\n});\nregisterEditorCommand(commitInlineSuggestionAction);\nKeybindingsRegistry.registerKeybindingRule({\n    primary: 2 /* Tab */,\n    weight: 200,\n    id: commitInlineSuggestionAction.id,\n    when: ContextKeyExpr.and(commitInlineSuggestionAction.precondition, EditorContextKeys.tabMovesFocus.toNegated(), GhostTextController.inlineSuggestionHasIndentationLessThanTabSize),\n});\nregisterEditorCommand(new GhostTextCommand({\n    id: 'editor.action.inlineSuggest.hide',\n    precondition: GhostTextController.inlineSuggestionVisible,\n    kbOpts: {\n        weight: 100,\n        primary: 9 /* Escape */,\n    },\n    handler(x) {\n        x.hide();\n    }\n}));\nexport class ShowNextInlineSuggestionAction extends EditorAction {\n    constructor() {\n        super({\n            id: ShowNextInlineSuggestionAction.ID,\n            label: nls.localize('action.inlineSuggest.showNext', \"Show Next Inline Suggestion\"),\n            alias: 'Show Next Inline Suggestion',\n            precondition: ContextKeyExpr.and(EditorContextKeys.writable, GhostTextController.inlineSuggestionVisible),\n            kbOpts: {\n                weight: 100,\n                primary: 512 /* Alt */ | 89 /* BracketRight */,\n            },\n        });\n    }\n    run(accessor, editor) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const controller = GhostTextController.get(editor);\n            if (controller) {\n                controller.showNextInlineCompletion();\n                editor.focus();\n            }\n        });\n    }\n}\nShowNextInlineSuggestionAction.ID = 'editor.action.inlineSuggest.showNext';\nexport class ShowPreviousInlineSuggestionAction extends EditorAction {\n    constructor() {\n        super({\n            id: ShowPreviousInlineSuggestionAction.ID,\n            label: nls.localize('action.inlineSuggest.showPrevious', \"Show Previous Inline Suggestion\"),\n            alias: 'Show Previous Inline Suggestion',\n            precondition: ContextKeyExpr.and(EditorContextKeys.writable, GhostTextController.inlineSuggestionVisible),\n            kbOpts: {\n                weight: 100,\n                primary: 512 /* Alt */ | 87 /* BracketLeft */,\n            },\n        });\n    }\n    run(accessor, editor) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const controller = GhostTextController.get(editor);\n            if (controller) {\n                controller.showPreviousInlineCompletion();\n                editor.focus();\n            }\n        });\n    }\n}\nShowPreviousInlineSuggestionAction.ID = 'editor.action.inlineSuggest.showPrevious';\nexport class TriggerInlineSuggestionAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.inlineSuggest.trigger',\n            label: nls.localize('action.inlineSuggest.trigger', \"Trigger Inline Suggestion\"),\n            alias: 'Trigger Inline Suggestion',\n            precondition: EditorContextKeys.writable\n        });\n    }\n    run(accessor, editor) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const controller = GhostTextController.get(editor);\n            if (controller) {\n                controller.trigger();\n            }\n        });\n    }\n}\nregisterEditorContribution(GhostTextController.ID, GhostTextController);\nregisterEditorAction(TriggerInlineSuggestionAction);\nregisterEditorAction(ShowNextInlineSuggestionAction);\nregisterEditorAction(ShowPreviousInlineSuggestionAction);\n"]},"metadata":{},"sourceType":"module"}