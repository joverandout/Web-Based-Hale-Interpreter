{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { coalesce } from '../../../base/common/arrays.js';\nimport { toDisposable } from '../../../base/common/lifecycle.js';\nimport { Registry } from '../../registry/common/platform.js';\nexport var DefaultQuickAccessFilterValue;\n\n(function (DefaultQuickAccessFilterValue) {\n  /**\n   * Keep the value as it is given to quick access.\n   */\n  DefaultQuickAccessFilterValue[DefaultQuickAccessFilterValue[\"PRESERVE\"] = 0] = \"PRESERVE\";\n  /**\n   * Use the value that was used last time something was accepted from the picker.\n   */\n\n  DefaultQuickAccessFilterValue[DefaultQuickAccessFilterValue[\"LAST\"] = 1] = \"LAST\";\n})(DefaultQuickAccessFilterValue || (DefaultQuickAccessFilterValue = {}));\n\nexport const Extensions = {\n  Quickaccess: 'workbench.contributions.quickaccess'\n};\nexport class QuickAccessRegistry {\n  constructor() {\n    this.providers = [];\n    this.defaultProvider = undefined;\n  }\n\n  registerQuickAccessProvider(provider) {\n    // Extract the default provider when no prefix is present\n    if (provider.prefix.length === 0) {\n      this.defaultProvider = provider;\n    } else {\n      this.providers.push(provider);\n    } // sort the providers by decreasing prefix length, such that longer\n    // prefixes take priority: 'ext' vs 'ext install' - the latter should win\n\n\n    this.providers.sort((providerA, providerB) => providerB.prefix.length - providerA.prefix.length);\n    return toDisposable(() => {\n      this.providers.splice(this.providers.indexOf(provider), 1);\n\n      if (this.defaultProvider === provider) {\n        this.defaultProvider = undefined;\n      }\n    });\n  }\n\n  getQuickAccessProviders() {\n    return coalesce([this.defaultProvider, ...this.providers]);\n  }\n\n  getQuickAccessProvider(prefix) {\n    const result = prefix ? this.providers.find(provider => prefix.startsWith(provider.prefix)) || undefined : undefined;\n    return result || this.defaultProvider;\n  }\n\n}\nRegistry.add(Extensions.Quickaccess, new QuickAccessRegistry());","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/platform/quickinput/common/quickAccess.js"],"names":["coalesce","toDisposable","Registry","DefaultQuickAccessFilterValue","Extensions","Quickaccess","QuickAccessRegistry","constructor","providers","defaultProvider","undefined","registerQuickAccessProvider","provider","prefix","length","push","sort","providerA","providerB","splice","indexOf","getQuickAccessProviders","getQuickAccessProvider","result","find","startsWith","add"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,QAAT,QAAyB,gCAAzB;AACA,SAASC,YAAT,QAA6B,mCAA7B;AACA,SAASC,QAAT,QAAyB,mCAAzB;AACA,OAAO,IAAIC,6BAAJ;;AACP,CAAC,UAAUA,6BAAV,EAAyC;AACtC;AACJ;AACA;AACIA,EAAAA,6BAA6B,CAACA,6BAA6B,CAAC,UAAD,CAA7B,GAA4C,CAA7C,CAA7B,GAA+E,UAA/E;AACA;AACJ;AACA;;AACIA,EAAAA,6BAA6B,CAACA,6BAA6B,CAAC,MAAD,CAA7B,GAAwC,CAAzC,CAA7B,GAA2E,MAA3E;AACH,CATD,EASGA,6BAA6B,KAAKA,6BAA6B,GAAG,EAArC,CAThC;;AAUA,OAAO,MAAMC,UAAU,GAAG;AACtBC,EAAAA,WAAW,EAAE;AADS,CAAnB;AAGP,OAAO,MAAMC,mBAAN,CAA0B;AAC7BC,EAAAA,WAAW,GAAG;AACV,SAAKC,SAAL,GAAiB,EAAjB;AACA,SAAKC,eAAL,GAAuBC,SAAvB;AACH;;AACDC,EAAAA,2BAA2B,CAACC,QAAD,EAAW;AAClC;AACA,QAAIA,QAAQ,CAACC,MAAT,CAAgBC,MAAhB,KAA2B,CAA/B,EAAkC;AAC9B,WAAKL,eAAL,GAAuBG,QAAvB;AACH,KAFD,MAGK;AACD,WAAKJ,SAAL,CAAeO,IAAf,CAAoBH,QAApB;AACH,KAPiC,CAQlC;AACA;;;AACA,SAAKJ,SAAL,CAAeQ,IAAf,CAAoB,CAACC,SAAD,EAAYC,SAAZ,KAA0BA,SAAS,CAACL,MAAV,CAAiBC,MAAjB,GAA0BG,SAAS,CAACJ,MAAV,CAAiBC,MAAzF;AACA,WAAOb,YAAY,CAAC,MAAM;AACtB,WAAKO,SAAL,CAAeW,MAAf,CAAsB,KAAKX,SAAL,CAAeY,OAAf,CAAuBR,QAAvB,CAAtB,EAAwD,CAAxD;;AACA,UAAI,KAAKH,eAAL,KAAyBG,QAA7B,EAAuC;AACnC,aAAKH,eAAL,GAAuBC,SAAvB;AACH;AACJ,KALkB,CAAnB;AAMH;;AACDW,EAAAA,uBAAuB,GAAG;AACtB,WAAOrB,QAAQ,CAAC,CAAC,KAAKS,eAAN,EAAuB,GAAG,KAAKD,SAA/B,CAAD,CAAf;AACH;;AACDc,EAAAA,sBAAsB,CAACT,MAAD,EAAS;AAC3B,UAAMU,MAAM,GAAGV,MAAM,GAAI,KAAKL,SAAL,CAAegB,IAAf,CAAoBZ,QAAQ,IAAIC,MAAM,CAACY,UAAP,CAAkBb,QAAQ,CAACC,MAA3B,CAAhC,KAAuEH,SAA3E,GAAwFA,SAA7G;AACA,WAAOa,MAAM,IAAI,KAAKd,eAAtB;AACH;;AA7B4B;AA+BjCP,QAAQ,CAACwB,GAAT,CAAatB,UAAU,CAACC,WAAxB,EAAqC,IAAIC,mBAAJ,EAArC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { coalesce } from '../../../base/common/arrays.js';\nimport { toDisposable } from '../../../base/common/lifecycle.js';\nimport { Registry } from '../../registry/common/platform.js';\nexport var DefaultQuickAccessFilterValue;\n(function (DefaultQuickAccessFilterValue) {\n    /**\n     * Keep the value as it is given to quick access.\n     */\n    DefaultQuickAccessFilterValue[DefaultQuickAccessFilterValue[\"PRESERVE\"] = 0] = \"PRESERVE\";\n    /**\n     * Use the value that was used last time something was accepted from the picker.\n     */\n    DefaultQuickAccessFilterValue[DefaultQuickAccessFilterValue[\"LAST\"] = 1] = \"LAST\";\n})(DefaultQuickAccessFilterValue || (DefaultQuickAccessFilterValue = {}));\nexport const Extensions = {\n    Quickaccess: 'workbench.contributions.quickaccess'\n};\nexport class QuickAccessRegistry {\n    constructor() {\n        this.providers = [];\n        this.defaultProvider = undefined;\n    }\n    registerQuickAccessProvider(provider) {\n        // Extract the default provider when no prefix is present\n        if (provider.prefix.length === 0) {\n            this.defaultProvider = provider;\n        }\n        else {\n            this.providers.push(provider);\n        }\n        // sort the providers by decreasing prefix length, such that longer\n        // prefixes take priority: 'ext' vs 'ext install' - the latter should win\n        this.providers.sort((providerA, providerB) => providerB.prefix.length - providerA.prefix.length);\n        return toDisposable(() => {\n            this.providers.splice(this.providers.indexOf(provider), 1);\n            if (this.defaultProvider === provider) {\n                this.defaultProvider = undefined;\n            }\n        });\n    }\n    getQuickAccessProviders() {\n        return coalesce([this.defaultProvider, ...this.providers]);\n    }\n    getQuickAccessProvider(prefix) {\n        const result = prefix ? (this.providers.find(provider => prefix.startsWith(provider.prefix)) || undefined) : undefined;\n        return result || this.defaultProvider;\n    }\n}\nRegistry.add(Extensions.Quickaccess, new QuickAccessRegistry());\n"]},"metadata":{},"sourceType":"module"}