{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nfunction resetGlobalRegex(reg) {\n  if (reg.global) {\n    reg.lastIndex = 0;\n  }\n\n  return true;\n}\n\nexport class IndentRulesSupport {\n  constructor(indentationRules) {\n    this._indentationRules = indentationRules;\n  }\n\n  shouldIncrease(text) {\n    if (this._indentationRules) {\n      if (this._indentationRules.increaseIndentPattern && resetGlobalRegex(this._indentationRules.increaseIndentPattern) && this._indentationRules.increaseIndentPattern.test(text)) {\n        return true;\n      } // if (this._indentationRules.indentNextLinePattern && this._indentationRules.indentNextLinePattern.test(text)) {\n      // \treturn true;\n      // }\n\n    }\n\n    return false;\n  }\n\n  shouldDecrease(text) {\n    if (this._indentationRules && this._indentationRules.decreaseIndentPattern && resetGlobalRegex(this._indentationRules.decreaseIndentPattern) && this._indentationRules.decreaseIndentPattern.test(text)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  shouldIndentNextLine(text) {\n    if (this._indentationRules && this._indentationRules.indentNextLinePattern && resetGlobalRegex(this._indentationRules.indentNextLinePattern) && this._indentationRules.indentNextLinePattern.test(text)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  shouldIgnore(text) {\n    // the text matches `unIndentedLinePattern`\n    if (this._indentationRules && this._indentationRules.unIndentedLinePattern && resetGlobalRegex(this._indentationRules.unIndentedLinePattern) && this._indentationRules.unIndentedLinePattern.test(text)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  getIndentMetadata(text) {\n    let ret = 0;\n\n    if (this.shouldIncrease(text)) {\n      ret += 1\n      /* INCREASE_MASK */\n      ;\n    }\n\n    if (this.shouldDecrease(text)) {\n      ret += 2\n      /* DECREASE_MASK */\n      ;\n    }\n\n    if (this.shouldIndentNextLine(text)) {\n      ret += 4\n      /* INDENT_NEXTLINE_MASK */\n      ;\n    }\n\n    if (this.shouldIgnore(text)) {\n      ret += 8\n      /* UNINDENT_MASK */\n      ;\n    }\n\n    return ret;\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/common/languages/supports/indentRules.js"],"names":["resetGlobalRegex","reg","global","lastIndex","IndentRulesSupport","constructor","indentationRules","_indentationRules","shouldIncrease","text","increaseIndentPattern","test","shouldDecrease","decreaseIndentPattern","shouldIndentNextLine","indentNextLinePattern","shouldIgnore","unIndentedLinePattern","getIndentMetadata","ret"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,gBAAT,CAA0BC,GAA1B,EAA+B;AAC3B,MAAIA,GAAG,CAACC,MAAR,EAAgB;AACZD,IAAAA,GAAG,CAACE,SAAJ,GAAgB,CAAhB;AACH;;AACD,SAAO,IAAP;AACH;;AACD,OAAO,MAAMC,kBAAN,CAAyB;AAC5BC,EAAAA,WAAW,CAACC,gBAAD,EAAmB;AAC1B,SAAKC,iBAAL,GAAyBD,gBAAzB;AACH;;AACDE,EAAAA,cAAc,CAACC,IAAD,EAAO;AACjB,QAAI,KAAKF,iBAAT,EAA4B;AACxB,UAAI,KAAKA,iBAAL,CAAuBG,qBAAvB,IAAgDV,gBAAgB,CAAC,KAAKO,iBAAL,CAAuBG,qBAAxB,CAAhE,IAAkH,KAAKH,iBAAL,CAAuBG,qBAAvB,CAA6CC,IAA7C,CAAkDF,IAAlD,CAAtH,EAA+K;AAC3K,eAAO,IAAP;AACH,OAHuB,CAIxB;AACA;AACA;;AACH;;AACD,WAAO,KAAP;AACH;;AACDG,EAAAA,cAAc,CAACH,IAAD,EAAO;AACjB,QAAI,KAAKF,iBAAL,IAA0B,KAAKA,iBAAL,CAAuBM,qBAAjD,IAA0Eb,gBAAgB,CAAC,KAAKO,iBAAL,CAAuBM,qBAAxB,CAA1F,IAA4I,KAAKN,iBAAL,CAAuBM,qBAAvB,CAA6CF,IAA7C,CAAkDF,IAAlD,CAAhJ,EAAyM;AACrM,aAAO,IAAP;AACH;;AACD,WAAO,KAAP;AACH;;AACDK,EAAAA,oBAAoB,CAACL,IAAD,EAAO;AACvB,QAAI,KAAKF,iBAAL,IAA0B,KAAKA,iBAAL,CAAuBQ,qBAAjD,IAA0Ef,gBAAgB,CAAC,KAAKO,iBAAL,CAAuBQ,qBAAxB,CAA1F,IAA4I,KAAKR,iBAAL,CAAuBQ,qBAAvB,CAA6CJ,IAA7C,CAAkDF,IAAlD,CAAhJ,EAAyM;AACrM,aAAO,IAAP;AACH;;AACD,WAAO,KAAP;AACH;;AACDO,EAAAA,YAAY,CAACP,IAAD,EAAO;AACf;AACA,QAAI,KAAKF,iBAAL,IAA0B,KAAKA,iBAAL,CAAuBU,qBAAjD,IAA0EjB,gBAAgB,CAAC,KAAKO,iBAAL,CAAuBU,qBAAxB,CAA1F,IAA4I,KAAKV,iBAAL,CAAuBU,qBAAvB,CAA6CN,IAA7C,CAAkDF,IAAlD,CAAhJ,EAAyM;AACrM,aAAO,IAAP;AACH;;AACD,WAAO,KAAP;AACH;;AACDS,EAAAA,iBAAiB,CAACT,IAAD,EAAO;AACpB,QAAIU,GAAG,GAAG,CAAV;;AACA,QAAI,KAAKX,cAAL,CAAoBC,IAApB,CAAJ,EAA+B;AAC3BU,MAAAA,GAAG,IAAI;AAAE;AAAT;AACH;;AACD,QAAI,KAAKP,cAAL,CAAoBH,IAApB,CAAJ,EAA+B;AAC3BU,MAAAA,GAAG,IAAI;AAAE;AAAT;AACH;;AACD,QAAI,KAAKL,oBAAL,CAA0BL,IAA1B,CAAJ,EAAqC;AACjCU,MAAAA,GAAG,IAAI;AAAE;AAAT;AACH;;AACD,QAAI,KAAKH,YAAL,CAAkBP,IAAlB,CAAJ,EAA6B;AACzBU,MAAAA,GAAG,IAAI;AAAE;AAAT;AACH;;AACD,WAAOA,GAAP;AACH;;AAjD2B","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nfunction resetGlobalRegex(reg) {\n    if (reg.global) {\n        reg.lastIndex = 0;\n    }\n    return true;\n}\nexport class IndentRulesSupport {\n    constructor(indentationRules) {\n        this._indentationRules = indentationRules;\n    }\n    shouldIncrease(text) {\n        if (this._indentationRules) {\n            if (this._indentationRules.increaseIndentPattern && resetGlobalRegex(this._indentationRules.increaseIndentPattern) && this._indentationRules.increaseIndentPattern.test(text)) {\n                return true;\n            }\n            // if (this._indentationRules.indentNextLinePattern && this._indentationRules.indentNextLinePattern.test(text)) {\n            // \treturn true;\n            // }\n        }\n        return false;\n    }\n    shouldDecrease(text) {\n        if (this._indentationRules && this._indentationRules.decreaseIndentPattern && resetGlobalRegex(this._indentationRules.decreaseIndentPattern) && this._indentationRules.decreaseIndentPattern.test(text)) {\n            return true;\n        }\n        return false;\n    }\n    shouldIndentNextLine(text) {\n        if (this._indentationRules && this._indentationRules.indentNextLinePattern && resetGlobalRegex(this._indentationRules.indentNextLinePattern) && this._indentationRules.indentNextLinePattern.test(text)) {\n            return true;\n        }\n        return false;\n    }\n    shouldIgnore(text) {\n        // the text matches `unIndentedLinePattern`\n        if (this._indentationRules && this._indentationRules.unIndentedLinePattern && resetGlobalRegex(this._indentationRules.unIndentedLinePattern) && this._indentationRules.unIndentedLinePattern.test(text)) {\n            return true;\n        }\n        return false;\n    }\n    getIndentMetadata(text) {\n        let ret = 0;\n        if (this.shouldIncrease(text)) {\n            ret += 1 /* INCREASE_MASK */;\n        }\n        if (this.shouldDecrease(text)) {\n            ret += 2 /* DECREASE_MASK */;\n        }\n        if (this.shouldIndentNextLine(text)) {\n            ret += 4 /* INDENT_NEXTLINE_MASK */;\n        }\n        if (this.shouldIgnore(text)) {\n            ret += 8 /* UNINDENT_MASK */;\n        }\n        return ret;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}