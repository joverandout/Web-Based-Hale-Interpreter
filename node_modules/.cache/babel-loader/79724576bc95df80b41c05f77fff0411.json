{"ast":null,"code":"/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\n\nvar __reExport = (target, module, copyDefault, desc) => {\n  if (module && typeof module === \"object\" || typeof module === \"function\") {\n    for (let key of __getOwnPropNames(module)) if (!__hasOwnProp.call(target, key) && (copyDefault || key !== \"default\")) __defProp(target, key, {\n      get: () => module[key],\n      enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable\n    });\n  }\n\n  return target;\n}; // src/fillers/monaco-editor-core.ts\n\n\nvar monaco_editor_core_exports = {};\n\n__reExport(monaco_editor_core_exports, monaco_editor_core_star);\n\nimport * as monaco_editor_core_star from \"../../editor/editor.api.js\"; // src/basic-languages/freemarker2/freemarker2.ts\n\nvar EMPTY_ELEMENTS = [\"assign\", \"flush\", \"ftl\", \"return\", \"global\", \"import\", \"include\", \"break\", \"continue\", \"local\", \"nested\", \"nt\", \"setting\", \"stop\", \"t\", \"lt\", \"rt\", \"fallback\"];\nvar BLOCK_ELEMENTS = [\"attempt\", \"autoesc\", \"autoEsc\", \"compress\", \"comment\", \"escape\", \"noescape\", \"function\", \"if\", \"list\", \"items\", \"sep\", \"macro\", \"noparse\", \"noParse\", \"noautoesc\", \"noAutoEsc\", \"outputformat\", \"switch\", \"visit\", \"recurse\"];\nvar TagSyntaxAngle = {\n  close: \">\",\n  id: \"angle\",\n  open: \"<\"\n};\nvar TagSyntaxBracket = {\n  close: \"\\\\]\",\n  id: \"bracket\",\n  open: \"\\\\[\"\n};\nvar TagSyntaxAuto = {\n  close: \"[>\\\\]]\",\n  id: \"auto\",\n  open: \"[<\\\\[]\"\n};\nvar InterpolationSyntaxDollar = {\n  close: \"\\\\}\",\n  id: \"dollar\",\n  open1: \"\\\\$\",\n  open2: \"\\\\{\"\n};\nvar InterpolationSyntaxBracket = {\n  close: \"\\\\]\",\n  id: \"bracket\",\n  open1: \"\\\\[\",\n  open2: \"=\"\n};\n\nfunction createLangConfiguration(ts) {\n  return {\n    brackets: [[\"<\", \">\"], [\"[\", \"]\"], [\"(\", \")\"], [\"{\", \"}\"]],\n    comments: {\n      blockComment: [`${ts.open}--`, `--${ts.close}`]\n    },\n    autoCloseBefore: \"\\n\\r\t }]),.:;=\",\n    autoClosingPairs: [{\n      open: \"{\",\n      close: \"}\"\n    }, {\n      open: \"[\",\n      close: \"]\"\n    }, {\n      open: \"(\",\n      close: \")\"\n    }, {\n      open: '\"',\n      close: '\"',\n      notIn: [\"string\"]\n    }, {\n      open: \"'\",\n      close: \"'\",\n      notIn: [\"string\"]\n    }],\n    surroundingPairs: [{\n      open: '\"',\n      close: '\"'\n    }, {\n      open: \"'\",\n      close: \"'\"\n    }, {\n      open: \"{\",\n      close: \"}\"\n    }, {\n      open: \"[\",\n      close: \"]\"\n    }, {\n      open: \"(\",\n      close: \")\"\n    }, {\n      open: \"<\",\n      close: \">\"\n    }],\n    folding: {\n      markers: {\n        start: new RegExp(`${ts.open}#(?:${BLOCK_ELEMENTS.join(\"|\")})([^/${ts.close}]*(?!/)${ts.close})[^${ts.open}]*$`),\n        end: new RegExp(`${ts.open}/#(?:${BLOCK_ELEMENTS.join(\"|\")})[\\\\r\\\\n\\\\t ]*>`)\n      }\n    },\n    onEnterRules: [{\n      beforeText: new RegExp(`${ts.open}#(?!(?:${EMPTY_ELEMENTS.join(\"|\")}))([a-zA-Z_]+)([^/${ts.close}]*(?!/)${ts.close})[^${ts.open}]*$`),\n      afterText: new RegExp(`^${ts.open}/#([a-zA-Z_]+)[\\\\r\\\\n\\\\t ]*${ts.close}$`),\n      action: {\n        indentAction: monaco_editor_core_exports.languages.IndentAction.IndentOutdent\n      }\n    }, {\n      beforeText: new RegExp(`${ts.open}#(?!(?:${EMPTY_ELEMENTS.join(\"|\")}))([a-zA-Z_]+)([^/${ts.close}]*(?!/)${ts.close})[^${ts.open}]*$`),\n      action: {\n        indentAction: monaco_editor_core_exports.languages.IndentAction.Indent\n      }\n    }]\n  };\n}\n\nfunction createLangConfigurationAuto() {\n  return {\n    brackets: [[\"<\", \">\"], [\"[\", \"]\"], [\"(\", \")\"], [\"{\", \"}\"]],\n    autoCloseBefore: \"\\n\\r\t }]),.:;=\",\n    autoClosingPairs: [{\n      open: \"{\",\n      close: \"}\"\n    }, {\n      open: \"[\",\n      close: \"]\"\n    }, {\n      open: \"(\",\n      close: \")\"\n    }, {\n      open: '\"',\n      close: '\"',\n      notIn: [\"string\"]\n    }, {\n      open: \"'\",\n      close: \"'\",\n      notIn: [\"string\"]\n    }],\n    surroundingPairs: [{\n      open: '\"',\n      close: '\"'\n    }, {\n      open: \"'\",\n      close: \"'\"\n    }, {\n      open: \"{\",\n      close: \"}\"\n    }, {\n      open: \"[\",\n      close: \"]\"\n    }, {\n      open: \"(\",\n      close: \")\"\n    }, {\n      open: \"<\",\n      close: \">\"\n    }],\n    folding: {\n      markers: {\n        start: new RegExp(`[<\\\\[]#(?:${BLOCK_ELEMENTS.join(\"|\")})([^/>\\\\]]*(?!/)[>\\\\]])[^<\\\\[]*$`),\n        end: new RegExp(`[<\\\\[]/#(?:${BLOCK_ELEMENTS.join(\"|\")})[\\\\r\\\\n\\\\t ]*>`)\n      }\n    },\n    onEnterRules: [{\n      beforeText: new RegExp(`[<\\\\[]#(?!(?:${EMPTY_ELEMENTS.join(\"|\")}))([a-zA-Z_]+)([^/>\\\\]]*(?!/)[>\\\\]])[^[<\\\\[]]*$`),\n      afterText: new RegExp(`^[<\\\\[]/#([a-zA-Z_]+)[\\\\r\\\\n\\\\t ]*[>\\\\]]$`),\n      action: {\n        indentAction: monaco_editor_core_exports.languages.IndentAction.IndentOutdent\n      }\n    }, {\n      beforeText: new RegExp(`[<\\\\[]#(?!(?:${EMPTY_ELEMENTS.join(\"|\")}))([a-zA-Z_]+)([^/>\\\\]]*(?!/)[>\\\\]])[^[<\\\\[]]*$`),\n      action: {\n        indentAction: monaco_editor_core_exports.languages.IndentAction.Indent\n      }\n    }]\n  };\n}\n\nfunction createMonarchLanguage(ts, is) {\n  const id = `_${ts.id}_${is.id}`;\n\n  const s = name => name.replace(/__id__/g, id);\n\n  const r = regexp => {\n    const source = regexp.source.replace(/__id__/g, id);\n    return new RegExp(source, regexp.flags);\n  };\n\n  return {\n    unicode: true,\n    includeLF: false,\n    start: s(\"default__id__\"),\n    ignoreCase: false,\n    defaultToken: \"invalid\",\n    tokenPostfix: `.freemarker2`,\n    brackets: [{\n      open: \"{\",\n      close: \"}\",\n      token: \"delimiter.curly\"\n    }, {\n      open: \"[\",\n      close: \"]\",\n      token: \"delimiter.square\"\n    }, {\n      open: \"(\",\n      close: \")\",\n      token: \"delimiter.parenthesis\"\n    }, {\n      open: \"<\",\n      close: \">\",\n      token: \"delimiter.angle\"\n    }],\n    [s(\"open__id__\")]: new RegExp(ts.open),\n    [s(\"close__id__\")]: new RegExp(ts.close),\n    [s(\"iOpen1__id__\")]: new RegExp(is.open1),\n    [s(\"iOpen2__id__\")]: new RegExp(is.open2),\n    [s(\"iClose__id__\")]: new RegExp(is.close),\n    [s(\"startTag__id__\")]: r(/(@open__id__)(#)/),\n    [s(\"endTag__id__\")]: r(/(@open__id__)(\\/#)/),\n    [s(\"startOrEndTag__id__\")]: r(/(@open__id__)(\\/?#)/),\n    [s(\"closeTag1__id__\")]: r(/((?:@blank)*)(@close__id__)/),\n    [s(\"closeTag2__id__\")]: r(/((?:@blank)*\\/?)(@close__id__)/),\n    blank: /[ \\t\\n\\r]/,\n    keywords: [\"false\", \"true\", \"in\", \"as\", \"using\"],\n    directiveStartCloseTag1: /attempt|recover|sep|auto[eE]sc|no(?:autoe|AutoE)sc|compress|default|no[eE]scape|comment|no[pP]arse/,\n    directiveStartCloseTag2: /else|break|continue|return|stop|flush|t|lt|rt|nt|nested|recurse|fallback|ftl/,\n    directiveStartBlank: /if|else[iI]f|list|for[eE]ach|switch|case|assign|global|local|include|import|function|macro|transform|visit|stop|return|call|setting|output[fF]ormat|nested|recurse|escape|ftl|items/,\n    directiveEndCloseTag1: /if|list|items|sep|recover|attempt|for[eE]ach|local|global|assign|function|macro|output[fF]ormat|auto[eE]sc|no(?:autoe|AutoE)sc|compress|transform|switch|escape|no[eE]scape/,\n    escapedChar: /\\\\(?:[ntrfbgla\\\\'\"\\{=]|(?:x[0-9A-Fa-f]{1,4}))/,\n    asciiDigit: /[0-9]/,\n    integer: /[0-9]+/,\n    nonEscapedIdStartChar: /[\\$@-Z_a-z\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u1FFF\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183-\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3006\\u3031-\\u3035\\u303B-\\u303C\\u3040-\\u318F\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3300-\\u337F\\u3400-\\u4DB5\\u4E00-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8D0-\\uA8D9\\uA8F2-\\uA8F7\\uA8FB\\uA900-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF-\\uA9D9\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5-\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40-\\uFB41\\uFB43-\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/,\n    escapedIdChar: /\\\\[\\-\\.:#]/,\n    idStartChar: /(?:@nonEscapedIdStartChar)|(?:@escapedIdChar)/,\n    id: /(?:@idStartChar)(?:(?:@idStartChar)|(?:@asciiDigit))*/,\n    specialHashKeys: /\\*\\*|\\*|false|true|in|as|using/,\n    namedSymbols: /&lt;=|&gt;=|\\\\lte|\\\\lt|&lt;|\\\\gte|\\\\gt|&gt;|&amp;&amp;|\\\\and|-&gt;|->|==|!=|\\+=|-=|\\*=|\\/=|%=|\\+\\+|--|<=|&&|\\|\\||:|\\.\\.\\.|\\.\\.\\*|\\.\\.<|\\.\\.!|\\?\\?|=|<|\\+|-|\\*|\\/|%|\\||\\.\\.|\\?|!|&|\\.|,|;/,\n    arrows: [\"->\", \"-&gt;\"],\n    delimiters: [\";\", \":\", \",\", \".\"],\n    stringOperators: [\"lte\", \"lt\", \"gte\", \"gt\"],\n    noParseTags: [\"noparse\", \"noParse\", \"comment\"],\n    tokenizer: {\n      [s(\"default__id__\")]: [{\n        include: s(\"@directive_token__id__\")\n      }, {\n        include: s(\"@interpolation_and_text_token__id__\")\n      }],\n      [s(\"fmExpression__id__.directive\")]: [{\n        include: s(\"@blank_and_expression_comment_token__id__\")\n      }, {\n        include: s(\"@directive_end_token__id__\")\n      }, {\n        include: s(\"@expression_token__id__\")\n      }],\n      [s(\"fmExpression__id__.interpolation\")]: [{\n        include: s(\"@blank_and_expression_comment_token__id__\")\n      }, {\n        include: s(\"@expression_token__id__\")\n      }, {\n        include: s(\"@greater_operators_token__id__\")\n      }],\n      [s(\"inParen__id__.plain\")]: [{\n        include: s(\"@blank_and_expression_comment_token__id__\")\n      }, {\n        include: s(\"@directive_end_token__id__\")\n      }, {\n        include: s(\"@expression_token__id__\")\n      }],\n      [s(\"inParen__id__.gt\")]: [{\n        include: s(\"@blank_and_expression_comment_token__id__\")\n      }, {\n        include: s(\"@expression_token__id__\")\n      }, {\n        include: s(\"@greater_operators_token__id__\")\n      }],\n      [s(\"noSpaceExpression__id__\")]: [{\n        include: s(\"@no_space_expression_end_token__id__\")\n      }, {\n        include: s(\"@directive_end_token__id__\")\n      }, {\n        include: s(\"@expression_token__id__\")\n      }],\n      [s(\"unifiedCall__id__\")]: [{\n        include: s(\"@unified_call_token__id__\")\n      }],\n      [s(\"singleString__id__\")]: [{\n        include: s(\"@string_single_token__id__\")\n      }],\n      [s(\"doubleString__id__\")]: [{\n        include: s(\"@string_double_token__id__\")\n      }],\n      [s(\"rawSingleString__id__\")]: [{\n        include: s(\"@string_single_raw_token__id__\")\n      }],\n      [s(\"rawDoubleString__id__\")]: [{\n        include: s(\"@string_double_raw_token__id__\")\n      }],\n      [s(\"expressionComment__id__\")]: [{\n        include: s(\"@expression_comment_token__id__\")\n      }],\n      [s(\"noParse__id__\")]: [{\n        include: s(\"@no_parse_token__id__\")\n      }],\n      [s(\"terseComment__id__\")]: [{\n        include: s(\"@terse_comment_token__id__\")\n      }],\n      [s(\"directive_token__id__\")]: [[r(/(?:@startTag__id__)(@directiveStartCloseTag1)(?:@closeTag1__id__)/), ts.id === \"auto\" ? {\n        cases: {\n          \"$1==<\": {\n            token: \"@rematch\",\n            switchTo: `@default_angle_${is.id}`\n          },\n          \"$1==[\": {\n            token: \"@rematch\",\n            switchTo: `@default_bracket_${is.id}`\n          }\n        }\n      } : [{\n        token: \"@brackets.directive\"\n      }, {\n        token: \"delimiter.directive\"\n      }, {\n        cases: {\n          \"@noParseTags\": {\n            token: \"tag\",\n            next: s(\"@noParse__id__.$3\")\n          },\n          \"@default\": {\n            token: \"tag\"\n          }\n        }\n      }, {\n        token: \"delimiter.directive\"\n      }, {\n        token: \"@brackets.directive\"\n      }]], [r(/(?:@startTag__id__)(@directiveStartCloseTag2)(?:@closeTag2__id__)/), ts.id === \"auto\" ? {\n        cases: {\n          \"$1==<\": {\n            token: \"@rematch\",\n            switchTo: `@default_angle_${is.id}`\n          },\n          \"$1==[\": {\n            token: \"@rematch\",\n            switchTo: `@default_bracket_${is.id}`\n          }\n        }\n      } : [{\n        token: \"@brackets.directive\"\n      }, {\n        token: \"delimiter.directive\"\n      }, {\n        token: \"tag\"\n      }, {\n        token: \"delimiter.directive\"\n      }, {\n        token: \"@brackets.directive\"\n      }]], [r(/(?:@startTag__id__)(@directiveStartBlank)(@blank)/), ts.id === \"auto\" ? {\n        cases: {\n          \"$1==<\": {\n            token: \"@rematch\",\n            switchTo: `@default_angle_${is.id}`\n          },\n          \"$1==[\": {\n            token: \"@rematch\",\n            switchTo: `@default_bracket_${is.id}`\n          }\n        }\n      } : [{\n        token: \"@brackets.directive\"\n      }, {\n        token: \"delimiter.directive\"\n      }, {\n        token: \"tag\"\n      }, {\n        token: \"\",\n        next: s(\"@fmExpression__id__.directive\")\n      }]], [r(/(?:@endTag__id__)(@directiveEndCloseTag1)(?:@closeTag1__id__)/), ts.id === \"auto\" ? {\n        cases: {\n          \"$1==<\": {\n            token: \"@rematch\",\n            switchTo: `@default_angle_${is.id}`\n          },\n          \"$1==[\": {\n            token: \"@rematch\",\n            switchTo: `@default_bracket_${is.id}`\n          }\n        }\n      } : [{\n        token: \"@brackets.directive\"\n      }, {\n        token: \"delimiter.directive\"\n      }, {\n        token: \"tag\"\n      }, {\n        token: \"delimiter.directive\"\n      }, {\n        token: \"@brackets.directive\"\n      }]], [r(/(@open__id__)(@)/), ts.id === \"auto\" ? {\n        cases: {\n          \"$1==<\": {\n            token: \"@rematch\",\n            switchTo: `@default_angle_${is.id}`\n          },\n          \"$1==[\": {\n            token: \"@rematch\",\n            switchTo: `@default_bracket_${is.id}`\n          }\n        }\n      } : [{\n        token: \"@brackets.directive\"\n      }, {\n        token: \"delimiter.directive\",\n        next: s(\"@unifiedCall__id__\")\n      }]], [r(/(@open__id__)(\\/@)((?:(?:@id)(?:\\.(?:@id))*)?)(?:@closeTag1__id__)/), [{\n        token: \"@brackets.directive\"\n      }, {\n        token: \"delimiter.directive\"\n      }, {\n        token: \"tag\"\n      }, {\n        token: \"delimiter.directive\"\n      }, {\n        token: \"@brackets.directive\"\n      }]], [r(/(@open__id__)#--/), ts.id === \"auto\" ? {\n        cases: {\n          \"$1==<\": {\n            token: \"@rematch\",\n            switchTo: `@default_angle_${is.id}`\n          },\n          \"$1==[\": {\n            token: \"@rematch\",\n            switchTo: `@default_bracket_${is.id}`\n          }\n        }\n      } : {\n        token: \"comment\",\n        next: s(\"@terseComment__id__\")\n      }], [r(/(?:@startOrEndTag__id__)([a-zA-Z_]+)/), ts.id === \"auto\" ? {\n        cases: {\n          \"$1==<\": {\n            token: \"@rematch\",\n            switchTo: `@default_angle_${is.id}`\n          },\n          \"$1==[\": {\n            token: \"@rematch\",\n            switchTo: `@default_bracket_${is.id}`\n          }\n        }\n      } : [{\n        token: \"@brackets.directive\"\n      }, {\n        token: \"delimiter.directive\"\n      }, {\n        token: \"tag.invalid\",\n        next: s(\"@fmExpression__id__.directive\")\n      }]]],\n      [s(\"interpolation_and_text_token__id__\")]: [[r(/(@iOpen1__id__)(@iOpen2__id__)/), [{\n        token: is.id === \"bracket\" ? \"@brackets.interpolation\" : \"delimiter.interpolation\"\n      }, {\n        token: is.id === \"bracket\" ? \"delimiter.interpolation\" : \"@brackets.interpolation\",\n        next: s(\"@fmExpression__id__.interpolation\")\n      }]], [/[\\$#<\\[\\{]|(?:@blank)+|[^\\$<#\\[\\{\\n\\r\\t ]+/, {\n        token: \"source\"\n      }]],\n      [s(\"string_single_token__id__\")]: [[/[^'\\\\]/, {\n        token: \"string\"\n      }], [/@escapedChar/, {\n        token: \"string.escape\"\n      }], [/'/, {\n        token: \"string\",\n        next: \"@pop\"\n      }]],\n      [s(\"string_double_token__id__\")]: [[/[^\"\\\\]/, {\n        token: \"string\"\n      }], [/@escapedChar/, {\n        token: \"string.escape\"\n      }], [/\"/, {\n        token: \"string\",\n        next: \"@pop\"\n      }]],\n      [s(\"string_single_raw_token__id__\")]: [[/[^']+/, {\n        token: \"string.raw\"\n      }], [/'/, {\n        token: \"string.raw\",\n        next: \"@pop\"\n      }]],\n      [s(\"string_double_raw_token__id__\")]: [[/[^\"]+/, {\n        token: \"string.raw\"\n      }], [/\"/, {\n        token: \"string.raw\",\n        next: \"@pop\"\n      }]],\n      [s(\"expression_token__id__\")]: [[/(r?)(['\"])/, {\n        cases: {\n          \"r'\": [{\n            token: \"keyword\"\n          }, {\n            token: \"string.raw\",\n            next: s(\"@rawSingleString__id__\")\n          }],\n          'r\"': [{\n            token: \"keyword\"\n          }, {\n            token: \"string.raw\",\n            next: s(\"@rawDoubleString__id__\")\n          }],\n          \"'\": [{\n            token: \"source\"\n          }, {\n            token: \"string\",\n            next: s(\"@singleString__id__\")\n          }],\n          '\"': [{\n            token: \"source\"\n          }, {\n            token: \"string\",\n            next: s(\"@doubleString__id__\")\n          }]\n        }\n      }], [/(?:@integer)(?:\\.(?:@integer))?/, {\n        cases: {\n          \"(?:@integer)\": {\n            token: \"number\"\n          },\n          \"@default\": {\n            token: \"number.float\"\n          }\n        }\n      }], [/(\\.)(@blank*)(@specialHashKeys)/, [{\n        token: \"delimiter\"\n      }, {\n        token: \"\"\n      }, {\n        token: \"identifier\"\n      }]], [/(?:@namedSymbols)/, {\n        cases: {\n          \"@arrows\": {\n            token: \"meta.arrow\"\n          },\n          \"@delimiters\": {\n            token: \"delimiter\"\n          },\n          \"@default\": {\n            token: \"operators\"\n          }\n        }\n      }], [/@id/, {\n        cases: {\n          \"@keywords\": {\n            token: \"keyword.$0\"\n          },\n          \"@stringOperators\": {\n            token: \"operators\"\n          },\n          \"@default\": {\n            token: \"identifier\"\n          }\n        }\n      }], [/[\\[\\]\\(\\)\\{\\}]/, {\n        cases: {\n          \"\\\\[\": {\n            cases: {\n              \"$S2==gt\": {\n                token: \"@brackets\",\n                next: s(\"@inParen__id__.gt\")\n              },\n              \"@default\": {\n                token: \"@brackets\",\n                next: s(\"@inParen__id__.plain\")\n              }\n            }\n          },\n          \"\\\\]\": {\n            cases: { ...(is.id === \"bracket\" ? {\n                \"$S2==interpolation\": {\n                  token: \"@brackets.interpolation\",\n                  next: \"@popall\"\n                }\n              } : {}),\n              ...(ts.id === \"bracket\" ? {\n                \"$S2==directive\": {\n                  token: \"@brackets.directive\",\n                  next: \"@popall\"\n                }\n              } : {}),\n              [s(\"$S1==inParen__id__\")]: {\n                token: \"@brackets\",\n                next: \"@pop\"\n              },\n              \"@default\": {\n                token: \"@brackets\"\n              }\n            }\n          },\n          \"\\\\(\": {\n            token: \"@brackets\",\n            next: s(\"@inParen__id__.gt\")\n          },\n          \"\\\\)\": {\n            cases: {\n              [s(\"$S1==inParen__id__\")]: {\n                token: \"@brackets\",\n                next: \"@pop\"\n              },\n              \"@default\": {\n                token: \"@brackets\"\n              }\n            }\n          },\n          \"\\\\{\": {\n            cases: {\n              \"$S2==gt\": {\n                token: \"@brackets\",\n                next: s(\"@inParen__id__.gt\")\n              },\n              \"@default\": {\n                token: \"@brackets\",\n                next: s(\"@inParen__id__.plain\")\n              }\n            }\n          },\n          \"\\\\}\": {\n            cases: { ...(is.id === \"bracket\" ? {} : {\n                \"$S2==interpolation\": {\n                  token: \"@brackets.interpolation\",\n                  next: \"@popall\"\n                }\n              }),\n              [s(\"$S1==inParen__id__\")]: {\n                token: \"@brackets\",\n                next: \"@pop\"\n              },\n              \"@default\": {\n                token: \"@brackets\"\n              }\n            }\n          }\n        }\n      }], [/\\$\\{/, {\n        token: \"delimiter.invalid\"\n      }]],\n      [s(\"blank_and_expression_comment_token__id__\")]: [[/(?:@blank)+/, {\n        token: \"\"\n      }], [/[<\\[][#!]--/, {\n        token: \"comment\",\n        next: s(\"@expressionComment__id__\")\n      }]],\n      [s(\"directive_end_token__id__\")]: [[/>/, ts.id === \"bracket\" ? {\n        token: \"operators\"\n      } : {\n        token: \"@brackets.directive\",\n        next: \"@popall\"\n      }], [r(/(\\/)(@close__id__)/), [{\n        token: \"delimiter.directive\"\n      }, {\n        token: \"@brackets.directive\",\n        next: \"@popall\"\n      }]]],\n      [s(\"greater_operators_token__id__\")]: [[/>/, {\n        token: \"operators\"\n      }], [/>=/, {\n        token: \"operators\"\n      }]],\n      [s(\"no_space_expression_end_token__id__\")]: [[/(?:@blank)+/, {\n        token: \"\",\n        switchTo: s(\"@fmExpression__id__.directive\")\n      }]],\n      [s(\"unified_call_token__id__\")]: [[/(@id)((?:@blank)+)/, [{\n        token: \"tag\"\n      }, {\n        token: \"\",\n        next: s(\"@fmExpression__id__.directive\")\n      }]], [r(/(@id)(\\/?)(@close__id__)/), [{\n        token: \"tag\"\n      }, {\n        token: \"delimiter.directive\"\n      }, {\n        token: \"@brackets.directive\",\n        next: \"@popall\"\n      }]], [/./, {\n        token: \"@rematch\",\n        next: s(\"@noSpaceExpression__id__\")\n      }]],\n      [s(\"no_parse_token__id__\")]: [[r(/(@open__id__)(\\/#?)([a-zA-Z]+)((?:@blank)*)(@close__id__)/), {\n        cases: {\n          \"$S2==$3\": [{\n            token: \"@brackets.directive\"\n          }, {\n            token: \"delimiter.directive\"\n          }, {\n            token: \"tag\"\n          }, {\n            token: \"\"\n          }, {\n            token: \"@brackets.directive\",\n            next: \"@popall\"\n          }],\n          \"$S2==comment\": [{\n            token: \"comment\"\n          }, {\n            token: \"comment\"\n          }, {\n            token: \"comment\"\n          }, {\n            token: \"comment\"\n          }, {\n            token: \"comment\"\n          }],\n          \"@default\": [{\n            token: \"source\"\n          }, {\n            token: \"source\"\n          }, {\n            token: \"source\"\n          }, {\n            token: \"source\"\n          }, {\n            token: \"source\"\n          }]\n        }\n      }], [/[^<\\[\\-]+|[<\\[\\-]/, {\n        cases: {\n          \"$S2==comment\": {\n            token: \"comment\"\n          },\n          \"@default\": {\n            token: \"source\"\n          }\n        }\n      }]],\n      [s(\"expression_comment_token__id__\")]: [[/--[>\\]]/, {\n        token: \"comment\",\n        next: \"@pop\"\n      }], [/[^\\->\\]]+|[>\\]\\-]/, {\n        token: \"comment\"\n      }]],\n      [s(\"terse_comment_token__id__\")]: [[r(/--(?:@close__id__)/), {\n        token: \"comment\",\n        next: \"@popall\"\n      }], [/[^<\\[\\-]+|[<\\[\\-]/, {\n        token: \"comment\"\n      }]]\n    }\n  };\n}\n\nfunction createMonarchLanguageAuto(is) {\n  const angle = createMonarchLanguage(TagSyntaxAngle, is);\n  const bracket = createMonarchLanguage(TagSyntaxBracket, is);\n  const auto = createMonarchLanguage(TagSyntaxAuto, is);\n  return { ...angle,\n    ...bracket,\n    ...auto,\n    unicode: true,\n    includeLF: false,\n    start: `default_auto_${is.id}`,\n    ignoreCase: false,\n    defaultToken: \"invalid\",\n    tokenPostfix: `.freemarker2`,\n    brackets: [{\n      open: \"{\",\n      close: \"}\",\n      token: \"delimiter.curly\"\n    }, {\n      open: \"[\",\n      close: \"]\",\n      token: \"delimiter.square\"\n    }, {\n      open: \"(\",\n      close: \")\",\n      token: \"delimiter.parenthesis\"\n    }, {\n      open: \"<\",\n      close: \">\",\n      token: \"delimiter.angle\"\n    }],\n    tokenizer: { ...angle.tokenizer,\n      ...bracket.tokenizer,\n      ...auto.tokenizer\n    }\n  };\n}\n\nvar TagAngleInterpolationDollar = {\n  conf: createLangConfiguration(TagSyntaxAngle),\n  language: createMonarchLanguage(TagSyntaxAngle, InterpolationSyntaxDollar)\n};\nvar TagBracketInterpolationDollar = {\n  conf: createLangConfiguration(TagSyntaxBracket),\n  language: createMonarchLanguage(TagSyntaxBracket, InterpolationSyntaxDollar)\n};\nvar TagAngleInterpolationBracket = {\n  conf: createLangConfiguration(TagSyntaxAngle),\n  language: createMonarchLanguage(TagSyntaxAngle, InterpolationSyntaxBracket)\n};\nvar TagBracketInterpolationBracket = {\n  conf: createLangConfiguration(TagSyntaxBracket),\n  language: createMonarchLanguage(TagSyntaxBracket, InterpolationSyntaxBracket)\n};\nvar TagAutoInterpolationDollar = {\n  conf: createLangConfigurationAuto(),\n  language: createMonarchLanguageAuto(InterpolationSyntaxDollar)\n};\nvar TagAutoInterpolationBracket = {\n  conf: createLangConfigurationAuto(),\n  language: createMonarchLanguageAuto(InterpolationSyntaxBracket)\n};\nexport { TagAngleInterpolationBracket, TagAngleInterpolationDollar, TagAutoInterpolationBracket, TagAutoInterpolationDollar, TagBracketInterpolationBracket, TagBracketInterpolationDollar };","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/basic-languages/freemarker2/freemarker2.js"],"names":["__defProp","Object","defineProperty","__getOwnPropDesc","getOwnPropertyDescriptor","__getOwnPropNames","getOwnPropertyNames","__hasOwnProp","prototype","hasOwnProperty","__reExport","target","module","copyDefault","desc","key","call","get","enumerable","monaco_editor_core_exports","monaco_editor_core_star","EMPTY_ELEMENTS","BLOCK_ELEMENTS","TagSyntaxAngle","close","id","open","TagSyntaxBracket","TagSyntaxAuto","InterpolationSyntaxDollar","open1","open2","InterpolationSyntaxBracket","createLangConfiguration","ts","brackets","comments","blockComment","autoCloseBefore","autoClosingPairs","notIn","surroundingPairs","folding","markers","start","RegExp","join","end","onEnterRules","beforeText","afterText","action","indentAction","languages","IndentAction","IndentOutdent","Indent","createLangConfigurationAuto","createMonarchLanguage","is","s","name","replace","r","regexp","source","flags","unicode","includeLF","ignoreCase","defaultToken","tokenPostfix","token","blank","keywords","directiveStartCloseTag1","directiveStartCloseTag2","directiveStartBlank","directiveEndCloseTag1","escapedChar","asciiDigit","integer","nonEscapedIdStartChar","escapedIdChar","idStartChar","specialHashKeys","namedSymbols","arrows","delimiters","stringOperators","noParseTags","tokenizer","include","cases","switchTo","next","createMonarchLanguageAuto","angle","bracket","auto","TagAngleInterpolationDollar","conf","language","TagBracketInterpolationDollar","TagAngleInterpolationBracket","TagBracketInterpolationBracket","TagAutoInterpolationDollar","TagAutoInterpolationBracket"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,SAAS,GAAGC,MAAM,CAACC,cAAvB;AACA,IAAIC,gBAAgB,GAAGF,MAAM,CAACG,wBAA9B;AACA,IAAIC,iBAAiB,GAAGJ,MAAM,CAACK,mBAA/B;AACA,IAAIC,YAAY,GAAGN,MAAM,CAACO,SAAP,CAAiBC,cAApC;;AACA,IAAIC,UAAU,GAAG,CAACC,MAAD,EAASC,MAAT,EAAiBC,WAAjB,EAA8BC,IAA9B,KAAuC;AACtD,MAAIF,MAAM,IAAI,OAAOA,MAAP,KAAkB,QAA5B,IAAwC,OAAOA,MAAP,KAAkB,UAA9D,EAA0E;AACxE,SAAK,IAAIG,GAAT,IAAgBV,iBAAiB,CAACO,MAAD,CAAjC,EACE,IAAI,CAACL,YAAY,CAACS,IAAb,CAAkBL,MAAlB,EAA0BI,GAA1B,CAAD,KAAoCF,WAAW,IAAIE,GAAG,KAAK,SAA3D,CAAJ,EACEf,SAAS,CAACW,MAAD,EAASI,GAAT,EAAc;AAAEE,MAAAA,GAAG,EAAE,MAAML,MAAM,CAACG,GAAD,CAAnB;AAA0BG,MAAAA,UAAU,EAAE,EAAEJ,IAAI,GAAGX,gBAAgB,CAACS,MAAD,EAASG,GAAT,CAAzB,KAA2CD,IAAI,CAACI;AAAtF,KAAd,CAAT;AACL;;AACD,SAAOP,MAAP;AACD,CAPD,C,CASA;;;AACA,IAAIQ,0BAA0B,GAAG,EAAjC;;AACAT,UAAU,CAACS,0BAAD,EAA6BC,uBAA7B,CAAV;;AACA,OAAO,KAAKA,uBAAZ,MAAyC,4BAAzC,C,CAEA;;AACA,IAAIC,cAAc,GAAG,CACnB,QADmB,EAEnB,OAFmB,EAGnB,KAHmB,EAInB,QAJmB,EAKnB,QALmB,EAMnB,QANmB,EAOnB,SAPmB,EAQnB,OARmB,EASnB,UATmB,EAUnB,OAVmB,EAWnB,QAXmB,EAYnB,IAZmB,EAanB,SAbmB,EAcnB,MAdmB,EAenB,GAfmB,EAgBnB,IAhBmB,EAiBnB,IAjBmB,EAkBnB,UAlBmB,CAArB;AAoBA,IAAIC,cAAc,GAAG,CACnB,SADmB,EAEnB,SAFmB,EAGnB,SAHmB,EAInB,UAJmB,EAKnB,SALmB,EAMnB,QANmB,EAOnB,UAPmB,EAQnB,UARmB,EASnB,IATmB,EAUnB,MAVmB,EAWnB,OAXmB,EAYnB,KAZmB,EAanB,OAbmB,EAcnB,SAdmB,EAenB,SAfmB,EAgBnB,WAhBmB,EAiBnB,WAjBmB,EAkBnB,cAlBmB,EAmBnB,QAnBmB,EAoBnB,OApBmB,EAqBnB,SArBmB,CAArB;AAuBA,IAAIC,cAAc,GAAG;AACnBC,EAAAA,KAAK,EAAE,GADY;AAEnBC,EAAAA,EAAE,EAAE,OAFe;AAGnBC,EAAAA,IAAI,EAAE;AAHa,CAArB;AAKA,IAAIC,gBAAgB,GAAG;AACrBH,EAAAA,KAAK,EAAE,KADc;AAErBC,EAAAA,EAAE,EAAE,SAFiB;AAGrBC,EAAAA,IAAI,EAAE;AAHe,CAAvB;AAKA,IAAIE,aAAa,GAAG;AAClBJ,EAAAA,KAAK,EAAE,QADW;AAElBC,EAAAA,EAAE,EAAE,MAFc;AAGlBC,EAAAA,IAAI,EAAE;AAHY,CAApB;AAKA,IAAIG,yBAAyB,GAAG;AAC9BL,EAAAA,KAAK,EAAE,KADuB;AAE9BC,EAAAA,EAAE,EAAE,QAF0B;AAG9BK,EAAAA,KAAK,EAAE,KAHuB;AAI9BC,EAAAA,KAAK,EAAE;AAJuB,CAAhC;AAMA,IAAIC,0BAA0B,GAAG;AAC/BR,EAAAA,KAAK,EAAE,KADwB;AAE/BC,EAAAA,EAAE,EAAE,SAF2B;AAG/BK,EAAAA,KAAK,EAAE,KAHwB;AAI/BC,EAAAA,KAAK,EAAE;AAJwB,CAAjC;;AAMA,SAASE,uBAAT,CAAiCC,EAAjC,EAAqC;AACnC,SAAO;AACLC,IAAAA,QAAQ,EAAE,CACR,CAAC,GAAD,EAAM,GAAN,CADQ,EAER,CAAC,GAAD,EAAM,GAAN,CAFQ,EAGR,CAAC,GAAD,EAAM,GAAN,CAHQ,EAIR,CAAC,GAAD,EAAM,GAAN,CAJQ,CADL;AAOLC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,YAAY,EAAE,CAAE,GAAEH,EAAE,CAACR,IAAK,IAAZ,EAAkB,KAAIQ,EAAE,CAACV,KAAM,EAA/B;AADN,KAPL;AAULc,IAAAA,eAAe,EAAE,gBAVZ;AAWLC,IAAAA,gBAAgB,EAAE,CAChB;AAAEb,MAAAA,IAAI,EAAE,GAAR;AAAaF,MAAAA,KAAK,EAAE;AAApB,KADgB,EAEhB;AAAEE,MAAAA,IAAI,EAAE,GAAR;AAAaF,MAAAA,KAAK,EAAE;AAApB,KAFgB,EAGhB;AAAEE,MAAAA,IAAI,EAAE,GAAR;AAAaF,MAAAA,KAAK,EAAE;AAApB,KAHgB,EAIhB;AAAEE,MAAAA,IAAI,EAAE,GAAR;AAAaF,MAAAA,KAAK,EAAE,GAApB;AAAyBgB,MAAAA,KAAK,EAAE,CAAC,QAAD;AAAhC,KAJgB,EAKhB;AAAEd,MAAAA,IAAI,EAAE,GAAR;AAAaF,MAAAA,KAAK,EAAE,GAApB;AAAyBgB,MAAAA,KAAK,EAAE,CAAC,QAAD;AAAhC,KALgB,CAXb;AAkBLC,IAAAA,gBAAgB,EAAE,CAChB;AAAEf,MAAAA,IAAI,EAAE,GAAR;AAAaF,MAAAA,KAAK,EAAE;AAApB,KADgB,EAEhB;AAAEE,MAAAA,IAAI,EAAE,GAAR;AAAaF,MAAAA,KAAK,EAAE;AAApB,KAFgB,EAGhB;AAAEE,MAAAA,IAAI,EAAE,GAAR;AAAaF,MAAAA,KAAK,EAAE;AAApB,KAHgB,EAIhB;AAAEE,MAAAA,IAAI,EAAE,GAAR;AAAaF,MAAAA,KAAK,EAAE;AAApB,KAJgB,EAKhB;AAAEE,MAAAA,IAAI,EAAE,GAAR;AAAaF,MAAAA,KAAK,EAAE;AAApB,KALgB,EAMhB;AAAEE,MAAAA,IAAI,EAAE,GAAR;AAAaF,MAAAA,KAAK,EAAE;AAApB,KANgB,CAlBb;AA0BLkB,IAAAA,OAAO,EAAE;AACPC,MAAAA,OAAO,EAAE;AACPC,QAAAA,KAAK,EAAE,IAAIC,MAAJ,CAAY,GAAEX,EAAE,CAACR,IAAK,OAAMJ,cAAc,CAACwB,IAAf,CAAoB,GAApB,CAAyB,QAAOZ,EAAE,CAACV,KAAM,UAASU,EAAE,CAACV,KAAM,MAAKU,EAAE,CAACR,IAAK,KAApG,CADA;AAEPqB,QAAAA,GAAG,EAAE,IAAIF,MAAJ,CAAY,GAAEX,EAAE,CAACR,IAAK,QAAOJ,cAAc,CAACwB,IAAf,CAAoB,GAApB,CAAyB,iBAAtD;AAFE;AADF,KA1BJ;AAgCLE,IAAAA,YAAY,EAAE,CACZ;AACEC,MAAAA,UAAU,EAAE,IAAIJ,MAAJ,CAAY,GAAEX,EAAE,CAACR,IAAK,UAASL,cAAc,CAACyB,IAAf,CAAoB,GAApB,CAAyB,qBAAoBZ,EAAE,CAACV,KAAM,UAASU,EAAE,CAACV,KAAM,MAAKU,EAAE,CAACR,IAAK,KAApH,CADd;AAEEwB,MAAAA,SAAS,EAAE,IAAIL,MAAJ,CAAY,IAAGX,EAAE,CAACR,IAAK,8BAA6BQ,EAAE,CAACV,KAAM,GAA7D,CAFb;AAGE2B,MAAAA,MAAM,EAAE;AACNC,QAAAA,YAAY,EAAEjC,0BAA0B,CAACkC,SAA3B,CAAqCC,YAArC,CAAkDC;AAD1D;AAHV,KADY,EAQZ;AACEN,MAAAA,UAAU,EAAE,IAAIJ,MAAJ,CAAY,GAAEX,EAAE,CAACR,IAAK,UAASL,cAAc,CAACyB,IAAf,CAAoB,GAApB,CAAyB,qBAAoBZ,EAAE,CAACV,KAAM,UAASU,EAAE,CAACV,KAAM,MAAKU,EAAE,CAACR,IAAK,KAApH,CADd;AAEEyB,MAAAA,MAAM,EAAE;AAAEC,QAAAA,YAAY,EAAEjC,0BAA0B,CAACkC,SAA3B,CAAqCC,YAArC,CAAkDE;AAAlE;AAFV,KARY;AAhCT,GAAP;AA8CD;;AACD,SAASC,2BAAT,GAAuC;AACrC,SAAO;AACLtB,IAAAA,QAAQ,EAAE,CACR,CAAC,GAAD,EAAM,GAAN,CADQ,EAER,CAAC,GAAD,EAAM,GAAN,CAFQ,EAGR,CAAC,GAAD,EAAM,GAAN,CAHQ,EAIR,CAAC,GAAD,EAAM,GAAN,CAJQ,CADL;AAOLG,IAAAA,eAAe,EAAE,gBAPZ;AAQLC,IAAAA,gBAAgB,EAAE,CAChB;AAAEb,MAAAA,IAAI,EAAE,GAAR;AAAaF,MAAAA,KAAK,EAAE;AAApB,KADgB,EAEhB;AAAEE,MAAAA,IAAI,EAAE,GAAR;AAAaF,MAAAA,KAAK,EAAE;AAApB,KAFgB,EAGhB;AAAEE,MAAAA,IAAI,EAAE,GAAR;AAAaF,MAAAA,KAAK,EAAE;AAApB,KAHgB,EAIhB;AAAEE,MAAAA,IAAI,EAAE,GAAR;AAAaF,MAAAA,KAAK,EAAE,GAApB;AAAyBgB,MAAAA,KAAK,EAAE,CAAC,QAAD;AAAhC,KAJgB,EAKhB;AAAEd,MAAAA,IAAI,EAAE,GAAR;AAAaF,MAAAA,KAAK,EAAE,GAApB;AAAyBgB,MAAAA,KAAK,EAAE,CAAC,QAAD;AAAhC,KALgB,CARb;AAeLC,IAAAA,gBAAgB,EAAE,CAChB;AAAEf,MAAAA,IAAI,EAAE,GAAR;AAAaF,MAAAA,KAAK,EAAE;AAApB,KADgB,EAEhB;AAAEE,MAAAA,IAAI,EAAE,GAAR;AAAaF,MAAAA,KAAK,EAAE;AAApB,KAFgB,EAGhB;AAAEE,MAAAA,IAAI,EAAE,GAAR;AAAaF,MAAAA,KAAK,EAAE;AAApB,KAHgB,EAIhB;AAAEE,MAAAA,IAAI,EAAE,GAAR;AAAaF,MAAAA,KAAK,EAAE;AAApB,KAJgB,EAKhB;AAAEE,MAAAA,IAAI,EAAE,GAAR;AAAaF,MAAAA,KAAK,EAAE;AAApB,KALgB,EAMhB;AAAEE,MAAAA,IAAI,EAAE,GAAR;AAAaF,MAAAA,KAAK,EAAE;AAApB,KANgB,CAfb;AAuBLkB,IAAAA,OAAO,EAAE;AACPC,MAAAA,OAAO,EAAE;AACPC,QAAAA,KAAK,EAAE,IAAIC,MAAJ,CAAY,aAAYvB,cAAc,CAACwB,IAAf,CAAoB,GAApB,CAAyB,kCAAjD,CADA;AAEPC,QAAAA,GAAG,EAAE,IAAIF,MAAJ,CAAY,cAAavB,cAAc,CAACwB,IAAf,CAAoB,GAApB,CAAyB,iBAAlD;AAFE;AADF,KAvBJ;AA6BLE,IAAAA,YAAY,EAAE,CACZ;AACEC,MAAAA,UAAU,EAAE,IAAIJ,MAAJ,CAAY,gBAAexB,cAAc,CAACyB,IAAf,CAAoB,GAApB,CAAyB,iDAApD,CADd;AAEEI,MAAAA,SAAS,EAAE,IAAIL,MAAJ,CAAY,2CAAZ,CAFb;AAGEM,MAAAA,MAAM,EAAE;AACNC,QAAAA,YAAY,EAAEjC,0BAA0B,CAACkC,SAA3B,CAAqCC,YAArC,CAAkDC;AAD1D;AAHV,KADY,EAQZ;AACEN,MAAAA,UAAU,EAAE,IAAIJ,MAAJ,CAAY,gBAAexB,cAAc,CAACyB,IAAf,CAAoB,GAApB,CAAyB,iDAApD,CADd;AAEEK,MAAAA,MAAM,EAAE;AAAEC,QAAAA,YAAY,EAAEjC,0BAA0B,CAACkC,SAA3B,CAAqCC,YAArC,CAAkDE;AAAlE;AAFV,KARY;AA7BT,GAAP;AA2CD;;AACD,SAASE,qBAAT,CAA+BxB,EAA/B,EAAmCyB,EAAnC,EAAuC;AACrC,QAAMlC,EAAE,GAAI,IAAGS,EAAE,CAACT,EAAG,IAAGkC,EAAE,CAAClC,EAAG,EAA9B;;AACA,QAAMmC,CAAC,GAAIC,IAAD,IAAUA,IAAI,CAACC,OAAL,CAAa,SAAb,EAAwBrC,EAAxB,CAApB;;AACA,QAAMsC,CAAC,GAAIC,MAAD,IAAY;AACpB,UAAMC,MAAM,GAAGD,MAAM,CAACC,MAAP,CAAcH,OAAd,CAAsB,SAAtB,EAAiCrC,EAAjC,CAAf;AACA,WAAO,IAAIoB,MAAJ,CAAWoB,MAAX,EAAmBD,MAAM,CAACE,KAA1B,CAAP;AACD,GAHD;;AAIA,SAAO;AACLC,IAAAA,OAAO,EAAE,IADJ;AAELC,IAAAA,SAAS,EAAE,KAFN;AAGLxB,IAAAA,KAAK,EAAEgB,CAAC,CAAC,eAAD,CAHH;AAILS,IAAAA,UAAU,EAAE,KAJP;AAKLC,IAAAA,YAAY,EAAE,SALT;AAMLC,IAAAA,YAAY,EAAG,cANV;AAOLpC,IAAAA,QAAQ,EAAE,CACR;AAAET,MAAAA,IAAI,EAAE,GAAR;AAAaF,MAAAA,KAAK,EAAE,GAApB;AAAyBgD,MAAAA,KAAK,EAAE;AAAhC,KADQ,EAER;AAAE9C,MAAAA,IAAI,EAAE,GAAR;AAAaF,MAAAA,KAAK,EAAE,GAApB;AAAyBgD,MAAAA,KAAK,EAAE;AAAhC,KAFQ,EAGR;AAAE9C,MAAAA,IAAI,EAAE,GAAR;AAAaF,MAAAA,KAAK,EAAE,GAApB;AAAyBgD,MAAAA,KAAK,EAAE;AAAhC,KAHQ,EAIR;AAAE9C,MAAAA,IAAI,EAAE,GAAR;AAAaF,MAAAA,KAAK,EAAE,GAApB;AAAyBgD,MAAAA,KAAK,EAAE;AAAhC,KAJQ,CAPL;AAaL,KAACZ,CAAC,CAAC,YAAD,CAAF,GAAmB,IAAIf,MAAJ,CAAWX,EAAE,CAACR,IAAd,CAbd;AAcL,KAACkC,CAAC,CAAC,aAAD,CAAF,GAAoB,IAAIf,MAAJ,CAAWX,EAAE,CAACV,KAAd,CAdf;AAeL,KAACoC,CAAC,CAAC,cAAD,CAAF,GAAqB,IAAIf,MAAJ,CAAWc,EAAE,CAAC7B,KAAd,CAfhB;AAgBL,KAAC8B,CAAC,CAAC,cAAD,CAAF,GAAqB,IAAIf,MAAJ,CAAWc,EAAE,CAAC5B,KAAd,CAhBhB;AAiBL,KAAC6B,CAAC,CAAC,cAAD,CAAF,GAAqB,IAAIf,MAAJ,CAAWc,EAAE,CAACnC,KAAd,CAjBhB;AAkBL,KAACoC,CAAC,CAAC,gBAAD,CAAF,GAAuBG,CAAC,CAAC,kBAAD,CAlBnB;AAmBL,KAACH,CAAC,CAAC,cAAD,CAAF,GAAqBG,CAAC,CAAC,oBAAD,CAnBjB;AAoBL,KAACH,CAAC,CAAC,qBAAD,CAAF,GAA4BG,CAAC,CAAC,qBAAD,CApBxB;AAqBL,KAACH,CAAC,CAAC,iBAAD,CAAF,GAAwBG,CAAC,CAAC,6BAAD,CArBpB;AAsBL,KAACH,CAAC,CAAC,iBAAD,CAAF,GAAwBG,CAAC,CAAC,gCAAD,CAtBpB;AAuBLU,IAAAA,KAAK,EAAE,WAvBF;AAwBLC,IAAAA,QAAQ,EAAE,CAAC,OAAD,EAAU,MAAV,EAAkB,IAAlB,EAAwB,IAAxB,EAA8B,OAA9B,CAxBL;AAyBLC,IAAAA,uBAAuB,EAAE,oGAzBpB;AA0BLC,IAAAA,uBAAuB,EAAE,8EA1BpB;AA2BLC,IAAAA,mBAAmB,EAAE,qLA3BhB;AA4BLC,IAAAA,qBAAqB,EAAE,6KA5BlB;AA6BLC,IAAAA,WAAW,EAAE,+CA7BR;AA8BLC,IAAAA,UAAU,EAAE,OA9BP;AA+BLC,IAAAA,OAAO,EAAE,QA/BJ;AAgCLC,IAAAA,qBAAqB,EAAE,k9CAhClB;AAiCLC,IAAAA,aAAa,EAAE,YAjCV;AAkCLC,IAAAA,WAAW,EAAE,+CAlCR;AAmCL3D,IAAAA,EAAE,EAAE,uDAnCC;AAoCL4D,IAAAA,eAAe,EAAE,gCApCZ;AAqCLC,IAAAA,YAAY,EAAE,0LArCT;AAsCLC,IAAAA,MAAM,EAAE,CAAC,IAAD,EAAO,OAAP,CAtCH;AAuCLC,IAAAA,UAAU,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CAvCP;AAwCLC,IAAAA,eAAe,EAAE,CAAC,KAAD,EAAQ,IAAR,EAAc,KAAd,EAAqB,IAArB,CAxCZ;AAyCLC,IAAAA,WAAW,EAAE,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,CAzCR;AA0CLC,IAAAA,SAAS,EAAE;AACT,OAAC/B,CAAC,CAAC,eAAD,CAAF,GAAsB,CACpB;AAAEgC,QAAAA,OAAO,EAAEhC,CAAC,CAAC,wBAAD;AAAZ,OADoB,EAEpB;AAAEgC,QAAAA,OAAO,EAAEhC,CAAC,CAAC,qCAAD;AAAZ,OAFoB,CADb;AAKT,OAACA,CAAC,CAAC,8BAAD,CAAF,GAAqC,CACnC;AAAEgC,QAAAA,OAAO,EAAEhC,CAAC,CAAC,2CAAD;AAAZ,OADmC,EAEnC;AAAEgC,QAAAA,OAAO,EAAEhC,CAAC,CAAC,4BAAD;AAAZ,OAFmC,EAGnC;AAAEgC,QAAAA,OAAO,EAAEhC,CAAC,CAAC,yBAAD;AAAZ,OAHmC,CAL5B;AAUT,OAACA,CAAC,CAAC,kCAAD,CAAF,GAAyC,CACvC;AAAEgC,QAAAA,OAAO,EAAEhC,CAAC,CAAC,2CAAD;AAAZ,OADuC,EAEvC;AAAEgC,QAAAA,OAAO,EAAEhC,CAAC,CAAC,yBAAD;AAAZ,OAFuC,EAGvC;AAAEgC,QAAAA,OAAO,EAAEhC,CAAC,CAAC,gCAAD;AAAZ,OAHuC,CAVhC;AAeT,OAACA,CAAC,CAAC,qBAAD,CAAF,GAA4B,CAC1B;AAAEgC,QAAAA,OAAO,EAAEhC,CAAC,CAAC,2CAAD;AAAZ,OAD0B,EAE1B;AAAEgC,QAAAA,OAAO,EAAEhC,CAAC,CAAC,4BAAD;AAAZ,OAF0B,EAG1B;AAAEgC,QAAAA,OAAO,EAAEhC,CAAC,CAAC,yBAAD;AAAZ,OAH0B,CAfnB;AAoBT,OAACA,CAAC,CAAC,kBAAD,CAAF,GAAyB,CACvB;AAAEgC,QAAAA,OAAO,EAAEhC,CAAC,CAAC,2CAAD;AAAZ,OADuB,EAEvB;AAAEgC,QAAAA,OAAO,EAAEhC,CAAC,CAAC,yBAAD;AAAZ,OAFuB,EAGvB;AAAEgC,QAAAA,OAAO,EAAEhC,CAAC,CAAC,gCAAD;AAAZ,OAHuB,CApBhB;AAyBT,OAACA,CAAC,CAAC,yBAAD,CAAF,GAAgC,CAC9B;AAAEgC,QAAAA,OAAO,EAAEhC,CAAC,CAAC,sCAAD;AAAZ,OAD8B,EAE9B;AAAEgC,QAAAA,OAAO,EAAEhC,CAAC,CAAC,4BAAD;AAAZ,OAF8B,EAG9B;AAAEgC,QAAAA,OAAO,EAAEhC,CAAC,CAAC,yBAAD;AAAZ,OAH8B,CAzBvB;AA8BT,OAACA,CAAC,CAAC,mBAAD,CAAF,GAA0B,CAAC;AAAEgC,QAAAA,OAAO,EAAEhC,CAAC,CAAC,2BAAD;AAAZ,OAAD,CA9BjB;AA+BT,OAACA,CAAC,CAAC,oBAAD,CAAF,GAA2B,CAAC;AAAEgC,QAAAA,OAAO,EAAEhC,CAAC,CAAC,4BAAD;AAAZ,OAAD,CA/BlB;AAgCT,OAACA,CAAC,CAAC,oBAAD,CAAF,GAA2B,CAAC;AAAEgC,QAAAA,OAAO,EAAEhC,CAAC,CAAC,4BAAD;AAAZ,OAAD,CAhClB;AAiCT,OAACA,CAAC,CAAC,uBAAD,CAAF,GAA8B,CAAC;AAAEgC,QAAAA,OAAO,EAAEhC,CAAC,CAAC,gCAAD;AAAZ,OAAD,CAjCrB;AAkCT,OAACA,CAAC,CAAC,uBAAD,CAAF,GAA8B,CAAC;AAAEgC,QAAAA,OAAO,EAAEhC,CAAC,CAAC,gCAAD;AAAZ,OAAD,CAlCrB;AAmCT,OAACA,CAAC,CAAC,yBAAD,CAAF,GAAgC,CAAC;AAAEgC,QAAAA,OAAO,EAAEhC,CAAC,CAAC,iCAAD;AAAZ,OAAD,CAnCvB;AAoCT,OAACA,CAAC,CAAC,eAAD,CAAF,GAAsB,CAAC;AAAEgC,QAAAA,OAAO,EAAEhC,CAAC,CAAC,uBAAD;AAAZ,OAAD,CApCb;AAqCT,OAACA,CAAC,CAAC,oBAAD,CAAF,GAA2B,CAAC;AAAEgC,QAAAA,OAAO,EAAEhC,CAAC,CAAC,4BAAD;AAAZ,OAAD,CArClB;AAsCT,OAACA,CAAC,CAAC,uBAAD,CAAF,GAA8B,CAC5B,CACEG,CAAC,CAAC,mEAAD,CADH,EAEE7B,EAAE,CAACT,EAAH,KAAU,MAAV,GAAmB;AACjBoE,QAAAA,KAAK,EAAE;AACL,mBAAS;AAAErB,YAAAA,KAAK,EAAE,UAAT;AAAqBsB,YAAAA,QAAQ,EAAG,kBAAiBnC,EAAE,CAAClC,EAAG;AAAvD,WADJ;AAEL,mBAAS;AAAE+C,YAAAA,KAAK,EAAE,UAAT;AAAqBsB,YAAAA,QAAQ,EAAG,oBAAmBnC,EAAE,CAAClC,EAAG;AAAzD;AAFJ;AADU,OAAnB,GAKI,CACF;AAAE+C,QAAAA,KAAK,EAAE;AAAT,OADE,EAEF;AAAEA,QAAAA,KAAK,EAAE;AAAT,OAFE,EAGF;AACEqB,QAAAA,KAAK,EAAE;AACL,0BAAgB;AAAErB,YAAAA,KAAK,EAAE,KAAT;AAAgBuB,YAAAA,IAAI,EAAEnC,CAAC,CAAC,mBAAD;AAAvB,WADX;AAEL,sBAAY;AAAEY,YAAAA,KAAK,EAAE;AAAT;AAFP;AADT,OAHE,EASF;AAAEA,QAAAA,KAAK,EAAE;AAAT,OATE,EAUF;AAAEA,QAAAA,KAAK,EAAE;AAAT,OAVE,CAPN,CAD4B,EAqB5B,CACET,CAAC,CAAC,mEAAD,CADH,EAEE7B,EAAE,CAACT,EAAH,KAAU,MAAV,GAAmB;AACjBoE,QAAAA,KAAK,EAAE;AACL,mBAAS;AAAErB,YAAAA,KAAK,EAAE,UAAT;AAAqBsB,YAAAA,QAAQ,EAAG,kBAAiBnC,EAAE,CAAClC,EAAG;AAAvD,WADJ;AAEL,mBAAS;AAAE+C,YAAAA,KAAK,EAAE,UAAT;AAAqBsB,YAAAA,QAAQ,EAAG,oBAAmBnC,EAAE,CAAClC,EAAG;AAAzD;AAFJ;AADU,OAAnB,GAKI,CACF;AAAE+C,QAAAA,KAAK,EAAE;AAAT,OADE,EAEF;AAAEA,QAAAA,KAAK,EAAE;AAAT,OAFE,EAGF;AAAEA,QAAAA,KAAK,EAAE;AAAT,OAHE,EAIF;AAAEA,QAAAA,KAAK,EAAE;AAAT,OAJE,EAKF;AAAEA,QAAAA,KAAK,EAAE;AAAT,OALE,CAPN,CArB4B,EAoC5B,CACET,CAAC,CAAC,mDAAD,CADH,EAEE7B,EAAE,CAACT,EAAH,KAAU,MAAV,GAAmB;AACjBoE,QAAAA,KAAK,EAAE;AACL,mBAAS;AAAErB,YAAAA,KAAK,EAAE,UAAT;AAAqBsB,YAAAA,QAAQ,EAAG,kBAAiBnC,EAAE,CAAClC,EAAG;AAAvD,WADJ;AAEL,mBAAS;AAAE+C,YAAAA,KAAK,EAAE,UAAT;AAAqBsB,YAAAA,QAAQ,EAAG,oBAAmBnC,EAAE,CAAClC,EAAG;AAAzD;AAFJ;AADU,OAAnB,GAKI,CACF;AAAE+C,QAAAA,KAAK,EAAE;AAAT,OADE,EAEF;AAAEA,QAAAA,KAAK,EAAE;AAAT,OAFE,EAGF;AAAEA,QAAAA,KAAK,EAAE;AAAT,OAHE,EAIF;AAAEA,QAAAA,KAAK,EAAE,EAAT;AAAauB,QAAAA,IAAI,EAAEnC,CAAC,CAAC,+BAAD;AAApB,OAJE,CAPN,CApC4B,EAkD5B,CACEG,CAAC,CAAC,+DAAD,CADH,EAEE7B,EAAE,CAACT,EAAH,KAAU,MAAV,GAAmB;AACjBoE,QAAAA,KAAK,EAAE;AACL,mBAAS;AAAErB,YAAAA,KAAK,EAAE,UAAT;AAAqBsB,YAAAA,QAAQ,EAAG,kBAAiBnC,EAAE,CAAClC,EAAG;AAAvD,WADJ;AAEL,mBAAS;AAAE+C,YAAAA,KAAK,EAAE,UAAT;AAAqBsB,YAAAA,QAAQ,EAAG,oBAAmBnC,EAAE,CAAClC,EAAG;AAAzD;AAFJ;AADU,OAAnB,GAKI,CACF;AAAE+C,QAAAA,KAAK,EAAE;AAAT,OADE,EAEF;AAAEA,QAAAA,KAAK,EAAE;AAAT,OAFE,EAGF;AAAEA,QAAAA,KAAK,EAAE;AAAT,OAHE,EAIF;AAAEA,QAAAA,KAAK,EAAE;AAAT,OAJE,EAKF;AAAEA,QAAAA,KAAK,EAAE;AAAT,OALE,CAPN,CAlD4B,EAiE5B,CACET,CAAC,CAAC,kBAAD,CADH,EAEE7B,EAAE,CAACT,EAAH,KAAU,MAAV,GAAmB;AACjBoE,QAAAA,KAAK,EAAE;AACL,mBAAS;AAAErB,YAAAA,KAAK,EAAE,UAAT;AAAqBsB,YAAAA,QAAQ,EAAG,kBAAiBnC,EAAE,CAAClC,EAAG;AAAvD,WADJ;AAEL,mBAAS;AAAE+C,YAAAA,KAAK,EAAE,UAAT;AAAqBsB,YAAAA,QAAQ,EAAG,oBAAmBnC,EAAE,CAAClC,EAAG;AAAzD;AAFJ;AADU,OAAnB,GAKI,CACF;AAAE+C,QAAAA,KAAK,EAAE;AAAT,OADE,EAEF;AAAEA,QAAAA,KAAK,EAAE,qBAAT;AAAgCuB,QAAAA,IAAI,EAAEnC,CAAC,CAAC,oBAAD;AAAvC,OAFE,CAPN,CAjE4B,EA6E5B,CACEG,CAAC,CAAC,oEAAD,CADH,EAEE,CACE;AAAES,QAAAA,KAAK,EAAE;AAAT,OADF,EAEE;AAAEA,QAAAA,KAAK,EAAE;AAAT,OAFF,EAGE;AAAEA,QAAAA,KAAK,EAAE;AAAT,OAHF,EAIE;AAAEA,QAAAA,KAAK,EAAE;AAAT,OAJF,EAKE;AAAEA,QAAAA,KAAK,EAAE;AAAT,OALF,CAFF,CA7E4B,EAuF5B,CACET,CAAC,CAAC,kBAAD,CADH,EAEE7B,EAAE,CAACT,EAAH,KAAU,MAAV,GAAmB;AACjBoE,QAAAA,KAAK,EAAE;AACL,mBAAS;AAAErB,YAAAA,KAAK,EAAE,UAAT;AAAqBsB,YAAAA,QAAQ,EAAG,kBAAiBnC,EAAE,CAAClC,EAAG;AAAvD,WADJ;AAEL,mBAAS;AAAE+C,YAAAA,KAAK,EAAE,UAAT;AAAqBsB,YAAAA,QAAQ,EAAG,oBAAmBnC,EAAE,CAAClC,EAAG;AAAzD;AAFJ;AADU,OAAnB,GAKI;AAAE+C,QAAAA,KAAK,EAAE,SAAT;AAAoBuB,QAAAA,IAAI,EAAEnC,CAAC,CAAC,qBAAD;AAA3B,OAPN,CAvF4B,EAgG5B,CACEG,CAAC,CAAC,sCAAD,CADH,EAEE7B,EAAE,CAACT,EAAH,KAAU,MAAV,GAAmB;AACjBoE,QAAAA,KAAK,EAAE;AACL,mBAAS;AAAErB,YAAAA,KAAK,EAAE,UAAT;AAAqBsB,YAAAA,QAAQ,EAAG,kBAAiBnC,EAAE,CAAClC,EAAG;AAAvD,WADJ;AAEL,mBAAS;AAAE+C,YAAAA,KAAK,EAAE,UAAT;AAAqBsB,YAAAA,QAAQ,EAAG,oBAAmBnC,EAAE,CAAClC,EAAG;AAAzD;AAFJ;AADU,OAAnB,GAKI,CACF;AAAE+C,QAAAA,KAAK,EAAE;AAAT,OADE,EAEF;AAAEA,QAAAA,KAAK,EAAE;AAAT,OAFE,EAGF;AAAEA,QAAAA,KAAK,EAAE,aAAT;AAAwBuB,QAAAA,IAAI,EAAEnC,CAAC,CAAC,+BAAD;AAA/B,OAHE,CAPN,CAhG4B,CAtCrB;AAoJT,OAACA,CAAC,CAAC,oCAAD,CAAF,GAA2C,CACzC,CACEG,CAAC,CAAC,gCAAD,CADH,EAEE,CACE;AAAES,QAAAA,KAAK,EAAEb,EAAE,CAAClC,EAAH,KAAU,SAAV,GAAsB,yBAAtB,GAAkD;AAA3D,OADF,EAEE;AACE+C,QAAAA,KAAK,EAAEb,EAAE,CAAClC,EAAH,KAAU,SAAV,GAAsB,yBAAtB,GAAkD,yBAD3D;AAEEsE,QAAAA,IAAI,EAAEnC,CAAC,CAAC,mCAAD;AAFT,OAFF,CAFF,CADyC,EAWzC,CAAC,4CAAD,EAA+C;AAAEY,QAAAA,KAAK,EAAE;AAAT,OAA/C,CAXyC,CApJlC;AAiKT,OAACZ,CAAC,CAAC,2BAAD,CAAF,GAAkC,CAChC,CAAC,QAAD,EAAW;AAAEY,QAAAA,KAAK,EAAE;AAAT,OAAX,CADgC,EAEhC,CAAC,cAAD,EAAiB;AAAEA,QAAAA,KAAK,EAAE;AAAT,OAAjB,CAFgC,EAGhC,CAAC,GAAD,EAAM;AAAEA,QAAAA,KAAK,EAAE,QAAT;AAAmBuB,QAAAA,IAAI,EAAE;AAAzB,OAAN,CAHgC,CAjKzB;AAsKT,OAACnC,CAAC,CAAC,2BAAD,CAAF,GAAkC,CAChC,CAAC,QAAD,EAAW;AAAEY,QAAAA,KAAK,EAAE;AAAT,OAAX,CADgC,EAEhC,CAAC,cAAD,EAAiB;AAAEA,QAAAA,KAAK,EAAE;AAAT,OAAjB,CAFgC,EAGhC,CAAC,GAAD,EAAM;AAAEA,QAAAA,KAAK,EAAE,QAAT;AAAmBuB,QAAAA,IAAI,EAAE;AAAzB,OAAN,CAHgC,CAtKzB;AA2KT,OAACnC,CAAC,CAAC,+BAAD,CAAF,GAAsC,CACpC,CAAC,OAAD,EAAU;AAAEY,QAAAA,KAAK,EAAE;AAAT,OAAV,CADoC,EAEpC,CAAC,GAAD,EAAM;AAAEA,QAAAA,KAAK,EAAE,YAAT;AAAuBuB,QAAAA,IAAI,EAAE;AAA7B,OAAN,CAFoC,CA3K7B;AA+KT,OAACnC,CAAC,CAAC,+BAAD,CAAF,GAAsC,CACpC,CAAC,OAAD,EAAU;AAAEY,QAAAA,KAAK,EAAE;AAAT,OAAV,CADoC,EAEpC,CAAC,GAAD,EAAM;AAAEA,QAAAA,KAAK,EAAE,YAAT;AAAuBuB,QAAAA,IAAI,EAAE;AAA7B,OAAN,CAFoC,CA/K7B;AAmLT,OAACnC,CAAC,CAAC,wBAAD,CAAF,GAA+B,CAC7B,CACE,YADF,EAEE;AACEiC,QAAAA,KAAK,EAAE;AACL,gBAAM,CACJ;AAAErB,YAAAA,KAAK,EAAE;AAAT,WADI,EAEJ;AAAEA,YAAAA,KAAK,EAAE,YAAT;AAAuBuB,YAAAA,IAAI,EAAEnC,CAAC,CAAC,wBAAD;AAA9B,WAFI,CADD;AAKL,gBAAM,CACJ;AAAEY,YAAAA,KAAK,EAAE;AAAT,WADI,EAEJ;AAAEA,YAAAA,KAAK,EAAE,YAAT;AAAuBuB,YAAAA,IAAI,EAAEnC,CAAC,CAAC,wBAAD;AAA9B,WAFI,CALD;AASL,eAAK,CAAC;AAAEY,YAAAA,KAAK,EAAE;AAAT,WAAD,EAAsB;AAAEA,YAAAA,KAAK,EAAE,QAAT;AAAmBuB,YAAAA,IAAI,EAAEnC,CAAC,CAAC,qBAAD;AAA1B,WAAtB,CATA;AAUL,eAAK,CAAC;AAAEY,YAAAA,KAAK,EAAE;AAAT,WAAD,EAAsB;AAAEA,YAAAA,KAAK,EAAE,QAAT;AAAmBuB,YAAAA,IAAI,EAAEnC,CAAC,CAAC,qBAAD;AAA1B,WAAtB;AAVA;AADT,OAFF,CAD6B,EAkB7B,CACE,iCADF,EAEE;AACEiC,QAAAA,KAAK,EAAE;AACL,0BAAgB;AAAErB,YAAAA,KAAK,EAAE;AAAT,WADX;AAEL,sBAAY;AAAEA,YAAAA,KAAK,EAAE;AAAT;AAFP;AADT,OAFF,CAlB6B,EA2B7B,CACE,iCADF,EAEE,CAAC;AAAEA,QAAAA,KAAK,EAAE;AAAT,OAAD,EAAyB;AAAEA,QAAAA,KAAK,EAAE;AAAT,OAAzB,EAAwC;AAAEA,QAAAA,KAAK,EAAE;AAAT,OAAxC,CAFF,CA3B6B,EA+B7B,CACE,mBADF,EAEE;AACEqB,QAAAA,KAAK,EAAE;AACL,qBAAW;AAAErB,YAAAA,KAAK,EAAE;AAAT,WADN;AAEL,yBAAe;AAAEA,YAAAA,KAAK,EAAE;AAAT,WAFV;AAGL,sBAAY;AAAEA,YAAAA,KAAK,EAAE;AAAT;AAHP;AADT,OAFF,CA/B6B,EAyC7B,CACE,KADF,EAEE;AACEqB,QAAAA,KAAK,EAAE;AACL,uBAAa;AAAErB,YAAAA,KAAK,EAAE;AAAT,WADR;AAEL,8BAAoB;AAAEA,YAAAA,KAAK,EAAE;AAAT,WAFf;AAGL,sBAAY;AAAEA,YAAAA,KAAK,EAAE;AAAT;AAHP;AADT,OAFF,CAzC6B,EAmD7B,CACE,gBADF,EAEE;AACEqB,QAAAA,KAAK,EAAE;AACL,iBAAO;AACLA,YAAAA,KAAK,EAAE;AACL,yBAAW;AAAErB,gBAAAA,KAAK,EAAE,WAAT;AAAsBuB,gBAAAA,IAAI,EAAEnC,CAAC,CAAC,mBAAD;AAA7B,eADN;AAEL,0BAAY;AAAEY,gBAAAA,KAAK,EAAE,WAAT;AAAsBuB,gBAAAA,IAAI,EAAEnC,CAAC,CAAC,sBAAD;AAA7B;AAFP;AADF,WADF;AAOL,iBAAO;AACLiC,YAAAA,KAAK,EAAE,EACL,IAAGlC,EAAE,CAAClC,EAAH,KAAU,SAAV,GAAsB;AACvB,sCAAsB;AAAE+C,kBAAAA,KAAK,EAAE,yBAAT;AAAoCuB,kBAAAA,IAAI,EAAE;AAA1C;AADC,eAAtB,GAEC,EAFJ,CADK;AAIL,kBAAG7D,EAAE,CAACT,EAAH,KAAU,SAAV,GAAsB;AACvB,kCAAkB;AAAE+C,kBAAAA,KAAK,EAAE,qBAAT;AAAgCuB,kBAAAA,IAAI,EAAE;AAAtC;AADK,eAAtB,GAEC,EAFJ,CAJK;AAOL,eAACnC,CAAC,CAAC,oBAAD,CAAF,GAA2B;AAAEY,gBAAAA,KAAK,EAAE,WAAT;AAAsBuB,gBAAAA,IAAI,EAAE;AAA5B,eAPtB;AAQL,0BAAY;AAAEvB,gBAAAA,KAAK,EAAE;AAAT;AARP;AADF,WAPF;AAmBL,iBAAO;AAAEA,YAAAA,KAAK,EAAE,WAAT;AAAsBuB,YAAAA,IAAI,EAAEnC,CAAC,CAAC,mBAAD;AAA7B,WAnBF;AAoBL,iBAAO;AACLiC,YAAAA,KAAK,EAAE;AACL,eAACjC,CAAC,CAAC,oBAAD,CAAF,GAA2B;AAAEY,gBAAAA,KAAK,EAAE,WAAT;AAAsBuB,gBAAAA,IAAI,EAAE;AAA5B,eADtB;AAEL,0BAAY;AAAEvB,gBAAAA,KAAK,EAAE;AAAT;AAFP;AADF,WApBF;AA0BL,iBAAO;AACLqB,YAAAA,KAAK,EAAE;AACL,yBAAW;AAAErB,gBAAAA,KAAK,EAAE,WAAT;AAAsBuB,gBAAAA,IAAI,EAAEnC,CAAC,CAAC,mBAAD;AAA7B,eADN;AAEL,0BAAY;AAAEY,gBAAAA,KAAK,EAAE,WAAT;AAAsBuB,gBAAAA,IAAI,EAAEnC,CAAC,CAAC,sBAAD;AAA7B;AAFP;AADF,WA1BF;AAgCL,iBAAO;AACLiC,YAAAA,KAAK,EAAE,EACL,IAAGlC,EAAE,CAAClC,EAAH,KAAU,SAAV,GAAsB,EAAtB,GAA2B;AAC5B,sCAAsB;AAAE+C,kBAAAA,KAAK,EAAE,yBAAT;AAAoCuB,kBAAAA,IAAI,EAAE;AAA1C;AADM,eAA9B,CADK;AAIL,eAACnC,CAAC,CAAC,oBAAD,CAAF,GAA2B;AAAEY,gBAAAA,KAAK,EAAE,WAAT;AAAsBuB,gBAAAA,IAAI,EAAE;AAA5B,eAJtB;AAKL,0BAAY;AAAEvB,gBAAAA,KAAK,EAAE;AAAT;AALP;AADF;AAhCF;AADT,OAFF,CAnD6B,EAkG7B,CAAC,MAAD,EAAS;AAAEA,QAAAA,KAAK,EAAE;AAAT,OAAT,CAlG6B,CAnLtB;AAuRT,OAACZ,CAAC,CAAC,0CAAD,CAAF,GAAiD,CAC/C,CAAC,aAAD,EAAgB;AAAEY,QAAAA,KAAK,EAAE;AAAT,OAAhB,CAD+C,EAE/C,CAAC,aAAD,EAAgB;AAAEA,QAAAA,KAAK,EAAE,SAAT;AAAoBuB,QAAAA,IAAI,EAAEnC,CAAC,CAAC,0BAAD;AAA3B,OAAhB,CAF+C,CAvRxC;AA2RT,OAACA,CAAC,CAAC,2BAAD,CAAF,GAAkC,CAChC,CACE,GADF,EAEE1B,EAAE,CAACT,EAAH,KAAU,SAAV,GAAsB;AAAE+C,QAAAA,KAAK,EAAE;AAAT,OAAtB,GAA+C;AAAEA,QAAAA,KAAK,EAAE,qBAAT;AAAgCuB,QAAAA,IAAI,EAAE;AAAtC,OAFjD,CADgC,EAKhC,CACEhC,CAAC,CAAC,oBAAD,CADH,EAEE,CAAC;AAAES,QAAAA,KAAK,EAAE;AAAT,OAAD,EAAmC;AAAEA,QAAAA,KAAK,EAAE,qBAAT;AAAgCuB,QAAAA,IAAI,EAAE;AAAtC,OAAnC,CAFF,CALgC,CA3RzB;AAqST,OAACnC,CAAC,CAAC,+BAAD,CAAF,GAAsC,CACpC,CAAC,GAAD,EAAM;AAAEY,QAAAA,KAAK,EAAE;AAAT,OAAN,CADoC,EAEpC,CAAC,IAAD,EAAO;AAAEA,QAAAA,KAAK,EAAE;AAAT,OAAP,CAFoC,CArS7B;AAyST,OAACZ,CAAC,CAAC,qCAAD,CAAF,GAA4C,CAC1C,CAAC,aAAD,EAAgB;AAAEY,QAAAA,KAAK,EAAE,EAAT;AAAasB,QAAAA,QAAQ,EAAElC,CAAC,CAAC,+BAAD;AAAxB,OAAhB,CAD0C,CAzSnC;AA4ST,OAACA,CAAC,CAAC,0BAAD,CAAF,GAAiC,CAC/B,CACE,oBADF,EAEE,CAAC;AAAEY,QAAAA,KAAK,EAAE;AAAT,OAAD,EAAmB;AAAEA,QAAAA,KAAK,EAAE,EAAT;AAAauB,QAAAA,IAAI,EAAEnC,CAAC,CAAC,+BAAD;AAApB,OAAnB,CAFF,CAD+B,EAK/B,CACEG,CAAC,CAAC,0BAAD,CADH,EAEE,CACE;AAAES,QAAAA,KAAK,EAAE;AAAT,OADF,EAEE;AAAEA,QAAAA,KAAK,EAAE;AAAT,OAFF,EAGE;AAAEA,QAAAA,KAAK,EAAE,qBAAT;AAAgCuB,QAAAA,IAAI,EAAE;AAAtC,OAHF,CAFF,CAL+B,EAa/B,CAAC,GAAD,EAAM;AAAEvB,QAAAA,KAAK,EAAE,UAAT;AAAqBuB,QAAAA,IAAI,EAAEnC,CAAC,CAAC,0BAAD;AAA5B,OAAN,CAb+B,CA5SxB;AA2TT,OAACA,CAAC,CAAC,sBAAD,CAAF,GAA6B,CAC3B,CACEG,CAAC,CAAC,2DAAD,CADH,EAEE;AACE8B,QAAAA,KAAK,EAAE;AACL,qBAAW,CACT;AAAErB,YAAAA,KAAK,EAAE;AAAT,WADS,EAET;AAAEA,YAAAA,KAAK,EAAE;AAAT,WAFS,EAGT;AAAEA,YAAAA,KAAK,EAAE;AAAT,WAHS,EAIT;AAAEA,YAAAA,KAAK,EAAE;AAAT,WAJS,EAKT;AAAEA,YAAAA,KAAK,EAAE,qBAAT;AAAgCuB,YAAAA,IAAI,EAAE;AAAtC,WALS,CADN;AAQL,0BAAgB,CACd;AAAEvB,YAAAA,KAAK,EAAE;AAAT,WADc,EAEd;AAAEA,YAAAA,KAAK,EAAE;AAAT,WAFc,EAGd;AAAEA,YAAAA,KAAK,EAAE;AAAT,WAHc,EAId;AAAEA,YAAAA,KAAK,EAAE;AAAT,WAJc,EAKd;AAAEA,YAAAA,KAAK,EAAE;AAAT,WALc,CARX;AAeL,sBAAY,CACV;AAAEA,YAAAA,KAAK,EAAE;AAAT,WADU,EAEV;AAAEA,YAAAA,KAAK,EAAE;AAAT,WAFU,EAGV;AAAEA,YAAAA,KAAK,EAAE;AAAT,WAHU,EAIV;AAAEA,YAAAA,KAAK,EAAE;AAAT,WAJU,EAKV;AAAEA,YAAAA,KAAK,EAAE;AAAT,WALU;AAfP;AADT,OAFF,CAD2B,EA6B3B,CACE,mBADF,EAEE;AACEqB,QAAAA,KAAK,EAAE;AACL,0BAAgB;AAAErB,YAAAA,KAAK,EAAE;AAAT,WADX;AAEL,sBAAY;AAAEA,YAAAA,KAAK,EAAE;AAAT;AAFP;AADT,OAFF,CA7B2B,CA3TpB;AAkWT,OAACZ,CAAC,CAAC,gCAAD,CAAF,GAAuC,CACrC,CACE,SADF,EAEE;AACEY,QAAAA,KAAK,EAAE,SADT;AAEEuB,QAAAA,IAAI,EAAE;AAFR,OAFF,CADqC,EAQrC,CAAC,mBAAD,EAAsB;AAAEvB,QAAAA,KAAK,EAAE;AAAT,OAAtB,CARqC,CAlW9B;AA4WT,OAACZ,CAAC,CAAC,2BAAD,CAAF,GAAkC,CAChC,CAACG,CAAC,CAAC,oBAAD,CAAF,EAA0B;AAAES,QAAAA,KAAK,EAAE,SAAT;AAAoBuB,QAAAA,IAAI,EAAE;AAA1B,OAA1B,CADgC,EAEhC,CAAC,mBAAD,EAAsB;AAAEvB,QAAAA,KAAK,EAAE;AAAT,OAAtB,CAFgC;AA5WzB;AA1CN,GAAP;AA4ZD;;AACD,SAASwB,yBAAT,CAAmCrC,EAAnC,EAAuC;AACrC,QAAMsC,KAAK,GAAGvC,qBAAqB,CAACnC,cAAD,EAAiBoC,EAAjB,CAAnC;AACA,QAAMuC,OAAO,GAAGxC,qBAAqB,CAAC/B,gBAAD,EAAmBgC,EAAnB,CAArC;AACA,QAAMwC,IAAI,GAAGzC,qBAAqB,CAAC9B,aAAD,EAAgB+B,EAAhB,CAAlC;AACA,SAAO,EACL,GAAGsC,KADE;AAEL,OAAGC,OAFE;AAGL,OAAGC,IAHE;AAILhC,IAAAA,OAAO,EAAE,IAJJ;AAKLC,IAAAA,SAAS,EAAE,KALN;AAMLxB,IAAAA,KAAK,EAAG,gBAAee,EAAE,CAAClC,EAAG,EANxB;AAOL4C,IAAAA,UAAU,EAAE,KAPP;AAQLC,IAAAA,YAAY,EAAE,SART;AASLC,IAAAA,YAAY,EAAG,cATV;AAULpC,IAAAA,QAAQ,EAAE,CACR;AAAET,MAAAA,IAAI,EAAE,GAAR;AAAaF,MAAAA,KAAK,EAAE,GAApB;AAAyBgD,MAAAA,KAAK,EAAE;AAAhC,KADQ,EAER;AAAE9C,MAAAA,IAAI,EAAE,GAAR;AAAaF,MAAAA,KAAK,EAAE,GAApB;AAAyBgD,MAAAA,KAAK,EAAE;AAAhC,KAFQ,EAGR;AAAE9C,MAAAA,IAAI,EAAE,GAAR;AAAaF,MAAAA,KAAK,EAAE,GAApB;AAAyBgD,MAAAA,KAAK,EAAE;AAAhC,KAHQ,EAIR;AAAE9C,MAAAA,IAAI,EAAE,GAAR;AAAaF,MAAAA,KAAK,EAAE,GAApB;AAAyBgD,MAAAA,KAAK,EAAE;AAAhC,KAJQ,CAVL;AAgBLmB,IAAAA,SAAS,EAAE,EACT,GAAGM,KAAK,CAACN,SADA;AAET,SAAGO,OAAO,CAACP,SAFF;AAGT,SAAGQ,IAAI,CAACR;AAHC;AAhBN,GAAP;AAsBD;;AACD,IAAIS,2BAA2B,GAAG;AAChCC,EAAAA,IAAI,EAAEpE,uBAAuB,CAACV,cAAD,CADG;AAEhC+E,EAAAA,QAAQ,EAAE5C,qBAAqB,CAACnC,cAAD,EAAiBM,yBAAjB;AAFC,CAAlC;AAIA,IAAI0E,6BAA6B,GAAG;AAClCF,EAAAA,IAAI,EAAEpE,uBAAuB,CAACN,gBAAD,CADK;AAElC2E,EAAAA,QAAQ,EAAE5C,qBAAqB,CAAC/B,gBAAD,EAAmBE,yBAAnB;AAFG,CAApC;AAIA,IAAI2E,4BAA4B,GAAG;AACjCH,EAAAA,IAAI,EAAEpE,uBAAuB,CAACV,cAAD,CADI;AAEjC+E,EAAAA,QAAQ,EAAE5C,qBAAqB,CAACnC,cAAD,EAAiBS,0BAAjB;AAFE,CAAnC;AAIA,IAAIyE,8BAA8B,GAAG;AACnCJ,EAAAA,IAAI,EAAEpE,uBAAuB,CAACN,gBAAD,CADM;AAEnC2E,EAAAA,QAAQ,EAAE5C,qBAAqB,CAAC/B,gBAAD,EAAmBK,0BAAnB;AAFI,CAArC;AAIA,IAAI0E,0BAA0B,GAAG;AAC/BL,EAAAA,IAAI,EAAE5C,2BAA2B,EADF;AAE/B6C,EAAAA,QAAQ,EAAEN,yBAAyB,CAACnE,yBAAD;AAFJ,CAAjC;AAIA,IAAI8E,2BAA2B,GAAG;AAChCN,EAAAA,IAAI,EAAE5C,2BAA2B,EADD;AAEhC6C,EAAAA,QAAQ,EAAEN,yBAAyB,CAAChE,0BAAD;AAFH,CAAlC;AAIA,SACEwE,4BADF,EAEEJ,2BAFF,EAGEO,2BAHF,EAIED,0BAJF,EAKED,8BALF,EAMEF,6BANF","sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __reExport = (target, module, copyDefault, desc) => {\n  if (module && typeof module === \"object\" || typeof module === \"function\") {\n    for (let key of __getOwnPropNames(module))\n      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== \"default\"))\n        __defProp(target, key, { get: () => module[key], enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable });\n  }\n  return target;\n};\n\n// src/fillers/monaco-editor-core.ts\nvar monaco_editor_core_exports = {};\n__reExport(monaco_editor_core_exports, monaco_editor_core_star);\nimport * as monaco_editor_core_star from \"../../editor/editor.api.js\";\n\n// src/basic-languages/freemarker2/freemarker2.ts\nvar EMPTY_ELEMENTS = [\n  \"assign\",\n  \"flush\",\n  \"ftl\",\n  \"return\",\n  \"global\",\n  \"import\",\n  \"include\",\n  \"break\",\n  \"continue\",\n  \"local\",\n  \"nested\",\n  \"nt\",\n  \"setting\",\n  \"stop\",\n  \"t\",\n  \"lt\",\n  \"rt\",\n  \"fallback\"\n];\nvar BLOCK_ELEMENTS = [\n  \"attempt\",\n  \"autoesc\",\n  \"autoEsc\",\n  \"compress\",\n  \"comment\",\n  \"escape\",\n  \"noescape\",\n  \"function\",\n  \"if\",\n  \"list\",\n  \"items\",\n  \"sep\",\n  \"macro\",\n  \"noparse\",\n  \"noParse\",\n  \"noautoesc\",\n  \"noAutoEsc\",\n  \"outputformat\",\n  \"switch\",\n  \"visit\",\n  \"recurse\"\n];\nvar TagSyntaxAngle = {\n  close: \">\",\n  id: \"angle\",\n  open: \"<\"\n};\nvar TagSyntaxBracket = {\n  close: \"\\\\]\",\n  id: \"bracket\",\n  open: \"\\\\[\"\n};\nvar TagSyntaxAuto = {\n  close: \"[>\\\\]]\",\n  id: \"auto\",\n  open: \"[<\\\\[]\"\n};\nvar InterpolationSyntaxDollar = {\n  close: \"\\\\}\",\n  id: \"dollar\",\n  open1: \"\\\\$\",\n  open2: \"\\\\{\"\n};\nvar InterpolationSyntaxBracket = {\n  close: \"\\\\]\",\n  id: \"bracket\",\n  open1: \"\\\\[\",\n  open2: \"=\"\n};\nfunction createLangConfiguration(ts) {\n  return {\n    brackets: [\n      [\"<\", \">\"],\n      [\"[\", \"]\"],\n      [\"(\", \")\"],\n      [\"{\", \"}\"]\n    ],\n    comments: {\n      blockComment: [`${ts.open}--`, `--${ts.close}`]\n    },\n    autoCloseBefore: \"\\n\\r\t }]),.:;=\",\n    autoClosingPairs: [\n      { open: \"{\", close: \"}\" },\n      { open: \"[\", close: \"]\" },\n      { open: \"(\", close: \")\" },\n      { open: '\"', close: '\"', notIn: [\"string\"] },\n      { open: \"'\", close: \"'\", notIn: [\"string\"] }\n    ],\n    surroundingPairs: [\n      { open: '\"', close: '\"' },\n      { open: \"'\", close: \"'\" },\n      { open: \"{\", close: \"}\" },\n      { open: \"[\", close: \"]\" },\n      { open: \"(\", close: \")\" },\n      { open: \"<\", close: \">\" }\n    ],\n    folding: {\n      markers: {\n        start: new RegExp(`${ts.open}#(?:${BLOCK_ELEMENTS.join(\"|\")})([^/${ts.close}]*(?!/)${ts.close})[^${ts.open}]*$`),\n        end: new RegExp(`${ts.open}/#(?:${BLOCK_ELEMENTS.join(\"|\")})[\\\\r\\\\n\\\\t ]*>`)\n      }\n    },\n    onEnterRules: [\n      {\n        beforeText: new RegExp(`${ts.open}#(?!(?:${EMPTY_ELEMENTS.join(\"|\")}))([a-zA-Z_]+)([^/${ts.close}]*(?!/)${ts.close})[^${ts.open}]*$`),\n        afterText: new RegExp(`^${ts.open}/#([a-zA-Z_]+)[\\\\r\\\\n\\\\t ]*${ts.close}$`),\n        action: {\n          indentAction: monaco_editor_core_exports.languages.IndentAction.IndentOutdent\n        }\n      },\n      {\n        beforeText: new RegExp(`${ts.open}#(?!(?:${EMPTY_ELEMENTS.join(\"|\")}))([a-zA-Z_]+)([^/${ts.close}]*(?!/)${ts.close})[^${ts.open}]*$`),\n        action: { indentAction: monaco_editor_core_exports.languages.IndentAction.Indent }\n      }\n    ]\n  };\n}\nfunction createLangConfigurationAuto() {\n  return {\n    brackets: [\n      [\"<\", \">\"],\n      [\"[\", \"]\"],\n      [\"(\", \")\"],\n      [\"{\", \"}\"]\n    ],\n    autoCloseBefore: \"\\n\\r\t }]),.:;=\",\n    autoClosingPairs: [\n      { open: \"{\", close: \"}\" },\n      { open: \"[\", close: \"]\" },\n      { open: \"(\", close: \")\" },\n      { open: '\"', close: '\"', notIn: [\"string\"] },\n      { open: \"'\", close: \"'\", notIn: [\"string\"] }\n    ],\n    surroundingPairs: [\n      { open: '\"', close: '\"' },\n      { open: \"'\", close: \"'\" },\n      { open: \"{\", close: \"}\" },\n      { open: \"[\", close: \"]\" },\n      { open: \"(\", close: \")\" },\n      { open: \"<\", close: \">\" }\n    ],\n    folding: {\n      markers: {\n        start: new RegExp(`[<\\\\[]#(?:${BLOCK_ELEMENTS.join(\"|\")})([^/>\\\\]]*(?!/)[>\\\\]])[^<\\\\[]*$`),\n        end: new RegExp(`[<\\\\[]/#(?:${BLOCK_ELEMENTS.join(\"|\")})[\\\\r\\\\n\\\\t ]*>`)\n      }\n    },\n    onEnterRules: [\n      {\n        beforeText: new RegExp(`[<\\\\[]#(?!(?:${EMPTY_ELEMENTS.join(\"|\")}))([a-zA-Z_]+)([^/>\\\\]]*(?!/)[>\\\\]])[^[<\\\\[]]*$`),\n        afterText: new RegExp(`^[<\\\\[]/#([a-zA-Z_]+)[\\\\r\\\\n\\\\t ]*[>\\\\]]$`),\n        action: {\n          indentAction: monaco_editor_core_exports.languages.IndentAction.IndentOutdent\n        }\n      },\n      {\n        beforeText: new RegExp(`[<\\\\[]#(?!(?:${EMPTY_ELEMENTS.join(\"|\")}))([a-zA-Z_]+)([^/>\\\\]]*(?!/)[>\\\\]])[^[<\\\\[]]*$`),\n        action: { indentAction: monaco_editor_core_exports.languages.IndentAction.Indent }\n      }\n    ]\n  };\n}\nfunction createMonarchLanguage(ts, is) {\n  const id = `_${ts.id}_${is.id}`;\n  const s = (name) => name.replace(/__id__/g, id);\n  const r = (regexp) => {\n    const source = regexp.source.replace(/__id__/g, id);\n    return new RegExp(source, regexp.flags);\n  };\n  return {\n    unicode: true,\n    includeLF: false,\n    start: s(\"default__id__\"),\n    ignoreCase: false,\n    defaultToken: \"invalid\",\n    tokenPostfix: `.freemarker2`,\n    brackets: [\n      { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\n      { open: \"[\", close: \"]\", token: \"delimiter.square\" },\n      { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" },\n      { open: \"<\", close: \">\", token: \"delimiter.angle\" }\n    ],\n    [s(\"open__id__\")]: new RegExp(ts.open),\n    [s(\"close__id__\")]: new RegExp(ts.close),\n    [s(\"iOpen1__id__\")]: new RegExp(is.open1),\n    [s(\"iOpen2__id__\")]: new RegExp(is.open2),\n    [s(\"iClose__id__\")]: new RegExp(is.close),\n    [s(\"startTag__id__\")]: r(/(@open__id__)(#)/),\n    [s(\"endTag__id__\")]: r(/(@open__id__)(\\/#)/),\n    [s(\"startOrEndTag__id__\")]: r(/(@open__id__)(\\/?#)/),\n    [s(\"closeTag1__id__\")]: r(/((?:@blank)*)(@close__id__)/),\n    [s(\"closeTag2__id__\")]: r(/((?:@blank)*\\/?)(@close__id__)/),\n    blank: /[ \\t\\n\\r]/,\n    keywords: [\"false\", \"true\", \"in\", \"as\", \"using\"],\n    directiveStartCloseTag1: /attempt|recover|sep|auto[eE]sc|no(?:autoe|AutoE)sc|compress|default|no[eE]scape|comment|no[pP]arse/,\n    directiveStartCloseTag2: /else|break|continue|return|stop|flush|t|lt|rt|nt|nested|recurse|fallback|ftl/,\n    directiveStartBlank: /if|else[iI]f|list|for[eE]ach|switch|case|assign|global|local|include|import|function|macro|transform|visit|stop|return|call|setting|output[fF]ormat|nested|recurse|escape|ftl|items/,\n    directiveEndCloseTag1: /if|list|items|sep|recover|attempt|for[eE]ach|local|global|assign|function|macro|output[fF]ormat|auto[eE]sc|no(?:autoe|AutoE)sc|compress|transform|switch|escape|no[eE]scape/,\n    escapedChar: /\\\\(?:[ntrfbgla\\\\'\"\\{=]|(?:x[0-9A-Fa-f]{1,4}))/,\n    asciiDigit: /[0-9]/,\n    integer: /[0-9]+/,\n    nonEscapedIdStartChar: /[\\$@-Z_a-z\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u1FFF\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183-\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3006\\u3031-\\u3035\\u303B-\\u303C\\u3040-\\u318F\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3300-\\u337F\\u3400-\\u4DB5\\u4E00-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8D0-\\uA8D9\\uA8F2-\\uA8F7\\uA8FB\\uA900-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF-\\uA9D9\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5-\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40-\\uFB41\\uFB43-\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/,\n    escapedIdChar: /\\\\[\\-\\.:#]/,\n    idStartChar: /(?:@nonEscapedIdStartChar)|(?:@escapedIdChar)/,\n    id: /(?:@idStartChar)(?:(?:@idStartChar)|(?:@asciiDigit))*/,\n    specialHashKeys: /\\*\\*|\\*|false|true|in|as|using/,\n    namedSymbols: /&lt;=|&gt;=|\\\\lte|\\\\lt|&lt;|\\\\gte|\\\\gt|&gt;|&amp;&amp;|\\\\and|-&gt;|->|==|!=|\\+=|-=|\\*=|\\/=|%=|\\+\\+|--|<=|&&|\\|\\||:|\\.\\.\\.|\\.\\.\\*|\\.\\.<|\\.\\.!|\\?\\?|=|<|\\+|-|\\*|\\/|%|\\||\\.\\.|\\?|!|&|\\.|,|;/,\n    arrows: [\"->\", \"-&gt;\"],\n    delimiters: [\";\", \":\", \",\", \".\"],\n    stringOperators: [\"lte\", \"lt\", \"gte\", \"gt\"],\n    noParseTags: [\"noparse\", \"noParse\", \"comment\"],\n    tokenizer: {\n      [s(\"default__id__\")]: [\n        { include: s(\"@directive_token__id__\") },\n        { include: s(\"@interpolation_and_text_token__id__\") }\n      ],\n      [s(\"fmExpression__id__.directive\")]: [\n        { include: s(\"@blank_and_expression_comment_token__id__\") },\n        { include: s(\"@directive_end_token__id__\") },\n        { include: s(\"@expression_token__id__\") }\n      ],\n      [s(\"fmExpression__id__.interpolation\")]: [\n        { include: s(\"@blank_and_expression_comment_token__id__\") },\n        { include: s(\"@expression_token__id__\") },\n        { include: s(\"@greater_operators_token__id__\") }\n      ],\n      [s(\"inParen__id__.plain\")]: [\n        { include: s(\"@blank_and_expression_comment_token__id__\") },\n        { include: s(\"@directive_end_token__id__\") },\n        { include: s(\"@expression_token__id__\") }\n      ],\n      [s(\"inParen__id__.gt\")]: [\n        { include: s(\"@blank_and_expression_comment_token__id__\") },\n        { include: s(\"@expression_token__id__\") },\n        { include: s(\"@greater_operators_token__id__\") }\n      ],\n      [s(\"noSpaceExpression__id__\")]: [\n        { include: s(\"@no_space_expression_end_token__id__\") },\n        { include: s(\"@directive_end_token__id__\") },\n        { include: s(\"@expression_token__id__\") }\n      ],\n      [s(\"unifiedCall__id__\")]: [{ include: s(\"@unified_call_token__id__\") }],\n      [s(\"singleString__id__\")]: [{ include: s(\"@string_single_token__id__\") }],\n      [s(\"doubleString__id__\")]: [{ include: s(\"@string_double_token__id__\") }],\n      [s(\"rawSingleString__id__\")]: [{ include: s(\"@string_single_raw_token__id__\") }],\n      [s(\"rawDoubleString__id__\")]: [{ include: s(\"@string_double_raw_token__id__\") }],\n      [s(\"expressionComment__id__\")]: [{ include: s(\"@expression_comment_token__id__\") }],\n      [s(\"noParse__id__\")]: [{ include: s(\"@no_parse_token__id__\") }],\n      [s(\"terseComment__id__\")]: [{ include: s(\"@terse_comment_token__id__\") }],\n      [s(\"directive_token__id__\")]: [\n        [\n          r(/(?:@startTag__id__)(@directiveStartCloseTag1)(?:@closeTag1__id__)/),\n          ts.id === \"auto\" ? {\n            cases: {\n              \"$1==<\": { token: \"@rematch\", switchTo: `@default_angle_${is.id}` },\n              \"$1==[\": { token: \"@rematch\", switchTo: `@default_bracket_${is.id}` }\n            }\n          } : [\n            { token: \"@brackets.directive\" },\n            { token: \"delimiter.directive\" },\n            {\n              cases: {\n                \"@noParseTags\": { token: \"tag\", next: s(\"@noParse__id__.$3\") },\n                \"@default\": { token: \"tag\" }\n              }\n            },\n            { token: \"delimiter.directive\" },\n            { token: \"@brackets.directive\" }\n          ]\n        ],\n        [\n          r(/(?:@startTag__id__)(@directiveStartCloseTag2)(?:@closeTag2__id__)/),\n          ts.id === \"auto\" ? {\n            cases: {\n              \"$1==<\": { token: \"@rematch\", switchTo: `@default_angle_${is.id}` },\n              \"$1==[\": { token: \"@rematch\", switchTo: `@default_bracket_${is.id}` }\n            }\n          } : [\n            { token: \"@brackets.directive\" },\n            { token: \"delimiter.directive\" },\n            { token: \"tag\" },\n            { token: \"delimiter.directive\" },\n            { token: \"@brackets.directive\" }\n          ]\n        ],\n        [\n          r(/(?:@startTag__id__)(@directiveStartBlank)(@blank)/),\n          ts.id === \"auto\" ? {\n            cases: {\n              \"$1==<\": { token: \"@rematch\", switchTo: `@default_angle_${is.id}` },\n              \"$1==[\": { token: \"@rematch\", switchTo: `@default_bracket_${is.id}` }\n            }\n          } : [\n            { token: \"@brackets.directive\" },\n            { token: \"delimiter.directive\" },\n            { token: \"tag\" },\n            { token: \"\", next: s(\"@fmExpression__id__.directive\") }\n          ]\n        ],\n        [\n          r(/(?:@endTag__id__)(@directiveEndCloseTag1)(?:@closeTag1__id__)/),\n          ts.id === \"auto\" ? {\n            cases: {\n              \"$1==<\": { token: \"@rematch\", switchTo: `@default_angle_${is.id}` },\n              \"$1==[\": { token: \"@rematch\", switchTo: `@default_bracket_${is.id}` }\n            }\n          } : [\n            { token: \"@brackets.directive\" },\n            { token: \"delimiter.directive\" },\n            { token: \"tag\" },\n            { token: \"delimiter.directive\" },\n            { token: \"@brackets.directive\" }\n          ]\n        ],\n        [\n          r(/(@open__id__)(@)/),\n          ts.id === \"auto\" ? {\n            cases: {\n              \"$1==<\": { token: \"@rematch\", switchTo: `@default_angle_${is.id}` },\n              \"$1==[\": { token: \"@rematch\", switchTo: `@default_bracket_${is.id}` }\n            }\n          } : [\n            { token: \"@brackets.directive\" },\n            { token: \"delimiter.directive\", next: s(\"@unifiedCall__id__\") }\n          ]\n        ],\n        [\n          r(/(@open__id__)(\\/@)((?:(?:@id)(?:\\.(?:@id))*)?)(?:@closeTag1__id__)/),\n          [\n            { token: \"@brackets.directive\" },\n            { token: \"delimiter.directive\" },\n            { token: \"tag\" },\n            { token: \"delimiter.directive\" },\n            { token: \"@brackets.directive\" }\n          ]\n        ],\n        [\n          r(/(@open__id__)#--/),\n          ts.id === \"auto\" ? {\n            cases: {\n              \"$1==<\": { token: \"@rematch\", switchTo: `@default_angle_${is.id}` },\n              \"$1==[\": { token: \"@rematch\", switchTo: `@default_bracket_${is.id}` }\n            }\n          } : { token: \"comment\", next: s(\"@terseComment__id__\") }\n        ],\n        [\n          r(/(?:@startOrEndTag__id__)([a-zA-Z_]+)/),\n          ts.id === \"auto\" ? {\n            cases: {\n              \"$1==<\": { token: \"@rematch\", switchTo: `@default_angle_${is.id}` },\n              \"$1==[\": { token: \"@rematch\", switchTo: `@default_bracket_${is.id}` }\n            }\n          } : [\n            { token: \"@brackets.directive\" },\n            { token: \"delimiter.directive\" },\n            { token: \"tag.invalid\", next: s(\"@fmExpression__id__.directive\") }\n          ]\n        ]\n      ],\n      [s(\"interpolation_and_text_token__id__\")]: [\n        [\n          r(/(@iOpen1__id__)(@iOpen2__id__)/),\n          [\n            { token: is.id === \"bracket\" ? \"@brackets.interpolation\" : \"delimiter.interpolation\" },\n            {\n              token: is.id === \"bracket\" ? \"delimiter.interpolation\" : \"@brackets.interpolation\",\n              next: s(\"@fmExpression__id__.interpolation\")\n            }\n          ]\n        ],\n        [/[\\$#<\\[\\{]|(?:@blank)+|[^\\$<#\\[\\{\\n\\r\\t ]+/, { token: \"source\" }]\n      ],\n      [s(\"string_single_token__id__\")]: [\n        [/[^'\\\\]/, { token: \"string\" }],\n        [/@escapedChar/, { token: \"string.escape\" }],\n        [/'/, { token: \"string\", next: \"@pop\" }]\n      ],\n      [s(\"string_double_token__id__\")]: [\n        [/[^\"\\\\]/, { token: \"string\" }],\n        [/@escapedChar/, { token: \"string.escape\" }],\n        [/\"/, { token: \"string\", next: \"@pop\" }]\n      ],\n      [s(\"string_single_raw_token__id__\")]: [\n        [/[^']+/, { token: \"string.raw\" }],\n        [/'/, { token: \"string.raw\", next: \"@pop\" }]\n      ],\n      [s(\"string_double_raw_token__id__\")]: [\n        [/[^\"]+/, { token: \"string.raw\" }],\n        [/\"/, { token: \"string.raw\", next: \"@pop\" }]\n      ],\n      [s(\"expression_token__id__\")]: [\n        [\n          /(r?)(['\"])/,\n          {\n            cases: {\n              \"r'\": [\n                { token: \"keyword\" },\n                { token: \"string.raw\", next: s(\"@rawSingleString__id__\") }\n              ],\n              'r\"': [\n                { token: \"keyword\" },\n                { token: \"string.raw\", next: s(\"@rawDoubleString__id__\") }\n              ],\n              \"'\": [{ token: \"source\" }, { token: \"string\", next: s(\"@singleString__id__\") }],\n              '\"': [{ token: \"source\" }, { token: \"string\", next: s(\"@doubleString__id__\") }]\n            }\n          }\n        ],\n        [\n          /(?:@integer)(?:\\.(?:@integer))?/,\n          {\n            cases: {\n              \"(?:@integer)\": { token: \"number\" },\n              \"@default\": { token: \"number.float\" }\n            }\n          }\n        ],\n        [\n          /(\\.)(@blank*)(@specialHashKeys)/,\n          [{ token: \"delimiter\" }, { token: \"\" }, { token: \"identifier\" }]\n        ],\n        [\n          /(?:@namedSymbols)/,\n          {\n            cases: {\n              \"@arrows\": { token: \"meta.arrow\" },\n              \"@delimiters\": { token: \"delimiter\" },\n              \"@default\": { token: \"operators\" }\n            }\n          }\n        ],\n        [\n          /@id/,\n          {\n            cases: {\n              \"@keywords\": { token: \"keyword.$0\" },\n              \"@stringOperators\": { token: \"operators\" },\n              \"@default\": { token: \"identifier\" }\n            }\n          }\n        ],\n        [\n          /[\\[\\]\\(\\)\\{\\}]/,\n          {\n            cases: {\n              \"\\\\[\": {\n                cases: {\n                  \"$S2==gt\": { token: \"@brackets\", next: s(\"@inParen__id__.gt\") },\n                  \"@default\": { token: \"@brackets\", next: s(\"@inParen__id__.plain\") }\n                }\n              },\n              \"\\\\]\": {\n                cases: {\n                  ...is.id === \"bracket\" ? {\n                    \"$S2==interpolation\": { token: \"@brackets.interpolation\", next: \"@popall\" }\n                  } : {},\n                  ...ts.id === \"bracket\" ? {\n                    \"$S2==directive\": { token: \"@brackets.directive\", next: \"@popall\" }\n                  } : {},\n                  [s(\"$S1==inParen__id__\")]: { token: \"@brackets\", next: \"@pop\" },\n                  \"@default\": { token: \"@brackets\" }\n                }\n              },\n              \"\\\\(\": { token: \"@brackets\", next: s(\"@inParen__id__.gt\") },\n              \"\\\\)\": {\n                cases: {\n                  [s(\"$S1==inParen__id__\")]: { token: \"@brackets\", next: \"@pop\" },\n                  \"@default\": { token: \"@brackets\" }\n                }\n              },\n              \"\\\\{\": {\n                cases: {\n                  \"$S2==gt\": { token: \"@brackets\", next: s(\"@inParen__id__.gt\") },\n                  \"@default\": { token: \"@brackets\", next: s(\"@inParen__id__.plain\") }\n                }\n              },\n              \"\\\\}\": {\n                cases: {\n                  ...is.id === \"bracket\" ? {} : {\n                    \"$S2==interpolation\": { token: \"@brackets.interpolation\", next: \"@popall\" }\n                  },\n                  [s(\"$S1==inParen__id__\")]: { token: \"@brackets\", next: \"@pop\" },\n                  \"@default\": { token: \"@brackets\" }\n                }\n              }\n            }\n          }\n        ],\n        [/\\$\\{/, { token: \"delimiter.invalid\" }]\n      ],\n      [s(\"blank_and_expression_comment_token__id__\")]: [\n        [/(?:@blank)+/, { token: \"\" }],\n        [/[<\\[][#!]--/, { token: \"comment\", next: s(\"@expressionComment__id__\") }]\n      ],\n      [s(\"directive_end_token__id__\")]: [\n        [\n          />/,\n          ts.id === \"bracket\" ? { token: \"operators\" } : { token: \"@brackets.directive\", next: \"@popall\" }\n        ],\n        [\n          r(/(\\/)(@close__id__)/),\n          [{ token: \"delimiter.directive\" }, { token: \"@brackets.directive\", next: \"@popall\" }]\n        ]\n      ],\n      [s(\"greater_operators_token__id__\")]: [\n        [/>/, { token: \"operators\" }],\n        [/>=/, { token: \"operators\" }]\n      ],\n      [s(\"no_space_expression_end_token__id__\")]: [\n        [/(?:@blank)+/, { token: \"\", switchTo: s(\"@fmExpression__id__.directive\") }]\n      ],\n      [s(\"unified_call_token__id__\")]: [\n        [\n          /(@id)((?:@blank)+)/,\n          [{ token: \"tag\" }, { token: \"\", next: s(\"@fmExpression__id__.directive\") }]\n        ],\n        [\n          r(/(@id)(\\/?)(@close__id__)/),\n          [\n            { token: \"tag\" },\n            { token: \"delimiter.directive\" },\n            { token: \"@brackets.directive\", next: \"@popall\" }\n          ]\n        ],\n        [/./, { token: \"@rematch\", next: s(\"@noSpaceExpression__id__\") }]\n      ],\n      [s(\"no_parse_token__id__\")]: [\n        [\n          r(/(@open__id__)(\\/#?)([a-zA-Z]+)((?:@blank)*)(@close__id__)/),\n          {\n            cases: {\n              \"$S2==$3\": [\n                { token: \"@brackets.directive\" },\n                { token: \"delimiter.directive\" },\n                { token: \"tag\" },\n                { token: \"\" },\n                { token: \"@brackets.directive\", next: \"@popall\" }\n              ],\n              \"$S2==comment\": [\n                { token: \"comment\" },\n                { token: \"comment\" },\n                { token: \"comment\" },\n                { token: \"comment\" },\n                { token: \"comment\" }\n              ],\n              \"@default\": [\n                { token: \"source\" },\n                { token: \"source\" },\n                { token: \"source\" },\n                { token: \"source\" },\n                { token: \"source\" }\n              ]\n            }\n          }\n        ],\n        [\n          /[^<\\[\\-]+|[<\\[\\-]/,\n          {\n            cases: {\n              \"$S2==comment\": { token: \"comment\" },\n              \"@default\": { token: \"source\" }\n            }\n          }\n        ]\n      ],\n      [s(\"expression_comment_token__id__\")]: [\n        [\n          /--[>\\]]/,\n          {\n            token: \"comment\",\n            next: \"@pop\"\n          }\n        ],\n        [/[^\\->\\]]+|[>\\]\\-]/, { token: \"comment\" }]\n      ],\n      [s(\"terse_comment_token__id__\")]: [\n        [r(/--(?:@close__id__)/), { token: \"comment\", next: \"@popall\" }],\n        [/[^<\\[\\-]+|[<\\[\\-]/, { token: \"comment\" }]\n      ]\n    }\n  };\n}\nfunction createMonarchLanguageAuto(is) {\n  const angle = createMonarchLanguage(TagSyntaxAngle, is);\n  const bracket = createMonarchLanguage(TagSyntaxBracket, is);\n  const auto = createMonarchLanguage(TagSyntaxAuto, is);\n  return {\n    ...angle,\n    ...bracket,\n    ...auto,\n    unicode: true,\n    includeLF: false,\n    start: `default_auto_${is.id}`,\n    ignoreCase: false,\n    defaultToken: \"invalid\",\n    tokenPostfix: `.freemarker2`,\n    brackets: [\n      { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\n      { open: \"[\", close: \"]\", token: \"delimiter.square\" },\n      { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" },\n      { open: \"<\", close: \">\", token: \"delimiter.angle\" }\n    ],\n    tokenizer: {\n      ...angle.tokenizer,\n      ...bracket.tokenizer,\n      ...auto.tokenizer\n    }\n  };\n}\nvar TagAngleInterpolationDollar = {\n  conf: createLangConfiguration(TagSyntaxAngle),\n  language: createMonarchLanguage(TagSyntaxAngle, InterpolationSyntaxDollar)\n};\nvar TagBracketInterpolationDollar = {\n  conf: createLangConfiguration(TagSyntaxBracket),\n  language: createMonarchLanguage(TagSyntaxBracket, InterpolationSyntaxDollar)\n};\nvar TagAngleInterpolationBracket = {\n  conf: createLangConfiguration(TagSyntaxAngle),\n  language: createMonarchLanguage(TagSyntaxAngle, InterpolationSyntaxBracket)\n};\nvar TagBracketInterpolationBracket = {\n  conf: createLangConfiguration(TagSyntaxBracket),\n  language: createMonarchLanguage(TagSyntaxBracket, InterpolationSyntaxBracket)\n};\nvar TagAutoInterpolationDollar = {\n  conf: createLangConfigurationAuto(),\n  language: createMonarchLanguageAuto(InterpolationSyntaxDollar)\n};\nvar TagAutoInterpolationBracket = {\n  conf: createLangConfigurationAuto(),\n  language: createMonarchLanguageAuto(InterpolationSyntaxBracket)\n};\nexport {\n  TagAngleInterpolationBracket,\n  TagAngleInterpolationDollar,\n  TagAutoInterpolationBracket,\n  TagAutoInterpolationDollar,\n  TagBracketInterpolationBracket,\n  TagBracketInterpolationDollar\n};\n"]},"metadata":{},"sourceType":"module"}