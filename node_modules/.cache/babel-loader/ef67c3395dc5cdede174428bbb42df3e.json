{"ast":null,"code":"/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n// src/basic-languages/clojure/clojure.ts\nvar conf = {\n  comments: {\n    lineComment: \";;\"\n  },\n  brackets: [[\"[\", \"]\"], [\"(\", \")\"], [\"{\", \"}\"]],\n  autoClosingPairs: [{\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: \"{\",\n    close: \"}\"\n  }],\n  surroundingPairs: [{\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: \"{\",\n    close: \"}\"\n  }]\n};\nvar language = {\n  defaultToken: \"\",\n  ignoreCase: true,\n  tokenPostfix: \".clj\",\n  brackets: [{\n    open: \"[\",\n    close: \"]\",\n    token: \"delimiter.square\"\n  }, {\n    open: \"(\",\n    close: \")\",\n    token: \"delimiter.parenthesis\"\n  }, {\n    open: \"{\",\n    close: \"}\",\n    token: \"delimiter.curly\"\n  }],\n  constants: [\"true\", \"false\", \"nil\"],\n  numbers: /^(?:[+\\-]?\\d+(?:(?:N|(?:[eE][+\\-]?\\d+))|(?:\\.?\\d*(?:M|(?:[eE][+\\-]?\\d+))?)|\\/\\d+|[xX][0-9a-fA-F]+|r[0-9a-zA-Z]+)?(?=[\\\\\\[\\]\\s\"#'(),;@^`{}~]|$))/,\n  characters: /^(?:\\\\(?:backspace|formfeed|newline|return|space|tab|o[0-7]{3}|u[0-9A-Fa-f]{4}|x[0-9A-Fa-f]{4}|.)?(?=[\\\\\\[\\]\\s\"(),;@^`{}~]|$))/,\n  escapes: /^\\\\(?:[\"'\\\\bfnrt]|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  qualifiedSymbols: /^(?:(?:[^\\\\\\/\\[\\]\\d\\s\"#'(),;@^`{}~][^\\\\\\[\\]\\s\"(),;@^`{}~]*(?:\\.[^\\\\\\/\\[\\]\\d\\s\"#'(),;@^`{}~][^\\\\\\[\\]\\s\"(),;@^`{}~]*)*\\/)?(?:\\/|[^\\\\\\/\\[\\]\\d\\s\"#'(),;@^`{}~][^\\\\\\[\\]\\s\"(),;@^`{}~]*)*(?=[\\\\\\[\\]\\s\"(),;@^`{}~]|$))/,\n  specialForms: [\".\", \"catch\", \"def\", \"do\", \"if\", \"monitor-enter\", \"monitor-exit\", \"new\", \"quote\", \"recur\", \"set!\", \"throw\", \"try\", \"var\"],\n  coreSymbols: [\"*\", \"*'\", \"*1\", \"*2\", \"*3\", \"*agent*\", \"*allow-unresolved-vars*\", \"*assert*\", \"*clojure-version*\", \"*command-line-args*\", \"*compile-files*\", \"*compile-path*\", \"*compiler-options*\", \"*data-readers*\", \"*default-data-reader-fn*\", \"*e\", \"*err*\", \"*file*\", \"*flush-on-newline*\", \"*fn-loader*\", \"*in*\", \"*math-context*\", \"*ns*\", \"*out*\", \"*print-dup*\", \"*print-length*\", \"*print-level*\", \"*print-meta*\", \"*print-namespace-maps*\", \"*print-readably*\", \"*read-eval*\", \"*reader-resolver*\", \"*source-path*\", \"*suppress-read*\", \"*unchecked-math*\", \"*use-context-classloader*\", \"*verbose-defrecords*\", \"*warn-on-reflection*\", \"+\", \"+'\", \"-\", \"-'\", \"->\", \"->>\", \"->ArrayChunk\", \"->Eduction\", \"->Vec\", \"->VecNode\", \"->VecSeq\", \"-cache-protocol-fn\", \"-reset-methods\", \"..\", \"/\", \"<\", \"<=\", \"=\", \"==\", \">\", \">=\", \"EMPTY-NODE\", \"Inst\", \"StackTraceElement->vec\", \"Throwable->map\", \"accessor\", \"aclone\", \"add-classpath\", \"add-watch\", \"agent\", \"agent-error\", \"agent-errors\", \"aget\", \"alength\", \"alias\", \"all-ns\", \"alter\", \"alter-meta!\", \"alter-var-root\", \"amap\", \"ancestors\", \"and\", \"any?\", \"apply\", \"areduce\", \"array-map\", \"as->\", \"aset\", \"aset-boolean\", \"aset-byte\", \"aset-char\", \"aset-double\", \"aset-float\", \"aset-int\", \"aset-long\", \"aset-short\", \"assert\", \"assoc\", \"assoc!\", \"assoc-in\", \"associative?\", \"atom\", \"await\", \"await-for\", \"await1\", \"bases\", \"bean\", \"bigdec\", \"bigint\", \"biginteger\", \"binding\", \"bit-and\", \"bit-and-not\", \"bit-clear\", \"bit-flip\", \"bit-not\", \"bit-or\", \"bit-set\", \"bit-shift-left\", \"bit-shift-right\", \"bit-test\", \"bit-xor\", \"boolean\", \"boolean-array\", \"boolean?\", \"booleans\", \"bound-fn\", \"bound-fn*\", \"bound?\", \"bounded-count\", \"butlast\", \"byte\", \"byte-array\", \"bytes\", \"bytes?\", \"case\", \"cast\", \"cat\", \"char\", \"char-array\", \"char-escape-string\", \"char-name-string\", \"char?\", \"chars\", \"chunk\", \"chunk-append\", \"chunk-buffer\", \"chunk-cons\", \"chunk-first\", \"chunk-next\", \"chunk-rest\", \"chunked-seq?\", \"class\", \"class?\", \"clear-agent-errors\", \"clojure-version\", \"coll?\", \"comment\", \"commute\", \"comp\", \"comparator\", \"compare\", \"compare-and-set!\", \"compile\", \"complement\", \"completing\", \"concat\", \"cond\", \"cond->\", \"cond->>\", \"condp\", \"conj\", \"conj!\", \"cons\", \"constantly\", \"construct-proxy\", \"contains?\", \"count\", \"counted?\", \"create-ns\", \"create-struct\", \"cycle\", \"dec\", \"dec'\", \"decimal?\", \"declare\", \"dedupe\", \"default-data-readers\", \"definline\", \"definterface\", \"defmacro\", \"defmethod\", \"defmulti\", \"defn\", \"defn-\", \"defonce\", \"defprotocol\", \"defrecord\", \"defstruct\", \"deftype\", \"delay\", \"delay?\", \"deliver\", \"denominator\", \"deref\", \"derive\", \"descendants\", \"destructure\", \"disj\", \"disj!\", \"dissoc\", \"dissoc!\", \"distinct\", \"distinct?\", \"doall\", \"dorun\", \"doseq\", \"dosync\", \"dotimes\", \"doto\", \"double\", \"double-array\", \"double?\", \"doubles\", \"drop\", \"drop-last\", \"drop-while\", \"eduction\", \"empty\", \"empty?\", \"ensure\", \"ensure-reduced\", \"enumeration-seq\", \"error-handler\", \"error-mode\", \"eval\", \"even?\", \"every-pred\", \"every?\", \"ex-data\", \"ex-info\", \"extend\", \"extend-protocol\", \"extend-type\", \"extenders\", \"extends?\", \"false?\", \"ffirst\", \"file-seq\", \"filter\", \"filterv\", \"find\", \"find-keyword\", \"find-ns\", \"find-protocol-impl\", \"find-protocol-method\", \"find-var\", \"first\", \"flatten\", \"float\", \"float-array\", \"float?\", \"floats\", \"flush\", \"fn\", \"fn?\", \"fnext\", \"fnil\", \"for\", \"force\", \"format\", \"frequencies\", \"future\", \"future-call\", \"future-cancel\", \"future-cancelled?\", \"future-done?\", \"future?\", \"gen-class\", \"gen-interface\", \"gensym\", \"get\", \"get-in\", \"get-method\", \"get-proxy-class\", \"get-thread-bindings\", \"get-validator\", \"group-by\", \"halt-when\", \"hash\", \"hash-combine\", \"hash-map\", \"hash-ordered-coll\", \"hash-set\", \"hash-unordered-coll\", \"ident?\", \"identical?\", \"identity\", \"if-let\", \"if-not\", \"if-some\", \"ifn?\", \"import\", \"in-ns\", \"inc\", \"inc'\", \"indexed?\", \"init-proxy\", \"inst-ms\", \"inst-ms*\", \"inst?\", \"instance?\", \"int\", \"int-array\", \"int?\", \"integer?\", \"interleave\", \"intern\", \"interpose\", \"into\", \"into-array\", \"ints\", \"io!\", \"isa?\", \"iterate\", \"iterator-seq\", \"juxt\", \"keep\", \"keep-indexed\", \"key\", \"keys\", \"keyword\", \"keyword?\", \"last\", \"lazy-cat\", \"lazy-seq\", \"let\", \"letfn\", \"line-seq\", \"list\", \"list*\", \"list?\", \"load\", \"load-file\", \"load-reader\", \"load-string\", \"loaded-libs\", \"locking\", \"long\", \"long-array\", \"longs\", \"loop\", \"macroexpand\", \"macroexpand-1\", \"make-array\", \"make-hierarchy\", \"map\", \"map-entry?\", \"map-indexed\", \"map?\", \"mapcat\", \"mapv\", \"max\", \"max-key\", \"memfn\", \"memoize\", \"merge\", \"merge-with\", \"meta\", \"method-sig\", \"methods\", \"min\", \"min-key\", \"mix-collection-hash\", \"mod\", \"munge\", \"name\", \"namespace\", \"namespace-munge\", \"nat-int?\", \"neg-int?\", \"neg?\", \"newline\", \"next\", \"nfirst\", \"nil?\", \"nnext\", \"not\", \"not-any?\", \"not-empty\", \"not-every?\", \"not=\", \"ns\", \"ns-aliases\", \"ns-imports\", \"ns-interns\", \"ns-map\", \"ns-name\", \"ns-publics\", \"ns-refers\", \"ns-resolve\", \"ns-unalias\", \"ns-unmap\", \"nth\", \"nthnext\", \"nthrest\", \"num\", \"number?\", \"numerator\", \"object-array\", \"odd?\", \"or\", \"parents\", \"partial\", \"partition\", \"partition-all\", \"partition-by\", \"pcalls\", \"peek\", \"persistent!\", \"pmap\", \"pop\", \"pop!\", \"pop-thread-bindings\", \"pos-int?\", \"pos?\", \"pr\", \"pr-str\", \"prefer-method\", \"prefers\", \"primitives-classnames\", \"print\", \"print-ctor\", \"print-dup\", \"print-method\", \"print-simple\", \"print-str\", \"printf\", \"println\", \"println-str\", \"prn\", \"prn-str\", \"promise\", \"proxy\", \"proxy-call-with-super\", \"proxy-mappings\", \"proxy-name\", \"proxy-super\", \"push-thread-bindings\", \"pvalues\", \"qualified-ident?\", \"qualified-keyword?\", \"qualified-symbol?\", \"quot\", \"rand\", \"rand-int\", \"rand-nth\", \"random-sample\", \"range\", \"ratio?\", \"rational?\", \"rationalize\", \"re-find\", \"re-groups\", \"re-matcher\", \"re-matches\", \"re-pattern\", \"re-seq\", \"read\", \"read-line\", \"read-string\", \"reader-conditional\", \"reader-conditional?\", \"realized?\", \"record?\", \"reduce\", \"reduce-kv\", \"reduced\", \"reduced?\", \"reductions\", \"ref\", \"ref-history-count\", \"ref-max-history\", \"ref-min-history\", \"ref-set\", \"refer\", \"refer-clojure\", \"reify\", \"release-pending-sends\", \"rem\", \"remove\", \"remove-all-methods\", \"remove-method\", \"remove-ns\", \"remove-watch\", \"repeat\", \"repeatedly\", \"replace\", \"replicate\", \"require\", \"reset!\", \"reset-meta!\", \"reset-vals!\", \"resolve\", \"rest\", \"restart-agent\", \"resultset-seq\", \"reverse\", \"reversible?\", \"rseq\", \"rsubseq\", \"run!\", \"satisfies?\", \"second\", \"select-keys\", \"send\", \"send-off\", \"send-via\", \"seq\", \"seq?\", \"seqable?\", \"seque\", \"sequence\", \"sequential?\", \"set\", \"set-agent-send-executor!\", \"set-agent-send-off-executor!\", \"set-error-handler!\", \"set-error-mode!\", \"set-validator!\", \"set?\", \"short\", \"short-array\", \"shorts\", \"shuffle\", \"shutdown-agents\", \"simple-ident?\", \"simple-keyword?\", \"simple-symbol?\", \"slurp\", \"some\", \"some->\", \"some->>\", \"some-fn\", \"some?\", \"sort\", \"sort-by\", \"sorted-map\", \"sorted-map-by\", \"sorted-set\", \"sorted-set-by\", \"sorted?\", \"special-symbol?\", \"spit\", \"split-at\", \"split-with\", \"str\", \"string?\", \"struct\", \"struct-map\", \"subs\", \"subseq\", \"subvec\", \"supers\", \"swap!\", \"swap-vals!\", \"symbol\", \"symbol?\", \"sync\", \"tagged-literal\", \"tagged-literal?\", \"take\", \"take-last\", \"take-nth\", \"take-while\", \"test\", \"the-ns\", \"thread-bound?\", \"time\", \"to-array\", \"to-array-2d\", \"trampoline\", \"transduce\", \"transient\", \"tree-seq\", \"true?\", \"type\", \"unchecked-add\", \"unchecked-add-int\", \"unchecked-byte\", \"unchecked-char\", \"unchecked-dec\", \"unchecked-dec-int\", \"unchecked-divide-int\", \"unchecked-double\", \"unchecked-float\", \"unchecked-inc\", \"unchecked-inc-int\", \"unchecked-int\", \"unchecked-long\", \"unchecked-multiply\", \"unchecked-multiply-int\", \"unchecked-negate\", \"unchecked-negate-int\", \"unchecked-remainder-int\", \"unchecked-short\", \"unchecked-subtract\", \"unchecked-subtract-int\", \"underive\", \"unquote\", \"unquote-splicing\", \"unreduced\", \"unsigned-bit-shift-right\", \"update\", \"update-in\", \"update-proxy\", \"uri?\", \"use\", \"uuid?\", \"val\", \"vals\", \"var-get\", \"var-set\", \"var?\", \"vary-meta\", \"vec\", \"vector\", \"vector-of\", \"vector?\", \"volatile!\", \"volatile?\", \"vreset!\", \"vswap!\", \"when\", \"when-first\", \"when-let\", \"when-not\", \"when-some\", \"while\", \"with-bindings\", \"with-bindings*\", \"with-in-str\", \"with-loading-context\", \"with-local-vars\", \"with-meta\", \"with-open\", \"with-out-str\", \"with-precision\", \"with-redefs\", \"with-redefs-fn\", \"xml-seq\", \"zero?\", \"zipmap\"],\n  tokenizer: {\n    root: [{\n      include: \"@whitespace\"\n    }, [/@numbers/, \"number\"], [/@characters/, \"string\"], {\n      include: \"@string\"\n    }, [/[()\\[\\]{}]/, \"@brackets\"], [/\\/#\"(?:\\.|(?:\")|[^\"\\n])*\"\\/g/, \"regexp\"], [/[#'@^`~]/, \"meta\"], [/@qualifiedSymbols/, {\n      cases: {\n        \"^:.+$\": \"constant\",\n        \"@specialForms\": \"keyword\",\n        \"@coreSymbols\": \"keyword\",\n        \"@constants\": \"constant\",\n        \"@default\": \"identifier\"\n      }\n    }]],\n    whitespace: [[/[\\s,]+/, \"white\"], [/;.*$/, \"comment\"], [/\\(comment\\b/, \"comment\", \"@comment\"]],\n    comment: [[/\\(/, \"comment\", \"@push\"], [/\\)/, \"comment\", \"@pop\"], [/[^()]/, \"comment\"]],\n    string: [[/\"/, \"string\", \"@multiLineString\"]],\n    multiLineString: [[/\"/, \"string\", \"@popall\"], [/@escapes/, \"string.escape\"], [/./, \"string\"]]\n  }\n};\nexport { conf, language };","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/basic-languages/clojure/clojure.js"],"names":["conf","comments","lineComment","brackets","autoClosingPairs","open","close","surroundingPairs","language","defaultToken","ignoreCase","tokenPostfix","token","constants","numbers","characters","escapes","qualifiedSymbols","specialForms","coreSymbols","tokenizer","root","include","cases","whitespace","comment","string","multiLineString"],"mappings":"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","sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/clojure/clojure.ts\nvar conf = {\n  comments: {\n    lineComment: \";;\"\n  },\n  brackets: [\n    [\"[\", \"]\"],\n    [\"(\", \")\"],\n    [\"{\", \"}\"]\n  ],\n  autoClosingPairs: [\n    { open: \"[\", close: \"]\" },\n    { open: '\"', close: '\"' },\n    { open: \"(\", close: \")\" },\n    { open: \"{\", close: \"}\" }\n  ],\n  surroundingPairs: [\n    { open: \"[\", close: \"]\" },\n    { open: '\"', close: '\"' },\n    { open: \"(\", close: \")\" },\n    { open: \"{\", close: \"}\" }\n  ]\n};\nvar language = {\n  defaultToken: \"\",\n  ignoreCase: true,\n  tokenPostfix: \".clj\",\n  brackets: [\n    { open: \"[\", close: \"]\", token: \"delimiter.square\" },\n    { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"{\", close: \"}\", token: \"delimiter.curly\" }\n  ],\n  constants: [\"true\", \"false\", \"nil\"],\n  numbers: /^(?:[+\\-]?\\d+(?:(?:N|(?:[eE][+\\-]?\\d+))|(?:\\.?\\d*(?:M|(?:[eE][+\\-]?\\d+))?)|\\/\\d+|[xX][0-9a-fA-F]+|r[0-9a-zA-Z]+)?(?=[\\\\\\[\\]\\s\"#'(),;@^`{}~]|$))/,\n  characters: /^(?:\\\\(?:backspace|formfeed|newline|return|space|tab|o[0-7]{3}|u[0-9A-Fa-f]{4}|x[0-9A-Fa-f]{4}|.)?(?=[\\\\\\[\\]\\s\"(),;@^`{}~]|$))/,\n  escapes: /^\\\\(?:[\"'\\\\bfnrt]|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  qualifiedSymbols: /^(?:(?:[^\\\\\\/\\[\\]\\d\\s\"#'(),;@^`{}~][^\\\\\\[\\]\\s\"(),;@^`{}~]*(?:\\.[^\\\\\\/\\[\\]\\d\\s\"#'(),;@^`{}~][^\\\\\\[\\]\\s\"(),;@^`{}~]*)*\\/)?(?:\\/|[^\\\\\\/\\[\\]\\d\\s\"#'(),;@^`{}~][^\\\\\\[\\]\\s\"(),;@^`{}~]*)*(?=[\\\\\\[\\]\\s\"(),;@^`{}~]|$))/,\n  specialForms: [\n    \".\",\n    \"catch\",\n    \"def\",\n    \"do\",\n    \"if\",\n    \"monitor-enter\",\n    \"monitor-exit\",\n    \"new\",\n    \"quote\",\n    \"recur\",\n    \"set!\",\n    \"throw\",\n    \"try\",\n    \"var\"\n  ],\n  coreSymbols: [\n    \"*\",\n    \"*'\",\n    \"*1\",\n    \"*2\",\n    \"*3\",\n    \"*agent*\",\n    \"*allow-unresolved-vars*\",\n    \"*assert*\",\n    \"*clojure-version*\",\n    \"*command-line-args*\",\n    \"*compile-files*\",\n    \"*compile-path*\",\n    \"*compiler-options*\",\n    \"*data-readers*\",\n    \"*default-data-reader-fn*\",\n    \"*e\",\n    \"*err*\",\n    \"*file*\",\n    \"*flush-on-newline*\",\n    \"*fn-loader*\",\n    \"*in*\",\n    \"*math-context*\",\n    \"*ns*\",\n    \"*out*\",\n    \"*print-dup*\",\n    \"*print-length*\",\n    \"*print-level*\",\n    \"*print-meta*\",\n    \"*print-namespace-maps*\",\n    \"*print-readably*\",\n    \"*read-eval*\",\n    \"*reader-resolver*\",\n    \"*source-path*\",\n    \"*suppress-read*\",\n    \"*unchecked-math*\",\n    \"*use-context-classloader*\",\n    \"*verbose-defrecords*\",\n    \"*warn-on-reflection*\",\n    \"+\",\n    \"+'\",\n    \"-\",\n    \"-'\",\n    \"->\",\n    \"->>\",\n    \"->ArrayChunk\",\n    \"->Eduction\",\n    \"->Vec\",\n    \"->VecNode\",\n    \"->VecSeq\",\n    \"-cache-protocol-fn\",\n    \"-reset-methods\",\n    \"..\",\n    \"/\",\n    \"<\",\n    \"<=\",\n    \"=\",\n    \"==\",\n    \">\",\n    \">=\",\n    \"EMPTY-NODE\",\n    \"Inst\",\n    \"StackTraceElement->vec\",\n    \"Throwable->map\",\n    \"accessor\",\n    \"aclone\",\n    \"add-classpath\",\n    \"add-watch\",\n    \"agent\",\n    \"agent-error\",\n    \"agent-errors\",\n    \"aget\",\n    \"alength\",\n    \"alias\",\n    \"all-ns\",\n    \"alter\",\n    \"alter-meta!\",\n    \"alter-var-root\",\n    \"amap\",\n    \"ancestors\",\n    \"and\",\n    \"any?\",\n    \"apply\",\n    \"areduce\",\n    \"array-map\",\n    \"as->\",\n    \"aset\",\n    \"aset-boolean\",\n    \"aset-byte\",\n    \"aset-char\",\n    \"aset-double\",\n    \"aset-float\",\n    \"aset-int\",\n    \"aset-long\",\n    \"aset-short\",\n    \"assert\",\n    \"assoc\",\n    \"assoc!\",\n    \"assoc-in\",\n    \"associative?\",\n    \"atom\",\n    \"await\",\n    \"await-for\",\n    \"await1\",\n    \"bases\",\n    \"bean\",\n    \"bigdec\",\n    \"bigint\",\n    \"biginteger\",\n    \"binding\",\n    \"bit-and\",\n    \"bit-and-not\",\n    \"bit-clear\",\n    \"bit-flip\",\n    \"bit-not\",\n    \"bit-or\",\n    \"bit-set\",\n    \"bit-shift-left\",\n    \"bit-shift-right\",\n    \"bit-test\",\n    \"bit-xor\",\n    \"boolean\",\n    \"boolean-array\",\n    \"boolean?\",\n    \"booleans\",\n    \"bound-fn\",\n    \"bound-fn*\",\n    \"bound?\",\n    \"bounded-count\",\n    \"butlast\",\n    \"byte\",\n    \"byte-array\",\n    \"bytes\",\n    \"bytes?\",\n    \"case\",\n    \"cast\",\n    \"cat\",\n    \"char\",\n    \"char-array\",\n    \"char-escape-string\",\n    \"char-name-string\",\n    \"char?\",\n    \"chars\",\n    \"chunk\",\n    \"chunk-append\",\n    \"chunk-buffer\",\n    \"chunk-cons\",\n    \"chunk-first\",\n    \"chunk-next\",\n    \"chunk-rest\",\n    \"chunked-seq?\",\n    \"class\",\n    \"class?\",\n    \"clear-agent-errors\",\n    \"clojure-version\",\n    \"coll?\",\n    \"comment\",\n    \"commute\",\n    \"comp\",\n    \"comparator\",\n    \"compare\",\n    \"compare-and-set!\",\n    \"compile\",\n    \"complement\",\n    \"completing\",\n    \"concat\",\n    \"cond\",\n    \"cond->\",\n    \"cond->>\",\n    \"condp\",\n    \"conj\",\n    \"conj!\",\n    \"cons\",\n    \"constantly\",\n    \"construct-proxy\",\n    \"contains?\",\n    \"count\",\n    \"counted?\",\n    \"create-ns\",\n    \"create-struct\",\n    \"cycle\",\n    \"dec\",\n    \"dec'\",\n    \"decimal?\",\n    \"declare\",\n    \"dedupe\",\n    \"default-data-readers\",\n    \"definline\",\n    \"definterface\",\n    \"defmacro\",\n    \"defmethod\",\n    \"defmulti\",\n    \"defn\",\n    \"defn-\",\n    \"defonce\",\n    \"defprotocol\",\n    \"defrecord\",\n    \"defstruct\",\n    \"deftype\",\n    \"delay\",\n    \"delay?\",\n    \"deliver\",\n    \"denominator\",\n    \"deref\",\n    \"derive\",\n    \"descendants\",\n    \"destructure\",\n    \"disj\",\n    \"disj!\",\n    \"dissoc\",\n    \"dissoc!\",\n    \"distinct\",\n    \"distinct?\",\n    \"doall\",\n    \"dorun\",\n    \"doseq\",\n    \"dosync\",\n    \"dotimes\",\n    \"doto\",\n    \"double\",\n    \"double-array\",\n    \"double?\",\n    \"doubles\",\n    \"drop\",\n    \"drop-last\",\n    \"drop-while\",\n    \"eduction\",\n    \"empty\",\n    \"empty?\",\n    \"ensure\",\n    \"ensure-reduced\",\n    \"enumeration-seq\",\n    \"error-handler\",\n    \"error-mode\",\n    \"eval\",\n    \"even?\",\n    \"every-pred\",\n    \"every?\",\n    \"ex-data\",\n    \"ex-info\",\n    \"extend\",\n    \"extend-protocol\",\n    \"extend-type\",\n    \"extenders\",\n    \"extends?\",\n    \"false?\",\n    \"ffirst\",\n    \"file-seq\",\n    \"filter\",\n    \"filterv\",\n    \"find\",\n    \"find-keyword\",\n    \"find-ns\",\n    \"find-protocol-impl\",\n    \"find-protocol-method\",\n    \"find-var\",\n    \"first\",\n    \"flatten\",\n    \"float\",\n    \"float-array\",\n    \"float?\",\n    \"floats\",\n    \"flush\",\n    \"fn\",\n    \"fn?\",\n    \"fnext\",\n    \"fnil\",\n    \"for\",\n    \"force\",\n    \"format\",\n    \"frequencies\",\n    \"future\",\n    \"future-call\",\n    \"future-cancel\",\n    \"future-cancelled?\",\n    \"future-done?\",\n    \"future?\",\n    \"gen-class\",\n    \"gen-interface\",\n    \"gensym\",\n    \"get\",\n    \"get-in\",\n    \"get-method\",\n    \"get-proxy-class\",\n    \"get-thread-bindings\",\n    \"get-validator\",\n    \"group-by\",\n    \"halt-when\",\n    \"hash\",\n    \"hash-combine\",\n    \"hash-map\",\n    \"hash-ordered-coll\",\n    \"hash-set\",\n    \"hash-unordered-coll\",\n    \"ident?\",\n    \"identical?\",\n    \"identity\",\n    \"if-let\",\n    \"if-not\",\n    \"if-some\",\n    \"ifn?\",\n    \"import\",\n    \"in-ns\",\n    \"inc\",\n    \"inc'\",\n    \"indexed?\",\n    \"init-proxy\",\n    \"inst-ms\",\n    \"inst-ms*\",\n    \"inst?\",\n    \"instance?\",\n    \"int\",\n    \"int-array\",\n    \"int?\",\n    \"integer?\",\n    \"interleave\",\n    \"intern\",\n    \"interpose\",\n    \"into\",\n    \"into-array\",\n    \"ints\",\n    \"io!\",\n    \"isa?\",\n    \"iterate\",\n    \"iterator-seq\",\n    \"juxt\",\n    \"keep\",\n    \"keep-indexed\",\n    \"key\",\n    \"keys\",\n    \"keyword\",\n    \"keyword?\",\n    \"last\",\n    \"lazy-cat\",\n    \"lazy-seq\",\n    \"let\",\n    \"letfn\",\n    \"line-seq\",\n    \"list\",\n    \"list*\",\n    \"list?\",\n    \"load\",\n    \"load-file\",\n    \"load-reader\",\n    \"load-string\",\n    \"loaded-libs\",\n    \"locking\",\n    \"long\",\n    \"long-array\",\n    \"longs\",\n    \"loop\",\n    \"macroexpand\",\n    \"macroexpand-1\",\n    \"make-array\",\n    \"make-hierarchy\",\n    \"map\",\n    \"map-entry?\",\n    \"map-indexed\",\n    \"map?\",\n    \"mapcat\",\n    \"mapv\",\n    \"max\",\n    \"max-key\",\n    \"memfn\",\n    \"memoize\",\n    \"merge\",\n    \"merge-with\",\n    \"meta\",\n    \"method-sig\",\n    \"methods\",\n    \"min\",\n    \"min-key\",\n    \"mix-collection-hash\",\n    \"mod\",\n    \"munge\",\n    \"name\",\n    \"namespace\",\n    \"namespace-munge\",\n    \"nat-int?\",\n    \"neg-int?\",\n    \"neg?\",\n    \"newline\",\n    \"next\",\n    \"nfirst\",\n    \"nil?\",\n    \"nnext\",\n    \"not\",\n    \"not-any?\",\n    \"not-empty\",\n    \"not-every?\",\n    \"not=\",\n    \"ns\",\n    \"ns-aliases\",\n    \"ns-imports\",\n    \"ns-interns\",\n    \"ns-map\",\n    \"ns-name\",\n    \"ns-publics\",\n    \"ns-refers\",\n    \"ns-resolve\",\n    \"ns-unalias\",\n    \"ns-unmap\",\n    \"nth\",\n    \"nthnext\",\n    \"nthrest\",\n    \"num\",\n    \"number?\",\n    \"numerator\",\n    \"object-array\",\n    \"odd?\",\n    \"or\",\n    \"parents\",\n    \"partial\",\n    \"partition\",\n    \"partition-all\",\n    \"partition-by\",\n    \"pcalls\",\n    \"peek\",\n    \"persistent!\",\n    \"pmap\",\n    \"pop\",\n    \"pop!\",\n    \"pop-thread-bindings\",\n    \"pos-int?\",\n    \"pos?\",\n    \"pr\",\n    \"pr-str\",\n    \"prefer-method\",\n    \"prefers\",\n    \"primitives-classnames\",\n    \"print\",\n    \"print-ctor\",\n    \"print-dup\",\n    \"print-method\",\n    \"print-simple\",\n    \"print-str\",\n    \"printf\",\n    \"println\",\n    \"println-str\",\n    \"prn\",\n    \"prn-str\",\n    \"promise\",\n    \"proxy\",\n    \"proxy-call-with-super\",\n    \"proxy-mappings\",\n    \"proxy-name\",\n    \"proxy-super\",\n    \"push-thread-bindings\",\n    \"pvalues\",\n    \"qualified-ident?\",\n    \"qualified-keyword?\",\n    \"qualified-symbol?\",\n    \"quot\",\n    \"rand\",\n    \"rand-int\",\n    \"rand-nth\",\n    \"random-sample\",\n    \"range\",\n    \"ratio?\",\n    \"rational?\",\n    \"rationalize\",\n    \"re-find\",\n    \"re-groups\",\n    \"re-matcher\",\n    \"re-matches\",\n    \"re-pattern\",\n    \"re-seq\",\n    \"read\",\n    \"read-line\",\n    \"read-string\",\n    \"reader-conditional\",\n    \"reader-conditional?\",\n    \"realized?\",\n    \"record?\",\n    \"reduce\",\n    \"reduce-kv\",\n    \"reduced\",\n    \"reduced?\",\n    \"reductions\",\n    \"ref\",\n    \"ref-history-count\",\n    \"ref-max-history\",\n    \"ref-min-history\",\n    \"ref-set\",\n    \"refer\",\n    \"refer-clojure\",\n    \"reify\",\n    \"release-pending-sends\",\n    \"rem\",\n    \"remove\",\n    \"remove-all-methods\",\n    \"remove-method\",\n    \"remove-ns\",\n    \"remove-watch\",\n    \"repeat\",\n    \"repeatedly\",\n    \"replace\",\n    \"replicate\",\n    \"require\",\n    \"reset!\",\n    \"reset-meta!\",\n    \"reset-vals!\",\n    \"resolve\",\n    \"rest\",\n    \"restart-agent\",\n    \"resultset-seq\",\n    \"reverse\",\n    \"reversible?\",\n    \"rseq\",\n    \"rsubseq\",\n    \"run!\",\n    \"satisfies?\",\n    \"second\",\n    \"select-keys\",\n    \"send\",\n    \"send-off\",\n    \"send-via\",\n    \"seq\",\n    \"seq?\",\n    \"seqable?\",\n    \"seque\",\n    \"sequence\",\n    \"sequential?\",\n    \"set\",\n    \"set-agent-send-executor!\",\n    \"set-agent-send-off-executor!\",\n    \"set-error-handler!\",\n    \"set-error-mode!\",\n    \"set-validator!\",\n    \"set?\",\n    \"short\",\n    \"short-array\",\n    \"shorts\",\n    \"shuffle\",\n    \"shutdown-agents\",\n    \"simple-ident?\",\n    \"simple-keyword?\",\n    \"simple-symbol?\",\n    \"slurp\",\n    \"some\",\n    \"some->\",\n    \"some->>\",\n    \"some-fn\",\n    \"some?\",\n    \"sort\",\n    \"sort-by\",\n    \"sorted-map\",\n    \"sorted-map-by\",\n    \"sorted-set\",\n    \"sorted-set-by\",\n    \"sorted?\",\n    \"special-symbol?\",\n    \"spit\",\n    \"split-at\",\n    \"split-with\",\n    \"str\",\n    \"string?\",\n    \"struct\",\n    \"struct-map\",\n    \"subs\",\n    \"subseq\",\n    \"subvec\",\n    \"supers\",\n    \"swap!\",\n    \"swap-vals!\",\n    \"symbol\",\n    \"symbol?\",\n    \"sync\",\n    \"tagged-literal\",\n    \"tagged-literal?\",\n    \"take\",\n    \"take-last\",\n    \"take-nth\",\n    \"take-while\",\n    \"test\",\n    \"the-ns\",\n    \"thread-bound?\",\n    \"time\",\n    \"to-array\",\n    \"to-array-2d\",\n    \"trampoline\",\n    \"transduce\",\n    \"transient\",\n    \"tree-seq\",\n    \"true?\",\n    \"type\",\n    \"unchecked-add\",\n    \"unchecked-add-int\",\n    \"unchecked-byte\",\n    \"unchecked-char\",\n    \"unchecked-dec\",\n    \"unchecked-dec-int\",\n    \"unchecked-divide-int\",\n    \"unchecked-double\",\n    \"unchecked-float\",\n    \"unchecked-inc\",\n    \"unchecked-inc-int\",\n    \"unchecked-int\",\n    \"unchecked-long\",\n    \"unchecked-multiply\",\n    \"unchecked-multiply-int\",\n    \"unchecked-negate\",\n    \"unchecked-negate-int\",\n    \"unchecked-remainder-int\",\n    \"unchecked-short\",\n    \"unchecked-subtract\",\n    \"unchecked-subtract-int\",\n    \"underive\",\n    \"unquote\",\n    \"unquote-splicing\",\n    \"unreduced\",\n    \"unsigned-bit-shift-right\",\n    \"update\",\n    \"update-in\",\n    \"update-proxy\",\n    \"uri?\",\n    \"use\",\n    \"uuid?\",\n    \"val\",\n    \"vals\",\n    \"var-get\",\n    \"var-set\",\n    \"var?\",\n    \"vary-meta\",\n    \"vec\",\n    \"vector\",\n    \"vector-of\",\n    \"vector?\",\n    \"volatile!\",\n    \"volatile?\",\n    \"vreset!\",\n    \"vswap!\",\n    \"when\",\n    \"when-first\",\n    \"when-let\",\n    \"when-not\",\n    \"when-some\",\n    \"while\",\n    \"with-bindings\",\n    \"with-bindings*\",\n    \"with-in-str\",\n    \"with-loading-context\",\n    \"with-local-vars\",\n    \"with-meta\",\n    \"with-open\",\n    \"with-out-str\",\n    \"with-precision\",\n    \"with-redefs\",\n    \"with-redefs-fn\",\n    \"xml-seq\",\n    \"zero?\",\n    \"zipmap\"\n  ],\n  tokenizer: {\n    root: [\n      { include: \"@whitespace\" },\n      [/@numbers/, \"number\"],\n      [/@characters/, \"string\"],\n      { include: \"@string\" },\n      [/[()\\[\\]{}]/, \"@brackets\"],\n      [/\\/#\"(?:\\.|(?:\")|[^\"\\n])*\"\\/g/, \"regexp\"],\n      [/[#'@^`~]/, \"meta\"],\n      [\n        /@qualifiedSymbols/,\n        {\n          cases: {\n            \"^:.+$\": \"constant\",\n            \"@specialForms\": \"keyword\",\n            \"@coreSymbols\": \"keyword\",\n            \"@constants\": \"constant\",\n            \"@default\": \"identifier\"\n          }\n        }\n      ]\n    ],\n    whitespace: [\n      [/[\\s,]+/, \"white\"],\n      [/;.*$/, \"comment\"],\n      [/\\(comment\\b/, \"comment\", \"@comment\"]\n    ],\n    comment: [\n      [/\\(/, \"comment\", \"@push\"],\n      [/\\)/, \"comment\", \"@pop\"],\n      [/[^()]/, \"comment\"]\n    ],\n    string: [[/\"/, \"string\", \"@multiLineString\"]],\n    multiLineString: [\n      [/\"/, \"string\", \"@popall\"],\n      [/@escapes/, \"string.escape\"],\n      [/./, \"string\"]\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"]},"metadata":{},"sourceType":"module"}