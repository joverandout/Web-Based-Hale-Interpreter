{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { $, addDisposableListener, append, scheduleAtNextAnimationFrame } from '../../dom.js';\nimport { Sash } from '../sash/sash.js';\nimport { SmoothScrollableElement } from '../scrollbar/scrollableElement.js';\nimport { pushToEnd, pushToStart, range } from '../../../common/arrays.js';\nimport { Color } from '../../../common/color.js';\nimport { Emitter, Event } from '../../../common/event.js';\nimport { combinedDisposable, Disposable, toDisposable } from '../../../common/lifecycle.js';\nimport { clamp } from '../../../common/numbers.js';\nimport { Scrollable } from '../../../common/scrollable.js';\nimport * as types from '../../../common/types.js';\nimport './splitview.css';\nconst defaultStyles = {\n  separatorBorder: Color.transparent\n};\n\nclass ViewItem {\n  constructor(container, view, size, disposable) {\n    this.container = container;\n    this.view = view;\n    this.disposable = disposable;\n    this._cachedVisibleSize = undefined;\n\n    if (typeof size === 'number') {\n      this._size = size;\n      this._cachedVisibleSize = undefined;\n      container.classList.add('visible');\n    } else {\n      this._size = 0;\n      this._cachedVisibleSize = size.cachedVisibleSize;\n    }\n  }\n\n  set size(size) {\n    this._size = size;\n  }\n\n  get size() {\n    return this._size;\n  }\n\n  get visible() {\n    return typeof this._cachedVisibleSize === 'undefined';\n  }\n\n  setVisible(visible, size) {\n    if (visible === this.visible) {\n      return;\n    }\n\n    if (visible) {\n      this.size = clamp(this._cachedVisibleSize, this.viewMinimumSize, this.viewMaximumSize);\n      this._cachedVisibleSize = undefined;\n    } else {\n      this._cachedVisibleSize = typeof size === 'number' ? size : this.size;\n      this.size = 0;\n    }\n\n    this.container.classList.toggle('visible', visible);\n\n    if (this.view.setVisible) {\n      this.view.setVisible(visible);\n    }\n  }\n\n  get minimumSize() {\n    return this.visible ? this.view.minimumSize : 0;\n  }\n\n  get viewMinimumSize() {\n    return this.view.minimumSize;\n  }\n\n  get maximumSize() {\n    return this.visible ? this.view.maximumSize : 0;\n  }\n\n  get viewMaximumSize() {\n    return this.view.maximumSize;\n  }\n\n  get priority() {\n    return this.view.priority;\n  }\n\n  get snap() {\n    return !!this.view.snap;\n  }\n\n  set enabled(enabled) {\n    this.container.style.pointerEvents = enabled ? '' : 'none';\n  }\n\n  layout(offset, layoutContext) {\n    this.layoutContainer(offset);\n    this.view.layout(this.size, offset, layoutContext);\n  }\n\n  dispose() {\n    this.disposable.dispose();\n    return this.view;\n  }\n\n}\n\nclass VerticalViewItem extends ViewItem {\n  layoutContainer(offset) {\n    this.container.style.top = `${offset}px`;\n    this.container.style.height = `${this.size}px`;\n  }\n\n}\n\nclass HorizontalViewItem extends ViewItem {\n  layoutContainer(offset) {\n    this.container.style.left = `${offset}px`;\n    this.container.style.width = `${this.size}px`;\n  }\n\n}\n\nvar State;\n\n(function (State) {\n  State[State[\"Idle\"] = 0] = \"Idle\";\n  State[State[\"Busy\"] = 1] = \"Busy\";\n})(State || (State = {}));\n\nexport var Sizing;\n\n(function (Sizing) {\n  /**\n   * When adding or removing views, distribute the delta space among\n   * all other views.\n   */\n  Sizing.Distribute = {\n    type: 'distribute'\n  };\n  /**\n   * When adding or removing views, split the delta space with another\n   * specific view, indexed by the provided `index`.\n   */\n\n  function Split(index) {\n    return {\n      type: 'split',\n      index\n    };\n  }\n\n  Sizing.Split = Split;\n  /**\n   * When adding or removing views, assume the view is invisible.\n   */\n\n  function Invisible(cachedVisibleSize) {\n    return {\n      type: 'invisible',\n      cachedVisibleSize\n    };\n  }\n\n  Sizing.Invisible = Invisible;\n})(Sizing || (Sizing = {}));\n/**\n * The {@link SplitView} is the UI component which implements a one dimensional\n * flex-like layout algorithm for a collection of {@link IView} instances, which\n * are essentially HTMLElement instances with the following size constraints:\n *\n * - {@link IView.minimumSize}\n * - {@link IView.maximumSize}\n * - {@link IView.priority}\n * - {@link IView.snap}\n *\n * In case the SplitView doesn't have enough size to fit all views, it will overflow\n * its content with a scrollbar.\n *\n * In between each pair of views there will be a {@link Sash} allowing the user\n * to resize the views, making sure the constraints are respected.\n *\n * An optional {@link TLayoutContext layout context type} may be used in order to\n * pass along layout contextual data from the {@link SplitView.layout} method down\n * to each view's {@link IView.layout} calls.\n *\n * Features:\n * - Flex-like layout algorithm\n * - Snap support\n * - Orthogonal sash support, for corner sashes\n * - View hide/show support\n * - View swap/move support\n * - Alt key modifier behavior, macOS style\n */\n\n\nexport class SplitView extends Disposable {\n  /**\n   * Create a new {@link SplitView} instance.\n   */\n  constructor(container, options = {}) {\n    var _a, _b, _c, _d, _e;\n\n    super();\n    this.size = 0;\n    this.contentSize = 0;\n    this.proportions = undefined;\n    this.viewItems = [];\n    this.sashItems = [];\n    this.state = State.Idle;\n    this._onDidSashChange = this._register(new Emitter());\n    this._onDidSashReset = this._register(new Emitter());\n    this._startSnappingEnabled = true;\n    this._endSnappingEnabled = true;\n    /**\n     * Fires whenever the user resizes a {@link Sash sash}.\n     */\n\n    this.onDidSashChange = this._onDidSashChange.event;\n    /**\n     * Fires whenever the user double clicks a {@link Sash sash}.\n     */\n\n    this.onDidSashReset = this._onDidSashReset.event;\n    this.orientation = (_a = options.orientation) !== null && _a !== void 0 ? _a : 0\n    /* VERTICAL */\n    ;\n    this.inverseAltBehavior = (_b = options.inverseAltBehavior) !== null && _b !== void 0 ? _b : false;\n    this.proportionalLayout = (_c = options.proportionalLayout) !== null && _c !== void 0 ? _c : true;\n    this.getSashOrthogonalSize = options.getSashOrthogonalSize;\n    this.el = document.createElement('div');\n    this.el.classList.add('monaco-split-view2');\n    this.el.classList.add(this.orientation === 0\n    /* VERTICAL */\n    ? 'vertical' : 'horizontal');\n    container.appendChild(this.el);\n    this.sashContainer = append(this.el, $('.sash-container'));\n    this.viewContainer = $('.split-view-container');\n    this.scrollable = new Scrollable({\n      forceIntegerValues: true,\n      smoothScrollDuration: 125,\n      scheduleAtNextAnimationFrame\n    });\n    this.scrollableElement = this._register(new SmoothScrollableElement(this.viewContainer, {\n      vertical: this.orientation === 0\n      /* VERTICAL */\n      ? (_d = options.scrollbarVisibility) !== null && _d !== void 0 ? _d : 1\n      /* Auto */\n      : 2\n      /* Hidden */\n      ,\n      horizontal: this.orientation === 1\n      /* HORIZONTAL */\n      ? (_e = options.scrollbarVisibility) !== null && _e !== void 0 ? _e : 1\n      /* Auto */\n      : 2\n      /* Hidden */\n\n    }, this.scrollable));\n    this.onDidScroll = this.scrollableElement.onScroll;\n\n    this._register(this.onDidScroll(e => {\n      this.viewContainer.scrollTop = e.scrollTop;\n      this.viewContainer.scrollLeft = e.scrollLeft;\n    }));\n\n    append(this.el, this.scrollableElement.getDomNode());\n    this.style(options.styles || defaultStyles); // We have an existing set of view, add them now\n\n    if (options.descriptor) {\n      this.size = options.descriptor.size;\n      options.descriptor.views.forEach((viewDescriptor, index) => {\n        const sizing = types.isUndefined(viewDescriptor.visible) || viewDescriptor.visible ? viewDescriptor.size : {\n          type: 'invisible',\n          cachedVisibleSize: viewDescriptor.size\n        };\n        const view = viewDescriptor.view;\n        this.doAddView(view, sizing, index, true);\n      }); // Initialize content size and proportions for first layout\n\n      this.contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n      this.saveProportions();\n    }\n  }\n\n  get orthogonalStartSash() {\n    return this._orthogonalStartSash;\n  }\n\n  get orthogonalEndSash() {\n    return this._orthogonalEndSash;\n  }\n\n  get startSnappingEnabled() {\n    return this._startSnappingEnabled;\n  }\n\n  get endSnappingEnabled() {\n    return this._endSnappingEnabled;\n  }\n  /**\n   * A reference to a sash, perpendicular to all sashes in this {@link SplitView},\n   * located at the left- or top-most side of the SplitView.\n   * Corner sashes will be created automatically at the intersections.\n   */\n\n\n  set orthogonalStartSash(sash) {\n    for (const sashItem of this.sashItems) {\n      sashItem.sash.orthogonalStartSash = sash;\n    }\n\n    this._orthogonalStartSash = sash;\n  }\n  /**\n   * A reference to a sash, perpendicular to all sashes in this {@link SplitView},\n   * located at the right- or bottom-most side of the SplitView.\n   * Corner sashes will be created automatically at the intersections.\n   */\n\n\n  set orthogonalEndSash(sash) {\n    for (const sashItem of this.sashItems) {\n      sashItem.sash.orthogonalEndSash = sash;\n    }\n\n    this._orthogonalEndSash = sash;\n  }\n  /**\n   * Enable/disable snapping at the beginning of this {@link SplitView}.\n   */\n\n\n  set startSnappingEnabled(startSnappingEnabled) {\n    if (this._startSnappingEnabled === startSnappingEnabled) {\n      return;\n    }\n\n    this._startSnappingEnabled = startSnappingEnabled;\n    this.updateSashEnablement();\n  }\n  /**\n   * Enable/disable snapping at the end of this {@link SplitView}.\n   */\n\n\n  set endSnappingEnabled(endSnappingEnabled) {\n    if (this._endSnappingEnabled === endSnappingEnabled) {\n      return;\n    }\n\n    this._endSnappingEnabled = endSnappingEnabled;\n    this.updateSashEnablement();\n  }\n\n  style(styles) {\n    if (styles.separatorBorder.isTransparent()) {\n      this.el.classList.remove('separator-border');\n      this.el.style.removeProperty('--separator-border');\n    } else {\n      this.el.classList.add('separator-border');\n      this.el.style.setProperty('--separator-border', styles.separatorBorder.toString());\n    }\n  }\n  /**\n   * Add a {@link IView view} to this {@link SplitView}.\n   *\n   * @param view The view to add.\n   * @param size Either a fixed size, or a dynamic {@link Sizing} strategy.\n   * @param index The index to insert the view on.\n   * @param skipLayout Whether layout should be skipped.\n   */\n\n\n  addView(view, size, index = this.viewItems.length, skipLayout) {\n    this.doAddView(view, size, index, skipLayout);\n  }\n  /**\n   * Layout the {@link SplitView}.\n   *\n   * @param size The entire size of the {@link SplitView}.\n   * @param layoutContext An optional layout context to pass along to {@link IView views}.\n   */\n\n\n  layout(size, layoutContext) {\n    const previousSize = Math.max(this.size, this.contentSize);\n    this.size = size;\n    this.layoutContext = layoutContext;\n\n    if (!this.proportions) {\n      const indexes = range(this.viewItems.length);\n      const lowPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 1\n      /* Low */\n      );\n      const highPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 2\n      /* High */\n      );\n      this.resize(this.viewItems.length - 1, size - previousSize, undefined, lowPriorityIndexes, highPriorityIndexes);\n    } else {\n      for (let i = 0; i < this.viewItems.length; i++) {\n        const item = this.viewItems[i];\n        item.size = clamp(Math.round(this.proportions[i] * size), item.minimumSize, item.maximumSize);\n      }\n    }\n\n    this.distributeEmptySpace();\n    this.layoutViews();\n  }\n\n  saveProportions() {\n    if (this.proportionalLayout && this.contentSize > 0) {\n      this.proportions = this.viewItems.map(i => i.size / this.contentSize);\n    }\n  }\n\n  onSashStart({\n    sash,\n    start,\n    alt\n  }) {\n    for (const item of this.viewItems) {\n      item.enabled = false;\n    }\n\n    const index = this.sashItems.findIndex(item => item.sash === sash); // This way, we can press Alt while we resize a sash, macOS style!\n\n    const disposable = combinedDisposable(addDisposableListener(document.body, 'keydown', e => resetSashDragState(this.sashDragState.current, e.altKey)), addDisposableListener(document.body, 'keyup', () => resetSashDragState(this.sashDragState.current, false)));\n\n    const resetSashDragState = (start, alt) => {\n      const sizes = this.viewItems.map(i => i.size);\n      let minDelta = Number.NEGATIVE_INFINITY;\n      let maxDelta = Number.POSITIVE_INFINITY;\n\n      if (this.inverseAltBehavior) {\n        alt = !alt;\n      }\n\n      if (alt) {\n        // When we're using the last sash with Alt, we're resizing\n        // the view to the left/up, instead of right/down as usual\n        // Thus, we must do the inverse of the usual\n        const isLastSash = index === this.sashItems.length - 1;\n\n        if (isLastSash) {\n          const viewItem = this.viewItems[index];\n          minDelta = (viewItem.minimumSize - viewItem.size) / 2;\n          maxDelta = (viewItem.maximumSize - viewItem.size) / 2;\n        } else {\n          const viewItem = this.viewItems[index + 1];\n          minDelta = (viewItem.size - viewItem.maximumSize) / 2;\n          maxDelta = (viewItem.size - viewItem.minimumSize) / 2;\n        }\n      }\n\n      let snapBefore;\n      let snapAfter;\n\n      if (!alt) {\n        const upIndexes = range(index, -1);\n        const downIndexes = range(index + 1, this.viewItems.length);\n        const minDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].minimumSize - sizes[i]), 0);\n        const maxDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].viewMaximumSize - sizes[i]), 0);\n        const maxDeltaDown = downIndexes.length === 0 ? Number.POSITIVE_INFINITY : downIndexes.reduce((r, i) => r + (sizes[i] - this.viewItems[i].minimumSize), 0);\n        const minDeltaDown = downIndexes.length === 0 ? Number.NEGATIVE_INFINITY : downIndexes.reduce((r, i) => r + (sizes[i] - this.viewItems[i].viewMaximumSize), 0);\n        const minDelta = Math.max(minDeltaUp, minDeltaDown);\n        const maxDelta = Math.min(maxDeltaDown, maxDeltaUp);\n        const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n        const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n\n        if (typeof snapBeforeIndex === 'number') {\n          const viewItem = this.viewItems[snapBeforeIndex];\n          const halfSize = Math.floor(viewItem.viewMinimumSize / 2);\n          snapBefore = {\n            index: snapBeforeIndex,\n            limitDelta: viewItem.visible ? minDelta - halfSize : minDelta + halfSize,\n            size: viewItem.size\n          };\n        }\n\n        if (typeof snapAfterIndex === 'number') {\n          const viewItem = this.viewItems[snapAfterIndex];\n          const halfSize = Math.floor(viewItem.viewMinimumSize / 2);\n          snapAfter = {\n            index: snapAfterIndex,\n            limitDelta: viewItem.visible ? maxDelta + halfSize : maxDelta - halfSize,\n            size: viewItem.size\n          };\n        }\n      }\n\n      this.sashDragState = {\n        start,\n        current: start,\n        index,\n        sizes,\n        minDelta,\n        maxDelta,\n        alt,\n        snapBefore,\n        snapAfter,\n        disposable\n      };\n    };\n\n    resetSashDragState(start, alt);\n  }\n\n  onSashChange({\n    current\n  }) {\n    const {\n      index,\n      start,\n      sizes,\n      alt,\n      minDelta,\n      maxDelta,\n      snapBefore,\n      snapAfter\n    } = this.sashDragState;\n    this.sashDragState.current = current;\n    const delta = current - start;\n    const newDelta = this.resize(index, delta, sizes, undefined, undefined, minDelta, maxDelta, snapBefore, snapAfter);\n\n    if (alt) {\n      const isLastSash = index === this.sashItems.length - 1;\n      const newSizes = this.viewItems.map(i => i.size);\n      const viewItemIndex = isLastSash ? index : index + 1;\n      const viewItem = this.viewItems[viewItemIndex];\n      const newMinDelta = viewItem.size - viewItem.maximumSize;\n      const newMaxDelta = viewItem.size - viewItem.minimumSize;\n      const resizeIndex = isLastSash ? index - 1 : index + 1;\n      this.resize(resizeIndex, -newDelta, newSizes, undefined, undefined, newMinDelta, newMaxDelta);\n    }\n\n    this.distributeEmptySpace();\n    this.layoutViews();\n  }\n\n  onSashEnd(index) {\n    this._onDidSashChange.fire(index);\n\n    this.sashDragState.disposable.dispose();\n    this.saveProportions();\n\n    for (const item of this.viewItems) {\n      item.enabled = true;\n    }\n  }\n\n  onViewChange(item, size) {\n    const index = this.viewItems.indexOf(item);\n\n    if (index < 0 || index >= this.viewItems.length) {\n      return;\n    }\n\n    size = typeof size === 'number' ? size : item.size;\n    size = clamp(size, item.minimumSize, item.maximumSize);\n\n    if (this.inverseAltBehavior && index > 0) {\n      // In this case, we want the view to grow or shrink both sides equally\n      // so we just resize the \"left\" side by half and let `resize` do the clamping magic\n      this.resize(index - 1, Math.floor((item.size - size) / 2));\n      this.distributeEmptySpace();\n      this.layoutViews();\n    } else {\n      item.size = size;\n      this.relayout([index], undefined);\n    }\n  }\n  /**\n   * Resize a {@link IView view} within the {@link SplitView}.\n   *\n   * @param index The {@link IView view} index.\n   * @param size The {@link IView view} size.\n   */\n\n\n  resizeView(index, size) {\n    if (this.state !== State.Idle) {\n      throw new Error('Cant modify splitview');\n    }\n\n    this.state = State.Busy;\n\n    if (index < 0 || index >= this.viewItems.length) {\n      return;\n    }\n\n    const indexes = range(this.viewItems.length).filter(i => i !== index);\n    const lowPriorityIndexes = [...indexes.filter(i => this.viewItems[i].priority === 1\n    /* Low */\n    ), index];\n    const highPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 2\n    /* High */\n    );\n    const item = this.viewItems[index];\n    size = Math.round(size);\n    size = clamp(size, item.minimumSize, Math.min(item.maximumSize, this.size));\n    item.size = size;\n    this.relayout(lowPriorityIndexes, highPriorityIndexes);\n    this.state = State.Idle;\n  }\n  /**\n   * Distribute the entire {@link SplitView} size among all {@link IView views}.\n   */\n\n\n  distributeViewSizes() {\n    const flexibleViewItems = [];\n    let flexibleSize = 0;\n\n    for (const item of this.viewItems) {\n      if (item.maximumSize - item.minimumSize > 0) {\n        flexibleViewItems.push(item);\n        flexibleSize += item.size;\n      }\n    }\n\n    const size = Math.floor(flexibleSize / flexibleViewItems.length);\n\n    for (const item of flexibleViewItems) {\n      item.size = clamp(size, item.minimumSize, item.maximumSize);\n    }\n\n    const indexes = range(this.viewItems.length);\n    const lowPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 1\n    /* Low */\n    );\n    const highPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 2\n    /* High */\n    );\n    this.relayout(lowPriorityIndexes, highPriorityIndexes);\n  }\n  /**\n   * Returns the size of a {@link IView view}.\n   */\n\n\n  getViewSize(index) {\n    if (index < 0 || index >= this.viewItems.length) {\n      return -1;\n    }\n\n    return this.viewItems[index].size;\n  }\n\n  doAddView(view, size, index = this.viewItems.length, skipLayout) {\n    if (this.state !== State.Idle) {\n      throw new Error('Cant modify splitview');\n    }\n\n    this.state = State.Busy; // Add view\n\n    const container = $('.split-view-view');\n\n    if (index === this.viewItems.length) {\n      this.viewContainer.appendChild(container);\n    } else {\n      this.viewContainer.insertBefore(container, this.viewContainer.children.item(index));\n    }\n\n    const onChangeDisposable = view.onDidChange(size => this.onViewChange(item, size));\n    const containerDisposable = toDisposable(() => this.viewContainer.removeChild(container));\n    const disposable = combinedDisposable(onChangeDisposable, containerDisposable);\n    let viewSize;\n\n    if (typeof size === 'number') {\n      viewSize = size;\n    } else if (size.type === 'split') {\n      viewSize = this.getViewSize(size.index) / 2;\n    } else if (size.type === 'invisible') {\n      viewSize = {\n        cachedVisibleSize: size.cachedVisibleSize\n      };\n    } else {\n      viewSize = view.minimumSize;\n    }\n\n    const item = this.orientation === 0\n    /* VERTICAL */\n    ? new VerticalViewItem(container, view, viewSize, disposable) : new HorizontalViewItem(container, view, viewSize, disposable);\n    this.viewItems.splice(index, 0, item); // Add sash\n\n    if (this.viewItems.length > 1) {\n      let opts = {\n        orthogonalStartSash: this.orthogonalStartSash,\n        orthogonalEndSash: this.orthogonalEndSash\n      };\n      const sash = this.orientation === 0\n      /* VERTICAL */\n      ? new Sash(this.sashContainer, {\n        getHorizontalSashTop: s => this.getSashPosition(s),\n        getHorizontalSashWidth: this.getSashOrthogonalSize\n      }, Object.assign(Object.assign({}, opts), {\n        orientation: 1\n        /* HORIZONTAL */\n\n      })) : new Sash(this.sashContainer, {\n        getVerticalSashLeft: s => this.getSashPosition(s),\n        getVerticalSashHeight: this.getSashOrthogonalSize\n      }, Object.assign(Object.assign({}, opts), {\n        orientation: 0\n        /* VERTICAL */\n\n      }));\n      const sashEventMapper = this.orientation === 0\n      /* VERTICAL */\n      ? e => ({\n        sash,\n        start: e.startY,\n        current: e.currentY,\n        alt: e.altKey\n      }) : e => ({\n        sash,\n        start: e.startX,\n        current: e.currentX,\n        alt: e.altKey\n      });\n      const onStart = Event.map(sash.onDidStart, sashEventMapper);\n      const onStartDisposable = onStart(this.onSashStart, this);\n      const onChange = Event.map(sash.onDidChange, sashEventMapper);\n      const onChangeDisposable = onChange(this.onSashChange, this);\n      const onEnd = Event.map(sash.onDidEnd, () => this.sashItems.findIndex(item => item.sash === sash));\n      const onEndDisposable = onEnd(this.onSashEnd, this);\n      const onDidResetDisposable = sash.onDidReset(() => {\n        const index = this.sashItems.findIndex(item => item.sash === sash);\n        const upIndexes = range(index, -1);\n        const downIndexes = range(index + 1, this.viewItems.length);\n        const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n        const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n\n        if (typeof snapBeforeIndex === 'number' && !this.viewItems[snapBeforeIndex].visible) {\n          return;\n        }\n\n        if (typeof snapAfterIndex === 'number' && !this.viewItems[snapAfterIndex].visible) {\n          return;\n        }\n\n        this._onDidSashReset.fire(index);\n      });\n      const disposable = combinedDisposable(onStartDisposable, onChangeDisposable, onEndDisposable, onDidResetDisposable, sash);\n      const sashItem = {\n        sash,\n        disposable\n      };\n      this.sashItems.splice(index - 1, 0, sashItem);\n    }\n\n    container.appendChild(view.element);\n    let highPriorityIndexes;\n\n    if (typeof size !== 'number' && size.type === 'split') {\n      highPriorityIndexes = [size.index];\n    }\n\n    if (!skipLayout) {\n      this.relayout([index], highPriorityIndexes);\n    }\n\n    this.state = State.Idle;\n\n    if (!skipLayout && typeof size !== 'number' && size.type === 'distribute') {\n      this.distributeViewSizes();\n    }\n  }\n\n  relayout(lowPriorityIndexes, highPriorityIndexes) {\n    const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n    this.resize(this.viewItems.length - 1, this.size - contentSize, undefined, lowPriorityIndexes, highPriorityIndexes);\n    this.distributeEmptySpace();\n    this.layoutViews();\n    this.saveProportions();\n  }\n\n  resize(index, delta, sizes = this.viewItems.map(i => i.size), lowPriorityIndexes, highPriorityIndexes, overloadMinDelta = Number.NEGATIVE_INFINITY, overloadMaxDelta = Number.POSITIVE_INFINITY, snapBefore, snapAfter) {\n    if (index < 0 || index >= this.viewItems.length) {\n      return 0;\n    }\n\n    const upIndexes = range(index, -1);\n    const downIndexes = range(index + 1, this.viewItems.length);\n\n    if (highPriorityIndexes) {\n      for (const index of highPriorityIndexes) {\n        pushToStart(upIndexes, index);\n        pushToStart(downIndexes, index);\n      }\n    }\n\n    if (lowPriorityIndexes) {\n      for (const index of lowPriorityIndexes) {\n        pushToEnd(upIndexes, index);\n        pushToEnd(downIndexes, index);\n      }\n    }\n\n    const upItems = upIndexes.map(i => this.viewItems[i]);\n    const upSizes = upIndexes.map(i => sizes[i]);\n    const downItems = downIndexes.map(i => this.viewItems[i]);\n    const downSizes = downIndexes.map(i => sizes[i]);\n    const minDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].minimumSize - sizes[i]), 0);\n    const maxDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].maximumSize - sizes[i]), 0);\n    const maxDeltaDown = downIndexes.length === 0 ? Number.POSITIVE_INFINITY : downIndexes.reduce((r, i) => r + (sizes[i] - this.viewItems[i].minimumSize), 0);\n    const minDeltaDown = downIndexes.length === 0 ? Number.NEGATIVE_INFINITY : downIndexes.reduce((r, i) => r + (sizes[i] - this.viewItems[i].maximumSize), 0);\n    const minDelta = Math.max(minDeltaUp, minDeltaDown, overloadMinDelta);\n    const maxDelta = Math.min(maxDeltaDown, maxDeltaUp, overloadMaxDelta);\n    let snapped = false;\n\n    if (snapBefore) {\n      const snapView = this.viewItems[snapBefore.index];\n      const visible = delta >= snapBefore.limitDelta;\n      snapped = visible !== snapView.visible;\n      snapView.setVisible(visible, snapBefore.size);\n    }\n\n    if (!snapped && snapAfter) {\n      const snapView = this.viewItems[snapAfter.index];\n      const visible = delta < snapAfter.limitDelta;\n      snapped = visible !== snapView.visible;\n      snapView.setVisible(visible, snapAfter.size);\n    }\n\n    if (snapped) {\n      return this.resize(index, delta, sizes, lowPriorityIndexes, highPriorityIndexes, overloadMinDelta, overloadMaxDelta);\n    }\n\n    delta = clamp(delta, minDelta, maxDelta);\n\n    for (let i = 0, deltaUp = delta; i < upItems.length; i++) {\n      const item = upItems[i];\n      const size = clamp(upSizes[i] + deltaUp, item.minimumSize, item.maximumSize);\n      const viewDelta = size - upSizes[i];\n      deltaUp -= viewDelta;\n      item.size = size;\n    }\n\n    for (let i = 0, deltaDown = delta; i < downItems.length; i++) {\n      const item = downItems[i];\n      const size = clamp(downSizes[i] - deltaDown, item.minimumSize, item.maximumSize);\n      const viewDelta = size - downSizes[i];\n      deltaDown += viewDelta;\n      item.size = size;\n    }\n\n    return delta;\n  }\n\n  distributeEmptySpace(lowPriorityIndex) {\n    const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n    let emptyDelta = this.size - contentSize;\n    const indexes = range(this.viewItems.length - 1, -1);\n    const lowPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 1\n    /* Low */\n    );\n    const highPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 2\n    /* High */\n    );\n\n    for (const index of highPriorityIndexes) {\n      pushToStart(indexes, index);\n    }\n\n    for (const index of lowPriorityIndexes) {\n      pushToEnd(indexes, index);\n    }\n\n    if (typeof lowPriorityIndex === 'number') {\n      pushToEnd(indexes, lowPriorityIndex);\n    }\n\n    for (let i = 0; emptyDelta !== 0 && i < indexes.length; i++) {\n      const item = this.viewItems[indexes[i]];\n      const size = clamp(item.size + emptyDelta, item.minimumSize, item.maximumSize);\n      const viewDelta = size - item.size;\n      emptyDelta -= viewDelta;\n      item.size = size;\n    }\n  }\n\n  layoutViews() {\n    // Save new content size\n    this.contentSize = this.viewItems.reduce((r, i) => r + i.size, 0); // Layout views\n\n    let offset = 0;\n\n    for (const viewItem of this.viewItems) {\n      viewItem.layout(offset, this.layoutContext);\n      offset += viewItem.size;\n    } // Layout sashes\n\n\n    this.sashItems.forEach(item => item.sash.layout());\n    this.updateSashEnablement();\n    this.updateScrollableElement();\n  }\n\n  updateScrollableElement() {\n    if (this.orientation === 0\n    /* VERTICAL */\n    ) {\n      this.scrollableElement.setScrollDimensions({\n        height: this.size,\n        scrollHeight: this.contentSize\n      });\n    } else {\n      this.scrollableElement.setScrollDimensions({\n        width: this.size,\n        scrollWidth: this.contentSize\n      });\n    }\n  }\n\n  updateSashEnablement() {\n    let previous = false;\n    const collapsesDown = this.viewItems.map(i => previous = i.size - i.minimumSize > 0 || previous);\n    previous = false;\n    const expandsDown = this.viewItems.map(i => previous = i.maximumSize - i.size > 0 || previous);\n    const reverseViews = [...this.viewItems].reverse();\n    previous = false;\n    const collapsesUp = reverseViews.map(i => previous = i.size - i.minimumSize > 0 || previous).reverse();\n    previous = false;\n    const expandsUp = reverseViews.map(i => previous = i.maximumSize - i.size > 0 || previous).reverse();\n    let position = 0;\n\n    for (let index = 0; index < this.sashItems.length; index++) {\n      const {\n        sash\n      } = this.sashItems[index];\n      const viewItem = this.viewItems[index];\n      position += viewItem.size;\n      const min = !(collapsesDown[index] && expandsUp[index + 1]);\n      const max = !(expandsDown[index] && collapsesUp[index + 1]);\n\n      if (min && max) {\n        const upIndexes = range(index, -1);\n        const downIndexes = range(index + 1, this.viewItems.length);\n        const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n        const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n        const snappedBefore = typeof snapBeforeIndex === 'number' && !this.viewItems[snapBeforeIndex].visible;\n        const snappedAfter = typeof snapAfterIndex === 'number' && !this.viewItems[snapAfterIndex].visible;\n\n        if (snappedBefore && collapsesUp[index] && (position > 0 || this.startSnappingEnabled)) {\n          sash.state = 1\n          /* AtMinimum */\n          ;\n        } else if (snappedAfter && collapsesDown[index] && (position < this.contentSize || this.endSnappingEnabled)) {\n          sash.state = 2\n          /* AtMaximum */\n          ;\n        } else {\n          sash.state = 0\n          /* Disabled */\n          ;\n        }\n      } else if (min && !max) {\n        sash.state = 1\n        /* AtMinimum */\n        ;\n      } else if (!min && max) {\n        sash.state = 2\n        /* AtMaximum */\n        ;\n      } else {\n        sash.state = 3\n        /* Enabled */\n        ;\n      }\n    }\n  }\n\n  getSashPosition(sash) {\n    let position = 0;\n\n    for (let i = 0; i < this.sashItems.length; i++) {\n      position += this.viewItems[i].size;\n\n      if (this.sashItems[i].sash === sash) {\n        return position;\n      }\n    }\n\n    return 0;\n  }\n\n  findFirstSnapIndex(indexes) {\n    // visible views first\n    for (const index of indexes) {\n      const viewItem = this.viewItems[index];\n\n      if (!viewItem.visible) {\n        continue;\n      }\n\n      if (viewItem.snap) {\n        return index;\n      }\n    } // then, hidden views\n\n\n    for (const index of indexes) {\n      const viewItem = this.viewItems[index];\n\n      if (viewItem.visible && viewItem.maximumSize - viewItem.minimumSize > 0) {\n        return undefined;\n      }\n\n      if (!viewItem.visible && viewItem.snap) {\n        return index;\n      }\n    }\n\n    return undefined;\n  }\n\n  dispose() {\n    super.dispose();\n    this.viewItems.forEach(i => i.dispose());\n    this.viewItems = [];\n    this.sashItems.forEach(i => i.disposable.dispose());\n    this.sashItems = [];\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/base/browser/ui/splitview/splitview.js"],"names":["$","addDisposableListener","append","scheduleAtNextAnimationFrame","Sash","SmoothScrollableElement","pushToEnd","pushToStart","range","Color","Emitter","Event","combinedDisposable","Disposable","toDisposable","clamp","Scrollable","types","defaultStyles","separatorBorder","transparent","ViewItem","constructor","container","view","size","disposable","_cachedVisibleSize","undefined","_size","classList","add","cachedVisibleSize","visible","setVisible","viewMinimumSize","viewMaximumSize","toggle","minimumSize","maximumSize","priority","snap","enabled","style","pointerEvents","layout","offset","layoutContext","layoutContainer","dispose","VerticalViewItem","top","height","HorizontalViewItem","left","width","State","Sizing","Distribute","type","Split","index","Invisible","SplitView","options","_a","_b","_c","_d","_e","contentSize","proportions","viewItems","sashItems","state","Idle","_onDidSashChange","_register","_onDidSashReset","_startSnappingEnabled","_endSnappingEnabled","onDidSashChange","event","onDidSashReset","orientation","inverseAltBehavior","proportionalLayout","getSashOrthogonalSize","el","document","createElement","appendChild","sashContainer","viewContainer","scrollable","forceIntegerValues","smoothScrollDuration","scrollableElement","vertical","scrollbarVisibility","horizontal","onDidScroll","onScroll","e","scrollTop","scrollLeft","getDomNode","styles","descriptor","views","forEach","viewDescriptor","sizing","isUndefined","doAddView","reduce","r","i","saveProportions","orthogonalStartSash","_orthogonalStartSash","orthogonalEndSash","_orthogonalEndSash","startSnappingEnabled","endSnappingEnabled","sash","sashItem","updateSashEnablement","isTransparent","remove","removeProperty","setProperty","toString","addView","length","skipLayout","previousSize","Math","max","indexes","lowPriorityIndexes","filter","highPriorityIndexes","resize","item","round","distributeEmptySpace","layoutViews","map","onSashStart","start","alt","findIndex","body","resetSashDragState","sashDragState","current","altKey","sizes","minDelta","Number","NEGATIVE_INFINITY","maxDelta","POSITIVE_INFINITY","isLastSash","viewItem","snapBefore","snapAfter","upIndexes","downIndexes","minDeltaUp","maxDeltaUp","maxDeltaDown","minDeltaDown","min","snapBeforeIndex","findFirstSnapIndex","snapAfterIndex","halfSize","floor","limitDelta","onSashChange","delta","newDelta","newSizes","viewItemIndex","newMinDelta","newMaxDelta","resizeIndex","onSashEnd","fire","onViewChange","indexOf","relayout","resizeView","Error","Busy","distributeViewSizes","flexibleViewItems","flexibleSize","push","getViewSize","insertBefore","children","onChangeDisposable","onDidChange","containerDisposable","removeChild","viewSize","splice","opts","getHorizontalSashTop","s","getSashPosition","getHorizontalSashWidth","Object","assign","getVerticalSashLeft","getVerticalSashHeight","sashEventMapper","startY","currentY","startX","currentX","onStart","onDidStart","onStartDisposable","onChange","onEnd","onDidEnd","onEndDisposable","onDidResetDisposable","onDidReset","element","overloadMinDelta","overloadMaxDelta","upItems","upSizes","downItems","downSizes","snapped","snapView","deltaUp","viewDelta","deltaDown","lowPriorityIndex","emptyDelta","updateScrollableElement","setScrollDimensions","scrollHeight","scrollWidth","previous","collapsesDown","expandsDown","reverseViews","reverse","collapsesUp","expandsUp","position","snappedBefore","snappedAfter"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { $, addDisposableListener, append, scheduleAtNextAnimationFrame } from '../../dom.js';\nimport { Sash } from '../sash/sash.js';\nimport { SmoothScrollableElement } from '../scrollbar/scrollableElement.js';\nimport { pushToEnd, pushToStart, range } from '../../../common/arrays.js';\nimport { Color } from '../../../common/color.js';\nimport { Emitter, Event } from '../../../common/event.js';\nimport { combinedDisposable, Disposable, toDisposable } from '../../../common/lifecycle.js';\nimport { clamp } from '../../../common/numbers.js';\nimport { Scrollable } from '../../../common/scrollable.js';\nimport * as types from '../../../common/types.js';\nimport './splitview.css';\nconst defaultStyles = {\n    separatorBorder: Color.transparent\n};\nclass ViewItem {\n    constructor(container, view, size, disposable) {\n        this.container = container;\n        this.view = view;\n        this.disposable = disposable;\n        this._cachedVisibleSize = undefined;\n        if (typeof size === 'number') {\n            this._size = size;\n            this._cachedVisibleSize = undefined;\n            container.classList.add('visible');\n        }\n        else {\n            this._size = 0;\n            this._cachedVisibleSize = size.cachedVisibleSize;\n        }\n    }\n    set size(size) {\n        this._size = size;\n    }\n    get size() {\n        return this._size;\n    }\n    get visible() {\n        return typeof this._cachedVisibleSize === 'undefined';\n    }\n    setVisible(visible, size) {\n        if (visible === this.visible) {\n            return;\n        }\n        if (visible) {\n            this.size = clamp(this._cachedVisibleSize, this.viewMinimumSize, this.viewMaximumSize);\n            this._cachedVisibleSize = undefined;\n        }\n        else {\n            this._cachedVisibleSize = typeof size === 'number' ? size : this.size;\n            this.size = 0;\n        }\n        this.container.classList.toggle('visible', visible);\n        if (this.view.setVisible) {\n            this.view.setVisible(visible);\n        }\n    }\n    get minimumSize() { return this.visible ? this.view.minimumSize : 0; }\n    get viewMinimumSize() { return this.view.minimumSize; }\n    get maximumSize() { return this.visible ? this.view.maximumSize : 0; }\n    get viewMaximumSize() { return this.view.maximumSize; }\n    get priority() { return this.view.priority; }\n    get snap() { return !!this.view.snap; }\n    set enabled(enabled) {\n        this.container.style.pointerEvents = enabled ? '' : 'none';\n    }\n    layout(offset, layoutContext) {\n        this.layoutContainer(offset);\n        this.view.layout(this.size, offset, layoutContext);\n    }\n    dispose() {\n        this.disposable.dispose();\n        return this.view;\n    }\n}\nclass VerticalViewItem extends ViewItem {\n    layoutContainer(offset) {\n        this.container.style.top = `${offset}px`;\n        this.container.style.height = `${this.size}px`;\n    }\n}\nclass HorizontalViewItem extends ViewItem {\n    layoutContainer(offset) {\n        this.container.style.left = `${offset}px`;\n        this.container.style.width = `${this.size}px`;\n    }\n}\nvar State;\n(function (State) {\n    State[State[\"Idle\"] = 0] = \"Idle\";\n    State[State[\"Busy\"] = 1] = \"Busy\";\n})(State || (State = {}));\nexport var Sizing;\n(function (Sizing) {\n    /**\n     * When adding or removing views, distribute the delta space among\n     * all other views.\n     */\n    Sizing.Distribute = { type: 'distribute' };\n    /**\n     * When adding or removing views, split the delta space with another\n     * specific view, indexed by the provided `index`.\n     */\n    function Split(index) { return { type: 'split', index }; }\n    Sizing.Split = Split;\n    /**\n     * When adding or removing views, assume the view is invisible.\n     */\n    function Invisible(cachedVisibleSize) { return { type: 'invisible', cachedVisibleSize }; }\n    Sizing.Invisible = Invisible;\n})(Sizing || (Sizing = {}));\n/**\n * The {@link SplitView} is the UI component which implements a one dimensional\n * flex-like layout algorithm for a collection of {@link IView} instances, which\n * are essentially HTMLElement instances with the following size constraints:\n *\n * - {@link IView.minimumSize}\n * - {@link IView.maximumSize}\n * - {@link IView.priority}\n * - {@link IView.snap}\n *\n * In case the SplitView doesn't have enough size to fit all views, it will overflow\n * its content with a scrollbar.\n *\n * In between each pair of views there will be a {@link Sash} allowing the user\n * to resize the views, making sure the constraints are respected.\n *\n * An optional {@link TLayoutContext layout context type} may be used in order to\n * pass along layout contextual data from the {@link SplitView.layout} method down\n * to each view's {@link IView.layout} calls.\n *\n * Features:\n * - Flex-like layout algorithm\n * - Snap support\n * - Orthogonal sash support, for corner sashes\n * - View hide/show support\n * - View swap/move support\n * - Alt key modifier behavior, macOS style\n */\nexport class SplitView extends Disposable {\n    /**\n     * Create a new {@link SplitView} instance.\n     */\n    constructor(container, options = {}) {\n        var _a, _b, _c, _d, _e;\n        super();\n        this.size = 0;\n        this.contentSize = 0;\n        this.proportions = undefined;\n        this.viewItems = [];\n        this.sashItems = [];\n        this.state = State.Idle;\n        this._onDidSashChange = this._register(new Emitter());\n        this._onDidSashReset = this._register(new Emitter());\n        this._startSnappingEnabled = true;\n        this._endSnappingEnabled = true;\n        /**\n         * Fires whenever the user resizes a {@link Sash sash}.\n         */\n        this.onDidSashChange = this._onDidSashChange.event;\n        /**\n         * Fires whenever the user double clicks a {@link Sash sash}.\n         */\n        this.onDidSashReset = this._onDidSashReset.event;\n        this.orientation = (_a = options.orientation) !== null && _a !== void 0 ? _a : 0 /* VERTICAL */;\n        this.inverseAltBehavior = (_b = options.inverseAltBehavior) !== null && _b !== void 0 ? _b : false;\n        this.proportionalLayout = (_c = options.proportionalLayout) !== null && _c !== void 0 ? _c : true;\n        this.getSashOrthogonalSize = options.getSashOrthogonalSize;\n        this.el = document.createElement('div');\n        this.el.classList.add('monaco-split-view2');\n        this.el.classList.add(this.orientation === 0 /* VERTICAL */ ? 'vertical' : 'horizontal');\n        container.appendChild(this.el);\n        this.sashContainer = append(this.el, $('.sash-container'));\n        this.viewContainer = $('.split-view-container');\n        this.scrollable = new Scrollable({\n            forceIntegerValues: true,\n            smoothScrollDuration: 125,\n            scheduleAtNextAnimationFrame\n        });\n        this.scrollableElement = this._register(new SmoothScrollableElement(this.viewContainer, {\n            vertical: this.orientation === 0 /* VERTICAL */ ? ((_d = options.scrollbarVisibility) !== null && _d !== void 0 ? _d : 1 /* Auto */) : 2 /* Hidden */,\n            horizontal: this.orientation === 1 /* HORIZONTAL */ ? ((_e = options.scrollbarVisibility) !== null && _e !== void 0 ? _e : 1 /* Auto */) : 2 /* Hidden */\n        }, this.scrollable));\n        this.onDidScroll = this.scrollableElement.onScroll;\n        this._register(this.onDidScroll(e => {\n            this.viewContainer.scrollTop = e.scrollTop;\n            this.viewContainer.scrollLeft = e.scrollLeft;\n        }));\n        append(this.el, this.scrollableElement.getDomNode());\n        this.style(options.styles || defaultStyles);\n        // We have an existing set of view, add them now\n        if (options.descriptor) {\n            this.size = options.descriptor.size;\n            options.descriptor.views.forEach((viewDescriptor, index) => {\n                const sizing = types.isUndefined(viewDescriptor.visible) || viewDescriptor.visible ? viewDescriptor.size : { type: 'invisible', cachedVisibleSize: viewDescriptor.size };\n                const view = viewDescriptor.view;\n                this.doAddView(view, sizing, index, true);\n            });\n            // Initialize content size and proportions for first layout\n            this.contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n            this.saveProportions();\n        }\n    }\n    get orthogonalStartSash() { return this._orthogonalStartSash; }\n    get orthogonalEndSash() { return this._orthogonalEndSash; }\n    get startSnappingEnabled() { return this._startSnappingEnabled; }\n    get endSnappingEnabled() { return this._endSnappingEnabled; }\n    /**\n     * A reference to a sash, perpendicular to all sashes in this {@link SplitView},\n     * located at the left- or top-most side of the SplitView.\n     * Corner sashes will be created automatically at the intersections.\n     */\n    set orthogonalStartSash(sash) {\n        for (const sashItem of this.sashItems) {\n            sashItem.sash.orthogonalStartSash = sash;\n        }\n        this._orthogonalStartSash = sash;\n    }\n    /**\n     * A reference to a sash, perpendicular to all sashes in this {@link SplitView},\n     * located at the right- or bottom-most side of the SplitView.\n     * Corner sashes will be created automatically at the intersections.\n     */\n    set orthogonalEndSash(sash) {\n        for (const sashItem of this.sashItems) {\n            sashItem.sash.orthogonalEndSash = sash;\n        }\n        this._orthogonalEndSash = sash;\n    }\n    /**\n     * Enable/disable snapping at the beginning of this {@link SplitView}.\n     */\n    set startSnappingEnabled(startSnappingEnabled) {\n        if (this._startSnappingEnabled === startSnappingEnabled) {\n            return;\n        }\n        this._startSnappingEnabled = startSnappingEnabled;\n        this.updateSashEnablement();\n    }\n    /**\n     * Enable/disable snapping at the end of this {@link SplitView}.\n     */\n    set endSnappingEnabled(endSnappingEnabled) {\n        if (this._endSnappingEnabled === endSnappingEnabled) {\n            return;\n        }\n        this._endSnappingEnabled = endSnappingEnabled;\n        this.updateSashEnablement();\n    }\n    style(styles) {\n        if (styles.separatorBorder.isTransparent()) {\n            this.el.classList.remove('separator-border');\n            this.el.style.removeProperty('--separator-border');\n        }\n        else {\n            this.el.classList.add('separator-border');\n            this.el.style.setProperty('--separator-border', styles.separatorBorder.toString());\n        }\n    }\n    /**\n     * Add a {@link IView view} to this {@link SplitView}.\n     *\n     * @param view The view to add.\n     * @param size Either a fixed size, or a dynamic {@link Sizing} strategy.\n     * @param index The index to insert the view on.\n     * @param skipLayout Whether layout should be skipped.\n     */\n    addView(view, size, index = this.viewItems.length, skipLayout) {\n        this.doAddView(view, size, index, skipLayout);\n    }\n    /**\n     * Layout the {@link SplitView}.\n     *\n     * @param size The entire size of the {@link SplitView}.\n     * @param layoutContext An optional layout context to pass along to {@link IView views}.\n     */\n    layout(size, layoutContext) {\n        const previousSize = Math.max(this.size, this.contentSize);\n        this.size = size;\n        this.layoutContext = layoutContext;\n        if (!this.proportions) {\n            const indexes = range(this.viewItems.length);\n            const lowPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 1 /* Low */);\n            const highPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 2 /* High */);\n            this.resize(this.viewItems.length - 1, size - previousSize, undefined, lowPriorityIndexes, highPriorityIndexes);\n        }\n        else {\n            for (let i = 0; i < this.viewItems.length; i++) {\n                const item = this.viewItems[i];\n                item.size = clamp(Math.round(this.proportions[i] * size), item.minimumSize, item.maximumSize);\n            }\n        }\n        this.distributeEmptySpace();\n        this.layoutViews();\n    }\n    saveProportions() {\n        if (this.proportionalLayout && this.contentSize > 0) {\n            this.proportions = this.viewItems.map(i => i.size / this.contentSize);\n        }\n    }\n    onSashStart({ sash, start, alt }) {\n        for (const item of this.viewItems) {\n            item.enabled = false;\n        }\n        const index = this.sashItems.findIndex(item => item.sash === sash);\n        // This way, we can press Alt while we resize a sash, macOS style!\n        const disposable = combinedDisposable(addDisposableListener(document.body, 'keydown', e => resetSashDragState(this.sashDragState.current, e.altKey)), addDisposableListener(document.body, 'keyup', () => resetSashDragState(this.sashDragState.current, false)));\n        const resetSashDragState = (start, alt) => {\n            const sizes = this.viewItems.map(i => i.size);\n            let minDelta = Number.NEGATIVE_INFINITY;\n            let maxDelta = Number.POSITIVE_INFINITY;\n            if (this.inverseAltBehavior) {\n                alt = !alt;\n            }\n            if (alt) {\n                // When we're using the last sash with Alt, we're resizing\n                // the view to the left/up, instead of right/down as usual\n                // Thus, we must do the inverse of the usual\n                const isLastSash = index === this.sashItems.length - 1;\n                if (isLastSash) {\n                    const viewItem = this.viewItems[index];\n                    minDelta = (viewItem.minimumSize - viewItem.size) / 2;\n                    maxDelta = (viewItem.maximumSize - viewItem.size) / 2;\n                }\n                else {\n                    const viewItem = this.viewItems[index + 1];\n                    minDelta = (viewItem.size - viewItem.maximumSize) / 2;\n                    maxDelta = (viewItem.size - viewItem.minimumSize) / 2;\n                }\n            }\n            let snapBefore;\n            let snapAfter;\n            if (!alt) {\n                const upIndexes = range(index, -1);\n                const downIndexes = range(index + 1, this.viewItems.length);\n                const minDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].minimumSize - sizes[i]), 0);\n                const maxDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].viewMaximumSize - sizes[i]), 0);\n                const maxDeltaDown = downIndexes.length === 0 ? Number.POSITIVE_INFINITY : downIndexes.reduce((r, i) => r + (sizes[i] - this.viewItems[i].minimumSize), 0);\n                const minDeltaDown = downIndexes.length === 0 ? Number.NEGATIVE_INFINITY : downIndexes.reduce((r, i) => r + (sizes[i] - this.viewItems[i].viewMaximumSize), 0);\n                const minDelta = Math.max(minDeltaUp, minDeltaDown);\n                const maxDelta = Math.min(maxDeltaDown, maxDeltaUp);\n                const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n                const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n                if (typeof snapBeforeIndex === 'number') {\n                    const viewItem = this.viewItems[snapBeforeIndex];\n                    const halfSize = Math.floor(viewItem.viewMinimumSize / 2);\n                    snapBefore = {\n                        index: snapBeforeIndex,\n                        limitDelta: viewItem.visible ? minDelta - halfSize : minDelta + halfSize,\n                        size: viewItem.size\n                    };\n                }\n                if (typeof snapAfterIndex === 'number') {\n                    const viewItem = this.viewItems[snapAfterIndex];\n                    const halfSize = Math.floor(viewItem.viewMinimumSize / 2);\n                    snapAfter = {\n                        index: snapAfterIndex,\n                        limitDelta: viewItem.visible ? maxDelta + halfSize : maxDelta - halfSize,\n                        size: viewItem.size\n                    };\n                }\n            }\n            this.sashDragState = { start, current: start, index, sizes, minDelta, maxDelta, alt, snapBefore, snapAfter, disposable };\n        };\n        resetSashDragState(start, alt);\n    }\n    onSashChange({ current }) {\n        const { index, start, sizes, alt, minDelta, maxDelta, snapBefore, snapAfter } = this.sashDragState;\n        this.sashDragState.current = current;\n        const delta = current - start;\n        const newDelta = this.resize(index, delta, sizes, undefined, undefined, minDelta, maxDelta, snapBefore, snapAfter);\n        if (alt) {\n            const isLastSash = index === this.sashItems.length - 1;\n            const newSizes = this.viewItems.map(i => i.size);\n            const viewItemIndex = isLastSash ? index : index + 1;\n            const viewItem = this.viewItems[viewItemIndex];\n            const newMinDelta = viewItem.size - viewItem.maximumSize;\n            const newMaxDelta = viewItem.size - viewItem.minimumSize;\n            const resizeIndex = isLastSash ? index - 1 : index + 1;\n            this.resize(resizeIndex, -newDelta, newSizes, undefined, undefined, newMinDelta, newMaxDelta);\n        }\n        this.distributeEmptySpace();\n        this.layoutViews();\n    }\n    onSashEnd(index) {\n        this._onDidSashChange.fire(index);\n        this.sashDragState.disposable.dispose();\n        this.saveProportions();\n        for (const item of this.viewItems) {\n            item.enabled = true;\n        }\n    }\n    onViewChange(item, size) {\n        const index = this.viewItems.indexOf(item);\n        if (index < 0 || index >= this.viewItems.length) {\n            return;\n        }\n        size = typeof size === 'number' ? size : item.size;\n        size = clamp(size, item.minimumSize, item.maximumSize);\n        if (this.inverseAltBehavior && index > 0) {\n            // In this case, we want the view to grow or shrink both sides equally\n            // so we just resize the \"left\" side by half and let `resize` do the clamping magic\n            this.resize(index - 1, Math.floor((item.size - size) / 2));\n            this.distributeEmptySpace();\n            this.layoutViews();\n        }\n        else {\n            item.size = size;\n            this.relayout([index], undefined);\n        }\n    }\n    /**\n     * Resize a {@link IView view} within the {@link SplitView}.\n     *\n     * @param index The {@link IView view} index.\n     * @param size The {@link IView view} size.\n     */\n    resizeView(index, size) {\n        if (this.state !== State.Idle) {\n            throw new Error('Cant modify splitview');\n        }\n        this.state = State.Busy;\n        if (index < 0 || index >= this.viewItems.length) {\n            return;\n        }\n        const indexes = range(this.viewItems.length).filter(i => i !== index);\n        const lowPriorityIndexes = [...indexes.filter(i => this.viewItems[i].priority === 1 /* Low */), index];\n        const highPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 2 /* High */);\n        const item = this.viewItems[index];\n        size = Math.round(size);\n        size = clamp(size, item.minimumSize, Math.min(item.maximumSize, this.size));\n        item.size = size;\n        this.relayout(lowPriorityIndexes, highPriorityIndexes);\n        this.state = State.Idle;\n    }\n    /**\n     * Distribute the entire {@link SplitView} size among all {@link IView views}.\n     */\n    distributeViewSizes() {\n        const flexibleViewItems = [];\n        let flexibleSize = 0;\n        for (const item of this.viewItems) {\n            if (item.maximumSize - item.minimumSize > 0) {\n                flexibleViewItems.push(item);\n                flexibleSize += item.size;\n            }\n        }\n        const size = Math.floor(flexibleSize / flexibleViewItems.length);\n        for (const item of flexibleViewItems) {\n            item.size = clamp(size, item.minimumSize, item.maximumSize);\n        }\n        const indexes = range(this.viewItems.length);\n        const lowPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 1 /* Low */);\n        const highPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 2 /* High */);\n        this.relayout(lowPriorityIndexes, highPriorityIndexes);\n    }\n    /**\n     * Returns the size of a {@link IView view}.\n     */\n    getViewSize(index) {\n        if (index < 0 || index >= this.viewItems.length) {\n            return -1;\n        }\n        return this.viewItems[index].size;\n    }\n    doAddView(view, size, index = this.viewItems.length, skipLayout) {\n        if (this.state !== State.Idle) {\n            throw new Error('Cant modify splitview');\n        }\n        this.state = State.Busy;\n        // Add view\n        const container = $('.split-view-view');\n        if (index === this.viewItems.length) {\n            this.viewContainer.appendChild(container);\n        }\n        else {\n            this.viewContainer.insertBefore(container, this.viewContainer.children.item(index));\n        }\n        const onChangeDisposable = view.onDidChange(size => this.onViewChange(item, size));\n        const containerDisposable = toDisposable(() => this.viewContainer.removeChild(container));\n        const disposable = combinedDisposable(onChangeDisposable, containerDisposable);\n        let viewSize;\n        if (typeof size === 'number') {\n            viewSize = size;\n        }\n        else if (size.type === 'split') {\n            viewSize = this.getViewSize(size.index) / 2;\n        }\n        else if (size.type === 'invisible') {\n            viewSize = { cachedVisibleSize: size.cachedVisibleSize };\n        }\n        else {\n            viewSize = view.minimumSize;\n        }\n        const item = this.orientation === 0 /* VERTICAL */\n            ? new VerticalViewItem(container, view, viewSize, disposable)\n            : new HorizontalViewItem(container, view, viewSize, disposable);\n        this.viewItems.splice(index, 0, item);\n        // Add sash\n        if (this.viewItems.length > 1) {\n            let opts = { orthogonalStartSash: this.orthogonalStartSash, orthogonalEndSash: this.orthogonalEndSash };\n            const sash = this.orientation === 0 /* VERTICAL */\n                ? new Sash(this.sashContainer, { getHorizontalSashTop: s => this.getSashPosition(s), getHorizontalSashWidth: this.getSashOrthogonalSize }, Object.assign(Object.assign({}, opts), { orientation: 1 /* HORIZONTAL */ }))\n                : new Sash(this.sashContainer, { getVerticalSashLeft: s => this.getSashPosition(s), getVerticalSashHeight: this.getSashOrthogonalSize }, Object.assign(Object.assign({}, opts), { orientation: 0 /* VERTICAL */ }));\n            const sashEventMapper = this.orientation === 0 /* VERTICAL */\n                ? (e) => ({ sash, start: e.startY, current: e.currentY, alt: e.altKey })\n                : (e) => ({ sash, start: e.startX, current: e.currentX, alt: e.altKey });\n            const onStart = Event.map(sash.onDidStart, sashEventMapper);\n            const onStartDisposable = onStart(this.onSashStart, this);\n            const onChange = Event.map(sash.onDidChange, sashEventMapper);\n            const onChangeDisposable = onChange(this.onSashChange, this);\n            const onEnd = Event.map(sash.onDidEnd, () => this.sashItems.findIndex(item => item.sash === sash));\n            const onEndDisposable = onEnd(this.onSashEnd, this);\n            const onDidResetDisposable = sash.onDidReset(() => {\n                const index = this.sashItems.findIndex(item => item.sash === sash);\n                const upIndexes = range(index, -1);\n                const downIndexes = range(index + 1, this.viewItems.length);\n                const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n                const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n                if (typeof snapBeforeIndex === 'number' && !this.viewItems[snapBeforeIndex].visible) {\n                    return;\n                }\n                if (typeof snapAfterIndex === 'number' && !this.viewItems[snapAfterIndex].visible) {\n                    return;\n                }\n                this._onDidSashReset.fire(index);\n            });\n            const disposable = combinedDisposable(onStartDisposable, onChangeDisposable, onEndDisposable, onDidResetDisposable, sash);\n            const sashItem = { sash, disposable };\n            this.sashItems.splice(index - 1, 0, sashItem);\n        }\n        container.appendChild(view.element);\n        let highPriorityIndexes;\n        if (typeof size !== 'number' && size.type === 'split') {\n            highPriorityIndexes = [size.index];\n        }\n        if (!skipLayout) {\n            this.relayout([index], highPriorityIndexes);\n        }\n        this.state = State.Idle;\n        if (!skipLayout && typeof size !== 'number' && size.type === 'distribute') {\n            this.distributeViewSizes();\n        }\n    }\n    relayout(lowPriorityIndexes, highPriorityIndexes) {\n        const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n        this.resize(this.viewItems.length - 1, this.size - contentSize, undefined, lowPriorityIndexes, highPriorityIndexes);\n        this.distributeEmptySpace();\n        this.layoutViews();\n        this.saveProportions();\n    }\n    resize(index, delta, sizes = this.viewItems.map(i => i.size), lowPriorityIndexes, highPriorityIndexes, overloadMinDelta = Number.NEGATIVE_INFINITY, overloadMaxDelta = Number.POSITIVE_INFINITY, snapBefore, snapAfter) {\n        if (index < 0 || index >= this.viewItems.length) {\n            return 0;\n        }\n        const upIndexes = range(index, -1);\n        const downIndexes = range(index + 1, this.viewItems.length);\n        if (highPriorityIndexes) {\n            for (const index of highPriorityIndexes) {\n                pushToStart(upIndexes, index);\n                pushToStart(downIndexes, index);\n            }\n        }\n        if (lowPriorityIndexes) {\n            for (const index of lowPriorityIndexes) {\n                pushToEnd(upIndexes, index);\n                pushToEnd(downIndexes, index);\n            }\n        }\n        const upItems = upIndexes.map(i => this.viewItems[i]);\n        const upSizes = upIndexes.map(i => sizes[i]);\n        const downItems = downIndexes.map(i => this.viewItems[i]);\n        const downSizes = downIndexes.map(i => sizes[i]);\n        const minDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].minimumSize - sizes[i]), 0);\n        const maxDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].maximumSize - sizes[i]), 0);\n        const maxDeltaDown = downIndexes.length === 0 ? Number.POSITIVE_INFINITY : downIndexes.reduce((r, i) => r + (sizes[i] - this.viewItems[i].minimumSize), 0);\n        const minDeltaDown = downIndexes.length === 0 ? Number.NEGATIVE_INFINITY : downIndexes.reduce((r, i) => r + (sizes[i] - this.viewItems[i].maximumSize), 0);\n        const minDelta = Math.max(minDeltaUp, minDeltaDown, overloadMinDelta);\n        const maxDelta = Math.min(maxDeltaDown, maxDeltaUp, overloadMaxDelta);\n        let snapped = false;\n        if (snapBefore) {\n            const snapView = this.viewItems[snapBefore.index];\n            const visible = delta >= snapBefore.limitDelta;\n            snapped = visible !== snapView.visible;\n            snapView.setVisible(visible, snapBefore.size);\n        }\n        if (!snapped && snapAfter) {\n            const snapView = this.viewItems[snapAfter.index];\n            const visible = delta < snapAfter.limitDelta;\n            snapped = visible !== snapView.visible;\n            snapView.setVisible(visible, snapAfter.size);\n        }\n        if (snapped) {\n            return this.resize(index, delta, sizes, lowPriorityIndexes, highPriorityIndexes, overloadMinDelta, overloadMaxDelta);\n        }\n        delta = clamp(delta, minDelta, maxDelta);\n        for (let i = 0, deltaUp = delta; i < upItems.length; i++) {\n            const item = upItems[i];\n            const size = clamp(upSizes[i] + deltaUp, item.minimumSize, item.maximumSize);\n            const viewDelta = size - upSizes[i];\n            deltaUp -= viewDelta;\n            item.size = size;\n        }\n        for (let i = 0, deltaDown = delta; i < downItems.length; i++) {\n            const item = downItems[i];\n            const size = clamp(downSizes[i] - deltaDown, item.minimumSize, item.maximumSize);\n            const viewDelta = size - downSizes[i];\n            deltaDown += viewDelta;\n            item.size = size;\n        }\n        return delta;\n    }\n    distributeEmptySpace(lowPriorityIndex) {\n        const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n        let emptyDelta = this.size - contentSize;\n        const indexes = range(this.viewItems.length - 1, -1);\n        const lowPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 1 /* Low */);\n        const highPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 2 /* High */);\n        for (const index of highPriorityIndexes) {\n            pushToStart(indexes, index);\n        }\n        for (const index of lowPriorityIndexes) {\n            pushToEnd(indexes, index);\n        }\n        if (typeof lowPriorityIndex === 'number') {\n            pushToEnd(indexes, lowPriorityIndex);\n        }\n        for (let i = 0; emptyDelta !== 0 && i < indexes.length; i++) {\n            const item = this.viewItems[indexes[i]];\n            const size = clamp(item.size + emptyDelta, item.minimumSize, item.maximumSize);\n            const viewDelta = size - item.size;\n            emptyDelta -= viewDelta;\n            item.size = size;\n        }\n    }\n    layoutViews() {\n        // Save new content size\n        this.contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n        // Layout views\n        let offset = 0;\n        for (const viewItem of this.viewItems) {\n            viewItem.layout(offset, this.layoutContext);\n            offset += viewItem.size;\n        }\n        // Layout sashes\n        this.sashItems.forEach(item => item.sash.layout());\n        this.updateSashEnablement();\n        this.updateScrollableElement();\n    }\n    updateScrollableElement() {\n        if (this.orientation === 0 /* VERTICAL */) {\n            this.scrollableElement.setScrollDimensions({\n                height: this.size,\n                scrollHeight: this.contentSize\n            });\n        }\n        else {\n            this.scrollableElement.setScrollDimensions({\n                width: this.size,\n                scrollWidth: this.contentSize\n            });\n        }\n    }\n    updateSashEnablement() {\n        let previous = false;\n        const collapsesDown = this.viewItems.map(i => previous = (i.size - i.minimumSize > 0) || previous);\n        previous = false;\n        const expandsDown = this.viewItems.map(i => previous = (i.maximumSize - i.size > 0) || previous);\n        const reverseViews = [...this.viewItems].reverse();\n        previous = false;\n        const collapsesUp = reverseViews.map(i => previous = (i.size - i.minimumSize > 0) || previous).reverse();\n        previous = false;\n        const expandsUp = reverseViews.map(i => previous = (i.maximumSize - i.size > 0) || previous).reverse();\n        let position = 0;\n        for (let index = 0; index < this.sashItems.length; index++) {\n            const { sash } = this.sashItems[index];\n            const viewItem = this.viewItems[index];\n            position += viewItem.size;\n            const min = !(collapsesDown[index] && expandsUp[index + 1]);\n            const max = !(expandsDown[index] && collapsesUp[index + 1]);\n            if (min && max) {\n                const upIndexes = range(index, -1);\n                const downIndexes = range(index + 1, this.viewItems.length);\n                const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n                const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n                const snappedBefore = typeof snapBeforeIndex === 'number' && !this.viewItems[snapBeforeIndex].visible;\n                const snappedAfter = typeof snapAfterIndex === 'number' && !this.viewItems[snapAfterIndex].visible;\n                if (snappedBefore && collapsesUp[index] && (position > 0 || this.startSnappingEnabled)) {\n                    sash.state = 1 /* AtMinimum */;\n                }\n                else if (snappedAfter && collapsesDown[index] && (position < this.contentSize || this.endSnappingEnabled)) {\n                    sash.state = 2 /* AtMaximum */;\n                }\n                else {\n                    sash.state = 0 /* Disabled */;\n                }\n            }\n            else if (min && !max) {\n                sash.state = 1 /* AtMinimum */;\n            }\n            else if (!min && max) {\n                sash.state = 2 /* AtMaximum */;\n            }\n            else {\n                sash.state = 3 /* Enabled */;\n            }\n        }\n    }\n    getSashPosition(sash) {\n        let position = 0;\n        for (let i = 0; i < this.sashItems.length; i++) {\n            position += this.viewItems[i].size;\n            if (this.sashItems[i].sash === sash) {\n                return position;\n            }\n        }\n        return 0;\n    }\n    findFirstSnapIndex(indexes) {\n        // visible views first\n        for (const index of indexes) {\n            const viewItem = this.viewItems[index];\n            if (!viewItem.visible) {\n                continue;\n            }\n            if (viewItem.snap) {\n                return index;\n            }\n        }\n        // then, hidden views\n        for (const index of indexes) {\n            const viewItem = this.viewItems[index];\n            if (viewItem.visible && viewItem.maximumSize - viewItem.minimumSize > 0) {\n                return undefined;\n            }\n            if (!viewItem.visible && viewItem.snap) {\n                return index;\n            }\n        }\n        return undefined;\n    }\n    dispose() {\n        super.dispose();\n        this.viewItems.forEach(i => i.dispose());\n        this.viewItems = [];\n        this.sashItems.forEach(i => i.disposable.dispose());\n        this.sashItems = [];\n    }\n}\n"]},"metadata":{},"sourceType":"module"}