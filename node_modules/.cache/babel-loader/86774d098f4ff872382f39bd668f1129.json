{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { buildReplaceStringWithCasePreserved } from '../../../../base/common/search.js';\n/**\n * Assigned when the replace pattern is entirely static.\n */\n\nclass StaticValueReplacePattern {\n  constructor(staticValue) {\n    this.staticValue = staticValue;\n    this.kind = 0\n    /* StaticValue */\n    ;\n  }\n\n}\n/**\n * Assigned when the replace pattern has replacement patterns.\n */\n\n\nclass DynamicPiecesReplacePattern {\n  constructor(pieces) {\n    this.pieces = pieces;\n    this.kind = 1\n    /* DynamicPieces */\n    ;\n  }\n\n}\n\nexport class ReplacePattern {\n  constructor(pieces) {\n    if (!pieces || pieces.length === 0) {\n      this._state = new StaticValueReplacePattern('');\n    } else if (pieces.length === 1 && pieces[0].staticValue !== null) {\n      this._state = new StaticValueReplacePattern(pieces[0].staticValue);\n    } else {\n      this._state = new DynamicPiecesReplacePattern(pieces);\n    }\n  }\n\n  static fromStaticValue(value) {\n    return new ReplacePattern([ReplacePiece.staticValue(value)]);\n  }\n\n  get hasReplacementPatterns() {\n    return this._state.kind === 1\n    /* DynamicPieces */\n    ;\n  }\n\n  buildReplaceString(matches, preserveCase) {\n    if (this._state.kind === 0\n    /* StaticValue */\n    ) {\n      if (preserveCase) {\n        return buildReplaceStringWithCasePreserved(matches, this._state.staticValue);\n      } else {\n        return this._state.staticValue;\n      }\n    }\n\n    let result = '';\n\n    for (let i = 0, len = this._state.pieces.length; i < len; i++) {\n      let piece = this._state.pieces[i];\n\n      if (piece.staticValue !== null) {\n        // static value ReplacePiece\n        result += piece.staticValue;\n        continue;\n      } // match index ReplacePiece\n\n\n      let match = ReplacePattern._substitute(piece.matchIndex, matches);\n\n      if (piece.caseOps !== null && piece.caseOps.length > 0) {\n        let repl = [];\n        let lenOps = piece.caseOps.length;\n        let opIdx = 0;\n\n        for (let idx = 0, len = match.length; idx < len; idx++) {\n          if (opIdx >= lenOps) {\n            repl.push(match.slice(idx));\n            break;\n          }\n\n          switch (piece.caseOps[opIdx]) {\n            case 'U':\n              repl.push(match[idx].toUpperCase());\n              break;\n\n            case 'u':\n              repl.push(match[idx].toUpperCase());\n              opIdx++;\n              break;\n\n            case 'L':\n              repl.push(match[idx].toLowerCase());\n              break;\n\n            case 'l':\n              repl.push(match[idx].toLowerCase());\n              opIdx++;\n              break;\n\n            default:\n              repl.push(match[idx]);\n          }\n        }\n\n        match = repl.join('');\n      }\n\n      result += match;\n    }\n\n    return result;\n  }\n\n  static _substitute(matchIndex, matches) {\n    if (matches === null) {\n      return '';\n    }\n\n    if (matchIndex === 0) {\n      return matches[0];\n    }\n\n    let remainder = '';\n\n    while (matchIndex > 0) {\n      if (matchIndex < matches.length) {\n        // A match can be undefined\n        let match = matches[matchIndex] || '';\n        return match + remainder;\n      }\n\n      remainder = String(matchIndex % 10) + remainder;\n      matchIndex = Math.floor(matchIndex / 10);\n    }\n\n    return '$' + remainder;\n  }\n\n}\n/**\n * A replace piece can either be a static string or an index to a specific match.\n */\n\nexport class ReplacePiece {\n  constructor(staticValue, matchIndex, caseOps) {\n    this.staticValue = staticValue;\n    this.matchIndex = matchIndex;\n\n    if (!caseOps || caseOps.length === 0) {\n      this.caseOps = null;\n    } else {\n      this.caseOps = caseOps.slice(0);\n    }\n  }\n\n  static staticValue(value) {\n    return new ReplacePiece(value, -1, null);\n  }\n\n  static caseOps(index, caseOps) {\n    return new ReplacePiece(null, index, caseOps);\n  }\n\n}\n\nclass ReplacePieceBuilder {\n  constructor(source) {\n    this._source = source;\n    this._lastCharIndex = 0;\n    this._result = [];\n    this._resultLen = 0;\n    this._currentStaticPiece = '';\n  }\n\n  emitUnchanged(toCharIndex) {\n    this._emitStatic(this._source.substring(this._lastCharIndex, toCharIndex));\n\n    this._lastCharIndex = toCharIndex;\n  }\n\n  emitStatic(value, toCharIndex) {\n    this._emitStatic(value);\n\n    this._lastCharIndex = toCharIndex;\n  }\n\n  _emitStatic(value) {\n    if (value.length === 0) {\n      return;\n    }\n\n    this._currentStaticPiece += value;\n  }\n\n  emitMatchIndex(index, toCharIndex, caseOps) {\n    if (this._currentStaticPiece.length !== 0) {\n      this._result[this._resultLen++] = ReplacePiece.staticValue(this._currentStaticPiece);\n      this._currentStaticPiece = '';\n    }\n\n    this._result[this._resultLen++] = ReplacePiece.caseOps(index, caseOps);\n    this._lastCharIndex = toCharIndex;\n  }\n\n  finalize() {\n    this.emitUnchanged(this._source.length);\n\n    if (this._currentStaticPiece.length !== 0) {\n      this._result[this._resultLen++] = ReplacePiece.staticValue(this._currentStaticPiece);\n      this._currentStaticPiece = '';\n    }\n\n    return new ReplacePattern(this._result);\n  }\n\n}\n/**\n * \\n\t\t\t=> inserts a LF\n * \\t\t\t\t=> inserts a TAB\n * \\\\\t\t\t=> inserts a \"\\\".\n * \\u\t\t\t=> upper-cases one character in a match.\n * \\U\t\t\t=> upper-cases ALL remaining characters in a match.\n * \\l\t\t\t=> lower-cases one character in a match.\n * \\L\t\t\t=> lower-cases ALL remaining characters in a match.\n * $$\t\t\t=> inserts a \"$\".\n * $& and $0\t=> inserts the matched substring.\n * $n\t\t\t=> Where n is a non-negative integer lesser than 100, inserts the nth parenthesized submatch string\n * everything else stays untouched\n *\n * Also see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#Specifying_a_string_as_a_parameter\n */\n\n\nexport function parseReplaceString(replaceString) {\n  if (!replaceString || replaceString.length === 0) {\n    return new ReplacePattern(null);\n  }\n\n  let caseOps = [];\n  let result = new ReplacePieceBuilder(replaceString);\n\n  for (let i = 0, len = replaceString.length; i < len; i++) {\n    let chCode = replaceString.charCodeAt(i);\n\n    if (chCode === 92\n    /* Backslash */\n    ) {\n      // move to next char\n      i++;\n\n      if (i >= len) {\n        // string ends with a \\\n        break;\n      }\n\n      let nextChCode = replaceString.charCodeAt(i); // let replaceWithCharacter: string | null = null;\n\n      switch (nextChCode) {\n        case 92\n        /* Backslash */\n        :\n          // \\\\ => inserts a \"\\\"\n          result.emitUnchanged(i - 1);\n          result.emitStatic('\\\\', i + 1);\n          break;\n\n        case 110\n        /* n */\n        :\n          // \\n => inserts a LF\n          result.emitUnchanged(i - 1);\n          result.emitStatic('\\n', i + 1);\n          break;\n\n        case 116\n        /* t */\n        :\n          // \\t => inserts a TAB\n          result.emitUnchanged(i - 1);\n          result.emitStatic('\\t', i + 1);\n          break;\n        // Case modification of string replacements, patterned after Boost, but only applied\n        // to the replacement text, not subsequent content.\n\n        case 117\n        /* u */\n        : // \\u => upper-cases one character.\n\n        case 85\n        /* U */\n        : // \\U => upper-cases ALL following characters.\n\n        case 108\n        /* l */\n        : // \\l => lower-cases one character.\n\n        case 76\n        /* L */\n        :\n          // \\L => lower-cases ALL following characters.\n          result.emitUnchanged(i - 1);\n          result.emitStatic('', i + 1);\n          caseOps.push(String.fromCharCode(nextChCode));\n          break;\n      }\n\n      continue;\n    }\n\n    if (chCode === 36\n    /* DollarSign */\n    ) {\n      // move to next char\n      i++;\n\n      if (i >= len) {\n        // string ends with a $\n        break;\n      }\n\n      let nextChCode = replaceString.charCodeAt(i);\n\n      if (nextChCode === 36\n      /* DollarSign */\n      ) {\n        // $$ => inserts a \"$\"\n        result.emitUnchanged(i - 1);\n        result.emitStatic('$', i + 1);\n        continue;\n      }\n\n      if (nextChCode === 48\n      /* Digit0 */\n      || nextChCode === 38\n      /* Ampersand */\n      ) {\n        // $& and $0 => inserts the matched substring.\n        result.emitUnchanged(i - 1);\n        result.emitMatchIndex(0, i + 1, caseOps);\n        caseOps.length = 0;\n        continue;\n      }\n\n      if (49\n      /* Digit1 */\n      <= nextChCode && nextChCode <= 57\n      /* Digit9 */\n      ) {\n        // $n\n        let matchIndex = nextChCode - 48\n        /* Digit0 */\n        ; // peek next char to probe for $nn\n\n        if (i + 1 < len) {\n          let nextNextChCode = replaceString.charCodeAt(i + 1);\n\n          if (48\n          /* Digit0 */\n          <= nextNextChCode && nextNextChCode <= 57\n          /* Digit9 */\n          ) {\n            // $nn\n            // move to next char\n            i++;\n            matchIndex = matchIndex * 10 + (nextNextChCode - 48\n            /* Digit0 */\n            );\n            result.emitUnchanged(i - 2);\n            result.emitMatchIndex(matchIndex, i + 1, caseOps);\n            caseOps.length = 0;\n            continue;\n          }\n        }\n\n        result.emitUnchanged(i - 1);\n        result.emitMatchIndex(matchIndex, i + 1, caseOps);\n        caseOps.length = 0;\n        continue;\n      }\n    }\n  }\n\n  return result.finalize();\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/contrib/find/browser/replacePattern.js"],"names":["buildReplaceStringWithCasePreserved","StaticValueReplacePattern","constructor","staticValue","kind","DynamicPiecesReplacePattern","pieces","ReplacePattern","length","_state","fromStaticValue","value","ReplacePiece","hasReplacementPatterns","buildReplaceString","matches","preserveCase","result","i","len","piece","match","_substitute","matchIndex","caseOps","repl","lenOps","opIdx","idx","push","slice","toUpperCase","toLowerCase","join","remainder","String","Math","floor","index","ReplacePieceBuilder","source","_source","_lastCharIndex","_result","_resultLen","_currentStaticPiece","emitUnchanged","toCharIndex","_emitStatic","substring","emitStatic","emitMatchIndex","finalize","parseReplaceString","replaceString","chCode","charCodeAt","nextChCode","fromCharCode","nextNextChCode"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { buildReplaceStringWithCasePreserved } from '../../../../base/common/search.js';\n/**\n * Assigned when the replace pattern is entirely static.\n */\nclass StaticValueReplacePattern {\n    constructor(staticValue) {\n        this.staticValue = staticValue;\n        this.kind = 0 /* StaticValue */;\n    }\n}\n/**\n * Assigned when the replace pattern has replacement patterns.\n */\nclass DynamicPiecesReplacePattern {\n    constructor(pieces) {\n        this.pieces = pieces;\n        this.kind = 1 /* DynamicPieces */;\n    }\n}\nexport class ReplacePattern {\n    constructor(pieces) {\n        if (!pieces || pieces.length === 0) {\n            this._state = new StaticValueReplacePattern('');\n        }\n        else if (pieces.length === 1 && pieces[0].staticValue !== null) {\n            this._state = new StaticValueReplacePattern(pieces[0].staticValue);\n        }\n        else {\n            this._state = new DynamicPiecesReplacePattern(pieces);\n        }\n    }\n    static fromStaticValue(value) {\n        return new ReplacePattern([ReplacePiece.staticValue(value)]);\n    }\n    get hasReplacementPatterns() {\n        return (this._state.kind === 1 /* DynamicPieces */);\n    }\n    buildReplaceString(matches, preserveCase) {\n        if (this._state.kind === 0 /* StaticValue */) {\n            if (preserveCase) {\n                return buildReplaceStringWithCasePreserved(matches, this._state.staticValue);\n            }\n            else {\n                return this._state.staticValue;\n            }\n        }\n        let result = '';\n        for (let i = 0, len = this._state.pieces.length; i < len; i++) {\n            let piece = this._state.pieces[i];\n            if (piece.staticValue !== null) {\n                // static value ReplacePiece\n                result += piece.staticValue;\n                continue;\n            }\n            // match index ReplacePiece\n            let match = ReplacePattern._substitute(piece.matchIndex, matches);\n            if (piece.caseOps !== null && piece.caseOps.length > 0) {\n                let repl = [];\n                let lenOps = piece.caseOps.length;\n                let opIdx = 0;\n                for (let idx = 0, len = match.length; idx < len; idx++) {\n                    if (opIdx >= lenOps) {\n                        repl.push(match.slice(idx));\n                        break;\n                    }\n                    switch (piece.caseOps[opIdx]) {\n                        case 'U':\n                            repl.push(match[idx].toUpperCase());\n                            break;\n                        case 'u':\n                            repl.push(match[idx].toUpperCase());\n                            opIdx++;\n                            break;\n                        case 'L':\n                            repl.push(match[idx].toLowerCase());\n                            break;\n                        case 'l':\n                            repl.push(match[idx].toLowerCase());\n                            opIdx++;\n                            break;\n                        default:\n                            repl.push(match[idx]);\n                    }\n                }\n                match = repl.join('');\n            }\n            result += match;\n        }\n        return result;\n    }\n    static _substitute(matchIndex, matches) {\n        if (matches === null) {\n            return '';\n        }\n        if (matchIndex === 0) {\n            return matches[0];\n        }\n        let remainder = '';\n        while (matchIndex > 0) {\n            if (matchIndex < matches.length) {\n                // A match can be undefined\n                let match = (matches[matchIndex] || '');\n                return match + remainder;\n            }\n            remainder = String(matchIndex % 10) + remainder;\n            matchIndex = Math.floor(matchIndex / 10);\n        }\n        return '$' + remainder;\n    }\n}\n/**\n * A replace piece can either be a static string or an index to a specific match.\n */\nexport class ReplacePiece {\n    constructor(staticValue, matchIndex, caseOps) {\n        this.staticValue = staticValue;\n        this.matchIndex = matchIndex;\n        if (!caseOps || caseOps.length === 0) {\n            this.caseOps = null;\n        }\n        else {\n            this.caseOps = caseOps.slice(0);\n        }\n    }\n    static staticValue(value) {\n        return new ReplacePiece(value, -1, null);\n    }\n    static caseOps(index, caseOps) {\n        return new ReplacePiece(null, index, caseOps);\n    }\n}\nclass ReplacePieceBuilder {\n    constructor(source) {\n        this._source = source;\n        this._lastCharIndex = 0;\n        this._result = [];\n        this._resultLen = 0;\n        this._currentStaticPiece = '';\n    }\n    emitUnchanged(toCharIndex) {\n        this._emitStatic(this._source.substring(this._lastCharIndex, toCharIndex));\n        this._lastCharIndex = toCharIndex;\n    }\n    emitStatic(value, toCharIndex) {\n        this._emitStatic(value);\n        this._lastCharIndex = toCharIndex;\n    }\n    _emitStatic(value) {\n        if (value.length === 0) {\n            return;\n        }\n        this._currentStaticPiece += value;\n    }\n    emitMatchIndex(index, toCharIndex, caseOps) {\n        if (this._currentStaticPiece.length !== 0) {\n            this._result[this._resultLen++] = ReplacePiece.staticValue(this._currentStaticPiece);\n            this._currentStaticPiece = '';\n        }\n        this._result[this._resultLen++] = ReplacePiece.caseOps(index, caseOps);\n        this._lastCharIndex = toCharIndex;\n    }\n    finalize() {\n        this.emitUnchanged(this._source.length);\n        if (this._currentStaticPiece.length !== 0) {\n            this._result[this._resultLen++] = ReplacePiece.staticValue(this._currentStaticPiece);\n            this._currentStaticPiece = '';\n        }\n        return new ReplacePattern(this._result);\n    }\n}\n/**\n * \\n\t\t\t=> inserts a LF\n * \\t\t\t\t=> inserts a TAB\n * \\\\\t\t\t=> inserts a \"\\\".\n * \\u\t\t\t=> upper-cases one character in a match.\n * \\U\t\t\t=> upper-cases ALL remaining characters in a match.\n * \\l\t\t\t=> lower-cases one character in a match.\n * \\L\t\t\t=> lower-cases ALL remaining characters in a match.\n * $$\t\t\t=> inserts a \"$\".\n * $& and $0\t=> inserts the matched substring.\n * $n\t\t\t=> Where n is a non-negative integer lesser than 100, inserts the nth parenthesized submatch string\n * everything else stays untouched\n *\n * Also see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#Specifying_a_string_as_a_parameter\n */\nexport function parseReplaceString(replaceString) {\n    if (!replaceString || replaceString.length === 0) {\n        return new ReplacePattern(null);\n    }\n    let caseOps = [];\n    let result = new ReplacePieceBuilder(replaceString);\n    for (let i = 0, len = replaceString.length; i < len; i++) {\n        let chCode = replaceString.charCodeAt(i);\n        if (chCode === 92 /* Backslash */) {\n            // move to next char\n            i++;\n            if (i >= len) {\n                // string ends with a \\\n                break;\n            }\n            let nextChCode = replaceString.charCodeAt(i);\n            // let replaceWithCharacter: string | null = null;\n            switch (nextChCode) {\n                case 92 /* Backslash */:\n                    // \\\\ => inserts a \"\\\"\n                    result.emitUnchanged(i - 1);\n                    result.emitStatic('\\\\', i + 1);\n                    break;\n                case 110 /* n */:\n                    // \\n => inserts a LF\n                    result.emitUnchanged(i - 1);\n                    result.emitStatic('\\n', i + 1);\n                    break;\n                case 116 /* t */:\n                    // \\t => inserts a TAB\n                    result.emitUnchanged(i - 1);\n                    result.emitStatic('\\t', i + 1);\n                    break;\n                // Case modification of string replacements, patterned after Boost, but only applied\n                // to the replacement text, not subsequent content.\n                case 117 /* u */:\n                // \\u => upper-cases one character.\n                case 85 /* U */:\n                // \\U => upper-cases ALL following characters.\n                case 108 /* l */:\n                // \\l => lower-cases one character.\n                case 76 /* L */:\n                    // \\L => lower-cases ALL following characters.\n                    result.emitUnchanged(i - 1);\n                    result.emitStatic('', i + 1);\n                    caseOps.push(String.fromCharCode(nextChCode));\n                    break;\n            }\n            continue;\n        }\n        if (chCode === 36 /* DollarSign */) {\n            // move to next char\n            i++;\n            if (i >= len) {\n                // string ends with a $\n                break;\n            }\n            let nextChCode = replaceString.charCodeAt(i);\n            if (nextChCode === 36 /* DollarSign */) {\n                // $$ => inserts a \"$\"\n                result.emitUnchanged(i - 1);\n                result.emitStatic('$', i + 1);\n                continue;\n            }\n            if (nextChCode === 48 /* Digit0 */ || nextChCode === 38 /* Ampersand */) {\n                // $& and $0 => inserts the matched substring.\n                result.emitUnchanged(i - 1);\n                result.emitMatchIndex(0, i + 1, caseOps);\n                caseOps.length = 0;\n                continue;\n            }\n            if (49 /* Digit1 */ <= nextChCode && nextChCode <= 57 /* Digit9 */) {\n                // $n\n                let matchIndex = nextChCode - 48 /* Digit0 */;\n                // peek next char to probe for $nn\n                if (i + 1 < len) {\n                    let nextNextChCode = replaceString.charCodeAt(i + 1);\n                    if (48 /* Digit0 */ <= nextNextChCode && nextNextChCode <= 57 /* Digit9 */) {\n                        // $nn\n                        // move to next char\n                        i++;\n                        matchIndex = matchIndex * 10 + (nextNextChCode - 48 /* Digit0 */);\n                        result.emitUnchanged(i - 2);\n                        result.emitMatchIndex(matchIndex, i + 1, caseOps);\n                        caseOps.length = 0;\n                        continue;\n                    }\n                }\n                result.emitUnchanged(i - 1);\n                result.emitMatchIndex(matchIndex, i + 1, caseOps);\n                caseOps.length = 0;\n                continue;\n            }\n        }\n    }\n    return result.finalize();\n}\n"]},"metadata":{},"sourceType":"module"}