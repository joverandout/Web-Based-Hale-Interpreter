{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './standalone-tokens.css';\nimport { splitLines } from '../../../base/common/strings.js';\nimport { FontMeasurements } from '../../browser/config/fontMeasurements.js';\nimport { ICodeEditorService } from '../../browser/services/codeEditorService.js';\nimport { DiffNavigator } from '../../browser/widget/diffNavigator.js';\nimport { ApplyUpdateResult, ConfigurationChangedEvent, EditorOptions } from '../../common/config/editorOptions.js';\nimport { BareFontInfo, FontInfo } from '../../common/config/fontInfo.js';\nimport { EditorType } from '../../common/editorCommon.js';\nimport { FindMatch, TextModelResolvedOptions } from '../../common/model.js';\nimport * as languages from '../../common/languages.js';\nimport { ILanguageConfigurationService } from '../../common/languages/languageConfigurationRegistry.js';\nimport { NullState, nullTokenize } from '../../common/languages/nullMode.js';\nimport { ILanguageService } from '../../common/services/language.js';\nimport { IModelService } from '../../common/services/model.js';\nimport { createWebWorker as actualCreateWebWorker } from '../../browser/services/webWorker.js';\nimport * as standaloneEnums from '../../common/standalone/standaloneEnums.js';\nimport { Colorizer } from './colorizer.js';\nimport { createTextModel, StandaloneDiffEditor, StandaloneEditor } from './standaloneCodeEditor.js';\nimport { StandaloneServices } from './standaloneServices.js';\nimport { IStandaloneThemeService } from '../common/standaloneTheme.js';\nimport { CommandsRegistry } from '../../../platform/commands/common/commands.js';\nimport { IMarkerService } from '../../../platform/markers/common/markers.js';\n/**\n * Create a new editor under `domElement`.\n * `domElement` should be empty (not contain other dom nodes).\n * The editor will read the size of `domElement`.\n */\n\nexport function create(domElement, options, override) {\n  const instantiationService = StandaloneServices.initialize(override || {});\n  return instantiationService.createInstance(StandaloneEditor, domElement, options);\n}\n/**\n * Emitted when an editor is created.\n * Creating a diff editor might cause this listener to be invoked with the two editors.\n * @event\n */\n\nexport function onDidCreateEditor(listener) {\n  const codeEditorService = StandaloneServices.get(ICodeEditorService);\n  return codeEditorService.onCodeEditorAdd(editor => {\n    listener(editor);\n  });\n}\n/**\n * Create a new diff editor under `domElement`.\n * `domElement` should be empty (not contain other dom nodes).\n * The editor will read the size of `domElement`.\n */\n\nexport function createDiffEditor(domElement, options, override) {\n  const instantiationService = StandaloneServices.initialize(override || {});\n  return instantiationService.createInstance(StandaloneDiffEditor, domElement, options);\n}\nexport function createDiffNavigator(diffEditor, opts) {\n  return new DiffNavigator(diffEditor, opts);\n}\n/**\n * Create a new editor model.\n * You can specify the language that should be set for this model or let the language be inferred from the `uri`.\n */\n\nexport function createModel(value, language, uri) {\n  const languageService = StandaloneServices.get(ILanguageService);\n  const languageId = languageService.getLanguageIdByMimeType(language) || language;\n  return createTextModel(StandaloneServices.get(IModelService), languageService, value, languageId, uri);\n}\n/**\n * Change the language for a model.\n */\n\nexport function setModelLanguage(model, languageId) {\n  const languageService = StandaloneServices.get(ILanguageService);\n  const modelService = StandaloneServices.get(IModelService);\n  modelService.setMode(model, languageService.createById(languageId));\n}\n/**\n * Set the markers for a model.\n */\n\nexport function setModelMarkers(model, owner, markers) {\n  if (model) {\n    const markerService = StandaloneServices.get(IMarkerService);\n    markerService.changeOne(owner, model.uri, markers);\n  }\n}\n/**\n * Get markers for owner and/or resource\n *\n * @returns list of markers\n */\n\nexport function getModelMarkers(filter) {\n  const markerService = StandaloneServices.get(IMarkerService);\n  return markerService.read(filter);\n}\n/**\n * Emitted when markers change for a model.\n * @event\n */\n\nexport function onDidChangeMarkers(listener) {\n  const markerService = StandaloneServices.get(IMarkerService);\n  return markerService.onMarkerChanged(listener);\n}\n/**\n * Get the model that has `uri` if it exists.\n */\n\nexport function getModel(uri) {\n  const modelService = StandaloneServices.get(IModelService);\n  return modelService.getModel(uri);\n}\n/**\n * Get all the created models.\n */\n\nexport function getModels() {\n  const modelService = StandaloneServices.get(IModelService);\n  return modelService.getModels();\n}\n/**\n * Emitted when a model is created.\n * @event\n */\n\nexport function onDidCreateModel(listener) {\n  const modelService = StandaloneServices.get(IModelService);\n  return modelService.onModelAdded(listener);\n}\n/**\n * Emitted right before a model is disposed.\n * @event\n */\n\nexport function onWillDisposeModel(listener) {\n  const modelService = StandaloneServices.get(IModelService);\n  return modelService.onModelRemoved(listener);\n}\n/**\n * Emitted when a different language is set to a model.\n * @event\n */\n\nexport function onDidChangeModelLanguage(listener) {\n  const modelService = StandaloneServices.get(IModelService);\n  return modelService.onModelLanguageChanged(e => {\n    listener({\n      model: e.model,\n      oldLanguage: e.oldLanguageId\n    });\n  });\n}\n/**\n * Create a new web worker that has model syncing capabilities built in.\n * Specify an AMD module to load that will `create` an object that will be proxied.\n */\n\nexport function createWebWorker(opts) {\n  return actualCreateWebWorker(StandaloneServices.get(IModelService), StandaloneServices.get(ILanguageConfigurationService), opts);\n}\n/**\n * Colorize the contents of `domNode` using attribute `data-lang`.\n */\n\nexport function colorizeElement(domNode, options) {\n  const languageService = StandaloneServices.get(ILanguageService);\n  const themeService = StandaloneServices.get(IStandaloneThemeService);\n  themeService.registerEditorContainer(domNode);\n  return Colorizer.colorizeElement(themeService, languageService, domNode, options);\n}\n/**\n * Colorize `text` using language `languageId`.\n */\n\nexport function colorize(text, languageId, options) {\n  const languageService = StandaloneServices.get(ILanguageService);\n  const themeService = StandaloneServices.get(IStandaloneThemeService);\n  themeService.registerEditorContainer(document.body);\n  return Colorizer.colorize(languageService, text, languageId, options);\n}\n/**\n * Colorize a line in a model.\n */\n\nexport function colorizeModelLine(model, lineNumber, tabSize = 4) {\n  const themeService = StandaloneServices.get(IStandaloneThemeService);\n  themeService.registerEditorContainer(document.body);\n  return Colorizer.colorizeModelLine(model, lineNumber, tabSize);\n}\n/**\n * @internal\n */\n\nfunction getSafeTokenizationSupport(language) {\n  const tokenizationSupport = languages.TokenizationRegistry.get(language);\n\n  if (tokenizationSupport) {\n    return tokenizationSupport;\n  }\n\n  return {\n    getInitialState: () => NullState,\n    tokenize: (line, hasEOL, state) => nullTokenize(language, state)\n  };\n}\n/**\n * Tokenize `text` using language `languageId`\n */\n\n\nexport function tokenize(text, languageId) {\n  // Needed in order to get the mode registered for subsequent look-ups\n  languages.TokenizationRegistry.getOrCreate(languageId);\n  const tokenizationSupport = getSafeTokenizationSupport(languageId);\n  const lines = splitLines(text);\n  const result = [];\n  let state = tokenizationSupport.getInitialState();\n\n  for (let i = 0, len = lines.length; i < len; i++) {\n    const line = lines[i];\n    const tokenizationResult = tokenizationSupport.tokenize(line, true, state);\n    result[i] = tokenizationResult.tokens;\n    state = tokenizationResult.endState;\n  }\n\n  return result;\n}\n/**\n * Define a new theme or update an existing theme.\n */\n\nexport function defineTheme(themeName, themeData) {\n  const standaloneThemeService = StandaloneServices.get(IStandaloneThemeService);\n  standaloneThemeService.defineTheme(themeName, themeData);\n}\n/**\n * Switches to a theme.\n */\n\nexport function setTheme(themeName) {\n  const standaloneThemeService = StandaloneServices.get(IStandaloneThemeService);\n  standaloneThemeService.setTheme(themeName);\n}\n/**\n * Clears all cached font measurements and triggers re-measurement.\n */\n\nexport function remeasureFonts() {\n  FontMeasurements.clearAllFontInfos();\n}\n/**\n * Register a command.\n */\n\nexport function registerCommand(id, handler) {\n  return CommandsRegistry.registerCommand({\n    id,\n    handler\n  });\n}\n/**\n * @internal\n */\n\nexport function createMonacoEditorAPI() {\n  return {\n    // methods\n    create: create,\n    onDidCreateEditor: onDidCreateEditor,\n    createDiffEditor: createDiffEditor,\n    createDiffNavigator: createDiffNavigator,\n    createModel: createModel,\n    setModelLanguage: setModelLanguage,\n    setModelMarkers: setModelMarkers,\n    getModelMarkers: getModelMarkers,\n    onDidChangeMarkers: onDidChangeMarkers,\n    getModels: getModels,\n    getModel: getModel,\n    onDidCreateModel: onDidCreateModel,\n    onWillDisposeModel: onWillDisposeModel,\n    onDidChangeModelLanguage: onDidChangeModelLanguage,\n    createWebWorker: createWebWorker,\n    colorizeElement: colorizeElement,\n    colorize: colorize,\n    colorizeModelLine: colorizeModelLine,\n    tokenize: tokenize,\n    defineTheme: defineTheme,\n    setTheme: setTheme,\n    remeasureFonts: remeasureFonts,\n    registerCommand: registerCommand,\n    // enums\n    AccessibilitySupport: standaloneEnums.AccessibilitySupport,\n    ContentWidgetPositionPreference: standaloneEnums.ContentWidgetPositionPreference,\n    CursorChangeReason: standaloneEnums.CursorChangeReason,\n    DefaultEndOfLine: standaloneEnums.DefaultEndOfLine,\n    EditorAutoIndentStrategy: standaloneEnums.EditorAutoIndentStrategy,\n    EditorOption: standaloneEnums.EditorOption,\n    EndOfLinePreference: standaloneEnums.EndOfLinePreference,\n    EndOfLineSequence: standaloneEnums.EndOfLineSequence,\n    MinimapPosition: standaloneEnums.MinimapPosition,\n    MouseTargetType: standaloneEnums.MouseTargetType,\n    OverlayWidgetPositionPreference: standaloneEnums.OverlayWidgetPositionPreference,\n    OverviewRulerLane: standaloneEnums.OverviewRulerLane,\n    RenderLineNumbersType: standaloneEnums.RenderLineNumbersType,\n    RenderMinimap: standaloneEnums.RenderMinimap,\n    ScrollbarVisibility: standaloneEnums.ScrollbarVisibility,\n    ScrollType: standaloneEnums.ScrollType,\n    TextEditorCursorBlinkingStyle: standaloneEnums.TextEditorCursorBlinkingStyle,\n    TextEditorCursorStyle: standaloneEnums.TextEditorCursorStyle,\n    TrackedRangeStickiness: standaloneEnums.TrackedRangeStickiness,\n    WrappingIndent: standaloneEnums.WrappingIndent,\n    InjectedTextCursorStops: standaloneEnums.InjectedTextCursorStops,\n    PositionAffinity: standaloneEnums.PositionAffinity,\n    // classes\n    ConfigurationChangedEvent: ConfigurationChangedEvent,\n    BareFontInfo: BareFontInfo,\n    FontInfo: FontInfo,\n    TextModelResolvedOptions: TextModelResolvedOptions,\n    FindMatch: FindMatch,\n    ApplyUpdateResult: ApplyUpdateResult,\n    // vars\n    EditorType: EditorType,\n    EditorOptions: EditorOptions\n  };\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/standalone/browser/standaloneEditor.js"],"names":["splitLines","FontMeasurements","ICodeEditorService","DiffNavigator","ApplyUpdateResult","ConfigurationChangedEvent","EditorOptions","BareFontInfo","FontInfo","EditorType","FindMatch","TextModelResolvedOptions","languages","ILanguageConfigurationService","NullState","nullTokenize","ILanguageService","IModelService","createWebWorker","actualCreateWebWorker","standaloneEnums","Colorizer","createTextModel","StandaloneDiffEditor","StandaloneEditor","StandaloneServices","IStandaloneThemeService","CommandsRegistry","IMarkerService","create","domElement","options","override","instantiationService","initialize","createInstance","onDidCreateEditor","listener","codeEditorService","get","onCodeEditorAdd","editor","createDiffEditor","createDiffNavigator","diffEditor","opts","createModel","value","language","uri","languageService","languageId","getLanguageIdByMimeType","setModelLanguage","model","modelService","setMode","createById","setModelMarkers","owner","markers","markerService","changeOne","getModelMarkers","filter","read","onDidChangeMarkers","onMarkerChanged","getModel","getModels","onDidCreateModel","onModelAdded","onWillDisposeModel","onModelRemoved","onDidChangeModelLanguage","onModelLanguageChanged","e","oldLanguage","oldLanguageId","colorizeElement","domNode","themeService","registerEditorContainer","colorize","text","document","body","colorizeModelLine","lineNumber","tabSize","getSafeTokenizationSupport","tokenizationSupport","TokenizationRegistry","getInitialState","tokenize","line","hasEOL","state","getOrCreate","lines","result","i","len","length","tokenizationResult","tokens","endState","defineTheme","themeName","themeData","standaloneThemeService","setTheme","remeasureFonts","clearAllFontInfos","registerCommand","id","handler","createMonacoEditorAPI","AccessibilitySupport","ContentWidgetPositionPreference","CursorChangeReason","DefaultEndOfLine","EditorAutoIndentStrategy","EditorOption","EndOfLinePreference","EndOfLineSequence","MinimapPosition","MouseTargetType","OverlayWidgetPositionPreference","OverviewRulerLane","RenderLineNumbersType","RenderMinimap","ScrollbarVisibility","ScrollType","TextEditorCursorBlinkingStyle","TextEditorCursorStyle","TrackedRangeStickiness","WrappingIndent","InjectedTextCursorStops","PositionAffinity"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './standalone-tokens.css';\nimport { splitLines } from '../../../base/common/strings.js';\nimport { FontMeasurements } from '../../browser/config/fontMeasurements.js';\nimport { ICodeEditorService } from '../../browser/services/codeEditorService.js';\nimport { DiffNavigator } from '../../browser/widget/diffNavigator.js';\nimport { ApplyUpdateResult, ConfigurationChangedEvent, EditorOptions } from '../../common/config/editorOptions.js';\nimport { BareFontInfo, FontInfo } from '../../common/config/fontInfo.js';\nimport { EditorType } from '../../common/editorCommon.js';\nimport { FindMatch, TextModelResolvedOptions } from '../../common/model.js';\nimport * as languages from '../../common/languages.js';\nimport { ILanguageConfigurationService } from '../../common/languages/languageConfigurationRegistry.js';\nimport { NullState, nullTokenize } from '../../common/languages/nullMode.js';\nimport { ILanguageService } from '../../common/services/language.js';\nimport { IModelService } from '../../common/services/model.js';\nimport { createWebWorker as actualCreateWebWorker } from '../../browser/services/webWorker.js';\nimport * as standaloneEnums from '../../common/standalone/standaloneEnums.js';\nimport { Colorizer } from './colorizer.js';\nimport { createTextModel, StandaloneDiffEditor, StandaloneEditor } from './standaloneCodeEditor.js';\nimport { StandaloneServices } from './standaloneServices.js';\nimport { IStandaloneThemeService } from '../common/standaloneTheme.js';\nimport { CommandsRegistry } from '../../../platform/commands/common/commands.js';\nimport { IMarkerService } from '../../../platform/markers/common/markers.js';\n/**\n * Create a new editor under `domElement`.\n * `domElement` should be empty (not contain other dom nodes).\n * The editor will read the size of `domElement`.\n */\nexport function create(domElement, options, override) {\n    const instantiationService = StandaloneServices.initialize(override || {});\n    return instantiationService.createInstance(StandaloneEditor, domElement, options);\n}\n/**\n * Emitted when an editor is created.\n * Creating a diff editor might cause this listener to be invoked with the two editors.\n * @event\n */\nexport function onDidCreateEditor(listener) {\n    const codeEditorService = StandaloneServices.get(ICodeEditorService);\n    return codeEditorService.onCodeEditorAdd((editor) => {\n        listener(editor);\n    });\n}\n/**\n * Create a new diff editor under `domElement`.\n * `domElement` should be empty (not contain other dom nodes).\n * The editor will read the size of `domElement`.\n */\nexport function createDiffEditor(domElement, options, override) {\n    const instantiationService = StandaloneServices.initialize(override || {});\n    return instantiationService.createInstance(StandaloneDiffEditor, domElement, options);\n}\nexport function createDiffNavigator(diffEditor, opts) {\n    return new DiffNavigator(diffEditor, opts);\n}\n/**\n * Create a new editor model.\n * You can specify the language that should be set for this model or let the language be inferred from the `uri`.\n */\nexport function createModel(value, language, uri) {\n    const languageService = StandaloneServices.get(ILanguageService);\n    const languageId = languageService.getLanguageIdByMimeType(language) || language;\n    return createTextModel(StandaloneServices.get(IModelService), languageService, value, languageId, uri);\n}\n/**\n * Change the language for a model.\n */\nexport function setModelLanguage(model, languageId) {\n    const languageService = StandaloneServices.get(ILanguageService);\n    const modelService = StandaloneServices.get(IModelService);\n    modelService.setMode(model, languageService.createById(languageId));\n}\n/**\n * Set the markers for a model.\n */\nexport function setModelMarkers(model, owner, markers) {\n    if (model) {\n        const markerService = StandaloneServices.get(IMarkerService);\n        markerService.changeOne(owner, model.uri, markers);\n    }\n}\n/**\n * Get markers for owner and/or resource\n *\n * @returns list of markers\n */\nexport function getModelMarkers(filter) {\n    const markerService = StandaloneServices.get(IMarkerService);\n    return markerService.read(filter);\n}\n/**\n * Emitted when markers change for a model.\n * @event\n */\nexport function onDidChangeMarkers(listener) {\n    const markerService = StandaloneServices.get(IMarkerService);\n    return markerService.onMarkerChanged(listener);\n}\n/**\n * Get the model that has `uri` if it exists.\n */\nexport function getModel(uri) {\n    const modelService = StandaloneServices.get(IModelService);\n    return modelService.getModel(uri);\n}\n/**\n * Get all the created models.\n */\nexport function getModels() {\n    const modelService = StandaloneServices.get(IModelService);\n    return modelService.getModels();\n}\n/**\n * Emitted when a model is created.\n * @event\n */\nexport function onDidCreateModel(listener) {\n    const modelService = StandaloneServices.get(IModelService);\n    return modelService.onModelAdded(listener);\n}\n/**\n * Emitted right before a model is disposed.\n * @event\n */\nexport function onWillDisposeModel(listener) {\n    const modelService = StandaloneServices.get(IModelService);\n    return modelService.onModelRemoved(listener);\n}\n/**\n * Emitted when a different language is set to a model.\n * @event\n */\nexport function onDidChangeModelLanguage(listener) {\n    const modelService = StandaloneServices.get(IModelService);\n    return modelService.onModelLanguageChanged((e) => {\n        listener({\n            model: e.model,\n            oldLanguage: e.oldLanguageId\n        });\n    });\n}\n/**\n * Create a new web worker that has model syncing capabilities built in.\n * Specify an AMD module to load that will `create` an object that will be proxied.\n */\nexport function createWebWorker(opts) {\n    return actualCreateWebWorker(StandaloneServices.get(IModelService), StandaloneServices.get(ILanguageConfigurationService), opts);\n}\n/**\n * Colorize the contents of `domNode` using attribute `data-lang`.\n */\nexport function colorizeElement(domNode, options) {\n    const languageService = StandaloneServices.get(ILanguageService);\n    const themeService = StandaloneServices.get(IStandaloneThemeService);\n    themeService.registerEditorContainer(domNode);\n    return Colorizer.colorizeElement(themeService, languageService, domNode, options);\n}\n/**\n * Colorize `text` using language `languageId`.\n */\nexport function colorize(text, languageId, options) {\n    const languageService = StandaloneServices.get(ILanguageService);\n    const themeService = StandaloneServices.get(IStandaloneThemeService);\n    themeService.registerEditorContainer(document.body);\n    return Colorizer.colorize(languageService, text, languageId, options);\n}\n/**\n * Colorize a line in a model.\n */\nexport function colorizeModelLine(model, lineNumber, tabSize = 4) {\n    const themeService = StandaloneServices.get(IStandaloneThemeService);\n    themeService.registerEditorContainer(document.body);\n    return Colorizer.colorizeModelLine(model, lineNumber, tabSize);\n}\n/**\n * @internal\n */\nfunction getSafeTokenizationSupport(language) {\n    const tokenizationSupport = languages.TokenizationRegistry.get(language);\n    if (tokenizationSupport) {\n        return tokenizationSupport;\n    }\n    return {\n        getInitialState: () => NullState,\n        tokenize: (line, hasEOL, state) => nullTokenize(language, state)\n    };\n}\n/**\n * Tokenize `text` using language `languageId`\n */\nexport function tokenize(text, languageId) {\n    // Needed in order to get the mode registered for subsequent look-ups\n    languages.TokenizationRegistry.getOrCreate(languageId);\n    const tokenizationSupport = getSafeTokenizationSupport(languageId);\n    const lines = splitLines(text);\n    const result = [];\n    let state = tokenizationSupport.getInitialState();\n    for (let i = 0, len = lines.length; i < len; i++) {\n        const line = lines[i];\n        const tokenizationResult = tokenizationSupport.tokenize(line, true, state);\n        result[i] = tokenizationResult.tokens;\n        state = tokenizationResult.endState;\n    }\n    return result;\n}\n/**\n * Define a new theme or update an existing theme.\n */\nexport function defineTheme(themeName, themeData) {\n    const standaloneThemeService = StandaloneServices.get(IStandaloneThemeService);\n    standaloneThemeService.defineTheme(themeName, themeData);\n}\n/**\n * Switches to a theme.\n */\nexport function setTheme(themeName) {\n    const standaloneThemeService = StandaloneServices.get(IStandaloneThemeService);\n    standaloneThemeService.setTheme(themeName);\n}\n/**\n * Clears all cached font measurements and triggers re-measurement.\n */\nexport function remeasureFonts() {\n    FontMeasurements.clearAllFontInfos();\n}\n/**\n * Register a command.\n */\nexport function registerCommand(id, handler) {\n    return CommandsRegistry.registerCommand({ id, handler });\n}\n/**\n * @internal\n */\nexport function createMonacoEditorAPI() {\n    return {\n        // methods\n        create: create,\n        onDidCreateEditor: onDidCreateEditor,\n        createDiffEditor: createDiffEditor,\n        createDiffNavigator: createDiffNavigator,\n        createModel: createModel,\n        setModelLanguage: setModelLanguage,\n        setModelMarkers: setModelMarkers,\n        getModelMarkers: getModelMarkers,\n        onDidChangeMarkers: onDidChangeMarkers,\n        getModels: getModels,\n        getModel: getModel,\n        onDidCreateModel: onDidCreateModel,\n        onWillDisposeModel: onWillDisposeModel,\n        onDidChangeModelLanguage: onDidChangeModelLanguage,\n        createWebWorker: createWebWorker,\n        colorizeElement: colorizeElement,\n        colorize: colorize,\n        colorizeModelLine: colorizeModelLine,\n        tokenize: tokenize,\n        defineTheme: defineTheme,\n        setTheme: setTheme,\n        remeasureFonts: remeasureFonts,\n        registerCommand: registerCommand,\n        // enums\n        AccessibilitySupport: standaloneEnums.AccessibilitySupport,\n        ContentWidgetPositionPreference: standaloneEnums.ContentWidgetPositionPreference,\n        CursorChangeReason: standaloneEnums.CursorChangeReason,\n        DefaultEndOfLine: standaloneEnums.DefaultEndOfLine,\n        EditorAutoIndentStrategy: standaloneEnums.EditorAutoIndentStrategy,\n        EditorOption: standaloneEnums.EditorOption,\n        EndOfLinePreference: standaloneEnums.EndOfLinePreference,\n        EndOfLineSequence: standaloneEnums.EndOfLineSequence,\n        MinimapPosition: standaloneEnums.MinimapPosition,\n        MouseTargetType: standaloneEnums.MouseTargetType,\n        OverlayWidgetPositionPreference: standaloneEnums.OverlayWidgetPositionPreference,\n        OverviewRulerLane: standaloneEnums.OverviewRulerLane,\n        RenderLineNumbersType: standaloneEnums.RenderLineNumbersType,\n        RenderMinimap: standaloneEnums.RenderMinimap,\n        ScrollbarVisibility: standaloneEnums.ScrollbarVisibility,\n        ScrollType: standaloneEnums.ScrollType,\n        TextEditorCursorBlinkingStyle: standaloneEnums.TextEditorCursorBlinkingStyle,\n        TextEditorCursorStyle: standaloneEnums.TextEditorCursorStyle,\n        TrackedRangeStickiness: standaloneEnums.TrackedRangeStickiness,\n        WrappingIndent: standaloneEnums.WrappingIndent,\n        InjectedTextCursorStops: standaloneEnums.InjectedTextCursorStops,\n        PositionAffinity: standaloneEnums.PositionAffinity,\n        // classes\n        ConfigurationChangedEvent: ConfigurationChangedEvent,\n        BareFontInfo: BareFontInfo,\n        FontInfo: FontInfo,\n        TextModelResolvedOptions: TextModelResolvedOptions,\n        FindMatch: FindMatch,\n        ApplyUpdateResult: ApplyUpdateResult,\n        // vars\n        EditorType: EditorType,\n        EditorOptions: EditorOptions\n    };\n}\n"]},"metadata":{},"sourceType":"module"}