{"ast":null,"code":"import { nanoid } from 'nanoid/non-secure';\nimport TabRouter, { TabActions } from './TabRouter';\nexport const DrawerActions = { ...TabActions,\n\n  openDrawer() {\n    return {\n      type: 'OPEN_DRAWER'\n    };\n  },\n\n  closeDrawer() {\n    return {\n      type: 'CLOSE_DRAWER'\n    };\n  },\n\n  toggleDrawer() {\n    return {\n      type: 'TOGGLE_DRAWER'\n    };\n  }\n\n};\nexport default function DrawerRouter({\n  defaultStatus = 'closed',\n  ...rest\n}) {\n  const router = TabRouter(rest);\n\n  const isDrawerInHistory = state => {\n    var _state$history;\n\n    return Boolean((_state$history = state.history) === null || _state$history === void 0 ? void 0 : _state$history.some(it => it.type === 'drawer'));\n  };\n\n  const addDrawerToHistory = state => {\n    if (isDrawerInHistory(state)) {\n      return state;\n    }\n\n    return { ...state,\n      history: [...state.history, {\n        type: 'drawer',\n        status: defaultStatus === 'open' ? 'closed' : 'open'\n      }]\n    };\n  };\n\n  const removeDrawerFromHistory = state => {\n    if (!isDrawerInHistory(state)) {\n      return state;\n    }\n\n    return { ...state,\n      history: state.history.filter(it => it.type !== 'drawer')\n    };\n  };\n\n  const openDrawer = state => {\n    if (defaultStatus === 'open') {\n      return removeDrawerFromHistory(state);\n    }\n\n    return addDrawerToHistory(state);\n  };\n\n  const closeDrawer = state => {\n    if (defaultStatus === 'open') {\n      return addDrawerToHistory(state);\n    }\n\n    return removeDrawerFromHistory(state);\n  };\n\n  return { ...router,\n    type: 'drawer',\n\n    getInitialState({\n      routeNames,\n      routeParamList,\n      routeGetIdList\n    }) {\n      const state = router.getInitialState({\n        routeNames,\n        routeParamList,\n        routeGetIdList\n      });\n      return { ...state,\n        default: defaultStatus,\n        stale: false,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`\n      };\n    },\n\n    getRehydratedState(partialState, {\n      routeNames,\n      routeParamList,\n      routeGetIdList\n    }) {\n      if (partialState.stale === false) {\n        return partialState;\n      }\n\n      let state = router.getRehydratedState(partialState, {\n        routeNames,\n        routeParamList,\n        routeGetIdList\n      });\n\n      if (isDrawerInHistory(partialState)) {\n        // Re-sync the drawer entry in history to correct it if it was wrong\n        state = removeDrawerFromHistory(state);\n        state = addDrawerToHistory(state);\n      }\n\n      return { ...state,\n        default: defaultStatus,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const result = router.getStateForRouteFocus(state, key);\n      return closeDrawer(result);\n    },\n\n    getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n\n        case 'TOGGLE_DRAWER':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n\n          return addDrawerToHistory(state);\n\n        case 'JUMP_TO':\n        case 'NAVIGATE':\n          {\n            const result = router.getStateForAction(state, action, options);\n\n            if (result != null && result.index !== state.index) {\n              return closeDrawer(result);\n            }\n\n            return result;\n          }\n\n        case 'GO_BACK':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n\n          return router.getStateForAction(state, action, options);\n\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n\n    actionCreators: DrawerActions\n  };\n}","map":{"version":3,"sources":["DrawerRouter.tsx"],"names":["DrawerActions","openDrawer","type","closeDrawer","toggleDrawer","defaultStatus","rest","router","TabRouter","isDrawerInHistory","state","Boolean","it","addDrawerToHistory","history","status","removeDrawerFromHistory","getInitialState","routeGetIdList","default","stale","key","nanoid","getRehydratedState","partialState","getStateForRouteFocus","result","getStateForAction","action","actionCreators"],"mappings":"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","sourcesContent":["import { nanoid } from 'nanoid/non-secure';\n\nimport TabRouter, {\n  TabActionHelpers,\n  TabActions,\n  TabActionType,\n  TabNavigationState,\n  TabRouterOptions,\n} from './TabRouter';\nimport type {\n  CommonNavigationAction,\n  ParamListBase,\n  PartialState,\n  Router,\n} from './types';\nexport type DrawerStatus = 'open' | 'closed';\n\nexport type DrawerActionType =\n  | TabActionType\n  | {\n      type: 'OPEN_DRAWER' | 'CLOSE_DRAWER' | 'TOGGLE_DRAWER';\n      source?: string;\n      target?: string;\n    };\n\nexport type DrawerRouterOptions = TabRouterOptions & {\n  defaultStatus?: DrawerStatus;\n};\n\nexport type DrawerNavigationState<ParamList extends ParamListBase> = Omit<\n  TabNavigationState<ParamList>,\n  'type' | 'history'\n> & {\n  /**\n   * Type of the router, in this case, it's drawer.\n   */\n  type: 'drawer';\n  /**\n   * Default status of the drawer.\n   */\n  default: DrawerStatus;\n  /**\n   * List of previously visited route keys and drawer open status.\n   */\n  history: (\n    | { type: 'route'; key: string }\n    | { type: 'drawer'; status: DrawerStatus }\n  )[];\n};\n\nexport type DrawerActionHelpers<ParamList extends ParamListBase> =\n  TabActionHelpers<ParamList> & {\n    /**\n     * Open the drawer sidebar.\n     */\n    openDrawer(): void;\n\n    /**\n     * Close the drawer sidebar.\n     */\n    closeDrawer(): void;\n\n    /**\n     * Open the drawer sidebar if closed, or close if opened.\n     */\n    toggleDrawer(): void;\n  };\n\nexport const DrawerActions = {\n  ...TabActions,\n  openDrawer(): DrawerActionType {\n    return { type: 'OPEN_DRAWER' };\n  },\n  closeDrawer(): DrawerActionType {\n    return { type: 'CLOSE_DRAWER' };\n  },\n  toggleDrawer(): DrawerActionType {\n    return { type: 'TOGGLE_DRAWER' };\n  },\n};\n\nexport default function DrawerRouter({\n  defaultStatus = 'closed',\n  ...rest\n}: DrawerRouterOptions): Router<\n  DrawerNavigationState<ParamListBase>,\n  DrawerActionType | CommonNavigationAction\n> {\n  const router = TabRouter(rest) as unknown as Router<\n    DrawerNavigationState<ParamListBase>,\n    TabActionType | CommonNavigationAction\n  >;\n\n  const isDrawerInHistory = (\n    state:\n      | DrawerNavigationState<ParamListBase>\n      | PartialState<DrawerNavigationState<ParamListBase>>\n  ) => Boolean(state.history?.some((it) => it.type === 'drawer'));\n\n  const addDrawerToHistory = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (isDrawerInHistory(state)) {\n      return state;\n    }\n\n    return {\n      ...state,\n      history: [\n        ...state.history,\n        {\n          type: 'drawer',\n          status: defaultStatus === 'open' ? 'closed' : 'open',\n        },\n      ],\n    };\n  };\n\n  const removeDrawerFromHistory = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (!isDrawerInHistory(state)) {\n      return state;\n    }\n\n    return {\n      ...state,\n      history: state.history.filter((it) => it.type !== 'drawer'),\n    };\n  };\n\n  const openDrawer = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (defaultStatus === 'open') {\n      return removeDrawerFromHistory(state);\n    }\n\n    return addDrawerToHistory(state);\n  };\n\n  const closeDrawer = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (defaultStatus === 'open') {\n      return addDrawerToHistory(state);\n    }\n\n    return removeDrawerFromHistory(state);\n  };\n\n  return {\n    ...router,\n\n    type: 'drawer',\n\n    getInitialState({ routeNames, routeParamList, routeGetIdList }) {\n      const state = router.getInitialState({\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      return {\n        ...state,\n        default: defaultStatus,\n        stale: false,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getRehydratedState(\n      partialState,\n      { routeNames, routeParamList, routeGetIdList }\n    ) {\n      if (partialState.stale === false) {\n        return partialState;\n      }\n\n      let state = router.getRehydratedState(partialState, {\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      if (isDrawerInHistory(partialState)) {\n        // Re-sync the drawer entry in history to correct it if it was wrong\n        state = removeDrawerFromHistory(state);\n        state = addDrawerToHistory(state);\n      }\n\n      return {\n        ...state,\n        default: defaultStatus,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const result = router.getStateForRouteFocus(state, key);\n\n      return closeDrawer(result);\n    },\n\n    getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n\n        case 'TOGGLE_DRAWER':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n\n          return addDrawerToHistory(state);\n\n        case 'JUMP_TO':\n        case 'NAVIGATE': {\n          const result = router.getStateForAction(state, action, options);\n\n          if (result != null && result.index !== state.index) {\n            return closeDrawer(result as DrawerNavigationState<ParamListBase>);\n          }\n\n          return result;\n        }\n\n        case 'GO_BACK':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n\n          return router.getStateForAction(state, action, options);\n\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n\n    actionCreators: DrawerActions,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}