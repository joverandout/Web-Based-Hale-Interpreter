{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../../base/browser/dom.js';\nimport { asArray } from '../../../../base/common/arrays.js';\nimport { isEmptyMarkdownString } from '../../../../base/common/htmlContent.js';\nimport { Disposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { MarkdownRenderer } from '../../markdownRenderer/browser/markdownRenderer.js';\nimport { HoverOperation } from './hoverOperation.js';\nimport { NullOpenerService } from '../../../../platform/opener/common/opener.js';\nimport { HoverWidget } from '../../../../base/browser/ui/hover/hoverWidget.js';\nconst $ = dom.$;\nexport class MarginHoverWidget extends Disposable {\n  constructor(editor, languageService, openerService = NullOpenerService) {\n    super();\n    this._renderDisposeables = this._register(new DisposableStore());\n    this._editor = editor;\n    this._isVisible = false;\n    this._messages = [];\n    this._hover = this._register(new HoverWidget());\n\n    this._hover.containerDomNode.classList.toggle('hidden', !this._isVisible);\n\n    this._markdownRenderer = this._register(new MarkdownRenderer({\n      editor: this._editor\n    }, languageService, openerService));\n    this._computer = new MarginHoverComputer(this._editor);\n    this._hoverOperation = this._register(new HoverOperation(this._editor, this._computer));\n\n    this._register(this._hoverOperation.onResult(result => {\n      this._withResult(result.value);\n    }));\n\n    this._register(this._editor.onDidChangeModelDecorations(() => this._onModelDecorationsChanged()));\n\n    this._register(this._editor.onDidChangeConfiguration(e => {\n      if (e.hasChanged(44\n      /* fontInfo */\n      )) {\n        this._updateFont();\n      }\n    }));\n\n    this._editor.addOverlayWidget(this);\n  }\n\n  dispose() {\n    this._editor.removeOverlayWidget(this);\n\n    super.dispose();\n  }\n\n  getId() {\n    return MarginHoverWidget.ID;\n  }\n\n  getDomNode() {\n    return this._hover.containerDomNode;\n  }\n\n  getPosition() {\n    return null;\n  }\n\n  _updateFont() {\n    const codeClasses = Array.prototype.slice.call(this._hover.contentsDomNode.getElementsByClassName('code'));\n    codeClasses.forEach(node => this._editor.applyFontInfo(node));\n  }\n\n  _onModelDecorationsChanged() {\n    if (this._isVisible) {\n      // The decorations have changed and the hover is visible,\n      // we need to recompute the displayed text\n      this._hoverOperation.cancel();\n\n      this._hoverOperation.start(0\n      /* Delayed */\n      );\n    }\n  }\n\n  startShowingAt(lineNumber) {\n    if (this._computer.lineNumber === lineNumber) {\n      // We have to show the widget at the exact same line number as before, so no work is needed\n      return;\n    }\n\n    this._hoverOperation.cancel();\n\n    this.hide();\n    this._computer.lineNumber = lineNumber;\n\n    this._hoverOperation.start(0\n    /* Delayed */\n    );\n  }\n\n  hide() {\n    this._computer.lineNumber = -1;\n\n    this._hoverOperation.cancel();\n\n    if (!this._isVisible) {\n      return;\n    }\n\n    this._isVisible = false;\n\n    this._hover.containerDomNode.classList.toggle('hidden', !this._isVisible);\n  }\n\n  _withResult(result) {\n    this._messages = result;\n\n    if (this._messages.length > 0) {\n      this._renderMessages(this._computer.lineNumber, this._messages);\n    } else {\n      this.hide();\n    }\n  }\n\n  _renderMessages(lineNumber, messages) {\n    this._renderDisposeables.clear();\n\n    const fragment = document.createDocumentFragment();\n\n    for (const msg of messages) {\n      const markdownHoverElement = $('div.hover-row.markdown-hover');\n      const hoverContentsElement = dom.append(markdownHoverElement, $('div.hover-contents'));\n\n      const renderedContents = this._renderDisposeables.add(this._markdownRenderer.render(msg.value));\n\n      hoverContentsElement.appendChild(renderedContents.element);\n      fragment.appendChild(markdownHoverElement);\n    }\n\n    this._updateContents(fragment);\n\n    this._showAt(lineNumber);\n  }\n\n  _updateContents(node) {\n    this._hover.contentsDomNode.textContent = '';\n\n    this._hover.contentsDomNode.appendChild(node);\n\n    this._updateFont();\n  }\n\n  _showAt(lineNumber) {\n    if (!this._isVisible) {\n      this._isVisible = true;\n\n      this._hover.containerDomNode.classList.toggle('hidden', !this._isVisible);\n    }\n\n    const editorLayout = this._editor.getLayoutInfo();\n\n    const topForLineNumber = this._editor.getTopForLineNumber(lineNumber);\n\n    const editorScrollTop = this._editor.getScrollTop();\n\n    const lineHeight = this._editor.getOption(59\n    /* lineHeight */\n    );\n\n    const nodeHeight = this._hover.containerDomNode.clientHeight;\n    const top = topForLineNumber - editorScrollTop - (nodeHeight - lineHeight) / 2;\n    this._hover.containerDomNode.style.left = `${editorLayout.glyphMarginLeft + editorLayout.glyphMarginWidth}px`;\n    this._hover.containerDomNode.style.top = `${Math.max(Math.round(top), 0)}px`;\n  }\n\n}\nMarginHoverWidget.ID = 'editor.contrib.modesGlyphHoverWidget';\n\nclass MarginHoverComputer {\n  constructor(_editor) {\n    this._editor = _editor;\n    this._lineNumber = -1;\n  }\n\n  get lineNumber() {\n    return this._lineNumber;\n  }\n\n  set lineNumber(value) {\n    this._lineNumber = value;\n  }\n\n  computeSync() {\n    const toHoverMessage = contents => {\n      return {\n        value: contents\n      };\n    };\n\n    const lineDecorations = this._editor.getLineDecorations(this._lineNumber);\n\n    const result = [];\n\n    if (!lineDecorations) {\n      return result;\n    }\n\n    for (const d of lineDecorations) {\n      if (!d.options.glyphMarginClassName) {\n        continue;\n      }\n\n      const hoverMessage = d.options.glyphMarginHoverMessage;\n\n      if (!hoverMessage || isEmptyMarkdownString(hoverMessage)) {\n        continue;\n      }\n\n      result.push(...asArray(hoverMessage).map(toHoverMessage));\n    }\n\n    return result;\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/contrib/hover/browser/marginHover.js"],"names":["dom","asArray","isEmptyMarkdownString","Disposable","DisposableStore","MarkdownRenderer","HoverOperation","NullOpenerService","HoverWidget","$","MarginHoverWidget","constructor","editor","languageService","openerService","_renderDisposeables","_register","_editor","_isVisible","_messages","_hover","containerDomNode","classList","toggle","_markdownRenderer","_computer","MarginHoverComputer","_hoverOperation","onResult","result","_withResult","value","onDidChangeModelDecorations","_onModelDecorationsChanged","onDidChangeConfiguration","e","hasChanged","_updateFont","addOverlayWidget","dispose","removeOverlayWidget","getId","ID","getDomNode","getPosition","codeClasses","Array","prototype","slice","call","contentsDomNode","getElementsByClassName","forEach","node","applyFontInfo","cancel","start","startShowingAt","lineNumber","hide","length","_renderMessages","messages","clear","fragment","document","createDocumentFragment","msg","markdownHoverElement","hoverContentsElement","append","renderedContents","add","render","appendChild","element","_updateContents","_showAt","textContent","editorLayout","getLayoutInfo","topForLineNumber","getTopForLineNumber","editorScrollTop","getScrollTop","lineHeight","getOption","nodeHeight","clientHeight","top","style","left","glyphMarginLeft","glyphMarginWidth","Math","max","round","_lineNumber","computeSync","toHoverMessage","contents","lineDecorations","getLineDecorations","d","options","glyphMarginClassName","hoverMessage","glyphMarginHoverMessage","push","map"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../../base/browser/dom.js';\nimport { asArray } from '../../../../base/common/arrays.js';\nimport { isEmptyMarkdownString } from '../../../../base/common/htmlContent.js';\nimport { Disposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { MarkdownRenderer } from '../../markdownRenderer/browser/markdownRenderer.js';\nimport { HoverOperation } from './hoverOperation.js';\nimport { NullOpenerService } from '../../../../platform/opener/common/opener.js';\nimport { HoverWidget } from '../../../../base/browser/ui/hover/hoverWidget.js';\nconst $ = dom.$;\nexport class MarginHoverWidget extends Disposable {\n    constructor(editor, languageService, openerService = NullOpenerService) {\n        super();\n        this._renderDisposeables = this._register(new DisposableStore());\n        this._editor = editor;\n        this._isVisible = false;\n        this._messages = [];\n        this._hover = this._register(new HoverWidget());\n        this._hover.containerDomNode.classList.toggle('hidden', !this._isVisible);\n        this._markdownRenderer = this._register(new MarkdownRenderer({ editor: this._editor }, languageService, openerService));\n        this._computer = new MarginHoverComputer(this._editor);\n        this._hoverOperation = this._register(new HoverOperation(this._editor, this._computer));\n        this._register(this._hoverOperation.onResult((result) => {\n            this._withResult(result.value);\n        }));\n        this._register(this._editor.onDidChangeModelDecorations(() => this._onModelDecorationsChanged()));\n        this._register(this._editor.onDidChangeConfiguration((e) => {\n            if (e.hasChanged(44 /* fontInfo */)) {\n                this._updateFont();\n            }\n        }));\n        this._editor.addOverlayWidget(this);\n    }\n    dispose() {\n        this._editor.removeOverlayWidget(this);\n        super.dispose();\n    }\n    getId() {\n        return MarginHoverWidget.ID;\n    }\n    getDomNode() {\n        return this._hover.containerDomNode;\n    }\n    getPosition() {\n        return null;\n    }\n    _updateFont() {\n        const codeClasses = Array.prototype.slice.call(this._hover.contentsDomNode.getElementsByClassName('code'));\n        codeClasses.forEach(node => this._editor.applyFontInfo(node));\n    }\n    _onModelDecorationsChanged() {\n        if (this._isVisible) {\n            // The decorations have changed and the hover is visible,\n            // we need to recompute the displayed text\n            this._hoverOperation.cancel();\n            this._hoverOperation.start(0 /* Delayed */);\n        }\n    }\n    startShowingAt(lineNumber) {\n        if (this._computer.lineNumber === lineNumber) {\n            // We have to show the widget at the exact same line number as before, so no work is needed\n            return;\n        }\n        this._hoverOperation.cancel();\n        this.hide();\n        this._computer.lineNumber = lineNumber;\n        this._hoverOperation.start(0 /* Delayed */);\n    }\n    hide() {\n        this._computer.lineNumber = -1;\n        this._hoverOperation.cancel();\n        if (!this._isVisible) {\n            return;\n        }\n        this._isVisible = false;\n        this._hover.containerDomNode.classList.toggle('hidden', !this._isVisible);\n    }\n    _withResult(result) {\n        this._messages = result;\n        if (this._messages.length > 0) {\n            this._renderMessages(this._computer.lineNumber, this._messages);\n        }\n        else {\n            this.hide();\n        }\n    }\n    _renderMessages(lineNumber, messages) {\n        this._renderDisposeables.clear();\n        const fragment = document.createDocumentFragment();\n        for (const msg of messages) {\n            const markdownHoverElement = $('div.hover-row.markdown-hover');\n            const hoverContentsElement = dom.append(markdownHoverElement, $('div.hover-contents'));\n            const renderedContents = this._renderDisposeables.add(this._markdownRenderer.render(msg.value));\n            hoverContentsElement.appendChild(renderedContents.element);\n            fragment.appendChild(markdownHoverElement);\n        }\n        this._updateContents(fragment);\n        this._showAt(lineNumber);\n    }\n    _updateContents(node) {\n        this._hover.contentsDomNode.textContent = '';\n        this._hover.contentsDomNode.appendChild(node);\n        this._updateFont();\n    }\n    _showAt(lineNumber) {\n        if (!this._isVisible) {\n            this._isVisible = true;\n            this._hover.containerDomNode.classList.toggle('hidden', !this._isVisible);\n        }\n        const editorLayout = this._editor.getLayoutInfo();\n        const topForLineNumber = this._editor.getTopForLineNumber(lineNumber);\n        const editorScrollTop = this._editor.getScrollTop();\n        const lineHeight = this._editor.getOption(59 /* lineHeight */);\n        const nodeHeight = this._hover.containerDomNode.clientHeight;\n        const top = topForLineNumber - editorScrollTop - ((nodeHeight - lineHeight) / 2);\n        this._hover.containerDomNode.style.left = `${editorLayout.glyphMarginLeft + editorLayout.glyphMarginWidth}px`;\n        this._hover.containerDomNode.style.top = `${Math.max(Math.round(top), 0)}px`;\n    }\n}\nMarginHoverWidget.ID = 'editor.contrib.modesGlyphHoverWidget';\nclass MarginHoverComputer {\n    constructor(_editor) {\n        this._editor = _editor;\n        this._lineNumber = -1;\n    }\n    get lineNumber() {\n        return this._lineNumber;\n    }\n    set lineNumber(value) {\n        this._lineNumber = value;\n    }\n    computeSync() {\n        const toHoverMessage = (contents) => {\n            return {\n                value: contents\n            };\n        };\n        const lineDecorations = this._editor.getLineDecorations(this._lineNumber);\n        const result = [];\n        if (!lineDecorations) {\n            return result;\n        }\n        for (const d of lineDecorations) {\n            if (!d.options.glyphMarginClassName) {\n                continue;\n            }\n            const hoverMessage = d.options.glyphMarginHoverMessage;\n            if (!hoverMessage || isEmptyMarkdownString(hoverMessage)) {\n                continue;\n            }\n            result.push(...asArray(hoverMessage).map(toHoverMessage));\n        }\n        return result;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}