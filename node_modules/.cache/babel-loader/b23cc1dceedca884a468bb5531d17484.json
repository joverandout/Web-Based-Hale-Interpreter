{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n// ------ internal util\nexport var _util;\n\n(function (_util) {\n  _util.serviceIds = new Map();\n  _util.DI_TARGET = '$di$target';\n  _util.DI_DEPENDENCIES = '$di$dependencies';\n\n  function getServiceDependencies(ctor) {\n    return ctor[_util.DI_DEPENDENCIES] || [];\n  }\n\n  _util.getServiceDependencies = getServiceDependencies;\n})(_util || (_util = {}));\n\nexport const IInstantiationService = createDecorator('instantiationService');\n\nfunction storeServiceDependency(id, target, index, optional) {\n  if (target[_util.DI_TARGET] === target) {\n    target[_util.DI_DEPENDENCIES].push({\n      id,\n      index,\n      optional\n    });\n  } else {\n    target[_util.DI_DEPENDENCIES] = [{\n      id,\n      index,\n      optional\n    }];\n    target[_util.DI_TARGET] = target;\n  }\n}\n/**\n * The *only* valid way to create a {{ServiceIdentifier}}.\n */\n\n\nexport function createDecorator(serviceId) {\n  if (_util.serviceIds.has(serviceId)) {\n    return _util.serviceIds.get(serviceId);\n  }\n\n  const id = function (target, key, index) {\n    if (arguments.length !== 3) {\n      throw new Error('@IServiceName-decorator can only be used to decorate a parameter');\n    }\n\n    storeServiceDependency(id, target, index, false);\n  };\n\n  id.toString = () => serviceId;\n\n  _util.serviceIds.set(serviceId, id);\n\n  return id;\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/platform/instantiation/common/instantiation.js"],"names":["_util","serviceIds","Map","DI_TARGET","DI_DEPENDENCIES","getServiceDependencies","ctor","IInstantiationService","createDecorator","storeServiceDependency","id","target","index","optional","push","serviceId","has","get","key","arguments","length","Error","toString","set"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIA,KAAJ;;AACP,CAAC,UAAUA,KAAV,EAAiB;AACdA,EAAAA,KAAK,CAACC,UAAN,GAAmB,IAAIC,GAAJ,EAAnB;AACAF,EAAAA,KAAK,CAACG,SAAN,GAAkB,YAAlB;AACAH,EAAAA,KAAK,CAACI,eAAN,GAAwB,kBAAxB;;AACA,WAASC,sBAAT,CAAgCC,IAAhC,EAAsC;AAClC,WAAOA,IAAI,CAACN,KAAK,CAACI,eAAP,CAAJ,IAA+B,EAAtC;AACH;;AACDJ,EAAAA,KAAK,CAACK,sBAAN,GAA+BA,sBAA/B;AACH,CARD,EAQGL,KAAK,KAAKA,KAAK,GAAG,EAAb,CARR;;AASA,OAAO,MAAMO,qBAAqB,GAAGC,eAAe,CAAC,sBAAD,CAA7C;;AACP,SAASC,sBAAT,CAAgCC,EAAhC,EAAoCC,MAApC,EAA4CC,KAA5C,EAAmDC,QAAnD,EAA6D;AACzD,MAAIF,MAAM,CAACX,KAAK,CAACG,SAAP,CAAN,KAA4BQ,MAAhC,EAAwC;AACpCA,IAAAA,MAAM,CAACX,KAAK,CAACI,eAAP,CAAN,CAA8BU,IAA9B,CAAmC;AAAEJ,MAAAA,EAAF;AAAME,MAAAA,KAAN;AAAaC,MAAAA;AAAb,KAAnC;AACH,GAFD,MAGK;AACDF,IAAAA,MAAM,CAACX,KAAK,CAACI,eAAP,CAAN,GAAgC,CAAC;AAAEM,MAAAA,EAAF;AAAME,MAAAA,KAAN;AAAaC,MAAAA;AAAb,KAAD,CAAhC;AACAF,IAAAA,MAAM,CAACX,KAAK,CAACG,SAAP,CAAN,GAA0BQ,MAA1B;AACH;AACJ;AACD;AACA;AACA;;;AACA,OAAO,SAASH,eAAT,CAAyBO,SAAzB,EAAoC;AACvC,MAAIf,KAAK,CAACC,UAAN,CAAiBe,GAAjB,CAAqBD,SAArB,CAAJ,EAAqC;AACjC,WAAOf,KAAK,CAACC,UAAN,CAAiBgB,GAAjB,CAAqBF,SAArB,CAAP;AACH;;AACD,QAAML,EAAE,GAAG,UAAUC,MAAV,EAAkBO,GAAlB,EAAuBN,KAAvB,EAA8B;AACrC,QAAIO,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AACxB,YAAM,IAAIC,KAAJ,CAAU,kEAAV,CAAN;AACH;;AACDZ,IAAAA,sBAAsB,CAACC,EAAD,EAAKC,MAAL,EAAaC,KAAb,EAAoB,KAApB,CAAtB;AACH,GALD;;AAMAF,EAAAA,EAAE,CAACY,QAAH,GAAc,MAAMP,SAApB;;AACAf,EAAAA,KAAK,CAACC,UAAN,CAAiBsB,GAAjB,CAAqBR,SAArB,EAAgCL,EAAhC;;AACA,SAAOA,EAAP;AACH","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n// ------ internal util\nexport var _util;\n(function (_util) {\n    _util.serviceIds = new Map();\n    _util.DI_TARGET = '$di$target';\n    _util.DI_DEPENDENCIES = '$di$dependencies';\n    function getServiceDependencies(ctor) {\n        return ctor[_util.DI_DEPENDENCIES] || [];\n    }\n    _util.getServiceDependencies = getServiceDependencies;\n})(_util || (_util = {}));\nexport const IInstantiationService = createDecorator('instantiationService');\nfunction storeServiceDependency(id, target, index, optional) {\n    if (target[_util.DI_TARGET] === target) {\n        target[_util.DI_DEPENDENCIES].push({ id, index, optional });\n    }\n    else {\n        target[_util.DI_DEPENDENCIES] = [{ id, index, optional }];\n        target[_util.DI_TARGET] = target;\n    }\n}\n/**\n * The *only* valid way to create a {{ServiceIdentifier}}.\n */\nexport function createDecorator(serviceId) {\n    if (_util.serviceIds.has(serviceId)) {\n        return _util.serviceIds.get(serviceId);\n    }\n    const id = function (target, key, index) {\n        if (arguments.length !== 3) {\n            throw new Error('@IServiceName-decorator can only be used to decorate a parameter');\n        }\n        storeServiceDependency(id, target, index, false);\n    };\n    id.toString = () => serviceId;\n    _util.serviceIds.set(serviceId, id);\n    return id;\n}\n"]},"metadata":{},"sourceType":"module"}