{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { MinimapCharRenderer } from './minimapCharRenderer.js';\nimport { allCharCodes } from './minimapCharSheet.js';\nimport { prebakedMiniMaps } from './minimapPreBaked.js';\nimport { toUint8 } from '../../../../base/common/uint.js';\n/**\n * Creates character renderers. It takes a 'scale' that determines how large\n * characters should be drawn. Using this, it draws data into a canvas and\n * then downsamples the characters as necessary for the current display.\n * This makes rendering more efficient, rather than drawing a full (tiny)\n * font, or downsampling in real-time.\n */\n\nexport class MinimapCharRendererFactory {\n  /**\n   * Creates a new character renderer factory with the given scale.\n   */\n  static create(scale, fontFamily) {\n    // renderers are immutable. By default we'll 'create' a new minimap\n    // character renderer whenever we switch editors, no need to do extra work.\n    if (this.lastCreated && scale === this.lastCreated.scale && fontFamily === this.lastFontFamily) {\n      return this.lastCreated;\n    }\n\n    let factory;\n\n    if (prebakedMiniMaps[scale]) {\n      factory = new MinimapCharRenderer(prebakedMiniMaps[scale](), scale);\n    } else {\n      factory = MinimapCharRendererFactory.createFromSampleData(MinimapCharRendererFactory.createSampleData(fontFamily).data, scale);\n    }\n\n    this.lastFontFamily = fontFamily;\n    this.lastCreated = factory;\n    return factory;\n  }\n  /**\n   * Creates the font sample data, writing to a canvas.\n   */\n\n\n  static createSampleData(fontFamily) {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    canvas.style.height = `${16\n    /* SAMPLED_CHAR_HEIGHT */\n    }px`;\n    canvas.height = 16\n    /* SAMPLED_CHAR_HEIGHT */\n    ;\n    canvas.width = 96\n    /* CHAR_COUNT */\n    * 10\n    /* SAMPLED_CHAR_WIDTH */\n    ;\n    canvas.style.width = 96\n    /* CHAR_COUNT */\n    * 10\n    /* SAMPLED_CHAR_WIDTH */\n    + 'px';\n    ctx.fillStyle = '#ffffff';\n    ctx.font = `bold ${16\n    /* SAMPLED_CHAR_HEIGHT */\n    }px ${fontFamily}`;\n    ctx.textBaseline = 'middle';\n    let x = 0;\n\n    for (const code of allCharCodes) {\n      ctx.fillText(String.fromCharCode(code), x, 16\n      /* SAMPLED_CHAR_HEIGHT */\n      / 2);\n      x += 10\n      /* SAMPLED_CHAR_WIDTH */\n      ;\n    }\n\n    return ctx.getImageData(0, 0, 96\n    /* CHAR_COUNT */\n    * 10\n    /* SAMPLED_CHAR_WIDTH */\n    , 16\n    /* SAMPLED_CHAR_HEIGHT */\n    );\n  }\n  /**\n   * Creates a character renderer from the canvas sample data.\n   */\n\n\n  static createFromSampleData(source, scale) {\n    const expectedLength = 16\n    /* SAMPLED_CHAR_HEIGHT */\n    * 10\n    /* SAMPLED_CHAR_WIDTH */\n    * 4\n    /* RGBA_CHANNELS_CNT */\n    * 96\n    /* CHAR_COUNT */\n    ;\n\n    if (source.length !== expectedLength) {\n      throw new Error('Unexpected source in MinimapCharRenderer');\n    }\n\n    const charData = MinimapCharRendererFactory._downsample(source, scale);\n\n    return new MinimapCharRenderer(charData, scale);\n  }\n\n  static _downsampleChar(source, sourceOffset, dest, destOffset, scale) {\n    const width = 1\n    /* BASE_CHAR_WIDTH */\n    * scale;\n    const height = 2\n    /* BASE_CHAR_HEIGHT */\n    * scale;\n    let targetIndex = destOffset;\n    let brightest = 0; // This is essentially an ad-hoc rescaling algorithm. Standard approaches\n    // like bicubic interpolation are awesome for scaling between image sizes,\n    // but don't work so well when scaling to very small pixel values, we end\n    // up with blurry, indistinct forms.\n    //\n    // The approach taken here is simply mapping each source pixel to the target\n    // pixels, and taking the weighted values for all pixels in each, and then\n    // averaging them out. Finally we apply an intensity boost in _downsample,\n    // since when scaling to the smallest pixel sizes there's more black space\n    // which causes characters to be much less distinct.\n\n    for (let y = 0; y < height; y++) {\n      // 1. For this destination pixel, get the source pixels we're sampling\n      // from (x1, y1) to the next pixel (x2, y2)\n      const sourceY1 = y / height * 16\n      /* SAMPLED_CHAR_HEIGHT */\n      ;\n      const sourceY2 = (y + 1) / height * 16\n      /* SAMPLED_CHAR_HEIGHT */\n      ;\n\n      for (let x = 0; x < width; x++) {\n        const sourceX1 = x / width * 10\n        /* SAMPLED_CHAR_WIDTH */\n        ;\n        const sourceX2 = (x + 1) / width * 10\n        /* SAMPLED_CHAR_WIDTH */\n        ; // 2. Sample all of them, summing them up and weighting them. Similar\n        // to bilinear interpolation.\n\n        let value = 0;\n        let samples = 0;\n\n        for (let sy = sourceY1; sy < sourceY2; sy++) {\n          const sourceRow = sourceOffset + Math.floor(sy) * 3840\n          /* RGBA_SAMPLED_ROW_WIDTH */\n          ;\n          const yBalance = 1 - (sy - Math.floor(sy));\n\n          for (let sx = sourceX1; sx < sourceX2; sx++) {\n            const xBalance = 1 - (sx - Math.floor(sx));\n            const sourceIndex = sourceRow + Math.floor(sx) * 4\n            /* RGBA_CHANNELS_CNT */\n            ;\n            const weight = xBalance * yBalance;\n            samples += weight;\n            value += source[sourceIndex] * source[sourceIndex + 3] / 255 * weight;\n          }\n        }\n\n        const final = value / samples;\n        brightest = Math.max(brightest, final);\n        dest[targetIndex++] = toUint8(final);\n      }\n    }\n\n    return brightest;\n  }\n\n  static _downsample(data, scale) {\n    const pixelsPerCharacter = 2\n    /* BASE_CHAR_HEIGHT */\n    * scale * 1\n    /* BASE_CHAR_WIDTH */\n    * scale;\n    const resultLen = pixelsPerCharacter * 96\n    /* CHAR_COUNT */\n    ;\n    const result = new Uint8ClampedArray(resultLen);\n    let resultOffset = 0;\n    let sourceOffset = 0;\n    let brightest = 0;\n\n    for (let charIndex = 0; charIndex < 96\n    /* CHAR_COUNT */\n    ; charIndex++) {\n      brightest = Math.max(brightest, this._downsampleChar(data, sourceOffset, result, resultOffset, scale));\n      resultOffset += pixelsPerCharacter;\n      sourceOffset += 10\n      /* SAMPLED_CHAR_WIDTH */\n      * 4\n      /* RGBA_CHANNELS_CNT */\n      ;\n    }\n\n    if (brightest > 0) {\n      const adjust = 255 / brightest;\n\n      for (let i = 0; i < resultLen; i++) {\n        result[i] *= adjust;\n      }\n    }\n\n    return result;\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/minimap/minimapCharRendererFactory.js"],"names":["MinimapCharRenderer","allCharCodes","prebakedMiniMaps","toUint8","MinimapCharRendererFactory","create","scale","fontFamily","lastCreated","lastFontFamily","factory","createFromSampleData","createSampleData","data","canvas","document","createElement","ctx","getContext","style","height","width","fillStyle","font","textBaseline","x","code","fillText","String","fromCharCode","getImageData","source","expectedLength","length","Error","charData","_downsample","_downsampleChar","sourceOffset","dest","destOffset","targetIndex","brightest","y","sourceY1","sourceY2","sourceX1","sourceX2","value","samples","sy","sourceRow","Math","floor","yBalance","sx","xBalance","sourceIndex","weight","final","max","pixelsPerCharacter","resultLen","result","Uint8ClampedArray","resultOffset","charIndex","adjust","i"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { MinimapCharRenderer } from './minimapCharRenderer.js';\nimport { allCharCodes } from './minimapCharSheet.js';\nimport { prebakedMiniMaps } from './minimapPreBaked.js';\nimport { toUint8 } from '../../../../base/common/uint.js';\n/**\n * Creates character renderers. It takes a 'scale' that determines how large\n * characters should be drawn. Using this, it draws data into a canvas and\n * then downsamples the characters as necessary for the current display.\n * This makes rendering more efficient, rather than drawing a full (tiny)\n * font, or downsampling in real-time.\n */\nexport class MinimapCharRendererFactory {\n    /**\n     * Creates a new character renderer factory with the given scale.\n     */\n    static create(scale, fontFamily) {\n        // renderers are immutable. By default we'll 'create' a new minimap\n        // character renderer whenever we switch editors, no need to do extra work.\n        if (this.lastCreated && scale === this.lastCreated.scale && fontFamily === this.lastFontFamily) {\n            return this.lastCreated;\n        }\n        let factory;\n        if (prebakedMiniMaps[scale]) {\n            factory = new MinimapCharRenderer(prebakedMiniMaps[scale](), scale);\n        }\n        else {\n            factory = MinimapCharRendererFactory.createFromSampleData(MinimapCharRendererFactory.createSampleData(fontFamily).data, scale);\n        }\n        this.lastFontFamily = fontFamily;\n        this.lastCreated = factory;\n        return factory;\n    }\n    /**\n     * Creates the font sample data, writing to a canvas.\n     */\n    static createSampleData(fontFamily) {\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n        canvas.style.height = `${16 /* SAMPLED_CHAR_HEIGHT */}px`;\n        canvas.height = 16 /* SAMPLED_CHAR_HEIGHT */;\n        canvas.width = 96 /* CHAR_COUNT */ * 10 /* SAMPLED_CHAR_WIDTH */;\n        canvas.style.width = 96 /* CHAR_COUNT */ * 10 /* SAMPLED_CHAR_WIDTH */ + 'px';\n        ctx.fillStyle = '#ffffff';\n        ctx.font = `bold ${16 /* SAMPLED_CHAR_HEIGHT */}px ${fontFamily}`;\n        ctx.textBaseline = 'middle';\n        let x = 0;\n        for (const code of allCharCodes) {\n            ctx.fillText(String.fromCharCode(code), x, 16 /* SAMPLED_CHAR_HEIGHT */ / 2);\n            x += 10 /* SAMPLED_CHAR_WIDTH */;\n        }\n        return ctx.getImageData(0, 0, 96 /* CHAR_COUNT */ * 10 /* SAMPLED_CHAR_WIDTH */, 16 /* SAMPLED_CHAR_HEIGHT */);\n    }\n    /**\n     * Creates a character renderer from the canvas sample data.\n     */\n    static createFromSampleData(source, scale) {\n        const expectedLength = 16 /* SAMPLED_CHAR_HEIGHT */ * 10 /* SAMPLED_CHAR_WIDTH */ * 4 /* RGBA_CHANNELS_CNT */ * 96 /* CHAR_COUNT */;\n        if (source.length !== expectedLength) {\n            throw new Error('Unexpected source in MinimapCharRenderer');\n        }\n        const charData = MinimapCharRendererFactory._downsample(source, scale);\n        return new MinimapCharRenderer(charData, scale);\n    }\n    static _downsampleChar(source, sourceOffset, dest, destOffset, scale) {\n        const width = 1 /* BASE_CHAR_WIDTH */ * scale;\n        const height = 2 /* BASE_CHAR_HEIGHT */ * scale;\n        let targetIndex = destOffset;\n        let brightest = 0;\n        // This is essentially an ad-hoc rescaling algorithm. Standard approaches\n        // like bicubic interpolation are awesome for scaling between image sizes,\n        // but don't work so well when scaling to very small pixel values, we end\n        // up with blurry, indistinct forms.\n        //\n        // The approach taken here is simply mapping each source pixel to the target\n        // pixels, and taking the weighted values for all pixels in each, and then\n        // averaging them out. Finally we apply an intensity boost in _downsample,\n        // since when scaling to the smallest pixel sizes there's more black space\n        // which causes characters to be much less distinct.\n        for (let y = 0; y < height; y++) {\n            // 1. For this destination pixel, get the source pixels we're sampling\n            // from (x1, y1) to the next pixel (x2, y2)\n            const sourceY1 = (y / height) * 16 /* SAMPLED_CHAR_HEIGHT */;\n            const sourceY2 = ((y + 1) / height) * 16 /* SAMPLED_CHAR_HEIGHT */;\n            for (let x = 0; x < width; x++) {\n                const sourceX1 = (x / width) * 10 /* SAMPLED_CHAR_WIDTH */;\n                const sourceX2 = ((x + 1) / width) * 10 /* SAMPLED_CHAR_WIDTH */;\n                // 2. Sample all of them, summing them up and weighting them. Similar\n                // to bilinear interpolation.\n                let value = 0;\n                let samples = 0;\n                for (let sy = sourceY1; sy < sourceY2; sy++) {\n                    const sourceRow = sourceOffset + Math.floor(sy) * 3840 /* RGBA_SAMPLED_ROW_WIDTH */;\n                    const yBalance = 1 - (sy - Math.floor(sy));\n                    for (let sx = sourceX1; sx < sourceX2; sx++) {\n                        const xBalance = 1 - (sx - Math.floor(sx));\n                        const sourceIndex = sourceRow + Math.floor(sx) * 4 /* RGBA_CHANNELS_CNT */;\n                        const weight = xBalance * yBalance;\n                        samples += weight;\n                        value += ((source[sourceIndex] * source[sourceIndex + 3]) / 255) * weight;\n                    }\n                }\n                const final = value / samples;\n                brightest = Math.max(brightest, final);\n                dest[targetIndex++] = toUint8(final);\n            }\n        }\n        return brightest;\n    }\n    static _downsample(data, scale) {\n        const pixelsPerCharacter = 2 /* BASE_CHAR_HEIGHT */ * scale * 1 /* BASE_CHAR_WIDTH */ * scale;\n        const resultLen = pixelsPerCharacter * 96 /* CHAR_COUNT */;\n        const result = new Uint8ClampedArray(resultLen);\n        let resultOffset = 0;\n        let sourceOffset = 0;\n        let brightest = 0;\n        for (let charIndex = 0; charIndex < 96 /* CHAR_COUNT */; charIndex++) {\n            brightest = Math.max(brightest, this._downsampleChar(data, sourceOffset, result, resultOffset, scale));\n            resultOffset += pixelsPerCharacter;\n            sourceOffset += 10 /* SAMPLED_CHAR_WIDTH */ * 4 /* RGBA_CHANNELS_CNT */;\n        }\n        if (brightest > 0) {\n            const adjust = 255 / brightest;\n            for (let i = 0; i < resultLen; i++) {\n                result[i] *= adjust;\n            }\n        }\n        return result;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}