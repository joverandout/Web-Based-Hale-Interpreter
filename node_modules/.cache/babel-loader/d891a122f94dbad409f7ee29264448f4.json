{"ast":null,"code":"/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n// src/basic-languages/m3/m3.ts\nvar conf = {\n  comments: {\n    blockComment: [\"(*\", \"*)\"]\n  },\n  brackets: [[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"]],\n  autoClosingPairs: [{\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: \"(*\",\n    close: \"*)\"\n  }, {\n    open: \"<*\",\n    close: \"*>\"\n  }, {\n    open: \"'\",\n    close: \"'\",\n    notIn: [\"string\", \"comment\"]\n  }, {\n    open: '\"',\n    close: '\"',\n    notIn: [\"string\", \"comment\"]\n  }]\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".m3\",\n  brackets: [{\n    token: \"delimiter.curly\",\n    open: \"{\",\n    close: \"}\"\n  }, {\n    token: \"delimiter.parenthesis\",\n    open: \"(\",\n    close: \")\"\n  }, {\n    token: \"delimiter.square\",\n    open: \"[\",\n    close: \"]\"\n  }],\n  keywords: [\"AND\", \"ANY\", \"ARRAY\", \"AS\", \"BEGIN\", \"BITS\", \"BRANDED\", \"BY\", \"CASE\", \"CONST\", \"DIV\", \"DO\", \"ELSE\", \"ELSIF\", \"END\", \"EVAL\", \"EXCEPT\", \"EXCEPTION\", \"EXIT\", \"EXPORTS\", \"FINALLY\", \"FOR\", \"FROM\", \"GENERIC\", \"IF\", \"IMPORT\", \"IN\", \"INTERFACE\", \"LOCK\", \"LOOP\", \"METHODS\", \"MOD\", \"MODULE\", \"NOT\", \"OBJECT\", \"OF\", \"OR\", \"OVERRIDES\", \"PROCEDURE\", \"RAISE\", \"RAISES\", \"READONLY\", \"RECORD\", \"REF\", \"REPEAT\", \"RETURN\", \"REVEAL\", \"SET\", \"THEN\", \"TO\", \"TRY\", \"TYPE\", \"TYPECASE\", \"UNSAFE\", \"UNTIL\", \"UNTRACED\", \"VALUE\", \"VAR\", \"WHILE\", \"WITH\"],\n  reservedConstNames: [\"ABS\", \"ADR\", \"ADRSIZE\", \"BITSIZE\", \"BYTESIZE\", \"CEILING\", \"DEC\", \"DISPOSE\", \"FALSE\", \"FIRST\", \"FLOAT\", \"FLOOR\", \"INC\", \"ISTYPE\", \"LAST\", \"LOOPHOLE\", \"MAX\", \"MIN\", \"NARROW\", \"NEW\", \"NIL\", \"NUMBER\", \"ORD\", \"ROUND\", \"SUBARRAY\", \"TRUE\", \"TRUNC\", \"TYPECODE\", \"VAL\"],\n  reservedTypeNames: [\"ADDRESS\", \"ANY\", \"BOOLEAN\", \"CARDINAL\", \"CHAR\", \"EXTENDED\", \"INTEGER\", \"LONGCARD\", \"LONGINT\", \"LONGREAL\", \"MUTEX\", \"NULL\", \"REAL\", \"REFANY\", \"ROOT\", \"TEXT\"],\n  operators: [\"+\", \"-\", \"*\", \"/\", \"&\", \"^\", \".\"],\n  relations: [\"=\", \"#\", \"<\", \"<=\", \">\", \">=\", \"<:\", \":\"],\n  delimiters: [\"|\", \"..\", \"=>\", \",\", \";\", \":=\"],\n  symbols: /[>=<#.,:;+\\-*/&^]+/,\n  escapes: /\\\\(?:[\\\\fnrt\"']|[0-7]{3})/,\n  tokenizer: {\n    root: [[/_\\w*/, \"invalid\"], [/[a-zA-Z][a-zA-Z0-9_]*/, {\n      cases: {\n        \"@keywords\": {\n          token: \"keyword.$0\"\n        },\n        \"@reservedConstNames\": {\n          token: \"constant.reserved.$0\"\n        },\n        \"@reservedTypeNames\": {\n          token: \"type.reserved.$0\"\n        },\n        \"@default\": \"identifier\"\n      }\n    }], {\n      include: \"@whitespace\"\n    }, [/[{}()\\[\\]]/, \"@brackets\"], [/[0-9]+\\.[0-9]+(?:[DdEeXx][\\+\\-]?[0-9]+)?/, \"number.float\"], [/[0-9]+(?:\\_[0-9a-fA-F]+)?L?/, \"number\"], [/@symbols/, {\n      cases: {\n        \"@operators\": \"operators\",\n        \"@relations\": \"operators\",\n        \"@delimiters\": \"delimiter\",\n        \"@default\": \"invalid\"\n      }\n    }], [/'[^\\\\']'/, \"string.char\"], [/(')(@escapes)(')/, [\"string.char\", \"string.escape\", \"string.char\"]], [/'/, \"invalid\"], [/\"([^\"\\\\]|\\\\.)*$/, \"invalid\"], [/\"/, \"string.text\", \"@text\"]],\n    text: [[/[^\\\\\"]+/, \"string.text\"], [/@escapes/, \"string.escape\"], [/\\\\./, \"invalid\"], [/\"/, \"string.text\", \"@pop\"]],\n    comment: [[/\\(\\*/, \"comment\", \"@push\"], [/\\*\\)/, \"comment\", \"@pop\"], [/./, \"comment\"]],\n    pragma: [[/<\\*/, \"keyword.pragma\", \"@push\"], [/\\*>/, \"keyword.pragma\", \"@pop\"], [/./, \"keyword.pragma\"]],\n    whitespace: [[/[ \\t\\r\\n]+/, \"white\"], [/\\(\\*/, \"comment\", \"@comment\"], [/<\\*/, \"keyword.pragma\", \"@pragma\"]]\n  }\n};\nexport { conf, language };","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/basic-languages/m3/m3.js"],"names":["conf","comments","blockComment","brackets","autoClosingPairs","open","close","notIn","language","defaultToken","tokenPostfix","token","keywords","reservedConstNames","reservedTypeNames","operators","relations","delimiters","symbols","escapes","tokenizer","root","cases","include","text","comment","pragma","whitespace"],"mappings":"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","sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/m3/m3.ts\nvar conf = {\n  comments: {\n    blockComment: [\"(*\", \"*)\"]\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"]\n  ],\n  autoClosingPairs: [\n    { open: \"[\", close: \"]\" },\n    { open: \"{\", close: \"}\" },\n    { open: \"(\", close: \")\" },\n    { open: \"(*\", close: \"*)\" },\n    { open: \"<*\", close: \"*>\" },\n    { open: \"'\", close: \"'\", notIn: [\"string\", \"comment\"] },\n    { open: '\"', close: '\"', notIn: [\"string\", \"comment\"] }\n  ]\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".m3\",\n  brackets: [\n    { token: \"delimiter.curly\", open: \"{\", close: \"}\" },\n    { token: \"delimiter.parenthesis\", open: \"(\", close: \")\" },\n    { token: \"delimiter.square\", open: \"[\", close: \"]\" }\n  ],\n  keywords: [\n    \"AND\",\n    \"ANY\",\n    \"ARRAY\",\n    \"AS\",\n    \"BEGIN\",\n    \"BITS\",\n    \"BRANDED\",\n    \"BY\",\n    \"CASE\",\n    \"CONST\",\n    \"DIV\",\n    \"DO\",\n    \"ELSE\",\n    \"ELSIF\",\n    \"END\",\n    \"EVAL\",\n    \"EXCEPT\",\n    \"EXCEPTION\",\n    \"EXIT\",\n    \"EXPORTS\",\n    \"FINALLY\",\n    \"FOR\",\n    \"FROM\",\n    \"GENERIC\",\n    \"IF\",\n    \"IMPORT\",\n    \"IN\",\n    \"INTERFACE\",\n    \"LOCK\",\n    \"LOOP\",\n    \"METHODS\",\n    \"MOD\",\n    \"MODULE\",\n    \"NOT\",\n    \"OBJECT\",\n    \"OF\",\n    \"OR\",\n    \"OVERRIDES\",\n    \"PROCEDURE\",\n    \"RAISE\",\n    \"RAISES\",\n    \"READONLY\",\n    \"RECORD\",\n    \"REF\",\n    \"REPEAT\",\n    \"RETURN\",\n    \"REVEAL\",\n    \"SET\",\n    \"THEN\",\n    \"TO\",\n    \"TRY\",\n    \"TYPE\",\n    \"TYPECASE\",\n    \"UNSAFE\",\n    \"UNTIL\",\n    \"UNTRACED\",\n    \"VALUE\",\n    \"VAR\",\n    \"WHILE\",\n    \"WITH\"\n  ],\n  reservedConstNames: [\n    \"ABS\",\n    \"ADR\",\n    \"ADRSIZE\",\n    \"BITSIZE\",\n    \"BYTESIZE\",\n    \"CEILING\",\n    \"DEC\",\n    \"DISPOSE\",\n    \"FALSE\",\n    \"FIRST\",\n    \"FLOAT\",\n    \"FLOOR\",\n    \"INC\",\n    \"ISTYPE\",\n    \"LAST\",\n    \"LOOPHOLE\",\n    \"MAX\",\n    \"MIN\",\n    \"NARROW\",\n    \"NEW\",\n    \"NIL\",\n    \"NUMBER\",\n    \"ORD\",\n    \"ROUND\",\n    \"SUBARRAY\",\n    \"TRUE\",\n    \"TRUNC\",\n    \"TYPECODE\",\n    \"VAL\"\n  ],\n  reservedTypeNames: [\n    \"ADDRESS\",\n    \"ANY\",\n    \"BOOLEAN\",\n    \"CARDINAL\",\n    \"CHAR\",\n    \"EXTENDED\",\n    \"INTEGER\",\n    \"LONGCARD\",\n    \"LONGINT\",\n    \"LONGREAL\",\n    \"MUTEX\",\n    \"NULL\",\n    \"REAL\",\n    \"REFANY\",\n    \"ROOT\",\n    \"TEXT\"\n  ],\n  operators: [\"+\", \"-\", \"*\", \"/\", \"&\", \"^\", \".\"],\n  relations: [\"=\", \"#\", \"<\", \"<=\", \">\", \">=\", \"<:\", \":\"],\n  delimiters: [\"|\", \"..\", \"=>\", \",\", \";\", \":=\"],\n  symbols: /[>=<#.,:;+\\-*/&^]+/,\n  escapes: /\\\\(?:[\\\\fnrt\"']|[0-7]{3})/,\n  tokenizer: {\n    root: [\n      [/_\\w*/, \"invalid\"],\n      [\n        /[a-zA-Z][a-zA-Z0-9_]*/,\n        {\n          cases: {\n            \"@keywords\": { token: \"keyword.$0\" },\n            \"@reservedConstNames\": { token: \"constant.reserved.$0\" },\n            \"@reservedTypeNames\": { token: \"type.reserved.$0\" },\n            \"@default\": \"identifier\"\n          }\n        }\n      ],\n      { include: \"@whitespace\" },\n      [/[{}()\\[\\]]/, \"@brackets\"],\n      [/[0-9]+\\.[0-9]+(?:[DdEeXx][\\+\\-]?[0-9]+)?/, \"number.float\"],\n      [/[0-9]+(?:\\_[0-9a-fA-F]+)?L?/, \"number\"],\n      [\n        /@symbols/,\n        {\n          cases: {\n            \"@operators\": \"operators\",\n            \"@relations\": \"operators\",\n            \"@delimiters\": \"delimiter\",\n            \"@default\": \"invalid\"\n          }\n        }\n      ],\n      [/'[^\\\\']'/, \"string.char\"],\n      [/(')(@escapes)(')/, [\"string.char\", \"string.escape\", \"string.char\"]],\n      [/'/, \"invalid\"],\n      [/\"([^\"\\\\]|\\\\.)*$/, \"invalid\"],\n      [/\"/, \"string.text\", \"@text\"]\n    ],\n    text: [\n      [/[^\\\\\"]+/, \"string.text\"],\n      [/@escapes/, \"string.escape\"],\n      [/\\\\./, \"invalid\"],\n      [/\"/, \"string.text\", \"@pop\"]\n    ],\n    comment: [\n      [/\\(\\*/, \"comment\", \"@push\"],\n      [/\\*\\)/, \"comment\", \"@pop\"],\n      [/./, \"comment\"]\n    ],\n    pragma: [\n      [/<\\*/, \"keyword.pragma\", \"@push\"],\n      [/\\*>/, \"keyword.pragma\", \"@pop\"],\n      [/./, \"keyword.pragma\"]\n    ],\n    whitespace: [\n      [/[ \\t\\r\\n]+/, \"white\"],\n      [/\\(\\*/, \"comment\", \"@comment\"],\n      [/<\\*/, \"keyword.pragma\", \"@pragma\"]\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"]},"metadata":{},"sourceType":"module"}