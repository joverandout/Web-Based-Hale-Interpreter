{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar _a;\n\nimport { globals } from '../common/platform.js';\nimport { logOnceWebWorkerWarning } from '../common/worker/simpleWorker.js';\nconst ttPolicy = (_a = window.trustedTypes) === null || _a === void 0 ? void 0 : _a.createPolicy('defaultWorkerFactory', {\n  createScriptURL: value => value\n});\n\nfunction getWorker(label) {\n  // Option for hosts to overwrite the worker script (used in the standalone editor)\n  if (globals.MonacoEnvironment) {\n    if (typeof globals.MonacoEnvironment.getWorker === 'function') {\n      return globals.MonacoEnvironment.getWorker('workerMain.js', label);\n    }\n\n    if (typeof globals.MonacoEnvironment.getWorkerUrl === 'function') {\n      const workerUrl = globals.MonacoEnvironment.getWorkerUrl('workerMain.js', label);\n      return new Worker(ttPolicy ? ttPolicy.createScriptURL(workerUrl) : workerUrl, {\n        name: label\n      });\n    }\n  } // ESM-comment-begin\n  // \tif (typeof require === 'function') {\n  // \t\t// check if the JS lives on a different origin\n  // \t\tconst workerMain = require.toUrl('vs/base/worker/workerMain.js'); // explicitly using require.toUrl(), see https://github.com/microsoft/vscode/issues/107440#issuecomment-698982321\n  // \t\tconst workerUrl = getWorkerBootstrapUrl(workerMain, label);\n  // \t\treturn new Worker(ttPolicy ? ttPolicy.createScriptURL(workerUrl) as unknown as string : workerUrl, { name: label });\n  // \t}\n  // ESM-comment-end\n\n\n  throw new Error(`You must define a function MonacoEnvironment.getWorkerUrl or MonacoEnvironment.getWorker`);\n} // ESM-comment-begin\n// export function getWorkerBootstrapUrl(scriptPath: string, label: string): string {\n// \tif (/^((http:)|(https:)|(file:))/.test(scriptPath) && scriptPath.substring(0, self.origin.length) !== self.origin) {\n// \t\t// this is the cross-origin case\n// \t\t// i.e. the webpage is running at a different origin than where the scripts are loaded from\n// \t\tconst myPath = 'vs/base/worker/defaultWorkerFactory.js';\n// \t\tconst workerBaseUrl = require.toUrl(myPath).slice(0, -myPath.length); // explicitly using require.toUrl(), see https://github.com/microsoft/vscode/issues/107440#issuecomment-698982321\n// \t\tconst js = `/*${label}*/self.MonacoEnvironment={baseUrl: '${workerBaseUrl}'};const ttPolicy = self.trustedTypes?.createPolicy('defaultWorkerFactory', { createScriptURL: value => value });importScripts(ttPolicy?.createScriptURL('${scriptPath}') ?? '${scriptPath}');/*${label}*/`;\n// \t\tconst blob = new Blob([js], { type: 'application/javascript' });\n// \t\treturn URL.createObjectURL(blob);\n// \t}\n// \treturn scriptPath + '#' + label;\n// }\n// ESM-comment-end\n\n\nfunction isPromiseLike(obj) {\n  if (typeof obj.then === 'function') {\n    return true;\n  }\n\n  return false;\n}\n/**\n * A worker that uses HTML5 web workers so that is has\n * its own global scope and its own thread.\n */\n\n\nclass WebWorker {\n  constructor(moduleId, id, label, onMessageCallback, onErrorCallback) {\n    this.id = id;\n    const workerOrPromise = getWorker(label);\n\n    if (isPromiseLike(workerOrPromise)) {\n      this.worker = workerOrPromise;\n    } else {\n      this.worker = Promise.resolve(workerOrPromise);\n    }\n\n    this.postMessage(moduleId, []);\n    this.worker.then(w => {\n      w.onmessage = function (ev) {\n        onMessageCallback(ev.data);\n      };\n\n      w.onmessageerror = onErrorCallback;\n\n      if (typeof w.addEventListener === 'function') {\n        w.addEventListener('error', onErrorCallback);\n      }\n    });\n  }\n\n  getId() {\n    return this.id;\n  }\n\n  postMessage(message, transfer) {\n    if (this.worker) {\n      this.worker.then(w => w.postMessage(message, transfer));\n    }\n  }\n\n  dispose() {\n    if (this.worker) {\n      this.worker.then(w => w.terminate());\n    }\n\n    this.worker = null;\n  }\n\n}\n\nexport class DefaultWorkerFactory {\n  constructor(label) {\n    this._label = label;\n    this._webWorkerFailedBeforeError = false;\n  }\n\n  create(moduleId, onMessageCallback, onErrorCallback) {\n    let workerId = ++DefaultWorkerFactory.LAST_WORKER_ID;\n\n    if (this._webWorkerFailedBeforeError) {\n      throw this._webWorkerFailedBeforeError;\n    }\n\n    return new WebWorker(moduleId, workerId, this._label || 'anonymous' + workerId, onMessageCallback, err => {\n      logOnceWebWorkerWarning(err);\n      this._webWorkerFailedBeforeError = err;\n      onErrorCallback(err);\n    });\n  }\n\n}\nDefaultWorkerFactory.LAST_WORKER_ID = 0;","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/base/browser/defaultWorkerFactory.js"],"names":["_a","globals","logOnceWebWorkerWarning","ttPolicy","window","trustedTypes","createPolicy","createScriptURL","value","getWorker","label","MonacoEnvironment","getWorkerUrl","workerUrl","Worker","name","Error","isPromiseLike","obj","then","WebWorker","constructor","moduleId","id","onMessageCallback","onErrorCallback","workerOrPromise","worker","Promise","resolve","postMessage","w","onmessage","ev","data","onmessageerror","addEventListener","getId","message","transfer","dispose","terminate","DefaultWorkerFactory","_label","_webWorkerFailedBeforeError","create","workerId","LAST_WORKER_ID","err"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar _a;\nimport { globals } from '../common/platform.js';\nimport { logOnceWebWorkerWarning } from '../common/worker/simpleWorker.js';\nconst ttPolicy = (_a = window.trustedTypes) === null || _a === void 0 ? void 0 : _a.createPolicy('defaultWorkerFactory', { createScriptURL: value => value });\nfunction getWorker(label) {\n    // Option for hosts to overwrite the worker script (used in the standalone editor)\n    if (globals.MonacoEnvironment) {\n        if (typeof globals.MonacoEnvironment.getWorker === 'function') {\n            return globals.MonacoEnvironment.getWorker('workerMain.js', label);\n        }\n        if (typeof globals.MonacoEnvironment.getWorkerUrl === 'function') {\n            const workerUrl = globals.MonacoEnvironment.getWorkerUrl('workerMain.js', label);\n            return new Worker(ttPolicy ? ttPolicy.createScriptURL(workerUrl) : workerUrl, { name: label });\n        }\n    }\n    // ESM-comment-begin\n    // \tif (typeof require === 'function') {\n    // \t\t// check if the JS lives on a different origin\n    // \t\tconst workerMain = require.toUrl('vs/base/worker/workerMain.js'); // explicitly using require.toUrl(), see https://github.com/microsoft/vscode/issues/107440#issuecomment-698982321\n    // \t\tconst workerUrl = getWorkerBootstrapUrl(workerMain, label);\n    // \t\treturn new Worker(ttPolicy ? ttPolicy.createScriptURL(workerUrl) as unknown as string : workerUrl, { name: label });\n    // \t}\n    // ESM-comment-end\n    throw new Error(`You must define a function MonacoEnvironment.getWorkerUrl or MonacoEnvironment.getWorker`);\n}\n// ESM-comment-begin\n// export function getWorkerBootstrapUrl(scriptPath: string, label: string): string {\n// \tif (/^((http:)|(https:)|(file:))/.test(scriptPath) && scriptPath.substring(0, self.origin.length) !== self.origin) {\n// \t\t// this is the cross-origin case\n// \t\t// i.e. the webpage is running at a different origin than where the scripts are loaded from\n// \t\tconst myPath = 'vs/base/worker/defaultWorkerFactory.js';\n// \t\tconst workerBaseUrl = require.toUrl(myPath).slice(0, -myPath.length); // explicitly using require.toUrl(), see https://github.com/microsoft/vscode/issues/107440#issuecomment-698982321\n// \t\tconst js = `/*${label}*/self.MonacoEnvironment={baseUrl: '${workerBaseUrl}'};const ttPolicy = self.trustedTypes?.createPolicy('defaultWorkerFactory', { createScriptURL: value => value });importScripts(ttPolicy?.createScriptURL('${scriptPath}') ?? '${scriptPath}');/*${label}*/`;\n// \t\tconst blob = new Blob([js], { type: 'application/javascript' });\n// \t\treturn URL.createObjectURL(blob);\n// \t}\n// \treturn scriptPath + '#' + label;\n// }\n// ESM-comment-end\nfunction isPromiseLike(obj) {\n    if (typeof obj.then === 'function') {\n        return true;\n    }\n    return false;\n}\n/**\n * A worker that uses HTML5 web workers so that is has\n * its own global scope and its own thread.\n */\nclass WebWorker {\n    constructor(moduleId, id, label, onMessageCallback, onErrorCallback) {\n        this.id = id;\n        const workerOrPromise = getWorker(label);\n        if (isPromiseLike(workerOrPromise)) {\n            this.worker = workerOrPromise;\n        }\n        else {\n            this.worker = Promise.resolve(workerOrPromise);\n        }\n        this.postMessage(moduleId, []);\n        this.worker.then((w) => {\n            w.onmessage = function (ev) {\n                onMessageCallback(ev.data);\n            };\n            w.onmessageerror = onErrorCallback;\n            if (typeof w.addEventListener === 'function') {\n                w.addEventListener('error', onErrorCallback);\n            }\n        });\n    }\n    getId() {\n        return this.id;\n    }\n    postMessage(message, transfer) {\n        if (this.worker) {\n            this.worker.then(w => w.postMessage(message, transfer));\n        }\n    }\n    dispose() {\n        if (this.worker) {\n            this.worker.then(w => w.terminate());\n        }\n        this.worker = null;\n    }\n}\nexport class DefaultWorkerFactory {\n    constructor(label) {\n        this._label = label;\n        this._webWorkerFailedBeforeError = false;\n    }\n    create(moduleId, onMessageCallback, onErrorCallback) {\n        let workerId = (++DefaultWorkerFactory.LAST_WORKER_ID);\n        if (this._webWorkerFailedBeforeError) {\n            throw this._webWorkerFailedBeforeError;\n        }\n        return new WebWorker(moduleId, workerId, this._label || 'anonymous' + workerId, onMessageCallback, (err) => {\n            logOnceWebWorkerWarning(err);\n            this._webWorkerFailedBeforeError = err;\n            onErrorCallback(err);\n        });\n    }\n}\nDefaultWorkerFactory.LAST_WORKER_ID = 0;\n"]},"metadata":{},"sourceType":"module"}