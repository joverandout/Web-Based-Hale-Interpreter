{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nexport class ViewModelEventDispatcher extends Disposable {\n  constructor() {\n    super();\n    this._onEvent = this._register(new Emitter());\n    this.onEvent = this._onEvent.event;\n    this._eventHandlers = [];\n    this._viewEventQueue = null;\n    this._isConsumingViewEventQueue = false;\n    this._collector = null;\n    this._collectorCnt = 0;\n    this._outgoingEvents = [];\n  }\n\n  emitOutgoingEvent(e) {\n    this._addOutgoingEvent(e);\n\n    this._emitOutgoingEvents();\n  }\n\n  _addOutgoingEvent(e) {\n    for (let i = 0, len = this._outgoingEvents.length; i < len; i++) {\n      if (this._outgoingEvents[i].kind === e.kind) {\n        this._outgoingEvents[i] = this._outgoingEvents[i].merge(e);\n        return;\n      }\n    } // not merged\n\n\n    this._outgoingEvents.push(e);\n  }\n\n  _emitOutgoingEvents() {\n    while (this._outgoingEvents.length > 0) {\n      if (this._collector || this._isConsumingViewEventQueue) {\n        // right now collecting or emitting view events, so let's postpone emitting\n        return;\n      }\n\n      const event = this._outgoingEvents.shift();\n\n      if (event.isNoOp()) {\n        continue;\n      }\n\n      this._onEvent.fire(event);\n    }\n  }\n\n  addViewEventHandler(eventHandler) {\n    for (let i = 0, len = this._eventHandlers.length; i < len; i++) {\n      if (this._eventHandlers[i] === eventHandler) {\n        console.warn('Detected duplicate listener in ViewEventDispatcher', eventHandler);\n      }\n    }\n\n    this._eventHandlers.push(eventHandler);\n  }\n\n  removeViewEventHandler(eventHandler) {\n    for (let i = 0; i < this._eventHandlers.length; i++) {\n      if (this._eventHandlers[i] === eventHandler) {\n        this._eventHandlers.splice(i, 1);\n\n        break;\n      }\n    }\n  }\n\n  beginEmitViewEvents() {\n    this._collectorCnt++;\n\n    if (this._collectorCnt === 1) {\n      this._collector = new ViewModelEventsCollector();\n    }\n\n    return this._collector;\n  }\n\n  endEmitViewEvents() {\n    this._collectorCnt--;\n\n    if (this._collectorCnt === 0) {\n      const outgoingEvents = this._collector.outgoingEvents;\n      const viewEvents = this._collector.viewEvents;\n      this._collector = null;\n\n      for (const outgoingEvent of outgoingEvents) {\n        this._addOutgoingEvent(outgoingEvent);\n      }\n\n      if (viewEvents.length > 0) {\n        this._emitMany(viewEvents);\n      }\n    }\n\n    this._emitOutgoingEvents();\n  }\n\n  emitSingleViewEvent(event) {\n    try {\n      const eventsCollector = this.beginEmitViewEvents();\n      eventsCollector.emitViewEvent(event);\n    } finally {\n      this.endEmitViewEvents();\n    }\n  }\n\n  _emitMany(events) {\n    if (this._viewEventQueue) {\n      this._viewEventQueue = this._viewEventQueue.concat(events);\n    } else {\n      this._viewEventQueue = events;\n    }\n\n    if (!this._isConsumingViewEventQueue) {\n      this._consumeViewEventQueue();\n    }\n  }\n\n  _consumeViewEventQueue() {\n    try {\n      this._isConsumingViewEventQueue = true;\n\n      this._doConsumeQueue();\n    } finally {\n      this._isConsumingViewEventQueue = false;\n    }\n  }\n\n  _doConsumeQueue() {\n    while (this._viewEventQueue) {\n      // Empty event queue, as events might come in while sending these off\n      const events = this._viewEventQueue;\n      this._viewEventQueue = null; // Use a clone of the event handlers list, as they might remove themselves\n\n      const eventHandlers = this._eventHandlers.slice(0);\n\n      for (const eventHandler of eventHandlers) {\n        eventHandler.handleEvents(events);\n      }\n    }\n  }\n\n}\nexport class ViewModelEventsCollector {\n  constructor() {\n    this.viewEvents = [];\n    this.outgoingEvents = [];\n  }\n\n  emitViewEvent(event) {\n    this.viewEvents.push(event);\n  }\n\n  emitOutgoingEvent(e) {\n    this.outgoingEvents.push(e);\n  }\n\n}\nexport class ContentSizeChangedEvent {\n  constructor(oldContentWidth, oldContentHeight, contentWidth, contentHeight) {\n    this.kind = 0\n    /* ContentSizeChanged */\n    ;\n    this._oldContentWidth = oldContentWidth;\n    this._oldContentHeight = oldContentHeight;\n    this.contentWidth = contentWidth;\n    this.contentHeight = contentHeight;\n    this.contentWidthChanged = this._oldContentWidth !== this.contentWidth;\n    this.contentHeightChanged = this._oldContentHeight !== this.contentHeight;\n  }\n\n  isNoOp() {\n    return !this.contentWidthChanged && !this.contentHeightChanged;\n  }\n\n  merge(other) {\n    if (other.kind !== 0\n    /* ContentSizeChanged */\n    ) {\n      return this;\n    }\n\n    return new ContentSizeChangedEvent(this._oldContentWidth, this._oldContentHeight, other.contentWidth, other.contentHeight);\n  }\n\n}\nexport class FocusChangedEvent {\n  constructor(oldHasFocus, hasFocus) {\n    this.kind = 1\n    /* FocusChanged */\n    ;\n    this.oldHasFocus = oldHasFocus;\n    this.hasFocus = hasFocus;\n  }\n\n  isNoOp() {\n    return this.oldHasFocus === this.hasFocus;\n  }\n\n  merge(other) {\n    if (other.kind !== 1\n    /* FocusChanged */\n    ) {\n      return this;\n    }\n\n    return new FocusChangedEvent(this.oldHasFocus, other.hasFocus);\n  }\n\n}\nexport class ScrollChangedEvent {\n  constructor(oldScrollWidth, oldScrollLeft, oldScrollHeight, oldScrollTop, scrollWidth, scrollLeft, scrollHeight, scrollTop) {\n    this.kind = 2\n    /* ScrollChanged */\n    ;\n    this._oldScrollWidth = oldScrollWidth;\n    this._oldScrollLeft = oldScrollLeft;\n    this._oldScrollHeight = oldScrollHeight;\n    this._oldScrollTop = oldScrollTop;\n    this.scrollWidth = scrollWidth;\n    this.scrollLeft = scrollLeft;\n    this.scrollHeight = scrollHeight;\n    this.scrollTop = scrollTop;\n    this.scrollWidthChanged = this._oldScrollWidth !== this.scrollWidth;\n    this.scrollLeftChanged = this._oldScrollLeft !== this.scrollLeft;\n    this.scrollHeightChanged = this._oldScrollHeight !== this.scrollHeight;\n    this.scrollTopChanged = this._oldScrollTop !== this.scrollTop;\n  }\n\n  isNoOp() {\n    return !this.scrollWidthChanged && !this.scrollLeftChanged && !this.scrollHeightChanged && !this.scrollTopChanged;\n  }\n\n  merge(other) {\n    if (other.kind !== 2\n    /* ScrollChanged */\n    ) {\n      return this;\n    }\n\n    return new ScrollChangedEvent(this._oldScrollWidth, this._oldScrollLeft, this._oldScrollHeight, this._oldScrollTop, other.scrollWidth, other.scrollLeft, other.scrollHeight, other.scrollTop);\n  }\n\n}\nexport class ViewZonesChangedEvent {\n  constructor() {\n    this.kind = 3\n    /* ViewZonesChanged */\n    ;\n  }\n\n  isNoOp() {\n    return false;\n  }\n\n  merge(other) {\n    return this;\n  }\n\n}\nexport class HiddenAreasChangedEvent {\n  constructor() {\n    this.kind = 4\n    /* HiddenAreasChanged */\n    ;\n  }\n\n  isNoOp() {\n    return false;\n  }\n\n  merge(other) {\n    return this;\n  }\n\n}\nexport class CursorStateChangedEvent {\n  constructor(oldSelections, selections, oldModelVersionId, modelVersionId, source, reason, reachedMaxCursorCount) {\n    this.kind = 6\n    /* CursorStateChanged */\n    ;\n    this.oldSelections = oldSelections;\n    this.selections = selections;\n    this.oldModelVersionId = oldModelVersionId;\n    this.modelVersionId = modelVersionId;\n    this.source = source;\n    this.reason = reason;\n    this.reachedMaxCursorCount = reachedMaxCursorCount;\n  }\n\n  static _selectionsAreEqual(a, b) {\n    if (!a && !b) {\n      return true;\n    }\n\n    if (!a || !b) {\n      return false;\n    }\n\n    const aLen = a.length;\n    const bLen = b.length;\n\n    if (aLen !== bLen) {\n      return false;\n    }\n\n    for (let i = 0; i < aLen; i++) {\n      if (!a[i].equalsSelection(b[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  isNoOp() {\n    return CursorStateChangedEvent._selectionsAreEqual(this.oldSelections, this.selections) && this.oldModelVersionId === this.modelVersionId;\n  }\n\n  merge(other) {\n    if (other.kind !== 6\n    /* CursorStateChanged */\n    ) {\n      return this;\n    }\n\n    return new CursorStateChangedEvent(this.oldSelections, other.selections, this.oldModelVersionId, other.modelVersionId, other.source, other.reason, this.reachedMaxCursorCount || other.reachedMaxCursorCount);\n  }\n\n}\nexport class ReadOnlyEditAttemptEvent {\n  constructor() {\n    this.kind = 5\n    /* ReadOnlyEditAttempt */\n    ;\n  }\n\n  isNoOp() {\n    return false;\n  }\n\n  merge(other) {\n    return this;\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/common/viewModel/viewModelEventDispatcher.js"],"names":["Emitter","Disposable","ViewModelEventDispatcher","constructor","_onEvent","_register","onEvent","event","_eventHandlers","_viewEventQueue","_isConsumingViewEventQueue","_collector","_collectorCnt","_outgoingEvents","emitOutgoingEvent","e","_addOutgoingEvent","_emitOutgoingEvents","i","len","length","kind","merge","push","shift","isNoOp","fire","addViewEventHandler","eventHandler","console","warn","removeViewEventHandler","splice","beginEmitViewEvents","ViewModelEventsCollector","endEmitViewEvents","outgoingEvents","viewEvents","outgoingEvent","_emitMany","emitSingleViewEvent","eventsCollector","emitViewEvent","events","concat","_consumeViewEventQueue","_doConsumeQueue","eventHandlers","slice","handleEvents","ContentSizeChangedEvent","oldContentWidth","oldContentHeight","contentWidth","contentHeight","_oldContentWidth","_oldContentHeight","contentWidthChanged","contentHeightChanged","other","FocusChangedEvent","oldHasFocus","hasFocus","ScrollChangedEvent","oldScrollWidth","oldScrollLeft","oldScrollHeight","oldScrollTop","scrollWidth","scrollLeft","scrollHeight","scrollTop","_oldScrollWidth","_oldScrollLeft","_oldScrollHeight","_oldScrollTop","scrollWidthChanged","scrollLeftChanged","scrollHeightChanged","scrollTopChanged","ViewZonesChangedEvent","HiddenAreasChangedEvent","CursorStateChangedEvent","oldSelections","selections","oldModelVersionId","modelVersionId","source","reason","reachedMaxCursorCount","_selectionsAreEqual","a","b","aLen","bLen","equalsSelection","ReadOnlyEditAttemptEvent"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nexport class ViewModelEventDispatcher extends Disposable {\n    constructor() {\n        super();\n        this._onEvent = this._register(new Emitter());\n        this.onEvent = this._onEvent.event;\n        this._eventHandlers = [];\n        this._viewEventQueue = null;\n        this._isConsumingViewEventQueue = false;\n        this._collector = null;\n        this._collectorCnt = 0;\n        this._outgoingEvents = [];\n    }\n    emitOutgoingEvent(e) {\n        this._addOutgoingEvent(e);\n        this._emitOutgoingEvents();\n    }\n    _addOutgoingEvent(e) {\n        for (let i = 0, len = this._outgoingEvents.length; i < len; i++) {\n            if (this._outgoingEvents[i].kind === e.kind) {\n                this._outgoingEvents[i] = this._outgoingEvents[i].merge(e);\n                return;\n            }\n        }\n        // not merged\n        this._outgoingEvents.push(e);\n    }\n    _emitOutgoingEvents() {\n        while (this._outgoingEvents.length > 0) {\n            if (this._collector || this._isConsumingViewEventQueue) {\n                // right now collecting or emitting view events, so let's postpone emitting\n                return;\n            }\n            const event = this._outgoingEvents.shift();\n            if (event.isNoOp()) {\n                continue;\n            }\n            this._onEvent.fire(event);\n        }\n    }\n    addViewEventHandler(eventHandler) {\n        for (let i = 0, len = this._eventHandlers.length; i < len; i++) {\n            if (this._eventHandlers[i] === eventHandler) {\n                console.warn('Detected duplicate listener in ViewEventDispatcher', eventHandler);\n            }\n        }\n        this._eventHandlers.push(eventHandler);\n    }\n    removeViewEventHandler(eventHandler) {\n        for (let i = 0; i < this._eventHandlers.length; i++) {\n            if (this._eventHandlers[i] === eventHandler) {\n                this._eventHandlers.splice(i, 1);\n                break;\n            }\n        }\n    }\n    beginEmitViewEvents() {\n        this._collectorCnt++;\n        if (this._collectorCnt === 1) {\n            this._collector = new ViewModelEventsCollector();\n        }\n        return this._collector;\n    }\n    endEmitViewEvents() {\n        this._collectorCnt--;\n        if (this._collectorCnt === 0) {\n            const outgoingEvents = this._collector.outgoingEvents;\n            const viewEvents = this._collector.viewEvents;\n            this._collector = null;\n            for (const outgoingEvent of outgoingEvents) {\n                this._addOutgoingEvent(outgoingEvent);\n            }\n            if (viewEvents.length > 0) {\n                this._emitMany(viewEvents);\n            }\n        }\n        this._emitOutgoingEvents();\n    }\n    emitSingleViewEvent(event) {\n        try {\n            const eventsCollector = this.beginEmitViewEvents();\n            eventsCollector.emitViewEvent(event);\n        }\n        finally {\n            this.endEmitViewEvents();\n        }\n    }\n    _emitMany(events) {\n        if (this._viewEventQueue) {\n            this._viewEventQueue = this._viewEventQueue.concat(events);\n        }\n        else {\n            this._viewEventQueue = events;\n        }\n        if (!this._isConsumingViewEventQueue) {\n            this._consumeViewEventQueue();\n        }\n    }\n    _consumeViewEventQueue() {\n        try {\n            this._isConsumingViewEventQueue = true;\n            this._doConsumeQueue();\n        }\n        finally {\n            this._isConsumingViewEventQueue = false;\n        }\n    }\n    _doConsumeQueue() {\n        while (this._viewEventQueue) {\n            // Empty event queue, as events might come in while sending these off\n            const events = this._viewEventQueue;\n            this._viewEventQueue = null;\n            // Use a clone of the event handlers list, as they might remove themselves\n            const eventHandlers = this._eventHandlers.slice(0);\n            for (const eventHandler of eventHandlers) {\n                eventHandler.handleEvents(events);\n            }\n        }\n    }\n}\nexport class ViewModelEventsCollector {\n    constructor() {\n        this.viewEvents = [];\n        this.outgoingEvents = [];\n    }\n    emitViewEvent(event) {\n        this.viewEvents.push(event);\n    }\n    emitOutgoingEvent(e) {\n        this.outgoingEvents.push(e);\n    }\n}\nexport class ContentSizeChangedEvent {\n    constructor(oldContentWidth, oldContentHeight, contentWidth, contentHeight) {\n        this.kind = 0 /* ContentSizeChanged */;\n        this._oldContentWidth = oldContentWidth;\n        this._oldContentHeight = oldContentHeight;\n        this.contentWidth = contentWidth;\n        this.contentHeight = contentHeight;\n        this.contentWidthChanged = (this._oldContentWidth !== this.contentWidth);\n        this.contentHeightChanged = (this._oldContentHeight !== this.contentHeight);\n    }\n    isNoOp() {\n        return (!this.contentWidthChanged && !this.contentHeightChanged);\n    }\n    merge(other) {\n        if (other.kind !== 0 /* ContentSizeChanged */) {\n            return this;\n        }\n        return new ContentSizeChangedEvent(this._oldContentWidth, this._oldContentHeight, other.contentWidth, other.contentHeight);\n    }\n}\nexport class FocusChangedEvent {\n    constructor(oldHasFocus, hasFocus) {\n        this.kind = 1 /* FocusChanged */;\n        this.oldHasFocus = oldHasFocus;\n        this.hasFocus = hasFocus;\n    }\n    isNoOp() {\n        return (this.oldHasFocus === this.hasFocus);\n    }\n    merge(other) {\n        if (other.kind !== 1 /* FocusChanged */) {\n            return this;\n        }\n        return new FocusChangedEvent(this.oldHasFocus, other.hasFocus);\n    }\n}\nexport class ScrollChangedEvent {\n    constructor(oldScrollWidth, oldScrollLeft, oldScrollHeight, oldScrollTop, scrollWidth, scrollLeft, scrollHeight, scrollTop) {\n        this.kind = 2 /* ScrollChanged */;\n        this._oldScrollWidth = oldScrollWidth;\n        this._oldScrollLeft = oldScrollLeft;\n        this._oldScrollHeight = oldScrollHeight;\n        this._oldScrollTop = oldScrollTop;\n        this.scrollWidth = scrollWidth;\n        this.scrollLeft = scrollLeft;\n        this.scrollHeight = scrollHeight;\n        this.scrollTop = scrollTop;\n        this.scrollWidthChanged = (this._oldScrollWidth !== this.scrollWidth);\n        this.scrollLeftChanged = (this._oldScrollLeft !== this.scrollLeft);\n        this.scrollHeightChanged = (this._oldScrollHeight !== this.scrollHeight);\n        this.scrollTopChanged = (this._oldScrollTop !== this.scrollTop);\n    }\n    isNoOp() {\n        return (!this.scrollWidthChanged && !this.scrollLeftChanged && !this.scrollHeightChanged && !this.scrollTopChanged);\n    }\n    merge(other) {\n        if (other.kind !== 2 /* ScrollChanged */) {\n            return this;\n        }\n        return new ScrollChangedEvent(this._oldScrollWidth, this._oldScrollLeft, this._oldScrollHeight, this._oldScrollTop, other.scrollWidth, other.scrollLeft, other.scrollHeight, other.scrollTop);\n    }\n}\nexport class ViewZonesChangedEvent {\n    constructor() {\n        this.kind = 3 /* ViewZonesChanged */;\n    }\n    isNoOp() {\n        return false;\n    }\n    merge(other) {\n        return this;\n    }\n}\nexport class HiddenAreasChangedEvent {\n    constructor() {\n        this.kind = 4 /* HiddenAreasChanged */;\n    }\n    isNoOp() {\n        return false;\n    }\n    merge(other) {\n        return this;\n    }\n}\nexport class CursorStateChangedEvent {\n    constructor(oldSelections, selections, oldModelVersionId, modelVersionId, source, reason, reachedMaxCursorCount) {\n        this.kind = 6 /* CursorStateChanged */;\n        this.oldSelections = oldSelections;\n        this.selections = selections;\n        this.oldModelVersionId = oldModelVersionId;\n        this.modelVersionId = modelVersionId;\n        this.source = source;\n        this.reason = reason;\n        this.reachedMaxCursorCount = reachedMaxCursorCount;\n    }\n    static _selectionsAreEqual(a, b) {\n        if (!a && !b) {\n            return true;\n        }\n        if (!a || !b) {\n            return false;\n        }\n        const aLen = a.length;\n        const bLen = b.length;\n        if (aLen !== bLen) {\n            return false;\n        }\n        for (let i = 0; i < aLen; i++) {\n            if (!a[i].equalsSelection(b[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    isNoOp() {\n        return (CursorStateChangedEvent._selectionsAreEqual(this.oldSelections, this.selections)\n            && this.oldModelVersionId === this.modelVersionId);\n    }\n    merge(other) {\n        if (other.kind !== 6 /* CursorStateChanged */) {\n            return this;\n        }\n        return new CursorStateChangedEvent(this.oldSelections, other.selections, this.oldModelVersionId, other.modelVersionId, other.source, other.reason, this.reachedMaxCursorCount || other.reachedMaxCursorCount);\n    }\n}\nexport class ReadOnlyEditAttemptEvent {\n    constructor() {\n        this.kind = 5 /* ReadOnlyEditAttempt */;\n    }\n    isNoOp() {\n        return false;\n    }\n    merge(other) {\n        return this;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}