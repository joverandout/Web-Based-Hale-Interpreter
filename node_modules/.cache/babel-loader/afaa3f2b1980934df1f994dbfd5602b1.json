{"ast":null,"code":"/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n// src/basic-languages/sparql/sparql.ts\nvar conf = {\n  comments: {\n    lineComment: \"#\"\n  },\n  brackets: [[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"]],\n  autoClosingPairs: [{\n    open: \"'\",\n    close: \"'\",\n    notIn: [\"string\"]\n  }, {\n    open: '\"',\n    close: '\"',\n    notIn: [\"string\"]\n  }, {\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }]\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".rq\",\n  brackets: [{\n    token: \"delimiter.curly\",\n    open: \"{\",\n    close: \"}\"\n  }, {\n    token: \"delimiter.parenthesis\",\n    open: \"(\",\n    close: \")\"\n  }, {\n    token: \"delimiter.square\",\n    open: \"[\",\n    close: \"]\"\n  }, {\n    token: \"delimiter.angle\",\n    open: \"<\",\n    close: \">\"\n  }],\n  keywords: [\"add\", \"as\", \"asc\", \"ask\", \"base\", \"by\", \"clear\", \"construct\", \"copy\", \"create\", \"data\", \"delete\", \"desc\", \"describe\", \"distinct\", \"drop\", \"false\", \"filter\", \"from\", \"graph\", \"group\", \"having\", \"in\", \"insert\", \"limit\", \"load\", \"minus\", \"move\", \"named\", \"not\", \"offset\", \"optional\", \"order\", \"prefix\", \"reduced\", \"select\", \"service\", \"silent\", \"to\", \"true\", \"undef\", \"union\", \"using\", \"values\", \"where\", \"with\"],\n  builtinFunctions: [\"a\", \"abs\", \"avg\", \"bind\", \"bnode\", \"bound\", \"ceil\", \"coalesce\", \"concat\", \"contains\", \"count\", \"datatype\", \"day\", \"encode_for_uri\", \"exists\", \"floor\", \"group_concat\", \"hours\", \"if\", \"iri\", \"isblank\", \"isiri\", \"isliteral\", \"isnumeric\", \"isuri\", \"lang\", \"langmatches\", \"lcase\", \"max\", \"md5\", \"min\", \"minutes\", \"month\", \"now\", \"rand\", \"regex\", \"replace\", \"round\", \"sameterm\", \"sample\", \"seconds\", \"sha1\", \"sha256\", \"sha384\", \"sha512\", \"str\", \"strafter\", \"strbefore\", \"strdt\", \"strends\", \"strlang\", \"strlen\", \"strstarts\", \"struuid\", \"substr\", \"sum\", \"timezone\", \"tz\", \"ucase\", \"uri\", \"uuid\", \"year\"],\n  ignoreCase: true,\n  tokenizer: {\n    root: [[/<[^\\s\\u00a0>]*>?/, \"tag\"], {\n      include: \"@strings\"\n    }, [/#.*/, \"comment\"], [/[{}()\\[\\]]/, \"@brackets\"], [/[;,.]/, \"delimiter\"], [/[_\\w\\d]+:(\\.(?=[\\w_\\-\\\\%])|[:\\w_-]|\\\\[-\\\\_~.!$&'()*+,;=/?#@%]|%[a-f\\d][a-f\\d])*/, \"tag\"], [/:(\\.(?=[\\w_\\-\\\\%])|[:\\w_-]|\\\\[-\\\\_~.!$&'()*+,;=/?#@%]|%[a-f\\d][a-f\\d])+/, \"tag\"], [/[$?]?[_\\w\\d]+/, {\n      cases: {\n        \"@keywords\": {\n          token: \"keyword\"\n        },\n        \"@builtinFunctions\": {\n          token: \"predefined.sql\"\n        },\n        \"@default\": \"identifier\"\n      }\n    }], [/\\^\\^/, \"operator.sql\"], [/\\^[*+\\-<>=&|^\\/!?]*/, \"operator.sql\"], [/[*+\\-<>=&|\\/!?]/, \"operator.sql\"], [/@[a-z\\d\\-]*/, \"metatag.html\"], [/\\s+/, \"white\"]],\n    strings: [[/'([^'\\\\]|\\\\.)*$/, \"string.invalid\"], [/'$/, \"string.sql\", \"@pop\"], [/'/, \"string.sql\", \"@stringBody\"], [/\"([^\"\\\\]|\\\\.)*$/, \"string.invalid\"], [/\"$/, \"string.sql\", \"@pop\"], [/\"/, \"string.sql\", \"@dblStringBody\"]],\n    stringBody: [[/[^\\\\']+/, \"string.sql\"], [/\\\\./, \"string.escape\"], [/'/, \"string.sql\", \"@pop\"]],\n    dblStringBody: [[/[^\\\\\"]+/, \"string.sql\"], [/\\\\./, \"string.escape\"], [/\"/, \"string.sql\", \"@pop\"]]\n  }\n};\nexport { conf, language };","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/basic-languages/sparql/sparql.js"],"names":["conf","comments","lineComment","brackets","autoClosingPairs","open","close","notIn","language","defaultToken","tokenPostfix","token","keywords","builtinFunctions","ignoreCase","tokenizer","root","include","cases","strings","stringBody","dblStringBody"],"mappings":"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","sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/sparql/sparql.ts\nvar conf = {\n  comments: {\n    lineComment: \"#\"\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"]\n  ],\n  autoClosingPairs: [\n    { open: \"'\", close: \"'\", notIn: [\"string\"] },\n    { open: '\"', close: '\"', notIn: [\"string\"] },\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" }\n  ]\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".rq\",\n  brackets: [\n    { token: \"delimiter.curly\", open: \"{\", close: \"}\" },\n    { token: \"delimiter.parenthesis\", open: \"(\", close: \")\" },\n    { token: \"delimiter.square\", open: \"[\", close: \"]\" },\n    { token: \"delimiter.angle\", open: \"<\", close: \">\" }\n  ],\n  keywords: [\n    \"add\",\n    \"as\",\n    \"asc\",\n    \"ask\",\n    \"base\",\n    \"by\",\n    \"clear\",\n    \"construct\",\n    \"copy\",\n    \"create\",\n    \"data\",\n    \"delete\",\n    \"desc\",\n    \"describe\",\n    \"distinct\",\n    \"drop\",\n    \"false\",\n    \"filter\",\n    \"from\",\n    \"graph\",\n    \"group\",\n    \"having\",\n    \"in\",\n    \"insert\",\n    \"limit\",\n    \"load\",\n    \"minus\",\n    \"move\",\n    \"named\",\n    \"not\",\n    \"offset\",\n    \"optional\",\n    \"order\",\n    \"prefix\",\n    \"reduced\",\n    \"select\",\n    \"service\",\n    \"silent\",\n    \"to\",\n    \"true\",\n    \"undef\",\n    \"union\",\n    \"using\",\n    \"values\",\n    \"where\",\n    \"with\"\n  ],\n  builtinFunctions: [\n    \"a\",\n    \"abs\",\n    \"avg\",\n    \"bind\",\n    \"bnode\",\n    \"bound\",\n    \"ceil\",\n    \"coalesce\",\n    \"concat\",\n    \"contains\",\n    \"count\",\n    \"datatype\",\n    \"day\",\n    \"encode_for_uri\",\n    \"exists\",\n    \"floor\",\n    \"group_concat\",\n    \"hours\",\n    \"if\",\n    \"iri\",\n    \"isblank\",\n    \"isiri\",\n    \"isliteral\",\n    \"isnumeric\",\n    \"isuri\",\n    \"lang\",\n    \"langmatches\",\n    \"lcase\",\n    \"max\",\n    \"md5\",\n    \"min\",\n    \"minutes\",\n    \"month\",\n    \"now\",\n    \"rand\",\n    \"regex\",\n    \"replace\",\n    \"round\",\n    \"sameterm\",\n    \"sample\",\n    \"seconds\",\n    \"sha1\",\n    \"sha256\",\n    \"sha384\",\n    \"sha512\",\n    \"str\",\n    \"strafter\",\n    \"strbefore\",\n    \"strdt\",\n    \"strends\",\n    \"strlang\",\n    \"strlen\",\n    \"strstarts\",\n    \"struuid\",\n    \"substr\",\n    \"sum\",\n    \"timezone\",\n    \"tz\",\n    \"ucase\",\n    \"uri\",\n    \"uuid\",\n    \"year\"\n  ],\n  ignoreCase: true,\n  tokenizer: {\n    root: [\n      [/<[^\\s\\u00a0>]*>?/, \"tag\"],\n      { include: \"@strings\" },\n      [/#.*/, \"comment\"],\n      [/[{}()\\[\\]]/, \"@brackets\"],\n      [/[;,.]/, \"delimiter\"],\n      [/[_\\w\\d]+:(\\.(?=[\\w_\\-\\\\%])|[:\\w_-]|\\\\[-\\\\_~.!$&'()*+,;=/?#@%]|%[a-f\\d][a-f\\d])*/, \"tag\"],\n      [/:(\\.(?=[\\w_\\-\\\\%])|[:\\w_-]|\\\\[-\\\\_~.!$&'()*+,;=/?#@%]|%[a-f\\d][a-f\\d])+/, \"tag\"],\n      [\n        /[$?]?[_\\w\\d]+/,\n        {\n          cases: {\n            \"@keywords\": { token: \"keyword\" },\n            \"@builtinFunctions\": { token: \"predefined.sql\" },\n            \"@default\": \"identifier\"\n          }\n        }\n      ],\n      [/\\^\\^/, \"operator.sql\"],\n      [/\\^[*+\\-<>=&|^\\/!?]*/, \"operator.sql\"],\n      [/[*+\\-<>=&|\\/!?]/, \"operator.sql\"],\n      [/@[a-z\\d\\-]*/, \"metatag.html\"],\n      [/\\s+/, \"white\"]\n    ],\n    strings: [\n      [/'([^'\\\\]|\\\\.)*$/, \"string.invalid\"],\n      [/'$/, \"string.sql\", \"@pop\"],\n      [/'/, \"string.sql\", \"@stringBody\"],\n      [/\"([^\"\\\\]|\\\\.)*$/, \"string.invalid\"],\n      [/\"$/, \"string.sql\", \"@pop\"],\n      [/\"/, \"string.sql\", \"@dblStringBody\"]\n    ],\n    stringBody: [\n      [/[^\\\\']+/, \"string.sql\"],\n      [/\\\\./, \"string.escape\"],\n      [/'/, \"string.sql\", \"@pop\"]\n    ],\n    dblStringBody: [\n      [/[^\\\\\"]+/, \"string.sql\"],\n      [/\\\\./, \"string.escape\"],\n      [/\"/, \"string.sql\", \"@pop\"]\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"]},"metadata":{},"sourceType":"module"}