{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { Scrollable } from '../../../base/common/scrollable.js';\nimport { LinesLayout } from './linesLayout.js';\nimport { Viewport } from '../viewModel/viewModel.js';\nimport { ContentSizeChangedEvent } from '../viewModel/viewModelEventDispatcher.js';\nconst SMOOTH_SCROLLING_TIME = 125;\n\nclass EditorScrollDimensions {\n  constructor(width, contentWidth, height, contentHeight) {\n    width = width | 0;\n    contentWidth = contentWidth | 0;\n    height = height | 0;\n    contentHeight = contentHeight | 0;\n\n    if (width < 0) {\n      width = 0;\n    }\n\n    if (contentWidth < 0) {\n      contentWidth = 0;\n    }\n\n    if (height < 0) {\n      height = 0;\n    }\n\n    if (contentHeight < 0) {\n      contentHeight = 0;\n    }\n\n    this.width = width;\n    this.contentWidth = contentWidth;\n    this.scrollWidth = Math.max(width, contentWidth);\n    this.height = height;\n    this.contentHeight = contentHeight;\n    this.scrollHeight = Math.max(height, contentHeight);\n  }\n\n  equals(other) {\n    return this.width === other.width && this.contentWidth === other.contentWidth && this.height === other.height && this.contentHeight === other.contentHeight;\n  }\n\n}\n\nclass EditorScrollable extends Disposable {\n  constructor(smoothScrollDuration, scheduleAtNextAnimationFrame) {\n    super();\n    this._onDidContentSizeChange = this._register(new Emitter());\n    this.onDidContentSizeChange = this._onDidContentSizeChange.event;\n    this._dimensions = new EditorScrollDimensions(0, 0, 0, 0);\n    this._scrollable = this._register(new Scrollable({\n      forceIntegerValues: true,\n      smoothScrollDuration,\n      scheduleAtNextAnimationFrame\n    }));\n    this.onDidScroll = this._scrollable.onScroll;\n  }\n\n  getScrollable() {\n    return this._scrollable;\n  }\n\n  setSmoothScrollDuration(smoothScrollDuration) {\n    this._scrollable.setSmoothScrollDuration(smoothScrollDuration);\n  }\n\n  validateScrollPosition(scrollPosition) {\n    return this._scrollable.validateScrollPosition(scrollPosition);\n  }\n\n  getScrollDimensions() {\n    return this._dimensions;\n  }\n\n  setScrollDimensions(dimensions) {\n    if (this._dimensions.equals(dimensions)) {\n      return;\n    }\n\n    const oldDimensions = this._dimensions;\n    this._dimensions = dimensions;\n\n    this._scrollable.setScrollDimensions({\n      width: dimensions.width,\n      scrollWidth: dimensions.scrollWidth,\n      height: dimensions.height,\n      scrollHeight: dimensions.scrollHeight\n    }, true);\n\n    const contentWidthChanged = oldDimensions.contentWidth !== dimensions.contentWidth;\n    const contentHeightChanged = oldDimensions.contentHeight !== dimensions.contentHeight;\n\n    if (contentWidthChanged || contentHeightChanged) {\n      this._onDidContentSizeChange.fire(new ContentSizeChangedEvent(oldDimensions.contentWidth, oldDimensions.contentHeight, dimensions.contentWidth, dimensions.contentHeight));\n    }\n  }\n\n  getFutureScrollPosition() {\n    return this._scrollable.getFutureScrollPosition();\n  }\n\n  getCurrentScrollPosition() {\n    return this._scrollable.getCurrentScrollPosition();\n  }\n\n  setScrollPositionNow(update) {\n    this._scrollable.setScrollPositionNow(update);\n  }\n\n  setScrollPositionSmooth(update) {\n    this._scrollable.setScrollPositionSmooth(update);\n  }\n\n}\n\nexport class ViewLayout extends Disposable {\n  constructor(configuration, lineCount, scheduleAtNextAnimationFrame) {\n    super();\n    this._configuration = configuration;\n    const options = this._configuration.options;\n    const layoutInfo = options.get(131\n    /* layoutInfo */\n    );\n    const padding = options.get(75\n    /* padding */\n    );\n    this._linesLayout = new LinesLayout(lineCount, options.get(59\n    /* lineHeight */\n    ), padding.top, padding.bottom);\n    this._scrollable = this._register(new EditorScrollable(0, scheduleAtNextAnimationFrame));\n\n    this._configureSmoothScrollDuration();\n\n    this._scrollable.setScrollDimensions(new EditorScrollDimensions(layoutInfo.contentWidth, 0, layoutInfo.height, 0));\n\n    this.onDidScroll = this._scrollable.onDidScroll;\n    this.onDidContentSizeChange = this._scrollable.onDidContentSizeChange;\n\n    this._updateHeight();\n  }\n\n  dispose() {\n    super.dispose();\n  }\n\n  getScrollable() {\n    return this._scrollable.getScrollable();\n  }\n\n  onHeightMaybeChanged() {\n    this._updateHeight();\n  }\n\n  _configureSmoothScrollDuration() {\n    this._scrollable.setSmoothScrollDuration(this._configuration.options.get(103\n    /* smoothScrolling */\n    ) ? SMOOTH_SCROLLING_TIME : 0);\n  } // ---- begin view event handlers\n\n\n  onConfigurationChanged(e) {\n    const options = this._configuration.options;\n\n    if (e.hasChanged(59\n    /* lineHeight */\n    )) {\n      this._linesLayout.setLineHeight(options.get(59\n      /* lineHeight */\n      ));\n    }\n\n    if (e.hasChanged(75\n    /* padding */\n    )) {\n      const padding = options.get(75\n      /* padding */\n      );\n\n      this._linesLayout.setPadding(padding.top, padding.bottom);\n    }\n\n    if (e.hasChanged(131\n    /* layoutInfo */\n    )) {\n      const layoutInfo = options.get(131\n      /* layoutInfo */\n      );\n      const width = layoutInfo.contentWidth;\n      const height = layoutInfo.height;\n\n      const scrollDimensions = this._scrollable.getScrollDimensions();\n\n      const contentWidth = scrollDimensions.contentWidth;\n\n      this._scrollable.setScrollDimensions(new EditorScrollDimensions(width, scrollDimensions.contentWidth, height, this._getContentHeight(width, height, contentWidth)));\n    } else {\n      this._updateHeight();\n    }\n\n    if (e.hasChanged(103\n    /* smoothScrolling */\n    )) {\n      this._configureSmoothScrollDuration();\n    }\n  }\n\n  onFlushed(lineCount) {\n    this._linesLayout.onFlushed(lineCount);\n  }\n\n  onLinesDeleted(fromLineNumber, toLineNumber) {\n    this._linesLayout.onLinesDeleted(fromLineNumber, toLineNumber);\n  }\n\n  onLinesInserted(fromLineNumber, toLineNumber) {\n    this._linesLayout.onLinesInserted(fromLineNumber, toLineNumber);\n  } // ---- end view event handlers\n\n\n  _getHorizontalScrollbarHeight(width, scrollWidth) {\n    const options = this._configuration.options;\n    const scrollbar = options.get(92\n    /* scrollbar */\n    );\n\n    if (scrollbar.horizontal === 2\n    /* Hidden */\n    ) {\n      // horizontal scrollbar not visible\n      return 0;\n    }\n\n    if (width >= scrollWidth) {\n      // horizontal scrollbar not visible\n      return 0;\n    }\n\n    return scrollbar.horizontalScrollbarSize;\n  }\n\n  _getContentHeight(width, height, contentWidth) {\n    const options = this._configuration.options;\n\n    let result = this._linesLayout.getLinesTotalHeight();\n\n    if (options.get(94\n    /* scrollBeyondLastLine */\n    )) {\n      result += Math.max(0, height - options.get(59\n      /* lineHeight */\n      ) - options.get(75\n      /* padding */\n      ).bottom);\n    } else {\n      result += this._getHorizontalScrollbarHeight(width, contentWidth);\n    }\n\n    return result;\n  }\n\n  _updateHeight() {\n    const scrollDimensions = this._scrollable.getScrollDimensions();\n\n    const width = scrollDimensions.width;\n    const height = scrollDimensions.height;\n    const contentWidth = scrollDimensions.contentWidth;\n\n    this._scrollable.setScrollDimensions(new EditorScrollDimensions(width, scrollDimensions.contentWidth, height, this._getContentHeight(width, height, contentWidth)));\n  } // ---- Layouting logic\n\n\n  getCurrentViewport() {\n    const scrollDimensions = this._scrollable.getScrollDimensions();\n\n    const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n\n    return new Viewport(currentScrollPosition.scrollTop, currentScrollPosition.scrollLeft, scrollDimensions.width, scrollDimensions.height);\n  }\n\n  getFutureViewport() {\n    const scrollDimensions = this._scrollable.getScrollDimensions();\n\n    const currentScrollPosition = this._scrollable.getFutureScrollPosition();\n\n    return new Viewport(currentScrollPosition.scrollTop, currentScrollPosition.scrollLeft, scrollDimensions.width, scrollDimensions.height);\n  }\n\n  _computeContentWidth(maxLineWidth) {\n    const options = this._configuration.options;\n    const wrappingInfo = options.get(132\n    /* wrappingInfo */\n    );\n    const fontInfo = options.get(44\n    /* fontInfo */\n    );\n\n    if (wrappingInfo.isViewportWrapping) {\n      const layoutInfo = options.get(131\n      /* layoutInfo */\n      );\n      const minimap = options.get(65\n      /* minimap */\n      );\n\n      if (maxLineWidth > layoutInfo.contentWidth + fontInfo.typicalHalfwidthCharacterWidth) {\n        // This is a case where viewport wrapping is on, but the line extends above the viewport\n        if (minimap.enabled && minimap.side === 'right') {\n          // We need to accomodate the scrollbar width\n          return maxLineWidth + layoutInfo.verticalScrollbarWidth;\n        }\n      }\n\n      return maxLineWidth;\n    } else {\n      const extraHorizontalSpace = options.get(93\n      /* scrollBeyondLastColumn */\n      ) * fontInfo.typicalHalfwidthCharacterWidth;\n\n      const whitespaceMinWidth = this._linesLayout.getWhitespaceMinWidth();\n\n      return Math.max(maxLineWidth + extraHorizontalSpace, whitespaceMinWidth);\n    }\n  }\n\n  setMaxLineWidth(maxLineWidth) {\n    const scrollDimensions = this._scrollable.getScrollDimensions(); // const newScrollWidth = ;\n\n\n    this._scrollable.setScrollDimensions(new EditorScrollDimensions(scrollDimensions.width, this._computeContentWidth(maxLineWidth), scrollDimensions.height, scrollDimensions.contentHeight)); // The height might depend on the fact that there is a horizontal scrollbar or not\n\n\n    this._updateHeight();\n  } // ---- view state\n\n\n  saveState() {\n    const currentScrollPosition = this._scrollable.getFutureScrollPosition();\n\n    const scrollTop = currentScrollPosition.scrollTop;\n\n    const firstLineNumberInViewport = this._linesLayout.getLineNumberAtOrAfterVerticalOffset(scrollTop);\n\n    const whitespaceAboveFirstLine = this._linesLayout.getWhitespaceAccumulatedHeightBeforeLineNumber(firstLineNumberInViewport);\n\n    return {\n      scrollTop: scrollTop,\n      scrollTopWithoutViewZones: scrollTop - whitespaceAboveFirstLine,\n      scrollLeft: currentScrollPosition.scrollLeft\n    };\n  } // ---- IVerticalLayoutProvider\n\n\n  changeWhitespace(callback) {\n    const hadAChange = this._linesLayout.changeWhitespace(callback);\n\n    if (hadAChange) {\n      this.onHeightMaybeChanged();\n    }\n\n    return hadAChange;\n  }\n\n  getVerticalOffsetForLineNumber(lineNumber) {\n    return this._linesLayout.getVerticalOffsetForLineNumber(lineNumber);\n  }\n\n  isAfterLines(verticalOffset) {\n    return this._linesLayout.isAfterLines(verticalOffset);\n  }\n\n  isInTopPadding(verticalOffset) {\n    return this._linesLayout.isInTopPadding(verticalOffset);\n  }\n\n  isInBottomPadding(verticalOffset) {\n    return this._linesLayout.isInBottomPadding(verticalOffset);\n  }\n\n  getLineNumberAtVerticalOffset(verticalOffset) {\n    return this._linesLayout.getLineNumberAtOrAfterVerticalOffset(verticalOffset);\n  }\n\n  getWhitespaceAtVerticalOffset(verticalOffset) {\n    return this._linesLayout.getWhitespaceAtVerticalOffset(verticalOffset);\n  }\n\n  getLinesViewportData() {\n    const visibleBox = this.getCurrentViewport();\n    return this._linesLayout.getLinesViewportData(visibleBox.top, visibleBox.top + visibleBox.height);\n  }\n\n  getLinesViewportDataAtScrollTop(scrollTop) {\n    // do some minimal validations on scrollTop\n    const scrollDimensions = this._scrollable.getScrollDimensions();\n\n    if (scrollTop + scrollDimensions.height > scrollDimensions.scrollHeight) {\n      scrollTop = scrollDimensions.scrollHeight - scrollDimensions.height;\n    }\n\n    if (scrollTop < 0) {\n      scrollTop = 0;\n    }\n\n    return this._linesLayout.getLinesViewportData(scrollTop, scrollTop + scrollDimensions.height);\n  }\n\n  getWhitespaceViewportData() {\n    const visibleBox = this.getCurrentViewport();\n    return this._linesLayout.getWhitespaceViewportData(visibleBox.top, visibleBox.top + visibleBox.height);\n  }\n\n  getWhitespaces() {\n    return this._linesLayout.getWhitespaces();\n  } // ---- IScrollingProvider\n\n\n  getContentWidth() {\n    const scrollDimensions = this._scrollable.getScrollDimensions();\n\n    return scrollDimensions.contentWidth;\n  }\n\n  getScrollWidth() {\n    const scrollDimensions = this._scrollable.getScrollDimensions();\n\n    return scrollDimensions.scrollWidth;\n  }\n\n  getContentHeight() {\n    const scrollDimensions = this._scrollable.getScrollDimensions();\n\n    return scrollDimensions.contentHeight;\n  }\n\n  getScrollHeight() {\n    const scrollDimensions = this._scrollable.getScrollDimensions();\n\n    return scrollDimensions.scrollHeight;\n  }\n\n  getCurrentScrollLeft() {\n    const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n\n    return currentScrollPosition.scrollLeft;\n  }\n\n  getCurrentScrollTop() {\n    const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n\n    return currentScrollPosition.scrollTop;\n  }\n\n  validateScrollPosition(scrollPosition) {\n    return this._scrollable.validateScrollPosition(scrollPosition);\n  }\n\n  setScrollPosition(position, type) {\n    if (type === 1\n    /* Immediate */\n    ) {\n      this._scrollable.setScrollPositionNow(position);\n    } else {\n      this._scrollable.setScrollPositionSmooth(position);\n    }\n  }\n\n  deltaScrollNow(deltaScrollLeft, deltaScrollTop) {\n    const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n\n    this._scrollable.setScrollPositionNow({\n      scrollLeft: currentScrollPosition.scrollLeft + deltaScrollLeft,\n      scrollTop: currentScrollPosition.scrollTop + deltaScrollTop\n    });\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/common/viewLayout/viewLayout.js"],"names":["Emitter","Disposable","Scrollable","LinesLayout","Viewport","ContentSizeChangedEvent","SMOOTH_SCROLLING_TIME","EditorScrollDimensions","constructor","width","contentWidth","height","contentHeight","scrollWidth","Math","max","scrollHeight","equals","other","EditorScrollable","smoothScrollDuration","scheduleAtNextAnimationFrame","_onDidContentSizeChange","_register","onDidContentSizeChange","event","_dimensions","_scrollable","forceIntegerValues","onDidScroll","onScroll","getScrollable","setSmoothScrollDuration","validateScrollPosition","scrollPosition","getScrollDimensions","setScrollDimensions","dimensions","oldDimensions","contentWidthChanged","contentHeightChanged","fire","getFutureScrollPosition","getCurrentScrollPosition","setScrollPositionNow","update","setScrollPositionSmooth","ViewLayout","configuration","lineCount","_configuration","options","layoutInfo","get","padding","_linesLayout","top","bottom","_configureSmoothScrollDuration","_updateHeight","dispose","onHeightMaybeChanged","onConfigurationChanged","e","hasChanged","setLineHeight","setPadding","scrollDimensions","_getContentHeight","onFlushed","onLinesDeleted","fromLineNumber","toLineNumber","onLinesInserted","_getHorizontalScrollbarHeight","scrollbar","horizontal","horizontalScrollbarSize","result","getLinesTotalHeight","getCurrentViewport","currentScrollPosition","scrollTop","scrollLeft","getFutureViewport","_computeContentWidth","maxLineWidth","wrappingInfo","fontInfo","isViewportWrapping","minimap","typicalHalfwidthCharacterWidth","enabled","side","verticalScrollbarWidth","extraHorizontalSpace","whitespaceMinWidth","getWhitespaceMinWidth","setMaxLineWidth","saveState","firstLineNumberInViewport","getLineNumberAtOrAfterVerticalOffset","whitespaceAboveFirstLine","getWhitespaceAccumulatedHeightBeforeLineNumber","scrollTopWithoutViewZones","changeWhitespace","callback","hadAChange","getVerticalOffsetForLineNumber","lineNumber","isAfterLines","verticalOffset","isInTopPadding","isInBottomPadding","getLineNumberAtVerticalOffset","getWhitespaceAtVerticalOffset","getLinesViewportData","visibleBox","getLinesViewportDataAtScrollTop","getWhitespaceViewportData","getWhitespaces","getContentWidth","getScrollWidth","getContentHeight","getScrollHeight","getCurrentScrollLeft","getCurrentScrollTop","setScrollPosition","position","type","deltaScrollNow","deltaScrollLeft","deltaScrollTop"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,OAAT,QAAwB,+BAAxB;AACA,SAASC,UAAT,QAA2B,mCAA3B;AACA,SAASC,UAAT,QAA2B,oCAA3B;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,QAAT,QAAyB,2BAAzB;AACA,SAASC,uBAAT,QAAwC,0CAAxC;AACA,MAAMC,qBAAqB,GAAG,GAA9B;;AACA,MAAMC,sBAAN,CAA6B;AACzBC,EAAAA,WAAW,CAACC,KAAD,EAAQC,YAAR,EAAsBC,MAAtB,EAA8BC,aAA9B,EAA6C;AACpDH,IAAAA,KAAK,GAAGA,KAAK,GAAG,CAAhB;AACAC,IAAAA,YAAY,GAAGA,YAAY,GAAG,CAA9B;AACAC,IAAAA,MAAM,GAAGA,MAAM,GAAG,CAAlB;AACAC,IAAAA,aAAa,GAAGA,aAAa,GAAG,CAAhC;;AACA,QAAIH,KAAK,GAAG,CAAZ,EAAe;AACXA,MAAAA,KAAK,GAAG,CAAR;AACH;;AACD,QAAIC,YAAY,GAAG,CAAnB,EAAsB;AAClBA,MAAAA,YAAY,GAAG,CAAf;AACH;;AACD,QAAIC,MAAM,GAAG,CAAb,EAAgB;AACZA,MAAAA,MAAM,GAAG,CAAT;AACH;;AACD,QAAIC,aAAa,GAAG,CAApB,EAAuB;AACnBA,MAAAA,aAAa,GAAG,CAAhB;AACH;;AACD,SAAKH,KAAL,GAAaA,KAAb;AACA,SAAKC,YAAL,GAAoBA,YAApB;AACA,SAAKG,WAAL,GAAmBC,IAAI,CAACC,GAAL,CAASN,KAAT,EAAgBC,YAAhB,CAAnB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,aAAL,GAAqBA,aAArB;AACA,SAAKI,YAAL,GAAoBF,IAAI,CAACC,GAAL,CAASJ,MAAT,EAAiBC,aAAjB,CAApB;AACH;;AACDK,EAAAA,MAAM,CAACC,KAAD,EAAQ;AACV,WAAQ,KAAKT,KAAL,KAAeS,KAAK,CAACT,KAArB,IACD,KAAKC,YAAL,KAAsBQ,KAAK,CAACR,YAD3B,IAED,KAAKC,MAAL,KAAgBO,KAAK,CAACP,MAFrB,IAGD,KAAKC,aAAL,KAAuBM,KAAK,CAACN,aAHpC;AAIH;;AA9BwB;;AAgC7B,MAAMO,gBAAN,SAA+BlB,UAA/B,CAA0C;AACtCO,EAAAA,WAAW,CAACY,oBAAD,EAAuBC,4BAAvB,EAAqD;AAC5D;AACA,SAAKC,uBAAL,GAA+B,KAAKC,SAAL,CAAe,IAAIvB,OAAJ,EAAf,CAA/B;AACA,SAAKwB,sBAAL,GAA8B,KAAKF,uBAAL,CAA6BG,KAA3D;AACA,SAAKC,WAAL,GAAmB,IAAInB,sBAAJ,CAA2B,CAA3B,EAA8B,CAA9B,EAAiC,CAAjC,EAAoC,CAApC,CAAnB;AACA,SAAKoB,WAAL,GAAmB,KAAKJ,SAAL,CAAe,IAAIrB,UAAJ,CAAe;AAC7C0B,MAAAA,kBAAkB,EAAE,IADyB;AAE7CR,MAAAA,oBAF6C;AAG7CC,MAAAA;AAH6C,KAAf,CAAf,CAAnB;AAKA,SAAKQ,WAAL,GAAmB,KAAKF,WAAL,CAAiBG,QAApC;AACH;;AACDC,EAAAA,aAAa,GAAG;AACZ,WAAO,KAAKJ,WAAZ;AACH;;AACDK,EAAAA,uBAAuB,CAACZ,oBAAD,EAAuB;AAC1C,SAAKO,WAAL,CAAiBK,uBAAjB,CAAyCZ,oBAAzC;AACH;;AACDa,EAAAA,sBAAsB,CAACC,cAAD,EAAiB;AACnC,WAAO,KAAKP,WAAL,CAAiBM,sBAAjB,CAAwCC,cAAxC,CAAP;AACH;;AACDC,EAAAA,mBAAmB,GAAG;AAClB,WAAO,KAAKT,WAAZ;AACH;;AACDU,EAAAA,mBAAmB,CAACC,UAAD,EAAa;AAC5B,QAAI,KAAKX,WAAL,CAAiBT,MAAjB,CAAwBoB,UAAxB,CAAJ,EAAyC;AACrC;AACH;;AACD,UAAMC,aAAa,GAAG,KAAKZ,WAA3B;AACA,SAAKA,WAAL,GAAmBW,UAAnB;;AACA,SAAKV,WAAL,CAAiBS,mBAAjB,CAAqC;AACjC3B,MAAAA,KAAK,EAAE4B,UAAU,CAAC5B,KADe;AAEjCI,MAAAA,WAAW,EAAEwB,UAAU,CAACxB,WAFS;AAGjCF,MAAAA,MAAM,EAAE0B,UAAU,CAAC1B,MAHc;AAIjCK,MAAAA,YAAY,EAAEqB,UAAU,CAACrB;AAJQ,KAArC,EAKG,IALH;;AAMA,UAAMuB,mBAAmB,GAAID,aAAa,CAAC5B,YAAd,KAA+B2B,UAAU,CAAC3B,YAAvE;AACA,UAAM8B,oBAAoB,GAAIF,aAAa,CAAC1B,aAAd,KAAgCyB,UAAU,CAACzB,aAAzE;;AACA,QAAI2B,mBAAmB,IAAIC,oBAA3B,EAAiD;AAC7C,WAAKlB,uBAAL,CAA6BmB,IAA7B,CAAkC,IAAIpC,uBAAJ,CAA4BiC,aAAa,CAAC5B,YAA1C,EAAwD4B,aAAa,CAAC1B,aAAtE,EAAqFyB,UAAU,CAAC3B,YAAhG,EAA8G2B,UAAU,CAACzB,aAAzH,CAAlC;AACH;AACJ;;AACD8B,EAAAA,uBAAuB,GAAG;AACtB,WAAO,KAAKf,WAAL,CAAiBe,uBAAjB,EAAP;AACH;;AACDC,EAAAA,wBAAwB,GAAG;AACvB,WAAO,KAAKhB,WAAL,CAAiBgB,wBAAjB,EAAP;AACH;;AACDC,EAAAA,oBAAoB,CAACC,MAAD,EAAS;AACzB,SAAKlB,WAAL,CAAiBiB,oBAAjB,CAAsCC,MAAtC;AACH;;AACDC,EAAAA,uBAAuB,CAACD,MAAD,EAAS;AAC5B,SAAKlB,WAAL,CAAiBmB,uBAAjB,CAAyCD,MAAzC;AACH;;AAtDqC;;AAwD1C,OAAO,MAAME,UAAN,SAAyB9C,UAAzB,CAAoC;AACvCO,EAAAA,WAAW,CAACwC,aAAD,EAAgBC,SAAhB,EAA2B5B,4BAA3B,EAAyD;AAChE;AACA,SAAK6B,cAAL,GAAsBF,aAAtB;AACA,UAAMG,OAAO,GAAG,KAAKD,cAAL,CAAoBC,OAApC;AACA,UAAMC,UAAU,GAAGD,OAAO,CAACE,GAAR,CAAY;AAAI;AAAhB,KAAnB;AACA,UAAMC,OAAO,GAAGH,OAAO,CAACE,GAAR,CAAY;AAAG;AAAf,KAAhB;AACA,SAAKE,YAAL,GAAoB,IAAIpD,WAAJ,CAAgB8C,SAAhB,EAA2BE,OAAO,CAACE,GAAR,CAAY;AAAG;AAAf,KAA3B,EAA6DC,OAAO,CAACE,GAArE,EAA0EF,OAAO,CAACG,MAAlF,CAApB;AACA,SAAK9B,WAAL,GAAmB,KAAKJ,SAAL,CAAe,IAAIJ,gBAAJ,CAAqB,CAArB,EAAwBE,4BAAxB,CAAf,CAAnB;;AACA,SAAKqC,8BAAL;;AACA,SAAK/B,WAAL,CAAiBS,mBAAjB,CAAqC,IAAI7B,sBAAJ,CAA2B6C,UAAU,CAAC1C,YAAtC,EAAoD,CAApD,EAAuD0C,UAAU,CAACzC,MAAlE,EAA0E,CAA1E,CAArC;;AACA,SAAKkB,WAAL,GAAmB,KAAKF,WAAL,CAAiBE,WAApC;AACA,SAAKL,sBAAL,GAA8B,KAAKG,WAAL,CAAiBH,sBAA/C;;AACA,SAAKmC,aAAL;AACH;;AACDC,EAAAA,OAAO,GAAG;AACN,UAAMA,OAAN;AACH;;AACD7B,EAAAA,aAAa,GAAG;AACZ,WAAO,KAAKJ,WAAL,CAAiBI,aAAjB,EAAP;AACH;;AACD8B,EAAAA,oBAAoB,GAAG;AACnB,SAAKF,aAAL;AACH;;AACDD,EAAAA,8BAA8B,GAAG;AAC7B,SAAK/B,WAAL,CAAiBK,uBAAjB,CAAyC,KAAKkB,cAAL,CAAoBC,OAApB,CAA4BE,GAA5B,CAAgC;AAAI;AAApC,QAA6D/C,qBAA7D,GAAqF,CAA9H;AACH,GA1BsC,CA2BvC;;;AACAwD,EAAAA,sBAAsB,CAACC,CAAD,EAAI;AACtB,UAAMZ,OAAO,GAAG,KAAKD,cAAL,CAAoBC,OAApC;;AACA,QAAIY,CAAC,CAACC,UAAF,CAAa;AAAG;AAAhB,KAAJ,EAAuC;AACnC,WAAKT,YAAL,CAAkBU,aAAlB,CAAgCd,OAAO,CAACE,GAAR,CAAY;AAAG;AAAf,OAAhC;AACH;;AACD,QAAIU,CAAC,CAACC,UAAF,CAAa;AAAG;AAAhB,KAAJ,EAAoC;AAChC,YAAMV,OAAO,GAAGH,OAAO,CAACE,GAAR,CAAY;AAAG;AAAf,OAAhB;;AACA,WAAKE,YAAL,CAAkBW,UAAlB,CAA6BZ,OAAO,CAACE,GAArC,EAA0CF,OAAO,CAACG,MAAlD;AACH;;AACD,QAAIM,CAAC,CAACC,UAAF,CAAa;AAAI;AAAjB,KAAJ,EAAwC;AACpC,YAAMZ,UAAU,GAAGD,OAAO,CAACE,GAAR,CAAY;AAAI;AAAhB,OAAnB;AACA,YAAM5C,KAAK,GAAG2C,UAAU,CAAC1C,YAAzB;AACA,YAAMC,MAAM,GAAGyC,UAAU,CAACzC,MAA1B;;AACA,YAAMwD,gBAAgB,GAAG,KAAKxC,WAAL,CAAiBQ,mBAAjB,EAAzB;;AACA,YAAMzB,YAAY,GAAGyD,gBAAgB,CAACzD,YAAtC;;AACA,WAAKiB,WAAL,CAAiBS,mBAAjB,CAAqC,IAAI7B,sBAAJ,CAA2BE,KAA3B,EAAkC0D,gBAAgB,CAACzD,YAAnD,EAAiEC,MAAjE,EAAyE,KAAKyD,iBAAL,CAAuB3D,KAAvB,EAA8BE,MAA9B,EAAsCD,YAAtC,CAAzE,CAArC;AACH,KAPD,MAQK;AACD,WAAKiD,aAAL;AACH;;AACD,QAAII,CAAC,CAACC,UAAF,CAAa;AAAI;AAAjB,KAAJ,EAA6C;AACzC,WAAKN,8BAAL;AACH;AACJ;;AACDW,EAAAA,SAAS,CAACpB,SAAD,EAAY;AACjB,SAAKM,YAAL,CAAkBc,SAAlB,CAA4BpB,SAA5B;AACH;;AACDqB,EAAAA,cAAc,CAACC,cAAD,EAAiBC,YAAjB,EAA+B;AACzC,SAAKjB,YAAL,CAAkBe,cAAlB,CAAiCC,cAAjC,EAAiDC,YAAjD;AACH;;AACDC,EAAAA,eAAe,CAACF,cAAD,EAAiBC,YAAjB,EAA+B;AAC1C,SAAKjB,YAAL,CAAkBkB,eAAlB,CAAkCF,cAAlC,EAAkDC,YAAlD;AACH,GA5DsC,CA6DvC;;;AACAE,EAAAA,6BAA6B,CAACjE,KAAD,EAAQI,WAAR,EAAqB;AAC9C,UAAMsC,OAAO,GAAG,KAAKD,cAAL,CAAoBC,OAApC;AACA,UAAMwB,SAAS,GAAGxB,OAAO,CAACE,GAAR,CAAY;AAAG;AAAf,KAAlB;;AACA,QAAIsB,SAAS,CAACC,UAAV,KAAyB;AAAE;AAA/B,MAA6C;AACzC;AACA,aAAO,CAAP;AACH;;AACD,QAAInE,KAAK,IAAII,WAAb,EAA0B;AACtB;AACA,aAAO,CAAP;AACH;;AACD,WAAO8D,SAAS,CAACE,uBAAjB;AACH;;AACDT,EAAAA,iBAAiB,CAAC3D,KAAD,EAAQE,MAAR,EAAgBD,YAAhB,EAA8B;AAC3C,UAAMyC,OAAO,GAAG,KAAKD,cAAL,CAAoBC,OAApC;;AACA,QAAI2B,MAAM,GAAG,KAAKvB,YAAL,CAAkBwB,mBAAlB,EAAb;;AACA,QAAI5B,OAAO,CAACE,GAAR,CAAY;AAAG;AAAf,KAAJ,EAAgD;AAC5CyB,MAAAA,MAAM,IAAIhE,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYJ,MAAM,GAAGwC,OAAO,CAACE,GAAR,CAAY;AAAG;AAAf,OAAT,GAA4CF,OAAO,CAACE,GAAR,CAAY;AAAG;AAAf,QAA8BI,MAAtF,CAAV;AACH,KAFD,MAGK;AACDqB,MAAAA,MAAM,IAAI,KAAKJ,6BAAL,CAAmCjE,KAAnC,EAA0CC,YAA1C,CAAV;AACH;;AACD,WAAOoE,MAAP;AACH;;AACDnB,EAAAA,aAAa,GAAG;AACZ,UAAMQ,gBAAgB,GAAG,KAAKxC,WAAL,CAAiBQ,mBAAjB,EAAzB;;AACA,UAAM1B,KAAK,GAAG0D,gBAAgB,CAAC1D,KAA/B;AACA,UAAME,MAAM,GAAGwD,gBAAgB,CAACxD,MAAhC;AACA,UAAMD,YAAY,GAAGyD,gBAAgB,CAACzD,YAAtC;;AACA,SAAKiB,WAAL,CAAiBS,mBAAjB,CAAqC,IAAI7B,sBAAJ,CAA2BE,KAA3B,EAAkC0D,gBAAgB,CAACzD,YAAnD,EAAiEC,MAAjE,EAAyE,KAAKyD,iBAAL,CAAuB3D,KAAvB,EAA8BE,MAA9B,EAAsCD,YAAtC,CAAzE,CAArC;AACH,GA5FsC,CA6FvC;;;AACAsE,EAAAA,kBAAkB,GAAG;AACjB,UAAMb,gBAAgB,GAAG,KAAKxC,WAAL,CAAiBQ,mBAAjB,EAAzB;;AACA,UAAM8C,qBAAqB,GAAG,KAAKtD,WAAL,CAAiBgB,wBAAjB,EAA9B;;AACA,WAAO,IAAIvC,QAAJ,CAAa6E,qBAAqB,CAACC,SAAnC,EAA8CD,qBAAqB,CAACE,UAApE,EAAgFhB,gBAAgB,CAAC1D,KAAjG,EAAwG0D,gBAAgB,CAACxD,MAAzH,CAAP;AACH;;AACDyE,EAAAA,iBAAiB,GAAG;AAChB,UAAMjB,gBAAgB,GAAG,KAAKxC,WAAL,CAAiBQ,mBAAjB,EAAzB;;AACA,UAAM8C,qBAAqB,GAAG,KAAKtD,WAAL,CAAiBe,uBAAjB,EAA9B;;AACA,WAAO,IAAItC,QAAJ,CAAa6E,qBAAqB,CAACC,SAAnC,EAA8CD,qBAAqB,CAACE,UAApE,EAAgFhB,gBAAgB,CAAC1D,KAAjG,EAAwG0D,gBAAgB,CAACxD,MAAzH,CAAP;AACH;;AACD0E,EAAAA,oBAAoB,CAACC,YAAD,EAAe;AAC/B,UAAMnC,OAAO,GAAG,KAAKD,cAAL,CAAoBC,OAApC;AACA,UAAMoC,YAAY,GAAGpC,OAAO,CAACE,GAAR,CAAY;AAAI;AAAhB,KAArB;AACA,UAAMmC,QAAQ,GAAGrC,OAAO,CAACE,GAAR,CAAY;AAAG;AAAf,KAAjB;;AACA,QAAIkC,YAAY,CAACE,kBAAjB,EAAqC;AACjC,YAAMrC,UAAU,GAAGD,OAAO,CAACE,GAAR,CAAY;AAAI;AAAhB,OAAnB;AACA,YAAMqC,OAAO,GAAGvC,OAAO,CAACE,GAAR,CAAY;AAAG;AAAf,OAAhB;;AACA,UAAIiC,YAAY,GAAGlC,UAAU,CAAC1C,YAAX,GAA0B8E,QAAQ,CAACG,8BAAtD,EAAsF;AAClF;AACA,YAAID,OAAO,CAACE,OAAR,IAAmBF,OAAO,CAACG,IAAR,KAAiB,OAAxC,EAAiD;AAC7C;AACA,iBAAOP,YAAY,GAAGlC,UAAU,CAAC0C,sBAAjC;AACH;AACJ;;AACD,aAAOR,YAAP;AACH,KAXD,MAYK;AACD,YAAMS,oBAAoB,GAAG5C,OAAO,CAACE,GAAR,CAAY;AAAG;AAAf,UAA+CmC,QAAQ,CAACG,8BAArF;;AACA,YAAMK,kBAAkB,GAAG,KAAKzC,YAAL,CAAkB0C,qBAAlB,EAA3B;;AACA,aAAOnF,IAAI,CAACC,GAAL,CAASuE,YAAY,GAAGS,oBAAxB,EAA8CC,kBAA9C,CAAP;AACH;AACJ;;AACDE,EAAAA,eAAe,CAACZ,YAAD,EAAe;AAC1B,UAAMnB,gBAAgB,GAAG,KAAKxC,WAAL,CAAiBQ,mBAAjB,EAAzB,CAD0B,CAE1B;;;AACA,SAAKR,WAAL,CAAiBS,mBAAjB,CAAqC,IAAI7B,sBAAJ,CAA2B4D,gBAAgB,CAAC1D,KAA5C,EAAmD,KAAK4E,oBAAL,CAA0BC,YAA1B,CAAnD,EAA4FnB,gBAAgB,CAACxD,MAA7G,EAAqHwD,gBAAgB,CAACvD,aAAtI,CAArC,EAH0B,CAI1B;;;AACA,SAAK+C,aAAL;AACH,GApIsC,CAqIvC;;;AACAwC,EAAAA,SAAS,GAAG;AACR,UAAMlB,qBAAqB,GAAG,KAAKtD,WAAL,CAAiBe,uBAAjB,EAA9B;;AACA,UAAMwC,SAAS,GAAGD,qBAAqB,CAACC,SAAxC;;AACA,UAAMkB,yBAAyB,GAAG,KAAK7C,YAAL,CAAkB8C,oCAAlB,CAAuDnB,SAAvD,CAAlC;;AACA,UAAMoB,wBAAwB,GAAG,KAAK/C,YAAL,CAAkBgD,8CAAlB,CAAiEH,yBAAjE,CAAjC;;AACA,WAAO;AACHlB,MAAAA,SAAS,EAAEA,SADR;AAEHsB,MAAAA,yBAAyB,EAAEtB,SAAS,GAAGoB,wBAFpC;AAGHnB,MAAAA,UAAU,EAAEF,qBAAqB,CAACE;AAH/B,KAAP;AAKH,GAhJsC,CAiJvC;;;AACAsB,EAAAA,gBAAgB,CAACC,QAAD,EAAW;AACvB,UAAMC,UAAU,GAAG,KAAKpD,YAAL,CAAkBkD,gBAAlB,CAAmCC,QAAnC,CAAnB;;AACA,QAAIC,UAAJ,EAAgB;AACZ,WAAK9C,oBAAL;AACH;;AACD,WAAO8C,UAAP;AACH;;AACDC,EAAAA,8BAA8B,CAACC,UAAD,EAAa;AACvC,WAAO,KAAKtD,YAAL,CAAkBqD,8BAAlB,CAAiDC,UAAjD,CAAP;AACH;;AACDC,EAAAA,YAAY,CAACC,cAAD,EAAiB;AACzB,WAAO,KAAKxD,YAAL,CAAkBuD,YAAlB,CAA+BC,cAA/B,CAAP;AACH;;AACDC,EAAAA,cAAc,CAACD,cAAD,EAAiB;AAC3B,WAAO,KAAKxD,YAAL,CAAkByD,cAAlB,CAAiCD,cAAjC,CAAP;AACH;;AACDE,EAAAA,iBAAiB,CAACF,cAAD,EAAiB;AAC9B,WAAO,KAAKxD,YAAL,CAAkB0D,iBAAlB,CAAoCF,cAApC,CAAP;AACH;;AACDG,EAAAA,6BAA6B,CAACH,cAAD,EAAiB;AAC1C,WAAO,KAAKxD,YAAL,CAAkB8C,oCAAlB,CAAuDU,cAAvD,CAAP;AACH;;AACDI,EAAAA,6BAA6B,CAACJ,cAAD,EAAiB;AAC1C,WAAO,KAAKxD,YAAL,CAAkB4D,6BAAlB,CAAgDJ,cAAhD,CAAP;AACH;;AACDK,EAAAA,oBAAoB,GAAG;AACnB,UAAMC,UAAU,GAAG,KAAKrC,kBAAL,EAAnB;AACA,WAAO,KAAKzB,YAAL,CAAkB6D,oBAAlB,CAAuCC,UAAU,CAAC7D,GAAlD,EAAuD6D,UAAU,CAAC7D,GAAX,GAAiB6D,UAAU,CAAC1G,MAAnF,CAAP;AACH;;AACD2G,EAAAA,+BAA+B,CAACpC,SAAD,EAAY;AACvC;AACA,UAAMf,gBAAgB,GAAG,KAAKxC,WAAL,CAAiBQ,mBAAjB,EAAzB;;AACA,QAAI+C,SAAS,GAAGf,gBAAgB,CAACxD,MAA7B,GAAsCwD,gBAAgB,CAACnD,YAA3D,EAAyE;AACrEkE,MAAAA,SAAS,GAAGf,gBAAgB,CAACnD,YAAjB,GAAgCmD,gBAAgB,CAACxD,MAA7D;AACH;;AACD,QAAIuE,SAAS,GAAG,CAAhB,EAAmB;AACfA,MAAAA,SAAS,GAAG,CAAZ;AACH;;AACD,WAAO,KAAK3B,YAAL,CAAkB6D,oBAAlB,CAAuClC,SAAvC,EAAkDA,SAAS,GAAGf,gBAAgB,CAACxD,MAA/E,CAAP;AACH;;AACD4G,EAAAA,yBAAyB,GAAG;AACxB,UAAMF,UAAU,GAAG,KAAKrC,kBAAL,EAAnB;AACA,WAAO,KAAKzB,YAAL,CAAkBgE,yBAAlB,CAA4CF,UAAU,CAAC7D,GAAvD,EAA4D6D,UAAU,CAAC7D,GAAX,GAAiB6D,UAAU,CAAC1G,MAAxF,CAAP;AACH;;AACD6G,EAAAA,cAAc,GAAG;AACb,WAAO,KAAKjE,YAAL,CAAkBiE,cAAlB,EAAP;AACH,GAhMsC,CAiMvC;;;AACAC,EAAAA,eAAe,GAAG;AACd,UAAMtD,gBAAgB,GAAG,KAAKxC,WAAL,CAAiBQ,mBAAjB,EAAzB;;AACA,WAAOgC,gBAAgB,CAACzD,YAAxB;AACH;;AACDgH,EAAAA,cAAc,GAAG;AACb,UAAMvD,gBAAgB,GAAG,KAAKxC,WAAL,CAAiBQ,mBAAjB,EAAzB;;AACA,WAAOgC,gBAAgB,CAACtD,WAAxB;AACH;;AACD8G,EAAAA,gBAAgB,GAAG;AACf,UAAMxD,gBAAgB,GAAG,KAAKxC,WAAL,CAAiBQ,mBAAjB,EAAzB;;AACA,WAAOgC,gBAAgB,CAACvD,aAAxB;AACH;;AACDgH,EAAAA,eAAe,GAAG;AACd,UAAMzD,gBAAgB,GAAG,KAAKxC,WAAL,CAAiBQ,mBAAjB,EAAzB;;AACA,WAAOgC,gBAAgB,CAACnD,YAAxB;AACH;;AACD6G,EAAAA,oBAAoB,GAAG;AACnB,UAAM5C,qBAAqB,GAAG,KAAKtD,WAAL,CAAiBgB,wBAAjB,EAA9B;;AACA,WAAOsC,qBAAqB,CAACE,UAA7B;AACH;;AACD2C,EAAAA,mBAAmB,GAAG;AAClB,UAAM7C,qBAAqB,GAAG,KAAKtD,WAAL,CAAiBgB,wBAAjB,EAA9B;;AACA,WAAOsC,qBAAqB,CAACC,SAA7B;AACH;;AACDjD,EAAAA,sBAAsB,CAACC,cAAD,EAAiB;AACnC,WAAO,KAAKP,WAAL,CAAiBM,sBAAjB,CAAwCC,cAAxC,CAAP;AACH;;AACD6F,EAAAA,iBAAiB,CAACC,QAAD,EAAWC,IAAX,EAAiB;AAC9B,QAAIA,IAAI,KAAK;AAAE;AAAf,MAAgC;AAC5B,WAAKtG,WAAL,CAAiBiB,oBAAjB,CAAsCoF,QAAtC;AACH,KAFD,MAGK;AACD,WAAKrG,WAAL,CAAiBmB,uBAAjB,CAAyCkF,QAAzC;AACH;AACJ;;AACDE,EAAAA,cAAc,CAACC,eAAD,EAAkBC,cAAlB,EAAkC;AAC5C,UAAMnD,qBAAqB,GAAG,KAAKtD,WAAL,CAAiBgB,wBAAjB,EAA9B;;AACA,SAAKhB,WAAL,CAAiBiB,oBAAjB,CAAsC;AAClCuC,MAAAA,UAAU,EAAEF,qBAAqB,CAACE,UAAtB,GAAmCgD,eADb;AAElCjD,MAAAA,SAAS,EAAED,qBAAqB,CAACC,SAAtB,GAAkCkD;AAFX,KAAtC;AAIH;;AA3OsC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { Scrollable } from '../../../base/common/scrollable.js';\nimport { LinesLayout } from './linesLayout.js';\nimport { Viewport } from '../viewModel/viewModel.js';\nimport { ContentSizeChangedEvent } from '../viewModel/viewModelEventDispatcher.js';\nconst SMOOTH_SCROLLING_TIME = 125;\nclass EditorScrollDimensions {\n    constructor(width, contentWidth, height, contentHeight) {\n        width = width | 0;\n        contentWidth = contentWidth | 0;\n        height = height | 0;\n        contentHeight = contentHeight | 0;\n        if (width < 0) {\n            width = 0;\n        }\n        if (contentWidth < 0) {\n            contentWidth = 0;\n        }\n        if (height < 0) {\n            height = 0;\n        }\n        if (contentHeight < 0) {\n            contentHeight = 0;\n        }\n        this.width = width;\n        this.contentWidth = contentWidth;\n        this.scrollWidth = Math.max(width, contentWidth);\n        this.height = height;\n        this.contentHeight = contentHeight;\n        this.scrollHeight = Math.max(height, contentHeight);\n    }\n    equals(other) {\n        return (this.width === other.width\n            && this.contentWidth === other.contentWidth\n            && this.height === other.height\n            && this.contentHeight === other.contentHeight);\n    }\n}\nclass EditorScrollable extends Disposable {\n    constructor(smoothScrollDuration, scheduleAtNextAnimationFrame) {\n        super();\n        this._onDidContentSizeChange = this._register(new Emitter());\n        this.onDidContentSizeChange = this._onDidContentSizeChange.event;\n        this._dimensions = new EditorScrollDimensions(0, 0, 0, 0);\n        this._scrollable = this._register(new Scrollable({\n            forceIntegerValues: true,\n            smoothScrollDuration,\n            scheduleAtNextAnimationFrame\n        }));\n        this.onDidScroll = this._scrollable.onScroll;\n    }\n    getScrollable() {\n        return this._scrollable;\n    }\n    setSmoothScrollDuration(smoothScrollDuration) {\n        this._scrollable.setSmoothScrollDuration(smoothScrollDuration);\n    }\n    validateScrollPosition(scrollPosition) {\n        return this._scrollable.validateScrollPosition(scrollPosition);\n    }\n    getScrollDimensions() {\n        return this._dimensions;\n    }\n    setScrollDimensions(dimensions) {\n        if (this._dimensions.equals(dimensions)) {\n            return;\n        }\n        const oldDimensions = this._dimensions;\n        this._dimensions = dimensions;\n        this._scrollable.setScrollDimensions({\n            width: dimensions.width,\n            scrollWidth: dimensions.scrollWidth,\n            height: dimensions.height,\n            scrollHeight: dimensions.scrollHeight\n        }, true);\n        const contentWidthChanged = (oldDimensions.contentWidth !== dimensions.contentWidth);\n        const contentHeightChanged = (oldDimensions.contentHeight !== dimensions.contentHeight);\n        if (contentWidthChanged || contentHeightChanged) {\n            this._onDidContentSizeChange.fire(new ContentSizeChangedEvent(oldDimensions.contentWidth, oldDimensions.contentHeight, dimensions.contentWidth, dimensions.contentHeight));\n        }\n    }\n    getFutureScrollPosition() {\n        return this._scrollable.getFutureScrollPosition();\n    }\n    getCurrentScrollPosition() {\n        return this._scrollable.getCurrentScrollPosition();\n    }\n    setScrollPositionNow(update) {\n        this._scrollable.setScrollPositionNow(update);\n    }\n    setScrollPositionSmooth(update) {\n        this._scrollable.setScrollPositionSmooth(update);\n    }\n}\nexport class ViewLayout extends Disposable {\n    constructor(configuration, lineCount, scheduleAtNextAnimationFrame) {\n        super();\n        this._configuration = configuration;\n        const options = this._configuration.options;\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        const padding = options.get(75 /* padding */);\n        this._linesLayout = new LinesLayout(lineCount, options.get(59 /* lineHeight */), padding.top, padding.bottom);\n        this._scrollable = this._register(new EditorScrollable(0, scheduleAtNextAnimationFrame));\n        this._configureSmoothScrollDuration();\n        this._scrollable.setScrollDimensions(new EditorScrollDimensions(layoutInfo.contentWidth, 0, layoutInfo.height, 0));\n        this.onDidScroll = this._scrollable.onDidScroll;\n        this.onDidContentSizeChange = this._scrollable.onDidContentSizeChange;\n        this._updateHeight();\n    }\n    dispose() {\n        super.dispose();\n    }\n    getScrollable() {\n        return this._scrollable.getScrollable();\n    }\n    onHeightMaybeChanged() {\n        this._updateHeight();\n    }\n    _configureSmoothScrollDuration() {\n        this._scrollable.setSmoothScrollDuration(this._configuration.options.get(103 /* smoothScrolling */) ? SMOOTH_SCROLLING_TIME : 0);\n    }\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        const options = this._configuration.options;\n        if (e.hasChanged(59 /* lineHeight */)) {\n            this._linesLayout.setLineHeight(options.get(59 /* lineHeight */));\n        }\n        if (e.hasChanged(75 /* padding */)) {\n            const padding = options.get(75 /* padding */);\n            this._linesLayout.setPadding(padding.top, padding.bottom);\n        }\n        if (e.hasChanged(131 /* layoutInfo */)) {\n            const layoutInfo = options.get(131 /* layoutInfo */);\n            const width = layoutInfo.contentWidth;\n            const height = layoutInfo.height;\n            const scrollDimensions = this._scrollable.getScrollDimensions();\n            const contentWidth = scrollDimensions.contentWidth;\n            this._scrollable.setScrollDimensions(new EditorScrollDimensions(width, scrollDimensions.contentWidth, height, this._getContentHeight(width, height, contentWidth)));\n        }\n        else {\n            this._updateHeight();\n        }\n        if (e.hasChanged(103 /* smoothScrolling */)) {\n            this._configureSmoothScrollDuration();\n        }\n    }\n    onFlushed(lineCount) {\n        this._linesLayout.onFlushed(lineCount);\n    }\n    onLinesDeleted(fromLineNumber, toLineNumber) {\n        this._linesLayout.onLinesDeleted(fromLineNumber, toLineNumber);\n    }\n    onLinesInserted(fromLineNumber, toLineNumber) {\n        this._linesLayout.onLinesInserted(fromLineNumber, toLineNumber);\n    }\n    // ---- end view event handlers\n    _getHorizontalScrollbarHeight(width, scrollWidth) {\n        const options = this._configuration.options;\n        const scrollbar = options.get(92 /* scrollbar */);\n        if (scrollbar.horizontal === 2 /* Hidden */) {\n            // horizontal scrollbar not visible\n            return 0;\n        }\n        if (width >= scrollWidth) {\n            // horizontal scrollbar not visible\n            return 0;\n        }\n        return scrollbar.horizontalScrollbarSize;\n    }\n    _getContentHeight(width, height, contentWidth) {\n        const options = this._configuration.options;\n        let result = this._linesLayout.getLinesTotalHeight();\n        if (options.get(94 /* scrollBeyondLastLine */)) {\n            result += Math.max(0, height - options.get(59 /* lineHeight */) - options.get(75 /* padding */).bottom);\n        }\n        else {\n            result += this._getHorizontalScrollbarHeight(width, contentWidth);\n        }\n        return result;\n    }\n    _updateHeight() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        const width = scrollDimensions.width;\n        const height = scrollDimensions.height;\n        const contentWidth = scrollDimensions.contentWidth;\n        this._scrollable.setScrollDimensions(new EditorScrollDimensions(width, scrollDimensions.contentWidth, height, this._getContentHeight(width, height, contentWidth)));\n    }\n    // ---- Layouting logic\n    getCurrentViewport() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n        return new Viewport(currentScrollPosition.scrollTop, currentScrollPosition.scrollLeft, scrollDimensions.width, scrollDimensions.height);\n    }\n    getFutureViewport() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        const currentScrollPosition = this._scrollable.getFutureScrollPosition();\n        return new Viewport(currentScrollPosition.scrollTop, currentScrollPosition.scrollLeft, scrollDimensions.width, scrollDimensions.height);\n    }\n    _computeContentWidth(maxLineWidth) {\n        const options = this._configuration.options;\n        const wrappingInfo = options.get(132 /* wrappingInfo */);\n        const fontInfo = options.get(44 /* fontInfo */);\n        if (wrappingInfo.isViewportWrapping) {\n            const layoutInfo = options.get(131 /* layoutInfo */);\n            const minimap = options.get(65 /* minimap */);\n            if (maxLineWidth > layoutInfo.contentWidth + fontInfo.typicalHalfwidthCharacterWidth) {\n                // This is a case where viewport wrapping is on, but the line extends above the viewport\n                if (minimap.enabled && minimap.side === 'right') {\n                    // We need to accomodate the scrollbar width\n                    return maxLineWidth + layoutInfo.verticalScrollbarWidth;\n                }\n            }\n            return maxLineWidth;\n        }\n        else {\n            const extraHorizontalSpace = options.get(93 /* scrollBeyondLastColumn */) * fontInfo.typicalHalfwidthCharacterWidth;\n            const whitespaceMinWidth = this._linesLayout.getWhitespaceMinWidth();\n            return Math.max(maxLineWidth + extraHorizontalSpace, whitespaceMinWidth);\n        }\n    }\n    setMaxLineWidth(maxLineWidth) {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        // const newScrollWidth = ;\n        this._scrollable.setScrollDimensions(new EditorScrollDimensions(scrollDimensions.width, this._computeContentWidth(maxLineWidth), scrollDimensions.height, scrollDimensions.contentHeight));\n        // The height might depend on the fact that there is a horizontal scrollbar or not\n        this._updateHeight();\n    }\n    // ---- view state\n    saveState() {\n        const currentScrollPosition = this._scrollable.getFutureScrollPosition();\n        const scrollTop = currentScrollPosition.scrollTop;\n        const firstLineNumberInViewport = this._linesLayout.getLineNumberAtOrAfterVerticalOffset(scrollTop);\n        const whitespaceAboveFirstLine = this._linesLayout.getWhitespaceAccumulatedHeightBeforeLineNumber(firstLineNumberInViewport);\n        return {\n            scrollTop: scrollTop,\n            scrollTopWithoutViewZones: scrollTop - whitespaceAboveFirstLine,\n            scrollLeft: currentScrollPosition.scrollLeft\n        };\n    }\n    // ---- IVerticalLayoutProvider\n    changeWhitespace(callback) {\n        const hadAChange = this._linesLayout.changeWhitespace(callback);\n        if (hadAChange) {\n            this.onHeightMaybeChanged();\n        }\n        return hadAChange;\n    }\n    getVerticalOffsetForLineNumber(lineNumber) {\n        return this._linesLayout.getVerticalOffsetForLineNumber(lineNumber);\n    }\n    isAfterLines(verticalOffset) {\n        return this._linesLayout.isAfterLines(verticalOffset);\n    }\n    isInTopPadding(verticalOffset) {\n        return this._linesLayout.isInTopPadding(verticalOffset);\n    }\n    isInBottomPadding(verticalOffset) {\n        return this._linesLayout.isInBottomPadding(verticalOffset);\n    }\n    getLineNumberAtVerticalOffset(verticalOffset) {\n        return this._linesLayout.getLineNumberAtOrAfterVerticalOffset(verticalOffset);\n    }\n    getWhitespaceAtVerticalOffset(verticalOffset) {\n        return this._linesLayout.getWhitespaceAtVerticalOffset(verticalOffset);\n    }\n    getLinesViewportData() {\n        const visibleBox = this.getCurrentViewport();\n        return this._linesLayout.getLinesViewportData(visibleBox.top, visibleBox.top + visibleBox.height);\n    }\n    getLinesViewportDataAtScrollTop(scrollTop) {\n        // do some minimal validations on scrollTop\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        if (scrollTop + scrollDimensions.height > scrollDimensions.scrollHeight) {\n            scrollTop = scrollDimensions.scrollHeight - scrollDimensions.height;\n        }\n        if (scrollTop < 0) {\n            scrollTop = 0;\n        }\n        return this._linesLayout.getLinesViewportData(scrollTop, scrollTop + scrollDimensions.height);\n    }\n    getWhitespaceViewportData() {\n        const visibleBox = this.getCurrentViewport();\n        return this._linesLayout.getWhitespaceViewportData(visibleBox.top, visibleBox.top + visibleBox.height);\n    }\n    getWhitespaces() {\n        return this._linesLayout.getWhitespaces();\n    }\n    // ---- IScrollingProvider\n    getContentWidth() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        return scrollDimensions.contentWidth;\n    }\n    getScrollWidth() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        return scrollDimensions.scrollWidth;\n    }\n    getContentHeight() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        return scrollDimensions.contentHeight;\n    }\n    getScrollHeight() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        return scrollDimensions.scrollHeight;\n    }\n    getCurrentScrollLeft() {\n        const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n        return currentScrollPosition.scrollLeft;\n    }\n    getCurrentScrollTop() {\n        const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n        return currentScrollPosition.scrollTop;\n    }\n    validateScrollPosition(scrollPosition) {\n        return this._scrollable.validateScrollPosition(scrollPosition);\n    }\n    setScrollPosition(position, type) {\n        if (type === 1 /* Immediate */) {\n            this._scrollable.setScrollPositionNow(position);\n        }\n        else {\n            this._scrollable.setScrollPositionSmooth(position);\n        }\n    }\n    deltaScrollNow(deltaScrollLeft, deltaScrollTop) {\n        const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n        this._scrollable.setScrollPositionNow({\n            scrollLeft: currentScrollPosition.scrollLeft + deltaScrollLeft,\n            scrollTop: currentScrollPosition.scrollTop + deltaScrollTop\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}