{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Selection } from '../core/selection.js';\nexport class ReplaceCommand {\n  constructor(range, text, insertsAutoWhitespace = false) {\n    this._range = range;\n    this._text = text;\n    this.insertsAutoWhitespace = insertsAutoWhitespace;\n  }\n\n  getEditOperations(model, builder) {\n    builder.addTrackedEditOperation(this._range, this._text);\n  }\n\n  computeCursorState(model, helper) {\n    const inverseEditOperations = helper.getInverseEditOperations();\n    const srcRange = inverseEditOperations[0].range;\n    return Selection.fromPositions(srcRange.getEndPosition());\n  }\n\n}\nexport class ReplaceCommandThatSelectsText {\n  constructor(range, text) {\n    this._range = range;\n    this._text = text;\n  }\n\n  getEditOperations(model, builder) {\n    builder.addTrackedEditOperation(this._range, this._text);\n  }\n\n  computeCursorState(model, helper) {\n    const inverseEditOperations = helper.getInverseEditOperations();\n    const srcRange = inverseEditOperations[0].range;\n    return Selection.fromRange(srcRange, 0\n    /* LTR */\n    );\n  }\n\n}\nexport class ReplaceCommandWithoutChangingPosition {\n  constructor(range, text, insertsAutoWhitespace = false) {\n    this._range = range;\n    this._text = text;\n    this.insertsAutoWhitespace = insertsAutoWhitespace;\n  }\n\n  getEditOperations(model, builder) {\n    builder.addTrackedEditOperation(this._range, this._text);\n  }\n\n  computeCursorState(model, helper) {\n    const inverseEditOperations = helper.getInverseEditOperations();\n    const srcRange = inverseEditOperations[0].range;\n    return Selection.fromPositions(srcRange.getStartPosition());\n  }\n\n}\nexport class ReplaceCommandWithOffsetCursorState {\n  constructor(range, text, lineNumberDeltaOffset, columnDeltaOffset, insertsAutoWhitespace = false) {\n    this._range = range;\n    this._text = text;\n    this._columnDeltaOffset = columnDeltaOffset;\n    this._lineNumberDeltaOffset = lineNumberDeltaOffset;\n    this.insertsAutoWhitespace = insertsAutoWhitespace;\n  }\n\n  getEditOperations(model, builder) {\n    builder.addTrackedEditOperation(this._range, this._text);\n  }\n\n  computeCursorState(model, helper) {\n    const inverseEditOperations = helper.getInverseEditOperations();\n    const srcRange = inverseEditOperations[0].range;\n    return Selection.fromPositions(srcRange.getEndPosition().delta(this._lineNumberDeltaOffset, this._columnDeltaOffset));\n  }\n\n}\nexport class ReplaceCommandThatPreservesSelection {\n  constructor(editRange, text, initialSelection, forceMoveMarkers = false) {\n    this._range = editRange;\n    this._text = text;\n    this._initialSelection = initialSelection;\n    this._forceMoveMarkers = forceMoveMarkers;\n    this._selectionId = null;\n  }\n\n  getEditOperations(model, builder) {\n    builder.addTrackedEditOperation(this._range, this._text, this._forceMoveMarkers);\n    this._selectionId = builder.trackSelection(this._initialSelection);\n  }\n\n  computeCursorState(model, helper) {\n    return helper.getTrackedSelection(this._selectionId);\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/common/commands/replaceCommand.js"],"names":["Selection","ReplaceCommand","constructor","range","text","insertsAutoWhitespace","_range","_text","getEditOperations","model","builder","addTrackedEditOperation","computeCursorState","helper","inverseEditOperations","getInverseEditOperations","srcRange","fromPositions","getEndPosition","ReplaceCommandThatSelectsText","fromRange","ReplaceCommandWithoutChangingPosition","getStartPosition","ReplaceCommandWithOffsetCursorState","lineNumberDeltaOffset","columnDeltaOffset","_columnDeltaOffset","_lineNumberDeltaOffset","delta","ReplaceCommandThatPreservesSelection","editRange","initialSelection","forceMoveMarkers","_initialSelection","_forceMoveMarkers","_selectionId","trackSelection","getTrackedSelection"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Selection } from '../core/selection.js';\nexport class ReplaceCommand {\n    constructor(range, text, insertsAutoWhitespace = false) {\n        this._range = range;\n        this._text = text;\n        this.insertsAutoWhitespace = insertsAutoWhitespace;\n    }\n    getEditOperations(model, builder) {\n        builder.addTrackedEditOperation(this._range, this._text);\n    }\n    computeCursorState(model, helper) {\n        const inverseEditOperations = helper.getInverseEditOperations();\n        const srcRange = inverseEditOperations[0].range;\n        return Selection.fromPositions(srcRange.getEndPosition());\n    }\n}\nexport class ReplaceCommandThatSelectsText {\n    constructor(range, text) {\n        this._range = range;\n        this._text = text;\n    }\n    getEditOperations(model, builder) {\n        builder.addTrackedEditOperation(this._range, this._text);\n    }\n    computeCursorState(model, helper) {\n        const inverseEditOperations = helper.getInverseEditOperations();\n        const srcRange = inverseEditOperations[0].range;\n        return Selection.fromRange(srcRange, 0 /* LTR */);\n    }\n}\nexport class ReplaceCommandWithoutChangingPosition {\n    constructor(range, text, insertsAutoWhitespace = false) {\n        this._range = range;\n        this._text = text;\n        this.insertsAutoWhitespace = insertsAutoWhitespace;\n    }\n    getEditOperations(model, builder) {\n        builder.addTrackedEditOperation(this._range, this._text);\n    }\n    computeCursorState(model, helper) {\n        const inverseEditOperations = helper.getInverseEditOperations();\n        const srcRange = inverseEditOperations[0].range;\n        return Selection.fromPositions(srcRange.getStartPosition());\n    }\n}\nexport class ReplaceCommandWithOffsetCursorState {\n    constructor(range, text, lineNumberDeltaOffset, columnDeltaOffset, insertsAutoWhitespace = false) {\n        this._range = range;\n        this._text = text;\n        this._columnDeltaOffset = columnDeltaOffset;\n        this._lineNumberDeltaOffset = lineNumberDeltaOffset;\n        this.insertsAutoWhitespace = insertsAutoWhitespace;\n    }\n    getEditOperations(model, builder) {\n        builder.addTrackedEditOperation(this._range, this._text);\n    }\n    computeCursorState(model, helper) {\n        const inverseEditOperations = helper.getInverseEditOperations();\n        const srcRange = inverseEditOperations[0].range;\n        return Selection.fromPositions(srcRange.getEndPosition().delta(this._lineNumberDeltaOffset, this._columnDeltaOffset));\n    }\n}\nexport class ReplaceCommandThatPreservesSelection {\n    constructor(editRange, text, initialSelection, forceMoveMarkers = false) {\n        this._range = editRange;\n        this._text = text;\n        this._initialSelection = initialSelection;\n        this._forceMoveMarkers = forceMoveMarkers;\n        this._selectionId = null;\n    }\n    getEditOperations(model, builder) {\n        builder.addTrackedEditOperation(this._range, this._text, this._forceMoveMarkers);\n        this._selectionId = builder.trackSelection(this._initialSelection);\n    }\n    computeCursorState(model, helper) {\n        return helper.getTrackedSelection(this._selectionId);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}