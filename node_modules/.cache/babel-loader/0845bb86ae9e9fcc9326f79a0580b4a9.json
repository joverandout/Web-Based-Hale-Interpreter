{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { illegalArgument } from './errors.js';\nexport function createKeybinding(keybinding, OS) {\n  if (keybinding === 0) {\n    return null;\n  }\n\n  const firstPart = (keybinding & 0x0000FFFF) >>> 0;\n  const chordPart = (keybinding & 0xFFFF0000) >>> 16;\n\n  if (chordPart !== 0) {\n    return new ChordKeybinding([createSimpleKeybinding(firstPart, OS), createSimpleKeybinding(chordPart, OS)]);\n  }\n\n  return new ChordKeybinding([createSimpleKeybinding(firstPart, OS)]);\n}\nexport function createSimpleKeybinding(keybinding, OS) {\n  const ctrlCmd = keybinding & 2048\n  /* CtrlCmd */\n  ? true : false;\n  const winCtrl = keybinding & 256\n  /* WinCtrl */\n  ? true : false;\n  const ctrlKey = OS === 2\n  /* Macintosh */\n  ? winCtrl : ctrlCmd;\n  const shiftKey = keybinding & 1024\n  /* Shift */\n  ? true : false;\n  const altKey = keybinding & 512\n  /* Alt */\n  ? true : false;\n  const metaKey = OS === 2\n  /* Macintosh */\n  ? ctrlCmd : winCtrl;\n  const keyCode = keybinding & 255\n  /* KeyCode */\n  ;\n  return new SimpleKeybinding(ctrlKey, shiftKey, altKey, metaKey, keyCode);\n}\nexport class SimpleKeybinding {\n  constructor(ctrlKey, shiftKey, altKey, metaKey, keyCode) {\n    this.ctrlKey = ctrlKey;\n    this.shiftKey = shiftKey;\n    this.altKey = altKey;\n    this.metaKey = metaKey;\n    this.keyCode = keyCode;\n  }\n\n  equals(other) {\n    return this.ctrlKey === other.ctrlKey && this.shiftKey === other.shiftKey && this.altKey === other.altKey && this.metaKey === other.metaKey && this.keyCode === other.keyCode;\n  }\n\n  isModifierKey() {\n    return this.keyCode === 0\n    /* Unknown */\n    || this.keyCode === 5\n    /* Ctrl */\n    || this.keyCode === 57\n    /* Meta */\n    || this.keyCode === 6\n    /* Alt */\n    || this.keyCode === 4\n    /* Shift */\n    ;\n  }\n\n  toChord() {\n    return new ChordKeybinding([this]);\n  }\n  /**\n   * Does this keybinding refer to the key code of a modifier and it also has the modifier flag?\n   */\n\n\n  isDuplicateModifierCase() {\n    return this.ctrlKey && this.keyCode === 5\n    /* Ctrl */\n    || this.shiftKey && this.keyCode === 4\n    /* Shift */\n    || this.altKey && this.keyCode === 6\n    /* Alt */\n    || this.metaKey && this.keyCode === 57\n    /* Meta */\n    ;\n  }\n\n}\nexport class ChordKeybinding {\n  constructor(parts) {\n    if (parts.length === 0) {\n      throw illegalArgument(`parts`);\n    }\n\n    this.parts = parts;\n  }\n\n}\nexport class ScanCodeBinding {\n  constructor(ctrlKey, shiftKey, altKey, metaKey, scanCode) {\n    this.ctrlKey = ctrlKey;\n    this.shiftKey = shiftKey;\n    this.altKey = altKey;\n    this.metaKey = metaKey;\n    this.scanCode = scanCode;\n  }\n  /**\n   * Does this keybinding refer to the key code of a modifier and it also has the modifier flag?\n   */\n\n\n  isDuplicateModifierCase() {\n    return this.ctrlKey && (this.scanCode === 157\n    /* ControlLeft */\n    || this.scanCode === 161\n    /* ControlRight */\n    ) || this.shiftKey && (this.scanCode === 158\n    /* ShiftLeft */\n    || this.scanCode === 162\n    /* ShiftRight */\n    ) || this.altKey && (this.scanCode === 159\n    /* AltLeft */\n    || this.scanCode === 163\n    /* AltRight */\n    ) || this.metaKey && (this.scanCode === 160\n    /* MetaLeft */\n    || this.scanCode === 164\n    /* MetaRight */\n    );\n  }\n\n}\nexport class ResolvedKeybindingPart {\n  constructor(ctrlKey, shiftKey, altKey, metaKey, kbLabel, kbAriaLabel) {\n    this.ctrlKey = ctrlKey;\n    this.shiftKey = shiftKey;\n    this.altKey = altKey;\n    this.metaKey = metaKey;\n    this.keyLabel = kbLabel;\n    this.keyAriaLabel = kbAriaLabel;\n  }\n\n}\n/**\n * A resolved keybinding. Can be a simple keybinding or a chord keybinding.\n */\n\nexport class ResolvedKeybinding {}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/base/common/keybindings.js"],"names":["illegalArgument","createKeybinding","keybinding","OS","firstPart","chordPart","ChordKeybinding","createSimpleKeybinding","ctrlCmd","winCtrl","ctrlKey","shiftKey","altKey","metaKey","keyCode","SimpleKeybinding","constructor","equals","other","isModifierKey","toChord","isDuplicateModifierCase","parts","length","ScanCodeBinding","scanCode","ResolvedKeybindingPart","kbLabel","kbAriaLabel","keyLabel","keyAriaLabel","ResolvedKeybinding"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { illegalArgument } from './errors.js';\nexport function createKeybinding(keybinding, OS) {\n    if (keybinding === 0) {\n        return null;\n    }\n    const firstPart = (keybinding & 0x0000FFFF) >>> 0;\n    const chordPart = (keybinding & 0xFFFF0000) >>> 16;\n    if (chordPart !== 0) {\n        return new ChordKeybinding([\n            createSimpleKeybinding(firstPart, OS),\n            createSimpleKeybinding(chordPart, OS)\n        ]);\n    }\n    return new ChordKeybinding([createSimpleKeybinding(firstPart, OS)]);\n}\nexport function createSimpleKeybinding(keybinding, OS) {\n    const ctrlCmd = (keybinding & 2048 /* CtrlCmd */ ? true : false);\n    const winCtrl = (keybinding & 256 /* WinCtrl */ ? true : false);\n    const ctrlKey = (OS === 2 /* Macintosh */ ? winCtrl : ctrlCmd);\n    const shiftKey = (keybinding & 1024 /* Shift */ ? true : false);\n    const altKey = (keybinding & 512 /* Alt */ ? true : false);\n    const metaKey = (OS === 2 /* Macintosh */ ? ctrlCmd : winCtrl);\n    const keyCode = (keybinding & 255 /* KeyCode */);\n    return new SimpleKeybinding(ctrlKey, shiftKey, altKey, metaKey, keyCode);\n}\nexport class SimpleKeybinding {\n    constructor(ctrlKey, shiftKey, altKey, metaKey, keyCode) {\n        this.ctrlKey = ctrlKey;\n        this.shiftKey = shiftKey;\n        this.altKey = altKey;\n        this.metaKey = metaKey;\n        this.keyCode = keyCode;\n    }\n    equals(other) {\n        return (this.ctrlKey === other.ctrlKey\n            && this.shiftKey === other.shiftKey\n            && this.altKey === other.altKey\n            && this.metaKey === other.metaKey\n            && this.keyCode === other.keyCode);\n    }\n    isModifierKey() {\n        return (this.keyCode === 0 /* Unknown */\n            || this.keyCode === 5 /* Ctrl */\n            || this.keyCode === 57 /* Meta */\n            || this.keyCode === 6 /* Alt */\n            || this.keyCode === 4 /* Shift */);\n    }\n    toChord() {\n        return new ChordKeybinding([this]);\n    }\n    /**\n     * Does this keybinding refer to the key code of a modifier and it also has the modifier flag?\n     */\n    isDuplicateModifierCase() {\n        return ((this.ctrlKey && this.keyCode === 5 /* Ctrl */)\n            || (this.shiftKey && this.keyCode === 4 /* Shift */)\n            || (this.altKey && this.keyCode === 6 /* Alt */)\n            || (this.metaKey && this.keyCode === 57 /* Meta */));\n    }\n}\nexport class ChordKeybinding {\n    constructor(parts) {\n        if (parts.length === 0) {\n            throw illegalArgument(`parts`);\n        }\n        this.parts = parts;\n    }\n}\nexport class ScanCodeBinding {\n    constructor(ctrlKey, shiftKey, altKey, metaKey, scanCode) {\n        this.ctrlKey = ctrlKey;\n        this.shiftKey = shiftKey;\n        this.altKey = altKey;\n        this.metaKey = metaKey;\n        this.scanCode = scanCode;\n    }\n    /**\n     * Does this keybinding refer to the key code of a modifier and it also has the modifier flag?\n     */\n    isDuplicateModifierCase() {\n        return ((this.ctrlKey && (this.scanCode === 157 /* ControlLeft */ || this.scanCode === 161 /* ControlRight */))\n            || (this.shiftKey && (this.scanCode === 158 /* ShiftLeft */ || this.scanCode === 162 /* ShiftRight */))\n            || (this.altKey && (this.scanCode === 159 /* AltLeft */ || this.scanCode === 163 /* AltRight */))\n            || (this.metaKey && (this.scanCode === 160 /* MetaLeft */ || this.scanCode === 164 /* MetaRight */)));\n    }\n}\nexport class ResolvedKeybindingPart {\n    constructor(ctrlKey, shiftKey, altKey, metaKey, kbLabel, kbAriaLabel) {\n        this.ctrlKey = ctrlKey;\n        this.shiftKey = shiftKey;\n        this.altKey = altKey;\n        this.metaKey = metaKey;\n        this.keyLabel = kbLabel;\n        this.keyAriaLabel = kbAriaLabel;\n    }\n}\n/**\n * A resolved keybinding. Can be a simple keybinding or a chord keybinding.\n */\nexport class ResolvedKeybinding {\n}\n"]},"metadata":{},"sourceType":"module"}