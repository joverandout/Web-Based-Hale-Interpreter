{"ast":null,"code":"import * as React from 'react';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nconst VISITED_ROUTE_KEYS = Symbol('VISITED_ROUTE_KEYS');\nexport const shouldPreventRemove = (emitter, beforeRemoveListeners, currentRoutes, nextRoutes, action) => {\n  var _action$VISITED_ROUTE;\n\n  const nextRouteKeys = nextRoutes.map(route => route.key); // Call these in reverse order so last screens handle the event first\n\n  const removedRoutes = currentRoutes.filter(route => !nextRouteKeys.includes(route.key)).reverse();\n  const visitedRouteKeys = // @ts-expect-error: add this property to mark that we've already emitted this action\n  (_action$VISITED_ROUTE = action[VISITED_ROUTE_KEYS]) !== null && _action$VISITED_ROUTE !== void 0 ? _action$VISITED_ROUTE : new Set();\n  const beforeRemoveAction = { ...action,\n    [VISITED_ROUTE_KEYS]: visitedRouteKeys\n  };\n\n  for (const route of removedRoutes) {\n    var _beforeRemoveListener;\n\n    if (visitedRouteKeys.has(route.key)) {\n      // Skip if we've already emitted this action for this screen\n      continue;\n    } // First, we need to check if any child screens want to prevent it\n\n\n    const isPrevented = (_beforeRemoveListener = beforeRemoveListeners[route.key]) === null || _beforeRemoveListener === void 0 ? void 0 : _beforeRemoveListener.call(beforeRemoveListeners, beforeRemoveAction);\n\n    if (isPrevented) {\n      return true;\n    }\n\n    visitedRouteKeys.add(route.key);\n    const event = emitter.emit({\n      type: 'beforeRemove',\n      target: route.key,\n      data: {\n        action: beforeRemoveAction\n      },\n      canPreventDefault: true\n    });\n\n    if (event.defaultPrevented) {\n      return true;\n    }\n  }\n\n  return false;\n};\nexport default function useOnPreventRemove(_ref) {\n  let {\n    getState,\n    emitter,\n    beforeRemoveListeners\n  } = _ref;\n  const {\n    addKeyedListener\n  } = React.useContext(NavigationBuilderContext);\n  const route = React.useContext(NavigationRouteContext);\n  const routeKey = route === null || route === void 0 ? void 0 : route.key;\n  React.useEffect(() => {\n    if (routeKey) {\n      return addKeyedListener === null || addKeyedListener === void 0 ? void 0 : addKeyedListener('beforeRemove', routeKey, action => {\n        const state = getState();\n        return shouldPreventRemove(emitter, beforeRemoveListeners, state.routes, [], action);\n      });\n    }\n  }, [addKeyedListener, beforeRemoveListeners, emitter, getState, routeKey]);\n}","map":{"version":3,"sources":["useOnPreventRemove.tsx"],"names":["VISITED_ROUTE_KEYS","Symbol","shouldPreventRemove","nextRouteKeys","nextRoutes","route","removedRoutes","currentRoutes","visitedRouteKeys","action","beforeRemoveAction","isPrevented","beforeRemoveListeners","event","type","target","data","canPreventDefault","addKeyedListener","React","routeKey","state","getState"],"mappings":"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","sourcesContent":["import type {\n  NavigationAction,\n  NavigationState,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext, {\n  ChildBeforeRemoveListener,\n} from './NavigationBuilderContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport type { EventMapCore } from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\n\ntype Options = {\n  getState: () => NavigationState;\n  emitter: NavigationEventEmitter<EventMapCore<any>>;\n  beforeRemoveListeners: Record<string, ChildBeforeRemoveListener | undefined>;\n};\n\nconst VISITED_ROUTE_KEYS = Symbol('VISITED_ROUTE_KEYS');\n\nexport const shouldPreventRemove = (\n  emitter: NavigationEventEmitter<EventMapCore<any>>,\n  beforeRemoveListeners: Record<string, ChildBeforeRemoveListener | undefined>,\n  currentRoutes: { key: string }[],\n  nextRoutes: { key?: string | undefined }[],\n  action: NavigationAction\n) => {\n  const nextRouteKeys = nextRoutes.map((route) => route.key);\n\n  // Call these in reverse order so last screens handle the event first\n  const removedRoutes = currentRoutes\n    .filter((route) => !nextRouteKeys.includes(route.key))\n    .reverse();\n\n  const visitedRouteKeys: Set<string> =\n    // @ts-expect-error: add this property to mark that we've already emitted this action\n    action[VISITED_ROUTE_KEYS] ?? new Set<string>();\n\n  const beforeRemoveAction = {\n    ...action,\n    [VISITED_ROUTE_KEYS]: visitedRouteKeys,\n  };\n\n  for (const route of removedRoutes) {\n    if (visitedRouteKeys.has(route.key)) {\n      // Skip if we've already emitted this action for this screen\n      continue;\n    }\n\n    // First, we need to check if any child screens want to prevent it\n    const isPrevented = beforeRemoveListeners[route.key]?.(beforeRemoveAction);\n\n    if (isPrevented) {\n      return true;\n    }\n\n    visitedRouteKeys.add(route.key);\n\n    const event = emitter.emit({\n      type: 'beforeRemove',\n      target: route.key,\n      data: { action: beforeRemoveAction },\n      canPreventDefault: true,\n    });\n\n    if (event.defaultPrevented) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nexport default function useOnPreventRemove({\n  getState,\n  emitter,\n  beforeRemoveListeners,\n}: Options) {\n  const { addKeyedListener } = React.useContext(NavigationBuilderContext);\n  const route = React.useContext(NavigationRouteContext);\n  const routeKey = route?.key;\n\n  React.useEffect(() => {\n    if (routeKey) {\n      return addKeyedListener?.('beforeRemove', routeKey, (action) => {\n        const state = getState();\n\n        return shouldPreventRemove(\n          emitter,\n          beforeRemoveListeners,\n          state.routes,\n          [],\n          action\n        );\n      });\n    }\n  }, [addKeyedListener, beforeRemoveListeners, emitter, getState, routeKey]);\n}\n"]},"metadata":{},"sourceType":"module"}