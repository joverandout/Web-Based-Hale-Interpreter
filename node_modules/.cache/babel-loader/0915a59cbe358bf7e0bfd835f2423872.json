{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CursorColumns } from '../core/cursorColumns.js';\nexport class AtomicTabMoveOperations {\n  /**\n   * Get the visible column at the position. If we get to a non-whitespace character first\n   * or past the end of string then return -1.\n   *\n   * **Note** `position` and the return value are 0-based.\n   */\n  static whitespaceVisibleColumn(lineContent, position, tabSize) {\n    const lineLength = lineContent.length;\n    let visibleColumn = 0;\n    let prevTabStopPosition = -1;\n    let prevTabStopVisibleColumn = -1;\n\n    for (let i = 0; i < lineLength; i++) {\n      if (i === position) {\n        return [prevTabStopPosition, prevTabStopVisibleColumn, visibleColumn];\n      }\n\n      if (visibleColumn % tabSize === 0) {\n        prevTabStopPosition = i;\n        prevTabStopVisibleColumn = visibleColumn;\n      }\n\n      const chCode = lineContent.charCodeAt(i);\n\n      switch (chCode) {\n        case 32\n        /* Space */\n        :\n          visibleColumn += 1;\n          break;\n\n        case 9\n        /* Tab */\n        :\n          // Skip to the next multiple of tabSize.\n          visibleColumn = CursorColumns.nextRenderTabStop(visibleColumn, tabSize);\n          break;\n\n        default:\n          return [-1, -1, -1];\n      }\n    }\n\n    if (position === lineLength) {\n      return [prevTabStopPosition, prevTabStopVisibleColumn, visibleColumn];\n    }\n\n    return [-1, -1, -1];\n  }\n  /**\n   * Return the position that should result from a move left, right or to the\n   * nearest tab, if atomic tabs are enabled. Left and right are used for the\n   * arrow key movements, nearest is used for mouse selection. It returns\n   * -1 if atomic tabs are not relevant and you should fall back to normal\n   * behaviour.\n   *\n   * **Note**: `position` and the return value are 0-based.\n   */\n\n\n  static atomicPosition(lineContent, position, tabSize, direction) {\n    const lineLength = lineContent.length; // Get the 0-based visible column corresponding to the position, or return\n    // -1 if it is not in the initial whitespace.\n\n    const [prevTabStopPosition, prevTabStopVisibleColumn, visibleColumn] = AtomicTabMoveOperations.whitespaceVisibleColumn(lineContent, position, tabSize);\n\n    if (visibleColumn === -1) {\n      return -1;\n    } // Is the output left or right of the current position. The case for nearest\n    // where it is the same as the current position is handled in the switch.\n\n\n    let left;\n\n    switch (direction) {\n      case 0\n      /* Left */\n      :\n        left = true;\n        break;\n\n      case 1\n      /* Right */\n      :\n        left = false;\n        break;\n\n      case 2\n      /* Nearest */\n      :\n        // The code below assumes the output position is either left or right\n        // of the input position. If it is the same, return immediately.\n        if (visibleColumn % tabSize === 0) {\n          return position;\n        } // Go to the nearest indentation.\n\n\n        left = visibleColumn % tabSize <= tabSize / 2;\n        break;\n    } // If going left, we can just use the info about the last tab stop position and\n    // last tab stop visible column that we computed in the first walk over the whitespace.\n\n\n    if (left) {\n      if (prevTabStopPosition === -1) {\n        return -1;\n      } // If the direction is left, we need to keep scanning right to ensure\n      // that targetVisibleColumn + tabSize is before non-whitespace.\n      // This is so that when we press left at the end of a partial\n      // indentation it only goes one character. For example '      foo' with\n      // tabSize 4, should jump from position 6 to position 5, not 4.\n\n\n      let currentVisibleColumn = prevTabStopVisibleColumn;\n\n      for (let i = prevTabStopPosition; i < lineLength; ++i) {\n        if (currentVisibleColumn === prevTabStopVisibleColumn + tabSize) {\n          // It is a full indentation.\n          return prevTabStopPosition;\n        }\n\n        const chCode = lineContent.charCodeAt(i);\n\n        switch (chCode) {\n          case 32\n          /* Space */\n          :\n            currentVisibleColumn += 1;\n            break;\n\n          case 9\n          /* Tab */\n          :\n            currentVisibleColumn = CursorColumns.nextRenderTabStop(currentVisibleColumn, tabSize);\n            break;\n\n          default:\n            return -1;\n        }\n      }\n\n      if (currentVisibleColumn === prevTabStopVisibleColumn + tabSize) {\n        return prevTabStopPosition;\n      } // It must have been a partial indentation.\n\n\n      return -1;\n    } // We are going right.\n\n\n    const targetVisibleColumn = CursorColumns.nextRenderTabStop(visibleColumn, tabSize); // We can just continue from where whitespaceVisibleColumn got to.\n\n    let currentVisibleColumn = visibleColumn;\n\n    for (let i = position; i < lineLength; i++) {\n      if (currentVisibleColumn === targetVisibleColumn) {\n        return i;\n      }\n\n      const chCode = lineContent.charCodeAt(i);\n\n      switch (chCode) {\n        case 32\n        /* Space */\n        :\n          currentVisibleColumn += 1;\n          break;\n\n        case 9\n        /* Tab */\n        :\n          currentVisibleColumn = CursorColumns.nextRenderTabStop(currentVisibleColumn, tabSize);\n          break;\n\n        default:\n          return -1;\n      }\n    } // This condition handles when the target column is at the end of the line.\n\n\n    if (currentVisibleColumn === targetVisibleColumn) {\n      return lineLength;\n    }\n\n    return -1;\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/common/cursor/cursorAtomicMoveOperations.js"],"names":["CursorColumns","AtomicTabMoveOperations","whitespaceVisibleColumn","lineContent","position","tabSize","lineLength","length","visibleColumn","prevTabStopPosition","prevTabStopVisibleColumn","i","chCode","charCodeAt","nextRenderTabStop","atomicPosition","direction","left","currentVisibleColumn","targetVisibleColumn"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CursorColumns } from '../core/cursorColumns.js';\nexport class AtomicTabMoveOperations {\n    /**\n     * Get the visible column at the position. If we get to a non-whitespace character first\n     * or past the end of string then return -1.\n     *\n     * **Note** `position` and the return value are 0-based.\n     */\n    static whitespaceVisibleColumn(lineContent, position, tabSize) {\n        const lineLength = lineContent.length;\n        let visibleColumn = 0;\n        let prevTabStopPosition = -1;\n        let prevTabStopVisibleColumn = -1;\n        for (let i = 0; i < lineLength; i++) {\n            if (i === position) {\n                return [prevTabStopPosition, prevTabStopVisibleColumn, visibleColumn];\n            }\n            if (visibleColumn % tabSize === 0) {\n                prevTabStopPosition = i;\n                prevTabStopVisibleColumn = visibleColumn;\n            }\n            const chCode = lineContent.charCodeAt(i);\n            switch (chCode) {\n                case 32 /* Space */:\n                    visibleColumn += 1;\n                    break;\n                case 9 /* Tab */:\n                    // Skip to the next multiple of tabSize.\n                    visibleColumn = CursorColumns.nextRenderTabStop(visibleColumn, tabSize);\n                    break;\n                default:\n                    return [-1, -1, -1];\n            }\n        }\n        if (position === lineLength) {\n            return [prevTabStopPosition, prevTabStopVisibleColumn, visibleColumn];\n        }\n        return [-1, -1, -1];\n    }\n    /**\n     * Return the position that should result from a move left, right or to the\n     * nearest tab, if atomic tabs are enabled. Left and right are used for the\n     * arrow key movements, nearest is used for mouse selection. It returns\n     * -1 if atomic tabs are not relevant and you should fall back to normal\n     * behaviour.\n     *\n     * **Note**: `position` and the return value are 0-based.\n     */\n    static atomicPosition(lineContent, position, tabSize, direction) {\n        const lineLength = lineContent.length;\n        // Get the 0-based visible column corresponding to the position, or return\n        // -1 if it is not in the initial whitespace.\n        const [prevTabStopPosition, prevTabStopVisibleColumn, visibleColumn] = AtomicTabMoveOperations.whitespaceVisibleColumn(lineContent, position, tabSize);\n        if (visibleColumn === -1) {\n            return -1;\n        }\n        // Is the output left or right of the current position. The case for nearest\n        // where it is the same as the current position is handled in the switch.\n        let left;\n        switch (direction) {\n            case 0 /* Left */:\n                left = true;\n                break;\n            case 1 /* Right */:\n                left = false;\n                break;\n            case 2 /* Nearest */:\n                // The code below assumes the output position is either left or right\n                // of the input position. If it is the same, return immediately.\n                if (visibleColumn % tabSize === 0) {\n                    return position;\n                }\n                // Go to the nearest indentation.\n                left = visibleColumn % tabSize <= (tabSize / 2);\n                break;\n        }\n        // If going left, we can just use the info about the last tab stop position and\n        // last tab stop visible column that we computed in the first walk over the whitespace.\n        if (left) {\n            if (prevTabStopPosition === -1) {\n                return -1;\n            }\n            // If the direction is left, we need to keep scanning right to ensure\n            // that targetVisibleColumn + tabSize is before non-whitespace.\n            // This is so that when we press left at the end of a partial\n            // indentation it only goes one character. For example '      foo' with\n            // tabSize 4, should jump from position 6 to position 5, not 4.\n            let currentVisibleColumn = prevTabStopVisibleColumn;\n            for (let i = prevTabStopPosition; i < lineLength; ++i) {\n                if (currentVisibleColumn === prevTabStopVisibleColumn + tabSize) {\n                    // It is a full indentation.\n                    return prevTabStopPosition;\n                }\n                const chCode = lineContent.charCodeAt(i);\n                switch (chCode) {\n                    case 32 /* Space */:\n                        currentVisibleColumn += 1;\n                        break;\n                    case 9 /* Tab */:\n                        currentVisibleColumn = CursorColumns.nextRenderTabStop(currentVisibleColumn, tabSize);\n                        break;\n                    default:\n                        return -1;\n                }\n            }\n            if (currentVisibleColumn === prevTabStopVisibleColumn + tabSize) {\n                return prevTabStopPosition;\n            }\n            // It must have been a partial indentation.\n            return -1;\n        }\n        // We are going right.\n        const targetVisibleColumn = CursorColumns.nextRenderTabStop(visibleColumn, tabSize);\n        // We can just continue from where whitespaceVisibleColumn got to.\n        let currentVisibleColumn = visibleColumn;\n        for (let i = position; i < lineLength; i++) {\n            if (currentVisibleColumn === targetVisibleColumn) {\n                return i;\n            }\n            const chCode = lineContent.charCodeAt(i);\n            switch (chCode) {\n                case 32 /* Space */:\n                    currentVisibleColumn += 1;\n                    break;\n                case 9 /* Tab */:\n                    currentVisibleColumn = CursorColumns.nextRenderTabStop(currentVisibleColumn, tabSize);\n                    break;\n                default:\n                    return -1;\n            }\n        }\n        // This condition handles when the target column is at the end of the line.\n        if (currentVisibleColumn === targetVisibleColumn) {\n            return lineLength;\n        }\n        return -1;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}