{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { OverviewZoneManager } from '../../../common/viewModel/overviewZoneManager.js';\nimport { ViewEventHandler } from '../../../common/viewModel/viewEventHandler.js';\nexport class OverviewRuler extends ViewEventHandler {\n  constructor(context, cssClassName) {\n    super();\n    this._context = context;\n    const options = this._context.configuration.options;\n    this._domNode = createFastDomNode(document.createElement('canvas'));\n\n    this._domNode.setClassName(cssClassName);\n\n    this._domNode.setPosition('absolute');\n\n    this._domNode.setLayerHinting(true);\n\n    this._domNode.setContain('strict');\n\n    this._zoneManager = new OverviewZoneManager(lineNumber => this._context.viewLayout.getVerticalOffsetForLineNumber(lineNumber));\n\n    this._zoneManager.setDOMWidth(0);\n\n    this._zoneManager.setDOMHeight(0);\n\n    this._zoneManager.setOuterHeight(this._context.viewLayout.getScrollHeight());\n\n    this._zoneManager.setLineHeight(options.get(59\n    /* lineHeight */\n    ));\n\n    this._zoneManager.setPixelRatio(options.get(129\n    /* pixelRatio */\n    ));\n\n    this._context.addEventHandler(this);\n  }\n\n  dispose() {\n    this._context.removeEventHandler(this);\n\n    super.dispose();\n  } // ---- begin view event handlers\n\n\n  onConfigurationChanged(e) {\n    const options = this._context.configuration.options;\n\n    if (e.hasChanged(59\n    /* lineHeight */\n    )) {\n      this._zoneManager.setLineHeight(options.get(59\n      /* lineHeight */\n      ));\n\n      this._render();\n    }\n\n    if (e.hasChanged(129\n    /* pixelRatio */\n    )) {\n      this._zoneManager.setPixelRatio(options.get(129\n      /* pixelRatio */\n      ));\n\n      this._domNode.setWidth(this._zoneManager.getDOMWidth());\n\n      this._domNode.setHeight(this._zoneManager.getDOMHeight());\n\n      this._domNode.domNode.width = this._zoneManager.getCanvasWidth();\n      this._domNode.domNode.height = this._zoneManager.getCanvasHeight();\n\n      this._render();\n    }\n\n    return true;\n  }\n\n  onFlushed(e) {\n    this._render();\n\n    return true;\n  }\n\n  onScrollChanged(e) {\n    if (e.scrollHeightChanged) {\n      this._zoneManager.setOuterHeight(e.scrollHeight);\n\n      this._render();\n    }\n\n    return true;\n  }\n\n  onZonesChanged(e) {\n    this._render();\n\n    return true;\n  } // ---- end view event handlers\n\n\n  getDomNode() {\n    return this._domNode.domNode;\n  }\n\n  setLayout(position) {\n    this._domNode.setTop(position.top);\n\n    this._domNode.setRight(position.right);\n\n    let hasChanged = false;\n    hasChanged = this._zoneManager.setDOMWidth(position.width) || hasChanged;\n    hasChanged = this._zoneManager.setDOMHeight(position.height) || hasChanged;\n\n    if (hasChanged) {\n      this._domNode.setWidth(this._zoneManager.getDOMWidth());\n\n      this._domNode.setHeight(this._zoneManager.getDOMHeight());\n\n      this._domNode.domNode.width = this._zoneManager.getCanvasWidth();\n      this._domNode.domNode.height = this._zoneManager.getCanvasHeight();\n\n      this._render();\n    }\n  }\n\n  setZones(zones) {\n    this._zoneManager.setZones(zones);\n\n    this._render();\n  }\n\n  _render() {\n    if (this._zoneManager.getOuterHeight() === 0) {\n      return false;\n    }\n\n    const width = this._zoneManager.getCanvasWidth();\n\n    const height = this._zoneManager.getCanvasHeight();\n\n    const colorZones = this._zoneManager.resolveColorZones();\n\n    const id2Color = this._zoneManager.getId2Color();\n\n    const ctx = this._domNode.domNode.getContext('2d');\n\n    ctx.clearRect(0, 0, width, height);\n\n    if (colorZones.length > 0) {\n      this._renderOneLane(ctx, colorZones, id2Color, width);\n    }\n\n    return true;\n  }\n\n  _renderOneLane(ctx, colorZones, id2Color, width) {\n    let currentColorId = 0;\n    let currentFrom = 0;\n    let currentTo = 0;\n\n    for (const zone of colorZones) {\n      const zoneColorId = zone.colorId;\n      const zoneFrom = zone.from;\n      const zoneTo = zone.to;\n\n      if (zoneColorId !== currentColorId) {\n        ctx.fillRect(0, currentFrom, width, currentTo - currentFrom);\n        currentColorId = zoneColorId;\n        ctx.fillStyle = id2Color[currentColorId];\n        currentFrom = zoneFrom;\n        currentTo = zoneTo;\n      } else {\n        if (currentTo >= zoneFrom) {\n          currentTo = Math.max(currentTo, zoneTo);\n        } else {\n          ctx.fillRect(0, currentFrom, width, currentTo - currentFrom);\n          currentFrom = zoneFrom;\n          currentTo = zoneTo;\n        }\n      }\n    }\n\n    ctx.fillRect(0, currentFrom, width, currentTo - currentFrom);\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/overviewRuler/overviewRuler.js"],"names":["createFastDomNode","OverviewZoneManager","ViewEventHandler","OverviewRuler","constructor","context","cssClassName","_context","options","configuration","_domNode","document","createElement","setClassName","setPosition","setLayerHinting","setContain","_zoneManager","lineNumber","viewLayout","getVerticalOffsetForLineNumber","setDOMWidth","setDOMHeight","setOuterHeight","getScrollHeight","setLineHeight","get","setPixelRatio","addEventHandler","dispose","removeEventHandler","onConfigurationChanged","e","hasChanged","_render","setWidth","getDOMWidth","setHeight","getDOMHeight","domNode","width","getCanvasWidth","height","getCanvasHeight","onFlushed","onScrollChanged","scrollHeightChanged","scrollHeight","onZonesChanged","getDomNode","setLayout","position","setTop","top","setRight","right","setZones","zones","getOuterHeight","colorZones","resolveColorZones","id2Color","getId2Color","ctx","getContext","clearRect","length","_renderOneLane","currentColorId","currentFrom","currentTo","zone","zoneColorId","colorId","zoneFrom","from","zoneTo","to","fillRect","fillStyle","Math","max"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { OverviewZoneManager } from '../../../common/viewModel/overviewZoneManager.js';\nimport { ViewEventHandler } from '../../../common/viewModel/viewEventHandler.js';\nexport class OverviewRuler extends ViewEventHandler {\n    constructor(context, cssClassName) {\n        super();\n        this._context = context;\n        const options = this._context.configuration.options;\n        this._domNode = createFastDomNode(document.createElement('canvas'));\n        this._domNode.setClassName(cssClassName);\n        this._domNode.setPosition('absolute');\n        this._domNode.setLayerHinting(true);\n        this._domNode.setContain('strict');\n        this._zoneManager = new OverviewZoneManager((lineNumber) => this._context.viewLayout.getVerticalOffsetForLineNumber(lineNumber));\n        this._zoneManager.setDOMWidth(0);\n        this._zoneManager.setDOMHeight(0);\n        this._zoneManager.setOuterHeight(this._context.viewLayout.getScrollHeight());\n        this._zoneManager.setLineHeight(options.get(59 /* lineHeight */));\n        this._zoneManager.setPixelRatio(options.get(129 /* pixelRatio */));\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        super.dispose();\n    }\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        if (e.hasChanged(59 /* lineHeight */)) {\n            this._zoneManager.setLineHeight(options.get(59 /* lineHeight */));\n            this._render();\n        }\n        if (e.hasChanged(129 /* pixelRatio */)) {\n            this._zoneManager.setPixelRatio(options.get(129 /* pixelRatio */));\n            this._domNode.setWidth(this._zoneManager.getDOMWidth());\n            this._domNode.setHeight(this._zoneManager.getDOMHeight());\n            this._domNode.domNode.width = this._zoneManager.getCanvasWidth();\n            this._domNode.domNode.height = this._zoneManager.getCanvasHeight();\n            this._render();\n        }\n        return true;\n    }\n    onFlushed(e) {\n        this._render();\n        return true;\n    }\n    onScrollChanged(e) {\n        if (e.scrollHeightChanged) {\n            this._zoneManager.setOuterHeight(e.scrollHeight);\n            this._render();\n        }\n        return true;\n    }\n    onZonesChanged(e) {\n        this._render();\n        return true;\n    }\n    // ---- end view event handlers\n    getDomNode() {\n        return this._domNode.domNode;\n    }\n    setLayout(position) {\n        this._domNode.setTop(position.top);\n        this._domNode.setRight(position.right);\n        let hasChanged = false;\n        hasChanged = this._zoneManager.setDOMWidth(position.width) || hasChanged;\n        hasChanged = this._zoneManager.setDOMHeight(position.height) || hasChanged;\n        if (hasChanged) {\n            this._domNode.setWidth(this._zoneManager.getDOMWidth());\n            this._domNode.setHeight(this._zoneManager.getDOMHeight());\n            this._domNode.domNode.width = this._zoneManager.getCanvasWidth();\n            this._domNode.domNode.height = this._zoneManager.getCanvasHeight();\n            this._render();\n        }\n    }\n    setZones(zones) {\n        this._zoneManager.setZones(zones);\n        this._render();\n    }\n    _render() {\n        if (this._zoneManager.getOuterHeight() === 0) {\n            return false;\n        }\n        const width = this._zoneManager.getCanvasWidth();\n        const height = this._zoneManager.getCanvasHeight();\n        const colorZones = this._zoneManager.resolveColorZones();\n        const id2Color = this._zoneManager.getId2Color();\n        const ctx = this._domNode.domNode.getContext('2d');\n        ctx.clearRect(0, 0, width, height);\n        if (colorZones.length > 0) {\n            this._renderOneLane(ctx, colorZones, id2Color, width);\n        }\n        return true;\n    }\n    _renderOneLane(ctx, colorZones, id2Color, width) {\n        let currentColorId = 0;\n        let currentFrom = 0;\n        let currentTo = 0;\n        for (const zone of colorZones) {\n            const zoneColorId = zone.colorId;\n            const zoneFrom = zone.from;\n            const zoneTo = zone.to;\n            if (zoneColorId !== currentColorId) {\n                ctx.fillRect(0, currentFrom, width, currentTo - currentFrom);\n                currentColorId = zoneColorId;\n                ctx.fillStyle = id2Color[currentColorId];\n                currentFrom = zoneFrom;\n                currentTo = zoneTo;\n            }\n            else {\n                if (currentTo >= zoneFrom) {\n                    currentTo = Math.max(currentTo, zoneTo);\n                }\n                else {\n                    ctx.fillRect(0, currentFrom, width, currentTo - currentFrom);\n                    currentFrom = zoneFrom;\n                    currentTo = zoneTo;\n                }\n            }\n        }\n        ctx.fillRect(0, currentFrom, width, currentTo - currentFrom);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}