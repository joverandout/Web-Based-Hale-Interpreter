{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { show } from '../../dom.js';\nimport { RunOnceScheduler } from '../../../common/async.js';\nimport { Color } from '../../../common/color.js';\nimport { Disposable } from '../../../common/lifecycle.js';\nimport { mixin } from '../../../common/objects.js';\nimport './progressbar.css';\nconst CSS_DONE = 'done';\nconst CSS_ACTIVE = 'active';\nconst CSS_INFINITE = 'infinite';\nconst CSS_INFINITE_LONG_RUNNING = 'infinite-long-running';\nconst CSS_DISCRETE = 'discrete';\nconst defaultOpts = {\n  progressBarBackground: Color.fromHex('#0E70C0')\n};\n/**\n * A progress bar with support for infinite or discrete progress.\n */\n\nexport class ProgressBar extends Disposable {\n  constructor(container, options) {\n    super();\n    this.options = options || Object.create(null);\n    mixin(this.options, defaultOpts, false);\n    this.workedVal = 0;\n    this.progressBarBackground = this.options.progressBarBackground;\n    this.showDelayedScheduler = this._register(new RunOnceScheduler(() => show(this.element), 0));\n    this.longRunningScheduler = this._register(new RunOnceScheduler(() => this.infiniteLongRunning(), ProgressBar.LONG_RUNNING_INFINITE_THRESHOLD));\n    this.create(container);\n  }\n\n  create(container) {\n    this.element = document.createElement('div');\n    this.element.classList.add('monaco-progress-container');\n    this.element.setAttribute('role', 'progressbar');\n    this.element.setAttribute('aria-valuemin', '0');\n    container.appendChild(this.element);\n    this.bit = document.createElement('div');\n    this.bit.classList.add('progress-bit');\n    this.element.appendChild(this.bit);\n    this.applyStyles();\n  }\n\n  off() {\n    this.bit.style.width = 'inherit';\n    this.bit.style.opacity = '1';\n    this.element.classList.remove(CSS_ACTIVE, CSS_INFINITE, CSS_INFINITE_LONG_RUNNING, CSS_DISCRETE);\n    this.workedVal = 0;\n    this.totalWork = undefined;\n    this.longRunningScheduler.cancel();\n  }\n  /**\n   * Stops the progressbar from showing any progress instantly without fading out.\n   */\n\n\n  stop() {\n    return this.doDone(false);\n  }\n\n  doDone(delayed) {\n    this.element.classList.add(CSS_DONE); // discrete: let it grow to 100% width and hide afterwards\n\n    if (!this.element.classList.contains(CSS_INFINITE)) {\n      this.bit.style.width = 'inherit';\n\n      if (delayed) {\n        setTimeout(() => this.off(), 200);\n      } else {\n        this.off();\n      }\n    } // infinite: let it fade out and hide afterwards\n    else {\n      this.bit.style.opacity = '0';\n\n      if (delayed) {\n        setTimeout(() => this.off(), 200);\n      } else {\n        this.off();\n      }\n    }\n\n    return this;\n  }\n  /**\n   * Use this mode to indicate progress that has no total number of work units.\n   */\n\n\n  infinite() {\n    this.bit.style.width = '2%';\n    this.bit.style.opacity = '1';\n    this.element.classList.remove(CSS_DISCRETE, CSS_DONE, CSS_INFINITE_LONG_RUNNING);\n    this.element.classList.add(CSS_ACTIVE, CSS_INFINITE);\n    this.longRunningScheduler.schedule();\n    return this;\n  }\n\n  infiniteLongRunning() {\n    this.element.classList.add(CSS_INFINITE_LONG_RUNNING);\n  }\n\n  getContainer() {\n    return this.element;\n  }\n\n  style(styles) {\n    this.progressBarBackground = styles.progressBarBackground;\n    this.applyStyles();\n  }\n\n  applyStyles() {\n    if (this.bit) {\n      const background = this.progressBarBackground ? this.progressBarBackground.toString() : '';\n      this.bit.style.backgroundColor = background;\n    }\n  }\n\n}\n/**\n * After a certain time of showing the progress bar, switch\n * to long-running mode and throttle animations to reduce\n * the pressure on the GPU process.\n *\n * https://github.com/microsoft/vscode/issues/97900\n * https://github.com/microsoft/vscode/issues/138396\n */\n\nProgressBar.LONG_RUNNING_INFINITE_THRESHOLD = 10000;","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/base/browser/ui/progressbar/progressbar.js"],"names":["show","RunOnceScheduler","Color","Disposable","mixin","CSS_DONE","CSS_ACTIVE","CSS_INFINITE","CSS_INFINITE_LONG_RUNNING","CSS_DISCRETE","defaultOpts","progressBarBackground","fromHex","ProgressBar","constructor","container","options","Object","create","workedVal","showDelayedScheduler","_register","element","longRunningScheduler","infiniteLongRunning","LONG_RUNNING_INFINITE_THRESHOLD","document","createElement","classList","add","setAttribute","appendChild","bit","applyStyles","off","style","width","opacity","remove","totalWork","undefined","cancel","stop","doDone","delayed","contains","setTimeout","infinite","schedule","getContainer","styles","background","toString","backgroundColor"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { show } from '../../dom.js';\nimport { RunOnceScheduler } from '../../../common/async.js';\nimport { Color } from '../../../common/color.js';\nimport { Disposable } from '../../../common/lifecycle.js';\nimport { mixin } from '../../../common/objects.js';\nimport './progressbar.css';\nconst CSS_DONE = 'done';\nconst CSS_ACTIVE = 'active';\nconst CSS_INFINITE = 'infinite';\nconst CSS_INFINITE_LONG_RUNNING = 'infinite-long-running';\nconst CSS_DISCRETE = 'discrete';\nconst defaultOpts = {\n    progressBarBackground: Color.fromHex('#0E70C0')\n};\n/**\n * A progress bar with support for infinite or discrete progress.\n */\nexport class ProgressBar extends Disposable {\n    constructor(container, options) {\n        super();\n        this.options = options || Object.create(null);\n        mixin(this.options, defaultOpts, false);\n        this.workedVal = 0;\n        this.progressBarBackground = this.options.progressBarBackground;\n        this.showDelayedScheduler = this._register(new RunOnceScheduler(() => show(this.element), 0));\n        this.longRunningScheduler = this._register(new RunOnceScheduler(() => this.infiniteLongRunning(), ProgressBar.LONG_RUNNING_INFINITE_THRESHOLD));\n        this.create(container);\n    }\n    create(container) {\n        this.element = document.createElement('div');\n        this.element.classList.add('monaco-progress-container');\n        this.element.setAttribute('role', 'progressbar');\n        this.element.setAttribute('aria-valuemin', '0');\n        container.appendChild(this.element);\n        this.bit = document.createElement('div');\n        this.bit.classList.add('progress-bit');\n        this.element.appendChild(this.bit);\n        this.applyStyles();\n    }\n    off() {\n        this.bit.style.width = 'inherit';\n        this.bit.style.opacity = '1';\n        this.element.classList.remove(CSS_ACTIVE, CSS_INFINITE, CSS_INFINITE_LONG_RUNNING, CSS_DISCRETE);\n        this.workedVal = 0;\n        this.totalWork = undefined;\n        this.longRunningScheduler.cancel();\n    }\n    /**\n     * Stops the progressbar from showing any progress instantly without fading out.\n     */\n    stop() {\n        return this.doDone(false);\n    }\n    doDone(delayed) {\n        this.element.classList.add(CSS_DONE);\n        // discrete: let it grow to 100% width and hide afterwards\n        if (!this.element.classList.contains(CSS_INFINITE)) {\n            this.bit.style.width = 'inherit';\n            if (delayed) {\n                setTimeout(() => this.off(), 200);\n            }\n            else {\n                this.off();\n            }\n        }\n        // infinite: let it fade out and hide afterwards\n        else {\n            this.bit.style.opacity = '0';\n            if (delayed) {\n                setTimeout(() => this.off(), 200);\n            }\n            else {\n                this.off();\n            }\n        }\n        return this;\n    }\n    /**\n     * Use this mode to indicate progress that has no total number of work units.\n     */\n    infinite() {\n        this.bit.style.width = '2%';\n        this.bit.style.opacity = '1';\n        this.element.classList.remove(CSS_DISCRETE, CSS_DONE, CSS_INFINITE_LONG_RUNNING);\n        this.element.classList.add(CSS_ACTIVE, CSS_INFINITE);\n        this.longRunningScheduler.schedule();\n        return this;\n    }\n    infiniteLongRunning() {\n        this.element.classList.add(CSS_INFINITE_LONG_RUNNING);\n    }\n    getContainer() {\n        return this.element;\n    }\n    style(styles) {\n        this.progressBarBackground = styles.progressBarBackground;\n        this.applyStyles();\n    }\n    applyStyles() {\n        if (this.bit) {\n            const background = this.progressBarBackground ? this.progressBarBackground.toString() : '';\n            this.bit.style.backgroundColor = background;\n        }\n    }\n}\n/**\n * After a certain time of showing the progress bar, switch\n * to long-running mode and throttle animations to reduce\n * the pressure on the GPU process.\n *\n * https://github.com/microsoft/vscode/issues/97900\n * https://github.com/microsoft/vscode/issues/138396\n */\nProgressBar.LONG_RUNNING_INFINITE_THRESHOLD = 10000;\n"]},"metadata":{},"sourceType":"module"}