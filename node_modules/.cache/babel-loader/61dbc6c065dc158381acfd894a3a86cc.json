{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { arrayInsert } from '../../../base/common/arrays.js';\nimport { toUint32 } from '../../../base/common/uint.js';\nexport class PrefixSumComputer {\n  constructor(values) {\n    this.values = values;\n    this.prefixSum = new Uint32Array(values.length);\n    this.prefixSumValidIndex = new Int32Array(1);\n    this.prefixSumValidIndex[0] = -1;\n  }\n\n  insertValues(insertIndex, insertValues) {\n    insertIndex = toUint32(insertIndex);\n    const oldValues = this.values;\n    const oldPrefixSum = this.prefixSum;\n    const insertValuesLen = insertValues.length;\n\n    if (insertValuesLen === 0) {\n      return false;\n    }\n\n    this.values = new Uint32Array(oldValues.length + insertValuesLen);\n    this.values.set(oldValues.subarray(0, insertIndex), 0);\n    this.values.set(oldValues.subarray(insertIndex), insertIndex + insertValuesLen);\n    this.values.set(insertValues, insertIndex);\n\n    if (insertIndex - 1 < this.prefixSumValidIndex[0]) {\n      this.prefixSumValidIndex[0] = insertIndex - 1;\n    }\n\n    this.prefixSum = new Uint32Array(this.values.length);\n\n    if (this.prefixSumValidIndex[0] >= 0) {\n      this.prefixSum.set(oldPrefixSum.subarray(0, this.prefixSumValidIndex[0] + 1));\n    }\n\n    return true;\n  }\n\n  setValue(index, value) {\n    index = toUint32(index);\n    value = toUint32(value);\n\n    if (this.values[index] === value) {\n      return false;\n    }\n\n    this.values[index] = value;\n\n    if (index - 1 < this.prefixSumValidIndex[0]) {\n      this.prefixSumValidIndex[0] = index - 1;\n    }\n\n    return true;\n  }\n\n  removeValues(startIndex, count) {\n    startIndex = toUint32(startIndex);\n    count = toUint32(count);\n    const oldValues = this.values;\n    const oldPrefixSum = this.prefixSum;\n\n    if (startIndex >= oldValues.length) {\n      return false;\n    }\n\n    const maxCount = oldValues.length - startIndex;\n\n    if (count >= maxCount) {\n      count = maxCount;\n    }\n\n    if (count === 0) {\n      return false;\n    }\n\n    this.values = new Uint32Array(oldValues.length - count);\n    this.values.set(oldValues.subarray(0, startIndex), 0);\n    this.values.set(oldValues.subarray(startIndex + count), startIndex);\n    this.prefixSum = new Uint32Array(this.values.length);\n\n    if (startIndex - 1 < this.prefixSumValidIndex[0]) {\n      this.prefixSumValidIndex[0] = startIndex - 1;\n    }\n\n    if (this.prefixSumValidIndex[0] >= 0) {\n      this.prefixSum.set(oldPrefixSum.subarray(0, this.prefixSumValidIndex[0] + 1));\n    }\n\n    return true;\n  }\n\n  getTotalSum() {\n    if (this.values.length === 0) {\n      return 0;\n    }\n\n    return this._getPrefixSum(this.values.length - 1);\n  }\n  /**\n   * Returns the sum of the first `index + 1` many items.\n   * @returns `SUM(0 <= j <= index, values[j])`.\n   */\n\n\n  getPrefixSum(index) {\n    if (index < 0) {\n      return 0;\n    }\n\n    index = toUint32(index);\n    return this._getPrefixSum(index);\n  }\n\n  _getPrefixSum(index) {\n    if (index <= this.prefixSumValidIndex[0]) {\n      return this.prefixSum[index];\n    }\n\n    let startIndex = this.prefixSumValidIndex[0] + 1;\n\n    if (startIndex === 0) {\n      this.prefixSum[0] = this.values[0];\n      startIndex++;\n    }\n\n    if (index >= this.values.length) {\n      index = this.values.length - 1;\n    }\n\n    for (let i = startIndex; i <= index; i++) {\n      this.prefixSum[i] = this.prefixSum[i - 1] + this.values[i];\n    }\n\n    this.prefixSumValidIndex[0] = Math.max(this.prefixSumValidIndex[0], index);\n    return this.prefixSum[index];\n  }\n\n  getIndexOf(sum) {\n    sum = Math.floor(sum); // Compute all sums (to get a fully valid prefixSum)\n\n    this.getTotalSum();\n    let low = 0;\n    let high = this.values.length - 1;\n    let mid = 0;\n    let midStop = 0;\n    let midStart = 0;\n\n    while (low <= high) {\n      mid = low + (high - low) / 2 | 0;\n      midStop = this.prefixSum[mid];\n      midStart = midStop - this.values[mid];\n\n      if (sum < midStart) {\n        high = mid - 1;\n      } else if (sum >= midStop) {\n        low = mid + 1;\n      } else {\n        break;\n      }\n    }\n\n    return new PrefixSumIndexOfResult(mid, sum - midStart);\n  }\n\n}\n/**\n * {@link getIndexOf} has an amortized runtime complexity of O(1).\n *\n * ({@link PrefixSumComputer.getIndexOf} is just  O(log n))\n*/\n\nexport class ConstantTimePrefixSumComputer {\n  constructor(values) {\n    this._values = values;\n    this._isValid = false;\n    this._validEndIndex = -1;\n    this._prefixSum = [];\n    this._indexBySum = [];\n  }\n  /**\n   * @returns SUM(0 <= j < values.length, values[j])\n   */\n\n\n  getTotalSum() {\n    this._ensureValid();\n\n    return this._indexBySum.length;\n  }\n  /**\n   * Returns the sum of the first `count` many items.\n   * @returns `SUM(0 <= j < count, values[j])`.\n   */\n\n\n  getPrefixSum(count) {\n    this._ensureValid();\n\n    if (count === 0) {\n      return 0;\n    }\n\n    return this._prefixSum[count - 1];\n  }\n  /**\n   * @returns `result`, such that `getPrefixSum(result.index) + result.remainder = sum`\n   */\n\n\n  getIndexOf(sum) {\n    this._ensureValid();\n\n    const idx = this._indexBySum[sum];\n    const viewLinesAbove = idx > 0 ? this._prefixSum[idx - 1] : 0;\n    return new PrefixSumIndexOfResult(idx, sum - viewLinesAbove);\n  }\n\n  removeValues(start, deleteCount) {\n    this._values.splice(start, deleteCount);\n\n    this._invalidate(start);\n  }\n\n  insertValues(insertIndex, insertArr) {\n    this._values = arrayInsert(this._values, insertIndex, insertArr);\n\n    this._invalidate(insertIndex);\n  }\n\n  _invalidate(index) {\n    this._isValid = false;\n    this._validEndIndex = Math.min(this._validEndIndex, index - 1);\n  }\n\n  _ensureValid() {\n    if (this._isValid) {\n      return;\n    }\n\n    for (let i = this._validEndIndex + 1, len = this._values.length; i < len; i++) {\n      const value = this._values[i];\n      const sumAbove = i > 0 ? this._prefixSum[i - 1] : 0;\n      this._prefixSum[i] = sumAbove + value;\n\n      for (let j = 0; j < value; j++) {\n        this._indexBySum[sumAbove + j] = i;\n      }\n    } // trim things\n\n\n    this._prefixSum.length = this._values.length;\n    this._indexBySum.length = this._prefixSum[this._prefixSum.length - 1]; // mark as valid\n\n    this._isValid = true;\n    this._validEndIndex = this._values.length - 1;\n  }\n\n  setValue(index, value) {\n    if (this._values[index] === value) {\n      // no change\n      return;\n    }\n\n    this._values[index] = value;\n\n    this._invalidate(index);\n  }\n\n}\nexport class PrefixSumIndexOfResult {\n  constructor(index, remainder) {\n    this.index = index;\n    this.remainder = remainder;\n    this._prefixSumIndexOfResultBrand = undefined;\n    this.index = index;\n    this.remainder = remainder;\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/common/model/prefixSumComputer.js"],"names":["arrayInsert","toUint32","PrefixSumComputer","constructor","values","prefixSum","Uint32Array","length","prefixSumValidIndex","Int32Array","insertValues","insertIndex","oldValues","oldPrefixSum","insertValuesLen","set","subarray","setValue","index","value","removeValues","startIndex","count","maxCount","getTotalSum","_getPrefixSum","getPrefixSum","i","Math","max","getIndexOf","sum","floor","low","high","mid","midStop","midStart","PrefixSumIndexOfResult","ConstantTimePrefixSumComputer","_values","_isValid","_validEndIndex","_prefixSum","_indexBySum","_ensureValid","idx","viewLinesAbove","start","deleteCount","splice","_invalidate","insertArr","min","len","sumAbove","j","remainder","_prefixSumIndexOfResultBrand","undefined"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { arrayInsert } from '../../../base/common/arrays.js';\nimport { toUint32 } from '../../../base/common/uint.js';\nexport class PrefixSumComputer {\n    constructor(values) {\n        this.values = values;\n        this.prefixSum = new Uint32Array(values.length);\n        this.prefixSumValidIndex = new Int32Array(1);\n        this.prefixSumValidIndex[0] = -1;\n    }\n    insertValues(insertIndex, insertValues) {\n        insertIndex = toUint32(insertIndex);\n        const oldValues = this.values;\n        const oldPrefixSum = this.prefixSum;\n        const insertValuesLen = insertValues.length;\n        if (insertValuesLen === 0) {\n            return false;\n        }\n        this.values = new Uint32Array(oldValues.length + insertValuesLen);\n        this.values.set(oldValues.subarray(0, insertIndex), 0);\n        this.values.set(oldValues.subarray(insertIndex), insertIndex + insertValuesLen);\n        this.values.set(insertValues, insertIndex);\n        if (insertIndex - 1 < this.prefixSumValidIndex[0]) {\n            this.prefixSumValidIndex[0] = insertIndex - 1;\n        }\n        this.prefixSum = new Uint32Array(this.values.length);\n        if (this.prefixSumValidIndex[0] >= 0) {\n            this.prefixSum.set(oldPrefixSum.subarray(0, this.prefixSumValidIndex[0] + 1));\n        }\n        return true;\n    }\n    setValue(index, value) {\n        index = toUint32(index);\n        value = toUint32(value);\n        if (this.values[index] === value) {\n            return false;\n        }\n        this.values[index] = value;\n        if (index - 1 < this.prefixSumValidIndex[0]) {\n            this.prefixSumValidIndex[0] = index - 1;\n        }\n        return true;\n    }\n    removeValues(startIndex, count) {\n        startIndex = toUint32(startIndex);\n        count = toUint32(count);\n        const oldValues = this.values;\n        const oldPrefixSum = this.prefixSum;\n        if (startIndex >= oldValues.length) {\n            return false;\n        }\n        const maxCount = oldValues.length - startIndex;\n        if (count >= maxCount) {\n            count = maxCount;\n        }\n        if (count === 0) {\n            return false;\n        }\n        this.values = new Uint32Array(oldValues.length - count);\n        this.values.set(oldValues.subarray(0, startIndex), 0);\n        this.values.set(oldValues.subarray(startIndex + count), startIndex);\n        this.prefixSum = new Uint32Array(this.values.length);\n        if (startIndex - 1 < this.prefixSumValidIndex[0]) {\n            this.prefixSumValidIndex[0] = startIndex - 1;\n        }\n        if (this.prefixSumValidIndex[0] >= 0) {\n            this.prefixSum.set(oldPrefixSum.subarray(0, this.prefixSumValidIndex[0] + 1));\n        }\n        return true;\n    }\n    getTotalSum() {\n        if (this.values.length === 0) {\n            return 0;\n        }\n        return this._getPrefixSum(this.values.length - 1);\n    }\n    /**\n     * Returns the sum of the first `index + 1` many items.\n     * @returns `SUM(0 <= j <= index, values[j])`.\n     */\n    getPrefixSum(index) {\n        if (index < 0) {\n            return 0;\n        }\n        index = toUint32(index);\n        return this._getPrefixSum(index);\n    }\n    _getPrefixSum(index) {\n        if (index <= this.prefixSumValidIndex[0]) {\n            return this.prefixSum[index];\n        }\n        let startIndex = this.prefixSumValidIndex[0] + 1;\n        if (startIndex === 0) {\n            this.prefixSum[0] = this.values[0];\n            startIndex++;\n        }\n        if (index >= this.values.length) {\n            index = this.values.length - 1;\n        }\n        for (let i = startIndex; i <= index; i++) {\n            this.prefixSum[i] = this.prefixSum[i - 1] + this.values[i];\n        }\n        this.prefixSumValidIndex[0] = Math.max(this.prefixSumValidIndex[0], index);\n        return this.prefixSum[index];\n    }\n    getIndexOf(sum) {\n        sum = Math.floor(sum);\n        // Compute all sums (to get a fully valid prefixSum)\n        this.getTotalSum();\n        let low = 0;\n        let high = this.values.length - 1;\n        let mid = 0;\n        let midStop = 0;\n        let midStart = 0;\n        while (low <= high) {\n            mid = low + ((high - low) / 2) | 0;\n            midStop = this.prefixSum[mid];\n            midStart = midStop - this.values[mid];\n            if (sum < midStart) {\n                high = mid - 1;\n            }\n            else if (sum >= midStop) {\n                low = mid + 1;\n            }\n            else {\n                break;\n            }\n        }\n        return new PrefixSumIndexOfResult(mid, sum - midStart);\n    }\n}\n/**\n * {@link getIndexOf} has an amortized runtime complexity of O(1).\n *\n * ({@link PrefixSumComputer.getIndexOf} is just  O(log n))\n*/\nexport class ConstantTimePrefixSumComputer {\n    constructor(values) {\n        this._values = values;\n        this._isValid = false;\n        this._validEndIndex = -1;\n        this._prefixSum = [];\n        this._indexBySum = [];\n    }\n    /**\n     * @returns SUM(0 <= j < values.length, values[j])\n     */\n    getTotalSum() {\n        this._ensureValid();\n        return this._indexBySum.length;\n    }\n    /**\n     * Returns the sum of the first `count` many items.\n     * @returns `SUM(0 <= j < count, values[j])`.\n     */\n    getPrefixSum(count) {\n        this._ensureValid();\n        if (count === 0) {\n            return 0;\n        }\n        return this._prefixSum[count - 1];\n    }\n    /**\n     * @returns `result`, such that `getPrefixSum(result.index) + result.remainder = sum`\n     */\n    getIndexOf(sum) {\n        this._ensureValid();\n        const idx = this._indexBySum[sum];\n        const viewLinesAbove = idx > 0 ? this._prefixSum[idx - 1] : 0;\n        return new PrefixSumIndexOfResult(idx, sum - viewLinesAbove);\n    }\n    removeValues(start, deleteCount) {\n        this._values.splice(start, deleteCount);\n        this._invalidate(start);\n    }\n    insertValues(insertIndex, insertArr) {\n        this._values = arrayInsert(this._values, insertIndex, insertArr);\n        this._invalidate(insertIndex);\n    }\n    _invalidate(index) {\n        this._isValid = false;\n        this._validEndIndex = Math.min(this._validEndIndex, index - 1);\n    }\n    _ensureValid() {\n        if (this._isValid) {\n            return;\n        }\n        for (let i = this._validEndIndex + 1, len = this._values.length; i < len; i++) {\n            const value = this._values[i];\n            const sumAbove = i > 0 ? this._prefixSum[i - 1] : 0;\n            this._prefixSum[i] = sumAbove + value;\n            for (let j = 0; j < value; j++) {\n                this._indexBySum[sumAbove + j] = i;\n            }\n        }\n        // trim things\n        this._prefixSum.length = this._values.length;\n        this._indexBySum.length = this._prefixSum[this._prefixSum.length - 1];\n        // mark as valid\n        this._isValid = true;\n        this._validEndIndex = this._values.length - 1;\n    }\n    setValue(index, value) {\n        if (this._values[index] === value) {\n            // no change\n            return;\n        }\n        this._values[index] = value;\n        this._invalidate(index);\n    }\n}\nexport class PrefixSumIndexOfResult {\n    constructor(index, remainder) {\n        this.index = index;\n        this.remainder = remainder;\n        this._prefixSumIndexOfResultBrand = undefined;\n        this.index = index;\n        this.remainder = remainder;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}