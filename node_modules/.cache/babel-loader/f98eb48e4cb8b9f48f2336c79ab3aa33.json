{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nclass Node {\n  constructor(element) {\n    this.element = element;\n    this.next = Node.Undefined;\n    this.prev = Node.Undefined;\n  }\n\n}\n\nNode.Undefined = new Node(undefined);\nexport class LinkedList {\n  constructor() {\n    this._first = Node.Undefined;\n    this._last = Node.Undefined;\n    this._size = 0;\n  }\n\n  get size() {\n    return this._size;\n  }\n\n  isEmpty() {\n    return this._first === Node.Undefined;\n  }\n\n  clear() {\n    let node = this._first;\n\n    while (node !== Node.Undefined) {\n      const next = node.next;\n      node.prev = Node.Undefined;\n      node.next = Node.Undefined;\n      node = next;\n    }\n\n    this._first = Node.Undefined;\n    this._last = Node.Undefined;\n    this._size = 0;\n  }\n\n  unshift(element) {\n    return this._insert(element, false);\n  }\n\n  push(element) {\n    return this._insert(element, true);\n  }\n\n  _insert(element, atTheEnd) {\n    const newNode = new Node(element);\n\n    if (this._first === Node.Undefined) {\n      this._first = newNode;\n      this._last = newNode;\n    } else if (atTheEnd) {\n      // push\n      const oldLast = this._last;\n      this._last = newNode;\n      newNode.prev = oldLast;\n      oldLast.next = newNode;\n    } else {\n      // unshift\n      const oldFirst = this._first;\n      this._first = newNode;\n      newNode.next = oldFirst;\n      oldFirst.prev = newNode;\n    }\n\n    this._size += 1;\n    let didRemove = false;\n    return () => {\n      if (!didRemove) {\n        didRemove = true;\n\n        this._remove(newNode);\n      }\n    };\n  }\n\n  shift() {\n    if (this._first === Node.Undefined) {\n      return undefined;\n    } else {\n      const res = this._first.element;\n\n      this._remove(this._first);\n\n      return res;\n    }\n  }\n\n  pop() {\n    if (this._last === Node.Undefined) {\n      return undefined;\n    } else {\n      const res = this._last.element;\n\n      this._remove(this._last);\n\n      return res;\n    }\n  }\n\n  _remove(node) {\n    if (node.prev !== Node.Undefined && node.next !== Node.Undefined) {\n      // middle\n      const anchor = node.prev;\n      anchor.next = node.next;\n      node.next.prev = anchor;\n    } else if (node.prev === Node.Undefined && node.next === Node.Undefined) {\n      // only node\n      this._first = Node.Undefined;\n      this._last = Node.Undefined;\n    } else if (node.next === Node.Undefined) {\n      // last\n      this._last = this._last.prev;\n      this._last.next = Node.Undefined;\n    } else if (node.prev === Node.Undefined) {\n      // first\n      this._first = this._first.next;\n      this._first.prev = Node.Undefined;\n    } // done\n\n\n    this._size -= 1;\n  }\n\n  *[Symbol.iterator]() {\n    let node = this._first;\n\n    while (node !== Node.Undefined) {\n      yield node.element;\n      node = node.next;\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/base/common/linkedList.js"],"names":["Node","constructor","element","next","Undefined","prev","undefined","LinkedList","_first","_last","_size","size","isEmpty","clear","node","unshift","_insert","push","atTheEnd","newNode","oldLast","oldFirst","didRemove","_remove","shift","res","pop","anchor","Symbol","iterator"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nclass Node {\n    constructor(element) {\n        this.element = element;\n        this.next = Node.Undefined;\n        this.prev = Node.Undefined;\n    }\n}\nNode.Undefined = new Node(undefined);\nexport class LinkedList {\n    constructor() {\n        this._first = Node.Undefined;\n        this._last = Node.Undefined;\n        this._size = 0;\n    }\n    get size() {\n        return this._size;\n    }\n    isEmpty() {\n        return this._first === Node.Undefined;\n    }\n    clear() {\n        let node = this._first;\n        while (node !== Node.Undefined) {\n            const next = node.next;\n            node.prev = Node.Undefined;\n            node.next = Node.Undefined;\n            node = next;\n        }\n        this._first = Node.Undefined;\n        this._last = Node.Undefined;\n        this._size = 0;\n    }\n    unshift(element) {\n        return this._insert(element, false);\n    }\n    push(element) {\n        return this._insert(element, true);\n    }\n    _insert(element, atTheEnd) {\n        const newNode = new Node(element);\n        if (this._first === Node.Undefined) {\n            this._first = newNode;\n            this._last = newNode;\n        }\n        else if (atTheEnd) {\n            // push\n            const oldLast = this._last;\n            this._last = newNode;\n            newNode.prev = oldLast;\n            oldLast.next = newNode;\n        }\n        else {\n            // unshift\n            const oldFirst = this._first;\n            this._first = newNode;\n            newNode.next = oldFirst;\n            oldFirst.prev = newNode;\n        }\n        this._size += 1;\n        let didRemove = false;\n        return () => {\n            if (!didRemove) {\n                didRemove = true;\n                this._remove(newNode);\n            }\n        };\n    }\n    shift() {\n        if (this._first === Node.Undefined) {\n            return undefined;\n        }\n        else {\n            const res = this._first.element;\n            this._remove(this._first);\n            return res;\n        }\n    }\n    pop() {\n        if (this._last === Node.Undefined) {\n            return undefined;\n        }\n        else {\n            const res = this._last.element;\n            this._remove(this._last);\n            return res;\n        }\n    }\n    _remove(node) {\n        if (node.prev !== Node.Undefined && node.next !== Node.Undefined) {\n            // middle\n            const anchor = node.prev;\n            anchor.next = node.next;\n            node.next.prev = anchor;\n        }\n        else if (node.prev === Node.Undefined && node.next === Node.Undefined) {\n            // only node\n            this._first = Node.Undefined;\n            this._last = Node.Undefined;\n        }\n        else if (node.next === Node.Undefined) {\n            // last\n            this._last = this._last.prev;\n            this._last.next = Node.Undefined;\n        }\n        else if (node.prev === Node.Undefined) {\n            // first\n            this._first = this._first.next;\n            this._first.prev = Node.Undefined;\n        }\n        // done\n        this._size -= 1;\n    }\n    *[Symbol.iterator]() {\n        let node = this._first;\n        while (node !== Node.Undefined) {\n            yield node.element;\n            node = node.next;\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}