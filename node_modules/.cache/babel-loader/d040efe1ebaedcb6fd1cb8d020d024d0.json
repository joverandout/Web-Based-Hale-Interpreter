{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class ResolvedKeybindingItem {\n  constructor(resolvedKeybinding, command, commandArgs, when, isDefault, extensionId, isBuiltinExtension) {\n    this._resolvedKeybindingItemBrand = undefined;\n    this.resolvedKeybinding = resolvedKeybinding;\n    this.keypressParts = resolvedKeybinding ? removeElementsAfterNulls(resolvedKeybinding.getDispatchParts()) : [];\n\n    if (resolvedKeybinding && this.keypressParts.length === 0) {\n      // handle possible single modifier chord keybindings\n      this.keypressParts = removeElementsAfterNulls(resolvedKeybinding.getSingleModifierDispatchParts());\n    }\n\n    this.bubble = command ? command.charCodeAt(0) === 94\n    /* Caret */\n    : false;\n    this.command = this.bubble ? command.substr(1) : command;\n    this.commandArgs = commandArgs;\n    this.when = when;\n    this.isDefault = isDefault;\n    this.extensionId = extensionId;\n    this.isBuiltinExtension = isBuiltinExtension;\n  }\n\n}\nexport function removeElementsAfterNulls(arr) {\n  let result = [];\n\n  for (let i = 0, len = arr.length; i < len; i++) {\n    const element = arr[i];\n\n    if (!element) {\n      // stop processing at first encountered null\n      return result;\n    }\n\n    result.push(element);\n  }\n\n  return result;\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/platform/keybinding/common/resolvedKeybindingItem.js"],"names":["ResolvedKeybindingItem","constructor","resolvedKeybinding","command","commandArgs","when","isDefault","extensionId","isBuiltinExtension","_resolvedKeybindingItemBrand","undefined","keypressParts","removeElementsAfterNulls","getDispatchParts","length","getSingleModifierDispatchParts","bubble","charCodeAt","substr","arr","result","i","len","element","push"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,MAAMA,sBAAN,CAA6B;AAChCC,EAAAA,WAAW,CAACC,kBAAD,EAAqBC,OAArB,EAA8BC,WAA9B,EAA2CC,IAA3C,EAAiDC,SAAjD,EAA4DC,WAA5D,EAAyEC,kBAAzE,EAA6F;AACpG,SAAKC,4BAAL,GAAoCC,SAApC;AACA,SAAKR,kBAAL,GAA0BA,kBAA1B;AACA,SAAKS,aAAL,GAAqBT,kBAAkB,GAAGU,wBAAwB,CAACV,kBAAkB,CAACW,gBAAnB,EAAD,CAA3B,GAAqE,EAA5G;;AACA,QAAIX,kBAAkB,IAAI,KAAKS,aAAL,CAAmBG,MAAnB,KAA8B,CAAxD,EAA2D;AACvD;AACA,WAAKH,aAAL,GAAqBC,wBAAwB,CAACV,kBAAkB,CAACa,8BAAnB,EAAD,CAA7C;AACH;;AACD,SAAKC,MAAL,GAAeb,OAAO,GAAGA,OAAO,CAACc,UAAR,CAAmB,CAAnB,MAA0B;AAAG;AAAhC,MAA8C,KAApE;AACA,SAAKd,OAAL,GAAe,KAAKa,MAAL,GAAcb,OAAO,CAACe,MAAR,CAAe,CAAf,CAAd,GAAkCf,OAAjD;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKC,kBAAL,GAA0BA,kBAA1B;AACH;;AAhB+B;AAkBpC,OAAO,SAASI,wBAAT,CAAkCO,GAAlC,EAAuC;AAC1C,MAAIC,MAAM,GAAG,EAAb;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGH,GAAG,CAACL,MAA1B,EAAkCO,CAAC,GAAGC,GAAtC,EAA2CD,CAAC,EAA5C,EAAgD;AAC5C,UAAME,OAAO,GAAGJ,GAAG,CAACE,CAAD,CAAnB;;AACA,QAAI,CAACE,OAAL,EAAc;AACV;AACA,aAAOH,MAAP;AACH;;AACDA,IAAAA,MAAM,CAACI,IAAP,CAAYD,OAAZ;AACH;;AACD,SAAOH,MAAP;AACH","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class ResolvedKeybindingItem {\n    constructor(resolvedKeybinding, command, commandArgs, when, isDefault, extensionId, isBuiltinExtension) {\n        this._resolvedKeybindingItemBrand = undefined;\n        this.resolvedKeybinding = resolvedKeybinding;\n        this.keypressParts = resolvedKeybinding ? removeElementsAfterNulls(resolvedKeybinding.getDispatchParts()) : [];\n        if (resolvedKeybinding && this.keypressParts.length === 0) {\n            // handle possible single modifier chord keybindings\n            this.keypressParts = removeElementsAfterNulls(resolvedKeybinding.getSingleModifierDispatchParts());\n        }\n        this.bubble = (command ? command.charCodeAt(0) === 94 /* Caret */ : false);\n        this.command = this.bubble ? command.substr(1) : command;\n        this.commandArgs = commandArgs;\n        this.when = when;\n        this.isDefault = isDefault;\n        this.extensionId = extensionId;\n        this.isBuiltinExtension = isBuiltinExtension;\n    }\n}\nexport function removeElementsAfterNulls(arr) {\n    let result = [];\n    for (let i = 0, len = arr.length; i < len; i++) {\n        const element = arr[i];\n        if (!element) {\n            // stop processing at first encountered null\n            return result;\n        }\n        result.push(element);\n    }\n    return result;\n}\n"]},"metadata":{},"sourceType":"module"}