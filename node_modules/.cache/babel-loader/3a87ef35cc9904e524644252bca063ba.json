{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { EditorCommand, registerEditorCommand, registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { showSimpleSuggestions } from '../../suggest/browser/suggest.js';\nimport { localize } from '../../../../nls.js';\nimport { ContextKeyExpr, IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { SnippetSession } from './snippetSession.js';\nconst _defaultOptions = {\n  overwriteBefore: 0,\n  overwriteAfter: 0,\n  undoStopBefore: true,\n  undoStopAfter: true,\n  adjustWhitespace: true,\n  clipboardText: undefined,\n  overtypingCapturer: undefined\n};\nlet SnippetController2 = class SnippetController2 {\n  constructor(_editor, _logService, contextKeyService) {\n    this._editor = _editor;\n    this._logService = _logService;\n    this._snippetListener = new DisposableStore();\n    this._modelVersionId = -1;\n    this._inSnippet = SnippetController2.InSnippetMode.bindTo(contextKeyService);\n    this._hasNextTabstop = SnippetController2.HasNextTabstop.bindTo(contextKeyService);\n    this._hasPrevTabstop = SnippetController2.HasPrevTabstop.bindTo(contextKeyService);\n  }\n\n  static get(editor) {\n    return editor.getContribution(SnippetController2.ID);\n  }\n\n  dispose() {\n    var _a;\n\n    this._inSnippet.reset();\n\n    this._hasPrevTabstop.reset();\n\n    this._hasNextTabstop.reset();\n\n    (_a = this._session) === null || _a === void 0 ? void 0 : _a.dispose();\n\n    this._snippetListener.dispose();\n  }\n\n  insert(template, opts) {\n    // this is here to find out more about the yet-not-understood\n    // error that sometimes happens when we fail to inserted a nested\n    // snippet\n    try {\n      this._doInsert(template, typeof opts === 'undefined' ? _defaultOptions : Object.assign(Object.assign({}, _defaultOptions), opts));\n    } catch (e) {\n      this.cancel();\n\n      this._logService.error(e);\n\n      this._logService.error('snippet_error');\n\n      this._logService.error('insert_template=', template);\n\n      this._logService.error('existing_template=', this._session ? this._session._logInfo() : '<no_session>');\n    }\n  }\n\n  _doInsert(template, opts) {\n    if (!this._editor.hasModel()) {\n      return;\n    } // don't listen while inserting the snippet\n    // as that is the inflight state causing cancelation\n\n\n    this._snippetListener.clear();\n\n    if (opts.undoStopBefore) {\n      this._editor.getModel().pushStackElement();\n    }\n\n    if (!this._session) {\n      this._modelVersionId = this._editor.getModel().getAlternativeVersionId();\n      this._session = new SnippetSession(this._editor, template, opts);\n\n      this._session.insert();\n    } else {\n      this._session.merge(template, opts);\n    }\n\n    if (opts.undoStopAfter) {\n      this._editor.getModel().pushStackElement();\n    }\n\n    this._updateState();\n\n    this._snippetListener.add(this._editor.onDidChangeModelContent(e => e.isFlush && this.cancel()));\n\n    this._snippetListener.add(this._editor.onDidChangeModel(() => this.cancel()));\n\n    this._snippetListener.add(this._editor.onDidChangeCursorSelection(() => this._updateState()));\n  }\n\n  _updateState() {\n    if (!this._session || !this._editor.hasModel()) {\n      // canceled in the meanwhile\n      return;\n    }\n\n    if (this._modelVersionId === this._editor.getModel().getAlternativeVersionId()) {\n      // undo until the 'before' state happened\n      // and makes use cancel snippet mode\n      return this.cancel();\n    }\n\n    if (!this._session.hasPlaceholder) {\n      // don't listen for selection changes and don't\n      // update context keys when the snippet is plain text\n      return this.cancel();\n    }\n\n    if (this._session.isAtLastPlaceholder || !this._session.isSelectionWithinPlaceholders()) {\n      this._editor.getModel().pushStackElement();\n\n      return this.cancel();\n    }\n\n    this._inSnippet.set(true);\n\n    this._hasPrevTabstop.set(!this._session.isAtFirstPlaceholder);\n\n    this._hasNextTabstop.set(!this._session.isAtLastPlaceholder);\n\n    this._handleChoice();\n  }\n\n  _handleChoice() {\n    if (!this._session || !this._editor.hasModel()) {\n      this._currentChoice = undefined;\n      return;\n    }\n\n    const {\n      choice\n    } = this._session;\n\n    if (!choice) {\n      this._currentChoice = undefined;\n      return;\n    }\n\n    if (this._currentChoice !== choice) {\n      this._currentChoice = choice;\n\n      this._editor.setSelections(this._editor.getSelections().map(s => Selection.fromPositions(s.getStartPosition())));\n\n      const [first] = choice.options;\n      showSimpleSuggestions(this._editor, choice.options.map((option, i) => {\n        // let before = choice.options.slice(0, i);\n        // let after = choice.options.slice(i);\n        return {\n          kind: 13\n          /* Value */\n          ,\n          label: option.value,\n          insertText: option.value,\n          // insertText: `\\${1|${after.concat(before).join(',')}|}$0`,\n          // snippetType: 'textmate',\n          sortText: 'a'.repeat(i + 1),\n          range: Range.fromPositions(this._editor.getPosition(), this._editor.getPosition().delta(0, first.value.length))\n        };\n      }));\n    }\n  }\n\n  finish() {\n    while (this._inSnippet.get()) {\n      this.next();\n    }\n  }\n\n  cancel(resetSelection = false) {\n    var _a;\n\n    this._inSnippet.reset();\n\n    this._hasPrevTabstop.reset();\n\n    this._hasNextTabstop.reset();\n\n    this._snippetListener.clear();\n\n    (_a = this._session) === null || _a === void 0 ? void 0 : _a.dispose();\n    this._session = undefined;\n    this._modelVersionId = -1;\n\n    if (resetSelection) {\n      // reset selection to the primary cursor when being asked\n      // for. this happens when explicitly cancelling snippet mode,\n      // e.g. when pressing ESC\n      this._editor.setSelections([this._editor.getSelection()]);\n    }\n  }\n\n  prev() {\n    if (this._session) {\n      this._session.prev();\n    }\n\n    this._updateState();\n  }\n\n  next() {\n    if (this._session) {\n      this._session.next();\n    }\n\n    this._updateState();\n  }\n\n  isInSnippet() {\n    return Boolean(this._inSnippet.get());\n  }\n\n};\nSnippetController2.ID = 'snippetController2';\nSnippetController2.InSnippetMode = new RawContextKey('inSnippetMode', false, localize('inSnippetMode', \"Whether the editor in current in snippet mode\"));\nSnippetController2.HasNextTabstop = new RawContextKey('hasNextTabstop', false, localize('hasNextTabstop', \"Whether there is a next tab stop when in snippet mode\"));\nSnippetController2.HasPrevTabstop = new RawContextKey('hasPrevTabstop', false, localize('hasPrevTabstop', \"Whether there is a previous tab stop when in snippet mode\"));\nSnippetController2 = __decorate([__param(1, ILogService), __param(2, IContextKeyService)], SnippetController2);\nexport { SnippetController2 };\nregisterEditorContribution(SnippetController2.ID, SnippetController2);\nconst CommandCtor = EditorCommand.bindToContribution(SnippetController2.get);\nregisterEditorCommand(new CommandCtor({\n  id: 'jumpToNextSnippetPlaceholder',\n  precondition: ContextKeyExpr.and(SnippetController2.InSnippetMode, SnippetController2.HasNextTabstop),\n  handler: ctrl => ctrl.next(),\n  kbOpts: {\n    weight: 100\n    /* EditorContrib */\n    + 30,\n    kbExpr: EditorContextKeys.editorTextFocus,\n    primary: 2\n    /* Tab */\n\n  }\n}));\nregisterEditorCommand(new CommandCtor({\n  id: 'jumpToPrevSnippetPlaceholder',\n  precondition: ContextKeyExpr.and(SnippetController2.InSnippetMode, SnippetController2.HasPrevTabstop),\n  handler: ctrl => ctrl.prev(),\n  kbOpts: {\n    weight: 100\n    /* EditorContrib */\n    + 30,\n    kbExpr: EditorContextKeys.editorTextFocus,\n    primary: 1024\n    /* Shift */\n    | 2\n    /* Tab */\n\n  }\n}));\nregisterEditorCommand(new CommandCtor({\n  id: 'leaveSnippet',\n  precondition: SnippetController2.InSnippetMode,\n  handler: ctrl => ctrl.cancel(true),\n  kbOpts: {\n    weight: 100\n    /* EditorContrib */\n    + 30,\n    kbExpr: EditorContextKeys.editorTextFocus,\n    primary: 9\n    /* Escape */\n    ,\n    secondary: [1024\n    /* Shift */\n    | 9\n    /* Escape */\n    ]\n  }\n}));\nregisterEditorCommand(new CommandCtor({\n  id: 'acceptSnippet',\n  precondition: SnippetController2.InSnippetMode,\n  handler: ctrl => ctrl.finish() // kbOpts: {\n  // \tweight: KeybindingWeight.EditorContrib + 30,\n  // \tkbExpr: EditorContextKeys.textFocus,\n  // \tprimary: KeyCode.Enter,\n  // }\n\n}));","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/contrib/snippet/browser/snippetController2.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","DisposableStore","EditorCommand","registerEditorCommand","registerEditorContribution","Range","Selection","EditorContextKeys","showSimpleSuggestions","localize","ContextKeyExpr","IContextKeyService","RawContextKey","ILogService","SnippetSession","_defaultOptions","overwriteBefore","overwriteAfter","undoStopBefore","undoStopAfter","adjustWhitespace","clipboardText","undefined","overtypingCapturer","SnippetController2","constructor","_editor","_logService","contextKeyService","_snippetListener","_modelVersionId","_inSnippet","InSnippetMode","bindTo","_hasNextTabstop","HasNextTabstop","_hasPrevTabstop","HasPrevTabstop","get","editor","getContribution","ID","dispose","_a","reset","_session","insert","template","opts","_doInsert","assign","e","cancel","error","_logInfo","hasModel","clear","getModel","pushStackElement","getAlternativeVersionId","merge","_updateState","add","onDidChangeModelContent","isFlush","onDidChangeModel","onDidChangeCursorSelection","hasPlaceholder","isAtLastPlaceholder","isSelectionWithinPlaceholders","set","isAtFirstPlaceholder","_handleChoice","_currentChoice","choice","setSelections","getSelections","map","s","fromPositions","getStartPosition","first","options","option","kind","label","value","insertText","sortText","repeat","range","getPosition","delta","finish","next","resetSelection","getSelection","prev","isInSnippet","Boolean","CommandCtor","bindToContribution","id","precondition","and","handler","ctrl","kbOpts","weight","kbExpr","editorTextFocus","primary","secondary"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { EditorCommand, registerEditorCommand, registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { showSimpleSuggestions } from '../../suggest/browser/suggest.js';\nimport { localize } from '../../../../nls.js';\nimport { ContextKeyExpr, IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { SnippetSession } from './snippetSession.js';\nconst _defaultOptions = {\n    overwriteBefore: 0,\n    overwriteAfter: 0,\n    undoStopBefore: true,\n    undoStopAfter: true,\n    adjustWhitespace: true,\n    clipboardText: undefined,\n    overtypingCapturer: undefined\n};\nlet SnippetController2 = class SnippetController2 {\n    constructor(_editor, _logService, contextKeyService) {\n        this._editor = _editor;\n        this._logService = _logService;\n        this._snippetListener = new DisposableStore();\n        this._modelVersionId = -1;\n        this._inSnippet = SnippetController2.InSnippetMode.bindTo(contextKeyService);\n        this._hasNextTabstop = SnippetController2.HasNextTabstop.bindTo(contextKeyService);\n        this._hasPrevTabstop = SnippetController2.HasPrevTabstop.bindTo(contextKeyService);\n    }\n    static get(editor) {\n        return editor.getContribution(SnippetController2.ID);\n    }\n    dispose() {\n        var _a;\n        this._inSnippet.reset();\n        this._hasPrevTabstop.reset();\n        this._hasNextTabstop.reset();\n        (_a = this._session) === null || _a === void 0 ? void 0 : _a.dispose();\n        this._snippetListener.dispose();\n    }\n    insert(template, opts) {\n        // this is here to find out more about the yet-not-understood\n        // error that sometimes happens when we fail to inserted a nested\n        // snippet\n        try {\n            this._doInsert(template, typeof opts === 'undefined' ? _defaultOptions : Object.assign(Object.assign({}, _defaultOptions), opts));\n        }\n        catch (e) {\n            this.cancel();\n            this._logService.error(e);\n            this._logService.error('snippet_error');\n            this._logService.error('insert_template=', template);\n            this._logService.error('existing_template=', this._session ? this._session._logInfo() : '<no_session>');\n        }\n    }\n    _doInsert(template, opts) {\n        if (!this._editor.hasModel()) {\n            return;\n        }\n        // don't listen while inserting the snippet\n        // as that is the inflight state causing cancelation\n        this._snippetListener.clear();\n        if (opts.undoStopBefore) {\n            this._editor.getModel().pushStackElement();\n        }\n        if (!this._session) {\n            this._modelVersionId = this._editor.getModel().getAlternativeVersionId();\n            this._session = new SnippetSession(this._editor, template, opts);\n            this._session.insert();\n        }\n        else {\n            this._session.merge(template, opts);\n        }\n        if (opts.undoStopAfter) {\n            this._editor.getModel().pushStackElement();\n        }\n        this._updateState();\n        this._snippetListener.add(this._editor.onDidChangeModelContent(e => e.isFlush && this.cancel()));\n        this._snippetListener.add(this._editor.onDidChangeModel(() => this.cancel()));\n        this._snippetListener.add(this._editor.onDidChangeCursorSelection(() => this._updateState()));\n    }\n    _updateState() {\n        if (!this._session || !this._editor.hasModel()) {\n            // canceled in the meanwhile\n            return;\n        }\n        if (this._modelVersionId === this._editor.getModel().getAlternativeVersionId()) {\n            // undo until the 'before' state happened\n            // and makes use cancel snippet mode\n            return this.cancel();\n        }\n        if (!this._session.hasPlaceholder) {\n            // don't listen for selection changes and don't\n            // update context keys when the snippet is plain text\n            return this.cancel();\n        }\n        if (this._session.isAtLastPlaceholder || !this._session.isSelectionWithinPlaceholders()) {\n            this._editor.getModel().pushStackElement();\n            return this.cancel();\n        }\n        this._inSnippet.set(true);\n        this._hasPrevTabstop.set(!this._session.isAtFirstPlaceholder);\n        this._hasNextTabstop.set(!this._session.isAtLastPlaceholder);\n        this._handleChoice();\n    }\n    _handleChoice() {\n        if (!this._session || !this._editor.hasModel()) {\n            this._currentChoice = undefined;\n            return;\n        }\n        const { choice } = this._session;\n        if (!choice) {\n            this._currentChoice = undefined;\n            return;\n        }\n        if (this._currentChoice !== choice) {\n            this._currentChoice = choice;\n            this._editor.setSelections(this._editor.getSelections()\n                .map(s => Selection.fromPositions(s.getStartPosition())));\n            const [first] = choice.options;\n            showSimpleSuggestions(this._editor, choice.options.map((option, i) => {\n                // let before = choice.options.slice(0, i);\n                // let after = choice.options.slice(i);\n                return {\n                    kind: 13 /* Value */,\n                    label: option.value,\n                    insertText: option.value,\n                    // insertText: `\\${1|${after.concat(before).join(',')}|}$0`,\n                    // snippetType: 'textmate',\n                    sortText: 'a'.repeat(i + 1),\n                    range: Range.fromPositions(this._editor.getPosition(), this._editor.getPosition().delta(0, first.value.length))\n                };\n            }));\n        }\n    }\n    finish() {\n        while (this._inSnippet.get()) {\n            this.next();\n        }\n    }\n    cancel(resetSelection = false) {\n        var _a;\n        this._inSnippet.reset();\n        this._hasPrevTabstop.reset();\n        this._hasNextTabstop.reset();\n        this._snippetListener.clear();\n        (_a = this._session) === null || _a === void 0 ? void 0 : _a.dispose();\n        this._session = undefined;\n        this._modelVersionId = -1;\n        if (resetSelection) {\n            // reset selection to the primary cursor when being asked\n            // for. this happens when explicitly cancelling snippet mode,\n            // e.g. when pressing ESC\n            this._editor.setSelections([this._editor.getSelection()]);\n        }\n    }\n    prev() {\n        if (this._session) {\n            this._session.prev();\n        }\n        this._updateState();\n    }\n    next() {\n        if (this._session) {\n            this._session.next();\n        }\n        this._updateState();\n    }\n    isInSnippet() {\n        return Boolean(this._inSnippet.get());\n    }\n};\nSnippetController2.ID = 'snippetController2';\nSnippetController2.InSnippetMode = new RawContextKey('inSnippetMode', false, localize('inSnippetMode', \"Whether the editor in current in snippet mode\"));\nSnippetController2.HasNextTabstop = new RawContextKey('hasNextTabstop', false, localize('hasNextTabstop', \"Whether there is a next tab stop when in snippet mode\"));\nSnippetController2.HasPrevTabstop = new RawContextKey('hasPrevTabstop', false, localize('hasPrevTabstop', \"Whether there is a previous tab stop when in snippet mode\"));\nSnippetController2 = __decorate([\n    __param(1, ILogService),\n    __param(2, IContextKeyService)\n], SnippetController2);\nexport { SnippetController2 };\nregisterEditorContribution(SnippetController2.ID, SnippetController2);\nconst CommandCtor = EditorCommand.bindToContribution(SnippetController2.get);\nregisterEditorCommand(new CommandCtor({\n    id: 'jumpToNextSnippetPlaceholder',\n    precondition: ContextKeyExpr.and(SnippetController2.InSnippetMode, SnippetController2.HasNextTabstop),\n    handler: ctrl => ctrl.next(),\n    kbOpts: {\n        weight: 100 /* EditorContrib */ + 30,\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 2 /* Tab */\n    }\n}));\nregisterEditorCommand(new CommandCtor({\n    id: 'jumpToPrevSnippetPlaceholder',\n    precondition: ContextKeyExpr.and(SnippetController2.InSnippetMode, SnippetController2.HasPrevTabstop),\n    handler: ctrl => ctrl.prev(),\n    kbOpts: {\n        weight: 100 /* EditorContrib */ + 30,\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 1024 /* Shift */ | 2 /* Tab */\n    }\n}));\nregisterEditorCommand(new CommandCtor({\n    id: 'leaveSnippet',\n    precondition: SnippetController2.InSnippetMode,\n    handler: ctrl => ctrl.cancel(true),\n    kbOpts: {\n        weight: 100 /* EditorContrib */ + 30,\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 9 /* Escape */,\n        secondary: [1024 /* Shift */ | 9 /* Escape */]\n    }\n}));\nregisterEditorCommand(new CommandCtor({\n    id: 'acceptSnippet',\n    precondition: SnippetController2.InSnippetMode,\n    handler: ctrl => ctrl.finish(),\n    // kbOpts: {\n    // \tweight: KeybindingWeight.EditorContrib + 30,\n    // \tkbExpr: EditorContextKeys.textFocus,\n    // \tprimary: KeyCode.Enter,\n    // }\n}));\n"]},"metadata":{},"sourceType":"module"}