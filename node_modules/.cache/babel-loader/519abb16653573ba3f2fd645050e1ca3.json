{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './marginDecorations.css';\nimport { DecorationToRender, DedupOverlay } from '../glyphMargin/glyphMargin.js';\nexport class MarginViewLineDecorationsOverlay extends DedupOverlay {\n  constructor(context) {\n    super();\n    this._context = context;\n    this._renderResult = null;\n\n    this._context.addEventHandler(this);\n  }\n\n  dispose() {\n    this._context.removeEventHandler(this);\n\n    this._renderResult = null;\n    super.dispose();\n  } // --- begin event handlers\n\n\n  onConfigurationChanged(e) {\n    return true;\n  }\n\n  onDecorationsChanged(e) {\n    return true;\n  }\n\n  onFlushed(e) {\n    return true;\n  }\n\n  onLinesChanged(e) {\n    return true;\n  }\n\n  onLinesDeleted(e) {\n    return true;\n  }\n\n  onLinesInserted(e) {\n    return true;\n  }\n\n  onScrollChanged(e) {\n    return e.scrollTopChanged;\n  }\n\n  onZonesChanged(e) {\n    return true;\n  } // --- end event handlers\n\n\n  _getDecorations(ctx) {\n    const decorations = ctx.getDecorationsInViewport();\n    const r = [];\n    let rLen = 0;\n\n    for (let i = 0, len = decorations.length; i < len; i++) {\n      const d = decorations[i];\n      const marginClassName = d.options.marginClassName;\n\n      if (marginClassName) {\n        r[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.endLineNumber, marginClassName);\n      }\n    }\n\n    return r;\n  }\n\n  prepareRender(ctx) {\n    const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n    const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n\n    const toRender = this._render(visibleStartLineNumber, visibleEndLineNumber, this._getDecorations(ctx));\n\n    const output = [];\n\n    for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n      const lineIndex = lineNumber - visibleStartLineNumber;\n      const classNames = toRender[lineIndex];\n      let lineOutput = '';\n\n      for (let i = 0, len = classNames.length; i < len; i++) {\n        lineOutput += '<div class=\"cmdr ' + classNames[i] + '\" style=\"\"></div>';\n      }\n\n      output[lineIndex] = lineOutput;\n    }\n\n    this._renderResult = output;\n  }\n\n  render(startLineNumber, lineNumber) {\n    if (!this._renderResult) {\n      return '';\n    }\n\n    return this._renderResult[lineNumber - startLineNumber];\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/marginDecorations/marginDecorations.js"],"names":["DecorationToRender","DedupOverlay","MarginViewLineDecorationsOverlay","constructor","context","_context","_renderResult","addEventHandler","dispose","removeEventHandler","onConfigurationChanged","e","onDecorationsChanged","onFlushed","onLinesChanged","onLinesDeleted","onLinesInserted","onScrollChanged","scrollTopChanged","onZonesChanged","_getDecorations","ctx","decorations","getDecorationsInViewport","r","rLen","i","len","length","d","marginClassName","options","range","startLineNumber","endLineNumber","prepareRender","visibleStartLineNumber","visibleRange","visibleEndLineNumber","toRender","_render","output","lineNumber","lineIndex","classNames","lineOutput","render"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './marginDecorations.css';\nimport { DecorationToRender, DedupOverlay } from '../glyphMargin/glyphMargin.js';\nexport class MarginViewLineDecorationsOverlay extends DedupOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        return true;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    _getDecorations(ctx) {\n        const decorations = ctx.getDecorationsInViewport();\n        const r = [];\n        let rLen = 0;\n        for (let i = 0, len = decorations.length; i < len; i++) {\n            const d = decorations[i];\n            const marginClassName = d.options.marginClassName;\n            if (marginClassName) {\n                r[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.endLineNumber, marginClassName);\n            }\n        }\n        return r;\n    }\n    prepareRender(ctx) {\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const toRender = this._render(visibleStartLineNumber, visibleEndLineNumber, this._getDecorations(ctx));\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            const classNames = toRender[lineIndex];\n            let lineOutput = '';\n            for (let i = 0, len = classNames.length; i < len; i++) {\n                lineOutput += '<div class=\"cmdr ' + classNames[i] + '\" style=\"\"></div>';\n            }\n            output[lineIndex] = lineOutput;\n        }\n        this._renderResult = output;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        return this._renderResult[lineNumber - startLineNumber];\n    }\n}\n"]},"metadata":{},"sourceType":"module"}