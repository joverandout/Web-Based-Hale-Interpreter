{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CoreNavigationCommands } from '../controller/coreCommands.js';\nimport { Position } from '../../common/core/position.js';\nimport * as platform from '../../../base/common/platform.js';\nexport class ViewController {\n  constructor(configuration, viewModel, userInputEvents, commandDelegate) {\n    this.configuration = configuration;\n    this.viewModel = viewModel;\n    this.userInputEvents = userInputEvents;\n    this.commandDelegate = commandDelegate;\n  }\n\n  paste(text, pasteOnNewLine, multicursorText, mode) {\n    this.commandDelegate.paste(text, pasteOnNewLine, multicursorText, mode);\n  }\n\n  type(text) {\n    this.commandDelegate.type(text);\n  }\n\n  compositionType(text, replacePrevCharCnt, replaceNextCharCnt, positionDelta) {\n    this.commandDelegate.compositionType(text, replacePrevCharCnt, replaceNextCharCnt, positionDelta);\n  }\n\n  compositionStart() {\n    this.commandDelegate.startComposition();\n  }\n\n  compositionEnd() {\n    this.commandDelegate.endComposition();\n  }\n\n  cut() {\n    this.commandDelegate.cut();\n  }\n\n  setSelection(modelSelection) {\n    CoreNavigationCommands.SetSelection.runCoreEditorCommand(this.viewModel, {\n      source: 'keyboard',\n      selection: modelSelection\n    });\n  }\n\n  _validateViewColumn(viewPosition) {\n    const minColumn = this.viewModel.getLineMinColumn(viewPosition.lineNumber);\n\n    if (viewPosition.column < minColumn) {\n      return new Position(viewPosition.lineNumber, minColumn);\n    }\n\n    return viewPosition;\n  }\n\n  _hasMulticursorModifier(data) {\n    switch (this.configuration.options.get(70\n    /* multiCursorModifier */\n    )) {\n      case 'altKey':\n        return data.altKey;\n\n      case 'ctrlKey':\n        return data.ctrlKey;\n\n      case 'metaKey':\n        return data.metaKey;\n\n      default:\n        return false;\n    }\n  }\n\n  _hasNonMulticursorModifier(data) {\n    switch (this.configuration.options.get(70\n    /* multiCursorModifier */\n    )) {\n      case 'altKey':\n        return data.ctrlKey || data.metaKey;\n\n      case 'ctrlKey':\n        return data.altKey || data.metaKey;\n\n      case 'metaKey':\n        return data.ctrlKey || data.altKey;\n\n      default:\n        return false;\n    }\n  }\n\n  dispatchMouse(data) {\n    const options = this.configuration.options;\n    const selectionClipboardIsOn = platform.isLinux && options.get(96\n    /* selectionClipboard */\n    );\n    const columnSelection = options.get(18\n    /* columnSelection */\n    );\n\n    if (data.middleButton && !selectionClipboardIsOn) {\n      this._columnSelect(data.position, data.mouseColumn, data.inSelectionMode);\n    } else if (data.startedOnLineNumbers) {\n      // If the dragging started on the gutter, then have operations work on the entire line\n      if (this._hasMulticursorModifier(data)) {\n        if (data.inSelectionMode) {\n          this._lastCursorLineSelect(data.position);\n        } else {\n          this._createCursor(data.position, true);\n        }\n      } else {\n        if (data.inSelectionMode) {\n          this._lineSelectDrag(data.position);\n        } else {\n          this._lineSelect(data.position);\n        }\n      }\n    } else if (data.mouseDownCount >= 4) {\n      this._selectAll();\n    } else if (data.mouseDownCount === 3) {\n      if (this._hasMulticursorModifier(data)) {\n        if (data.inSelectionMode) {\n          this._lastCursorLineSelectDrag(data.position);\n        } else {\n          this._lastCursorLineSelect(data.position);\n        }\n      } else {\n        if (data.inSelectionMode) {\n          this._lineSelectDrag(data.position);\n        } else {\n          this._lineSelect(data.position);\n        }\n      }\n    } else if (data.mouseDownCount === 2) {\n      if (this._hasMulticursorModifier(data)) {\n        this._lastCursorWordSelect(data.position);\n      } else {\n        if (data.inSelectionMode) {\n          this._wordSelectDrag(data.position);\n        } else {\n          this._wordSelect(data.position);\n        }\n      }\n    } else {\n      if (this._hasMulticursorModifier(data)) {\n        if (!this._hasNonMulticursorModifier(data)) {\n          if (data.shiftKey) {\n            this._columnSelect(data.position, data.mouseColumn, true);\n          } else {\n            // Do multi-cursor operations only when purely alt is pressed\n            if (data.inSelectionMode) {\n              this._lastCursorMoveToSelect(data.position);\n            } else {\n              this._createCursor(data.position, false);\n            }\n          }\n        }\n      } else {\n        if (data.inSelectionMode) {\n          if (data.altKey) {\n            this._columnSelect(data.position, data.mouseColumn, true);\n          } else {\n            if (columnSelection) {\n              this._columnSelect(data.position, data.mouseColumn, true);\n            } else {\n              this._moveToSelect(data.position);\n            }\n          }\n        } else {\n          this.moveTo(data.position);\n        }\n      }\n    }\n  }\n\n  _usualArgs(viewPosition) {\n    viewPosition = this._validateViewColumn(viewPosition);\n    return {\n      source: 'mouse',\n      position: this._convertViewToModelPosition(viewPosition),\n      viewPosition: viewPosition\n    };\n  }\n\n  moveTo(viewPosition) {\n    CoreNavigationCommands.MoveTo.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n  }\n\n  _moveToSelect(viewPosition) {\n    CoreNavigationCommands.MoveToSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n  }\n\n  _columnSelect(viewPosition, mouseColumn, doColumnSelect) {\n    viewPosition = this._validateViewColumn(viewPosition);\n    CoreNavigationCommands.ColumnSelect.runCoreEditorCommand(this.viewModel, {\n      source: 'mouse',\n      position: this._convertViewToModelPosition(viewPosition),\n      viewPosition: viewPosition,\n      mouseColumn: mouseColumn,\n      doColumnSelect: doColumnSelect\n    });\n  }\n\n  _createCursor(viewPosition, wholeLine) {\n    viewPosition = this._validateViewColumn(viewPosition);\n    CoreNavigationCommands.CreateCursor.runCoreEditorCommand(this.viewModel, {\n      source: 'mouse',\n      position: this._convertViewToModelPosition(viewPosition),\n      viewPosition: viewPosition,\n      wholeLine: wholeLine\n    });\n  }\n\n  _lastCursorMoveToSelect(viewPosition) {\n    CoreNavigationCommands.LastCursorMoveToSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n  }\n\n  _wordSelect(viewPosition) {\n    CoreNavigationCommands.WordSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n  }\n\n  _wordSelectDrag(viewPosition) {\n    CoreNavigationCommands.WordSelectDrag.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n  }\n\n  _lastCursorWordSelect(viewPosition) {\n    CoreNavigationCommands.LastCursorWordSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n  }\n\n  _lineSelect(viewPosition) {\n    CoreNavigationCommands.LineSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n  }\n\n  _lineSelectDrag(viewPosition) {\n    CoreNavigationCommands.LineSelectDrag.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n  }\n\n  _lastCursorLineSelect(viewPosition) {\n    CoreNavigationCommands.LastCursorLineSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n  }\n\n  _lastCursorLineSelectDrag(viewPosition) {\n    CoreNavigationCommands.LastCursorLineSelectDrag.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n  }\n\n  _selectAll() {\n    CoreNavigationCommands.SelectAll.runCoreEditorCommand(this.viewModel, {\n      source: 'mouse'\n    });\n  } // ----------------------\n\n\n  _convertViewToModelPosition(viewPosition) {\n    return this.viewModel.coordinatesConverter.convertViewPositionToModelPosition(viewPosition);\n  }\n\n  emitKeyDown(e) {\n    this.userInputEvents.emitKeyDown(e);\n  }\n\n  emitKeyUp(e) {\n    this.userInputEvents.emitKeyUp(e);\n  }\n\n  emitContextMenu(e) {\n    this.userInputEvents.emitContextMenu(e);\n  }\n\n  emitMouseMove(e) {\n    this.userInputEvents.emitMouseMove(e);\n  }\n\n  emitMouseLeave(e) {\n    this.userInputEvents.emitMouseLeave(e);\n  }\n\n  emitMouseUp(e) {\n    this.userInputEvents.emitMouseUp(e);\n  }\n\n  emitMouseDown(e) {\n    this.userInputEvents.emitMouseDown(e);\n  }\n\n  emitMouseDrag(e) {\n    this.userInputEvents.emitMouseDrag(e);\n  }\n\n  emitMouseDrop(e) {\n    this.userInputEvents.emitMouseDrop(e);\n  }\n\n  emitMouseDropCanceled() {\n    this.userInputEvents.emitMouseDropCanceled();\n  }\n\n  emitMouseWheel(e) {\n    this.userInputEvents.emitMouseWheel(e);\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/browser/view/viewController.js"],"names":["CoreNavigationCommands","Position","platform","ViewController","constructor","configuration","viewModel","userInputEvents","commandDelegate","paste","text","pasteOnNewLine","multicursorText","mode","type","compositionType","replacePrevCharCnt","replaceNextCharCnt","positionDelta","compositionStart","startComposition","compositionEnd","endComposition","cut","setSelection","modelSelection","SetSelection","runCoreEditorCommand","source","selection","_validateViewColumn","viewPosition","minColumn","getLineMinColumn","lineNumber","column","_hasMulticursorModifier","data","options","get","altKey","ctrlKey","metaKey","_hasNonMulticursorModifier","dispatchMouse","selectionClipboardIsOn","isLinux","columnSelection","middleButton","_columnSelect","position","mouseColumn","inSelectionMode","startedOnLineNumbers","_lastCursorLineSelect","_createCursor","_lineSelectDrag","_lineSelect","mouseDownCount","_selectAll","_lastCursorLineSelectDrag","_lastCursorWordSelect","_wordSelectDrag","_wordSelect","shiftKey","_lastCursorMoveToSelect","_moveToSelect","moveTo","_usualArgs","_convertViewToModelPosition","MoveTo","MoveToSelect","doColumnSelect","ColumnSelect","wholeLine","CreateCursor","LastCursorMoveToSelect","WordSelect","WordSelectDrag","LastCursorWordSelect","LineSelect","LineSelectDrag","LastCursorLineSelect","LastCursorLineSelectDrag","SelectAll","coordinatesConverter","convertViewPositionToModelPosition","emitKeyDown","e","emitKeyUp","emitContextMenu","emitMouseMove","emitMouseLeave","emitMouseUp","emitMouseDown","emitMouseDrag","emitMouseDrop","emitMouseDropCanceled","emitMouseWheel"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CoreNavigationCommands } from '../controller/coreCommands.js';\nimport { Position } from '../../common/core/position.js';\nimport * as platform from '../../../base/common/platform.js';\nexport class ViewController {\n    constructor(configuration, viewModel, userInputEvents, commandDelegate) {\n        this.configuration = configuration;\n        this.viewModel = viewModel;\n        this.userInputEvents = userInputEvents;\n        this.commandDelegate = commandDelegate;\n    }\n    paste(text, pasteOnNewLine, multicursorText, mode) {\n        this.commandDelegate.paste(text, pasteOnNewLine, multicursorText, mode);\n    }\n    type(text) {\n        this.commandDelegate.type(text);\n    }\n    compositionType(text, replacePrevCharCnt, replaceNextCharCnt, positionDelta) {\n        this.commandDelegate.compositionType(text, replacePrevCharCnt, replaceNextCharCnt, positionDelta);\n    }\n    compositionStart() {\n        this.commandDelegate.startComposition();\n    }\n    compositionEnd() {\n        this.commandDelegate.endComposition();\n    }\n    cut() {\n        this.commandDelegate.cut();\n    }\n    setSelection(modelSelection) {\n        CoreNavigationCommands.SetSelection.runCoreEditorCommand(this.viewModel, {\n            source: 'keyboard',\n            selection: modelSelection\n        });\n    }\n    _validateViewColumn(viewPosition) {\n        const minColumn = this.viewModel.getLineMinColumn(viewPosition.lineNumber);\n        if (viewPosition.column < minColumn) {\n            return new Position(viewPosition.lineNumber, minColumn);\n        }\n        return viewPosition;\n    }\n    _hasMulticursorModifier(data) {\n        switch (this.configuration.options.get(70 /* multiCursorModifier */)) {\n            case 'altKey':\n                return data.altKey;\n            case 'ctrlKey':\n                return data.ctrlKey;\n            case 'metaKey':\n                return data.metaKey;\n            default:\n                return false;\n        }\n    }\n    _hasNonMulticursorModifier(data) {\n        switch (this.configuration.options.get(70 /* multiCursorModifier */)) {\n            case 'altKey':\n                return data.ctrlKey || data.metaKey;\n            case 'ctrlKey':\n                return data.altKey || data.metaKey;\n            case 'metaKey':\n                return data.ctrlKey || data.altKey;\n            default:\n                return false;\n        }\n    }\n    dispatchMouse(data) {\n        const options = this.configuration.options;\n        const selectionClipboardIsOn = (platform.isLinux && options.get(96 /* selectionClipboard */));\n        const columnSelection = options.get(18 /* columnSelection */);\n        if (data.middleButton && !selectionClipboardIsOn) {\n            this._columnSelect(data.position, data.mouseColumn, data.inSelectionMode);\n        }\n        else if (data.startedOnLineNumbers) {\n            // If the dragging started on the gutter, then have operations work on the entire line\n            if (this._hasMulticursorModifier(data)) {\n                if (data.inSelectionMode) {\n                    this._lastCursorLineSelect(data.position);\n                }\n                else {\n                    this._createCursor(data.position, true);\n                }\n            }\n            else {\n                if (data.inSelectionMode) {\n                    this._lineSelectDrag(data.position);\n                }\n                else {\n                    this._lineSelect(data.position);\n                }\n            }\n        }\n        else if (data.mouseDownCount >= 4) {\n            this._selectAll();\n        }\n        else if (data.mouseDownCount === 3) {\n            if (this._hasMulticursorModifier(data)) {\n                if (data.inSelectionMode) {\n                    this._lastCursorLineSelectDrag(data.position);\n                }\n                else {\n                    this._lastCursorLineSelect(data.position);\n                }\n            }\n            else {\n                if (data.inSelectionMode) {\n                    this._lineSelectDrag(data.position);\n                }\n                else {\n                    this._lineSelect(data.position);\n                }\n            }\n        }\n        else if (data.mouseDownCount === 2) {\n            if (this._hasMulticursorModifier(data)) {\n                this._lastCursorWordSelect(data.position);\n            }\n            else {\n                if (data.inSelectionMode) {\n                    this._wordSelectDrag(data.position);\n                }\n                else {\n                    this._wordSelect(data.position);\n                }\n            }\n        }\n        else {\n            if (this._hasMulticursorModifier(data)) {\n                if (!this._hasNonMulticursorModifier(data)) {\n                    if (data.shiftKey) {\n                        this._columnSelect(data.position, data.mouseColumn, true);\n                    }\n                    else {\n                        // Do multi-cursor operations only when purely alt is pressed\n                        if (data.inSelectionMode) {\n                            this._lastCursorMoveToSelect(data.position);\n                        }\n                        else {\n                            this._createCursor(data.position, false);\n                        }\n                    }\n                }\n            }\n            else {\n                if (data.inSelectionMode) {\n                    if (data.altKey) {\n                        this._columnSelect(data.position, data.mouseColumn, true);\n                    }\n                    else {\n                        if (columnSelection) {\n                            this._columnSelect(data.position, data.mouseColumn, true);\n                        }\n                        else {\n                            this._moveToSelect(data.position);\n                        }\n                    }\n                }\n                else {\n                    this.moveTo(data.position);\n                }\n            }\n        }\n    }\n    _usualArgs(viewPosition) {\n        viewPosition = this._validateViewColumn(viewPosition);\n        return {\n            source: 'mouse',\n            position: this._convertViewToModelPosition(viewPosition),\n            viewPosition: viewPosition\n        };\n    }\n    moveTo(viewPosition) {\n        CoreNavigationCommands.MoveTo.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n    }\n    _moveToSelect(viewPosition) {\n        CoreNavigationCommands.MoveToSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n    }\n    _columnSelect(viewPosition, mouseColumn, doColumnSelect) {\n        viewPosition = this._validateViewColumn(viewPosition);\n        CoreNavigationCommands.ColumnSelect.runCoreEditorCommand(this.viewModel, {\n            source: 'mouse',\n            position: this._convertViewToModelPosition(viewPosition),\n            viewPosition: viewPosition,\n            mouseColumn: mouseColumn,\n            doColumnSelect: doColumnSelect\n        });\n    }\n    _createCursor(viewPosition, wholeLine) {\n        viewPosition = this._validateViewColumn(viewPosition);\n        CoreNavigationCommands.CreateCursor.runCoreEditorCommand(this.viewModel, {\n            source: 'mouse',\n            position: this._convertViewToModelPosition(viewPosition),\n            viewPosition: viewPosition,\n            wholeLine: wholeLine\n        });\n    }\n    _lastCursorMoveToSelect(viewPosition) {\n        CoreNavigationCommands.LastCursorMoveToSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n    }\n    _wordSelect(viewPosition) {\n        CoreNavigationCommands.WordSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n    }\n    _wordSelectDrag(viewPosition) {\n        CoreNavigationCommands.WordSelectDrag.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n    }\n    _lastCursorWordSelect(viewPosition) {\n        CoreNavigationCommands.LastCursorWordSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n    }\n    _lineSelect(viewPosition) {\n        CoreNavigationCommands.LineSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n    }\n    _lineSelectDrag(viewPosition) {\n        CoreNavigationCommands.LineSelectDrag.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n    }\n    _lastCursorLineSelect(viewPosition) {\n        CoreNavigationCommands.LastCursorLineSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n    }\n    _lastCursorLineSelectDrag(viewPosition) {\n        CoreNavigationCommands.LastCursorLineSelectDrag.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n    }\n    _selectAll() {\n        CoreNavigationCommands.SelectAll.runCoreEditorCommand(this.viewModel, { source: 'mouse' });\n    }\n    // ----------------------\n    _convertViewToModelPosition(viewPosition) {\n        return this.viewModel.coordinatesConverter.convertViewPositionToModelPosition(viewPosition);\n    }\n    emitKeyDown(e) {\n        this.userInputEvents.emitKeyDown(e);\n    }\n    emitKeyUp(e) {\n        this.userInputEvents.emitKeyUp(e);\n    }\n    emitContextMenu(e) {\n        this.userInputEvents.emitContextMenu(e);\n    }\n    emitMouseMove(e) {\n        this.userInputEvents.emitMouseMove(e);\n    }\n    emitMouseLeave(e) {\n        this.userInputEvents.emitMouseLeave(e);\n    }\n    emitMouseUp(e) {\n        this.userInputEvents.emitMouseUp(e);\n    }\n    emitMouseDown(e) {\n        this.userInputEvents.emitMouseDown(e);\n    }\n    emitMouseDrag(e) {\n        this.userInputEvents.emitMouseDrag(e);\n    }\n    emitMouseDrop(e) {\n        this.userInputEvents.emitMouseDrop(e);\n    }\n    emitMouseDropCanceled() {\n        this.userInputEvents.emitMouseDropCanceled();\n    }\n    emitMouseWheel(e) {\n        this.userInputEvents.emitMouseWheel(e);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}