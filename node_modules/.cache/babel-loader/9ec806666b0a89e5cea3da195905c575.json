{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from './strings.js';\nexport function buildReplaceStringWithCasePreserved(matches, pattern) {\n  if (matches && matches[0] !== '') {\n    const containsHyphens = validateSpecificSpecialCharacter(matches, pattern, '-');\n    const containsUnderscores = validateSpecificSpecialCharacter(matches, pattern, '_');\n\n    if (containsHyphens && !containsUnderscores) {\n      return buildReplaceStringForSpecificSpecialCharacter(matches, pattern, '-');\n    } else if (!containsHyphens && containsUnderscores) {\n      return buildReplaceStringForSpecificSpecialCharacter(matches, pattern, '_');\n    }\n\n    if (matches[0].toUpperCase() === matches[0]) {\n      return pattern.toUpperCase();\n    } else if (matches[0].toLowerCase() === matches[0]) {\n      return pattern.toLowerCase();\n    } else if (strings.containsUppercaseCharacter(matches[0][0]) && pattern.length > 0) {\n      return pattern[0].toUpperCase() + pattern.substr(1);\n    } else if (matches[0][0].toUpperCase() !== matches[0][0] && pattern.length > 0) {\n      return pattern[0].toLowerCase() + pattern.substr(1);\n    } else {\n      // we don't understand its pattern yet.\n      return pattern;\n    }\n  } else {\n    return pattern;\n  }\n}\n\nfunction validateSpecificSpecialCharacter(matches, pattern, specialCharacter) {\n  const doesContainSpecialCharacter = matches[0].indexOf(specialCharacter) !== -1 && pattern.indexOf(specialCharacter) !== -1;\n  return doesContainSpecialCharacter && matches[0].split(specialCharacter).length === pattern.split(specialCharacter).length;\n}\n\nfunction buildReplaceStringForSpecificSpecialCharacter(matches, pattern, specialCharacter) {\n  const splitPatternAtSpecialCharacter = pattern.split(specialCharacter);\n  const splitMatchAtSpecialCharacter = matches[0].split(specialCharacter);\n  let replaceString = '';\n  splitPatternAtSpecialCharacter.forEach((splitValue, index) => {\n    replaceString += buildReplaceStringWithCasePreserved([splitMatchAtSpecialCharacter[index]], splitValue) + specialCharacter;\n  });\n  return replaceString.slice(0, -1);\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/base/common/search.js"],"names":["strings","buildReplaceStringWithCasePreserved","matches","pattern","containsHyphens","validateSpecificSpecialCharacter","containsUnderscores","buildReplaceStringForSpecificSpecialCharacter","toUpperCase","toLowerCase","containsUppercaseCharacter","length","substr","specialCharacter","doesContainSpecialCharacter","indexOf","split","splitPatternAtSpecialCharacter","splitMatchAtSpecialCharacter","replaceString","forEach","splitValue","index","slice"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from './strings.js';\nexport function buildReplaceStringWithCasePreserved(matches, pattern) {\n    if (matches && (matches[0] !== '')) {\n        const containsHyphens = validateSpecificSpecialCharacter(matches, pattern, '-');\n        const containsUnderscores = validateSpecificSpecialCharacter(matches, pattern, '_');\n        if (containsHyphens && !containsUnderscores) {\n            return buildReplaceStringForSpecificSpecialCharacter(matches, pattern, '-');\n        }\n        else if (!containsHyphens && containsUnderscores) {\n            return buildReplaceStringForSpecificSpecialCharacter(matches, pattern, '_');\n        }\n        if (matches[0].toUpperCase() === matches[0]) {\n            return pattern.toUpperCase();\n        }\n        else if (matches[0].toLowerCase() === matches[0]) {\n            return pattern.toLowerCase();\n        }\n        else if (strings.containsUppercaseCharacter(matches[0][0]) && pattern.length > 0) {\n            return pattern[0].toUpperCase() + pattern.substr(1);\n        }\n        else if (matches[0][0].toUpperCase() !== matches[0][0] && pattern.length > 0) {\n            return pattern[0].toLowerCase() + pattern.substr(1);\n        }\n        else {\n            // we don't understand its pattern yet.\n            return pattern;\n        }\n    }\n    else {\n        return pattern;\n    }\n}\nfunction validateSpecificSpecialCharacter(matches, pattern, specialCharacter) {\n    const doesContainSpecialCharacter = matches[0].indexOf(specialCharacter) !== -1 && pattern.indexOf(specialCharacter) !== -1;\n    return doesContainSpecialCharacter && matches[0].split(specialCharacter).length === pattern.split(specialCharacter).length;\n}\nfunction buildReplaceStringForSpecificSpecialCharacter(matches, pattern, specialCharacter) {\n    const splitPatternAtSpecialCharacter = pattern.split(specialCharacter);\n    const splitMatchAtSpecialCharacter = matches[0].split(specialCharacter);\n    let replaceString = '';\n    splitPatternAtSpecialCharacter.forEach((splitValue, index) => {\n        replaceString += buildReplaceStringWithCasePreserved([splitMatchAtSpecialCharacter[index]], splitValue) + specialCharacter;\n    });\n    return replaceString.slice(0, -1);\n}\n"]},"metadata":{},"sourceType":"module"}