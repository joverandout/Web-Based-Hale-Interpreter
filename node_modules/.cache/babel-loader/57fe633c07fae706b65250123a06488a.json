{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class Lazy {\n  constructor(executor) {\n    this.executor = executor;\n    this._didRun = false;\n  }\n  /**\n   * Get the wrapped value.\n   *\n   * This will force evaluation of the lazy value if it has not been resolved yet. Lazy values are only\n   * resolved once. `getValue` will re-throw exceptions that are hit while resolving the value\n   */\n\n\n  getValue() {\n    if (!this._didRun) {\n      try {\n        this._value = this.executor();\n      } catch (err) {\n        this._error = err;\n      } finally {\n        this._didRun = true;\n      }\n    }\n\n    if (this._error) {\n      throw this._error;\n    }\n\n    return this._value;\n  }\n  /**\n   * Get the wrapped value without forcing evaluation.\n   */\n\n\n  get rawValue() {\n    return this._value;\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/base/common/lazy.js"],"names":["Lazy","constructor","executor","_didRun","getValue","_value","err","_error","rawValue"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,MAAMA,IAAN,CAAW;AACdC,EAAAA,WAAW,CAACC,QAAD,EAAW;AAClB,SAAKA,QAAL,GAAgBA,QAAhB;AACA,SAAKC,OAAL,GAAe,KAAf;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,QAAQ,GAAG;AACP,QAAI,CAAC,KAAKD,OAAV,EAAmB;AACf,UAAI;AACA,aAAKE,MAAL,GAAc,KAAKH,QAAL,EAAd;AACH,OAFD,CAGA,OAAOI,GAAP,EAAY;AACR,aAAKC,MAAL,GAAcD,GAAd;AACH,OALD,SAMQ;AACJ,aAAKH,OAAL,GAAe,IAAf;AACH;AACJ;;AACD,QAAI,KAAKI,MAAT,EAAiB;AACb,YAAM,KAAKA,MAAX;AACH;;AACD,WAAO,KAAKF,MAAZ;AACH;AACD;AACJ;AACA;;;AACgB,MAARG,QAAQ,GAAG;AAAE,WAAO,KAAKH,MAAZ;AAAqB;;AA/BxB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class Lazy {\n    constructor(executor) {\n        this.executor = executor;\n        this._didRun = false;\n    }\n    /**\n     * Get the wrapped value.\n     *\n     * This will force evaluation of the lazy value if it has not been resolved yet. Lazy values are only\n     * resolved once. `getValue` will re-throw exceptions that are hit while resolving the value\n     */\n    getValue() {\n        if (!this._didRun) {\n            try {\n                this._value = this.executor();\n            }\n            catch (err) {\n                this._error = err;\n            }\n            finally {\n                this._didRun = true;\n            }\n        }\n        if (this._error) {\n            throw this._error;\n        }\n        return this._value;\n    }\n    /**\n     * Get the wrapped value without forcing evaluation.\n     */\n    get rawValue() { return this._value; }\n}\n"]},"metadata":{},"sourceType":"module"}