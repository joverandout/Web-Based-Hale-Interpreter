{"ast":null,"code":"export default function checkDuplicateRouteNames(state) {\n  const duplicates = [];\n\n  const getRouteNames = (location, state) => {\n    state.routes.forEach(route => {\n      var _route$state, _route$state$routeNam;\n\n      const currentLocation = location ? `${location} > ${route.name}` : route.name;\n      (_route$state = route.state) === null || _route$state === void 0 ? void 0 : (_route$state$routeNam = _route$state.routeNames) === null || _route$state$routeNam === void 0 ? void 0 : _route$state$routeNam.forEach(routeName => {\n        if (routeName === route.name) {\n          duplicates.push([currentLocation, `${currentLocation} > ${route.name}`]);\n        }\n      });\n\n      if (route.state) {\n        getRouteNames(currentLocation, route.state);\n      }\n    });\n  };\n\n  getRouteNames('', state);\n  return duplicates;\n}","map":{"version":3,"sources":["checkDuplicateRouteNames.tsx"],"names":["duplicates","getRouteNames","state","route","currentLocation","location","name","routeName"],"mappings":"AAEA,eAAe,SAAA,wBAAA,CAAA,KAAA,EAA0D;AACvE,QAAMA,UAAsB,GAA5B,EAAA;;AAEA,QAAMC,aAAa,GAAG,CAAA,QAAA,EAAA,KAAA,KAGjB;AACHC,IAAAA,KAAK,CAALA,MAAAA,CAAAA,OAAAA,CAAsBC,KAAD,IAAmC;AAAA,UAAA,YAAA,EAAA,qBAAA;;AACtD,YAAMC,eAAe,GAAGC,QAAQ,GAC3B,GAAEA,QAAS,MAAKF,KAAK,CAACG,IADK,EAAA,GAE5BH,KAAK,CAFT,IAAA;AAIA,OAAA,YAAA,GAAA,KAAK,CAAL,KAAA,MAAA,IAAA,IAAA,YAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAA,qBAAA,GAAA,YAAA,CAAA,UAAA,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,qBAAA,CAAA,OAAA,CAAkCI,SAAD,IAAe;AAC9C,YAAIA,SAAS,KAAKJ,KAAK,CAAvB,IAAA,EAA8B;AAC5BH,UAAAA,UAAU,CAAVA,IAAAA,CAAgB,CAAA,eAAA,EAEb,GAAEI,eAAgB,MAAKD,KAAK,CAACG,IAFhCN,EAAgB,CAAhBA;AAID;AANH,OAAA,CAAA;;AASA,UAAIG,KAAK,CAAT,KAAA,EAAiB;AACfF,QAAAA,aAAa,CAAA,eAAA,EAAkBE,KAAK,CAApCF,KAAa,CAAbA;AACD;AAhBHC,KAAAA;AAJF,GAAA;;AAwBAD,EAAAA,aAAa,CAAA,EAAA,EAAbA,KAAa,CAAbA;AAEA,SAAA,UAAA;AACD","sourcesContent":["import type { NavigationState, PartialState } from '@react-navigation/routers';\n\nexport default function checkDuplicateRouteNames(state: NavigationState) {\n  const duplicates: string[][] = [];\n\n  const getRouteNames = (\n    location: string,\n    state: NavigationState | PartialState<NavigationState>\n  ) => {\n    state.routes.forEach((route: typeof state.routes[0]) => {\n      const currentLocation = location\n        ? `${location} > ${route.name}`\n        : route.name;\n\n      route.state?.routeNames?.forEach((routeName) => {\n        if (routeName === route.name) {\n          duplicates.push([\n            currentLocation,\n            `${currentLocation} > ${route.name}`,\n          ]);\n        }\n      });\n\n      if (route.state) {\n        getRouteNames(currentLocation, route.state);\n      }\n    });\n  };\n\n  getRouteNames('', state);\n\n  return duplicates;\n}\n"]},"metadata":{},"sourceType":"module"}