{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../base/common/event.js';\nimport { toDisposable } from '../../base/common/lifecycle.js';\nimport { shouldSynchronizeModel } from './model.js';\nimport { score } from './languageSelector.js';\n\nfunction isExclusive(selector) {\n  if (typeof selector === 'string') {\n    return false;\n  } else if (Array.isArray(selector)) {\n    return selector.every(isExclusive);\n  } else {\n    return !!selector.exclusive; // TODO: microsoft/TypeScript#42768\n  }\n}\n\nexport class LanguageFeatureRegistry {\n  constructor() {\n    this._clock = 0;\n    this._entries = [];\n    this._onDidChange = new Emitter();\n  }\n\n  get onDidChange() {\n    return this._onDidChange.event;\n  }\n\n  register(selector, provider) {\n    let entry = {\n      selector,\n      provider,\n      _score: -1,\n      _time: this._clock++\n    };\n\n    this._entries.push(entry);\n\n    this._lastCandidate = undefined;\n\n    this._onDidChange.fire(this._entries.length);\n\n    return toDisposable(() => {\n      if (entry) {\n        const idx = this._entries.indexOf(entry);\n\n        if (idx >= 0) {\n          this._entries.splice(idx, 1);\n\n          this._lastCandidate = undefined;\n\n          this._onDidChange.fire(this._entries.length);\n\n          entry = undefined;\n        }\n      }\n    });\n  }\n\n  has(model) {\n    return this.all(model).length > 0;\n  }\n\n  all(model) {\n    if (!model) {\n      return [];\n    }\n\n    this._updateScores(model);\n\n    const result = []; // from registry\n\n    for (let entry of this._entries) {\n      if (entry._score > 0) {\n        result.push(entry.provider);\n      }\n    }\n\n    return result;\n  }\n\n  ordered(model) {\n    const result = [];\n\n    this._orderedForEach(model, entry => result.push(entry.provider));\n\n    return result;\n  }\n\n  orderedGroups(model) {\n    const result = [];\n    let lastBucket;\n    let lastBucketScore;\n\n    this._orderedForEach(model, entry => {\n      if (lastBucket && lastBucketScore === entry._score) {\n        lastBucket.push(entry.provider);\n      } else {\n        lastBucketScore = entry._score;\n        lastBucket = [entry.provider];\n        result.push(lastBucket);\n      }\n    });\n\n    return result;\n  }\n\n  _orderedForEach(model, callback) {\n    if (!model) {\n      return;\n    }\n\n    this._updateScores(model);\n\n    for (const entry of this._entries) {\n      if (entry._score > 0) {\n        callback(entry);\n      }\n    }\n  }\n\n  _updateScores(model) {\n    const candidate = {\n      uri: model.uri.toString(),\n      language: model.getLanguageId()\n    };\n\n    if (this._lastCandidate && this._lastCandidate.language === candidate.language && this._lastCandidate.uri === candidate.uri) {\n      // nothing has changed\n      return;\n    }\n\n    this._lastCandidate = candidate;\n\n    for (let entry of this._entries) {\n      entry._score = score(entry.selector, model.uri, model.getLanguageId(), shouldSynchronizeModel(model));\n\n      if (isExclusive(entry.selector) && entry._score > 0) {\n        // support for one exclusive selector that overwrites\n        // any other selector\n        for (let entry of this._entries) {\n          entry._score = 0;\n        }\n\n        entry._score = 1000;\n        break;\n      }\n    } // needs sorting\n\n\n    this._entries.sort(LanguageFeatureRegistry._compareByScoreAndTime);\n  }\n\n  static _compareByScoreAndTime(a, b) {\n    if (a._score < b._score) {\n      return 1;\n    } else if (a._score > b._score) {\n      return -1;\n    } else if (a._time < b._time) {\n      return 1;\n    } else if (a._time > b._time) {\n      return -1;\n    } else {\n      return 0;\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/joe/DISSY/flask_test_1/react-flask-app/node_modules/monaco-editor/esm/vs/editor/common/languageFeatureRegistry.js"],"names":["Emitter","toDisposable","shouldSynchronizeModel","score","isExclusive","selector","Array","isArray","every","exclusive","LanguageFeatureRegistry","constructor","_clock","_entries","_onDidChange","onDidChange","event","register","provider","entry","_score","_time","push","_lastCandidate","undefined","fire","length","idx","indexOf","splice","has","model","all","_updateScores","result","ordered","_orderedForEach","orderedGroups","lastBucket","lastBucketScore","callback","candidate","uri","toString","language","getLanguageId","sort","_compareByScoreAndTime","a","b"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../base/common/event.js';\nimport { toDisposable } from '../../base/common/lifecycle.js';\nimport { shouldSynchronizeModel } from './model.js';\nimport { score } from './languageSelector.js';\nfunction isExclusive(selector) {\n    if (typeof selector === 'string') {\n        return false;\n    }\n    else if (Array.isArray(selector)) {\n        return selector.every(isExclusive);\n    }\n    else {\n        return !!selector.exclusive; // TODO: microsoft/TypeScript#42768\n    }\n}\nexport class LanguageFeatureRegistry {\n    constructor() {\n        this._clock = 0;\n        this._entries = [];\n        this._onDidChange = new Emitter();\n    }\n    get onDidChange() {\n        return this._onDidChange.event;\n    }\n    register(selector, provider) {\n        let entry = {\n            selector,\n            provider,\n            _score: -1,\n            _time: this._clock++\n        };\n        this._entries.push(entry);\n        this._lastCandidate = undefined;\n        this._onDidChange.fire(this._entries.length);\n        return toDisposable(() => {\n            if (entry) {\n                const idx = this._entries.indexOf(entry);\n                if (idx >= 0) {\n                    this._entries.splice(idx, 1);\n                    this._lastCandidate = undefined;\n                    this._onDidChange.fire(this._entries.length);\n                    entry = undefined;\n                }\n            }\n        });\n    }\n    has(model) {\n        return this.all(model).length > 0;\n    }\n    all(model) {\n        if (!model) {\n            return [];\n        }\n        this._updateScores(model);\n        const result = [];\n        // from registry\n        for (let entry of this._entries) {\n            if (entry._score > 0) {\n                result.push(entry.provider);\n            }\n        }\n        return result;\n    }\n    ordered(model) {\n        const result = [];\n        this._orderedForEach(model, entry => result.push(entry.provider));\n        return result;\n    }\n    orderedGroups(model) {\n        const result = [];\n        let lastBucket;\n        let lastBucketScore;\n        this._orderedForEach(model, entry => {\n            if (lastBucket && lastBucketScore === entry._score) {\n                lastBucket.push(entry.provider);\n            }\n            else {\n                lastBucketScore = entry._score;\n                lastBucket = [entry.provider];\n                result.push(lastBucket);\n            }\n        });\n        return result;\n    }\n    _orderedForEach(model, callback) {\n        if (!model) {\n            return;\n        }\n        this._updateScores(model);\n        for (const entry of this._entries) {\n            if (entry._score > 0) {\n                callback(entry);\n            }\n        }\n    }\n    _updateScores(model) {\n        const candidate = {\n            uri: model.uri.toString(),\n            language: model.getLanguageId()\n        };\n        if (this._lastCandidate\n            && this._lastCandidate.language === candidate.language\n            && this._lastCandidate.uri === candidate.uri) {\n            // nothing has changed\n            return;\n        }\n        this._lastCandidate = candidate;\n        for (let entry of this._entries) {\n            entry._score = score(entry.selector, model.uri, model.getLanguageId(), shouldSynchronizeModel(model));\n            if (isExclusive(entry.selector) && entry._score > 0) {\n                // support for one exclusive selector that overwrites\n                // any other selector\n                for (let entry of this._entries) {\n                    entry._score = 0;\n                }\n                entry._score = 1000;\n                break;\n            }\n        }\n        // needs sorting\n        this._entries.sort(LanguageFeatureRegistry._compareByScoreAndTime);\n    }\n    static _compareByScoreAndTime(a, b) {\n        if (a._score < b._score) {\n            return 1;\n        }\n        else if (a._score > b._score) {\n            return -1;\n        }\n        else if (a._time < b._time) {\n            return 1;\n        }\n        else if (a._time > b._time) {\n            return -1;\n        }\n        else {\n            return 0;\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}